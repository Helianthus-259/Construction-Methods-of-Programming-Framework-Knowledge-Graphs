[
  {
    "head": "org.springframework.aot.hint.annotation.AnnotatedMethodTests",
    "headType": "class",
    "relation": "use",
    "tail": "@Nested",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.annotation.AnnotatedMethodTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint.annotation;\n\nimport java.lang.reflect.AnnotatedElement;\nimport java.lang.reflect.Method;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.function.Consumer;\n\nimport org.junit.jupiter.api.Nested;\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.aot.hint.ExecutableHint;\nimport org.springframework.aot.hint.MemberCategory;\nimport org.springframework.aot.hint.RuntimeHints;\nimport org.springframework.aot.hint.TypeHint;\nimport org.springframework.aot.hint.TypeReference;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatIllegalStateException;\n\n/**\n * Tests for {@link RegisterReflectionReflectiveProcessor}.\n *\n * @author Stephane Nicoll\n * @since 6.2\n */\nclass RegisterReflectionReflectiveProcessorTests {\n\n\tprivate static final List<String> NO_METHODS = Collections.emptyList();\n\n\tprivate final RegisterReflectionReflectiveProcessor processor = new RegisterReflectionReflectiveProcessor();\n\n\tprivate final RuntimeHints hints = new RuntimeHints();\n\n\n\t@Nested\n\tclass AnnotatedTypeTests {\n\n\t\t@Test\n\t\tvoid registerReflectionWithMemberCategory() {\n\t\t\tregisterReflectionHints(RegistrationSimple.class);\n\t\t\tassertBasicTypeHint(SimplePojo.class, NO_METHODS, List.of(MemberCategory.INVOKE_PUBLIC_METHODS));\n\t\t}\n\n\t\t@Test\n\t\tvoid registerReflectionForMultipleTargets() {\n\t\t\tregisterReflectionHints(RegistrationMultipleTargets.class);\n\t\t\tassertThat(hints.reflection().typeHints()).allSatisfy(\n\t\t\t\t\thasOnlyMemberCategories(MemberCategory.INVOKE_PUBLIC_METHODS));\n\t\t\tassertThat(hints.reflection().typeHints().map(TypeHint::getType))\n\t\t\t\t\t.hasSameElementsAs(TypeReference.listOf(Number.class, Double.class, Integer.class, Float.class));\n\t\t}\n\n\t\t@Test\n\t\tvoid registerReflectionOnTargetClass() {\n\t\t\tregisterReflectionHints(AnnotatedSimplePojo.class);\n\t\t\tassertBasicTypeHint(AnnotatedSimplePojo.class, NO_METHODS,\n\t\t\t\t\tList.of(MemberCategory.INVOKE_DECLARED_CONSTRUCTORS));\n\t\t}\n\t}\n\n\n\t@Nested\n\tclass AnnotatedMethodTests {\n\n\t\t@Test\n\t\tvoid registerReflectionForStaticField() throws NoSuchMethodException {\n\t\t\tMethod method = RegistrationMethod.class.getDeclaredMethod(\"doReflection\");\n\t\t\tregisterReflectionHints(method);\n\t\t\tassertBasicTypeHint(SimplePojo.class, NO_METHODS, List.of(MemberCategory.INVOKE_DECLARED_METHODS));\n\t\t}\n\n\t\t@Test\n\t\tvoid registerReflectionWithoutTarget() throws NoSuchMethodException {\n\t\t\tMethod method = RegistrationMethodWithoutTarget.class.getDeclaredMethod(\"doReflection\");\n\t\t\tassertThatIllegalStateException()\n\t\t\t\t\t.isThrownBy(() -> registerReflectionHints(method))\n\t\t\t\t\t.withMessageContaining(\"At least one class must be specified\")\n\t\t\t\t\t.withMessageContaining(method.toString());\n\t\t}\n\t}\n\n\n\tprivate void assertBasicTypeHint(Class<?> type, List<String> methodNames, List<MemberCategory> memberCategories) {\n\t\tTypeHint typeHint = getTypeHint(type);\n\t\tassertThat(typeHint.methods()).map(ExecutableHint::getName).hasSameElementsAs(methodNames);\n\t\tassertThat(typeHint.getMemberCategories()).hasSameElementsAs(memberCategories);\n\t\tassertThat(typeHint.fields()).isEmpty();\n\t\tassertThat(typeHint.constructors()).isEmpty();\n\t}\n\n\tprivate Consumer<TypeHint> hasOnlyMemberCategories(MemberCategory... categories) {\n\t\treturn typeHint -> {\n\t\t\tassertThat(typeHint.fields()).isEmpty();\n\t\t\tassertThat(typeHint.methods()).isEmpty();\n\t\t\tassertThat(typeHint.constructors()).isEmpty();\n\t\t\tassertThat(typeHint.getMemberCategories()).containsOnly(categories);\n\t\t};\n\t}\n\n\tprivate TypeHint getTypeHint(Class<?> target) {\n\t\tTypeHint typeHint = hints.reflection().getTypeHint(target);\n\t\tassertThat(typeHint).isNotNull();\n\t\treturn typeHint;\n\t}\n\n\tprivate void registerReflectionHints(AnnotatedElement annotatedElement) {\n\t\tthis.processor.registerReflectionHints(this.hints.reflection(), annotatedElement);\n\t}\n\n\n\t@RegisterReflection(classes = SimplePojo.class, memberCategories = MemberCategory.INVOKE_PUBLIC_METHODS)\n\tstatic class RegistrationSimple {\n\t}\n\n\n\t@RegisterReflection(classes = { Number.class, Double.class },\n\t\t\tclassNames = { \"java.lang.Integer\", \"java.lang.Float\" }, memberCategories = MemberCategory.INVOKE_PUBLIC_METHODS)\n\tstatic class RegistrationMultipleTargets {\n\t}\n\n\n\tstatic class RegistrationMethod {\n\n\t\t@RegisterReflection(classes = SimplePojo.class, memberCategories = MemberCategory.INVOKE_DECLARED_METHODS)\n\t\tprivate void doReflection() {\n\n\t\t}\n\t}\n\n\n\tstatic class RegistrationMethodWithoutTarget {\n\n\t\t@RegisterReflection(memberCategories = MemberCategory.INVOKE_DECLARED_CONSTRUCTORS)\n\t\tprivate void doReflection() {\n\t\t}\n\t}\n\n\n\tstatic class SimplePojo {\n\n\t\tprivate String name;\n\n\t\tprivate String description;\n\n\t\tpublic String getName() {\n\t\t\treturn this.name;\n\t\t}\n\n\t\tpublic void setName(String name) {\n\t\t\tthis.name = name;\n\t\t}\n\n\t\tpublic String getDescription() {\n\t\t\treturn this.description;\n\t\t}\n\n\t\tpublic void setDescription(String description) {\n\t\t\tthis.description = description;\n\t\t}\n\t}\n\n\n\t@RegisterReflection(memberCategories = MemberCategory.INVOKE_DECLARED_CONSTRUCTORS)\n\tstatic class AnnotatedSimplePojo {\n\n\t\tAnnotatedSimplePojo(String test) {\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.hint.annotation.AnnotatedMethodTests#registerReflectionForStaticField()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid registerReflectionForStaticField() throws NoSuchMethodException {\r\n    Method method = RegistrationMethod.class.getDeclaredMethod(\"doReflection\");\r\n    registerReflectionHints(method);\r\n    assertBasicTypeHint(SimplePojo.class, NO_METHODS, List.of(MemberCategory.INVOKE_DECLARED_METHODS));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.annotation.AnnotatedMethodTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.annotation.AnnotatedMethodTests#registerReflectionForStaticField()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.annotation.AnnotatedMethodTests#registerReflectionForStaticField()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.annotation.AnnotatedMethodTests#registerReflectionWithoutTarget()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid registerReflectionWithoutTarget() throws NoSuchMethodException {\r\n    Method method = RegistrationMethodWithoutTarget.class.getDeclaredMethod(\"doReflection\");\r\n    assertThatIllegalStateException().isThrownBy(() -> registerReflectionHints(method)).withMessageContaining(\"At least one class must be specified\").withMessageContaining(method.toString());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.annotation.AnnotatedMethodTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.annotation.AnnotatedMethodTests#registerReflectionWithoutTarget()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.annotation.AnnotatedMethodTests#registerReflectionWithoutTarget()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.annotation.RegistrationSimple",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.hint.annotation.RegistrationSimple",
    "headType": "class",
    "relation": "use",
    "tail": "@RegisterReflection",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.annotation.RegistrationSimple",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint.annotation;\n\nimport java.lang.reflect.AnnotatedElement;\nimport java.lang.reflect.Method;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.function.Consumer;\n\nimport org.junit.jupiter.api.Nested;\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.aot.hint.ExecutableHint;\nimport org.springframework.aot.hint.MemberCategory;\nimport org.springframework.aot.hint.RuntimeHints;\nimport org.springframework.aot.hint.TypeHint;\nimport org.springframework.aot.hint.TypeReference;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatIllegalStateException;\n\n/**\n * Tests for {@link RegisterReflectionReflectiveProcessor}.\n *\n * @author Stephane Nicoll\n * @since 6.2\n */\nclass RegisterReflectionReflectiveProcessorTests {\n\n\tprivate static final List<String> NO_METHODS = Collections.emptyList();\n\n\tprivate final RegisterReflectionReflectiveProcessor processor = new RegisterReflectionReflectiveProcessor();\n\n\tprivate final RuntimeHints hints = new RuntimeHints();\n\n\n\t@Nested\n\tclass AnnotatedTypeTests {\n\n\t\t@Test\n\t\tvoid registerReflectionWithMemberCategory() {\n\t\t\tregisterReflectionHints(RegistrationSimple.class);\n\t\t\tassertBasicTypeHint(SimplePojo.class, NO_METHODS, List.of(MemberCategory.INVOKE_PUBLIC_METHODS));\n\t\t}\n\n\t\t@Test\n\t\tvoid registerReflectionForMultipleTargets() {\n\t\t\tregisterReflectionHints(RegistrationMultipleTargets.class);\n\t\t\tassertThat(hints.reflection().typeHints()).allSatisfy(\n\t\t\t\t\thasOnlyMemberCategories(MemberCategory.INVOKE_PUBLIC_METHODS));\n\t\t\tassertThat(hints.reflection().typeHints().map(TypeHint::getType))\n\t\t\t\t\t.hasSameElementsAs(TypeReference.listOf(Number.class, Double.class, Integer.class, Float.class));\n\t\t}\n\n\t\t@Test\n\t\tvoid registerReflectionOnTargetClass() {\n\t\t\tregisterReflectionHints(AnnotatedSimplePojo.class);\n\t\t\tassertBasicTypeHint(AnnotatedSimplePojo.class, NO_METHODS,\n\t\t\t\t\tList.of(MemberCategory.INVOKE_DECLARED_CONSTRUCTORS));\n\t\t}\n\t}\n\n\n\t@Nested\n\tclass AnnotatedMethodTests {\n\n\t\t@Test\n\t\tvoid registerReflectionForStaticField() throws NoSuchMethodException {\n\t\t\tMethod method = RegistrationMethod.class.getDeclaredMethod(\"doReflection\");\n\t\t\tregisterReflectionHints(method);\n\t\t\tassertBasicTypeHint(SimplePojo.class, NO_METHODS, List.of(MemberCategory.INVOKE_DECLARED_METHODS));\n\t\t}\n\n\t\t@Test\n\t\tvoid registerReflectionWithoutTarget() throws NoSuchMethodException {\n\t\t\tMethod method = RegistrationMethodWithoutTarget.class.getDeclaredMethod(\"doReflection\");\n\t\t\tassertThatIllegalStateException()\n\t\t\t\t\t.isThrownBy(() -> registerReflectionHints(method))\n\t\t\t\t\t.withMessageContaining(\"At least one class must be specified\")\n\t\t\t\t\t.withMessageContaining(method.toString());\n\t\t}\n\t}\n\n\n\tprivate void assertBasicTypeHint(Class<?> type, List<String> methodNames, List<MemberCategory> memberCategories) {\n\t\tTypeHint typeHint = getTypeHint(type);\n\t\tassertThat(typeHint.methods()).map(ExecutableHint::getName).hasSameElementsAs(methodNames);\n\t\tassertThat(typeHint.getMemberCategories()).hasSameElementsAs(memberCategories);\n\t\tassertThat(typeHint.fields()).isEmpty();\n\t\tassertThat(typeHint.constructors()).isEmpty();\n\t}\n\n\tprivate Consumer<TypeHint> hasOnlyMemberCategories(MemberCategory... categories) {\n\t\treturn typeHint -> {\n\t\t\tassertThat(typeHint.fields()).isEmpty();\n\t\t\tassertThat(typeHint.methods()).isEmpty();\n\t\t\tassertThat(typeHint.constructors()).isEmpty();\n\t\t\tassertThat(typeHint.getMemberCategories()).containsOnly(categories);\n\t\t};\n\t}\n\n\tprivate TypeHint getTypeHint(Class<?> target) {\n\t\tTypeHint typeHint = hints.reflection().getTypeHint(target);\n\t\tassertThat(typeHint).isNotNull();\n\t\treturn typeHint;\n\t}\n\n\tprivate void registerReflectionHints(AnnotatedElement annotatedElement) {\n\t\tthis.processor.registerReflectionHints(this.hints.reflection(), annotatedElement);\n\t}\n\n\n\t@RegisterReflection(classes = SimplePojo.class, memberCategories = MemberCategory.INVOKE_PUBLIC_METHODS)\n\tstatic class RegistrationSimple {\n\t}\n\n\n\t@RegisterReflection(classes = { Number.class, Double.class },\n\t\t\tclassNames = { \"java.lang.Integer\", \"java.lang.Float\" }, memberCategories = MemberCategory.INVOKE_PUBLIC_METHODS)\n\tstatic class RegistrationMultipleTargets {\n\t}\n\n\n\tstatic class RegistrationMethod {\n\n\t\t@RegisterReflection(classes = SimplePojo.class, memberCategories = MemberCategory.INVOKE_DECLARED_METHODS)\n\t\tprivate void doReflection() {\n\n\t\t}\n\t}\n\n\n\tstatic class RegistrationMethodWithoutTarget {\n\n\t\t@RegisterReflection(memberCategories = MemberCategory.INVOKE_DECLARED_CONSTRUCTORS)\n\t\tprivate void doReflection() {\n\t\t}\n\t}\n\n\n\tstatic class SimplePojo {\n\n\t\tprivate String name;\n\n\t\tprivate String description;\n\n\t\tpublic String getName() {\n\t\t\treturn this.name;\n\t\t}\n\n\t\tpublic void setName(String name) {\n\t\t\tthis.name = name;\n\t\t}\n\n\t\tpublic String getDescription() {\n\t\t\treturn this.description;\n\t\t}\n\n\t\tpublic void setDescription(String description) {\n\t\t\tthis.description = description;\n\t\t}\n\t}\n\n\n\t@RegisterReflection(memberCategories = MemberCategory.INVOKE_DECLARED_CONSTRUCTORS)\n\tstatic class AnnotatedSimplePojo {\n\n\t\tAnnotatedSimplePojo(String test) {\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.hint.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.annotation.RegistrationMultipleTargets",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.hint.annotation.RegistrationMultipleTargets",
    "headType": "class",
    "relation": "use",
    "tail": "@RegisterReflection",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.annotation.RegistrationMultipleTargets",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint.annotation;\n\nimport java.lang.reflect.AnnotatedElement;\nimport java.lang.reflect.Method;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.function.Consumer;\n\nimport org.junit.jupiter.api.Nested;\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.aot.hint.ExecutableHint;\nimport org.springframework.aot.hint.MemberCategory;\nimport org.springframework.aot.hint.RuntimeHints;\nimport org.springframework.aot.hint.TypeHint;\nimport org.springframework.aot.hint.TypeReference;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatIllegalStateException;\n\n/**\n * Tests for {@link RegisterReflectionReflectiveProcessor}.\n *\n * @author Stephane Nicoll\n * @since 6.2\n */\nclass RegisterReflectionReflectiveProcessorTests {\n\n\tprivate static final List<String> NO_METHODS = Collections.emptyList();\n\n\tprivate final RegisterReflectionReflectiveProcessor processor = new RegisterReflectionReflectiveProcessor();\n\n\tprivate final RuntimeHints hints = new RuntimeHints();\n\n\n\t@Nested\n\tclass AnnotatedTypeTests {\n\n\t\t@Test\n\t\tvoid registerReflectionWithMemberCategory() {\n\t\t\tregisterReflectionHints(RegistrationSimple.class);\n\t\t\tassertBasicTypeHint(SimplePojo.class, NO_METHODS, List.of(MemberCategory.INVOKE_PUBLIC_METHODS));\n\t\t}\n\n\t\t@Test\n\t\tvoid registerReflectionForMultipleTargets() {\n\t\t\tregisterReflectionHints(RegistrationMultipleTargets.class);\n\t\t\tassertThat(hints.reflection().typeHints()).allSatisfy(\n\t\t\t\t\thasOnlyMemberCategories(MemberCategory.INVOKE_PUBLIC_METHODS));\n\t\t\tassertThat(hints.reflection().typeHints().map(TypeHint::getType))\n\t\t\t\t\t.hasSameElementsAs(TypeReference.listOf(Number.class, Double.class, Integer.class, Float.class));\n\t\t}\n\n\t\t@Test\n\t\tvoid registerReflectionOnTargetClass() {\n\t\t\tregisterReflectionHints(AnnotatedSimplePojo.class);\n\t\t\tassertBasicTypeHint(AnnotatedSimplePojo.class, NO_METHODS,\n\t\t\t\t\tList.of(MemberCategory.INVOKE_DECLARED_CONSTRUCTORS));\n\t\t}\n\t}\n\n\n\t@Nested\n\tclass AnnotatedMethodTests {\n\n\t\t@Test\n\t\tvoid registerReflectionForStaticField() throws NoSuchMethodException {\n\t\t\tMethod method = RegistrationMethod.class.getDeclaredMethod(\"doReflection\");\n\t\t\tregisterReflectionHints(method);\n\t\t\tassertBasicTypeHint(SimplePojo.class, NO_METHODS, List.of(MemberCategory.INVOKE_DECLARED_METHODS));\n\t\t}\n\n\t\t@Test\n\t\tvoid registerReflectionWithoutTarget() throws NoSuchMethodException {\n\t\t\tMethod method = RegistrationMethodWithoutTarget.class.getDeclaredMethod(\"doReflection\");\n\t\t\tassertThatIllegalStateException()\n\t\t\t\t\t.isThrownBy(() -> registerReflectionHints(method))\n\t\t\t\t\t.withMessageContaining(\"At least one class must be specified\")\n\t\t\t\t\t.withMessageContaining(method.toString());\n\t\t}\n\t}\n\n\n\tprivate void assertBasicTypeHint(Class<?> type, List<String> methodNames, List<MemberCategory> memberCategories) {\n\t\tTypeHint typeHint = getTypeHint(type);\n\t\tassertThat(typeHint.methods()).map(ExecutableHint::getName).hasSameElementsAs(methodNames);\n\t\tassertThat(typeHint.getMemberCategories()).hasSameElementsAs(memberCategories);\n\t\tassertThat(typeHint.fields()).isEmpty();\n\t\tassertThat(typeHint.constructors()).isEmpty();\n\t}\n\n\tprivate Consumer<TypeHint> hasOnlyMemberCategories(MemberCategory... categories) {\n\t\treturn typeHint -> {\n\t\t\tassertThat(typeHint.fields()).isEmpty();\n\t\t\tassertThat(typeHint.methods()).isEmpty();\n\t\t\tassertThat(typeHint.constructors()).isEmpty();\n\t\t\tassertThat(typeHint.getMemberCategories()).containsOnly(categories);\n\t\t};\n\t}\n\n\tprivate TypeHint getTypeHint(Class<?> target) {\n\t\tTypeHint typeHint = hints.reflection().getTypeHint(target);\n\t\tassertThat(typeHint).isNotNull();\n\t\treturn typeHint;\n\t}\n\n\tprivate void registerReflectionHints(AnnotatedElement annotatedElement) {\n\t\tthis.processor.registerReflectionHints(this.hints.reflection(), annotatedElement);\n\t}\n\n\n\t@RegisterReflection(classes = SimplePojo.class, memberCategories = MemberCategory.INVOKE_PUBLIC_METHODS)\n\tstatic class RegistrationSimple {\n\t}\n\n\n\t@RegisterReflection(classes = { Number.class, Double.class },\n\t\t\tclassNames = { \"java.lang.Integer\", \"java.lang.Float\" }, memberCategories = MemberCategory.INVOKE_PUBLIC_METHODS)\n\tstatic class RegistrationMultipleTargets {\n\t}\n\n\n\tstatic class RegistrationMethod {\n\n\t\t@RegisterReflection(classes = SimplePojo.class, memberCategories = MemberCategory.INVOKE_DECLARED_METHODS)\n\t\tprivate void doReflection() {\n\n\t\t}\n\t}\n\n\n\tstatic class RegistrationMethodWithoutTarget {\n\n\t\t@RegisterReflection(memberCategories = MemberCategory.INVOKE_DECLARED_CONSTRUCTORS)\n\t\tprivate void doReflection() {\n\t\t}\n\t}\n\n\n\tstatic class SimplePojo {\n\n\t\tprivate String name;\n\n\t\tprivate String description;\n\n\t\tpublic String getName() {\n\t\t\treturn this.name;\n\t\t}\n\n\t\tpublic void setName(String name) {\n\t\t\tthis.name = name;\n\t\t}\n\n\t\tpublic String getDescription() {\n\t\t\treturn this.description;\n\t\t}\n\n\t\tpublic void setDescription(String description) {\n\t\t\tthis.description = description;\n\t\t}\n\t}\n\n\n\t@RegisterReflection(memberCategories = MemberCategory.INVOKE_DECLARED_CONSTRUCTORS)\n\tstatic class AnnotatedSimplePojo {\n\n\t\tAnnotatedSimplePojo(String test) {\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.hint.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.annotation.RegistrationMethod",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.hint.annotation.RegistrationMethod",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint.annotation;\n\nimport java.lang.reflect.AnnotatedElement;\nimport java.lang.reflect.Method;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.function.Consumer;\n\nimport org.junit.jupiter.api.Nested;\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.aot.hint.ExecutableHint;\nimport org.springframework.aot.hint.MemberCategory;\nimport org.springframework.aot.hint.RuntimeHints;\nimport org.springframework.aot.hint.TypeHint;\nimport org.springframework.aot.hint.TypeReference;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatIllegalStateException;\n\n/**\n * Tests for {@link RegisterReflectionReflectiveProcessor}.\n *\n * @author Stephane Nicoll\n * @since 6.2\n */\nclass RegisterReflectionReflectiveProcessorTests {\n\n\tprivate static final List<String> NO_METHODS = Collections.emptyList();\n\n\tprivate final RegisterReflectionReflectiveProcessor processor = new RegisterReflectionReflectiveProcessor();\n\n\tprivate final RuntimeHints hints = new RuntimeHints();\n\n\n\t@Nested\n\tclass AnnotatedTypeTests {\n\n\t\t@Test\n\t\tvoid registerReflectionWithMemberCategory() {\n\t\t\tregisterReflectionHints(RegistrationSimple.class);\n\t\t\tassertBasicTypeHint(SimplePojo.class, NO_METHODS, List.of(MemberCategory.INVOKE_PUBLIC_METHODS));\n\t\t}\n\n\t\t@Test\n\t\tvoid registerReflectionForMultipleTargets() {\n\t\t\tregisterReflectionHints(RegistrationMultipleTargets.class);\n\t\t\tassertThat(hints.reflection().typeHints()).allSatisfy(\n\t\t\t\t\thasOnlyMemberCategories(MemberCategory.INVOKE_PUBLIC_METHODS));\n\t\t\tassertThat(hints.reflection().typeHints().map(TypeHint::getType))\n\t\t\t\t\t.hasSameElementsAs(TypeReference.listOf(Number.class, Double.class, Integer.class, Float.class));\n\t\t}\n\n\t\t@Test\n\t\tvoid registerReflectionOnTargetClass() {\n\t\t\tregisterReflectionHints(AnnotatedSimplePojo.class);\n\t\t\tassertBasicTypeHint(AnnotatedSimplePojo.class, NO_METHODS,\n\t\t\t\t\tList.of(MemberCategory.INVOKE_DECLARED_CONSTRUCTORS));\n\t\t}\n\t}\n\n\n\t@Nested\n\tclass AnnotatedMethodTests {\n\n\t\t@Test\n\t\tvoid registerReflectionForStaticField() throws NoSuchMethodException {\n\t\t\tMethod method = RegistrationMethod.class.getDeclaredMethod(\"doReflection\");\n\t\t\tregisterReflectionHints(method);\n\t\t\tassertBasicTypeHint(SimplePojo.class, NO_METHODS, List.of(MemberCategory.INVOKE_DECLARED_METHODS));\n\t\t}\n\n\t\t@Test\n\t\tvoid registerReflectionWithoutTarget() throws NoSuchMethodException {\n\t\t\tMethod method = RegistrationMethodWithoutTarget.class.getDeclaredMethod(\"doReflection\");\n\t\t\tassertThatIllegalStateException()\n\t\t\t\t\t.isThrownBy(() -> registerReflectionHints(method))\n\t\t\t\t\t.withMessageContaining(\"At least one class must be specified\")\n\t\t\t\t\t.withMessageContaining(method.toString());\n\t\t}\n\t}\n\n\n\tprivate void assertBasicTypeHint(Class<?> type, List<String> methodNames, List<MemberCategory> memberCategories) {\n\t\tTypeHint typeHint = getTypeHint(type);\n\t\tassertThat(typeHint.methods()).map(ExecutableHint::getName).hasSameElementsAs(methodNames);\n\t\tassertThat(typeHint.getMemberCategories()).hasSameElementsAs(memberCategories);\n\t\tassertThat(typeHint.fields()).isEmpty();\n\t\tassertThat(typeHint.constructors()).isEmpty();\n\t}\n\n\tprivate Consumer<TypeHint> hasOnlyMemberCategories(MemberCategory... categories) {\n\t\treturn typeHint -> {\n\t\t\tassertThat(typeHint.fields()).isEmpty();\n\t\t\tassertThat(typeHint.methods()).isEmpty();\n\t\t\tassertThat(typeHint.constructors()).isEmpty();\n\t\t\tassertThat(typeHint.getMemberCategories()).containsOnly(categories);\n\t\t};\n\t}\n\n\tprivate TypeHint getTypeHint(Class<?> target) {\n\t\tTypeHint typeHint = hints.reflection().getTypeHint(target);\n\t\tassertThat(typeHint).isNotNull();\n\t\treturn typeHint;\n\t}\n\n\tprivate void registerReflectionHints(AnnotatedElement annotatedElement) {\n\t\tthis.processor.registerReflectionHints(this.hints.reflection(), annotatedElement);\n\t}\n\n\n\t@RegisterReflection(classes = SimplePojo.class, memberCategories = MemberCategory.INVOKE_PUBLIC_METHODS)\n\tstatic class RegistrationSimple {\n\t}\n\n\n\t@RegisterReflection(classes = { Number.class, Double.class },\n\t\t\tclassNames = { \"java.lang.Integer\", \"java.lang.Float\" }, memberCategories = MemberCategory.INVOKE_PUBLIC_METHODS)\n\tstatic class RegistrationMultipleTargets {\n\t}\n\n\n\tstatic class RegistrationMethod {\n\n\t\t@RegisterReflection(classes = SimplePojo.class, memberCategories = MemberCategory.INVOKE_DECLARED_METHODS)\n\t\tprivate void doReflection() {\n\n\t\t}\n\t}\n\n\n\tstatic class RegistrationMethodWithoutTarget {\n\n\t\t@RegisterReflection(memberCategories = MemberCategory.INVOKE_DECLARED_CONSTRUCTORS)\n\t\tprivate void doReflection() {\n\t\t}\n\t}\n\n\n\tstatic class SimplePojo {\n\n\t\tprivate String name;\n\n\t\tprivate String description;\n\n\t\tpublic String getName() {\n\t\t\treturn this.name;\n\t\t}\n\n\t\tpublic void setName(String name) {\n\t\t\tthis.name = name;\n\t\t}\n\n\t\tpublic String getDescription() {\n\t\t\treturn this.description;\n\t\t}\n\n\t\tpublic void setDescription(String description) {\n\t\t\tthis.description = description;\n\t\t}\n\t}\n\n\n\t@RegisterReflection(memberCategories = MemberCategory.INVOKE_DECLARED_CONSTRUCTORS)\n\tstatic class AnnotatedSimplePojo {\n\n\t\tAnnotatedSimplePojo(String test) {\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.hint.annotation.RegistrationMethod#doReflection()",
    "headType": "method",
    "relation": "provide",
    "tail": "@RegisterReflection(classes = SimplePojo.class, memberCategories = MemberCategory.INVOKE_DECLARED_METHODS)\r\nprivate void doReflection() ;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.annotation.RegistrationMethod",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.annotation.RegistrationMethod#doReflection()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.annotation.RegistrationMethod#doReflection()",
    "headType": "method",
    "relation": "use",
    "tail": "@RegisterReflection",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.annotation.RegistrationMethodWithoutTarget",
    "tailType": "class"
  }
]