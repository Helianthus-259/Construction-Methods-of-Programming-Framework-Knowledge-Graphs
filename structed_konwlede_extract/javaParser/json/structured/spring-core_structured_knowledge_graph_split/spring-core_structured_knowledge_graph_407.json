[
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContextTests#getPrefixes_withNull()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getPrefixes_withNull() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> context.getPrefixes(null));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContextTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.SimpleNamespaceContextTests#getPrefixes_withNull()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContextTests#getPrefixes_withNull()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContextTests#getPrefixes_IteratorIsNotModifiable()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getPrefixes_IteratorIsNotModifiable() {\r\n    context.bindNamespaceUri(prefix, namespaceUri);\r\n    Iterator<String> iterator = context.getPrefixes(namespaceUri);\r\n    assertThatExceptionOfType(UnsupportedOperationException.class).isThrownBy(iterator::remove);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContextTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.SimpleNamespaceContextTests#getPrefixes_IteratorIsNotModifiable()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContextTests#getPrefixes_IteratorIsNotModifiable()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContextTests#getPrefixes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getPrefixes() {\r\n    assertThat(getItemSet(context.getPrefixes(XMLConstants.XMLNS_ATTRIBUTE_NS_URI))).as(\"Returns only \\\"xmlns\\\" for \\\"http://www.w3.org/2000/xmlns/\\\"\").containsExactly(XMLConstants.XMLNS_ATTRIBUTE);\r\n    assertThat(getItemSet(context.getPrefixes(XMLConstants.XML_NS_URI))).as(\"Returns only \\\"xml\\\" for \\\"http://www.w3.org/XML/1998/namespace\\\"\").containsExactly(XMLConstants.XML_NS_PREFIX);\r\n    assertThat(context.getPrefixes(\"unbound Namespace URI\").hasNext()).as(\"Returns empty iterator for unbound prefix\").isFalse();\r\n    context.bindNamespaceUri(\"prefix1\", namespaceUri);\r\n    context.bindNamespaceUri(\"prefix2\", namespaceUri);\r\n    assertThat(getItemSet(context.getPrefixes(namespaceUri))).as(\"Returns all prefixes (and only those) bound to the namespace URI\").containsExactlyInAnyOrder(\"prefix1\", \"prefix2\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContextTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.SimpleNamespaceContextTests#getPrefixes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContextTests#getPrefixes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContextTests#bindNamespaceUri_withNullNamespaceUri()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid bindNamespaceUri_withNullNamespaceUri() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> context.bindNamespaceUri(\"prefix\", null));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContextTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.SimpleNamespaceContextTests#bindNamespaceUri_withNullNamespaceUri()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContextTests#bindNamespaceUri_withNullNamespaceUri()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContextTests#bindNamespaceUri_withNullPrefix()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid bindNamespaceUri_withNullPrefix() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> context.bindNamespaceUri(null, namespaceUri));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContextTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.SimpleNamespaceContextTests#bindNamespaceUri_withNullPrefix()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContextTests#bindNamespaceUri_withNullPrefix()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContextTests#bindNamespaceUri()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid bindNamespaceUri() {\r\n    context.bindNamespaceUri(prefix, namespaceUri);\r\n    assertThat(context.getNamespaceURI(prefix)).as(\"The Namespace URI was bound to the prefix\").isEqualTo(namespaceUri);\r\n    assertThat(getItemSet(context.getPrefixes(namespaceUri))).as(\"The prefix was bound to the namespace URI\").contains(prefix);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContextTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.SimpleNamespaceContextTests#bindNamespaceUri()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContextTests#bindNamespaceUri()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.FieldWriter#putFieldInfo(ByteVector)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Puts the content of the field_info JVMS structure generated by this FieldWriter into the given\r\n * ByteVector.\r\n *\r\n * @param output where the field_info structure must be put.\r\n */\r\nvoid putFieldInfo(final ByteVector output) {\r\n    boolean useSyntheticAttribute = symbolTable.getMajorVersion() < Opcodes.V1_5;\r\n    // Put the access_flags, name_index and descriptor_index fields.\r\n    int mask = useSyntheticAttribute ? Opcodes.ACC_SYNTHETIC : 0;\r\n    output.putShort(accessFlags & ~mask).putShort(nameIndex).putShort(descriptorIndex);\r\n    // Compute and put the attributes_count field.\r\n    // For ease of reference, we use here the same attribute order as in Section 4.7 of the JVMS.\r\n    int attributesCount = 0;\r\n    if (constantValueIndex != 0) {\r\n        ++attributesCount;\r\n    }\r\n    if ((accessFlags & Opcodes.ACC_SYNTHETIC) != 0 && useSyntheticAttribute) {\r\n        ++attributesCount;\r\n    }\r\n    if (signatureIndex != 0) {\r\n        ++attributesCount;\r\n    }\r\n    if ((accessFlags & Opcodes.ACC_DEPRECATED) != 0) {\r\n        ++attributesCount;\r\n    }\r\n    if (lastRuntimeVisibleAnnotation != null) {\r\n        ++attributesCount;\r\n    }\r\n    if (lastRuntimeInvisibleAnnotation != null) {\r\n        ++attributesCount;\r\n    }\r\n    if (lastRuntimeVisibleTypeAnnotation != null) {\r\n        ++attributesCount;\r\n    }\r\n    if (lastRuntimeInvisibleTypeAnnotation != null) {\r\n        ++attributesCount;\r\n    }\r\n    if (firstAttribute != null) {\r\n        attributesCount += firstAttribute.getAttributeCount();\r\n    }\r\n    output.putShort(attributesCount);\r\n    // Put the field_info attributes.\r\n    // For ease of reference, we use here the same attribute order as in Section 4.7 of the JVMS.\r\n    if (constantValueIndex != 0) {\r\n        output.putShort(symbolTable.addConstantUtf8(Constants.CONSTANT_VALUE)).putInt(2).putShort(constantValueIndex);\r\n    }\r\n    Attribute.putAttributes(symbolTable, accessFlags, signatureIndex, output);\r\n    AnnotationWriter.putAnnotations(symbolTable, lastRuntimeVisibleAnnotation, lastRuntimeInvisibleAnnotation, lastRuntimeVisibleTypeAnnotation, lastRuntimeInvisibleTypeAnnotation, output);\r\n    if (firstAttribute != null) {\r\n        firstAttribute.putAttributes(symbolTable, output);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.FieldWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.FieldWriter#putFieldInfo(ByteVector)",
    "tailType": "method"
  }
]