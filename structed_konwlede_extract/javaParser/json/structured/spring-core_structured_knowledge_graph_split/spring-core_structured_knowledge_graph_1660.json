[
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationFavorsMoreLocallyDeclaredComposedAnnotationsOverAnnotationsOnInterfaces()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationFavorsMoreLocallyDeclaredComposedAnnotationsOverAnnotationsOnInterfaces()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationFavorsMoreLocallyDeclaredComposedAnnotationsOverInheritedAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "// @since 4.0.3\r\n@Test\r\nvoid findClassAnnotationFavorsMoreLocallyDeclaredComposedAnnotationsOverInheritedAnnotations() {\r\n    Transactional transactional = findAnnotation(SubSubClassWithInheritedAnnotation.class, Transactional.class);\r\n    assertThat(transactional).isNotNull();\r\n    assertThat(transactional.readOnly()).as(\"readOnly flag for SubSubClassWithInheritedAnnotation\").isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationFavorsMoreLocallyDeclaredComposedAnnotationsOverInheritedAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationFavorsMoreLocallyDeclaredComposedAnnotationsOverInheritedAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationFavorsMoreLocallyDeclaredComposedAnnotationsOverInheritedComposedAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "// @since 4.0.3\r\n@Test\r\nvoid findClassAnnotationFavorsMoreLocallyDeclaredComposedAnnotationsOverInheritedComposedAnnotations() {\r\n    Component component = findAnnotation(SubSubClassWithInheritedMetaAnnotation.class, Component.class);\r\n    assertThat(component).isNotNull();\r\n    assertThat(component.value()).isEqualTo(\"meta2\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationFavorsMoreLocallyDeclaredComposedAnnotationsOverInheritedComposedAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationFavorsMoreLocallyDeclaredComposedAnnotationsOverInheritedComposedAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnMetaMetaAnnotatedClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid findClassAnnotationOnMetaMetaAnnotatedClass() {\r\n    Component component = findAnnotation(MetaMetaAnnotatedClass.class, Component.class);\r\n    assertThat(component).as(\"Should find meta-annotation on composed annotation on class\").isNotNull();\r\n    assertThat(component.value()).isEqualTo(\"meta2\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnMetaMetaAnnotatedClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnMetaMetaAnnotatedClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnMetaMetaMetaAnnotatedClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid findClassAnnotationOnMetaMetaMetaAnnotatedClass() {\r\n    Component component = findAnnotation(MetaMetaMetaAnnotatedClass.class, Component.class);\r\n    assertThat(component).as(\"Should find meta-annotation on meta-annotation on composed annotation on class\").isNotNull();\r\n    assertThat(component.value()).isEqualTo(\"meta2\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnMetaMetaMetaAnnotatedClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnMetaMetaMetaAnnotatedClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnAnnotatedClassWithMissingTargetMetaAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid findClassAnnotationOnAnnotatedClassWithMissingTargetMetaAnnotation() {\r\n    // TransactionalClass is NOT annotated or meta-annotated with @Component\r\n    Component component = findAnnotation(TransactionalClass.class, Component.class);\r\n    assertThat(component).as(\"Should not find @Component on TransactionalClass\").isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnAnnotatedClassWithMissingTargetMetaAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnAnnotatedClassWithMissingTargetMetaAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnMetaCycleAnnotatedClassWithMissingTargetMetaAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid findClassAnnotationOnMetaCycleAnnotatedClassWithMissingTargetMetaAnnotation() {\r\n    Component component = findAnnotation(MetaCycleAnnotatedClass.class, Component.class);\r\n    assertThat(component).as(\"Should not find @Component on MetaCycleAnnotatedClass\").isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnMetaCycleAnnotatedClassWithMissingTargetMetaAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnMetaCycleAnnotatedClassWithMissingTargetMetaAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]