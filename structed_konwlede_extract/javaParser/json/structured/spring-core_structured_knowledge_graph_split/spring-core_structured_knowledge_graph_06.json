[
  {
    "head": "org.springframework.core.SimpleAliasRegistryTests#resolveAliasesWithComplexPlaceholderReplacementWithAliasAndNameSwitching(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.SimpleAliasRegistryTests#resolveAliasesWithComplexPlaceholderReplacementWithAliasAndNameSwitching(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@ValueSource",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.SimpleAliasRegistryTests#registerAlias(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void registerAlias(String name, String alias) {\r\n    registry.registerAlias(name, alias);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.SimpleAliasRegistryTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.SimpleAliasRegistryTests#registerAlias(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.SimpleAliasRegistryTests#assertHasAlias(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void assertHasAlias(String name, String alias) {\r\n    assertThat(registry.hasAlias(name, alias)).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.SimpleAliasRegistryTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.SimpleAliasRegistryTests#assertHasAlias(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.SimpleAliasRegistryTests#assertDoesNotHaveAlias(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void assertDoesNotHaveAlias(String name, String alias) {\r\n    assertThat(registry.hasAlias(name, alias)).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.SimpleAliasRegistryTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.SimpleAliasRegistryTests#assertDoesNotHaveAlias(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.StubStringValueResolver",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.StubStringValueResolver",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core;\n\nimport java.util.Map;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.ValueSource;\n\nimport org.springframework.util.StringValueResolver;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\nimport static org.assertj.core.api.Assertions.assertThatIllegalStateException;\nimport static org.assertj.core.api.Assertions.assertThatNoException;\nimport static org.assertj.core.api.Assertions.assertThatNullPointerException;\n\n/**\n * Tests for {@link SimpleAliasRegistry}.\n *\n * @author Juergen Hoeller\n * @author Nha Vuong\n * @author Sam Brannen\n */\nclass SimpleAliasRegistryTests {\n\n\tprivate static final String REAL_NAME = \"real_name\";\n\tprivate static final String NICKNAME = \"nickname\";\n\tprivate static final String NAME1 = \"name1\";\n\tprivate static final String NAME2 = \"name2\";\n\tprivate static final String NAME3 = \"name3\";\n\tprivate static final String NAME4 = \"name4\";\n\tprivate static final String NAME5 = \"name5\";\n\tprivate static final String ALIAS1 = \"alias1\";\n\tprivate static final String ALIAS2 = \"alias2\";\n\tprivate static final String ALIAS3 = \"alias3\";\n\tprivate static final String ALIAS4 = \"alias4\";\n\tprivate static final String ALIAS5 = \"alias5\";\n\n\n\tprivate final SimpleAliasRegistry registry = new SimpleAliasRegistry();\n\n\n\t@Test\n\tvoid aliasChaining() {\n\t\tregisterAlias(NAME1, ALIAS1);\n\t\tregisterAlias(ALIAS1, ALIAS2);\n\t\tregisterAlias(ALIAS2, ALIAS3);\n\n\t\tassertHasAlias(NAME1, ALIAS1);\n\t\tassertHasAlias(NAME1, ALIAS2);\n\t\tassertHasAlias(NAME1, ALIAS3);\n\t\tassertThat(registry.canonicalName(ALIAS1)).isEqualTo(NAME1);\n\t\tassertThat(registry.canonicalName(ALIAS2)).isEqualTo(NAME1);\n\t\tassertThat(registry.canonicalName(ALIAS3)).isEqualTo(NAME1);\n\t}\n\n\t@Test  // SPR-17191\n\tvoid aliasChainingWithMultipleAliases() {\n\t\tregisterAlias(NAME1, ALIAS1);\n\t\tregisterAlias(NAME1, ALIAS2);\n\t\tassertHasAlias(NAME1, ALIAS1);\n\t\tassertHasAlias(NAME1, ALIAS2);\n\n\t\tregisterAlias(REAL_NAME, NAME1);\n\t\tassertHasAlias(REAL_NAME, NAME1);\n\t\tassertHasAlias(REAL_NAME, ALIAS1);\n\t\tassertHasAlias(REAL_NAME, ALIAS2);\n\n\t\tregisterAlias(NAME1, ALIAS3);\n\t\tassertHasAlias(REAL_NAME, NAME1);\n\t\tassertHasAlias(REAL_NAME, ALIAS1);\n\t\tassertHasAlias(REAL_NAME, ALIAS2);\n\t\tassertHasAlias(REAL_NAME, ALIAS3);\n\t}\n\n\t@Test\n\tvoid removeNullAlias() {\n\t\tassertThatNullPointerException().isThrownBy(() -> registry.removeAlias(null));\n\t}\n\n\t@Test\n\tvoid removeNonExistentAlias() {\n\t\tString alias = NICKNAME;\n\t\tassertDoesNotHaveAlias(REAL_NAME, alias);\n\t\tassertThatIllegalStateException()\n\t\t\t\t.isThrownBy(() -> registry.removeAlias(alias))\n\t\t\t\t.withMessage(\"No alias '%s' registered\", alias);\n\t}\n\n\t@Test\n\tvoid removeExistingAlias() {\n\t\tregisterAlias(REAL_NAME, NICKNAME);\n\t\tassertHasAlias(REAL_NAME, NICKNAME);\n\n\t\tregistry.removeAlias(NICKNAME);\n\t\tassertDoesNotHaveAlias(REAL_NAME, NICKNAME);\n\t}\n\n\t@Test\n\tvoid isAlias() {\n\t\tregisterAlias(REAL_NAME, NICKNAME);\n\t\tassertThat(registry.isAlias(NICKNAME)).isTrue();\n\t\tassertThat(registry.isAlias(REAL_NAME)).isFalse();\n\t\tassertThat(registry.isAlias(\"bogus\")).isFalse();\n\t}\n\n\t@Test\n\tvoid getAliases() {\n\t\tassertThat(registry.getAliases(NAME1)).isEmpty();\n\n\t\tregisterAlias(NAME1, ALIAS1);\n\t\tassertThat(registry.getAliases(NAME1)).containsExactly(ALIAS1);\n\n\t\tregisterAlias(ALIAS1, ALIAS2);\n\t\tregisterAlias(ALIAS2, ALIAS3);\n\t\tassertThat(registry.getAliases(NAME1)).containsExactlyInAnyOrder(ALIAS1, ALIAS2, ALIAS3);\n\t\tassertThat(registry.getAliases(ALIAS1)).containsExactlyInAnyOrder(ALIAS2, ALIAS3);\n\t\tassertThat(registry.getAliases(ALIAS2)).containsExactly(ALIAS3);\n\t\tassertThat(registry.getAliases(ALIAS3)).isEmpty();\n\t}\n\n\t@Test\n\tvoid checkForAliasCircle() {\n\t\t// No aliases registered, so no cycles possible.\n\t\tassertThatNoException().isThrownBy(() -> registry.checkForAliasCircle(NAME1, ALIAS1));\n\n\t\tregisterAlias(NAME1, ALIAS1); // ALIAS1 -> NAME1\n\n\t\t// No cycles possible.\n\t\tassertThatNoException().isThrownBy(() -> registry.checkForAliasCircle(NAME1, ALIAS1));\n\n\t\tassertThatIllegalStateException()\n\t\t\t\t// NAME1 -> ALIAS1 -> NAME1\n\t\t\t\t.isThrownBy(() -> registerAlias(ALIAS1, NAME1)) // internally invokes checkForAliasCircle()\n\t\t\t\t.withMessageContaining(\"'%s' is a direct or indirect alias for '%s'\", ALIAS1, NAME1);\n\n\t\tregisterAlias(ALIAS1, ALIAS2); // ALIAS2 -> ALIAS1 -> NAME1\n\t\tassertThatIllegalStateException()\n\t\t\t\t// NAME1 -> ALIAS1 -> ALIAS2 -> NAME1\n\t\t\t\t.isThrownBy(() -> registerAlias(ALIAS2, NAME1)) // internally invokes checkForAliasCircle()\n\t\t\t\t.withMessageContaining(\"'%s' is a direct or indirect alias for '%s'\", ALIAS2, NAME1);\n\t}\n\n\t@Test\n\tvoid resolveAliasesPreconditions() {\n\t\tassertThatIllegalArgumentException().isThrownBy(() -> registry.resolveAliases(null));\n\t}\n\n\t@Test\n\tvoid resolveAliasesWithoutPlaceholderReplacement() {\n\t\tStringValueResolver valueResolver = new StubStringValueResolver();\n\n\t\tregisterAlias(NAME1, ALIAS1);\n\t\tregisterAlias(NAME1, ALIAS3);\n\t\tregisterAlias(NAME2, ALIAS2);\n\t\tregisterAlias(NAME2, ALIAS4);\n\t\tassertThat(registry.getAliases(NAME1)).containsExactlyInAnyOrder(ALIAS1, ALIAS3);\n\t\tassertThat(registry.getAliases(NAME2)).containsExactlyInAnyOrder(ALIAS2, ALIAS4);\n\n\t\tregistry.resolveAliases(valueResolver);\n\t\tassertThat(registry.getAliases(NAME1)).containsExactlyInAnyOrder(ALIAS1, ALIAS3);\n\t\tassertThat(registry.getAliases(NAME2)).containsExactlyInAnyOrder(ALIAS2, ALIAS4);\n\n\t\tregistry.removeAlias(ALIAS1);\n\t\tregistry.resolveAliases(valueResolver);\n\t\tassertThat(registry.getAliases(NAME1)).containsExactly(ALIAS3);\n\t\tassertThat(registry.getAliases(NAME2)).containsExactlyInAnyOrder(ALIAS2, ALIAS4);\n\t}\n\n\t@Test\n\tvoid resolveAliasesWithPlaceholderReplacement() {\n\t\tStringValueResolver valueResolver = new StubStringValueResolver(Map.of(\n\t\t\tNAME1, NAME2,\n\t\t\tALIAS1, ALIAS2\n\t\t));\n\n\t\tregisterAlias(NAME1, ALIAS1);\n\t\tassertThat(registry.getAliases(NAME1)).containsExactly(ALIAS1);\n\n\t\tregistry.resolveAliases(valueResolver);\n\t\tassertThat(registry.getAliases(NAME1)).isEmpty();\n\t\tassertThat(registry.getAliases(NAME2)).containsExactly(ALIAS2);\n\n\t\tregistry.removeAlias(ALIAS2);\n\t\tassertThat(registry.getAliases(NAME1)).isEmpty();\n\t\tassertThat(registry.getAliases(NAME2)).isEmpty();\n\t}\n\n\t@Test\n\tvoid resolveAliasesWithPlaceholderReplacementConflict() {\n\t\tStringValueResolver valueResolver = new StubStringValueResolver(Map.of(ALIAS1, ALIAS2));\n\n\t\tregisterAlias(NAME1, ALIAS1);\n\t\tregisterAlias(NAME2, ALIAS2);\n\n\t\t// Original state:\n\t\t// ALIAS1 -> NAME1\n\t\t// ALIAS2 -> NAME2\n\n\t\t// State after processing original entry (ALIAS1 -> NAME1):\n\t\t// ALIAS2 -> NAME1 --> Conflict: entry for ALIAS2 already exists\n\t\t// ALIAS2 -> NAME2\n\n\t\tassertThatIllegalStateException()\n\t\t\t\t.isThrownBy(() -> registry.resolveAliases(valueResolver))\n\t\t\t\t.withMessage(\"Cannot register resolved alias '%s' (original: '%s') for name '%s': \" +\n\t\t\t\t\t\t\"It is already registered for name '%s'.\", ALIAS2, ALIAS1, NAME1, NAME2);\n\t}\n\n\t@ParameterizedTest\n\t@ValueSource(strings = {\"alias4\", \"test\", \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"})\n\tvoid resolveAliasesWithComplexPlaceholderReplacementWithAliasSwitching(String aliasX) {\n\t\tStringValueResolver valueResolver = new StubStringValueResolver(Map.of(\n\t\t\tALIAS3, ALIAS1,\n\t\t\taliasX, ALIAS5,\n\t\t\tALIAS5, ALIAS2\n\t\t));\n\n\t\t// Since SimpleAliasRegistry ensures that aliases are processed in declaration\n\t\t// order, we need to register ALIAS5 *before* aliasX to support our use case.\n\t\tregisterAlias(NAME3, ALIAS3);\n\t\tregisterAlias(NAME5, ALIAS5);\n\t\tregisterAlias(NAME4, aliasX);\n\n\t\t// Original state:\n\t\t// ALIAS3 -> NAME3\n\t\t// ALIAS5 -> NAME5\n\t\t// aliasX -> NAME4\n\n\t\t// State after processing original entry (ALIAS3 -> NAME3):\n\t\t// ALIAS1 -> NAME3\n\t\t// ALIAS5 -> NAME5\n\t\t// aliasX -> NAME4\n\n\t\t// State after processing original entry (ALIAS5 -> NAME5):\n\t\t// ALIAS1 -> NAME3\n\t\t// ALIAS2 -> NAME5\n\t\t// aliasX -> NAME4\n\n\t\t// State after processing original entry (aliasX -> NAME4):\n\t\t// ALIAS1 -> NAME3\n\t\t// ALIAS2 -> NAME5\n\t\t// ALIAS5 -> NAME4\n\n\t\tregistry.resolveAliases(valueResolver);\n\t\tassertThat(registry.getAliases(NAME3)).containsExactly(ALIAS1);\n\t\tassertThat(registry.getAliases(NAME4)).containsExactly(ALIAS5);\n\t\tassertThat(registry.getAliases(NAME5)).containsExactly(ALIAS2);\n\t}\n\n\t@ParameterizedTest  // gh-32024\n\t@ValueSource(strings = {\"alias4\", \"test\", \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"})\n\tvoid resolveAliasesWithComplexPlaceholderReplacementWithAliasAndNameSwitching(String aliasX) {\n\t\tStringValueResolver valueResolver = new StubStringValueResolver(Map.of(\n\t\t\tALIAS3, ALIAS1,\n\t\t\taliasX, ALIAS5,\n\t\t\tALIAS5, ALIAS2,\n\t\t\tNAME3, NAME4,\n\t\t\tNAME4, NAME3\n\t\t));\n\n\t\t// Since SimpleAliasRegistry ensures that aliases are processed in declaration\n\t\t// order, we need to register ALIAS5 *before* aliasX to support our use case.\n\t\tregisterAlias(NAME3, ALIAS3);\n\t\tregisterAlias(NAME5, ALIAS5);\n\t\tregisterAlias(NAME4, aliasX);\n\n\t\t// Original state:\n\t\t// ALIAS3 -> NAME3\n\t\t// ALIAS5 -> NAME5\n\t\t// aliasX -> NAME4\n\n\t\t// State after processing original entry (ALIAS3 -> NAME3):\n\t\t// ALIAS5 -> NAME5\n\t\t// aliasX -> NAME4\n\t\t// ALIAS1 -> NAME4\n\n\t\t// State after processing original entry (ALIAS5 -> NAME5):\n\t\t// aliasX -> NAME4\n\t\t// ALIAS1 -> NAME4\n\t\t// ALIAS2 -> NAME5\n\n\t\t// State after processing original entry (aliasX -> NAME4):\n\t\t// ALIAS1 -> NAME4\n\t\t// ALIAS2 -> NAME5\n\t\t// alias5 -> NAME3\n\n\t\tregistry.resolveAliases(valueResolver);\n\t\tassertThat(registry.getAliases(NAME3)).containsExactly(ALIAS5);\n\t\tassertThat(registry.getAliases(NAME4)).containsExactly(ALIAS1);\n\t\tassertThat(registry.getAliases(NAME5)).containsExactly(ALIAS2);\n\t}\n\n\tprivate void registerAlias(String name, String alias) {\n\t\tregistry.registerAlias(name, alias);\n\t}\n\n\tprivate void assertHasAlias(String name, String alias) {\n\t\tassertThat(registry.hasAlias(name, alias)).isTrue();\n\t}\n\n\tprivate void assertDoesNotHaveAlias(String name, String alias) {\n\t\tassertThat(registry.hasAlias(name, alias)).isFalse();\n\t}\n\n\n\t/**\n\t * {@link StringValueResolver} that replaces each value with a supplied\n\t * placeholder and otherwise returns the original value if no placeholder\n\t * is configured.\n\t */\n\tprivate static class StubStringValueResolver implements StringValueResolver {\n\n\t\tprivate final Map<String, String> placeholders;\n\n\t\tStubStringValueResolver() {\n\t\t\tthis(Map.of());\n\t\t}\n\n\t\tStubStringValueResolver(Map<String, String> placeholders) {\n\t\t\tthis.placeholders = placeholders;\n\t\t}\n\n\t\t@Override\n\t\tpublic String resolveStringValue(String str) {\n\t\t\treturn this.placeholders.getOrDefault(str, str);\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.StubStringValueResolver",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.StubStringValueResolver#placeholders",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.StubStringValueResolver#placeholders",
    "headType": "field",
    "relation": "haveType",
    "tail": "Map<String, String>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.StubStringValueResolver#resolveStringValue(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String resolveStringValue(String str) {\r\n    return this.placeholders.getOrDefault(str, str);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.StubStringValueResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.StubStringValueResolver#resolveStringValue(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.StubStringValueResolver#resolveStringValue(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.convert.support",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.convert.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceBenchmark",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceBenchmark",
    "headType": "class",
    "relation": "use",
    "tail": "@BenchmarkMode",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceBenchmark",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert.support;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\n\nimport org.openjdk.jmh.annotations.Benchmark;\nimport org.openjdk.jmh.annotations.BenchmarkMode;\nimport org.openjdk.jmh.annotations.Level;\nimport org.openjdk.jmh.annotations.Mode;\nimport org.openjdk.jmh.annotations.Param;\nimport org.openjdk.jmh.annotations.Scope;\nimport org.openjdk.jmh.annotations.Setup;\nimport org.openjdk.jmh.annotations.State;\nimport org.openjdk.jmh.infra.Blackhole;\n\nimport org.springframework.core.convert.TypeDescriptor;\nimport org.springframework.util.CollectionUtils;\n\n/**\n * Benchmarks for {@link GenericConversionService}.\n *\n * @author Brian Clozel\n */\n@BenchmarkMode(Mode.Throughput)\npublic class GenericConversionServiceBenchmark {\n\n\t@Benchmark\n\tpublic void convertListOfStringToListOfIntegerWithConversionService(ListBenchmarkState state, Blackhole bh) {\n\t\tTypeDescriptor sourceTypeDesc = TypeDescriptor.forObject(state.source);\n\t\tbh.consume(state.conversionService.convert(state.source, sourceTypeDesc, state.targetTypeDesc));\n\t}\n\n\t@Benchmark\n\tpublic void convertListOfStringToListOfIntegerBaseline(ListBenchmarkState state, Blackhole bh) {\n\t\tList<Integer> target = new ArrayList<>(state.source.size());\n\t\tfor (String element : state.source) {\n\t\t\ttarget.add(Integer.valueOf(element));\n\t\t}\n\t\tbh.consume(target);\n\t}\n\n\t@State(Scope.Benchmark)\n\tpublic static class ListBenchmarkState extends BenchmarkState {\n\n\t\tList<String> source;\n\n\t\t@Setup(Level.Trial)\n\t\tpublic void setup() throws Exception {\n\t\t\tthis.source = IntStream.rangeClosed(1, collectionSize).mapToObj(String::valueOf).toList();\n\t\t\tList<Integer> target = new ArrayList<>();\n\t\t\tthis.targetTypeDesc = TypeDescriptor.forObject(target);\n\t\t}\n\t}\n\n\t@Benchmark\n\tpublic void convertMapOfStringToListOfIntegerWithConversionService(MapBenchmarkState state, Blackhole bh) {\n\t\tTypeDescriptor sourceTypeDesc = TypeDescriptor.forObject(state.source);\n\t\tbh.consume(state.conversionService.convert(state.source, sourceTypeDesc, state.targetTypeDesc));\n\t}\n\n\t@Benchmark\n\tpublic void convertMapOfStringToListOfIntegerBaseline(MapBenchmarkState state, Blackhole bh) {\n\t\tMap<String, Integer> target = CollectionUtils.newHashMap(state.source.size());\n\t\tstate.source.forEach((k, v) -> target.put(k, Integer.valueOf(v)));\n\t\tbh.consume(target);\n\t}\n\n\n\t@State(Scope.Benchmark)\n\tpublic static class MapBenchmarkState extends BenchmarkState {\n\n\t\tMap<String, String> source;\n\n\t\t@Setup(Level.Trial)\n\t\tpublic void setup() throws Exception {\n\t\t\tthis.source = CollectionUtils.newHashMap(this.collectionSize);\n\t\t\tMap<String, Integer> target = new HashMap<>();\n\t\t\tthis.targetTypeDesc = TypeDescriptor.forObject(target);\n\t\t\tthis.source = IntStream.rangeClosed(1, collectionSize).mapToObj(String::valueOf)\n\t\t\t\t\t.collect(Collectors.toMap(String::valueOf, String::valueOf));\n\t\t}\n\t}\n\n\n\t@State(Scope.Benchmark)\n\tpublic static class BenchmarkState {\n\n\t\tGenericConversionService conversionService = new GenericConversionService();\n\n\t\t@Param({\"10\"})\n\t\tint collectionSize;\n\n\t\tTypeDescriptor targetTypeDesc;\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceBenchmark#convertListOfStringToListOfIntegerWithConversionService(ListBenchmarkState,Blackhole)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Benchmark\r\npublic void convertListOfStringToListOfIntegerWithConversionService(ListBenchmarkState state, Blackhole bh) {\r\n    TypeDescriptor sourceTypeDesc = TypeDescriptor.forObject(state.source);\r\n    bh.consume(state.conversionService.convert(state.source, sourceTypeDesc, state.targetTypeDesc));\r\n}",
    "tailType": "method_code"
  }
]