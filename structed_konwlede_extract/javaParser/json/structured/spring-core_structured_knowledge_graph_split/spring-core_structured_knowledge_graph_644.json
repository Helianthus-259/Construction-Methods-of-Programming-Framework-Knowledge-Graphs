[
  {
    "head": "org.springframework.cglib.proxy.Enhancer#getCallbackKeys()",
    "headType": "method",
    "relation": "provide",
    "tail": "private int[] getCallbackKeys() {\r\n    int[] keys = new int[callbackTypes.length];\r\n    for (int i = 0; i < callbackTypes.length; i++) {\r\n        keys[i] = i;\r\n    }\r\n    return keys;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.Enhancer#getCallbackKeys()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer#emitGetCallback(ClassEmitter,int[])",
    "headType": "method",
    "relation": "provide",
    "tail": "private void emitGetCallback(ClassEmitter ce, int[] keys) {\r\n    final CodeEmitter e = ce.begin_method(Constants.ACC_PUBLIC, GET_CALLBACK, null);\r\n    e.load_this();\r\n    e.invoke_static_this(BIND_CALLBACKS);\r\n    e.load_this();\r\n    e.load_arg(0);\r\n    e.process_switch(keys, new ProcessSwitchCallback() {\r\n\r\n        @Override\r\n        public void processCase(int key, Label end) {\r\n            e.getfield(getCallbackField(key));\r\n            e.goTo(end);\r\n        }\r\n\r\n        @Override\r\n        public void processDefault() {\r\n            // stack height\r\n            e.pop();\r\n            e.aconst_null();\r\n        }\r\n    });\r\n    e.return_value();\r\n    e.end_method();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.Enhancer#emitGetCallback(ClassEmitter,int[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer#emitSetCallback(ClassEmitter,int[])",
    "headType": "method",
    "relation": "provide",
    "tail": "private void emitSetCallback(ClassEmitter ce, int[] keys) {\r\n    final CodeEmitter e = ce.begin_method(Constants.ACC_PUBLIC, SET_CALLBACK, null);\r\n    e.load_arg(0);\r\n    e.process_switch(keys, new ProcessSwitchCallback() {\r\n\r\n        @Override\r\n        public void processCase(int key, Label end) {\r\n            e.load_this();\r\n            e.load_arg(1);\r\n            e.checkcast(callbackTypes[key]);\r\n            e.putfield(getCallbackField(key));\r\n            e.goTo(end);\r\n        }\r\n\r\n        @Override\r\n        public void processDefault() {\r\n            // TODO: error?\r\n        }\r\n    });\r\n    e.return_value();\r\n    e.end_method();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.Enhancer#emitSetCallback(ClassEmitter,int[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer#emitSetCallbacks(ClassEmitter)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void emitSetCallbacks(ClassEmitter ce) {\r\n    CodeEmitter e = ce.begin_method(Constants.ACC_PUBLIC, SET_CALLBACKS, null);\r\n    e.load_this();\r\n    e.load_arg(0);\r\n    for (int i = 0; i < callbackTypes.length; i++) {\r\n        e.dup2();\r\n        e.aaload(i);\r\n        e.checkcast(callbackTypes[i]);\r\n        e.putfield(getCallbackField(i));\r\n    }\r\n    e.return_value();\r\n    e.end_method();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.Enhancer#emitSetCallbacks(ClassEmitter)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer#emitGetCallbacks(ClassEmitter)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void emitGetCallbacks(ClassEmitter ce) {\r\n    CodeEmitter e = ce.begin_method(Constants.ACC_PUBLIC, GET_CALLBACKS, null);\r\n    e.load_this();\r\n    e.invoke_static_this(BIND_CALLBACKS);\r\n    e.load_this();\r\n    e.push(callbackTypes.length);\r\n    e.newarray(CALLBACK);\r\n    for (int i = 0; i < callbackTypes.length; i++) {\r\n        e.dup();\r\n        e.push(i);\r\n        e.load_this();\r\n        e.getfield(getCallbackField(i));\r\n        e.aastore();\r\n    }\r\n    e.return_value();\r\n    e.end_method();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.Enhancer#emitGetCallbacks(ClassEmitter)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer#emitNewInstanceCallbacks(ClassEmitter)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void emitNewInstanceCallbacks(ClassEmitter ce) {\r\n    CodeEmitter e = ce.begin_method(Constants.ACC_PUBLIC, NEW_INSTANCE, null);\r\n    Type thisType = getThisType(e);\r\n    e.load_arg(0);\r\n    e.invoke_static(thisType, SET_THREAD_CALLBACKS, false);\r\n    emitCommonNewInstance(e);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.Enhancer#emitNewInstanceCallbacks(ClassEmitter)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer#getThisType(CodeEmitter)",
    "headType": "method",
    "relation": "provide",
    "tail": "private Type getThisType(CodeEmitter e) {\r\n    if (currentData == null) {\r\n        return e.getClassEmitter().getClassType();\r\n    } else {\r\n        return Type.getType(currentData.generatedClass);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.Enhancer#getThisType(CodeEmitter)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer#emitCommonNewInstance(CodeEmitter)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void emitCommonNewInstance(CodeEmitter e) {\r\n    Type thisType = getThisType(e);\r\n    e.new_instance(thisType);\r\n    e.dup();\r\n    e.invoke_constructor(thisType);\r\n    e.aconst_null();\r\n    e.invoke_static(thisType, SET_THREAD_CALLBACKS, false);\r\n    e.return_value();\r\n    e.end_method();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.Enhancer#emitCommonNewInstance(CodeEmitter)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer#emitNewInstanceCallback(ClassEmitter)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void emitNewInstanceCallback(ClassEmitter ce) {\r\n    CodeEmitter e = ce.begin_method(Constants.ACC_PUBLIC, SINGLE_NEW_INSTANCE, null);\r\n    switch(callbackTypes.length) {\r\n        case 0:\r\n            // TODO: make sure Callback is null\r\n            break;\r\n        case 1:\r\n            // for now just make a new array; TODO: optimize\r\n            e.push(1);\r\n            e.newarray(CALLBACK);\r\n            e.dup();\r\n            e.push(0);\r\n            e.load_arg(0);\r\n            e.aastore();\r\n            e.invoke_static(getThisType(e), SET_THREAD_CALLBACKS, false);\r\n            break;\r\n        default:\r\n            e.throw_exception(ILLEGAL_STATE_EXCEPTION, \"More than one callback object required\");\r\n    }\r\n    emitCommonNewInstance(e);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.Enhancer#emitNewInstanceCallback(ClassEmitter)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer#emitNewInstanceMultiarg(ClassEmitter,List)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void emitNewInstanceMultiarg(ClassEmitter ce, List constructors) {\r\n    final CodeEmitter e = ce.begin_method(Constants.ACC_PUBLIC, MULTIARG_NEW_INSTANCE, null);\r\n    final Type thisType = getThisType(e);\r\n    e.load_arg(2);\r\n    e.invoke_static(thisType, SET_THREAD_CALLBACKS, false);\r\n    e.new_instance(thisType);\r\n    e.dup();\r\n    e.load_arg(0);\r\n    EmitUtils.constructor_switch(e, constructors, new ObjectSwitchCallback() {\r\n\r\n        @Override\r\n        public void processCase(Object key, Label end) {\r\n            MethodInfo constructor = (MethodInfo) key;\r\n            Type[] types = constructor.getSignature().getArgumentTypes();\r\n            for (int i = 0; i < types.length; i++) {\r\n                e.load_arg(1);\r\n                e.push(i);\r\n                e.aaload();\r\n                e.unbox(types[i]);\r\n            }\r\n            e.invoke_constructor(thisType, constructor.getSignature());\r\n            e.goTo(end);\r\n        }\r\n\r\n        @Override\r\n        public void processDefault() {\r\n            e.throw_exception(ILLEGAL_ARGUMENT_EXCEPTION, \"Constructor not found\");\r\n        }\r\n    });\r\n    e.aconst_null();\r\n    e.invoke_static(thisType, SET_THREAD_CALLBACKS, false);\r\n    e.return_value();\r\n    e.end_method();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.Enhancer#emitNewInstanceMultiarg(ClassEmitter,List)",
    "tailType": "method"
  }
]