[
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap#put(K,V)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap#put(K,V)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap#putIfAbsent(K,V)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic V putIfAbsent(@Nullable K key, @Nullable V value) {\r\n    return put(key, value, false);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMap#putIfAbsent(K,V)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap#putIfAbsent(K,V)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap#putIfAbsent(K,V)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap#put(K,V,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprivate V put(@Nullable final K key, @Nullable final V value, final boolean overwriteExisting) {\r\n    return doTask(key, new Task<V>(TaskOption.RESTRUCTURE_BEFORE, TaskOption.RESIZE) {\r\n\r\n        @Override\r\n        @Nullable\r\n        protected V execute(@Nullable Reference<K, V> ref, @Nullable Entry<K, V> entry, @Nullable Entries<V> entries) {\r\n            if (entry != null) {\r\n                V oldValue = entry.getValue();\r\n                if (overwriteExisting) {\r\n                    entry.setValue(value);\r\n                }\r\n                return oldValue;\r\n            }\r\n            Assert.state(entries != null, \"No entries segment\");\r\n            entries.add(value);\r\n            return null;\r\n        }\r\n    });\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMap#put(K,V,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap#put(K,V,boolean)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap#remove(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic V remove(@Nullable Object key) {\r\n    return doTask(key, new Task<V>(TaskOption.RESTRUCTURE_AFTER, TaskOption.SKIP_IF_EMPTY) {\r\n\r\n        @Override\r\n        @Nullable\r\n        protected V execute(@Nullable Reference<K, V> ref, @Nullable Entry<K, V> entry) {\r\n            if (entry != null) {\r\n                if (ref != null) {\r\n                    ref.release();\r\n                }\r\n                return entry.value;\r\n            }\r\n            return null;\r\n        }\r\n    });\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMap#remove(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap#remove(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap#remove(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap#remove(Object,Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean remove(@Nullable Object key, @Nullable final Object value) {\r\n    Boolean result = doTask(key, new Task<Boolean>(TaskOption.RESTRUCTURE_AFTER, TaskOption.SKIP_IF_EMPTY) {\r\n\r\n        @Override\r\n        protected Boolean execute(@Nullable Reference<K, V> ref, @Nullable Entry<K, V> entry) {\r\n            if (entry != null && ObjectUtils.nullSafeEquals(entry.getValue(), value)) {\r\n                if (ref != null) {\r\n                    ref.release();\r\n                }\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n    });\r\n    return (Boolean.TRUE.equals(result));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMap#remove(Object,Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap#remove(Object,Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap#replace(K,V,V)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean replace(@Nullable K key, @Nullable final V oldValue, @Nullable final V newValue) {\r\n    Boolean result = doTask(key, new Task<Boolean>(TaskOption.RESTRUCTURE_BEFORE, TaskOption.SKIP_IF_EMPTY) {\r\n\r\n        @Override\r\n        protected Boolean execute(@Nullable Reference<K, V> ref, @Nullable Entry<K, V> entry) {\r\n            if (entry != null && ObjectUtils.nullSafeEquals(entry.getValue(), oldValue)) {\r\n                entry.setValue(newValue);\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n    });\r\n    return (Boolean.TRUE.equals(result));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMap#replace(K,V,V)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap#replace(K,V,V)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap#replace(K,V)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic V replace(@Nullable K key, @Nullable final V value) {\r\n    return doTask(key, new Task<V>(TaskOption.RESTRUCTURE_BEFORE, TaskOption.SKIP_IF_EMPTY) {\r\n\r\n        @Override\r\n        @Nullable\r\n        protected V execute(@Nullable Reference<K, V> ref, @Nullable Entry<K, V> entry) {\r\n            if (entry != null) {\r\n                V oldValue = entry.getValue();\r\n                entry.setValue(value);\r\n                return oldValue;\r\n            }\r\n            return null;\r\n        }\r\n    });\r\n}",
    "tailType": "method_code"
  }
]