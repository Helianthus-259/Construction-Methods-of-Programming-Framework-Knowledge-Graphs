[
  {
    "head": "org.springframework.asm.Opcodes#MULTIANEWARRAY",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.Opcodes",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.Opcodes#IFNULL",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.Opcodes#IFNULL",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.Opcodes",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.Opcodes#IFNONNULL",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.Opcodes#IFNONNULL",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.testfixture.ide",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.testfixture.ide",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.testfixture.ide.IdeUtils",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.testfixture.ide.IdeUtils",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.testfixture.ide;\n\n/**\n * Test utilities related to IDEs.\n *\n * @author Sam Brannen\n * @since 6.2\n */\npublic class IdeUtils {\n\n\t/**\n\t * Determine if the current code is running in the Eclipse IDE.\n\t */\n\tpublic static boolean runningInEclipse() {\n\t\treturn StackWalker.getInstance().walk(stream -> stream.anyMatch(\n\t\t\t\tstackFrame -> stackFrame.getClassName().startsWith(\"org.eclipse.jdt\")));\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.testfixture.ide.IdeUtils#runningInEclipse()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine if the current code is running in the Eclipse IDE.\r\n */\r\npublic static boolean runningInEclipse() {\r\n    return StackWalker.getInstance().walk(stream -> stream.anyMatch(stackFrame -> stackFrame.getClassName().startsWith(\"org.eclipse.jdt\")));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.ide.IdeUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.ide.IdeUtils#runningInEclipse()",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.asm",
    "tailType": "package"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.testfixture.io.buffer",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.testfixture.io.buffer;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\nimport java.nio.charset.Charset;\nimport java.nio.charset.StandardCharsets;\nimport java.time.Duration;\nimport java.time.Instant;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.function.Consumer;\nimport java.util.stream.Stream;\n\nimport io.netty.buffer.ByteBufAllocator;\nimport io.netty.buffer.PoolArenaMetric;\nimport io.netty.buffer.PooledByteBufAllocator;\nimport io.netty.buffer.PooledByteBufAllocatorMetric;\nimport io.netty.buffer.UnpooledByteBufAllocator;\nimport io.netty5.buffer.BufferAllocator;\nimport org.junit.jupiter.api.AfterAll;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.extension.AfterEachCallback;\nimport org.junit.jupiter.api.extension.RegisterExtension;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.Arguments;\nimport org.junit.jupiter.params.provider.MethodSource;\nimport reactor.core.publisher.Mono;\n\nimport org.springframework.core.io.buffer.DataBuffer;\nimport org.springframework.core.io.buffer.DataBufferFactory;\nimport org.springframework.core.io.buffer.DataBufferUtils;\nimport org.springframework.core.io.buffer.DefaultDataBufferFactory;\nimport org.springframework.core.io.buffer.Netty5DataBufferFactory;\nimport org.springframework.core.io.buffer.NettyDataBufferFactory;\n\nimport static java.nio.charset.StandardCharsets.UTF_8;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.junit.jupiter.params.provider.Arguments.argumentSet;\n\n/**\n * Base class for tests that read or write data buffers with an extension to check\n * that allocated buffers have been released.\n *\n * @author Arjen Poutsma\n * @author Rossen Stoyanchev\n * @author Sam Brannen\n */\npublic abstract class AbstractDataBufferAllocatingTests {\n\n\tprivate static BufferAllocator netty5OnHeapUnpooled;\n\n\tprivate static BufferAllocator netty5OffHeapUnpooled;\n\n\tprivate static BufferAllocator netty5OffHeapPooled;\n\n\tprivate static BufferAllocator netty5OnHeapPooled;\n\n\tprivate static UnpooledByteBufAllocator netty4OffHeapUnpooled;\n\n\tprivate static UnpooledByteBufAllocator netty4OnHeapUnpooled;\n\n\tprivate static PooledByteBufAllocator netty4OffHeapPooled;\n\n\tprivate static PooledByteBufAllocator netty4OnHeapPooled;\n\n\n\t@RegisterExtension\n\tAfterEachCallback leakDetector = context -> waitForDataBufferRelease(Duration.ofSeconds(2));\n\n\tprotected DataBufferFactory bufferFactory;\n\n\n\tprotected DataBuffer createDataBuffer(int capacity) {\n\t\treturn this.bufferFactory.allocateBuffer(capacity);\n\t}\n\n\tprotected DataBuffer stringBuffer(String value) {\n\t\treturn byteBuffer(value.getBytes(StandardCharsets.UTF_8));\n\t}\n\n\tprotected Mono<DataBuffer> deferStringBuffer(String value) {\n\t\treturn Mono.defer(() -> Mono.just(stringBuffer(value)));\n\t}\n\n\tprotected DataBuffer byteBuffer(byte[] value) {\n\t\tDataBuffer buffer = this.bufferFactory.allocateBuffer(value.length);\n\t\tbuffer.write(value);\n\t\treturn buffer;\n\t}\n\n\tprotected void release(DataBuffer... buffers) {\n\t\tArrays.stream(buffers).forEach(DataBufferUtils::release);\n\t}\n\n\tprotected Consumer<DataBuffer> stringConsumer(String expected) {\n\t\treturn stringConsumer(expected, UTF_8);\n\t}\n\n\tprotected Consumer<DataBuffer> stringConsumer(String expected, Charset charset) {\n\t\treturn dataBuffer -> {\n\t\t\tString value = dataBuffer.toString(charset);\n\t\t\tDataBufferUtils.release(dataBuffer);\n\t\t\tassertThat(value).isEqualTo(expected);\n\t\t};\n\t}\n\n\t/**\n\t * Wait until allocations are at 0, or the given duration elapses.\n\t */\n\tprivate void waitForDataBufferRelease(Duration duration) throws InterruptedException {\n\t\tInstant start = Instant.now();\n\t\twhile (true) {\n\t\t\ttry {\n\t\t\t\tverifyAllocations();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcatch (AssertionError ex) {\n\t\t\t\tif (Instant.now().isAfter(start.plus(duration))) {\n\t\t\t\t\tthrow ex;\n\t\t\t\t}\n\t\t\t}\n\t\t\tThread.sleep(50);\n\t\t}\n\t}\n\n\tprivate void verifyAllocations() {\n\t\tif (this.bufferFactory instanceof NettyDataBufferFactory) {\n\t\t\tByteBufAllocator allocator = ((NettyDataBufferFactory) this.bufferFactory).getByteBufAllocator();\n\t\t\tif (allocator instanceof PooledByteBufAllocator) {\n\t\t\t\tInstant start = Instant.now();\n\t\t\t\twhile (true) {\n\t\t\t\t\tPooledByteBufAllocatorMetric metric = ((PooledByteBufAllocator) allocator).metric();\n\t\t\t\t\tlong total = getAllocations(metric.directArenas()) + getAllocations(metric.heapArenas());\n\t\t\t\t\tif (total == 0) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (Instant.now().isBefore(start.plus(Duration.ofSeconds(5)))) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tThread.sleep(50);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch (InterruptedException ex) {\n\t\t\t\t\t\t\t// ignore\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tassertThat(total).as(\"ByteBuf Leak: \" + total + \" unreleased allocations\").isEqualTo(0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate static long getAllocations(List<PoolArenaMetric> metrics) {\n\t\treturn metrics.stream().mapToLong(PoolArenaMetric::numActiveAllocations).sum();\n\t}\n\n\t@BeforeAll\n\t@SuppressWarnings(\"deprecation\") // PooledByteBufAllocator no longer supports tinyCacheSize.\n\tpublic static void createAllocators() {\n\t\tnetty4OnHeapUnpooled = new UnpooledByteBufAllocator(false);\n\t\tnetty4OffHeapUnpooled = new UnpooledByteBufAllocator(true);\n\t\tnetty4OnHeapPooled = new PooledByteBufAllocator(false, 1, 1, 4096, 4, 0, 0, 0, true);\n\t\tnetty4OffHeapPooled = new PooledByteBufAllocator(true, 1, 1, 4096, 4, 0, 0, 0, true);\n\n\t\tnetty5OnHeapUnpooled = BufferAllocator.onHeapUnpooled();\n\t\tnetty5OffHeapUnpooled = BufferAllocator.offHeapUnpooled();\n\t\tnetty5OnHeapPooled = BufferAllocator.onHeapPooled();\n\t\tnetty5OffHeapPooled = BufferAllocator.offHeapPooled();\n\t}\n\n\t@AfterAll\n\tstatic void closeAllocators() {\n\t\tnetty5OnHeapUnpooled.close();\n\t\tnetty5OffHeapUnpooled.close();\n\t\tnetty5OnHeapPooled.close();\n\t\tnetty5OffHeapPooled.close();\n\t}\n\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Target(ElementType.METHOD)\n\t@ParameterizedTest\n\t@MethodSource(\"org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests#dataBufferFactories()\")\n\tpublic @interface ParameterizedDataBufferAllocatingTest {\n\t}\n\n\tpublic static Stream<Arguments> dataBufferFactories() {\n\t\treturn Stream.of(\n\t\t\t// Netty 4\n\t\t\targumentSet(\"NettyDataBufferFactory - UnpooledByteBufAllocator - preferDirect = true\",\n\t\t\t\t\tnew NettyDataBufferFactory(netty4OffHeapUnpooled)),\n\t\t\targumentSet(\"NettyDataBufferFactory - UnpooledByteBufAllocator - preferDirect = false\",\n\t\t\t\t\tnew NettyDataBufferFactory(netty4OnHeapUnpooled)),\n\t\t\targumentSet(\"NettyDataBufferFactory - PooledByteBufAllocator - preferDirect = true\",\n\t\t\t\t\tnew NettyDataBufferFactory(netty4OffHeapPooled)),\n\t\t\targumentSet(\"NettyDataBufferFactory - PooledByteBufAllocator - preferDirect = false\",\n\t\t\t\t\tnew NettyDataBufferFactory(netty4OnHeapPooled)),\n\t\t\t// Netty 5\n\t\t\targumentSet(\"Netty5DataBufferFactory - BufferAllocator.onHeapUnpooled()\",\n\t\t\t\t\tnew Netty5DataBufferFactory(netty5OnHeapUnpooled)),\n\t\t\targumentSet(\"Netty5DataBufferFactory - BufferAllocator.offHeapUnpooled()\",\n\t\t\t\t\tnew Netty5DataBufferFactory(netty5OffHeapUnpooled)),\n\t\t\targumentSet(\"Netty5DataBufferFactory - BufferAllocator.onHeapPooled()\",\n\t\t\t\t\tnew Netty5DataBufferFactory(netty5OnHeapPooled)),\n\t\t\targumentSet(\"Netty5DataBufferFactory - BufferAllocator.offHeapPooled()\",\n\t\t\t\t\tnew Netty5DataBufferFactory(netty5OffHeapPooled)),\n\t\t\t// Default\n\t\t\targumentSet(\"DefaultDataBufferFactory - preferDirect = true\",\n\t\t\t\t\tnew DefaultDataBufferFactory(true)),\n\t\t\targumentSet(\"DefaultDataBufferFactory - preferDirect = false\",\n\t\t\t\t\tnew DefaultDataBufferFactory(false))\n\t\t);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests#netty5OnHeapUnpooled",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests#netty5OnHeapUnpooled",
    "headType": "field",
    "relation": "haveType",
    "tail": "BufferAllocator",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests#netty5OffHeapUnpooled",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests#netty5OffHeapUnpooled",
    "headType": "field",
    "relation": "haveType",
    "tail": "BufferAllocator",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests#netty5OffHeapPooled",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests#netty5OffHeapPooled",
    "headType": "field",
    "relation": "haveType",
    "tail": "BufferAllocator",
    "tailType": "type"
  }
]