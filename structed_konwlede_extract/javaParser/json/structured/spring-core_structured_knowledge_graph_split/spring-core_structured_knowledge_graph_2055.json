[
  {
    "head": "org.springframework.core.io.support.ResourcePropertySourceTests#withLocationAndExplicitNameAndExplicitClassLoader()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid withLocationAndExplicitNameAndExplicitClassLoader() throws IOException {\r\n    PropertySource<?> ps = new ResourcePropertySource(\"ps1\", PROPERTIES_LOCATION, getClass().getClassLoader());\r\n    assertThat(ps.getProperty(\"foo\")).isEqualTo(\"bar\");\r\n    assertThat(ps.getName()).isEqualTo(\"ps1\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.ResourcePropertySourceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.ResourcePropertySourceTests#withLocationAndExplicitNameAndExplicitClassLoader()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.ResourcePropertySourceTests#withLocationAndExplicitNameAndExplicitClassLoader()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.support.ResourcePropertySourceTests#withLocationAndGeneratedNameAndExplicitClassLoader()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid withLocationAndGeneratedNameAndExplicitClassLoader() throws IOException {\r\n    PropertySource<?> ps = new ResourcePropertySource(PROPERTIES_LOCATION, getClass().getClassLoader());\r\n    assertThat(ps.getProperty(\"foo\")).isEqualTo(\"bar\");\r\n    assertThat(ps.getName()).isEqualTo(PROPERTIES_RESOURCE_DESCRIPTION);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.ResourcePropertySourceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.ResourcePropertySourceTests#withLocationAndGeneratedNameAndExplicitClassLoader()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.ResourcePropertySourceTests#withLocationAndGeneratedNameAndExplicitClassLoader()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.support.ResourcePropertySourceTests#withResourceAndGeneratedName()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid withResourceAndGeneratedName() throws IOException {\r\n    PropertySource<?> ps = new ResourcePropertySource(new ClassPathResource(PROPERTIES_PATH));\r\n    assertThat(ps.getProperty(\"foo\")).isEqualTo(\"bar\");\r\n    assertThat(ps.getName()).isEqualTo(PROPERTIES_RESOURCE_DESCRIPTION);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.ResourcePropertySourceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.ResourcePropertySourceTests#withResourceAndGeneratedName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.ResourcePropertySourceTests#withResourceAndGeneratedName()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.support.ResourcePropertySourceTests#withResourceAndExplicitName()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid withResourceAndExplicitName() throws IOException {\r\n    PropertySource<?> ps = new ResourcePropertySource(\"ps1\", new ClassPathResource(PROPERTIES_PATH));\r\n    assertThat(ps.getProperty(\"foo\")).isEqualTo(\"bar\");\r\n    assertThat(ps.getName()).isEqualTo(\"ps1\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.ResourcePropertySourceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.ResourcePropertySourceTests#withResourceAndExplicitName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.ResourcePropertySourceTests#withResourceAndExplicitName()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.support.ResourcePropertySourceTests#withResourceHavingNoDescription()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid withResourceHavingNoDescription() throws IOException {\r\n    PropertySource<?> ps = new ResourcePropertySource(new ByteArrayResource(\"foo=bar\".getBytes(), \"\"));\r\n    assertThat(ps.getProperty(\"foo\")).isEqualTo(\"bar\");\r\n    assertThat(ps.getName()).isEqualTo(\"Byte array resource []\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.ResourcePropertySourceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.ResourcePropertySourceTests#withResourceHavingNoDescription()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.ResourcePropertySourceTests#withResourceHavingNoDescription()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.io.support",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.io.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.support.ResourceRegionTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.support.ResourceRegionTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io.support;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\nimport static org.mockito.Mockito.mock;\n\n/**\n * Tests for {@link ResourceRegion}.\n *\n * @author Brian Clozel\n */\nclass ResourceRegionTests {\n\n\t@Test\n\tvoid shouldThrowExceptionWithNullResource() {\n\t\tassertThatIllegalArgumentException()\n\t\t\t\t.isThrownBy(() -> new ResourceRegion(null, 0, 1));\n\t}\n\n\t@Test\n\tvoid shouldThrowExceptionForNegativePosition() {\n\t\tassertThatIllegalArgumentException()\n\t\t\t\t.isThrownBy(() -> new ResourceRegion(mock(), -1, 1));\n\t}\n\n\t@Test\n\tvoid shouldThrowExceptionForNegativeCount() {\n\t\tassertThatIllegalArgumentException()\n\t\t\t\t.isThrownBy(() -> new ResourceRegion(mock(), 0, -1));\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.support.ResourceRegionTests#shouldThrowExceptionWithNullResource()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldThrowExceptionWithNullResource() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> new ResourceRegion(null, 0, 1));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.ResourceRegionTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.ResourceRegionTests#shouldThrowExceptionWithNullResource()",
    "tailType": "method"
  }
]