[
  {
    "head": "org.springframework.util.ConcurrentLruCache",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentLruCache#processWrite(Runnable)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentLruCache#drainOperations()",
    "headType": "method",
    "relation": "provide",
    "tail": "private void drainOperations() {\r\n    if (this.evictionLock.tryLock()) {\r\n        try {\r\n            this.drainStatus.lazySet(DrainStatus.PROCESSING);\r\n            this.readOperations.drain();\r\n            this.writeOperations.drain();\r\n        } finally {\r\n            this.drainStatus.compareAndSet(DrainStatus.PROCESSING, DrainStatus.IDLE);\r\n            this.evictionLock.unlock();\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentLruCache",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentLruCache#drainOperations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentLruCache#capacity()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the maximum number of entries in the cache.\r\n * @see #size()\r\n */\r\npublic int capacity() {\r\n    return this.capacity;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentLruCache",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentLruCache#capacity()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentLruCache#sizeLimit()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the maximum number of entries in the cache.\r\n * @deprecated in favor of {@link #capacity()} as of 6.0.\r\n */\r\n@Deprecated(since = \"6.0\")\r\npublic int sizeLimit() {\r\n    return this.capacity;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentLruCache",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentLruCache#sizeLimit()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentLruCache#sizeLimit()",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentLruCache#size()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the current size of the cache.\r\n * @see #capacity()\r\n */\r\npublic int size() {\r\n    return this.cache.size();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentLruCache",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentLruCache#size()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentLruCache#clear()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Immediately remove all entries from this cache.\r\n */\r\npublic void clear() {\r\n    this.evictionLock.lock();\r\n    try {\r\n        Node<K, V> node;\r\n        while ((node = this.evictionQueue.poll()) != null) {\r\n            this.cache.remove(node.key, node);\r\n            markAsRemoved(node);\r\n        }\r\n        this.readOperations.clear();\r\n        this.writeOperations.drainAll();\r\n    } finally {\r\n        this.evictionLock.unlock();\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentLruCache",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentLruCache#clear()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentLruCache#markAsRemoved(Node<K,V>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/*\r\n\t * Transition the node to the {@code removed} state and decrement the current size of the cache.\r\n\t */\r\nprivate void markAsRemoved(Node<K, V> node) {\r\n    for (; ; ) {\r\n        CacheEntry<V> current = node.get();\r\n        CacheEntry<V> removed = new CacheEntry<>(current.value, CacheEntryState.REMOVED);\r\n        if (node.compareAndSet(current, removed)) {\r\n            this.currentSize.lazySet(this.currentSize.get() - 1);\r\n            return;\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentLruCache",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentLruCache#markAsRemoved(Node<K,V>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentLruCache#contains(K)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine whether the given key is present in this cache.\r\n * @param key the key to check for\r\n * @return {@code true} if the key is present, {@code false} if there was no matching key\r\n */\r\npublic boolean contains(K key) {\r\n    return this.cache.containsKey(key);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentLruCache",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentLruCache#contains(K)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentLruCache#remove(K)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Immediately remove the given key and any associated value.\r\n * @param key the key to evict the entry for\r\n * @return {@code true} if the key was present before,\r\n * {@code false} if there was no matching key\r\n */\r\npublic boolean remove(K key) {\r\n    final Node<K, V> node = this.cache.remove(key);\r\n    if (node == null) {\r\n        return false;\r\n    }\r\n    markForRemoval(node);\r\n    processWrite(new RemovalTask(node));\r\n    return true;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentLruCache",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentLruCache#remove(K)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentLruCache#markForRemoval(Node<K,V>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/*\r\n\t * Transition the node from the {@code active} state to the {@code pending removal} state,\r\n\t * if the transition is valid.\r\n\t */\r\nprivate void markForRemoval(Node<K, V> node) {\r\n    for (; ; ) {\r\n        final CacheEntry<V> current = node.get();\r\n        if (!current.isActive()) {\r\n            return;\r\n        }\r\n        final CacheEntry<V> pendingRemoval = new CacheEntry<>(current.value, CacheEntryState.PENDING_REMOVAL);\r\n        if (node.compareAndSet(current, pendingRemoval)) {\r\n            return;\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentLruCache",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentLruCache#markForRemoval(Node<K,V>)",
    "tailType": "method"
  }
]