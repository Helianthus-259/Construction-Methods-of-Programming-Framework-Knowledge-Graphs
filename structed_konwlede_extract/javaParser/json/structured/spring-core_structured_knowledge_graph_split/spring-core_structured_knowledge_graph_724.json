[
  {
    "head": "org.springframework.cglib.util.Generator",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractClassGenerator",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.util.ParallelSorterEmitter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.util.ParallelSorterEmitter",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2003 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.cglib.util;\n\nimport org.springframework.asm.ClassVisitor;\nimport org.springframework.asm.Type;\nimport org.springframework.cglib.core.ClassEmitter;\nimport org.springframework.cglib.core.CodeEmitter;\nimport org.springframework.cglib.core.Constants;\nimport org.springframework.cglib.core.EmitUtils;\nimport org.springframework.cglib.core.Local;\nimport org.springframework.cglib.core.Signature;\nimport org.springframework.cglib.core.TypeUtils;\n\nclass ParallelSorterEmitter extends ClassEmitter {\n    private static final Type PARALLEL_SORTER =\n      TypeUtils.parseType(\"org.springframework.cglib.util.ParallelSorter\");\n    private static final Signature CSTRUCT_OBJECT_ARRAY =\n      TypeUtils.parseConstructor(\"Object[]\");\n    private static final Signature NEW_INSTANCE =\n      new Signature(\"newInstance\", PARALLEL_SORTER, new Type[]{ Constants.TYPE_OBJECT_ARRAY });\n    private static final Signature SWAP =\n      TypeUtils.parseSignature(\"void swap(int, int)\");\n\n    public ParallelSorterEmitter(ClassVisitor v, String className, Object[] arrays) {\n        super(v);\n        begin_class(Constants.V1_8, Constants.ACC_PUBLIC, className, PARALLEL_SORTER, null, Constants.SOURCE_FILE);\n        EmitUtils.null_constructor(this);\n        EmitUtils.factory_method(this, NEW_INSTANCE);\n        generateConstructor(arrays);\n        generateSwap(arrays);\n        end_class();\n    }\n\n    private String getFieldName(int index) {\n        return \"FIELD_\" + index;\n    }\n\n    private void generateConstructor(Object[] arrays) {\n        CodeEmitter e = begin_method(Constants.ACC_PUBLIC, CSTRUCT_OBJECT_ARRAY, null);\n        e.load_this();\n        e.super_invoke_constructor();\n        e.load_this();\n        e.load_arg(0);\n        e.super_putfield(\"a\", Constants.TYPE_OBJECT_ARRAY);\n        for (int i = 0; i < arrays.length; i++) {\n            Type type = Type.getType(arrays[i].getClass());\n            declare_field(Constants.ACC_PRIVATE, getFieldName(i), type, null);\n            e.load_this();\n            e.load_arg(0);\n            e.push(i);\n            e.aaload();\n            e.checkcast(type);\n            e.putfield(getFieldName(i));\n        }\n        e.return_value();\n        e.end_method();\n    }\n\n    private void generateSwap(final Object[] arrays) {\n        CodeEmitter e = begin_method(Constants.ACC_PUBLIC, SWAP, null);\n        for (int i = 0; i < arrays.length; i++) {\n            Type type = Type.getType(arrays[i].getClass());\n            Type component = TypeUtils.getComponentType(type);\n            Local T = e.make_local(type);\n\n            e.load_this();\n            e.getfield(getFieldName(i));\n            e.store_local(T);\n\n            e.load_local(T);\n            e.load_arg(0);\n\n            e.load_local(T);\n            e.load_arg(1);\n            e.array_load(component);\n\n            e.load_local(T);\n            e.load_arg(1);\n\n            e.load_local(T);\n            e.load_arg(0);\n            e.array_load(component);\n\n            e.array_store(component);\n            e.array_store(component);\n        }\n        e.return_value();\n        e.end_method();\n    }\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.util.ParallelSorterEmitter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.util.ParallelSorterEmitter#PARALLEL_SORTER",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.util.ParallelSorterEmitter#PARALLEL_SORTER",
    "headType": "field",
    "relation": "haveType",
    "tail": "Type",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.util.ParallelSorterEmitter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.util.ParallelSorterEmitter#CSTRUCT_OBJECT_ARRAY",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.util.ParallelSorterEmitter#CSTRUCT_OBJECT_ARRAY",
    "headType": "field",
    "relation": "haveType",
    "tail": "Signature",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.util.ParallelSorterEmitter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.util.ParallelSorterEmitter#NEW_INSTANCE",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.util.ParallelSorterEmitter#NEW_INSTANCE",
    "headType": "field",
    "relation": "haveType",
    "tail": "Signature",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.util.ParallelSorterEmitter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.util.ParallelSorterEmitter#SWAP",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.util.ParallelSorterEmitter#SWAP",
    "headType": "field",
    "relation": "haveType",
    "tail": "Signature",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.util.ParallelSorterEmitter#getFieldName(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "private String getFieldName(int index) {\r\n    return \"FIELD_\" + index;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.util.ParallelSorterEmitter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.util.ParallelSorterEmitter#getFieldName(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.util.ParallelSorterEmitter#generateConstructor(Object[])",
    "headType": "method",
    "relation": "provide",
    "tail": "private void generateConstructor(Object[] arrays) {\r\n    CodeEmitter e = begin_method(Constants.ACC_PUBLIC, CSTRUCT_OBJECT_ARRAY, null);\r\n    e.load_this();\r\n    e.super_invoke_constructor();\r\n    e.load_this();\r\n    e.load_arg(0);\r\n    e.super_putfield(\"a\", Constants.TYPE_OBJECT_ARRAY);\r\n    for (int i = 0; i < arrays.length; i++) {\r\n        Type type = Type.getType(arrays[i].getClass());\r\n        declare_field(Constants.ACC_PRIVATE, getFieldName(i), type, null);\r\n        e.load_this();\r\n        e.load_arg(0);\r\n        e.push(i);\r\n        e.aaload();\r\n        e.checkcast(type);\r\n        e.putfield(getFieldName(i));\r\n    }\r\n    e.return_value();\r\n    e.end_method();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.util.ParallelSorterEmitter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.util.ParallelSorterEmitter#generateConstructor(Object[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.util.ParallelSorterEmitter#generateSwap(Object[])",
    "headType": "method",
    "relation": "provide",
    "tail": "private void generateSwap(final Object[] arrays) {\r\n    CodeEmitter e = begin_method(Constants.ACC_PUBLIC, SWAP, null);\r\n    for (int i = 0; i < arrays.length; i++) {\r\n        Type type = Type.getType(arrays[i].getClass());\r\n        Type component = TypeUtils.getComponentType(type);\r\n        Local T = e.make_local(type);\r\n        e.load_this();\r\n        e.getfield(getFieldName(i));\r\n        e.store_local(T);\r\n        e.load_local(T);\r\n        e.load_arg(0);\r\n        e.load_local(T);\r\n        e.load_arg(1);\r\n        e.array_load(component);\r\n        e.load_local(T);\r\n        e.load_arg(1);\r\n        e.load_local(T);\r\n        e.load_arg(0);\r\n        e.array_load(component);\r\n        e.array_store(component);\r\n        e.array_store(component);\r\n    }\r\n    e.return_value();\r\n    e.end_method();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.util.ParallelSorterEmitter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.util.ParallelSorterEmitter#generateSwap(Object[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.util.ParallelSorterEmitter",
    "headType": "class",
    "relation": "extend",
    "tail": "ClassEmitter",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.util",
    "tailType": "package"
  }
]