[
  {
    "head": "org.springframework.util.CollectionUtils#findValueOfType(Collection<?>,Class<T>)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CollectionUtils#findValueOfType(Collection<?>,Class<T>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CollectionUtils#findValueOfType(Collection<?>,Class<?>[])",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Find a single value of one of the given types in the given Collection:\r\n * searching the Collection for a value of the first type, then\r\n * searching for a value of the second type, etc.\r\n * @param collection the collection to search\r\n * @param types the types to look for, in prioritized order\r\n * @return a value of one of the given types found if there is a clear match,\r\n * or {@code null} if none or more than one such value found\r\n */\r\n@Nullable\r\npublic static Object findValueOfType(Collection<?> collection, Class<?>[] types) {\r\n    if (isEmpty(collection) || ObjectUtils.isEmpty(types)) {\r\n        return null;\r\n    }\r\n    for (Class<?> type : types) {\r\n        Object value = findValueOfType(collection, type);\r\n        if (value != null) {\r\n            return value;\r\n        }\r\n    }\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CollectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CollectionUtils#findValueOfType(Collection<?>,Class<?>[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CollectionUtils#findValueOfType(Collection<?>,Class<?>[])",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CollectionUtils#hasUniqueObject(Collection<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine whether the given Collection only contains a single unique object.\r\n * @param collection the Collection to check\r\n * @return {@code true} if the collection contains a single reference or\r\n * multiple references to the same instance, {@code false} otherwise\r\n */\r\npublic static boolean hasUniqueObject(Collection<?> collection) {\r\n    if (isEmpty(collection)) {\r\n        return false;\r\n    }\r\n    boolean hasCandidate = false;\r\n    Object candidate = null;\r\n    for (Object elem : collection) {\r\n        if (!hasCandidate) {\r\n            hasCandidate = true;\r\n            candidate = elem;\r\n        } else if (candidate != elem) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CollectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CollectionUtils#hasUniqueObject(Collection<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CollectionUtils#findCommonElementType(Collection<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Find the common element type of the given Collection, if any.\r\n * @param collection the Collection to check\r\n * @return the common element type, or {@code null} if no clear\r\n * common type has been found (or the collection was empty)\r\n */\r\n@Nullable\r\npublic static Class<?> findCommonElementType(Collection<?> collection) {\r\n    if (isEmpty(collection)) {\r\n        return null;\r\n    }\r\n    Class<?> candidate = null;\r\n    for (Object val : collection) {\r\n        if (val != null) {\r\n            if (candidate == null) {\r\n                candidate = val.getClass();\r\n            } else if (candidate != val.getClass()) {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n    return candidate;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CollectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CollectionUtils#findCommonElementType(Collection<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CollectionUtils#findCommonElementType(Collection<?>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CollectionUtils#firstElement(Set<T>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Retrieve the first element of the given Set, using {@link SortedSet#first()}\r\n * or otherwise using the iterator.\r\n * @param set the Set to check (may be {@code null} or empty)\r\n * @return the first element, or {@code null} if none\r\n * @since 5.2.3\r\n * @see SortedSet\r\n * @see LinkedHashMap#keySet()\r\n * @see java.util.LinkedHashSet\r\n */\r\n@Nullable\r\npublic static <T> T firstElement(@Nullable Set<T> set) {\r\n    if (isEmpty(set)) {\r\n        return null;\r\n    }\r\n    if (set instanceof SortedSet<T> sortedSet) {\r\n        return sortedSet.first();\r\n    }\r\n    Iterator<T> it = set.iterator();\r\n    T first = null;\r\n    if (it.hasNext()) {\r\n        first = it.next();\r\n    }\r\n    return first;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CollectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CollectionUtils#firstElement(Set<T>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CollectionUtils#firstElement(Set<T>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CollectionUtils#firstElement(List<T>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Retrieve the first element of the given List, accessing the zero index.\r\n * @param list the List to check (may be {@code null} or empty)\r\n * @return the first element, or {@code null} if none\r\n * @since 5.2.3\r\n */\r\n@Nullable\r\npublic static <T> T firstElement(@Nullable List<T> list) {\r\n    if (isEmpty(list)) {\r\n        return null;\r\n    }\r\n    return list.get(0);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CollectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CollectionUtils#firstElement(List<T>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CollectionUtils#firstElement(List<T>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CollectionUtils#lastElement(Set<T>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Retrieve the last element of the given Set, using {@link SortedSet#last()}\r\n * or otherwise iterating over all elements (assuming a linked set).\r\n * @param set the Set to check (may be {@code null} or empty)\r\n * @return the last element, or {@code null} if none\r\n * @since 5.0.3\r\n * @see SortedSet\r\n * @see LinkedHashMap#keySet()\r\n * @see java.util.LinkedHashSet\r\n */\r\n@Nullable\r\npublic static <T> T lastElement(@Nullable Set<T> set) {\r\n    if (isEmpty(set)) {\r\n        return null;\r\n    }\r\n    if (set instanceof SortedSet<T> sortedSet) {\r\n        return sortedSet.last();\r\n    }\r\n    // Full iteration necessary...\r\n    Iterator<T> it = set.iterator();\r\n    T last = null;\r\n    while (it.hasNext()) {\r\n        last = it.next();\r\n    }\r\n    return last;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CollectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CollectionUtils#lastElement(Set<T>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CollectionUtils#lastElement(Set<T>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CollectionUtils#lastElement(List<T>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Retrieve the last element of the given List, accessing the highest index.\r\n * @param list the List to check (may be {@code null} or empty)\r\n * @return the last element, or {@code null} if none\r\n * @since 5.0.3\r\n */\r\n@Nullable\r\npublic static <T> T lastElement(@Nullable List<T> list) {\r\n    if (isEmpty(list)) {\r\n        return null;\r\n    }\r\n    return list.get(list.size() - 1);\r\n}",
    "tailType": "method_code"
  }
]