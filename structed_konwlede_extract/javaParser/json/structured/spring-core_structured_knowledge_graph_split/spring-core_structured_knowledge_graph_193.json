[
  {
    "head": "org.springframework.aot.hint.Builder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.Builder#build()",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.CompositeSetTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.CompositeSetTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * @author Arjen Poutsma\n */\nclass CompositeSetTests {\n\n\t@Test\n\tvoid testEquals() {\n\t\tSet<String> first = Set.of(\"foo\", \"bar\");\n\t\tSet<String> second = Set.of(\"baz\", \"qux\");\n\t\tCompositeSet<String> composite = new CompositeSet<>(first, second);\n\n\t\tSet<String> all = new HashSet<>(first);\n\t\tall.addAll(second);\n\n\t\tassertThat(composite.equals(all)).isTrue();\n\t\tassertThat(composite.equals(first)).isFalse();\n\t\tassertThat(composite.equals(second)).isFalse();\n\t\tassertThat(composite.equals(Collections.emptySet())).isFalse();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.CompositeSetTests#testEquals()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid testEquals() {\r\n    Set<String> first = Set.of(\"foo\", \"bar\");\r\n    Set<String> second = Set.of(\"baz\", \"qux\");\r\n    CompositeSet<String> composite = new CompositeSet<>(first, second);\r\n    Set<String> all = new HashSet<>(first);\r\n    all.addAll(second);\r\n    assertThat(composite.equals(all)).isTrue();\r\n    assertThat(composite.equals(first)).isFalse();\r\n    assertThat(composite.equals(second)).isFalse();\r\n    assertThat(composite.equals(Collections.emptySet())).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CompositeSetTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CompositeSetTests#testEquals()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CompositeSetTests#testEquals()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.hint",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.hint",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.ResourceHints",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHints",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint;\n\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.function.Consumer;\nimport java.util.stream.Stream;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.io.ClassPathResource;\nimport org.springframework.core.io.Resource;\n\n/**\n * Gather the need for resources available at runtime.\n *\n * @author Stephane Nicoll\n * @author Sam Brannen\n * @since 6.0\n */\npublic class ResourceHints {\n\n\tprivate final Set<TypeReference> types;\n\n\tprivate final List<ResourcePatternHints> resourcePatternHints;\n\n\tprivate final Set<ResourceBundleHint> resourceBundleHints;\n\n\n\tpublic ResourceHints() {\n\t\tthis.types = new HashSet<>();\n\t\tthis.resourcePatternHints = new ArrayList<>();\n\t\tthis.resourceBundleHints = new LinkedHashSet<>();\n\t}\n\n\t/**\n\t * Return the resources that should be made available at runtime.\n\t * @return a stream of {@link ResourcePatternHints}\n\t */\n\tpublic Stream<ResourcePatternHints> resourcePatternHints() {\n\t\tStream<ResourcePatternHints> patterns = this.resourcePatternHints.stream();\n\t\treturn (this.types.isEmpty() ? patterns\n\t\t\t\t: Stream.concat(Stream.of(typesPatternResourceHint()), patterns));\n\t}\n\n\t/**\n\t * Return the resource bundles that should be made available at runtime.\n\t * @return a stream of {@link ResourceBundleHint}\n\t */\n\tpublic Stream<ResourceBundleHint> resourceBundleHints() {\n\t\treturn this.resourceBundleHints.stream();\n\t}\n\n\t/**\n\t * Register a pattern if the given {@code location} is available on the\n\t * classpath. This delegates to {@link ClassLoader#getResource(String)}\n\t * which validates directories as well. The location is not included in\n\t * the hint.\n\t * @param classLoader the classloader to use\n\t * @param location a '/'-separated path name that should exist\n\t * @param resourceHint a builder to customize the resource pattern\n\t * @return {@code this}, to facilitate method chaining\n\t */\n\tpublic ResourceHints registerPatternIfPresent(@Nullable ClassLoader classLoader, String location,\n\t\t\tConsumer<ResourcePatternHints.Builder> resourceHint) {\n\t\tClassLoader classLoaderToUse = (classLoader != null ? classLoader : getClass().getClassLoader());\n\t\tif (classLoaderToUse.getResource(location) != null) {\n\t\t\tregisterPattern(resourceHint);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Register that the resources matching the specified pattern should be\n\t * made available at runtime.\n\t * @param resourceHint a builder to further customize the resource pattern\n\t * @return {@code this}, to facilitate method chaining\n\t */\n\tpublic ResourceHints registerPattern(@Nullable Consumer<ResourcePatternHints.Builder> resourceHint) {\n\t\tResourcePatternHints.Builder builder = new ResourcePatternHints.Builder();\n\t\tif (resourceHint != null) {\n\t\t\tresourceHint.accept(builder);\n\t\t}\n\t\tthis.resourcePatternHints.add(builder.build());\n\t\treturn this;\n\t}\n\n\t/**\n\t * Register that the resources matching the specified pattern should be\n\t * made available at runtime.\n\t * @param include a pattern of the resources to include (see {@link ResourcePatternHint} documentation)\n\t * @return {@code this}, to facilitate method chaining\n\t */\n\tpublic ResourceHints registerPattern(String include) {\n\t\treturn registerPattern(builder -> builder.includes(include));\n\t}\n\n\t/**\n\t * Register that the supplied resource should be made available at runtime.\n\t * @param resource the resource to register\n\t * @throws IllegalArgumentException if the supplied resource is not a\n\t * {@link ClassPathResource} or does not {@linkplain Resource#exists() exist}\n\t * @see #registerPattern(String)\n\t * @see ClassPathResource#getPath()\n\t */\n\tpublic void registerResource(Resource resource) {\n\t\tif (resource instanceof ClassPathResource classPathResource && classPathResource.exists()) {\n\t\t\tregisterPattern(classPathResource.getPath());\n\t\t}\n\t\telse {\n\t\t\tthrow new IllegalArgumentException(\"Resource must be a ClassPathResource that exists: \" + resource);\n\t\t}\n\t}\n\n\t/**\n\t * Register that the bytecode of the type defined by the specified\n\t * {@link TypeReference} should be made available at runtime.\n\t * @param type the type to include\n\t * @return {@code this}, to facilitate method chaining\n\t */\n\tpublic ResourceHints registerType(TypeReference type) {\n\t\tthis.types.add(type);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Register that the bytecode of the specified type should be made\n\t * available at runtime.\n\t * @param type the type to include\n\t * @return {@code this}, to facilitate method chaining\n\t */\n\tpublic ResourceHints registerType(Class<?> type) {\n\t\treturn registerType(TypeReference.of(type));\n\t}\n\n\t/**\n\t * Register that the resource bundle with the specified base name should\n\t * be made available at runtime.\n\t * @param baseName the base name of the resource bundle\n\t * @param resourceHint a builder to further customize the resource bundle\n\t * @return {@code this}, to facilitate method chaining\n\t */\n\tpublic ResourceHints registerResourceBundle(String baseName, @Nullable Consumer<ResourceBundleHint.Builder> resourceHint) {\n\t\tResourceBundleHint.Builder builder = new ResourceBundleHint.Builder(baseName);\n\t\tif (resourceHint != null) {\n\t\t\tresourceHint.accept(builder);\n\t\t}\n\t\tthis.resourceBundleHints.add(builder.build());\n\t\treturn this;\n\t}\n\n\t/**\n\t * Register that the resource bundle with the specified base name should\n\t * be made available at runtime.\n\t * @param baseName the base name of the resource bundle\n\t * @return {@code this}, to facilitate method chaining\n\t */\n\tpublic ResourceHints registerResourceBundle(String baseName) {\n\t\treturn registerResourceBundle(baseName, null);\n\t}\n\n\tprivate ResourcePatternHints typesPatternResourceHint() {\n\t\tResourcePatternHints.Builder builder = new ResourcePatternHints.Builder();\n\t\tthis.types.forEach(type -> builder.includes(toIncludePattern(type)));\n\t\treturn builder.build();\n\t}\n\n\tprivate String toIncludePattern(TypeReference type) {\n\t\treturn type.getName().replace(\".\", \"/\") + \".class\";\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHints",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.hint.ResourceHints#types",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHints#types",
    "headType": "field",
    "relation": "haveType",
    "tail": "Set<TypeReference>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHints",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.hint.ResourceHints#resourcePatternHints",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHints#resourcePatternHints",
    "headType": "field",
    "relation": "haveType",
    "tail": "List<ResourcePatternHints>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHints",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.hint.ResourceHints#resourceBundleHints",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHints#resourceBundleHints",
    "headType": "field",
    "relation": "haveType",
    "tail": "Set<ResourceBundleHint>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHints#resourcePatternHints()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the resources that should be made available at runtime.\r\n * @return a stream of {@link ResourcePatternHints}\r\n */\r\npublic Stream<ResourcePatternHints> resourcePatternHints() {\r\n    Stream<ResourcePatternHints> patterns = this.resourcePatternHints.stream();\r\n    return (this.types.isEmpty() ? patterns : Stream.concat(Stream.of(typesPatternResourceHint()), patterns));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHints",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ResourceHints#resourcePatternHints()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHints#resourceBundleHints()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the resource bundles that should be made available at runtime.\r\n * @return a stream of {@link ResourceBundleHint}\r\n */\r\npublic Stream<ResourceBundleHint> resourceBundleHints() {\r\n    return this.resourceBundleHints.stream();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHints",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ResourceHints#resourceBundleHints()",
    "tailType": "method"
  }
]