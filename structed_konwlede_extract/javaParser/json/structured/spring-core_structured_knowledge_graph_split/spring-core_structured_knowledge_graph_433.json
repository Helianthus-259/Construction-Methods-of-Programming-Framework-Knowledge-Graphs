[
  {
    "head": "org.springframework.util.xml.XMLEventStreamReaderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.XMLEventStreamReaderTests#createStreamReader()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamReaderTests#createStreamReader()",
    "headType": "method",
    "relation": "use",
    "tail": "@BeforeEach",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamReaderTests#readAll()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid readAll() throws Exception {\r\n    while (streamReader.hasNext()) {\r\n        streamReader.next();\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamReaderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.XMLEventStreamReaderTests#readAll()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamReaderTests#readAll()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamReaderTests#readCorrect()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid readCorrect() throws Exception {\r\n    Transformer transformer = TransformerFactory.newInstance().newTransformer();\r\n    StAXSource source = new StAXSource(streamReader);\r\n    StringWriter writer = new StringWriter();\r\n    transformer.transform(source, new StreamResult(writer));\r\n    Predicate<Node> nodeFilter = n -> n.getNodeType() != Node.DOCUMENT_TYPE_NODE && n.getNodeType() != Node.PROCESSING_INSTRUCTION_NODE;\r\n    assertThat(XmlContent.from(writer)).isSimilarTo(XML, nodeFilter);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamReaderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.XMLEventStreamReaderTests#readCorrect()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamReaderTests#readCorrect()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.asm",
    "tailType": "package"
  },
  {
    "head": "org.springframework.asm",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.asm.MethodTooLargeException",
    "tailType": "class"
  },
  {
    "head": "org.springframework.asm.MethodTooLargeException",
    "headType": "class",
    "relation": "provide",
    "tail": "// ASM: a very small and fast Java bytecode manipulation framework\n// Copyright (c) 2000-2011 INRIA, France Telecom\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions\n// are met:\n// 1. Redistributions of source code must retain the above copyright\n//    notice, this list of conditions and the following disclaimer.\n// 2. Redistributions in binary form must reproduce the above copyright\n//    notice, this list of conditions and the following disclaimer in the\n//    documentation and/or other materials provided with the distribution.\n// 3. Neither the name of the copyright holders nor the names of its\n//    contributors may be used to endorse or promote products derived from\n//    this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n// THE POSSIBILITY OF SUCH DAMAGE.\npackage org.springframework.asm;\n\n/**\n * Exception thrown when the Code attribute of a method produced by a {@link ClassWriter} is too\n * large.\n *\n * @author Jason Zaugg\n */\npublic final class MethodTooLargeException extends IndexOutOfBoundsException {\n  private static final long serialVersionUID = 6807380416709738314L;\n\n  private final String className;\n  private final String methodName;\n  private final String descriptor;\n  private final int codeSize;\n\n  /**\n   * Constructs a new {@link MethodTooLargeException}.\n   *\n   * @param className the internal name of the owner class (see {@link Type#getInternalName()}).\n   * @param methodName the name of the method.\n   * @param descriptor the descriptor of the method.\n   * @param codeSize the size of the method's Code attribute, in bytes.\n   */\n  public MethodTooLargeException(\n      final String className,\n      final String methodName,\n      final String descriptor,\n      final int codeSize) {\n    super(\"Method too large: \" + className + \".\" + methodName + \" \" + descriptor);\n    this.className = className;\n    this.methodName = methodName;\n    this.descriptor = descriptor;\n    this.codeSize = codeSize;\n  }\n\n  /**\n   * Returns the internal name of the owner class.\n   *\n   * @return the internal name of the owner class (see {@link Type#getInternalName()}).\n   */\n  public String getClassName() {\n    return className;\n  }\n\n  /**\n   * Returns the name of the method.\n   *\n   * @return the name of the method.\n   */\n  public String getMethodName() {\n    return methodName;\n  }\n\n  /**\n   * Returns the descriptor of the method.\n   *\n   * @return the descriptor of the method.\n   */\n  public String getDescriptor() {\n    return descriptor;\n  }\n\n  /**\n   * Returns the size of the method's Code attribute, in bytes.\n   *\n   * @return the size of the method's Code attribute, in bytes.\n   */\n  public int getCodeSize() {\n    return codeSize;\n  }\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.asm.MethodTooLargeException",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.MethodTooLargeException#serialVersionUID",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.MethodTooLargeException#serialVersionUID",
    "headType": "field",
    "relation": "haveType",
    "tail": "long",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.MethodTooLargeException",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.MethodTooLargeException#className",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.MethodTooLargeException#className",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.MethodTooLargeException",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.MethodTooLargeException#methodName",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.MethodTooLargeException#methodName",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.MethodTooLargeException",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.MethodTooLargeException#descriptor",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.MethodTooLargeException#descriptor",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.MethodTooLargeException",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.MethodTooLargeException#codeSize",
    "tailType": "field"
  }
]