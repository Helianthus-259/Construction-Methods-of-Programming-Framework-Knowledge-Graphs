[
  {
    "head": "org.springframework.asm.Set",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.Set#SIZE_INCREMENT",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.Set#SIZE_INCREMENT",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.Set",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.Set#size",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.Set#size",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.Set",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.Set#data",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.Set#data",
    "headType": "field",
    "relation": "haveType",
    "tail": "Attribute",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.Set#addAttributes(Attribute)",
    "headType": "method",
    "relation": "provide",
    "tail": "void addAttributes(final Attribute attributeList) {\r\n    Attribute attribute = attributeList;\r\n    while (attribute != null) {\r\n        if (!contains(attribute)) {\r\n            add(attribute);\r\n        }\r\n        attribute = attribute.nextAttribute;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Set",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Set#addAttributes(Attribute)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Set#toArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "Attribute[] toArray() {\r\n    Attribute[] result = new Attribute[size];\r\n    System.arraycopy(data, 0, result, 0, size);\r\n    return result;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Set",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Set#toArray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Set#contains(Attribute)",
    "headType": "method",
    "relation": "provide",
    "tail": "private boolean contains(final Attribute attribute) {\r\n    for (int i = 0; i < size; ++i) {\r\n        if (data[i].type.equals(attribute.type)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Set",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Set#contains(Attribute)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Set#add(Attribute)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void add(final Attribute attribute) {\r\n    if (size >= data.length) {\r\n        Attribute[] newData = new Attribute[data.length + SIZE_INCREMENT];\r\n        System.arraycopy(data, 0, newData, 0, size);\r\n        data = newData;\r\n    }\r\n    data[size++] = attribute;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Set",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Set#add(Attribute)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.PlaceholderParserTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.PlaceholderParserTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.util.Properties;\nimport java.util.stream.Stream;\n\nimport org.junit.jupiter.api.Nested;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.Arguments;\nimport org.junit.jupiter.params.provider.MethodSource;\nimport org.mockito.InOrder;\n\nimport org.springframework.util.PlaceholderParser.ParsedValue;\nimport org.springframework.util.PlaceholderParser.TextPart;\nimport org.springframework.util.PropertyPlaceholderHelper.PlaceholderResolver;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatExceptionOfType;\nimport static org.assertj.core.api.Assertions.assertThatThrownBy;\nimport static org.mockito.BDDMockito.given;\nimport static org.mockito.Mockito.inOrder;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.verifyNoMoreInteractions;\n\n/**\n * Tests for {@link PlaceholderParser}.\n *\n * @author Stephane Nicoll\n */\nclass PlaceholderParserTests {\n\n\t@Nested // Tests with only the basic placeholder feature enabled\n\tclass OnlyPlaceholderTests {\n\n\t\tprivate final PlaceholderParser parser = new PlaceholderParser(\"${\", \"}\", null, null, true);\n\n\t\t@ParameterizedTest(name = \"{0} -> {1}\")\n\t\t@MethodSource(\"placeholders\")\n\t\tvoid placeholderIsReplaced(String text, String expected) {\n\t\t\tProperties properties = new Properties();\n\t\t\tproperties.setProperty(\"firstName\", \"John\");\n\t\t\tproperties.setProperty(\"nested0\", \"first\");\n\t\t\tproperties.setProperty(\"nested1\", \"Name\");\n\t\t\tassertThat(this.parser.replacePlaceholders(text, properties::getProperty)).isEqualTo(expected);\n\t\t}\n\n\t\tstatic Stream<Arguments> placeholders() {\n\t\t\treturn Stream.of(\n\t\t\t\t\tArguments.of(\"${firstName}\", \"John\"),\n\t\t\t\t\tArguments.of(\"$${firstName}\", \"$John\"),\n\t\t\t\t\tArguments.of(\"}${firstName}\", \"}John\"),\n\t\t\t\t\tArguments.of(\"${firstName}$\", \"John$\"),\n\t\t\t\t\tArguments.of(\"${firstName}}\", \"John}\"),\n\t\t\t\t\tArguments.of(\"${firstName} ${firstName}\", \"John John\"),\n\t\t\t\t\tArguments.of(\"First name: ${firstName}\", \"First name: John\"),\n\t\t\t\t\tArguments.of(\"${firstName} is the first name\", \"John is the first name\"),\n\t\t\t\t\tArguments.of(\"${first${nested1}}\", \"John\"),\n\t\t\t\t\tArguments.of(\"${${nested0}${nested1}}\", \"John\")\n\t\t\t);\n\t\t}\n\n\t\t@ParameterizedTest(name = \"{0} -> {1}\")\n\t\t@MethodSource(\"nestedPlaceholders\")\n\t\tvoid nestedPlaceholdersAreReplaced(String text, String expected) {\n\t\t\tProperties properties = new Properties();\n\t\t\tproperties.setProperty(\"p1\", \"v1\");\n\t\t\tproperties.setProperty(\"p2\", \"v2\");\n\t\t\tproperties.setProperty(\"p3\", \"${p1}:${p2}\");              // nested placeholders\n\t\t\tproperties.setProperty(\"p4\", \"${p3}\");                    // deeply nested placeholders\n\t\t\tproperties.setProperty(\"p5\", \"${p1}:${p2}:${bogus}\");     // unresolvable placeholder\n\t\t\tassertThat(this.parser.replacePlaceholders(text, properties::getProperty)).isEqualTo(expected);\n\t\t}\n\n\t\tstatic Stream<Arguments> nestedPlaceholders() {\n\t\t\treturn Stream.of(\n\t\t\t\t\tArguments.of(\"${p1}:${p2}\", \"v1:v2\"),\n\t\t\t\t\tArguments.of(\"${p3}\", \"v1:v2\"),\n\t\t\t\t\tArguments.of(\"${p4}\", \"v1:v2\"),\n\t\t\t\t\tArguments.of(\"${p5}\", \"v1:v2:${bogus}\"),\n\t\t\t\t\tArguments.of(\"${p0${p0}}\", \"${p0${p0}}\")\n\t\t\t);\n\t\t}\n\n\t\t@Test\n\t\tvoid parseWithSinglePlaceholder() {\n\t\t\tPlaceholderResolver resolver = mockPlaceholderResolver(\"firstName\", \"John\");\n\t\t\tassertThat(this.parser.replacePlaceholders(\"${firstName}\", resolver))\n\t\t\t\t\t.isEqualTo(\"John\");\n\t\t\tverify(resolver).resolvePlaceholder(\"firstName\");\n\t\t\tverifyNoMoreInteractions(resolver);\n\t\t}\n\n\t\t@Test\n\t\tvoid parseWithPlaceholderAndPrefixText() {\n\t\t\tPlaceholderResolver resolver = mockPlaceholderResolver(\"firstName\", \"John\");\n\t\t\tassertThat(this.parser.replacePlaceholders(\"This is ${firstName}\", resolver))\n\t\t\t\t\t.isEqualTo(\"This is John\");\n\t\t\tverify(resolver).resolvePlaceholder(\"firstName\");\n\t\t\tverifyNoMoreInteractions(resolver);\n\t\t}\n\n\t\t@Test\n\t\tvoid parseWithMultiplePlaceholdersAndText() {\n\t\t\tPlaceholderResolver resolver = mockPlaceholderResolver(\"firstName\", \"John\", \"lastName\", \"Smith\");\n\t\t\tassertThat(this.parser.replacePlaceholders(\"User: ${firstName} - ${lastName}.\", resolver))\n\t\t\t\t\t.isEqualTo(\"User: John - Smith.\");\n\t\t\tverify(resolver).resolvePlaceholder(\"firstName\");\n\t\t\tverify(resolver).resolvePlaceholder(\"lastName\");\n\t\t\tverifyNoMoreInteractions(resolver);\n\t\t}\n\n\t\t@Test\n\t\tvoid parseWithNestedPlaceholderInKey() {\n\t\t\tPlaceholderResolver resolver = mockPlaceholderResolver(\n\t\t\t\t\t\"nested\", \"Name\", \"firstName\", \"John\");\n\t\t\tassertThat(this.parser.replacePlaceholders(\"${first${nested}}\", resolver))\n\t\t\t\t\t.isEqualTo(\"John\");\n\t\t\tverifyPlaceholderResolutions(resolver, \"nested\", \"firstName\");\n\t\t}\n\n\t\t@Test\n\t\tvoid parseWithMultipleNestedPlaceholdersInKey() {\n\t\t\tPlaceholderResolver resolver = mockPlaceholderResolver(\n\t\t\t\t\t\"nested0\", \"first\", \"nested1\", \"Name\", \"firstName\", \"John\");\n\t\t\tassertThat(this.parser.replacePlaceholders(\"${${nested0}${nested1}}\", resolver))\n\t\t\t\t\t.isEqualTo(\"John\");\n\t\t\tverifyPlaceholderResolutions(resolver, \"nested0\", \"nested1\", \"firstName\");\n\t\t}\n\n\t\t@Test\n\t\tvoid placeholdersWithSeparatorAreHandledAsIs() {\n\t\t\tPlaceholderResolver resolver = mockPlaceholderResolver(\"my:test\", \"value\");\n\t\t\tassertThat(this.parser.replacePlaceholders(\"${my:test}\", resolver)).isEqualTo(\"value\");\n\t\t\tverifyPlaceholderResolutions(resolver, \"my:test\");\n\t\t}\n\n\t\t@Test\n\t\tvoid placeholdersWithoutEscapeCharAreNotEscaped() {\n\t\t\tPlaceholderResolver resolver = mockPlaceholderResolver(\"test\", \"value\");\n\t\t\tassertThat(this.parser.replacePlaceholders(\"\\\\${test}\", resolver)).isEqualTo(\"\\\\value\");\n\t\t\tverifyPlaceholderResolutions(resolver, \"test\");\n\t\t}\n\n\t\t@Test\n\t\tvoid textWithInvalidPlaceholderIsMerged() {\n\t\t\tString text = \"test${of${with${and${\";\n\t\t\tParsedValue parsedValue = this.parser.parse(text);\n\t\t\tassertThat(parsedValue.parts()).singleElement().isInstanceOfSatisfying(\n\t\t\t\t\tTextPart.class, textPart -> assertThat(textPart.text()).isEqualTo(text));\n\t\t}\n\n\t}\n\n\t@Nested // Tests with the use of a separator\n\tclass DefaultValueTests {\n\n\t\tprivate final PlaceholderParser parser = new PlaceholderParser(\"${\", \"}\", \":\", null, true);\n\n\t\t@ParameterizedTest(name = \"{0} -> {1}\")\n\t\t@MethodSource(\"placeholders\")\n\t\tvoid placeholderIsReplaced(String text, String expected) {\n\t\t\tProperties properties = new Properties();\n\t\t\tproperties.setProperty(\"firstName\", \"John\");\n\t\t\tproperties.setProperty(\"nested0\", \"first\");\n\t\t\tproperties.setProperty(\"nested1\", \"Name\");\n\t\t\tassertThat(this.parser.replacePlaceholders(text, properties::getProperty)).isEqualTo(expected);\n\t\t}\n\n\t\tstatic Stream<Arguments> placeholders() {\n\t\t\treturn Stream.of(\n\t\t\t\t\tArguments.of(\"${invalid:John}\", \"John\"),\n\t\t\t\t\tArguments.of(\"${first${invalid:Name}}\", \"John\"),\n\t\t\t\t\tArguments.of(\"${invalid:${firstName}}\", \"John\"),\n\t\t\t\t\tArguments.of(\"${invalid:${${nested0}${nested1}}}\", \"John\"),\n\t\t\t\t\tArguments.of(\"${invalid:$${firstName}}\", \"$John\"),\n\t\t\t\t\tArguments.of(\"${invalid: }${firstName}\", \" John\"),\n\t\t\t\t\tArguments.of(\"${invalid:}\", \"\"),\n\t\t\t\t\tArguments.of(\"${:}\", \"\")\n\t\t\t);\n\t\t}\n\n\t\t@ParameterizedTest(name = \"{0} -> {1}\")\n\t\t@MethodSource(\"nestedPlaceholders\")\n\t\tvoid nestedPlaceholdersAreReplaced(String text, String expected) {\n\t\t\tProperties properties = new Properties();\n\t\t\tproperties.setProperty(\"p1\", \"v1\");\n\t\t\tproperties.setProperty(\"p2\", \"v2\");\n\t\t\tproperties.setProperty(\"p3\", \"${p1}:${p2}\");              // nested placeholders\n\t\t\tproperties.setProperty(\"p4\", \"${p3}\");                    // deeply nested placeholders\n\t\t\tproperties.setProperty(\"p5\", \"${p1}:${p2}:${bogus}\");     // unresolvable placeholder\n\t\t\tproperties.setProperty(\"p6\", \"${p1}:${p2}:${bogus:def}\"); // unresolvable w/ default\n\t\t\tassertThat(this.parser.replacePlaceholders(text, properties::getProperty)).isEqualTo(expected);\n\t\t}\n\n\t\tstatic Stream<Arguments> nestedPlaceholders() {\n\t\t\treturn Stream.of(\n\t\t\t\t\tArguments.of(\"${p6}\", \"v1:v2:def\"),\n\t\t\t\t\tArguments.of(\"${p6:not-used}\", \"v1:v2:def\"),\n\t\t\t\t\tArguments.of(\"${p6:${invalid}}\", \"v1:v2:def\"),\n\t\t\t\t\tArguments.of(\"${invalid:${p1}:${p2}}\", \"v1:v2\"),\n\t\t\t\t\tArguments.of(\"${invalid:${p3}}\", \"v1:v2\"),\n\t\t\t\t\tArguments.of(\"${invalid:${p4}}\", \"v1:v2\"),\n\t\t\t\t\tArguments.of(\"${invalid:${p5}}\", \"v1:v2:${bogus}\"),\n\t\t\t\t\tArguments.of(\"${invalid:${p6}}\", \"v1:v2:def\")\n\t\t\t);\n\t\t}\n\n\t\t@ParameterizedTest(name = \"{0} -> {1}\")\n\t\t@MethodSource(\"exactMatchPlaceholders\")\n\t\tvoid placeholdersWithExactMatchAreConsidered(String text, String expected) {\n\t\t\tProperties properties = new Properties();\n\t\t\tproperties.setProperty(\"prefix://my-service\", \"example-service\");\n\t\t\tproperties.setProperty(\"px\", \"prefix\");\n\t\t\tproperties.setProperty(\"p1\", \"${prefix://my-service}\");\n\t\t\tassertThat(this.parser.replacePlaceholders(text, properties::getProperty)).isEqualTo(expected);\n\t\t}\n\n\t\tstatic Stream<Arguments> exactMatchPlaceholders() {\n\t\t\treturn Stream.of(\n\t\t\t\t\tArguments.of(\"${prefix://my-service}\", \"example-service\"),\n\t\t\t\t\tArguments.of(\"${p1}\", \"example-service\")\n\t\t\t);\n\t\t}\n\n\t\t@Test\n\t\tvoid parseWithKeyEqualsToText() {\n\t\t\tPlaceholderResolver resolver = mockPlaceholderResolver(\"firstName\", \"Steve\");\n\t\t\tassertThat(this.parser.replacePlaceholders(\"${firstName}\", resolver))\n\t\t\t\t\t.isEqualTo(\"Steve\");\n\t\t\tverifyPlaceholderResolutions(resolver, \"firstName\");\n\t\t}\n\n\t\t@Test\n\t\tvoid parseWithHardcodedFallback() {\n\t\t\tPlaceholderResolver resolver = mockPlaceholderResolver();\n\t\t\tassertThat(this.parser.replacePlaceholders(\"${firstName:Steve}\", resolver))\n\t\t\t\t\t.isEqualTo(\"Steve\");\n\t\t\tverifyPlaceholderResolutions(resolver, \"firstName:Steve\", \"firstName\");\n\t\t}\n\n\t\t@Test\n\t\tvoid parseWithNestedPlaceholderInKeyUsingFallback() {\n\t\t\tPlaceholderResolver resolver = mockPlaceholderResolver(\"firstName\", \"John\");\n\t\t\tassertThat(this.parser.replacePlaceholders(\"${first${invalid:Name}}\", resolver))\n\t\t\t\t\t.isEqualTo(\"John\");\n\t\t\tverifyPlaceholderResolutions(resolver, \"invalid:Name\", \"invalid\", \"firstName\");\n\t\t}\n\n\t\t@Test\n\t\tvoid parseWithFallbackUsingPlaceholder() {\n\t\t\tPlaceholderResolver resolver = mockPlaceholderResolver(\"firstName\", \"John\");\n\t\t\tassertThat(this.parser.replacePlaceholders(\"${invalid:${firstName}}\", resolver))\n\t\t\t\t\t.isEqualTo(\"John\");\n\t\t\tverifyPlaceholderResolutions(resolver, \"invalid\", \"firstName\");\n\t\t}\n\n\t}\n\n\t@Nested // Tests with the use of the escape character\n\tclass EscapedTests {\n\n\t\tprivate final PlaceholderParser parser = new PlaceholderParser(\"${\", \"}\", \":\", '\\\\', true);\n\n\t\t@ParameterizedTest(name = \"{0} -> {1}\")\n\t\t@MethodSource(\"escapedInNestedPlaceholders\")\n\t\tvoid escapedSeparatorInNestedPlaceholder(String text, String expected) {\n\t\t\tProperties properties = new Properties();\n\t\t\tproperties.setProperty(\"app.environment\", \"qa\");\n\t\t\tproperties.setProperty(\"app.service\", \"protocol\");\n\t\t\tproperties.setProperty(\"protocol://host/qa/name\", \"protocol://example.com/qa/name\");\n\t\t\tproperties.setProperty(\"service/host/qa/name\", \"https://example.com/qa/name\");\n\t\t\tproperties.setProperty(\"service/host/qa/name:value\", \"https://example.com/qa/name-value\");\n\t\t\tassertThat(this.parser.replacePlaceholders(text, properties::getProperty)).isEqualTo(expected);\n\t\t}\n\n\t\tstatic Stream<Arguments> escapedInNestedPlaceholders() {\n\t\t\treturn Stream.of(\n\t\t\t\t\tArguments.of(\"${protocol\\\\://host/${app.environment}/name}\", \"protocol://example.com/qa/name\"),\n\t\t\t\t\tArguments.of(\"${${app.service}\\\\://host/${app.environment}/name}\", \"protocol://example.com/qa/name\"),\n\t\t\t\t\tArguments.of(\"${service/host/${app.environment}/name:\\\\value}\", \"https://example.com/qa/name\"),\n\t\t\t\t\tArguments.of(\"${service/host/${name\\\\:value}/}\", \"${service/host/${name:value}/}\"));\n\t\t}\n\n\t\t@ParameterizedTest(name = \"{0} -> {1}\")\n\t\t@MethodSource(\"escapedPlaceholders\")\n\t\tvoid escapedPlaceholderIsNotReplaced(String text, String expected) {\n\t\t\tPlaceholderResolver resolver = mockPlaceholderResolver(\n\t\t\t\t\t\"firstName\", \"John\", \"nested0\", \"first\", \"nested1\", \"Name\",\n\t\t\t\t\t\"${test}\", \"John\",\n\t\t\t\t\t\"p1\", \"v1\", \"p2\", \"\\\\${p1:default}\", \"p3\", \"${p2}\",\n\t\t\t\t\t\"p4\", \"adc${p0:\\\\${p1}}\",\n\t\t\t\t\t\"p5\", \"adc${\\\\${p0}:${p1}}\",\n\t\t\t\t\t\"p6\", \"adc${p0:def\\\\${p1}}\",\n\t\t\t\t\t\"p7\", \"adc\\\\${\");\n\t\t\tassertThat(this.parser.replacePlaceholders(text, resolver)).isEqualTo(expected);\n\t\t}\n\n\t\tstatic Stream<Arguments> escapedPlaceholders() {\n\t\t\treturn Stream.of(\n\t\t\t\t\tArguments.of(\"\\\\${firstName}\", \"${firstName}\"),\n\t\t\t\t\tArguments.of(\"First name: \\\\${firstName}\", \"First name: ${firstName}\"),\n\t\t\t\t\tArguments.of(\"$\\\\${firstName}\", \"$${firstName}\"),\n\t\t\t\t\tArguments.of(\"\\\\}${firstName}\", \"\\\\}John\"),\n\t\t\t\t\tArguments.of(\"${\\\\${test}}\", \"John\"),\n\t\t\t\t\tArguments.of(\"${p2}\", \"${p1:default}\"),\n\t\t\t\t\tArguments.of(\"${p3}\", \"${p1:default}\"),\n\t\t\t\t\tArguments.of(\"${p4}\", \"adc${p1}\"),\n\t\t\t\t\tArguments.of(\"${p5}\", \"adcv1\"),\n\t\t\t\t\tArguments.of(\"${p6}\", \"adcdef${p1}\"),\n\t\t\t\t\tArguments.of(\"${p7}\", \"adc\\\\${\"));\n\n\t\t}\n\n\t\t@ParameterizedTest(name = \"{0} -> {1}\")\n\t\t@MethodSource(\"escapedSeparators\")\n\t\tvoid escapedSeparatorIsNotReplaced(String text, String expected) {\n\t\t\tProperties properties = new Properties();\n\t\t\tproperties.setProperty(\"first:Name\", \"John\");\n\t\t\tproperties.setProperty(\"nested0\", \"first\");\n\t\t\tproperties.setProperty(\"nested1\", \"Name\");\n\t\t\tassertThat(this.parser.replacePlaceholders(text, properties::getProperty)).isEqualTo(expected);\n\t\t}\n\n\t\tstatic Stream<Arguments> escapedSeparators() {\n\t\t\treturn Stream.of(\n\t\t\t\t\tArguments.of(\"${first\\\\:Name}\", \"John\"),\n\t\t\t\t\tArguments.of(\"${last\\\\:Name}\", \"${last:Name}\")\n\t\t\t);\n\t\t}\n\n\t}\n\n\t@Nested\n\tclass ExceptionTests {\n\n\t\tprivate final PlaceholderParser parser = new PlaceholderParser(\"${\", \"}\", \":\", null, false);\n\n\t\t@Test\n\t\tvoid textWithCircularReference() {\n\t\t\tPlaceholderResolver resolver = mockPlaceholderResolver(\"pL\", \"${pR}\", \"pR\", \"${pL}\");\n\t\t\tassertThatThrownBy(() -> this.parser.replacePlaceholders(\"${pL}\", resolver))\n\t\t\t\t\t.isInstanceOf(PlaceholderResolutionException.class)\n\t\t\t\t\t.hasMessage(\"Circular placeholder reference 'pL' in value \\\"${pL}\\\" <-- \\\"${pR}\\\" <-- \\\"${pL}\\\"\");\n\t\t}\n\n\t\t@Test\n\t\tvoid unresolvablePlaceholderIsReported() {\n\t\t\tPlaceholderResolver resolver = mockPlaceholderResolver();\n\t\t\tassertThatExceptionOfType(PlaceholderResolutionException.class)\n\t\t\t\t\t.isThrownBy(() -> this.parser.replacePlaceholders(\"${bogus}\", resolver))\n\t\t\t\t\t.withMessage(\"Could not resolve placeholder 'bogus' in value \\\"${bogus}\\\"\")\n\t\t\t\t\t.withNoCause();\n\t\t}\n\n\t\t@Test\n\t\tvoid unresolvablePlaceholderInNestedPlaceholderIsReportedWithChain() {\n\t\t\tPlaceholderResolver resolver = mockPlaceholderResolver(\"p1\", \"v1\", \"p2\", \"v2\",\n\t\t\t\t\t\"p3\", \"${p1}:${p2}:${bogus}\");\n\t\t\tassertThatExceptionOfType(PlaceholderResolutionException.class)\n\t\t\t\t\t.isThrownBy(() -> this.parser.replacePlaceholders(\"${p3}\", resolver))\n\t\t\t\t\t.withMessage(\"Could not resolve placeholder 'bogus' in value \\\"${p1}:${p2}:${bogus}\\\" <-- \\\"${p3}\\\"\")\n\t\t\t\t\t.withNoCause();\n\t\t}\n\n\t}\n\n\tPlaceholderResolver mockPlaceholderResolver(String... pairs) {\n\t\tif (pairs.length % 2 == 1) {\n\t\t\tthrow new IllegalArgumentException(\"size must be even, it is a set of key=value pairs\");\n\t\t}\n\t\tPlaceholderResolver resolver = mock();\n\t\tfor (int i = 0; i < pairs.length; i += 2) {\n\t\t\tString key = pairs[i];\n\t\t\tString value = pairs[i + 1];\n\t\t\tgiven(resolver.resolvePlaceholder(key)).willReturn(value);\n\t\t}\n\t\treturn resolver;\n\t}\n\n\tvoid verifyPlaceholderResolutions(PlaceholderResolver mock, String... placeholders) {\n\t\tInOrder ordered = inOrder(mock);\n\t\tfor (String placeholder : placeholders) {\n\t\t\tordered.verify(mock).resolvePlaceholder(placeholder);\n\t\t}\n\t\tverifyNoMoreInteractions(mock);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.PlaceholderParserTests#mockPlaceholderResolver(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "PlaceholderResolver mockPlaceholderResolver(String... pairs) {\r\n    if (pairs.length % 2 == 1) {\r\n        throw new IllegalArgumentException(\"size must be even, it is a set of key=value pairs\");\r\n    }\r\n    PlaceholderResolver resolver = mock();\r\n    for (int i = 0; i < pairs.length; i += 2) {\r\n        String key = pairs[i];\r\n        String value = pairs[i + 1];\r\n        given(resolver.resolvePlaceholder(key)).willReturn(value);\r\n    }\r\n    return resolver;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.PlaceholderParserTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PlaceholderParserTests#mockPlaceholderResolver(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.PlaceholderParserTests#verifyPlaceholderResolutions(PlaceholderResolver,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "void verifyPlaceholderResolutions(PlaceholderResolver mock, String... placeholders) {\r\n    InOrder ordered = inOrder(mock);\r\n    for (String placeholder : placeholders) {\r\n        ordered.verify(mock).resolvePlaceholder(placeholder);\r\n    }\r\n    verifyNoMoreInteractions(mock);\r\n}",
    "tailType": "method_code"
  }
]