[
  {
    "head": "org.springframework.core.annotation.MergedAnnotations#get(Class<A>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the {@linkplain MergedAnnotationSelectors#nearest() nearest} matching\r\n * annotation or meta-annotation of the specified type, or\r\n * {@link MergedAnnotation#missing()} if none is present.\r\n * @param annotationType the annotation type to get\r\n * @return a {@link MergedAnnotation} instance\r\n */\r\n<A extends Annotation> MergedAnnotation<A> get(Class<A> annotationType);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotations",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotations#get(Class<A>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotations#get(Class<A>,Predicate<? super MergedAnnotation<A>>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the {@linkplain MergedAnnotationSelectors#nearest() nearest} matching\r\n * annotation or meta-annotation of the specified type, or\r\n * {@link MergedAnnotation#missing()} if none is present.\r\n * @param annotationType the annotation type to get\r\n * @param predicate a predicate that must match, or {@code null} if only\r\n * type matching is required\r\n * @return a {@link MergedAnnotation} instance\r\n * @see MergedAnnotationPredicates\r\n */\r\n<A extends Annotation> MergedAnnotation<A> get(Class<A> annotationType, @Nullable Predicate<? super MergedAnnotation<A>> predicate);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotations",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotations#get(Class<A>,Predicate<? super MergedAnnotation<A>>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotations#get(Class<A>,Predicate<? super MergedAnnotation<A>>,MergedAnnotationSelector<A>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get a matching annotation or meta-annotation of the specified type, or\r\n * {@link MergedAnnotation#missing()} if none is present.\r\n * @param annotationType the annotation type to get\r\n * @param predicate a predicate that must match, or {@code null} if only\r\n * type matching is required\r\n * @param selector a selector used to choose the most appropriate annotation\r\n * within an aggregate, or {@code null} to select the\r\n * {@linkplain MergedAnnotationSelectors#nearest() nearest}\r\n * @return a {@link MergedAnnotation} instance\r\n * @see MergedAnnotationPredicates\r\n * @see MergedAnnotationSelectors\r\n */\r\n<A extends Annotation> MergedAnnotation<A> get(Class<A> annotationType, @Nullable Predicate<? super MergedAnnotation<A>> predicate, @Nullable MergedAnnotationSelector<A> selector);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotations",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotations#get(Class<A>,Predicate<? super MergedAnnotation<A>>,MergedAnnotationSelector<A>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotations#get(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the {@linkplain MergedAnnotationSelectors#nearest() nearest} matching\r\n * annotation or meta-annotation of the specified type, or\r\n * {@link MergedAnnotation#missing()} if none is present.\r\n * @param annotationType the fully qualified class name of the annotation type\r\n * to get\r\n * @return a {@link MergedAnnotation} instance\r\n */\r\n<A extends Annotation> MergedAnnotation<A> get(String annotationType);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotations",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotations#get(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotations#get(String,Predicate<? super MergedAnnotation<A>>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the {@linkplain MergedAnnotationSelectors#nearest() nearest} matching\r\n * annotation or meta-annotation of the specified type, or\r\n * {@link MergedAnnotation#missing()} if none is present.\r\n * @param annotationType the fully qualified class name of the annotation type\r\n * to get\r\n * @param predicate a predicate that must match, or {@code null} if only\r\n * type matching is required\r\n * @return a {@link MergedAnnotation} instance\r\n * @see MergedAnnotationPredicates\r\n */\r\n<A extends Annotation> MergedAnnotation<A> get(String annotationType, @Nullable Predicate<? super MergedAnnotation<A>> predicate);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotations",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotations#get(String,Predicate<? super MergedAnnotation<A>>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotations#get(String,Predicate<? super MergedAnnotation<A>>,MergedAnnotationSelector<A>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get a matching annotation or meta-annotation of the specified type, or\r\n * {@link MergedAnnotation#missing()} if none is present.\r\n * @param annotationType the fully qualified class name of the annotation type\r\n * to get\r\n * @param predicate a predicate that must match, or {@code null} if only\r\n * type matching is required\r\n * @param selector a selector used to choose the most appropriate annotation\r\n * within an aggregate, or {@code null} to select the\r\n * {@linkplain MergedAnnotationSelectors#nearest() nearest}\r\n * @return a {@link MergedAnnotation} instance\r\n * @see MergedAnnotationPredicates\r\n * @see MergedAnnotationSelectors\r\n */\r\n<A extends Annotation> MergedAnnotation<A> get(String annotationType, @Nullable Predicate<? super MergedAnnotation<A>> predicate, @Nullable MergedAnnotationSelector<A> selector);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotations",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotations#get(String,Predicate<? super MergedAnnotation<A>>,MergedAnnotationSelector<A>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotations#stream(Class<A>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Stream all annotations and meta-annotations that match the specified\r\n * type.\r\n * <p>The resulting stream follows the same ordering rules as {@link #stream()}.\r\n * @param annotationType the annotation type to match\r\n * @return a stream of matching annotations\r\n */\r\n<A extends Annotation> Stream<MergedAnnotation<A>> stream(Class<A> annotationType);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotations",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotations#stream(Class<A>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotations#stream(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Stream all annotations and meta-annotations that match the specified\r\n * type.\r\n * <p>The resulting stream follows the same ordering rules as {@link #stream()}.\r\n * @param annotationType the fully qualified class name of the annotation type\r\n * to match\r\n * @return a stream of matching annotations\r\n */\r\n<A extends Annotation> Stream<MergedAnnotation<A>> stream(String annotationType);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotations",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotations#stream(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotations#stream()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Stream all annotations and meta-annotations contained in this collection.\r\n * <p>The resulting stream is ordered first by the\r\n * {@linkplain MergedAnnotation#getAggregateIndex() aggregate index} and then\r\n * by the annotation distance (with the closest annotations first). This ordering\r\n * means that, for most use-cases, the most suitable annotations appear\r\n * earliest in the stream.\r\n * @return a stream of annotations\r\n */\r\nStream<MergedAnnotation<Annotation>> stream();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotations",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotations#stream()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotations#from(AnnotatedElement)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a new {@link MergedAnnotations} instance containing all\r\n * annotations and meta-annotations from the specified element.\r\n * <p>The resulting instance will not include any inherited annotations. If\r\n * you want to include those as well you should use\r\n * {@link #from(AnnotatedElement, SearchStrategy)} with an appropriate\r\n * {@link SearchStrategy}.\r\n * @param element the source element\r\n * @return a {@code MergedAnnotations} instance containing the element's\r\n * annotations\r\n * @see #search(SearchStrategy)\r\n */\r\nstatic MergedAnnotations from(AnnotatedElement element) {\r\n    return from(element, SearchStrategy.DIRECT);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotations",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotations#from(AnnotatedElement)",
    "tailType": "method"
  }
]