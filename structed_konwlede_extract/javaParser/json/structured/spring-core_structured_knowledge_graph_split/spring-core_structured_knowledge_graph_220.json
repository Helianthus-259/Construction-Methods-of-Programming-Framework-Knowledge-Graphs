[
  {
    "head": "org.springframework.util.FastByteArrayOutputStreamTests#getInputStreamAvailable()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.FastByteArrayOutputStreamTests#getInputStreamRead()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getInputStreamRead() throws Exception {\r\n    this.os.write(this.helloBytes);\r\n    InputStream inputStream = this.os.getInputStream();\r\n    assertThat(this.helloBytes[0]).isEqualTo((byte) inputStream.read());\r\n    assertThat(this.helloBytes[1]).isEqualTo((byte) inputStream.read());\r\n    assertThat(this.helloBytes[2]).isEqualTo((byte) inputStream.read());\r\n    assertThat(this.helloBytes[3]).isEqualTo((byte) inputStream.read());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FastByteArrayOutputStreamTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FastByteArrayOutputStreamTests#getInputStreamRead()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FastByteArrayOutputStreamTests#getInputStreamRead()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.FastByteArrayOutputStreamTests#getInputStreamReadBytePromotion()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getInputStreamReadBytePromotion() throws Exception {\r\n    byte[] bytes = { -1 };\r\n    this.os.write(bytes);\r\n    InputStream inputStream = this.os.getInputStream();\r\n    ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\r\n    assertThat(inputStream.read()).isEqualTo(bais.read());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FastByteArrayOutputStreamTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FastByteArrayOutputStreamTests#getInputStreamReadBytePromotion()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FastByteArrayOutputStreamTests#getInputStreamReadBytePromotion()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.FastByteArrayOutputStreamTests#getInputStreamReadAll()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getInputStreamReadAll() throws Exception {\r\n    this.os.write(this.helloBytes);\r\n    InputStream inputStream = this.os.getInputStream();\r\n    byte[] actual = new byte[inputStream.available()];\r\n    int bytesRead = inputStream.read(actual);\r\n    assertThat(bytesRead).isEqualTo(this.helloBytes.length);\r\n    assertThat(actual).isEqualTo(this.helloBytes);\r\n    assertThat(inputStream.available()).isEqualTo(0);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FastByteArrayOutputStreamTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FastByteArrayOutputStreamTests#getInputStreamReadAll()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FastByteArrayOutputStreamTests#getInputStreamReadAll()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.FastByteArrayOutputStreamTests#getInputStreamReadBeyondEndOfStream()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getInputStreamReadBeyondEndOfStream() throws Exception {\r\n    this.os.write(this.helloBytes);\r\n    InputStream inputStream = os.getInputStream();\r\n    byte[] actual = new byte[inputStream.available() + 1];\r\n    int bytesRead = inputStream.read(actual);\r\n    assertThat(bytesRead).isEqualTo(this.helloBytes.length);\r\n    for (int i = 0; i < bytesRead; i++) {\r\n        assertThat(actual[i]).isEqualTo(this.helloBytes[i]);\r\n    }\r\n    assertThat(actual[this.helloBytes.length]).isEqualTo((byte) 0);\r\n    assertThat(inputStream.available()).isEqualTo(0);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FastByteArrayOutputStreamTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FastByteArrayOutputStreamTests#getInputStreamReadBeyondEndOfStream()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FastByteArrayOutputStreamTests#getInputStreamReadBeyondEndOfStream()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.FastByteArrayOutputStreamTests#getInputStreamSkip()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getInputStreamSkip() throws Exception {\r\n    this.os.write(this.helloBytes);\r\n    InputStream inputStream = this.os.getInputStream();\r\n    assertThat(this.helloBytes[0]).isEqualTo((byte) inputStream.read());\r\n    assertThat(inputStream.skip(1)).isEqualTo(1);\r\n    assertThat(this.helloBytes[2]).isEqualTo((byte) inputStream.read());\r\n    assertThat(inputStream.available()).isEqualTo((this.helloBytes.length - 3));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FastByteArrayOutputStreamTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FastByteArrayOutputStreamTests#getInputStreamSkip()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FastByteArrayOutputStreamTests#getInputStreamSkip()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.FastByteArrayOutputStreamTests#getInputStreamSkipAll()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getInputStreamSkipAll() throws Exception {\r\n    this.os.write(this.helloBytes);\r\n    InputStream inputStream = this.os.getInputStream();\r\n    assertThat(this.helloBytes.length).isEqualTo(inputStream.skip(1000));\r\n    assertThat(inputStream.available()).isEqualTo(0);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FastByteArrayOutputStreamTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FastByteArrayOutputStreamTests#getInputStreamSkipAll()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FastByteArrayOutputStreamTests#getInputStreamSkipAll()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.FastByteArrayOutputStreamTests#updateMessageDigest()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid updateMessageDigest() throws Exception {\r\n    StringBuilder builder = new StringBuilder(\"\\\"0\");\r\n    this.os.write(this.helloBytes);\r\n    InputStream inputStream = this.os.getInputStream();\r\n    DigestUtils.appendMd5DigestAsHex(inputStream, builder);\r\n    builder.append('\"');\r\n    String actual = builder.toString();\r\n    assertThat(actual).isEqualTo(\"\\\"0b10a8db164e0754105b7a99be72e3fe5\\\"\");\r\n}",
    "tailType": "method_code"
  }
]