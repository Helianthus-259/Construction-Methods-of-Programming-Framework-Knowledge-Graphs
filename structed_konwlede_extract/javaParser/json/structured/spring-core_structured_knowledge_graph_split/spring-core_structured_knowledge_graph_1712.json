[
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#searchFindsRepeatableContainerAnnotationAndRepeatedAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "// gh-32731\r\n@Test\r\nvoid searchFindsRepeatableContainerAnnotationAndRepeatedAnnotations() {\r\n    Class<?> clazz = StandardRepeatablesWithContainerWithMultipleAttributesTestCase.class;\r\n    // NO RepeatableContainers\r\n    MergedAnnotations mergedAnnotations = MergedAnnotations.from(clazz, TYPE_HIERARCHY, RepeatableContainers.none());\r\n    ContainerWithMultipleAttributes container = mergedAnnotations.get(ContainerWithMultipleAttributes.class).synthesize(MergedAnnotation::isPresent).orElse(null);\r\n    assertThat(container).as(\"container\").isNotNull();\r\n    assertThat(container.name()).isEqualTo(\"enigma\");\r\n    RepeatableWithContainerWithMultipleAttributes[] repeatedAnnotations = container.value();\r\n    assertThat(Arrays.stream(repeatedAnnotations).map(RepeatableWithContainerWithMultipleAttributes::value)).containsExactly(\"A\", \"B\");\r\n    Set<RepeatableWithContainerWithMultipleAttributes> set = mergedAnnotations.stream(RepeatableWithContainerWithMultipleAttributes.class).collect(MergedAnnotationCollectors.toAnnotationSet());\r\n    // Only finds the locally declared repeated annotation.\r\n    assertThat(set.stream().map(RepeatableWithContainerWithMultipleAttributes::value)).containsExactly(\"C\");\r\n    // Standard RepeatableContainers\r\n    mergedAnnotations = MergedAnnotations.from(clazz, TYPE_HIERARCHY, RepeatableContainers.standardRepeatables());\r\n    container = mergedAnnotations.get(ContainerWithMultipleAttributes.class).synthesize(MergedAnnotation::isPresent).orElse(null);\r\n    assertThat(container).as(\"container\").isNotNull();\r\n    assertThat(container.name()).isEqualTo(\"enigma\");\r\n    repeatedAnnotations = container.value();\r\n    assertThat(Arrays.stream(repeatedAnnotations).map(RepeatableWithContainerWithMultipleAttributes::value)).containsExactly(\"A\", \"B\");\r\n    set = mergedAnnotations.stream(RepeatableWithContainerWithMultipleAttributes.class).collect(MergedAnnotationCollectors.toAnnotationSet());\r\n    // Finds the locally declared repeated annotation plus the 2 in the container.\r\n    assertThat(set.stream().map(RepeatableWithContainerWithMultipleAttributes::value)).containsExactly(\"A\", \"B\", \"C\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#searchFindsRepeatableContainerAnnotationAndRepeatedAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#searchFindsRepeatableContainerAnnotationAndRepeatedAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#getAnnotations(Class<? extends Annotation>,Class<A>,SearchStrategy,AnnotatedElement)",
    "headType": "method",
    "relation": "provide",
    "tail": "private <A extends Annotation> Set<A> getAnnotations(Class<? extends Annotation> container, Class<A> repeatable, SearchStrategy searchStrategy, AnnotatedElement element) {\r\n    return getAnnotations(container, repeatable, searchStrategy, element, AnnotationFilter.PLAIN);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#getAnnotations(Class<? extends Annotation>,Class<A>,SearchStrategy,AnnotatedElement)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#getAnnotations(Class<? extends Annotation>,Class<A>,SearchStrategy,AnnotatedElement,AnnotationFilter)",
    "headType": "method",
    "relation": "provide",
    "tail": "private <A extends Annotation> Set<A> getAnnotations(Class<? extends Annotation> container, Class<A> repeatable, SearchStrategy searchStrategy, AnnotatedElement element, AnnotationFilter annotationFilter) {\r\n    RepeatableContainers containers = RepeatableContainers.of(repeatable, container);\r\n    MergedAnnotations annotations = MergedAnnotations.from(element, searchStrategy, containers, annotationFilter);\r\n    return annotations.stream(repeatable).collect(MergedAnnotationCollectors.toAnnotationSet());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#getAnnotations(Class<? extends Annotation>,Class<A>,SearchStrategy,AnnotatedElement,AnnotationFilter)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#nonRepeatableRequirements(Exception)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void nonRepeatableRequirements(Exception ex) {\r\n    assertThat(ex).hasMessageStartingWith(\"Annotation type must be a repeatable annotation\").hasMessageContaining(\"failed to resolve container type for\", NonRepeatable.class.getName());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#nonRepeatableRequirements(Exception)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#missingValueAttributeRequirements(Exception)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void missingValueAttributeRequirements(Exception ex) {\r\n    assertThat(ex).hasMessageStartingWith(\"Invalid declaration of container type\").hasMessageContaining(ContainerMissingValueAttribute.class.getName(), \"for repeatable annotation\", InvalidRepeatable.class.getName()).hasCauseInstanceOf(NoSuchMethodException.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#missingValueAttributeRequirements(Exception)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#nonArrayValueAttributeRequirements(Exception)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void nonArrayValueAttributeRequirements(Exception ex) {\r\n    assertThat(ex).hasMessageStartingWith(\"Container type\").hasMessageContaining(ContainerWithNonArrayValueAttribute.class.getName(), \"must declare a 'value' attribute for an array of type\", InvalidRepeatable.class.getName());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#nonArrayValueAttributeRequirements(Exception)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#wrongComponentTypeRequirements(Exception)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void wrongComponentTypeRequirements(Exception ex) {\r\n    assertThat(ex).hasMessageStartingWith(\"Container type\").hasMessageContaining(ContainerWithArrayValueAttributeButWrongComponentType.class.getName(), \"must declare a 'value' attribute for an array of type\", InvalidRepeatable.class.getName());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#wrongComponentTypeRequirements(Exception)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#assertThatAnnotationConfigurationException()",
    "headType": "method",
    "relation": "provide",
    "tail": "private static ThrowableTypeAssert<AnnotationConfigurationException> assertThatAnnotationConfigurationException() {\r\n    return assertThatExceptionOfType(AnnotationConfigurationException.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#assertThatAnnotationConfigurationException()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.annotation.RepeatableClass",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.annotation.RepeatableClass",
    "headType": "class",
    "relation": "use",
    "tail": "@PeteRepeat",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.RepeatableClass",
    "headType": "class",
    "relation": "use",
    "tail": "@PeteRepeats",
    "tailType": "annotation"
  }
]