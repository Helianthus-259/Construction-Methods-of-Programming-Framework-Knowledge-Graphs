[
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#toStringSection(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid toStringSection(DataBufferFactory bufferFactory) {\r\n    super.bufferFactory = bufferFactory;\r\n    String spring = \"Spring\";\r\n    byte[] bytes = spring.getBytes(StandardCharsets.UTF_8);\r\n    DataBuffer buffer = createDataBuffer(bytes.length);\r\n    buffer.write(bytes);\r\n    String result = buffer.toString(1, 3, StandardCharsets.UTF_8);\r\n    assertThat(result).isEqualTo(\"pri\");\r\n    release(buffer);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferTests#toStringSection(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#toStringSection(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#inputStream(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid inputStream(DataBufferFactory bufferFactory) throws Exception {\r\n    super.bufferFactory = bufferFactory;\r\n    DataBuffer buffer = createDataBuffer(4);\r\n    buffer.write(new byte[] { 'a', 'b', 'c', 'd', 'e' });\r\n    buffer.readPosition(1);\r\n    InputStream inputStream = buffer.asInputStream();\r\n    assertThat(inputStream.available()).isEqualTo(4);\r\n    int result = inputStream.read();\r\n    assertThat(result).isEqualTo((byte) 'b');\r\n    assertThat(inputStream.available()).isEqualTo(3);\r\n    assertThat(inputStream.markSupported()).isTrue();\r\n    inputStream.mark(2);\r\n    byte[] bytes = new byte[2];\r\n    int len = inputStream.read(bytes);\r\n    assertThat(len).isEqualTo(2);\r\n    assertThat(bytes).isEqualTo(new byte[] { 'c', 'd' });\r\n    assertThat(inputStream.available()).isEqualTo(1);\r\n    Arrays.fill(bytes, (byte) 0);\r\n    len = inputStream.read(bytes);\r\n    assertThat(len).isEqualTo(1);\r\n    assertThat(bytes).isEqualTo(new byte[] { 'e', (byte) 0 });\r\n    assertThat(inputStream.available()).isEqualTo(0);\r\n    assertThat(inputStream.read()).isEqualTo(-1);\r\n    assertThat(inputStream.read(bytes)).isEqualTo(-1);\r\n    inputStream.reset();\r\n    bytes = new byte[3];\r\n    len = inputStream.read(bytes);\r\n    assertThat(len).isEqualTo(3);\r\n    assertThat(bytes).containsExactly('c', 'd', 'e');\r\n    release(buffer);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferTests#inputStream(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#inputStream(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#inputStreamReleaseOnClose(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid inputStreamReleaseOnClose(DataBufferFactory bufferFactory) throws Exception {\r\n    super.bufferFactory = bufferFactory;\r\n    DataBuffer buffer = createDataBuffer(3);\r\n    byte[] bytes = { 'a', 'b', 'c' };\r\n    buffer.write(bytes);\r\n    try (InputStream inputStream = buffer.asInputStream(true)) {\r\n        byte[] result = new byte[3];\r\n        int len = inputStream.read(result);\r\n        assertThat(len).isEqualTo(3);\r\n        assertThat(result).isEqualTo(bytes);\r\n    }\r\n    // AbstractDataBufferAllocatingTests.leakDetector will verify the buffer's release\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferTests#inputStreamReleaseOnClose(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#inputStreamReleaseOnClose(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#outputStream(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid outputStream(DataBufferFactory bufferFactory) throws Exception {\r\n    super.bufferFactory = bufferFactory;\r\n    DataBuffer buffer = createDataBuffer(4);\r\n    buffer.write((byte) 'a');\r\n    OutputStream outputStream = buffer.asOutputStream();\r\n    outputStream.write('b');\r\n    outputStream.write(new byte[] { 'c', 'd' });\r\n    buffer.write((byte) 'e');\r\n    byte[] bytes = new byte[5];\r\n    buffer.read(bytes);\r\n    assertThat(bytes).isEqualTo(new byte[] { 'a', 'b', 'c', 'd', 'e' });\r\n    release(buffer);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferTests#outputStream(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#outputStream(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#expand(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid expand(DataBufferFactory bufferFactory) {\r\n    super.bufferFactory = bufferFactory;\r\n    DataBuffer buffer = createDataBuffer(1);\r\n    buffer.write((byte) 'a');\r\n    assertThat(buffer.capacity()).isEqualTo(1);\r\n    buffer.write((byte) 'b');\r\n    assertThat(buffer.capacity()).isGreaterThan(1);\r\n    release(buffer);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferTests#expand(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#expand(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#increaseCapacity(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\n@SuppressWarnings(\"deprecation\")\r\nvoid increaseCapacity(DataBufferFactory bufferFactory) {\r\n    super.bufferFactory = bufferFactory;\r\n    DataBuffer buffer = createDataBuffer(1);\r\n    assertThat(buffer.capacity()).isEqualTo(1);\r\n    buffer.capacity(2);\r\n    assertThat(buffer.capacity()).isEqualTo(2);\r\n    release(buffer);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferTests#increaseCapacity(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#increaseCapacity(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#increaseCapacity(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#decreaseCapacityLowReadPosition(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\n@SuppressWarnings(\"deprecation\")\r\nvoid decreaseCapacityLowReadPosition(DataBufferFactory bufferFactory) {\r\n    assumeFalse(bufferFactory instanceof Netty5DataBufferFactory, \"Netty 5 does not support decreasing the capacity\");\r\n    super.bufferFactory = bufferFactory;\r\n    DataBuffer buffer = createDataBuffer(2);\r\n    buffer.writePosition(2);\r\n    buffer.capacity(1);\r\n    assertThat(buffer.capacity()).isEqualTo(1);\r\n    release(buffer);\r\n}",
    "tailType": "method_code"
  }
]