[
  {
    "head": "org.springframework.util.MultiValueMapAdapter#entrySet()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Set<Entry<K, List<V>>> entrySet() {\r\n    return this.targetMap.entrySet();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MultiValueMapAdapter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MultiValueMapAdapter#entrySet()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MultiValueMapAdapter#entrySet()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MultiValueMapAdapter#forEach(BiConsumer<? super K,? super List<V>>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void forEach(BiConsumer<? super K, ? super List<V>> action) {\r\n    this.targetMap.forEach(action);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MultiValueMapAdapter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MultiValueMapAdapter#forEach(BiConsumer<? super K,? super List<V>>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MultiValueMapAdapter#forEach(BiConsumer<? super K,? super List<V>>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MultiValueMapAdapter#equals(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean equals(@Nullable Object other) {\r\n    return (this == other || this.targetMap.equals(other));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MultiValueMapAdapter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MultiValueMapAdapter#equals(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MultiValueMapAdapter#equals(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MultiValueMapAdapter#hashCode()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int hashCode() {\r\n    return this.targetMap.hashCode();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MultiValueMapAdapter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MultiValueMapAdapter#hashCode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MultiValueMapAdapter#hashCode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MultiValueMapAdapter#toString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String toString() {\r\n    return this.targetMap.toString();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MultiValueMapAdapter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MultiValueMapAdapter#toString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MultiValueMapAdapter#toString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.NumberUtils",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.NumberUtils",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport java.text.DecimalFormat;\nimport java.text.NumberFormat;\nimport java.text.ParseException;\nimport java.util.Set;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * Miscellaneous utility methods for number conversion and parsing.\n * <p>Mainly for internal use within the framework; consider Apache's\n * Commons Lang for a more comprehensive suite of number utilities.\n *\n * @author Juergen Hoeller\n * @author Rob Harrop\n * @since 1.1.2\n */\npublic abstract class NumberUtils {\n\n\tprivate static final BigInteger LONG_MIN = BigInteger.valueOf(Long.MIN_VALUE);\n\n\tprivate static final BigInteger LONG_MAX = BigInteger.valueOf(Long.MAX_VALUE);\n\n\t/**\n\t * Standard number types (all immutable):\n\t * Byte, Short, Integer, Long, BigInteger, Float, Double, BigDecimal.\n\t */\n\tpublic static final Set<Class<?>> STANDARD_NUMBER_TYPES = Set.of(\n\t\t\tByte.class,\n\t\t\tShort.class,\n\t\t\tInteger.class,\n\t\t\tLong.class,\n\t\t\tBigInteger.class,\n\t\t\tFloat.class,\n\t\t\tDouble.class,\n\t\t\tBigDecimal.class);\n\n\t/**\n\t * Convert the given number into an instance of the given target class.\n\t * @param number the number to convert\n\t * @param targetClass the target class to convert to\n\t * @return the converted number\n\t * @throws IllegalArgumentException if the target class is not supported\n\t * (i.e. not a standard Number subclass as included in the JDK)\n\t * @see java.lang.Byte\n\t * @see java.lang.Short\n\t * @see java.lang.Integer\n\t * @see java.lang.Long\n\t * @see java.math.BigInteger\n\t * @see java.lang.Float\n\t * @see java.lang.Double\n\t * @see java.math.BigDecimal\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tpublic static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass)\n\t\t\tthrows IllegalArgumentException {\n\n\t\tAssert.notNull(number, \"Number must not be null\");\n\t\tAssert.notNull(targetClass, \"Target class must not be null\");\n\n\t\tif (targetClass.isInstance(number)) {\n\t\t\treturn (T) number;\n\t\t}\n\t\telse if (Byte.class == targetClass) {\n\t\t\tlong value = checkedLongValue(number, targetClass);\n\t\t\tif (value < Byte.MIN_VALUE || value > Byte.MAX_VALUE) {\n\t\t\t\traiseOverflowException(number, targetClass);\n\t\t\t}\n\t\t\treturn (T) Byte.valueOf(number.byteValue());\n\t\t}\n\t\telse if (Short.class == targetClass) {\n\t\t\tlong value = checkedLongValue(number, targetClass);\n\t\t\tif (value < Short.MIN_VALUE || value > Short.MAX_VALUE) {\n\t\t\t\traiseOverflowException(number, targetClass);\n\t\t\t}\n\t\t\treturn (T) Short.valueOf(number.shortValue());\n\t\t}\n\t\telse if (Integer.class == targetClass) {\n\t\t\tlong value = checkedLongValue(number, targetClass);\n\t\t\tif (value < Integer.MIN_VALUE || value > Integer.MAX_VALUE) {\n\t\t\t\traiseOverflowException(number, targetClass);\n\t\t\t}\n\t\t\treturn (T) Integer.valueOf(number.intValue());\n\t\t}\n\t\telse if (Long.class == targetClass) {\n\t\t\tlong value = checkedLongValue(number, targetClass);\n\t\t\treturn (T) Long.valueOf(value);\n\t\t}\n\t\telse if (BigInteger.class == targetClass) {\n\t\t\tif (number instanceof BigDecimal bigDecimal) {\n\t\t\t\t// do not lose precision - use BigDecimal's own conversion\n\t\t\t\treturn (T) bigDecimal.toBigInteger();\n\t\t\t}\n\t\t\t// original value is not a Big* number - use standard long conversion\n\t\t\treturn (T) BigInteger.valueOf(number.longValue());\n\t\t}\n\t\telse if (Float.class == targetClass) {\n\t\t\treturn (T) Float.valueOf(number.floatValue());\n\t\t}\n\t\telse if (Double.class == targetClass) {\n\t\t\treturn (T) Double.valueOf(number.doubleValue());\n\t\t}\n\t\telse if (BigDecimal.class == targetClass) {\n\t\t\t// always use BigDecimal(String) here to avoid unpredictability of BigDecimal(double)\n\t\t\t// (see BigDecimal javadoc for details)\n\t\t\treturn (T) new BigDecimal(number.toString());\n\t\t}\n\t\telse {\n\t\t\tthrow new IllegalArgumentException(\"Could not convert number [\" + number + \"] of type [\" +\n\t\t\t\t\tnumber.getClass().getName() + \"] to unsupported target class [\" + targetClass.getName() + \"]\");\n\t\t}\n\t}\n\n\t/**\n\t * Check for a {@code BigInteger}/{@code BigDecimal} long overflow\n\t * before returning the given number as a long value.\n\t * @param number the number to convert\n\t * @param targetClass the target class to convert to\n\t * @return the long value, if convertible without overflow\n\t * @throws IllegalArgumentException if there is an overflow\n\t * @see #raiseOverflowException\n\t */\n\tprivate static long checkedLongValue(Number number, Class<? extends Number> targetClass) {\n\t\tBigInteger bigInt = null;\n\t\tif (number instanceof BigInteger bigInteger) {\n\t\t\tbigInt = bigInteger;\n\t\t}\n\t\telse if (number instanceof BigDecimal bigDecimal) {\n\t\t\tbigInt = bigDecimal.toBigInteger();\n\t\t}\n\t\t// Effectively analogous to JDK 8's BigInteger.longValueExact()\n\t\tif (bigInt != null && (bigInt.compareTo(LONG_MIN) < 0 || bigInt.compareTo(LONG_MAX) > 0)) {\n\t\t\traiseOverflowException(number, targetClass);\n\t\t}\n\t\treturn number.longValue();\n\t}\n\n\t/**\n\t * Raise an <em>overflow</em> exception for the given number and target class.\n\t * @param number the number we tried to convert\n\t * @param targetClass the target class we tried to convert to\n\t * @throws IllegalArgumentException if there is an overflow\n\t */\n\tprivate static void raiseOverflowException(Number number, Class<?> targetClass) {\n\t\tthrow new IllegalArgumentException(\"Could not convert number [\" + number + \"] of type [\" +\n\t\t\t\tnumber.getClass().getName() + \"] to target class [\" + targetClass.getName() + \"]: overflow\");\n\t}\n\n\t/**\n\t * Parse the given {@code text} into a {@link Number} instance of the given\n\t * target class, using the corresponding {@code decode} / {@code valueOf} method.\n\t * <p>Trims all whitespace (leading, trailing, and in between characters) from\n\t * the input {@code String} before attempting to parse the number.\n\t * <p>Supports numbers in hex format (with leading \"0x\", \"0X\", or \"#\") as well.\n\t * @param text the text to convert\n\t * @param targetClass the target class to parse into\n\t * @return the parsed number\n\t * @throws IllegalArgumentException if the target class is not supported\n\t * (i.e. not a standard Number subclass as included in the JDK)\n\t * @see Byte#decode\n\t * @see Short#decode\n\t * @see Integer#decode\n\t * @see Long#decode\n\t * @see #decodeBigInteger(String)\n\t * @see Float#valueOf\n\t * @see Double#valueOf\n\t * @see java.math.BigDecimal#BigDecimal(String)\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tpublic static <T extends Number> T parseNumber(String text, Class<T> targetClass) {\n\t\tAssert.notNull(text, \"Text must not be null\");\n\t\tAssert.notNull(targetClass, \"Target class must not be null\");\n\t\tString trimmed = StringUtils.trimAllWhitespace(text);\n\n\t\tif (Byte.class == targetClass) {\n\t\t\treturn (T) (isHexNumber(trimmed) ? Byte.decode(trimmed) : Byte.valueOf(trimmed));\n\t\t}\n\t\telse if (Short.class == targetClass) {\n\t\t\treturn (T) (isHexNumber(trimmed) ? Short.decode(trimmed) : Short.valueOf(trimmed));\n\t\t}\n\t\telse if (Integer.class == targetClass) {\n\t\t\treturn (T) (isHexNumber(trimmed) ? Integer.decode(trimmed) : Integer.valueOf(trimmed));\n\t\t}\n\t\telse if (Long.class == targetClass) {\n\t\t\treturn (T) (isHexNumber(trimmed) ? Long.decode(trimmed) : Long.valueOf(trimmed));\n\t\t}\n\t\telse if (BigInteger.class == targetClass) {\n\t\t\treturn (T) (isHexNumber(trimmed) ? decodeBigInteger(trimmed) : new BigInteger(trimmed));\n\t\t}\n\t\telse if (Float.class == targetClass) {\n\t\t\treturn (T) Float.valueOf(trimmed);\n\t\t}\n\t\telse if (Double.class == targetClass) {\n\t\t\treturn (T) Double.valueOf(trimmed);\n\t\t}\n\t\telse if (BigDecimal.class == targetClass || Number.class == targetClass) {\n\t\t\treturn (T) new BigDecimal(trimmed);\n\t\t}\n\t\telse {\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\"Cannot convert String [\" + text + \"] to target class [\" + targetClass.getName() + \"]\");\n\t\t}\n\t}\n\n\t/**\n\t * Parse the given {@code text} into a {@link Number} instance of the\n\t * given target class, using the supplied {@link NumberFormat}.\n\t * <p>Trims the input {@code String} before attempting to parse the number.\n\t * @param text the text to convert\n\t * @param targetClass the target class to parse into\n\t * @param numberFormat the {@code NumberFormat} to use for parsing (if\n\t * {@code null}, this method falls back to {@link #parseNumber(String, Class)})\n\t * @return the parsed number\n\t * @throws IllegalArgumentException if the target class is not supported\n\t * (i.e. not a standard Number subclass as included in the JDK)\n\t * @see java.text.NumberFormat#parse\n\t * @see #convertNumberToTargetClass\n\t * @see #parseNumber(String, Class)\n\t */\n\t@SuppressWarnings(\"NullAway\") // Dataflow analysis limitation\n\tpublic static <T extends Number> T parseNumber(\n\t\t\tString text, Class<T> targetClass, @Nullable NumberFormat numberFormat) {\n\n\t\tif (numberFormat != null) {\n\t\t\tAssert.notNull(text, \"Text must not be null\");\n\t\t\tAssert.notNull(targetClass, \"Target class must not be null\");\n\t\t\tDecimalFormat decimalFormat = null;\n\t\t\tboolean resetBigDecimal = false;\n\t\t\tif (numberFormat instanceof DecimalFormat dc) {\n\t\t\t\tdecimalFormat = dc;\n\t\t\t\tif (BigDecimal.class == targetClass && !decimalFormat.isParseBigDecimal()) {\n\t\t\t\t\tdecimalFormat.setParseBigDecimal(true);\n\t\t\t\t\tresetBigDecimal = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tNumber number = numberFormat.parse(StringUtils.trimAllWhitespace(text));\n\t\t\t\treturn convertNumberToTargetClass(number, targetClass);\n\t\t\t}\n\t\t\tcatch (ParseException ex) {\n\t\t\t\tthrow new IllegalArgumentException(\"Could not parse number: \" + ex.getMessage());\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tif (resetBigDecimal) {\n\t\t\t\t\tdecimalFormat.setParseBigDecimal(false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\treturn parseNumber(text, targetClass);\n\t\t}\n\t}\n\n\t/**\n\t * Determine whether the given {@code value} String indicates a hex number,\n\t * i.e. needs to be passed into {@code Integer.decode} instead of\n\t * {@code Integer.valueOf}, etc.\n\t */\n\tprivate static boolean isHexNumber(String value) {\n\t\tint index = (value.startsWith(\"-\") ? 1 : 0);\n\t\treturn (value.startsWith(\"0x\", index) || value.startsWith(\"0X\", index) || value.startsWith(\"#\", index));\n\t}\n\n\t/**\n\t * Decode a {@link java.math.BigInteger} from the supplied {@link String} value.\n\t * <p>Supports decimal, hex, and octal notation.\n\t * @see BigInteger#BigInteger(String, int)\n\t */\n\tprivate static BigInteger decodeBigInteger(String value) {\n\t\tint radix = 10;\n\t\tint index = 0;\n\t\tboolean negative = false;\n\n\t\t// Handle minus sign, if present.\n\t\tif (value.startsWith(\"-\")) {\n\t\t\tnegative = true;\n\t\t\tindex++;\n\t\t}\n\n\t\t// Handle radix specifier, if present.\n\t\tif (value.startsWith(\"0x\", index) || value.startsWith(\"0X\", index)) {\n\t\t\tindex += 2;\n\t\t\tradix = 16;\n\t\t}\n\t\telse if (value.startsWith(\"#\", index)) {\n\t\t\tindex++;\n\t\t\tradix = 16;\n\t\t}\n\t\telse if (value.startsWith(\"0\", index) && value.length() > 1 + index) {\n\t\t\tindex++;\n\t\t\tradix = 8;\n\t\t}\n\n\t\tBigInteger result = new BigInteger(value.substring(index), radix);\n\t\treturn (negative ? result.negate() : result);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.NumberUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.NumberUtils#LONG_MIN",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.NumberUtils#LONG_MIN",
    "headType": "field",
    "relation": "haveType",
    "tail": "BigInteger",
    "tailType": "type"
  }
]