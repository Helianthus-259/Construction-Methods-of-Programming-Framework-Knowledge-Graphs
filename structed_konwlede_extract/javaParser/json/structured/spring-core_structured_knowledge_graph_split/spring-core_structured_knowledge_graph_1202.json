[
  {
    "head": "org.springframework.core.type.classreading",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.type.classreading.SimpleMetadataReaderFactory",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleMetadataReaderFactory",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.type.classreading;\n\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.util.ClassUtils;\n\n/**\n * Simple implementation of the {@link MetadataReaderFactory} interface,\n * creating a new ASM {@link org.springframework.asm.ClassReader} for every request.\n *\n * @author Juergen Hoeller\n * @since 2.5\n */\npublic class SimpleMetadataReaderFactory implements MetadataReaderFactory {\n\n\tprivate final ResourceLoader resourceLoader;\n\n\n\t/**\n\t * Create a new SimpleMetadataReaderFactory for the default class loader.\n\t */\n\tpublic SimpleMetadataReaderFactory() {\n\t\tthis.resourceLoader = new DefaultResourceLoader();\n\t}\n\n\t/**\n\t * Create a new SimpleMetadataReaderFactory for the given resource loader.\n\t * @param resourceLoader the Spring ResourceLoader to use\n\t * (also determines the ClassLoader to use)\n\t */\n\tpublic SimpleMetadataReaderFactory(@Nullable ResourceLoader resourceLoader) {\n\t\tthis.resourceLoader = (resourceLoader != null ? resourceLoader : new DefaultResourceLoader());\n\t}\n\n\t/**\n\t * Create a new SimpleMetadataReaderFactory for the given class loader.\n\t * @param classLoader the ClassLoader to use\n\t */\n\tpublic SimpleMetadataReaderFactory(@Nullable ClassLoader classLoader) {\n\t\tthis.resourceLoader =\n\t\t\t\t(classLoader != null ? new DefaultResourceLoader(classLoader) : new DefaultResourceLoader());\n\t}\n\n\n\t/**\n\t * Return the ResourceLoader that this MetadataReaderFactory has been\n\t * constructed with.\n\t */\n\tpublic final ResourceLoader getResourceLoader() {\n\t\treturn this.resourceLoader;\n\t}\n\n\n\t@Override\n\tpublic MetadataReader getMetadataReader(String className) throws IOException {\n\t\ttry {\n\t\t\tString resourcePath = ResourceLoader.CLASSPATH_URL_PREFIX +\n\t\t\t\t\tClassUtils.convertClassNameToResourcePath(className) + ClassUtils.CLASS_FILE_SUFFIX;\n\t\t\tResource resource = this.resourceLoader.getResource(resourcePath);\n\t\t\treturn getMetadataReader(resource);\n\t\t}\n\t\tcatch (FileNotFoundException ex) {\n\t\t\t// Maybe an inner class name using the dot name syntax? Need to use the dollar syntax here...\n\t\t\t// ClassUtils.forName has an equivalent check for resolution into Class references later on.\n\t\t\tint lastDotIndex = className.lastIndexOf('.');\n\t\t\tif (lastDotIndex != -1) {\n\t\t\t\tString innerClassName =\n\t\t\t\t\t\tclassName.substring(0, lastDotIndex) + '$' + className.substring(lastDotIndex + 1);\n\t\t\t\tString innerClassResourcePath = ResourceLoader.CLASSPATH_URL_PREFIX +\n\t\t\t\t\t\tClassUtils.convertClassNameToResourcePath(innerClassName) + ClassUtils.CLASS_FILE_SUFFIX;\n\t\t\t\tResource innerClassResource = this.resourceLoader.getResource(innerClassResourcePath);\n\t\t\t\tif (innerClassResource.exists()) {\n\t\t\t\t\treturn getMetadataReader(innerClassResource);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthrow ex;\n\t\t}\n\t}\n\n\t@Override\n\tpublic MetadataReader getMetadataReader(Resource resource) throws IOException {\n\t\treturn new SimpleMetadataReader(resource, this.resourceLoader.getClassLoader());\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleMetadataReaderFactory",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.type.classreading.SimpleMetadataReaderFactory#resourceLoader",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleMetadataReaderFactory#resourceLoader",
    "headType": "field",
    "relation": "haveType",
    "tail": "ResourceLoader",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getResourceLoader()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the ResourceLoader that this MetadataReaderFactory has been\r\n * constructed with.\r\n */\r\npublic final ResourceLoader getResourceLoader() {\r\n    return this.resourceLoader;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleMetadataReaderFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getResourceLoader()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic MetadataReader getMetadataReader(String className) throws IOException {\r\n    try {\r\n        String resourcePath = ResourceLoader.CLASSPATH_URL_PREFIX + ClassUtils.convertClassNameToResourcePath(className) + ClassUtils.CLASS_FILE_SUFFIX;\r\n        Resource resource = this.resourceLoader.getResource(resourcePath);\r\n        return getMetadataReader(resource);\r\n    } catch (FileNotFoundException ex) {\r\n        // Maybe an inner class name using the dot name syntax? Need to use the dollar syntax here...\r\n        // ClassUtils.forName has an equivalent check for resolution into Class references later on.\r\n        int lastDotIndex = className.lastIndexOf('.');\r\n        if (lastDotIndex != -1) {\r\n            String innerClassName = className.substring(0, lastDotIndex) + '$' + className.substring(lastDotIndex + 1);\r\n            String innerClassResourcePath = ResourceLoader.CLASSPATH_URL_PREFIX + ClassUtils.convertClassNameToResourcePath(innerClassName) + ClassUtils.CLASS_FILE_SUFFIX;\r\n            Resource innerClassResource = this.resourceLoader.getResource(innerClassResourcePath);\r\n            if (innerClassResource.exists()) {\r\n                return getMetadataReader(innerClassResource);\r\n            }\r\n        }\r\n        throw ex;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleMetadataReaderFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(Resource)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic MetadataReader getMetadataReader(Resource resource) throws IOException {\r\n    return new SimpleMetadataReader(resource, this.resourceLoader.getClassLoader());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleMetadataReaderFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(Resource)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(Resource)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.type.classreading",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.type.classreading",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.type.classreading.SimpleMethodMetadata",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleMethodMetadata",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.type.classreading;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.asm.Opcodes;\nimport org.springframework.core.annotation.MergedAnnotations;\nimport org.springframework.core.type.MethodMetadata;\n\n/**\n * {@link MethodMetadata} created from a {@link SimpleMethodMetadataReadingVisitor}.\n *\n * @author Phillip Webb\n * @author Sam Brannen\n * @since 5.2\n */\nfinal class SimpleMethodMetadata implements MethodMetadata {\n\n\tprivate final String methodName;\n\n\tprivate final int access;\n\n\tprivate final String declaringClassName;\n\n\tprivate final String returnTypeName;\n\n\t// The source implements equals(), hashCode(), and toString() for the underlying method.\n\tprivate final Object source;\n\n\tprivate final MergedAnnotations annotations;\n\n\n\tSimpleMethodMetadata(String methodName, int access, String declaringClassName,\n\t\t\tString returnTypeName, Object source, MergedAnnotations annotations) {\n\n\t\tthis.methodName = methodName;\n\t\tthis.access = access;\n\t\tthis.declaringClassName = declaringClassName;\n\t\tthis.returnTypeName = returnTypeName;\n\t\tthis.source = source;\n\t\tthis.annotations = annotations;\n\t}\n\n\n\t@Override\n\tpublic String getMethodName() {\n\t\treturn this.methodName;\n\t}\n\n\t@Override\n\tpublic String getDeclaringClassName() {\n\t\treturn this.declaringClassName;\n\t}\n\n\t@Override\n\tpublic String getReturnTypeName() {\n\t\treturn this.returnTypeName;\n\t}\n\n\t@Override\n\tpublic boolean isAbstract() {\n\t\treturn (this.access & Opcodes.ACC_ABSTRACT) != 0;\n\t}\n\n\t@Override\n\tpublic boolean isStatic() {\n\t\treturn (this.access & Opcodes.ACC_STATIC) != 0;\n\t}\n\n\t@Override\n\tpublic boolean isFinal() {\n\t\treturn (this.access & Opcodes.ACC_FINAL) != 0;\n\t}\n\n\t@Override\n\tpublic boolean isOverridable() {\n\t\treturn !isStatic() && !isFinal() && !isPrivate();\n\t}\n\n\tprivate boolean isPrivate() {\n\t\treturn (this.access & Opcodes.ACC_PRIVATE) != 0;\n\t}\n\n\t@Override\n\tpublic MergedAnnotations getAnnotations() {\n\t\treturn this.annotations;\n\t}\n\n\n\t@Override\n\tpublic boolean equals(@Nullable Object other) {\n\t\treturn (this == other || (other instanceof SimpleMethodMetadata that && this.source.equals(that.source)));\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\treturn this.source.hashCode();\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn this.source.toString();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleMethodMetadata",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.type.classreading.SimpleMethodMetadata#methodName",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleMethodMetadata#methodName",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleMethodMetadata",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.type.classreading.SimpleMethodMetadata#access",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleMethodMetadata#access",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleMethodMetadata",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.type.classreading.SimpleMethodMetadata#declaringClassName",
    "tailType": "field"
  }
]