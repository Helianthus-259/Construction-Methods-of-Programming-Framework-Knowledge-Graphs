[
  {
    "head": "org.springframework.core.codec.AbstractCharSequenceDecoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.AbstractCharSequenceDecoder#decodeInternal(DataBuffer,Charset)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.AbstractCharSequenceDecoder",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractDataBufferDecoder",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.codec",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.codec",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.codec.AbstractDataBufferDecoder",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.codec.AbstractDataBufferDecoder",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.codec;\n\nimport java.util.Map;\n\nimport org.jspecify.annotations.Nullable;\nimport org.reactivestreams.Publisher;\nimport reactor.core.publisher.Flux;\nimport reactor.core.publisher.Mono;\n\nimport org.springframework.core.ResolvableType;\nimport org.springframework.core.io.buffer.DataBuffer;\nimport org.springframework.core.io.buffer.DataBufferUtils;\nimport org.springframework.util.MimeType;\n\n/**\n * Abstract base class for {@code Decoder} implementations that can decode\n * a {@code DataBuffer} directly to the target element type.\n *\n * <p>Sub-classes must implement {@link #decodeDataBuffer} to provide a way to\n * transform a {@code DataBuffer} to the target data type. The default\n * {@link #decode} implementation transforms each individual data buffer while\n * {@link #decodeToMono} applies \"reduce\" and transforms the aggregated buffer.\n *\n * <p>Sub-classes can override {@link #decode} in order to split the input stream\n * along different boundaries (for example, on new line characters for {@code String})\n * or always reduce to a single data buffer (for example, {@code Resource}).\n *\n * @author Rossen Stoyanchev\n * @since 5.0\n * @param <T> the element type\n */\npublic abstract class AbstractDataBufferDecoder<T> extends AbstractDecoder<T> {\n\n\tprivate int maxInMemorySize = 256 * 1024;\n\n\n\tprotected AbstractDataBufferDecoder(MimeType... supportedMimeTypes) {\n\t\tsuper(supportedMimeTypes);\n\t}\n\n\n\t/**\n\t * Configure a limit on the number of bytes that can be buffered whenever\n\t * the input stream needs to be aggregated. This can be a result of\n\t * decoding to a single {@code DataBuffer},\n\t * {@link java.nio.ByteBuffer ByteBuffer}, {@code byte[]},\n\t * {@link org.springframework.core.io.Resource Resource}, {@code String}, etc.\n\t * It can also occur when splitting the input stream, for example, delimited text,\n\t * in which case the limit applies to data buffered between delimiters.\n\t * <p>By default this is set to 256K.\n\t * @param byteCount the max number of bytes to buffer, or -1 for unlimited\n\t * @since 5.1.11\n\t */\n\tpublic void setMaxInMemorySize(int byteCount) {\n\t\tthis.maxInMemorySize = byteCount;\n\t}\n\n\t/**\n\t * Return the {@link #setMaxInMemorySize configured} byte count limit.\n\t * @since 5.1.11\n\t */\n\tpublic int getMaxInMemorySize() {\n\t\treturn this.maxInMemorySize;\n\t}\n\n\n\t@Override\n\tpublic Flux<T> decode(Publisher<DataBuffer> input, ResolvableType elementType,\n\t\t\t@Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\n\n\t\treturn Flux.from(input).map(buffer -> decodeDataBuffer(buffer, elementType, mimeType, hints));\n\t}\n\n\t@Override\n\tpublic Mono<T> decodeToMono(Publisher<DataBuffer> input, ResolvableType elementType,\n\t\t\t@Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\n\n\t\treturn DataBufferUtils.join(input, this.maxInMemorySize)\n\t\t\t\t.map(buffer -> decodeDataBuffer(buffer, elementType, mimeType, hints));\n\t}\n\n\t/**\n\t * How to decode a {@code DataBuffer} to the target element type.\n\t * @deprecated as of 5.2, please implement\n\t * {@link #decode(DataBuffer, ResolvableType, MimeType, Map)} instead\n\t */\n\t@Deprecated\n\tprotected @Nullable T decodeDataBuffer(DataBuffer buffer, ResolvableType elementType,\n\t\t\t@Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\n\n\t\treturn decode(buffer, elementType, mimeType, hints);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.codec.AbstractDataBufferDecoder",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.codec.AbstractDataBufferDecoder#maxInMemorySize",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.codec.AbstractDataBufferDecoder#maxInMemorySize",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.codec.AbstractDataBufferDecoder#setMaxInMemorySize(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Configure a limit on the number of bytes that can be buffered whenever\r\n * the input stream needs to be aggregated. This can be a result of\r\n * decoding to a single {@code DataBuffer},\r\n * {@link java.nio.ByteBuffer ByteBuffer}, {@code byte[]},\r\n * {@link org.springframework.core.io.Resource Resource}, {@code String}, etc.\r\n * It can also occur when splitting the input stream, for example, delimited text,\r\n * in which case the limit applies to data buffered between delimiters.\r\n * <p>By default this is set to 256K.\r\n * @param byteCount the max number of bytes to buffer, or -1 for unlimited\r\n * @since 5.1.11\r\n */\r\npublic void setMaxInMemorySize(int byteCount) {\r\n    this.maxInMemorySize = byteCount;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.AbstractDataBufferDecoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.AbstractDataBufferDecoder#setMaxInMemorySize(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.AbstractDataBufferDecoder#getMaxInMemorySize()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the {@link #setMaxInMemorySize configured} byte count limit.\r\n * @since 5.1.11\r\n */\r\npublic int getMaxInMemorySize() {\r\n    return this.maxInMemorySize;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.AbstractDataBufferDecoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.AbstractDataBufferDecoder#getMaxInMemorySize()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.AbstractDataBufferDecoder#decode(Publisher<DataBuffer>,ResolvableType,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Flux<T> decode(Publisher<DataBuffer> input, ResolvableType elementType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\r\n    return Flux.from(input).map(buffer -> decodeDataBuffer(buffer, elementType, mimeType, hints));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.AbstractDataBufferDecoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.AbstractDataBufferDecoder#decode(Publisher<DataBuffer>,ResolvableType,MimeType,Map<String,Object>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.AbstractDataBufferDecoder#decode(Publisher<DataBuffer>,ResolvableType,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.AbstractDataBufferDecoder#decodeToMono(Publisher<DataBuffer>,ResolvableType,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Mono<T> decodeToMono(Publisher<DataBuffer> input, ResolvableType elementType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\r\n    return DataBufferUtils.join(input, this.maxInMemorySize).map(buffer -> decodeDataBuffer(buffer, elementType, mimeType, hints));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.AbstractDataBufferDecoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.AbstractDataBufferDecoder#decodeToMono(Publisher<DataBuffer>,ResolvableType,MimeType,Map<String,Object>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.AbstractDataBufferDecoder#decodeToMono(Publisher<DataBuffer>,ResolvableType,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.AbstractDataBufferDecoder#decodeDataBuffer(DataBuffer,ResolvableType,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * How to decode a {@code DataBuffer} to the target element type.\r\n * @deprecated as of 5.2, please implement\r\n * {@link #decode(DataBuffer, ResolvableType, MimeType, Map)} instead\r\n */\r\n@Deprecated\r\n@Nullable\r\nprotected T decodeDataBuffer(DataBuffer buffer, ResolvableType elementType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\r\n    return decode(buffer, elementType, mimeType, hints);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.AbstractDataBufferDecoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.AbstractDataBufferDecoder#decodeDataBuffer(DataBuffer,ResolvableType,MimeType,Map<String,Object>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.AbstractDataBufferDecoder#decodeDataBuffer(DataBuffer,ResolvableType,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  }
]