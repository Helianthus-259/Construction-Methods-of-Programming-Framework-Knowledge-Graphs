[
  {
    "head": "org.springframework.core.convert.support.StringToCollectionConverter#matches(TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {\r\n    return (targetType.getElementTypeDescriptor() == null || this.conversionService.canConvert(sourceType, targetType.getElementTypeDescriptor()));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.StringToCollectionConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.StringToCollectionConverter#matches(TypeDescriptor,TypeDescriptor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.StringToCollectionConverter#matches(TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.StringToCollectionConverter#convert(Object,TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic Object convert(@Nullable Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {\r\n    if (source == null) {\r\n        return null;\r\n    }\r\n    String string = (String) source;\r\n    String[] fields = StringUtils.commaDelimitedListToStringArray(string);\r\n    TypeDescriptor elementDesc = targetType.getElementTypeDescriptor();\r\n    Collection<Object> target = CollectionFactory.createCollection(targetType.getType(), (elementDesc != null ? elementDesc.getType() : null), fields.length);\r\n    if (elementDesc == null) {\r\n        for (String field : fields) {\r\n            target.add(field.trim());\r\n        }\r\n    } else {\r\n        for (String field : fields) {\r\n            Object targetElement = this.conversionService.convert(field.trim(), sourceType, elementDesc);\r\n            target.add(targetElement);\r\n        }\r\n    }\r\n    return target;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.StringToCollectionConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.StringToCollectionConverter#convert(Object,TypeDescriptor,TypeDescriptor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.StringToCollectionConverter#convert(Object,TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.StringToCollectionConverter#convert(Object,TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.convert.support",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.convert.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.support.StringToCurrencyConverter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.support.StringToCurrencyConverter",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert.support;\n\nimport java.util.Currency;\n\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.util.StringUtils;\n\n/**\n * Convert a String to a {@link Currency}.\n *\n * @author Stephane Nicoll\n * @author Sam Brannen\n * @since 4.2\n */\nclass StringToCurrencyConverter implements Converter<String, Currency> {\n\n\t@Override\n\tpublic Currency convert(String source) {\n\t\tif (StringUtils.hasText(source)) {\n\t\t\tsource = source.trim();\n\t\t}\n\t\treturn Currency.getInstance(source);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.convert.support.StringToCurrencyConverter#convert(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Currency convert(String source) {\r\n    if (StringUtils.hasText(source)) {\r\n        source = source.trim();\r\n    }\r\n    return Currency.getInstance(source);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.StringToCurrencyConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.StringToCurrencyConverter#convert(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.StringToCurrencyConverter#convert(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.convert.support",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.convert.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.support.StringToEnumConverterFactory",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.support.StringToEnumConverterFactory",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.StringToEnumConverterFactory",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2020 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert.support;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.core.convert.converter.ConverterFactory;\n\n/**\n * Converts from a String to a {@link java.lang.Enum} by calling {@link Enum#valueOf(Class, String)}.\n *\n * @author Keith Donald\n * @author Stephane Nicoll\n * @since 3.0\n */\n@SuppressWarnings({\"rawtypes\", \"unchecked\"})\nfinal class StringToEnumConverterFactory implements ConverterFactory<String, Enum> {\n\n\t@Override\n\tpublic <T extends Enum> Converter<String, T> getConverter(Class<T> targetType) {\n\t\treturn new StringToEnum(ConversionUtils.getEnumType(targetType));\n\t}\n\n\n\tprivate static class StringToEnum<T extends Enum> implements Converter<String, T> {\n\n\t\tprivate final Class<T> enumType;\n\n\t\tStringToEnum(Class<T> enumType) {\n\t\t\tthis.enumType = enumType;\n\t\t}\n\n\t\t@Override\n\t\tpublic @Nullable T convert(String source) {\n\t\t\tif (source.isEmpty()) {\n\t\t\t\t// It's an empty enum identifier: reset the enum value to null.\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn (T) Enum.valueOf(this.enumType, source.trim());\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.convert.support.StringToEnumConverterFactory#getConverter(Class<T>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic <T extends Enum> Converter<String, T> getConverter(Class<T> targetType) {\r\n    return new StringToEnum(ConversionUtils.getEnumType(targetType));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.StringToEnumConverterFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.StringToEnumConverterFactory#getConverter(Class<T>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.StringToEnumConverterFactory#getConverter(Class<T>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  }
]