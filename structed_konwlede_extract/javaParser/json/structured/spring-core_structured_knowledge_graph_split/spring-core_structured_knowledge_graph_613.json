[
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.core",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.core.ProcessSwitchCallback",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.core.ProcessSwitchCallback",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2003 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.cglib.core;\n\nimport org.springframework.asm.Label;\n\npublic interface ProcessSwitchCallback {\n    void processCase(int key, Label end) throws Exception;\n    void processDefault() throws Exception;\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.core.ProcessSwitchCallback#processCase(int,Label)",
    "headType": "method",
    "relation": "provide",
    "tail": "void processCase(int key, Label end) throws Exception;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.ProcessSwitchCallback",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.ProcessSwitchCallback#processCase(int,Label)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.ProcessSwitchCallback#processDefault()",
    "headType": "method",
    "relation": "provide",
    "tail": "void processDefault() throws Exception;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.ProcessSwitchCallback",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.ProcessSwitchCallback#processDefault()",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.core",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.core.ReflectUtils",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2003,2004 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.cglib.core;\n\nimport java.beans.BeanInfo;\nimport java.beans.IntrospectionException;\nimport java.beans.Introspector;\nimport java.beans.PropertyDescriptor;\nimport java.lang.invoke.MethodHandles;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InaccessibleObjectException;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Member;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\nimport java.security.ProtectionDomain;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.function.BiConsumer;\nimport java.util.function.Consumer;\n\nimport org.springframework.asm.Type;\n\n/**\n * @version $Id: ReflectUtils.java,v 1.30 2009/01/11 19:47:49 herbyderby Exp $\n */\n@SuppressWarnings({\"rawtypes\", \"unchecked\"})\npublic class ReflectUtils {\n\n\tprivate ReflectUtils() {\n\t}\n\n\tprivate static final Map primitives = new HashMap(8);\n\n\tprivate static final Map transforms = new HashMap(8);\n\n\tprivate static final ClassLoader defaultLoader = ReflectUtils.class.getClassLoader();\n\n\tprivate static final Method classLoaderDefineClassMethod;\n\n\tprivate static final Throwable THROWABLE;\n\n\tprivate static final ProtectionDomain PROTECTION_DOMAIN;\n\n\tprivate static final List<Method> OBJECT_METHODS = new ArrayList<>();\n\n\tprivate static BiConsumer<String, byte[]> generatedClassHandler;\n\n\tprivate static Consumer<Class<?>> loadedClassHandler;\n\n\t// SPRING PATCH BEGIN\n\tstatic {\n\t\t// Resolve protected ClassLoader.defineClass method for fallback use\n\t\t// (even if JDK 9+ Lookup.defineClass is preferably used below)\n\t\tMethod classLoaderDefineClass;\n\t\tThrowable throwable = null;\n\t\ttry {\n\t\t\tclassLoaderDefineClass = ClassLoader.class.getDeclaredMethod(\"defineClass\",\n\t\t\t\t\tString.class, byte[].class, Integer.TYPE, Integer.TYPE, ProtectionDomain.class);\n\t\t}\n\t\tcatch (Throwable t) {\n\t\t\tclassLoaderDefineClass = null;\n\t\t\tthrowable = t;\n\t\t}\n\n\t\tclassLoaderDefineClassMethod = classLoaderDefineClass;\n\t\tTHROWABLE = throwable;\n\t\tPROTECTION_DOMAIN = getProtectionDomain(ReflectUtils.class);\n\n\t\tfor (Method method : Object.class.getDeclaredMethods()) {\n\t\t\tif (\"finalize\".equals(method.getName())\n\t\t\t\t\t|| (method.getModifiers() & (Modifier.FINAL | Modifier.STATIC)) > 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tOBJECT_METHODS.add(method);\n\t\t}\n\t}\n\t// SPRING PATCH END\n\n\tprivate static final String[] CGLIB_PACKAGES = {\"java.lang\"};\n\n\tstatic {\n\t\tprimitives.put(\"byte\", Byte.TYPE);\n\t\tprimitives.put(\"char\", Character.TYPE);\n\t\tprimitives.put(\"double\", Double.TYPE);\n\t\tprimitives.put(\"float\", Float.TYPE);\n\t\tprimitives.put(\"int\", Integer.TYPE);\n\t\tprimitives.put(\"long\", Long.TYPE);\n\t\tprimitives.put(\"short\", Short.TYPE);\n\t\tprimitives.put(\"boolean\", Boolean.TYPE);\n\n\t\ttransforms.put(\"byte\", \"B\");\n\t\ttransforms.put(\"char\", \"C\");\n\t\ttransforms.put(\"double\", \"D\");\n\t\ttransforms.put(\"float\", \"F\");\n\t\ttransforms.put(\"int\", \"I\");\n\t\ttransforms.put(\"long\", \"J\");\n\t\ttransforms.put(\"short\", \"S\");\n\t\ttransforms.put(\"boolean\", \"Z\");\n\t}\n\n\tpublic static ProtectionDomain getProtectionDomain(final Class source) {\n\t\tif (source == null) {\n\t\t\treturn null;\n\t\t}\n\t\treturn source.getProtectionDomain();\n\t}\n\n\tpublic static Type[] getExceptionTypes(Member member) {\n\t\tif (member instanceof Method method) {\n\t\t\treturn TypeUtils.getTypes(method.getExceptionTypes());\n\t\t}\n\t\telse if (member instanceof Constructor<?> constructor) {\n\t\t\treturn TypeUtils.getTypes(constructor.getExceptionTypes());\n\t\t}\n\t\telse {\n\t\t\tthrow new IllegalArgumentException(\"Cannot get exception types of a field\");\n\t\t}\n\t}\n\n\tpublic static Signature getSignature(Member member) {\n\t\tif (member instanceof Method method) {\n\t\t\treturn new Signature(member.getName(), Type.getMethodDescriptor(method));\n\t\t}\n\t\telse if (member instanceof Constructor<?> constructor) {\n\t\t\tType[] types = TypeUtils.getTypes(constructor.getParameterTypes());\n\t\t\treturn new Signature(Constants.CONSTRUCTOR_NAME,\n\t\t\t\t\tType.getMethodDescriptor(Type.VOID_TYPE, types));\n\t\t}\n\t\telse {\n\t\t\tthrow new IllegalArgumentException(\"Cannot get signature of a field\");\n\t\t}\n\t}\n\n\tpublic static Constructor findConstructor(String desc) {\n\t\treturn findConstructor(desc, defaultLoader);\n\t}\n\n\tpublic static Constructor findConstructor(String desc, ClassLoader loader) {\n\t\ttry {\n\t\t\tint lparen = desc.indexOf('(');\n\t\t\tString className = desc.substring(0, lparen).trim();\n\t\t\treturn getClass(className, loader).getConstructor(parseTypes(desc, loader));\n\t\t}\n\t\tcatch (ClassNotFoundException | NoSuchMethodException ex) {\n\t\t\tthrow new CodeGenerationException(ex);\n\t\t}\n\t}\n\n\tpublic static Method findMethod(String desc) {\n\t\treturn findMethod(desc, defaultLoader);\n\t}\n\n\tpublic static Method findMethod(String desc, ClassLoader loader) {\n\t\ttry {\n\t\t\tint lparen = desc.indexOf('(');\n\t\t\tint dot = desc.lastIndexOf('.', lparen);\n\t\t\tString className = desc.substring(0, dot).trim();\n\t\t\tString methodName = desc.substring(dot + 1, lparen).trim();\n\t\t\treturn getClass(className, loader).getDeclaredMethod(methodName, parseTypes(desc, loader));\n\t\t}\n\t\tcatch (ClassNotFoundException | NoSuchMethodException ex) {\n\t\t\tthrow new CodeGenerationException(ex);\n\t\t}\n\t}\n\n\tprivate static Class[] parseTypes(String desc, ClassLoader loader) throws ClassNotFoundException {\n\t\tint lparen = desc.indexOf('(');\n\t\tint rparen = desc.indexOf(')', lparen);\n\t\tList params = new ArrayList();\n\t\tint start = lparen + 1;\n\t\tfor (; ; ) {\n\t\t\tint comma = desc.indexOf(',', start);\n\t\t\tif (comma < 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tparams.add(desc.substring(start, comma).trim());\n\t\t\tstart = comma + 1;\n\t\t}\n\t\tif (start < rparen) {\n\t\t\tparams.add(desc.substring(start, rparen).trim());\n\t\t}\n\t\tClass[] types = new Class[params.size()];\n\t\tfor (int i = 0; i < types.length; i++) {\n\t\t\ttypes[i] = getClass((String) params.get(i), loader);\n\t\t}\n\t\treturn types;\n\t}\n\n\tprivate static Class getClass(String className, ClassLoader loader) throws ClassNotFoundException {\n\t\treturn getClass(className, loader, CGLIB_PACKAGES);\n\t}\n\n\tprivate static Class getClass(String className, ClassLoader loader, String[] packages) throws ClassNotFoundException {\n\t\tString save = className;\n\t\tint dimensions = 0;\n\t\tint index = 0;\n\t\twhile ((index = className.indexOf(\"[]\", index) + 1) > 0) {\n\t\t\tdimensions++;\n\t\t}\n\t\tStringBuilder brackets = new StringBuilder(className.length() - dimensions);\n\t\tfor (int i = 0; i < dimensions; i++) {\n\t\t\tbrackets.append('[');\n\t\t}\n\t\tclassName = className.substring(0, className.length() - 2 * dimensions);\n\n\t\tString prefix = (dimensions > 0) ? brackets + \"L\" : \"\";\n\t\tString suffix = (dimensions > 0) ? \";\" : \"\";\n\t\ttry {\n\t\t\treturn Class.forName(prefix + className + suffix, false, loader);\n\t\t}\n\t\tcatch (ClassNotFoundException ignore) {\n\t\t}\n\t\tfor (String pkg : packages) {\n\t\t\ttry {\n\t\t\t\treturn Class.forName(prefix + pkg + '.' + className + suffix, false, loader);\n\t\t\t}\n\t\t\tcatch (ClassNotFoundException ignore) {\n\t\t\t}\n\t\t}\n\t\tif (dimensions == 0) {\n\t\t\tClass c = (Class) primitives.get(className);\n\t\t\tif (c != null) {\n\t\t\t\treturn c;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tString transform = (String) transforms.get(className);\n\t\t\tif (transform != null) {\n\t\t\t\ttry {\n\t\t\t\t\treturn Class.forName(brackets + transform, false, loader);\n\t\t\t\t}\n\t\t\t\tcatch (ClassNotFoundException ignore) {\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthrow new ClassNotFoundException(save);\n\t}\n\n\tpublic static Object newInstance(Class type) {\n\t\treturn newInstance(type, Constants.EMPTY_CLASS_ARRAY, null);\n\t}\n\n\tpublic static Object newInstance(Class type, Class[] parameterTypes, Object[] args) {\n\t\treturn newInstance(getConstructor(type, parameterTypes), args);\n\t}\n\n\t@SuppressWarnings(\"deprecation\")\n\tpublic static Object newInstance(final Constructor cstruct, final Object[] args) {\n\t\tboolean flag = cstruct.isAccessible();\n\t\ttry {\n\t\t\tif (!flag) {\n\t\t\t\tcstruct.setAccessible(true);\n\t\t\t}\n\t\t\tObject result = cstruct.newInstance(args);\n\t\t\treturn result;\n\t\t}\n\t\tcatch (InstantiationException | IllegalAccessException e) {\n\t\t\tthrow new CodeGenerationException(e);\n\t\t}\n\t\tcatch (InvocationTargetException e) {\n\t\t\tthrow new CodeGenerationException(e.getTargetException());\n\t\t}\n\t\tfinally {\n\t\t\tif (!flag) {\n\t\t\t\tcstruct.setAccessible(flag);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic static Constructor getConstructor(Class type, Class[] parameterTypes) {\n\t\ttry {\n\t\t\tConstructor constructor = type.getDeclaredConstructor(parameterTypes);\n\t\t\tconstructor.setAccessible(true);\n\t\t\treturn constructor;\n\t\t}\n\t\tcatch (NoSuchMethodException e) {\n\t\t\tthrow new CodeGenerationException(e);\n\t\t}\n\t}\n\n\tpublic static String[] getNames(Class[] classes) {\n\t\tif (classes == null) {\n\t\t\treturn null;\n\t\t}\n\t\tString[] names = new String[classes.length];\n\t\tfor (int i = 0; i < names.length; i++) {\n\t\t\tnames[i] = classes[i].getName();\n\t\t}\n\t\treturn names;\n\t}\n\n\tpublic static Class[] getClasses(Object[] objects) {\n\t\tClass[] classes = new Class[objects.length];\n\t\tfor (int i = 0; i < objects.length; i++) {\n\t\t\tclasses[i] = objects[i].getClass();\n\t\t}\n\t\treturn classes;\n\t}\n\n\tpublic static Method findNewInstance(Class iface) {\n\t\tMethod m = findInterfaceMethod(iface);\n\t\tif (!m.getName().equals(\"newInstance\")) {\n\t\t\tthrow new IllegalArgumentException(iface + \" missing newInstance method\");\n\t\t}\n\t\treturn m;\n\t}\n\n\tpublic static Method[] getPropertyMethods(PropertyDescriptor[] properties, boolean read, boolean write) {\n\t\tSet methods = new HashSet();\n\t\tfor (PropertyDescriptor pd : properties) {\n\t\t\tif (read) {\n\t\t\t\tmethods.add(pd.getReadMethod());\n\t\t\t}\n\t\t\tif (write) {\n\t\t\t\tmethods.add(pd.getWriteMethod());\n\t\t\t}\n\t\t}\n\t\tmethods.remove(null);\n\t\treturn (Method[]) methods.toArray(new Method[methods.size()]);\n\t}\n\n\tpublic static PropertyDescriptor[] getBeanProperties(Class type) {\n\t\treturn getPropertiesHelper(type, true, true);\n\t}\n\n\tpublic static PropertyDescriptor[] getBeanGetters(Class type) {\n\t\treturn getPropertiesHelper(type, true, false);\n\t}\n\n\tpublic static PropertyDescriptor[] getBeanSetters(Class type) {\n\t\treturn getPropertiesHelper(type, false, true);\n\t}\n\n\tprivate static PropertyDescriptor[] getPropertiesHelper(Class type, boolean read, boolean write) {\n\t\ttry {\n\t\t\tBeanInfo info = Introspector.getBeanInfo(type, Object.class);\n\t\t\tPropertyDescriptor[] all = info.getPropertyDescriptors();\n\t\t\tif (read && write) {\n\t\t\t\treturn all;\n\t\t\t}\n\t\t\tList properties = new ArrayList(all.length);\n\t\t\tfor (PropertyDescriptor pd : all) {\n\t\t\t\tif ((read && pd.getReadMethod() != null) ||\n\t\t\t\t\t\t(write && pd.getWriteMethod() != null)) {\n\t\t\t\t\tproperties.add(pd);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn (PropertyDescriptor[]) properties.toArray(new PropertyDescriptor[properties.size()]);\n\t\t}\n\t\tcatch (IntrospectionException e) {\n\t\t\tthrow new CodeGenerationException(e);\n\t\t}\n\t}\n\n\tpublic static Method findDeclaredMethod(final Class type,\n\t\t\tfinal String methodName, final Class[] parameterTypes)\n\t\t\tthrows NoSuchMethodException {\n\n\t\tClass cl = type;\n\t\twhile (cl != null) {\n\t\t\ttry {\n\t\t\t\treturn cl.getDeclaredMethod(methodName, parameterTypes);\n\t\t\t}\n\t\t\tcatch (NoSuchMethodException e) {\n\t\t\t\tcl = cl.getSuperclass();\n\t\t\t}\n\t\t}\n\t\tthrow new NoSuchMethodException(methodName);\n\t}\n\n\tpublic static List addAllMethods(final Class type, final List list) {\n\t\tif (type == Object.class) {\n\t\t\tlist.addAll(OBJECT_METHODS);\n\t\t}\n\t\telse {\n\t\t\tlist.addAll(java.util.Arrays.asList(type.getDeclaredMethods()));\n\t\t}\n\n\t\tClass superclass = type.getSuperclass();\n\t\tif (superclass != null) {\n\t\t\taddAllMethods(superclass, list);\n\t\t}\n\t\tClass[] interfaces = type.getInterfaces();\n\t\tfor (Class element : interfaces) {\n\t\t\taddAllMethods(element, list);\n\t\t}\n\n\t\treturn list;\n\t}\n\n\tpublic static List addAllInterfaces(Class type, List list) {\n\t\tClass superclass = type.getSuperclass();\n\t\tif (superclass != null) {\n\t\t\tlist.addAll(Arrays.asList(type.getInterfaces()));\n\t\t\taddAllInterfaces(superclass, list);\n\t\t}\n\t\treturn list;\n\t}\n\n\n\tpublic static Method findInterfaceMethod(Class iface) {\n\t\tif (!iface.isInterface()) {\n\t\t\tthrow new IllegalArgumentException(iface + \" is not an interface\");\n\t\t}\n\t\tMethod[] methods = iface.getDeclaredMethods();\n\t\tif (methods.length != 1) {\n\t\t\tthrow new IllegalArgumentException(\"expecting exactly 1 method in \" + iface);\n\t\t}\n\t\treturn methods[0];\n\t}\n\n\t// SPRING PATCH BEGIN\n\tpublic static void setGeneratedClassHandler(BiConsumer<String, byte[]> handler) {\n\t\tgeneratedClassHandler = handler;\n\t}\n\n\tpublic static Class defineClass(String className, byte[] b, ClassLoader loader) throws Exception {\n\t\treturn defineClass(className, b, loader, null, null);\n\t}\n\n\tpublic static Class defineClass(String className, byte[] b, ClassLoader loader,\n\t\t\tProtectionDomain protectionDomain) throws Exception {\n\n\t\treturn defineClass(className, b, loader, protectionDomain, null);\n\t}\n\n\t@SuppressWarnings({\"deprecation\", \"serial\"})\n\tpublic static Class defineClass(String className, byte[] b, ClassLoader loader,\n\t\t\tProtectionDomain protectionDomain, Class<?> contextClass) throws Exception {\n\n\t\tClass c = null;\n\t\tThrowable t = THROWABLE;\n\n\t\tBiConsumer<String, byte[]> handlerToUse = generatedClassHandler;\n\t\tif (handlerToUse != null) {\n\t\t\thandlerToUse.accept(className, b);\n\t\t}\n\n\t\t// Preferred option: JDK 9+ Lookup.defineClass API if ClassLoader matches\n\t\tif (contextClass != null && contextClass.getClassLoader() == loader) {\n\t\t\ttry {\n\t\t\t\tMethodHandles.Lookup lookup = MethodHandles.privateLookupIn(contextClass, MethodHandles.lookup());\n\t\t\t\tc = lookup.defineClass(b);\n\t\t\t}\n\t\t\tcatch (LinkageError | IllegalArgumentException ex) {\n\t\t\t\t// in case of plain LinkageError (class already defined)\n\t\t\t\t// or IllegalArgumentException (class in different package):\n\t\t\t\t// fall through to traditional ClassLoader.defineClass below\n\t\t\t\tt = ex;\n\t\t\t}\n\t\t\tcatch (Throwable ex) {\n\t\t\t\tthrow new CodeGenerationException(ex);\n\t\t\t}\n\t\t}\n\n\t\t// Direct defineClass attempt on the target Classloader\n\t\tif (c == null) {\n\t\t\tif (protectionDomain == null) {\n\t\t\t\tprotectionDomain = PROTECTION_DOMAIN;\n\t\t\t}\n\n\t\t\t// Look for publicDefineClass(String name, byte[] b, ProtectionDomain protectionDomain)\n\t\t\ttry {\n\t\t\t\tMethod publicDefineClass = loader.getClass().getMethod(\n\t\t\t\t\t\t\"publicDefineClass\", String.class, byte[].class, ProtectionDomain.class);\n\t\t\t\tc = (Class) publicDefineClass.invoke(loader, className, b, protectionDomain);\n\t\t\t}\n\t\t\tcatch (InvocationTargetException ex) {\n\t\t\t\tif (!(ex.getTargetException() instanceof UnsupportedOperationException)) {\n\t\t\t\t\tthrow new CodeGenerationException(ex.getTargetException());\n\t\t\t\t}\n\t\t\t\t// in case of UnsupportedOperationException, fall through\n\t\t\t\tt = ex.getTargetException();\n\t\t\t}\n\t\t\tcatch (Throwable ex) {\n\t\t\t\t// publicDefineClass method not available -> fall through\n\t\t\t\tt = ex;\n\t\t\t}\n\n\t\t\t// Classic option: protected ClassLoader.defineClass method\n\t\t\tif (c == null && classLoaderDefineClassMethod != null) {\n\t\t\t\tObject[] args = new Object[]{className, b, 0, b.length, protectionDomain};\n\t\t\t\ttry {\n\t\t\t\t\tif (!classLoaderDefineClassMethod.isAccessible()) {\n\t\t\t\t\t\tclassLoaderDefineClassMethod.setAccessible(true);\n\t\t\t\t\t}\n\t\t\t\t\tc = (Class) classLoaderDefineClassMethod.invoke(loader, args);\n\t\t\t\t}\n\t\t\t\tcatch (InvocationTargetException ex) {\n\t\t\t\t\tthrow new CodeGenerationException(ex.getTargetException());\n\t\t\t\t}\n\t\t\t\tcatch (InaccessibleObjectException ex) {\n\t\t\t\t\t// setAccessible failed with JDK 9+ InaccessibleObjectException -> fall through\n\t\t\t\t\t// Avoid through JVM startup with --add-opens=java.base/java.lang=ALL-UNNAMED\n\t\t\t\t\tt = ex;\n\t\t\t\t}\n\t\t\t\tcatch (Throwable ex) {\n\t\t\t\t\tthrow new CodeGenerationException(ex);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Fallback option: JDK 9+ Lookup.defineClass API even if ClassLoader does not match\n\t\tif (c == null && contextClass != null && contextClass.getClassLoader() != loader) {\n\t\t\ttry {\n\t\t\t\tMethodHandles.Lookup lookup = MethodHandles.privateLookupIn(contextClass, MethodHandles.lookup());\n\t\t\t\tc = lookup.defineClass(b);\n\t\t\t}\n\t\t\tcatch (LinkageError | IllegalAccessException ex) {\n\t\t\t\tthrow new CodeGenerationException(ex) {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic String getMessage() {\n\t\t\t\t\t\treturn \"ClassLoader mismatch for [\" + contextClass.getName() +\n\t\t\t\t\t\t\t\t\"]: JVM should be started with --add-opens=java.base/java.lang=ALL-UNNAMED \" +\n\t\t\t\t\t\t\t\t\"for ClassLoader.defineClass to be accessible on \" + loader.getClass().getName() +\n\t\t\t\t\t\t\t\t\"; consider co-locating the affected class in that target ClassLoader instead.\";\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t\tcatch (Throwable ex) {\n\t\t\t\tthrow new CodeGenerationException(ex);\n\t\t\t}\n\t\t}\n\n\t\t// No defineClass variant available at all?\n\t\tif (c == null) {\n\t\t\tthrow new CodeGenerationException(t) {\n\t\t\t\t@Override\n\t\t\t\tpublic String getMessage() {\n\t\t\t\t\treturn \"No compatible defineClass mechanism detected: \" +\n\t\t\t\t\t\t\t\"JVM should be started with --add-opens=java.base/java.lang=ALL-UNNAMED \" +\n\t\t\t\t\t\t\t\"for ClassLoader.defineClass to be accessible. On the module path, \" +\n\t\t\t\t\t\t\t\"you may not be able to define this CGLIB-generated class at all.\";\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\t// Force static initializers to run.\n\t\tClass.forName(className, true, loader);\n\t\treturn c;\n\t}\n\n\tpublic static void setLoadedClassHandler(Consumer<Class<?>> loadedClassHandler) {\n\t\tReflectUtils.loadedClassHandler = loadedClassHandler;\n\t}\n\n\tpublic static Class<?> loadClass(String className, ClassLoader classLoader) throws ClassNotFoundException {\n\t\t// Force static initializers to run.\n\t\tClass<?> clazz = Class.forName(className, true, classLoader);\n\t\tConsumer<Class<?>> handlerToUse = loadedClassHandler;\n\t\tif (handlerToUse != null) {\n\t\t\thandlerToUse.accept(clazz);\n\t\t}\n\t\treturn clazz;\n\t}\n\n\t// SPRING PATCH END\n\n\tpublic static int findPackageProtected(Class[] classes) {\n\t\tfor (int i = 0; i < classes.length; i++) {\n\t\t\tif (!Modifier.isPublic(classes[i].getModifiers())) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t}\n\n\tpublic static MethodInfo getMethodInfo(final Member member, final int modifiers) {\n\t\tfinal Signature sig = getSignature(member);\n\t\treturn new MethodInfo() {\n\t\t\tprivate ClassInfo ci;\n\n\t\t\t@Override\n\t\t\tpublic ClassInfo getClassInfo() {\n\t\t\t\tif (ci == null) {\n\t\t\t\t\tci = ReflectUtils.getClassInfo(member.getDeclaringClass());\n\t\t\t\t}\n\t\t\t\treturn ci;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic int getModifiers() {\n\t\t\t\treturn modifiers;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic Signature getSignature() {\n\t\t\t\treturn sig;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic Type[] getExceptionTypes() {\n\t\t\t\treturn ReflectUtils.getExceptionTypes(member);\n\t\t\t}\n\t\t};\n\t}\n\n\tpublic static MethodInfo getMethodInfo(Member member) {\n\t\treturn getMethodInfo(member, member.getModifiers());\n\t}\n\n\tpublic static ClassInfo getClassInfo(final Class clazz) {\n\t\tfinal Type type = Type.getType(clazz);\n\t\tfinal Type sc = (clazz.getSuperclass() == null) ? null : Type.getType(clazz.getSuperclass());\n\t\treturn new ClassInfo() {\n\t\t\t@Override\n\t\t\tpublic Type getType() {\n\t\t\t\treturn type;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic Type getSuperType() {\n\t\t\t\treturn sc;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic Type[] getInterfaces() {\n\t\t\t\treturn TypeUtils.getTypes(clazz.getInterfaces());\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic int getModifiers() {\n\t\t\t\treturn clazz.getModifiers();\n\t\t\t}\n\t\t};\n\t}\n\n\t// used by MethodInterceptorGenerated generated code\n\tpublic static Method[] findMethods(String[] namesAndDescriptors, Method[] methods) {\n\t\tMap map = new HashMap();\n\t\tfor (Method method : methods) {\n\t\t\tmap.put(method.getName() + Type.getMethodDescriptor(method), method);\n\t\t}\n\t\tMethod[] result = new Method[namesAndDescriptors.length / 2];\n\t\tfor (int i = 0; i < result.length; i++) {\n\t\t\tresult[i] = (Method) map.get(namesAndDescriptors[i * 2] + namesAndDescriptors[i * 2 + 1]);\n\t\t\tif (result[i] == null) {\n\t\t\t\t// TODO: error?\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.core.ReflectUtils#primitives",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils#primitives",
    "headType": "field",
    "relation": "haveType",
    "tail": "Map",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.core.ReflectUtils#transforms",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils#transforms",
    "headType": "field",
    "relation": "haveType",
    "tail": "Map",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.core.ReflectUtils#defaultLoader",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils#defaultLoader",
    "headType": "field",
    "relation": "haveType",
    "tail": "ClassLoader",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.core.ReflectUtils#classLoaderDefineClassMethod",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils#classLoaderDefineClassMethod",
    "headType": "field",
    "relation": "haveType",
    "tail": "Method",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.core.ReflectUtils#THROWABLE",
    "tailType": "field"
  }
]