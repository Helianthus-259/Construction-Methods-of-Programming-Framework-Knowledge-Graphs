[
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.SingleToMultiValueMapAdapterTests#clear()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests#clear()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests#keySet()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid keySet() {\r\n    assertThat(this.adapter.keySet()).containsExactly(\"foo\", \"qux\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.SingleToMultiValueMapAdapterTests#keySet()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests#keySet()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests#values()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid values() {\r\n    assertThat(this.adapter.values()).containsExactly(List.of(\"bar\"), List.of(\"quux\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.SingleToMultiValueMapAdapterTests#values()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests#values()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests#entrySet()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid entrySet() {\r\n    assertThat(this.adapter.entrySet()).containsExactly(entry(\"foo\", List.of(\"bar\")), entry(\"qux\", List.of(\"quux\")));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.SingleToMultiValueMapAdapterTests#entrySet()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests#entrySet()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests#forEach()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid forEach() {\r\n    MultiValueMap<String, String> seen = new LinkedMultiValueMap<>();\r\n    this.adapter.forEach(seen::put);\r\n    assertThat(seen).containsExactly(entry(\"foo\", List.of(\"bar\")), entry(\"qux\", List.of(\"quux\")));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.SingleToMultiValueMapAdapterTests#forEach()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests#forEach()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.asm",
    "tailType": "package"
  },
  {
    "head": "org.springframework.asm",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.asm.ClassReader",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.StopWatchTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.StopWatchTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.util.StopWatch.TaskInfo;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatExceptionOfType;\nimport static org.assertj.core.api.Assertions.assertThatIllegalStateException;\n\n/**\n * Tests for {@link StopWatch}.\n *\n * @author Rod Johnson\n * @author Juergen Hoeller\n * @author Sam Brannen\n */\nclass StopWatchTests {\n\n\tprivate static final String ID = \"myId\";\n\n\tprivate static final String name1 = \"Task 1\";\n\tprivate static final String name2 = \"Task 2\";\n\n\tprivate static final long duration1 = 200;\n\tprivate static final long duration2 = 100;\n\t// private static final long fudgeFactor = 100;\n\n\tprivate final StopWatch stopWatch = new StopWatch(ID);\n\n\n\t@Test\n\tvoid failureToStartBeforeGettingTimings() {\n\t\tassertThatIllegalStateException().isThrownBy(stopWatch::lastTaskInfo);\n\t}\n\n\t@Test\n\tvoid failureToStartBeforeStop() {\n\t\tassertThatIllegalStateException().isThrownBy(stopWatch::stop);\n\t}\n\n\t@Test\n\tvoid rejectsStartTwice() {\n\t\tstopWatch.start();\n\t\tassertThat(stopWatch.isRunning()).isTrue();\n\t\tstopWatch.stop();\n\t\tassertThat(stopWatch.isRunning()).isFalse();\n\n\t\tstopWatch.start();\n\t\tassertThat(stopWatch.isRunning()).isTrue();\n\t\tassertThatIllegalStateException().isThrownBy(stopWatch::start);\n\t}\n\n\t@Test\n\tvoid validUsage() throws Exception {\n\t\tassertThat(stopWatch.isRunning()).isFalse();\n\n\t\tstopWatch.start(name1);\n\t\tThread.sleep(duration1);\n\t\tassertThat(stopWatch.isRunning()).isTrue();\n\t\tassertThat(stopWatch.currentTaskName()).isEqualTo(name1);\n\t\tstopWatch.stop();\n\t\tassertThat(stopWatch.isRunning()).isFalse();\n\n\t\t/* Flaky StopWatch time assertions...\n\t\tassertThat(stopWatch.getLastTaskTimeNanos())\n\t\t\t\t.as(\"last task time in nanoseconds for task #1\")\n\t\t\t\t.isGreaterThanOrEqualTo(TimeUnit.MILLISECONDS.toNanos(duration1 - fudgeFactor))\n\t\t\t\t.isLessThanOrEqualTo(TimeUnit.MILLISECONDS.toNanos(duration1 + fudgeFactor));\n\t\tassertThat(stopWatch.getTotalTimeMillis())\n\t\t\t\t.as(\"total time in milliseconds for task #1\")\n\t\t\t\t.isGreaterThanOrEqualTo(duration1 - fudgeFactor)\n\t\t\t\t.isLessThanOrEqualTo(duration1 + fudgeFactor);\n\t\tassertThat(stopWatch.getTotalTimeSeconds())\n\t\t\t\t.as(\"total time in seconds for task #1\")\n\t\t\t\t.isGreaterThanOrEqualTo((duration1 - fudgeFactor) / 1000.0)\n\t\t\t\t.isLessThanOrEqualTo((duration1 + fudgeFactor) / 1000.0);\n\t\t*/\n\n\t\tstopWatch.start(name2);\n\t\tThread.sleep(duration2);\n\t\tassertThat(stopWatch.isRunning()).isTrue();\n\t\tassertThat(stopWatch.currentTaskName()).isEqualTo(name2);\n\t\tstopWatch.stop();\n\t\tassertThat(stopWatch.isRunning()).isFalse();\n\n\t\t/* Flaky StopWatch time assertions...\n\t\tassertThat(stopWatch.getLastTaskTimeNanos())\n\t\t\t\t.as(\"last task time in nanoseconds for task #2\")\n\t\t\t\t.isGreaterThanOrEqualTo(TimeUnit.MILLISECONDS.toNanos(duration2))\n\t\t\t\t.isLessThanOrEqualTo(TimeUnit.MILLISECONDS.toNanos(duration2 + fudgeFactor));\n\t\tassertThat(stopWatch.getTotalTimeMillis())\n\t\t\t\t.as(\"total time in milliseconds for tasks #1 and #2\")\n\t\t\t\t.isGreaterThanOrEqualTo(duration1 + duration2 - fudgeFactor)\n\t\t\t\t.isLessThanOrEqualTo(duration1 + duration2 + fudgeFactor);\n\t\tassertThat(stopWatch.getTotalTimeSeconds())\n\t\t\t\t.as(\"total time in seconds for task #2\")\n\t\t\t\t.isGreaterThanOrEqualTo((duration1 + duration2 - fudgeFactor) / 1000.0)\n\t\t\t\t.isLessThanOrEqualTo((duration1 + duration2 + fudgeFactor) / 1000.0);\n\t\t*/\n\n\t\tassertThat(stopWatch.getTaskCount()).isEqualTo(2);\n\t\tassertThat(stopWatch.prettyPrint()).contains(name1, name2);\n\t\tassertThat(stopWatch.getTaskInfo()).extracting(TaskInfo::getTaskName).containsExactly(name1, name2);\n\t\tassertThat(stopWatch.toString()).contains(ID, name1, name2);\n\t\tassertThat(stopWatch.getId()).isEqualTo(ID);\n\t}\n\n\t@Test\n\tvoid validUsageDoesNotKeepTaskList() throws Exception {\n\t\tstopWatch.setKeepTaskList(false);\n\n\t\tstopWatch.start(name1);\n\t\tThread.sleep(duration1);\n\t\tassertThat(stopWatch.currentTaskName()).isEqualTo(name1);\n\t\tstopWatch.stop();\n\n\t\tstopWatch.start(name2);\n\t\tThread.sleep(duration2);\n\t\tassertThat(stopWatch.currentTaskName()).isEqualTo(name2);\n\t\tstopWatch.stop();\n\n\t\tassertThat(stopWatch.getTaskCount()).isEqualTo(2);\n\t\tassertThat(stopWatch.prettyPrint()).contains(\"No task info kept\");\n\t\tassertThat(stopWatch.toString()).doesNotContain(name1, name2);\n\t\tassertThatExceptionOfType(UnsupportedOperationException.class)\n\t\t\t\t.isThrownBy(stopWatch::getTaskInfo)\n\t\t\t\t.withMessage(\"Task info is not being kept!\");\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.StopWatchTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.StopWatchTests#ID",
    "tailType": "field"
  }
]