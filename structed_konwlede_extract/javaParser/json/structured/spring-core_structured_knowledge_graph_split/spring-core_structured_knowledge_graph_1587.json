[
  {
    "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#serializationConfig()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#serializationConfig()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#proxyConfig()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid proxyConfig() throws IOException, JSONException {\r\n    FileNativeConfigurationWriter generator = new FileNativeConfigurationWriter(tempDir);\r\n    RuntimeHints hints = new RuntimeHints();\r\n    ProxyHints proxyHints = hints.proxies();\r\n    proxyHints.registerJdkProxy(Function.class);\r\n    proxyHints.registerJdkProxy(Function.class, Consumer.class);\r\n    generator.write(hints);\r\n    assertEquals(\"\"\"\r\n        {\r\n        \t\"reflection\": [\r\n        \t\t{ type: {\"proxy\": [ \"java.util.function.Function\" ] } },\r\n        \t\t{ type: {\"proxy\": [ \"java.util.function.Function\", \"java.util.function.Consumer\" ] } }\r\n        \t]\r\n        }\r\n        \"\"\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#proxyConfig()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#proxyConfig()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#reflectionConfig()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid reflectionConfig() throws IOException, JSONException {\r\n    FileNativeConfigurationWriter generator = new FileNativeConfigurationWriter(tempDir);\r\n    RuntimeHints hints = new RuntimeHints();\r\n    ReflectionHints reflectionHints = hints.reflection();\r\n    reflectionHints.registerType(StringDecoder.class, builder -> builder.onReachableType(String.class).withMembers(MemberCategory.ACCESS_PUBLIC_FIELDS, MemberCategory.ACCESS_DECLARED_FIELDS, MemberCategory.INVOKE_PUBLIC_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_PUBLIC_METHODS, MemberCategory.INVOKE_DECLARED_METHODS).withField(\"DEFAULT_CHARSET\").withField(\"defaultCharset\").withMethod(\"setDefaultCharset\", TypeReference.listOf(Charset.class), ExecutableMode.INVOKE));\r\n    generator.write(hints);\r\n    assertEquals(\"\"\"\r\n        {\r\n        \t\"reflection\": [\r\n        \t\t{\r\n        \t\t\t\"type\": \"org.springframework.core.codec.StringDecoder\",\r\n        \t\t\t\"condition\": { \"typeReached\": \"java.lang.String\" },\r\n        \t\t\t\"allPublicFields\": true,\r\n        \t\t\t\"allDeclaredFields\": true,\r\n        \t\t\t\"allPublicConstructors\": true,\r\n        \t\t\t\"allDeclaredConstructors\": true,\r\n        \t\t\t\"allPublicMethods\": true,\r\n        \t\t\t\"allDeclaredMethods\": true,\r\n        \t\t\t\"fields\": [\r\n        \t\t\t\t{ \"name\": \"DEFAULT_CHARSET\" },\r\n        \t\t\t\t{ \"name\": \"defaultCharset\" }\r\n        \t\t\t],\r\n        \t\t\t\"methods\": [\r\n        \t\t\t\t{ \"name\": \"setDefaultCharset\", \"parameterTypes\": [ \"java.nio.charset.Charset\" ] }\r\n        \t\t\t]\r\n        \t\t}\r\n        \t]\r\n        }\r\n        \"\"\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#reflectionConfig()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#reflectionConfig()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#jniConfig()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid jniConfig() throws IOException, JSONException {\r\n    // same format as reflection so just test basic file generation\r\n    FileNativeConfigurationWriter generator = new FileNativeConfigurationWriter(tempDir);\r\n    RuntimeHints hints = new RuntimeHints();\r\n    ReflectionHints jniHints = hints.jni();\r\n    jniHints.registerType(StringDecoder.class, builder -> builder.onReachableType(String.class));\r\n    generator.write(hints);\r\n    assertEquals(\"\"\"\r\n        {\r\n        \t\"jni\": [\r\n        \t\t{\r\n        \t\t\t\"type\": \"org.springframework.core.codec.StringDecoder\",\r\n        \t\t\t\"condition\": { \"typeReached\": \"java.lang.String\" }\r\n        \t\t}\r\n        \t]\r\n        }\"\"\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#jniConfig()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#jniConfig()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#resourceConfig()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resourceConfig() throws IOException, JSONException {\r\n    FileNativeConfigurationWriter generator = new FileNativeConfigurationWriter(tempDir);\r\n    RuntimeHints hints = new RuntimeHints();\r\n    ResourceHints resourceHints = hints.resources();\r\n    resourceHints.registerPattern(\"com/example/test.properties\");\r\n    resourceHints.registerPattern(\"com/example/another.properties\");\r\n    generator.write(hints);\r\n    assertEquals(\"\"\"\r\n        {\r\n        \t\"resources\": [\r\n        \t\t\t{\"glob\": \"com/example/test.properties\"},\r\n        \t\t\t{\"glob\": \"/\"},\r\n        \t\t\t{\"glob\": \"com\"},\r\n        \t\t\t{\"glob\": \"com/example\"},\r\n        \t\t\t{\"glob\": \"com/example/another.properties\"}\r\n        \t]\r\n        }\"\"\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#resourceConfig()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#resourceConfig()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#namespace()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid namespace() {\r\n    String groupId = \"foo.bar\";\r\n    String artifactId = \"baz\";\r\n    String filename = \"reachability-metadata.json\";\r\n    FileNativeConfigurationWriter generator = new FileNativeConfigurationWriter(tempDir, groupId, artifactId);\r\n    RuntimeHints hints = new RuntimeHints();\r\n    ResourceHints resourceHints = hints.resources();\r\n    resourceHints.registerPattern(\"com/example/test.properties\");\r\n    generator.write(hints);\r\n    Path jsonFile = tempDir.resolve(\"META-INF\").resolve(\"native-image\").resolve(groupId).resolve(artifactId).resolve(filename);\r\n    assertThat(jsonFile.toFile()).exists();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#namespace()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#namespace()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#assertEquals(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void assertEquals(String expectedString) throws IOException, JSONException {\r\n    Path jsonFile = tempDir.resolve(\"META-INF\").resolve(\"native-image\").resolve(\"reachability-metadata.json\");\r\n    String content = Files.readString(jsonFile);\r\n    JSONAssert.assertEquals(expectedString, content, JSONCompareMode.NON_EXTENSIBLE);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#assertEquals(String)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.nativex",
    "tailType": "package"
  }
]