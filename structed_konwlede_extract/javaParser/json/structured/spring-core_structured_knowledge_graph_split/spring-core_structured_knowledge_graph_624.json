[
  {
    "head": "org.springframework.cglib.core.TypeUtils#fromInternalName(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static Type fromInternalName(String name) {\r\n    // TODO; primitives?\r\n    return Type.getType(\"L\" + name + \";\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.TypeUtils#fromInternalName(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils#fromInternalNames(String[])",
    "headType": "method",
    "relation": "provide",
    "tail": "public static Type[] fromInternalNames(String[] names) {\r\n    if (names == null) {\r\n        return null;\r\n    }\r\n    Type[] types = new Type[names.length];\r\n    for (int i = 0; i < names.length; i++) {\r\n        types[i] = fromInternalName(names[i]);\r\n    }\r\n    return types;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.TypeUtils#fromInternalNames(String[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils#getStackSize(Type[])",
    "headType": "method",
    "relation": "provide",
    "tail": "public static int getStackSize(Type[] types) {\r\n    int size = 0;\r\n    for (Type type : types) {\r\n        size += type.getSize();\r\n    }\r\n    return size;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.TypeUtils#getStackSize(Type[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils#toInternalNames(Type[])",
    "headType": "method",
    "relation": "provide",
    "tail": "public static String[] toInternalNames(Type[] types) {\r\n    if (types == null) {\r\n        return null;\r\n    }\r\n    String[] names = new String[types.length];\r\n    for (int i = 0; i < types.length; i++) {\r\n        names[i] = types[i].getInternalName();\r\n    }\r\n    return names;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.TypeUtils#toInternalNames(Type[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils#parseSignature(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static Signature parseSignature(String s) {\r\n    int space = s.indexOf(' ');\r\n    int lparen = s.indexOf('(', space);\r\n    int rparen = s.indexOf(')', lparen);\r\n    String returnType = s.substring(0, space);\r\n    String methodName = s.substring(space + 1, lparen);\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append('(');\r\n    for (Iterator it = parseTypes(s, lparen + 1, rparen).iterator(); it.hasNext(); ) {\r\n        sb.append(it.next());\r\n    }\r\n    sb.append(')');\r\n    sb.append(map(returnType));\r\n    return new Signature(methodName, sb.toString());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.TypeUtils#parseSignature(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils#parseType(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static Type parseType(String s) {\r\n    return Type.getType(map(s));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.TypeUtils#parseType(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils#parseTypes(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static Type[] parseTypes(String s) {\r\n    List names = parseTypes(s, 0, s.length());\r\n    Type[] types = new Type[names.size()];\r\n    for (int i = 0; i < types.length; i++) {\r\n        types[i] = Type.getType((String) names.get(i));\r\n    }\r\n    return types;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.TypeUtils#parseTypes(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils#parseConstructor(Type[])",
    "headType": "method",
    "relation": "provide",
    "tail": "public static Signature parseConstructor(Type[] types) {\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"(\");\r\n    for (Type type : types) {\r\n        sb.append(type.getDescriptor());\r\n    }\r\n    sb.append(\")\");\r\n    sb.append(\"V\");\r\n    return new Signature(Constants.CONSTRUCTOR_NAME, sb.toString());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.TypeUtils#parseConstructor(Type[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils#parseConstructor(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static Signature parseConstructor(String sig) {\r\n    // TODO\r\n    return parseSignature(\"void <init>(\" + sig + \")\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.TypeUtils#parseConstructor(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils#parseTypes(String,int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static List parseTypes(String s, int mark, int end) {\r\n    List types = new ArrayList(5);\r\n    for (; ; ) {\r\n        int next = s.indexOf(',', mark);\r\n        if (next < 0) {\r\n            break;\r\n        }\r\n        types.add(map(s.substring(mark, next).trim()));\r\n        mark = next + 1;\r\n    }\r\n    types.add(map(s.substring(mark, end).trim()));\r\n    return types;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.TypeUtils#parseTypes(String,int,int)",
    "tailType": "method"
  }
]