[
  {
    "head": "org.springframework.util.ClassUtils#isPrimitiveWrapperArray(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Check if the given class represents an array of primitive wrappers,\r\n * i.e. Boolean, Byte, Character, Short, Integer, Long, Float, or Double.\r\n * @param clazz the class to check\r\n * @return whether the given class is a primitive wrapper array class\r\n */\r\npublic static boolean isPrimitiveWrapperArray(Class<?> clazz) {\r\n    Assert.notNull(clazz, \"Class must not be null\");\r\n    return (clazz.isArray() && isPrimitiveWrapper(clazz.componentType()));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtils#isPrimitiveWrapperArray(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtils#resolvePrimitiveIfNecessary(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Resolve the given class if it is a primitive class,\r\n * returning the corresponding primitive wrapper type instead.\r\n * @param clazz the class to check\r\n * @return the original class, or a primitive wrapper for the original primitive type\r\n */\r\n// Dataflow analysis limitation\r\n@SuppressWarnings(\"NullAway\")\r\npublic static Class<?> resolvePrimitiveIfNecessary(Class<?> clazz) {\r\n    Assert.notNull(clazz, \"Class must not be null\");\r\n    return (clazz.isPrimitive() && clazz != void.class ? primitiveTypeToWrapperMap.get(clazz) : clazz);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtils#resolvePrimitiveIfNecessary(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtils#resolvePrimitiveIfNecessary(Class<?>)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ClassUtils#isVoidType(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine if the given type represents either {@code Void} or {@code void}.\r\n * @param type the type to check\r\n * @return {@code true} if the type represents {@code Void} or {@code void}\r\n * @since 6.1.4\r\n * @see Void\r\n * @see Void#TYPE\r\n */\r\npublic static boolean isVoidType(@Nullable Class<?> type) {\r\n    return (type == void.class || type == Void.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtils#isVoidType(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtils#isSimpleValueType(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Delegate for {@link org.springframework.beans.BeanUtils#isSimpleValueType}.\r\n * Also used by {@link ObjectUtils#nullSafeConciseToString}.\r\n * <p>Check if the given type represents a common \"simple\" value type:\r\n * primitive or primitive wrapper, {@link Enum}, {@link String} or other\r\n * {@link CharSequence}, {@link Number}, {@link Date}, {@link Temporal},\r\n * {@link ZoneId}, {@link TimeZone}, {@link File}, {@link Path}, {@link URI},\r\n * {@link URL}, {@link InetAddress}, {@link Charset}, {@link Currency},\r\n * {@link Locale}, {@link UUID}, {@link Pattern}, or {@link Class}.\r\n * <p>{@code Void} and {@code void} are not considered simple value types.\r\n * @param type the type to check\r\n * @return whether the given type represents a \"simple\" value type,\r\n * suggesting value-based data binding and {@code toString} output\r\n * @since 6.1\r\n */\r\npublic static boolean isSimpleValueType(Class<?> type) {\r\n    return (!isVoidType(type) && (isPrimitiveOrWrapper(type) || Enum.class.isAssignableFrom(type) || CharSequence.class.isAssignableFrom(type) || Number.class.isAssignableFrom(type) || Date.class.isAssignableFrom(type) || Temporal.class.isAssignableFrom(type) || ZoneId.class.isAssignableFrom(type) || TimeZone.class.isAssignableFrom(type) || File.class.isAssignableFrom(type) || Path.class.isAssignableFrom(type) || Charset.class.isAssignableFrom(type) || Currency.class.isAssignableFrom(type) || InetAddress.class.isAssignableFrom(type) || URI.class == type || URL.class == type || UUID.class == type || Locale.class == type || Pattern.class == type || Class.class == type));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtils#isSimpleValueType(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtils#isAssignable(Class<?>,Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Check if the right-hand side type may be assigned to the left-hand side\r\n * type, assuming setting by reflection. Considers primitive wrapper\r\n * classes as assignable to the corresponding primitive types.\r\n * @param lhsType the target type (left-hand side (LHS) type)\r\n * @param rhsType the value type (right-hand side (RHS) type) that should\r\n * be assigned to the target type\r\n * @return {@code true} if {@code rhsType} is assignable to {@code lhsType}\r\n * @see TypeUtils#isAssignable(java.lang.reflect.Type, java.lang.reflect.Type)\r\n */\r\npublic static boolean isAssignable(Class<?> lhsType, Class<?> rhsType) {\r\n    Assert.notNull(lhsType, \"Left-hand side type must not be null\");\r\n    Assert.notNull(rhsType, \"Right-hand side type must not be null\");\r\n    if (lhsType.isAssignableFrom(rhsType)) {\r\n        return true;\r\n    }\r\n    if (lhsType.isPrimitive()) {\r\n        Class<?> resolvedPrimitive = primitiveWrapperTypeMap.get(rhsType);\r\n        return (lhsType == resolvedPrimitive);\r\n    } else {\r\n        Class<?> resolvedWrapper = primitiveTypeToWrapperMap.get(rhsType);\r\n        return (resolvedWrapper != null && lhsType.isAssignableFrom(resolvedWrapper));\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtils#isAssignable(Class<?>,Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtils#isAssignableValue(Class<?>,Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine if the given type is assignable from the given value,\r\n * assuming setting by reflection. Considers primitive wrapper classes\r\n * as assignable to the corresponding primitive types.\r\n * @param type the target type\r\n * @param value the value that should be assigned to the type\r\n * @return if the type is assignable from the value\r\n */\r\npublic static boolean isAssignableValue(Class<?> type, @Nullable Object value) {\r\n    Assert.notNull(type, \"Type must not be null\");\r\n    return (value != null ? isAssignable(type, value.getClass()) : !type.isPrimitive());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtils#isAssignableValue(Class<?>,Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtils#convertResourcePathToClassName(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Convert a \"/\"-based resource path to a \".\"-based fully qualified class name.\r\n * @param resourcePath the resource path pointing to a class\r\n * @return the corresponding fully qualified class name\r\n */\r\npublic static String convertResourcePathToClassName(String resourcePath) {\r\n    Assert.notNull(resourcePath, \"Resource path must not be null\");\r\n    return resourcePath.replace(PATH_SEPARATOR, PACKAGE_SEPARATOR);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtils#convertResourcePathToClassName(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtils#convertClassNameToResourcePath(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Convert a \".\"-based fully qualified class name to a \"/\"-based resource path.\r\n * @param className the fully qualified class name\r\n * @return the corresponding resource path, pointing to the class\r\n */\r\npublic static String convertClassNameToResourcePath(String className) {\r\n    Assert.notNull(className, \"Class name must not be null\");\r\n    return className.replace(PACKAGE_SEPARATOR, PATH_SEPARATOR);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtils#convertClassNameToResourcePath(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtils#addResourcePathToPackagePath(Class<?>,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a path suitable for use with {@code ClassLoader.getResource}\r\n * (also suitable for use with {@code Class.getResource} by prepending a\r\n * slash ('/') to the return value). Built by taking the package of the specified\r\n * class file, converting all dots ('.') to slashes ('/'), adding a trailing slash\r\n * if necessary, and concatenating the specified resource name to this.\r\n * <br/>As such, this function may be used to build a path suitable for\r\n * loading a resource file that is in the same package as a class file,\r\n * although {@link org.springframework.core.io.ClassPathResource} is usually\r\n * even more convenient.\r\n * @param clazz the Class whose package will be used as the base\r\n * @param resourceName the resource name to append. A leading slash is optional.\r\n * @return the built-up resource path\r\n * @see ClassLoader#getResource\r\n * @see Class#getResource\r\n */\r\npublic static String addResourcePathToPackagePath(Class<?> clazz, String resourceName) {\r\n    Assert.notNull(resourceName, \"Resource name must not be null\");\r\n    if (!resourceName.startsWith(\"/\")) {\r\n        return classPackageAsResourcePath(clazz) + PATH_SEPARATOR + resourceName;\r\n    }\r\n    return classPackageAsResourcePath(clazz) + resourceName;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtils#addResourcePathToPackagePath(Class<?>,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtils#classPackageAsResourcePath(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Given an input class object, return a string which consists of the\r\n * class's package name as a pathname, i.e., all dots ('.') are replaced by\r\n * slashes ('/'). Neither a leading nor trailing slash is added. The result\r\n * could be concatenated with a slash and the name of a resource and fed\r\n * directly to {@code ClassLoader.getResource()}. For it to be fed to\r\n * {@code Class.getResource} instead, a leading slash would also have\r\n * to be prepended to the returned value.\r\n * @param clazz the input class. A {@code null} value or the default\r\n * (empty) package will result in an empty string (\"\") being returned.\r\n * @return a path which represents the package name\r\n * @see ClassLoader#getResource\r\n * @see Class#getResource\r\n */\r\npublic static String classPackageAsResourcePath(@Nullable Class<?> clazz) {\r\n    if (clazz == null) {\r\n        return \"\";\r\n    }\r\n    String className = clazz.getName();\r\n    int packageEndIndex = className.lastIndexOf(PACKAGE_SEPARATOR);\r\n    if (packageEndIndex == -1) {\r\n        return \"\";\r\n    }\r\n    String packageName = className.substring(0, packageEndIndex);\r\n    return packageName.replace(PACKAGE_SEPARATOR, PATH_SEPARATOR);\r\n}",
    "tailType": "method_code"
  }
]