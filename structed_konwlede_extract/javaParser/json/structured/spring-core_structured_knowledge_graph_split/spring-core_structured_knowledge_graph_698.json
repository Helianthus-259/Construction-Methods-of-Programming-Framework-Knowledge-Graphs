[
  {
    "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#readObject(Object,String,Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Object readObject(Object obj, String name, Object oldValue) {\r\n    return oldValue;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#readObject(Object,String,Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#readObject(Object,String,Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.transform.impl",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.transform.impl",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.transform.impl.AccessFieldTransformer",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AccessFieldTransformer",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2003 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.cglib.transform.impl;\n\nimport org.springframework.asm.Type;\nimport org.springframework.cglib.core.CodeEmitter;\nimport org.springframework.cglib.core.Constants;\nimport org.springframework.cglib.core.Signature;\nimport org.springframework.cglib.core.TypeUtils;\nimport org.springframework.cglib.transform.ClassEmitterTransformer;\n\npublic class AccessFieldTransformer extends ClassEmitterTransformer {\n    private Callback callback;\n\n    public AccessFieldTransformer(Callback callback) {\n        this.callback = callback;\n    }\n\n    public interface Callback {\n        String getPropertyName(Type owner, String fieldName);\n    }\n\n    @Override\n    public void declare_field(int access, final String name, Type type, Object value) {\n        super.declare_field(access, name, type, value);\n\n        String property = TypeUtils.upperFirst(callback.getPropertyName(getClassType(), name));\n        if (property != null) {\n            CodeEmitter e;\n            e = begin_method(Constants.ACC_PUBLIC,\n                             new Signature(\"get\" + property,\n                                           type,\n                                           Constants.TYPES_EMPTY),\n                             null);\n            e.load_this();\n            e.getfield(name);\n            e.return_value();\n            e.end_method();\n\n            e = begin_method(Constants.ACC_PUBLIC,\n                             new Signature(\"set\" + property,\n                                           Type.VOID_TYPE,\n                                           new Type[]{ type }),\n                             null);\n            e.load_this();\n            e.load_arg(0);\n            e.putfield(name);\n            e.return_value();\n            e.end_method();\n        }\n    }\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AccessFieldTransformer",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.transform.impl.AccessFieldTransformer#callback",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AccessFieldTransformer#callback",
    "headType": "field",
    "relation": "haveType",
    "tail": "Callback",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AccessFieldTransformer#declare_field(int,String,Type,Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void declare_field(int access, final String name, Type type, Object value) {\r\n    super.declare_field(access, name, type, value);\r\n    String property = TypeUtils.upperFirst(callback.getPropertyName(getClassType(), name));\r\n    if (property != null) {\r\n        CodeEmitter e;\r\n        e = begin_method(Constants.ACC_PUBLIC, new Signature(\"get\" + property, type, Constants.TYPES_EMPTY), null);\r\n        e.load_this();\r\n        e.getfield(name);\r\n        e.return_value();\r\n        e.end_method();\r\n        e = begin_method(Constants.ACC_PUBLIC, new Signature(\"set\" + property, Type.VOID_TYPE, new Type[] { type }), null);\r\n        e.load_this();\r\n        e.load_arg(0);\r\n        e.putfield(name);\r\n        e.return_value();\r\n        e.end_method();\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AccessFieldTransformer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.impl.AccessFieldTransformer#declare_field(int,String,Type,Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AccessFieldTransformer#declare_field(int,String,Type,Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AccessFieldTransformer",
    "headType": "class",
    "relation": "extend",
    "tail": "ClassEmitterTransformer",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.transform.impl",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.transform.impl.Callback",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.transform.impl.Callback",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2003 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.cglib.transform.impl;\n\nimport org.springframework.asm.Type;\nimport org.springframework.cglib.core.CodeEmitter;\nimport org.springframework.cglib.core.Constants;\nimport org.springframework.cglib.core.Signature;\nimport org.springframework.cglib.core.TypeUtils;\nimport org.springframework.cglib.transform.ClassEmitterTransformer;\n\npublic class AccessFieldTransformer extends ClassEmitterTransformer {\n    private Callback callback;\n\n    public AccessFieldTransformer(Callback callback) {\n        this.callback = callback;\n    }\n\n    public interface Callback {\n        String getPropertyName(Type owner, String fieldName);\n    }\n\n    @Override\n    public void declare_field(int access, final String name, Type type, Object value) {\n        super.declare_field(access, name, type, value);\n\n        String property = TypeUtils.upperFirst(callback.getPropertyName(getClassType(), name));\n        if (property != null) {\n            CodeEmitter e;\n            e = begin_method(Constants.ACC_PUBLIC,\n                             new Signature(\"get\" + property,\n                                           type,\n                                           Constants.TYPES_EMPTY),\n                             null);\n            e.load_this();\n            e.getfield(name);\n            e.return_value();\n            e.end_method();\n\n            e = begin_method(Constants.ACC_PUBLIC,\n                             new Signature(\"set\" + property,\n                                           Type.VOID_TYPE,\n                                           new Type[]{ type }),\n                             null);\n            e.load_this();\n            e.load_arg(0);\n            e.putfield(name);\n            e.return_value();\n            e.end_method();\n        }\n    }\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.Callback#getPropertyName(Type,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "String getPropertyName(Type owner, String fieldName);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.Callback",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.impl.Callback#getPropertyName(Type,String)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.transform.impl",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.transform.impl",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.transform.impl.AddDelegateTransformer",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AddDelegateTransformer",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AddDelegateTransformer",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2003 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.cglib.transform.impl;\n\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\n\nimport org.springframework.asm.Type;\nimport org.springframework.cglib.core.CodeEmitter;\nimport org.springframework.cglib.core.CodeGenerationException;\nimport org.springframework.cglib.core.Constants;\nimport org.springframework.cglib.core.ReflectUtils;\nimport org.springframework.cglib.core.Signature;\nimport org.springframework.cglib.core.TypeUtils;\nimport org.springframework.cglib.transform.ClassEmitterTransformer;\n\n/**\n * @author Juozas Baliuka\n */\n@SuppressWarnings({\"rawtypes\", \"unchecked\"})\npublic class AddDelegateTransformer extends ClassEmitterTransformer {\n    private static final String DELEGATE = \"$CGLIB_DELEGATE\";\n    private static final Signature CSTRUCT_OBJECT =\n      TypeUtils.parseSignature(\"void <init>(Object)\");\n\n    private Class[] delegateIf;\n    private Class delegateImpl;\n    private Type delegateType;\n\n    /** Creates a new instance of AddDelegateTransformer */\n    public AddDelegateTransformer(Class delegateIf[], Class delegateImpl) {\n        try {\n            delegateImpl.getConstructor(new Class[]{ Object.class });\n            this.delegateIf = delegateIf;\n            this.delegateImpl = delegateImpl;\n            delegateType = Type.getType(delegateImpl);\n        } catch (NoSuchMethodException e) {\n            throw new CodeGenerationException(e);\n        }\n    }\n\n    @Override\n    public void begin_class(int version, int access, String className, Type superType, Type[] interfaces, String sourceFile) {\n\n        if(!TypeUtils.isInterface(access)){\n\n        Type[] all = TypeUtils.add(interfaces, TypeUtils.getTypes(delegateIf));\n        super.begin_class(version, access, className, superType, all, sourceFile);\n\n        declare_field(Constants.ACC_PRIVATE | Constants.ACC_TRANSIENT,\n                      DELEGATE,\n                      delegateType,\n                      null);\n        for (Class element : delegateIf) {\n            Method[] methods = element.getMethods();\n            for (Method method : methods) {\n                if (Modifier.isAbstract(method.getModifiers())) {\n                    addDelegate(method);\n                }\n            }\n        }\n        }else{\n           super.begin_class(version, access, className, superType, interfaces, sourceFile);\n        }\n    }\n\n    @Override\n    public CodeEmitter begin_method(int access, Signature sig, Type[] exceptions) {\n        final CodeEmitter e = super.begin_method(access, sig, exceptions);\n        if (sig.getName().equals(Constants.CONSTRUCTOR_NAME)) {\n            return new CodeEmitter(e) {\n                private boolean transformInit = true;\n                @Override\n                public void visitMethodInsn(int opcode, String owner, String name, String desc, boolean itf) {\n                    super.visitMethodInsn(opcode, owner, name, desc, itf);\n                    if (transformInit && opcode == Constants.INVOKESPECIAL) {\n                        load_this();\n                        new_instance(delegateType);\n                        dup();\n                        load_this();\n                        invoke_constructor(delegateType, CSTRUCT_OBJECT);\n                        putfield(DELEGATE);\n                        transformInit = false;\n                    }\n                }\n            };\n        }\n        return e;\n    }\n\n    private void addDelegate(Method m) {\n        Method delegate;\n        try {\n            delegate = delegateImpl.getMethod(m.getName(), m.getParameterTypes());\n            if (!delegate.getReturnType().getName().equals(m.getReturnType().getName())){\n                throw new IllegalArgumentException(\"Invalid delegate signature \" + delegate);\n            }\n        } catch (NoSuchMethodException e) {\n            throw new CodeGenerationException(e);\n        }\n\n        final Signature sig = ReflectUtils.getSignature(m);\n        Type[] exceptions = TypeUtils.getTypes(m.getExceptionTypes());\n        CodeEmitter e = super.begin_method(Constants.ACC_PUBLIC, sig, exceptions);\n        e.load_this();\n        e.getfield(DELEGATE);\n        e.load_args();\n        e.invoke_virtual(delegateType, sig);\n        e.return_value();\n        e.end_method();\n    }\n}\n",
    "tailType": "class_code"
  }
]