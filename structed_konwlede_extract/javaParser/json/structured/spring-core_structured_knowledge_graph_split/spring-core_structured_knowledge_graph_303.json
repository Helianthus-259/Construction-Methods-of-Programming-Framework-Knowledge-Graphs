[
  {
    "head": "org.springframework.util.PatternMatchUtilsTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link PatternMatchUtils}.\n *\n * @author Juergen Hoeller\n * @author Johan Gorter\n * @author Sam Brannen\n */\nclass PatternMatchUtilsTests {\n\n\t@Test\n\tvoid nullAndEmptyValues() {\n\t\tassertDoesNotMatch((String) null, null);\n\t\tassertDoesNotMatch((String) null, \"\");\n\t\tassertDoesNotMatch(\"123\", null);\n\n\t\tassertDoesNotMatch((String[]) null, null);\n\t\tassertDoesNotMatch((String[]) null, \"\");\n\t\tassertDoesNotMatch(new String[] {}, null);\n\t}\n\n\t@Test\n\tvoid trivial() {\n\t\tassertMatches(\"\", \"\");\n\t\tassertMatches(\"123\", \"123\");\n\t\tassertMatches(\"*\", \"123\");\n\n\t\tassertMatches(new String[] { \"\" }, \"\");\n\t\tassertMatches(new String[] { \"123\" }, \"123\");\n\t\tassertMatches(new String[] { \"*\" }, \"123\");\n\n\t\tassertMatches(new String[] { null, \"\" }, \"\");\n\t\tassertMatches(new String[] { null, \"123\" }, \"123\");\n\t\tassertMatches(new String[] { null, \"*\" }, \"123\");\n\t}\n\n\t@Test\n\tvoid startsWith() {\n\t\tassertMatches(\"get*\", \"getMe\");\n\t\tassertDoesNotMatch(\"get*\", \"setMe\");\n\t}\n\n\t@Test\n\tvoid endsWith() {\n\t\tassertMatches(\"*Test\", \"getMeTest\");\n\t\tassertDoesNotMatch(\"*Test\", \"setMe\");\n\t}\n\n\t@Test\n\tvoid between() {\n\t\tassertDoesNotMatch(\"*stuff*\", \"getMeTest\");\n\t\tassertMatches(\"*stuff*\", \"getstuffTest\");\n\t\tassertMatches(\"*stuff*\", \"stuffTest\");\n\t\tassertMatches(\"*stuff*\", \"getstuff\");\n\t\tassertMatches(\"*stuff*\", \"stuff\");\n\t}\n\n\t@Test\n\tvoid startsEnds() {\n\t\tassertMatches(\"on*Event\", \"onMyEvent\");\n\t\tassertMatches(\"on*Event\", \"onEvent\");\n\t\tassertDoesNotMatch(\"3*3\", \"3\");\n\t\tassertMatches(\"3*3\", \"33\");\n\t}\n\n\t@Test\n\tvoid startsEndsBetween() {\n\t\tassertMatches(\"12*45*78\", \"12345678\");\n\t\tassertDoesNotMatch(\"12*45*78\", \"123456789\");\n\t\tassertDoesNotMatch(\"12*45*78\", \"012345678\");\n\t\tassertMatches(\"12*45*78\", \"124578\");\n\t\tassertMatches(\"12*45*78\", \"1245457878\");\n\t\tassertDoesNotMatch(\"3*3*3\", \"33\");\n\t\tassertMatches(\"3*3*3\", \"333\");\n\t}\n\n\t@Test\n\tvoid ridiculous() {\n\t\tassertMatches(\"*1*2*3*\", \"0011002001010030020201030\");\n\t\tassertDoesNotMatch(\"1*2*3*4\", \"10300204\");\n\t\tassertDoesNotMatch(\"1*2*3*3\", \"10300203\");\n\t\tassertMatches(\"*1*2*3*\", \"123\");\n\t\tassertDoesNotMatch(\"*1*2*3*\", \"132\");\n\t}\n\n\t@Test\n\tvoid patternVariants() {\n\t\tassertDoesNotMatch(\"*a\", \"*\");\n\t\tassertMatches(\"*a\", \"a\");\n\t\tassertDoesNotMatch(\"*a\", \"b\");\n\t\tassertMatches(\"*a\", \"aa\");\n\t\tassertMatches(\"*a\", \"ba\");\n\t\tassertDoesNotMatch(\"*a\", \"ab\");\n\t\tassertDoesNotMatch(\"**a\", \"*\");\n\t\tassertMatches(\"**a\", \"a\");\n\t\tassertDoesNotMatch(\"**a\", \"b\");\n\t\tassertMatches(\"**a\", \"aa\");\n\t\tassertMatches(\"**a\", \"ba\");\n\t\tassertDoesNotMatch(\"**a\", \"ab\");\n\t}\n\n\tprivate void assertMatches(String pattern, String str) {\n\t\tassertThat(PatternMatchUtils.simpleMatch(pattern, str)).isTrue();\n\t}\n\n\tprivate void assertDoesNotMatch(String pattern, String str) {\n\t\tassertThat(PatternMatchUtils.simpleMatch(pattern, str)).isFalse();\n\t}\n\n\tprivate void assertMatches(String[] patterns, String str) {\n\t\tassertThat(PatternMatchUtils.simpleMatch(patterns, str)).isTrue();\n\t}\n\n\tprivate void assertDoesNotMatch(String[] patterns, String str) {\n\t\tassertThat(PatternMatchUtils.simpleMatch(patterns, str)).isFalse();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.PatternMatchUtilsTests#nullAndEmptyValues()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nullAndEmptyValues() {\r\n    assertDoesNotMatch((String) null, null);\r\n    assertDoesNotMatch((String) null, \"\");\r\n    assertDoesNotMatch(\"123\", null);\r\n    assertDoesNotMatch((String[]) null, null);\r\n    assertDoesNotMatch((String[]) null, \"\");\r\n    assertDoesNotMatch(new String[] ;, null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.PatternMatchUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PatternMatchUtilsTests#nullAndEmptyValues()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.PatternMatchUtilsTests#nullAndEmptyValues()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.PatternMatchUtilsTests#trivial()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid trivial() {\r\n    assertMatches(\"\", \"\");\r\n    assertMatches(\"123\", \"123\");\r\n    assertMatches(\"*\", \"123\");\r\n    assertMatches(new String[] { \"\" }, \"\");\r\n    assertMatches(new String[] { \"123\" }, \"123\");\r\n    assertMatches(new String[] { \"*\" }, \"123\");\r\n    assertMatches(new String[] { null, \"\" }, \"\");\r\n    assertMatches(new String[] { null, \"123\" }, \"123\");\r\n    assertMatches(new String[] { null, \"*\" }, \"123\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.PatternMatchUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PatternMatchUtilsTests#trivial()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.PatternMatchUtilsTests#trivial()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.PatternMatchUtilsTests#startsWith()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid startsWith() {\r\n    assertMatches(\"get*\", \"getMe\");\r\n    assertDoesNotMatch(\"get*\", \"setMe\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.PatternMatchUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PatternMatchUtilsTests#startsWith()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.PatternMatchUtilsTests#startsWith()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.PatternMatchUtilsTests#endsWith()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid endsWith() {\r\n    assertMatches(\"*Test\", \"getMeTest\");\r\n    assertDoesNotMatch(\"*Test\", \"setMe\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.PatternMatchUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PatternMatchUtilsTests#endsWith()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.PatternMatchUtilsTests#endsWith()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.PatternMatchUtilsTests#between()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid between() {\r\n    assertDoesNotMatch(\"*stuff*\", \"getMeTest\");\r\n    assertMatches(\"*stuff*\", \"getstuffTest\");\r\n    assertMatches(\"*stuff*\", \"stuffTest\");\r\n    assertMatches(\"*stuff*\", \"getstuff\");\r\n    assertMatches(\"*stuff*\", \"stuff\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.PatternMatchUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PatternMatchUtilsTests#between()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.PatternMatchUtilsTests#between()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.PatternMatchUtilsTests#startsEnds()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid startsEnds() {\r\n    assertMatches(\"on*Event\", \"onMyEvent\");\r\n    assertMatches(\"on*Event\", \"onEvent\");\r\n    assertDoesNotMatch(\"3*3\", \"3\");\r\n    assertMatches(\"3*3\", \"33\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.PatternMatchUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PatternMatchUtilsTests#startsEnds()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.PatternMatchUtilsTests#startsEnds()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.PatternMatchUtilsTests#startsEndsBetween()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid startsEndsBetween() {\r\n    assertMatches(\"12*45*78\", \"12345678\");\r\n    assertDoesNotMatch(\"12*45*78\", \"123456789\");\r\n    assertDoesNotMatch(\"12*45*78\", \"012345678\");\r\n    assertMatches(\"12*45*78\", \"124578\");\r\n    assertMatches(\"12*45*78\", \"1245457878\");\r\n    assertDoesNotMatch(\"3*3*3\", \"33\");\r\n    assertMatches(\"3*3*3\", \"333\");\r\n}",
    "tailType": "method_code"
  }
]