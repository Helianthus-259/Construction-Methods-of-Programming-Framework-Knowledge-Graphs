[
  {
    "head": "org.springframework.core.serializer.support.SerializationDelegate#serializer",
    "headType": "field",
    "relation": "haveType",
    "tail": "Serializer<Object>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.serializer.support.SerializationDelegate",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.serializer.support.SerializationDelegate#deserializer",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.serializer.support.SerializationDelegate#deserializer",
    "headType": "field",
    "relation": "haveType",
    "tail": "Deserializer<Object>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.serializer.support.SerializationDelegate#serialize(Object,OutputStream)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void serialize(Object object, OutputStream outputStream) throws IOException {\r\n    this.serializer.serialize(object, outputStream);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.serializer.support.SerializationDelegate",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.serializer.support.SerializationDelegate#serialize(Object,OutputStream)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.serializer.support.SerializationDelegate#serialize(Object,OutputStream)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.serializer.support.SerializationDelegate#deserialize(InputStream)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Object deserialize(InputStream inputStream) throws IOException {\r\n    return this.deserializer.deserialize(inputStream);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.serializer.support.SerializationDelegate",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.serializer.support.SerializationDelegate#deserialize(InputStream)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.serializer.support.SerializationDelegate#deserialize(InputStream)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.serializer.support",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.serializer.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.serializer.support.SerializationFailedException",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.serializer.support.SerializationFailedException",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.serializer.support.SerializationFailedException",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2012 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.serializer.support;\n\nimport org.springframework.core.NestedRuntimeException;\n\n/**\n * Wrapper for the native IOException (or similar) when a\n * {@link org.springframework.core.serializer.Serializer} or\n * {@link org.springframework.core.serializer.Deserializer} failed.\n * Thrown by {@link SerializingConverter} and {@link DeserializingConverter}.\n *\n * @author Gary Russell\n * @author Juergen Hoeller\n * @since 3.0.5\n */\n@SuppressWarnings(\"serial\")\npublic class SerializationFailedException extends NestedRuntimeException {\n\n\t/**\n\t * Construct a {@code SerializationException} with the specified detail message.\n\t * @param message the detail message\n\t */\n\tpublic SerializationFailedException(String message) {\n\t\tsuper(message);\n\t}\n\n\t/**\n\t * Construct a {@code SerializationException} with the specified detail message\n\t * and nested exception.\n\t * @param message the detail message\n\t * @param cause the nested exception\n\t */\n\tpublic SerializationFailedException(String message, Throwable cause) {\n\t\tsuper(message, cause);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.serializer.support.SerializationFailedException",
    "headType": "class",
    "relation": "extend",
    "tail": "NestedRuntimeException",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.serializer.support",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.serializer.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.serializer.support.SerializingConverter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.serializer.support.SerializingConverter",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.serializer.support;\n\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.core.serializer.DefaultSerializer;\nimport org.springframework.core.serializer.Serializer;\nimport org.springframework.util.Assert;\n\n/**\n * A {@link Converter} that delegates to a\n * {@link org.springframework.core.serializer.Serializer}\n * to convert an object to a byte array.\n *\n * @author Gary Russell\n * @author Mark Fisher\n * @since 3.0.5\n */\npublic class SerializingConverter implements Converter<Object, byte[]> {\n\n\tprivate final Serializer<Object> serializer;\n\n\n\t/**\n\t * Create a default {@code SerializingConverter} that uses standard Java serialization.\n\t */\n\tpublic SerializingConverter() {\n\t\tthis.serializer = new DefaultSerializer();\n\t}\n\n\t/**\n\t * Create a {@code SerializingConverter} that delegates to the provided {@link Serializer}.\n\t */\n\tpublic SerializingConverter(Serializer<Object> serializer) {\n\t\tAssert.notNull(serializer, \"Serializer must not be null\");\n\t\tthis.serializer = serializer;\n\t}\n\n\n\t/**\n\t * Serializes the source object and returns the byte array result.\n\t */\n\t@Override\n\tpublic byte[] convert(Object source) {\n\t\ttry {\n\t\t\treturn this.serializer.serializeToByteArray(source);\n\t\t}\n\t\tcatch (Throwable ex) {\n\t\t\tthrow new SerializationFailedException(\"Failed to serialize object using \" +\n\t\t\t\t\tthis.serializer.getClass().getSimpleName(), ex);\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.serializer.support.SerializingConverter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.serializer.support.SerializingConverter#serializer",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.serializer.support.SerializingConverter#serializer",
    "headType": "field",
    "relation": "haveType",
    "tail": "Serializer<Object>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.serializer.support.SerializingConverter#convert(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Serializes the source object and returns the byte array result.\r\n */\r\n@Override\r\npublic byte[] convert(Object source) {\r\n    try {\r\n        return this.serializer.serializeToByteArray(source);\r\n    } catch (Throwable ex) {\r\n        throw new SerializationFailedException(\"Failed to serialize object using \" + this.serializer.getClass().getSimpleName(), ex);\r\n    }\r\n}",
    "tailType": "method_code"
  }
]