[
  {
    "head": "org.springframework.core.TypeVariableMapVariableResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.TypeVariableMapVariableResolver#resolveVariable(TypeVariable<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.TypeVariableMapVariableResolver#resolveVariable(TypeVariable<?>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.TypeVariableMapVariableResolver#resolveVariable(TypeVariable<?>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.TypeVariableMapVariableResolver#getSource()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Object getSource() {\r\n    return this.typeVariableMap;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.TypeVariableMapVariableResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.TypeVariableMapVariableResolver#getSource()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.TypeVariableMapVariableResolver#getSource()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.InfrastructureProxy",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.InfrastructureProxy",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2012 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core;\n\n/**\n * Interface to be implemented by transparent resource proxies that need to be\n * considered as equal to the underlying resource, for example for consistent\n * lookup key comparisons. Note that this interface does imply such special\n * semantics and does not constitute a general-purpose mixin!\n *\n * <p>Such wrappers will automatically be unwrapped for key comparisons in\n * {@link org.springframework.transaction.support.TransactionSynchronizationManager}.\n *\n * <p>Only fully transparent proxies, for example, for redirection or service lookups,\n * are supposed to implement this interface. Proxies that decorate the target\n * object with new behavior, such as AOP proxies, do <i>not</i> qualify here!\n *\n * @author Juergen Hoeller\n * @since 2.5.4\n * @see org.springframework.transaction.support.TransactionSynchronizationManager\n */\npublic interface InfrastructureProxy {\n\n\t/**\n\t * Return the underlying resource (never {@code null}).\n\t */\n\tObject getWrappedObject();\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.InfrastructureProxy#getWrappedObject()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the underlying resource (never {@code null}).\r\n */\r\nObject getWrappedObject();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.InfrastructureProxy",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.InfrastructureProxy#getWrappedObject()",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.io",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.io",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.AbstractFileResolvingResource",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.AbstractFileResolvingResource",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.net.HttpURLConnection;\nimport java.net.JarURLConnection;\nimport java.net.URI;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.nio.channels.FileChannel;\nimport java.nio.channels.ReadableByteChannel;\nimport java.nio.file.NoSuchFileException;\nimport java.nio.file.StandardOpenOption;\nimport java.util.jar.JarEntry;\n\nimport org.springframework.util.ResourceUtils;\n\n/**\n * Abstract base class for resources which resolve URLs into File references,\n * such as {@link UrlResource} or {@link ClassPathResource}.\n *\n * <p>Detects the \"file\" protocol as well as the JBoss \"vfs\" protocol in URLs,\n * resolving file system references accordingly.\n *\n * @author Juergen Hoeller\n * @since 3.0\n */\npublic abstract class AbstractFileResolvingResource extends AbstractResource {\n\n\t@Override\n\tpublic boolean exists() {\n\t\ttry {\n\t\t\tURL url = getURL();\n\t\t\tif (ResourceUtils.isFileURL(url)) {\n\t\t\t\t// Proceed with file system resolution\n\t\t\t\treturn getFile().exists();\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Try a URL connection content-length header\n\t\t\t\tURLConnection con = url.openConnection();\n\t\t\t\tcustomizeConnection(con);\n\t\t\t\tHttpURLConnection httpCon = (con instanceof HttpURLConnection huc ? huc : null);\n\t\t\t\tif (httpCon != null) {\n\t\t\t\t\thttpCon.setRequestMethod(\"HEAD\");\n\t\t\t\t\tint code = httpCon.getResponseCode();\n\t\t\t\t\tif (code == HttpURLConnection.HTTP_OK) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\telse if (code == HttpURLConnection.HTTP_NOT_FOUND) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\telse if (code == HttpURLConnection.HTTP_BAD_METHOD) {\n\t\t\t\t\t\tcon = url.openConnection();\n\t\t\t\t\t\tcustomizeConnection(con);\n\t\t\t\t\t\tif (con instanceof HttpURLConnection newHttpCon) {\n\t\t\t\t\t\t\tcode = newHttpCon.getResponseCode();\n\t\t\t\t\t\t\tif (code == HttpURLConnection.HTTP_OK) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (code == HttpURLConnection.HTTP_NOT_FOUND) {\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\thttpCon = newHttpCon;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (con.getContentLengthLong() > 0) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tif (httpCon != null) {\n\t\t\t\t\t// No HTTP OK status, and no content-length header: give up\n\t\t\t\t\thttpCon.disconnect();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// Fall back to stream existence: can we open the stream?\n\t\t\t\t\tgetInputStream().close();\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t@Override\n\tpublic boolean isReadable() {\n\t\ttry {\n\t\t\treturn checkReadable(getURL());\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tboolean checkReadable(URL url) {\n\t\ttry {\n\t\t\tif (ResourceUtils.isFileURL(url)) {\n\t\t\t\t// Proceed with file system resolution\n\t\t\t\tFile file = getFile();\n\t\t\t\treturn (file.canRead() && !file.isDirectory());\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Try InputStream resolution for jar resources\n\t\t\t\tURLConnection con = url.openConnection();\n\t\t\t\tcustomizeConnection(con);\n\t\t\t\tif (con instanceof HttpURLConnection httpCon) {\n\t\t\t\t\thttpCon.setRequestMethod(\"HEAD\");\n\t\t\t\t\tint code = httpCon.getResponseCode();\n\t\t\t\t\tif (code == HttpURLConnection.HTTP_BAD_METHOD) {\n\t\t\t\t\t\tcon = url.openConnection();\n\t\t\t\t\t\tcustomizeConnection(con);\n\t\t\t\t\t\tif (!(con instanceof HttpURLConnection newHttpCon)) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcode = newHttpCon.getResponseCode();\n\t\t\t\t\t\thttpCon = newHttpCon;\n\t\t\t\t\t}\n\t\t\t\t\tif (code != HttpURLConnection.HTTP_OK) {\n\t\t\t\t\t\thttpCon.disconnect();\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (con instanceof JarURLConnection jarCon) {\n\t\t\t\t\tJarEntry jarEntry = jarCon.getJarEntry();\n\t\t\t\t\tif (jarEntry == null) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\treturn !jarEntry.isDirectory();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlong contentLength = con.getContentLengthLong();\n\t\t\t\tif (contentLength > 0) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\telse if (contentLength == 0) {\n\t\t\t\t\t// Empty file or directory -> not considered readable...\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// Fall back to stream existence: can we open the stream?\n\t\t\t\t\tgetInputStream().close();\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t@Override\n\tpublic boolean isFile() {\n\t\ttry {\n\t\t\tURL url = getURL();\n\t\t\tif (url.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {\n\t\t\t\treturn VfsResourceDelegate.getResource(url).isFile();\n\t\t\t}\n\t\t\treturn ResourceUtils.URL_PROTOCOL_FILE.equals(url.getProtocol());\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * This implementation returns a File reference for the underlying class path\n\t * resource, provided that it refers to a file in the file system.\n\t * @see org.springframework.util.ResourceUtils#getFile(java.net.URL, String)\n\t */\n\t@Override\n\tpublic File getFile() throws IOException {\n\t\tURL url = getURL();\n\t\tif (url.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {\n\t\t\treturn VfsResourceDelegate.getResource(url).getFile();\n\t\t}\n\t\treturn ResourceUtils.getFile(url, getDescription());\n\t}\n\n\t/**\n\t * This implementation determines the underlying File\n\t * (or jar file, in case of a resource in a jar/zip).\n\t */\n\t@Override\n\tprotected File getFileForLastModifiedCheck() throws IOException {\n\t\tURL url = getURL();\n\t\tif (ResourceUtils.isJarURL(url)) {\n\t\t\tURL actualUrl = ResourceUtils.extractArchiveURL(url);\n\t\t\tif (actualUrl.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {\n\t\t\t\treturn VfsResourceDelegate.getResource(actualUrl).getFile();\n\t\t\t}\n\t\t\treturn ResourceUtils.getFile(actualUrl, \"Jar URL\");\n\t\t}\n\t\telse {\n\t\t\treturn getFile();\n\t\t}\n\t}\n\n\t/**\n\t * Determine whether the given {@link URI} represents a file in a file system.\n\t * @since 5.0\n\t * @see #getFile(URI)\n\t */\n\tprotected boolean isFile(URI uri) {\n\t\ttry {\n\t\t\tif (uri.getScheme().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {\n\t\t\t\treturn VfsResourceDelegate.getResource(uri).isFile();\n\t\t\t}\n\t\t\treturn ResourceUtils.URL_PROTOCOL_FILE.equals(uri.getScheme());\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * This implementation returns a File reference for the given URI-identified\n\t * resource, provided that it refers to a file in the file system.\n\t * @see org.springframework.util.ResourceUtils#getFile(java.net.URI, String)\n\t */\n\tprotected File getFile(URI uri) throws IOException {\n\t\tif (uri.getScheme().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {\n\t\t\treturn VfsResourceDelegate.getResource(uri).getFile();\n\t\t}\n\t\treturn ResourceUtils.getFile(uri, getDescription());\n\t}\n\n\t/**\n\t * This implementation returns a FileChannel for the given URI-identified\n\t * resource, provided that it refers to a file in the file system.\n\t * @since 5.0\n\t * @see #getFile()\n\t */\n\t@Override\n\tpublic ReadableByteChannel readableChannel() throws IOException {\n\t\ttry {\n\t\t\t// Try file system channel\n\t\t\treturn FileChannel.open(getFile().toPath(), StandardOpenOption.READ);\n\t\t}\n\t\tcatch (FileNotFoundException | NoSuchFileException ex) {\n\t\t\t// Fall back to InputStream adaptation in superclass\n\t\t\treturn super.readableChannel();\n\t\t}\n\t}\n\n\t@Override\n\tpublic long contentLength() throws IOException {\n\t\tURL url = getURL();\n\t\tif (ResourceUtils.isFileURL(url)) {\n\t\t\t// Proceed with file system resolution\n\t\t\tFile file = getFile();\n\t\t\tlong length = file.length();\n\t\t\tif (length == 0L && !file.exists()) {\n\t\t\t\tthrow new FileNotFoundException(getDescription() +\n\t\t\t\t\t\t\" cannot be resolved in the file system for checking its content length\");\n\t\t\t}\n\t\t\treturn length;\n\t\t}\n\t\telse {\n\t\t\t// Try a URL connection content-length header\n\t\t\tURLConnection con = url.openConnection();\n\t\t\tcustomizeConnection(con);\n\t\t\tif (con instanceof HttpURLConnection httpCon) {\n\t\t\t\thttpCon.setRequestMethod(\"HEAD\");\n\t\t\t}\n\t\t\tlong length = con.getContentLengthLong();\n\t\t\tif (length <= 0 && con instanceof HttpURLConnection httpCon &&\n\t\t\t\t\thttpCon.getResponseCode() == HttpURLConnection.HTTP_BAD_METHOD) {\n\t\t\t\tcon = url.openConnection();\n\t\t\t\tcustomizeConnection(con);\n\t\t\t\tlength = con.getContentLengthLong();\n\t\t\t}\n\t\t\treturn length;\n\t\t}\n\t}\n\n\t@Override\n\tpublic long lastModified() throws IOException {\n\t\tURL url = getURL();\n\t\tboolean fileCheck = false;\n\t\tif (ResourceUtils.isFileURL(url) || ResourceUtils.isJarURL(url)) {\n\t\t\t// Proceed with file system resolution\n\t\t\tfileCheck = true;\n\t\t\ttry {\n\t\t\t\tFile fileToCheck = getFileForLastModifiedCheck();\n\t\t\t\tlong lastModified = fileToCheck.lastModified();\n\t\t\t\tif (lastModified > 0L || fileToCheck.exists()) {\n\t\t\t\t\treturn lastModified;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (FileNotFoundException ex) {\n\t\t\t\t// Defensively fall back to URL connection check instead\n\t\t\t}\n\t\t}\n\t\t// Try a URL connection last-modified header\n\t\tURLConnection con = url.openConnection();\n\t\tcustomizeConnection(con);\n\t\tif (con instanceof HttpURLConnection httpCon) {\n\t\t\thttpCon.setRequestMethod(\"HEAD\");\n\t\t}\n\t\tlong lastModified = con.getLastModified();\n\t\tif (lastModified == 0) {\n\t\t\tif (con instanceof HttpURLConnection httpCon &&\n\t\t\t\t\thttpCon.getResponseCode() == HttpURLConnection.HTTP_BAD_METHOD) {\n\t\t\t\tcon = url.openConnection();\n\t\t\t\tcustomizeConnection(con);\n\t\t\t\tlastModified = con.getLastModified();\n\t\t\t}\n\t\t\tif (fileCheck && con.getContentLengthLong() <= 0) {\n\t\t\t\tthrow new FileNotFoundException(getDescription() +\n\t\t\t\t\t\t\" cannot be resolved in the file system for checking its last-modified timestamp\");\n\t\t\t}\n\t\t}\n\t\treturn lastModified;\n\t}\n\n\t/**\n\t * Customize the given {@link URLConnection} before fetching the resource.\n\t * <p>Calls {@link ResourceUtils#useCachesIfNecessary(URLConnection)} and\n\t * delegates to {@link #customizeConnection(HttpURLConnection)} if possible.\n\t * Can be overridden in subclasses.\n\t * @param con the URLConnection to customize\n\t * @throws IOException if thrown from URLConnection methods\n\t */\n\tprotected void customizeConnection(URLConnection con) throws IOException {\n\t\tResourceUtils.useCachesIfNecessary(con);\n\t\tif (con instanceof HttpURLConnection httpConn) {\n\t\t\tcustomizeConnection(httpConn);\n\t\t}\n\t}\n\n\t/**\n\t * Customize the given {@link HttpURLConnection} before fetching the resource.\n\t * <p>Can be overridden in subclasses for configuring request headers and timeouts.\n\t * @param con the HttpURLConnection to customize\n\t * @throws IOException if thrown from HttpURLConnection methods\n\t */\n\tprotected void customizeConnection(HttpURLConnection con) throws IOException {\n\t}\n\n\n\t/**\n\t * Inner delegate class, avoiding a hard JBoss VFS API dependency at runtime.\n\t */\n\tprivate static class VfsResourceDelegate {\n\n\t\tpublic static Resource getResource(URL url) throws IOException {\n\t\t\treturn new VfsResource(VfsUtils.getRoot(url));\n\t\t}\n\n\t\tpublic static Resource getResource(URI uri) throws IOException {\n\t\t\treturn new VfsResource(VfsUtils.getRoot(uri));\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.AbstractFileResolvingResource#exists()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean exists() {\r\n    try {\r\n        URL url = getURL();\r\n        if (ResourceUtils.isFileURL(url)) {\r\n            // Proceed with file system resolution\r\n            return getFile().exists();\r\n        } else {\r\n            // Try a URL connection content-length header\r\n            URLConnection con = url.openConnection();\r\n            customizeConnection(con);\r\n            HttpURLConnection httpCon = (con instanceof HttpURLConnection huc ? huc : null);\r\n            if (httpCon != null) {\r\n                httpCon.setRequestMethod(\"HEAD\");\r\n                int code = httpCon.getResponseCode();\r\n                if (code == HttpURLConnection.HTTP_OK) {\r\n                    return true;\r\n                } else if (code == HttpURLConnection.HTTP_NOT_FOUND) {\r\n                    return false;\r\n                } else if (code == HttpURLConnection.HTTP_BAD_METHOD) {\r\n                    con = url.openConnection();\r\n                    customizeConnection(con);\r\n                    if (con instanceof HttpURLConnection newHttpCon) {\r\n                        code = newHttpCon.getResponseCode();\r\n                        if (code == HttpURLConnection.HTTP_OK) {\r\n                            return true;\r\n                        } else if (code == HttpURLConnection.HTTP_NOT_FOUND) {\r\n                            return false;\r\n                        }\r\n                        httpCon = newHttpCon;\r\n                    }\r\n                }\r\n            }\r\n            if (con.getContentLengthLong() > 0) {\r\n                return true;\r\n            }\r\n            if (httpCon != null) {\r\n                // No HTTP OK status, and no content-length header: give up\r\n                httpCon.disconnect();\r\n                return false;\r\n            } else {\r\n                // Fall back to stream existence: can we open the stream?\r\n                getInputStream().close();\r\n                return true;\r\n            }\r\n        }\r\n    } catch (IOException ex) {\r\n        return false;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.AbstractFileResolvingResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.AbstractFileResolvingResource#exists()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.AbstractFileResolvingResource#exists()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.AbstractFileResolvingResource#isReadable()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean isReadable() {\r\n    try {\r\n        return checkReadable(getURL());\r\n    } catch (IOException ex) {\r\n        return false;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.AbstractFileResolvingResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.AbstractFileResolvingResource#isReadable()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.AbstractFileResolvingResource#isReadable()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  }
]