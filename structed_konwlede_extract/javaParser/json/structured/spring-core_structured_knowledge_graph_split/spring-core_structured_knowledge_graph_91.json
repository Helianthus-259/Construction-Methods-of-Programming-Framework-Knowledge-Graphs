[
  {
    "head": "org.springframework.aot.generate",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.generate.MethodName",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.generate.MethodName",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.generate;\n\nimport java.util.Arrays;\nimport java.util.stream.Collectors;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.util.Assert;\nimport org.springframework.util.StringUtils;\n\n/**\n * A camel-case method name that can be built from distinct parts.\n *\n * @author Phillip Webb\n * @since 6.0\n */\nfinal class MethodName {\n\n\tprivate static final String[] PREFIXES = { \"get\", \"set\", \"is\" };\n\n\t/**\n\t * An empty method name.\n\t */\n\tpublic static final MethodName NONE = of();\n\n\tprivate final String value;\n\n\n\tprivate MethodName(String value) {\n\t\tthis.value = value;\n\t}\n\n\n\t/**\n\t * Create a new method name from the specific parts. The returned name will\n\t * be in camel-case and will only contain valid characters from the parts.\n\t * @param parts the parts the form the name\n\t * @return a method name instance\n\t */\n\tstatic MethodName of(String... parts) {\n\t\tAssert.notNull(parts, \"'parts' must not be null\");\n\t\treturn new MethodName(join(parts));\n\t}\n\n\t/**\n\t * Create a new method name by concatenating the specified name to this name.\n\t * @param name the name to concatenate\n\t * @return a new method name instance\n\t */\n\tMethodName and(MethodName name) {\n\t\tAssert.notNull(name, \"'name' must not be null\");\n\t\treturn and(name.value);\n\t}\n\n\t/**\n\t * Create a new method name by concatenating the specified parts to this name.\n\t * @param parts the parts to concatenate\n\t * @return a new method name instance\n\t */\n\tMethodName and(String... parts) {\n\t\tAssert.notNull(parts, \"'parts' must not be null\");\n\t\tString joined = join(parts);\n\t\tString prefix = getPrefix(joined);\n\t\tString suffix = joined.substring(prefix.length());\n\t\treturn of(prefix, this.value, suffix);\n\t}\n\n\tprivate String getPrefix(String name) {\n\t\tfor (String candidate : PREFIXES) {\n\t\t\tif (name.startsWith(candidate)) {\n\t\t\t\treturn candidate;\n\t\t\t}\n\t\t}\n\t\treturn \"\";\n\t}\n\n\n\t@Override\n\tpublic boolean equals(@Nullable Object other) {\n\t\treturn (this == other || (other instanceof MethodName that && this.value.equals(that.value)));\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\treturn this.value.hashCode();\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn (!StringUtils.hasLength(this.value)) ? \"$$aot\" : this.value ;\n\t}\n\n\n\tprivate static String join(String[] parts) {\n\t\treturn StringUtils.uncapitalize(Arrays.stream(parts).map(MethodName::clean)\n\t\t\t\t.map(StringUtils::capitalize).collect(Collectors.joining()));\n\t}\n\n\tprivate static String clean(@Nullable String part) {\n\t\tchar[] chars = (part != null) ? part.toCharArray() : new char[0];\n\t\tStringBuilder name = new StringBuilder(chars.length);\n\t\tboolean uppercase = false;\n\t\tfor (char ch : chars) {\n\t\t\tchar outputChar = (!uppercase ? ch : Character.toUpperCase(ch));\n\t\t\tname.append((!Character.isLetter(ch)) ? \"\" : outputChar);\n\t\t\tuppercase = (ch == '.');\n\t\t}\n\t\treturn name.toString();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.generate.MethodName",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.generate.MethodName#PREFIXES",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.generate.MethodName#PREFIXES",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.generate.MethodName",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.generate.MethodName#NONE",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.generate.MethodName#NONE",
    "headType": "field",
    "relation": "haveType",
    "tail": "MethodName",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.generate.MethodName",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.generate.MethodName#value",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.generate.MethodName#value",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.generate.MethodName#of(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a new method name from the specific parts. The returned name will\r\n * be in camel-case and will only contain valid characters from the parts.\r\n * @param parts the parts the form the name\r\n * @return a method name instance\r\n */\r\nstatic MethodName of(String... parts) {\r\n    Assert.notNull(parts, \"'parts' must not be null\");\r\n    return new MethodName(join(parts));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.MethodName",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.MethodName#of(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.MethodName#and(MethodName)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a new method name by concatenating the specified name to this name.\r\n * @param name the name to concatenate\r\n * @return a new method name instance\r\n */\r\nMethodName and(MethodName name) {\r\n    Assert.notNull(name, \"'name' must not be null\");\r\n    return and(name.value);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.MethodName",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.MethodName#and(MethodName)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.MethodName#and(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a new method name by concatenating the specified parts to this name.\r\n * @param parts the parts to concatenate\r\n * @return a new method name instance\r\n */\r\nMethodName and(String... parts) {\r\n    Assert.notNull(parts, \"'parts' must not be null\");\r\n    String joined = join(parts);\r\n    String prefix = getPrefix(joined);\r\n    String suffix = joined.substring(prefix.length());\r\n    return of(prefix, this.value, suffix);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.MethodName",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.MethodName#and(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.MethodName#getPrefix(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private String getPrefix(String name) {\r\n    for (String candidate : PREFIXES) {\r\n        if (name.startsWith(candidate)) {\r\n            return candidate;\r\n        }\r\n    }\r\n    return \"\";\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.MethodName",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.MethodName#getPrefix(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.MethodName#equals(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean equals(@Nullable Object other) {\r\n    return (this == other || (other instanceof MethodName that && this.value.equals(that.value)));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.MethodName",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.MethodName#equals(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.MethodName#equals(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.MethodName#hashCode()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int hashCode() {\r\n    return this.value.hashCode();\r\n}",
    "tailType": "method_code"
  }
]