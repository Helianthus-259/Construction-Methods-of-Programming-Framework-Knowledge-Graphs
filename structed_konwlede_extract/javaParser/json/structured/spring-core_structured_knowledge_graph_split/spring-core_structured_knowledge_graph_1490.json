[
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.DefaultMethodReferenceTests#toCodeBlockWithStaticMethodRequiresDeclaringClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests#toCodeBlockWithStaticMethodRequiresDeclaringClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests#toInvokeCodeBlockWithNullDeclaringClassAndTargetClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid toInvokeCodeBlockWithNullDeclaringClassAndTargetClass() {\r\n    MethodSpec method = createTestMethod(\"methodName\", new TypeName[0]);\r\n    MethodReference methodReference = new DefaultMethodReference(method, null);\r\n    assertThat(methodReference.toInvokeCodeBlock(ArgumentCodeGenerator.none(), TEST_CLASS_NAME)).isEqualTo(CodeBlock.of(\"methodName()\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.DefaultMethodReferenceTests#toInvokeCodeBlockWithNullDeclaringClassAndTargetClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests#toInvokeCodeBlockWithNullDeclaringClassAndTargetClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests#toInvokeCodeBlockWithNullDeclaringClassAndNullTargetClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid toInvokeCodeBlockWithNullDeclaringClassAndNullTargetClass() {\r\n    MethodSpec method = createTestMethod(\"methodName\", new TypeName[0]);\r\n    MethodReference methodReference = new DefaultMethodReference(method, null);\r\n    assertThat(methodReference.toInvokeCodeBlock(ArgumentCodeGenerator.none())).isEqualTo(CodeBlock.of(\"methodName()\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.DefaultMethodReferenceTests#toInvokeCodeBlockWithNullDeclaringClassAndNullTargetClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests#toInvokeCodeBlockWithNullDeclaringClassAndNullTargetClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests#toInvokeCodeBlockWithDeclaringClassAndNullTargetClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid toInvokeCodeBlockWithDeclaringClassAndNullTargetClass() {\r\n    MethodSpec method = createTestMethod(\"methodName\", new TypeName[0]);\r\n    MethodReference methodReference = new DefaultMethodReference(method, TEST_CLASS_NAME);\r\n    assertThat(methodReference.toInvokeCodeBlock(ArgumentCodeGenerator.none())).isEqualTo(CodeBlock.of(\"new com.example.Test().methodName()\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.DefaultMethodReferenceTests#toInvokeCodeBlockWithDeclaringClassAndNullTargetClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests#toInvokeCodeBlockWithDeclaringClassAndNullTargetClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests#toInvokeCodeBlockWithMatchingTargetClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid toInvokeCodeBlockWithMatchingTargetClass() {\r\n    MethodSpec method = createTestMethod(\"methodName\", new TypeName[0]);\r\n    MethodReference methodReference = new DefaultMethodReference(method, TEST_CLASS_NAME);\r\n    CodeBlock invocation = methodReference.toInvokeCodeBlock(ArgumentCodeGenerator.none(), TEST_CLASS_NAME);\r\n    // Assume com.example.Test is in a `test` variable.\r\n    assertThat(CodeBlock.of(\"$L.$L\", \"test\", invocation)).isEqualTo(CodeBlock.of(\"test.methodName()\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.DefaultMethodReferenceTests#toInvokeCodeBlockWithMatchingTargetClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests#toInvokeCodeBlockWithMatchingTargetClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests#toInvokeCodeBlockWithNonMatchingDeclaringClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid toInvokeCodeBlockWithNonMatchingDeclaringClass() {\r\n    MethodSpec method = createTestMethod(\"methodName\", new TypeName[0]);\r\n    MethodReference methodReference = new DefaultMethodReference(method, TEST_CLASS_NAME);\r\n    assertThat(methodReference.toInvokeCodeBlock(ArgumentCodeGenerator.none(), INITIALIZER_CLASS_NAME)).isEqualTo(CodeBlock.of(\"new com.example.Test().methodName()\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.DefaultMethodReferenceTests#toInvokeCodeBlockWithNonMatchingDeclaringClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests#toInvokeCodeBlockWithNonMatchingDeclaringClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests#toInvokeCodeBlockWithMatchingArg()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid toInvokeCodeBlockWithMatchingArg() {\r\n    MethodReference methodReference = createLocalMethodReference(\"methodName\", ClassName.get(String.class));\r\n    ArgumentCodeGenerator argCodeGenerator = ArgumentCodeGenerator.of(String.class, \"stringArg\");\r\n    assertThat(methodReference.toInvokeCodeBlock(argCodeGenerator)).isEqualTo(CodeBlock.of(\"methodName(stringArg)\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.DefaultMethodReferenceTests#toInvokeCodeBlockWithMatchingArg()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests#toInvokeCodeBlockWithMatchingArg()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]