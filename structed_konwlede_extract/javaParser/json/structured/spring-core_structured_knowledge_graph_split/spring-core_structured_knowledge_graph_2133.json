[
  {
    "head": "org.springframework.core.serializer.SerializerTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.serializer;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\n\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.core.serializer.support.SerializationDelegate;\n\nimport static org.assertj.core.api.AssertionsForClassTypes.assertThat;\n\n/**\n * Tests for {@link Serializer}, {@link Deserializer}, and {@link SerializationDelegate}.\n *\n * @since 6.1\n */\nclass SerializerTests {\n\n\tprivate static final String SPRING_FRAMEWORK = \"Spring Framework\";\n\n\n\t@Test\n\tvoid serializeToByteArray() throws IOException {\n\n\t\tclass SpyStringSerializer implements Serializer<String> {\n\n\t\t\tString expectedObject;\n\t\t\tOutputStream expectedOutputStream;\n\n\t\t\t@Override\n\t\t\tpublic void serialize(String object, OutputStream outputStream) {\n\t\t\t\tthis.expectedObject = object;\n\t\t\t\tthis.expectedOutputStream = outputStream;\n\t\t\t}\n\t\t}\n\n\t\tSpyStringSerializer serializer = new SpyStringSerializer();\n\t\tserializer.serializeToByteArray(SPRING_FRAMEWORK);\n\t\tassertThat(serializer.expectedObject).isEqualTo(SPRING_FRAMEWORK);\n\t\tassertThat(serializer.expectedOutputStream).isNotNull();\n\t}\n\n\t@Test\n\tvoid deserializeToByteArray() throws IOException {\n\n\t\tclass SpyStringDeserializer implements Deserializer<String> {\n\n\t\t\tInputStream expectedInputStream;\n\n\t\t\t@Override\n\t\t\tpublic String deserialize(InputStream inputStream) {\n\t\t\t\tthis.expectedInputStream = inputStream;\n\t\t\t\treturn SPRING_FRAMEWORK;\n\t\t\t}\n\t\t}\n\n\t\tSpyStringDeserializer deserializer = new SpyStringDeserializer();\n\t\tObject deserializedObj = deserializer.deserializeFromByteArray(SPRING_FRAMEWORK.getBytes());\n\t\tassertThat(deserializedObj).isEqualTo(SPRING_FRAMEWORK);\n\t\tassertThat(deserializer.expectedInputStream).isNotNull();\n\t}\n\n\t@Test\n\tvoid serializationDelegateWithExplicitSerializerAndDeserializer() throws IOException {\n\t\tSerializationDelegate delegate = new SerializationDelegate(new DefaultSerializer(), new DefaultDeserializer());\n\t\tbyte[] serializedObj = delegate.serializeToByteArray(SPRING_FRAMEWORK);\n\t\tObject deserializedObj = delegate.deserialize(new ByteArrayInputStream(serializedObj));\n\t\tassertThat(deserializedObj).isEqualTo(SPRING_FRAMEWORK);\n\t}\n\n\t@Test\n\tvoid serializationDelegateWithExplicitClassLoader() throws IOException {\n\t\tSerializationDelegate delegate = new SerializationDelegate(getClass().getClassLoader());\n\t\tbyte[] serializedObj = delegate.serializeToByteArray(SPRING_FRAMEWORK);\n\t\tObject deserializedObj = delegate.deserialize(new ByteArrayInputStream(serializedObj));\n\t\tassertThat(deserializedObj).isEqualTo(SPRING_FRAMEWORK);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.serializer.SerializerTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.serializer.SerializerTests#SPRING_FRAMEWORK",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.serializer.SerializerTests#SPRING_FRAMEWORK",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.serializer.SerializerTests#serializeToByteArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid serializeToByteArray() throws IOException {\r\n    class SpyStringSerializer implements Serializer<String> {\r\n\r\n        String expectedObject;\r\n\r\n        OutputStream expectedOutputStream;\r\n\r\n        @Override\r\n        public void serialize(String object, OutputStream outputStream) {\r\n            this.expectedObject = object;\r\n            this.expectedOutputStream = outputStream;\r\n        }\r\n    }\r\n    SpyStringSerializer serializer = new SpyStringSerializer();\r\n    serializer.serializeToByteArray(SPRING_FRAMEWORK);\r\n    assertThat(serializer.expectedObject).isEqualTo(SPRING_FRAMEWORK);\r\n    assertThat(serializer.expectedOutputStream).isNotNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.serializer.SerializerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.serializer.SerializerTests#serializeToByteArray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.serializer.SerializerTests#serializeToByteArray()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.serializer.SerializerTests#deserializeToByteArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid deserializeToByteArray() throws IOException {\r\n    class SpyStringDeserializer implements Deserializer<String> {\r\n\r\n        InputStream expectedInputStream;\r\n\r\n        @Override\r\n        public String deserialize(InputStream inputStream) {\r\n            this.expectedInputStream = inputStream;\r\n            return SPRING_FRAMEWORK;\r\n        }\r\n    }\r\n    SpyStringDeserializer deserializer = new SpyStringDeserializer();\r\n    Object deserializedObj = deserializer.deserializeFromByteArray(SPRING_FRAMEWORK.getBytes());\r\n    assertThat(deserializedObj).isEqualTo(SPRING_FRAMEWORK);\r\n    assertThat(deserializer.expectedInputStream).isNotNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.serializer.SerializerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.serializer.SerializerTests#deserializeToByteArray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.serializer.SerializerTests#deserializeToByteArray()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.serializer.SerializerTests#serializationDelegateWithExplicitSerializerAndDeserializer()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid serializationDelegateWithExplicitSerializerAndDeserializer() throws IOException {\r\n    SerializationDelegate delegate = new SerializationDelegate(new DefaultSerializer(), new DefaultDeserializer());\r\n    byte[] serializedObj = delegate.serializeToByteArray(SPRING_FRAMEWORK);\r\n    Object deserializedObj = delegate.deserialize(new ByteArrayInputStream(serializedObj));\r\n    assertThat(deserializedObj).isEqualTo(SPRING_FRAMEWORK);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.serializer.SerializerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.serializer.SerializerTests#serializationDelegateWithExplicitSerializerAndDeserializer()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.serializer.SerializerTests#serializationDelegateWithExplicitSerializerAndDeserializer()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.serializer.SerializerTests#serializationDelegateWithExplicitClassLoader()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid serializationDelegateWithExplicitClassLoader() throws IOException {\r\n    SerializationDelegate delegate = new SerializationDelegate(getClass().getClassLoader());\r\n    byte[] serializedObj = delegate.serializeToByteArray(SPRING_FRAMEWORK);\r\n    Object deserializedObj = delegate.deserialize(new ByteArrayInputStream(serializedObj));\r\n    assertThat(deserializedObj).isEqualTo(SPRING_FRAMEWORK);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.serializer.SerializerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.serializer.SerializerTests#serializationDelegateWithExplicitClassLoader()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.serializer.SerializerTests#serializationDelegateWithExplicitClassLoader()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.serializer",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.serializer.SpyStringSerializer",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.serializer.SpyStringSerializer",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.serializer;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\n\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.core.serializer.support.SerializationDelegate;\n\nimport static org.assertj.core.api.AssertionsForClassTypes.assertThat;\n\n/**\n * Tests for {@link Serializer}, {@link Deserializer}, and {@link SerializationDelegate}.\n *\n * @since 6.1\n */\nclass SerializerTests {\n\n\tprivate static final String SPRING_FRAMEWORK = \"Spring Framework\";\n\n\n\t@Test\n\tvoid serializeToByteArray() throws IOException {\n\n\t\tclass SpyStringSerializer implements Serializer<String> {\n\n\t\t\tString expectedObject;\n\t\t\tOutputStream expectedOutputStream;\n\n\t\t\t@Override\n\t\t\tpublic void serialize(String object, OutputStream outputStream) {\n\t\t\t\tthis.expectedObject = object;\n\t\t\t\tthis.expectedOutputStream = outputStream;\n\t\t\t}\n\t\t}\n\n\t\tSpyStringSerializer serializer = new SpyStringSerializer();\n\t\tserializer.serializeToByteArray(SPRING_FRAMEWORK);\n\t\tassertThat(serializer.expectedObject).isEqualTo(SPRING_FRAMEWORK);\n\t\tassertThat(serializer.expectedOutputStream).isNotNull();\n\t}\n\n\t@Test\n\tvoid deserializeToByteArray() throws IOException {\n\n\t\tclass SpyStringDeserializer implements Deserializer<String> {\n\n\t\t\tInputStream expectedInputStream;\n\n\t\t\t@Override\n\t\t\tpublic String deserialize(InputStream inputStream) {\n\t\t\t\tthis.expectedInputStream = inputStream;\n\t\t\t\treturn SPRING_FRAMEWORK;\n\t\t\t}\n\t\t}\n\n\t\tSpyStringDeserializer deserializer = new SpyStringDeserializer();\n\t\tObject deserializedObj = deserializer.deserializeFromByteArray(SPRING_FRAMEWORK.getBytes());\n\t\tassertThat(deserializedObj).isEqualTo(SPRING_FRAMEWORK);\n\t\tassertThat(deserializer.expectedInputStream).isNotNull();\n\t}\n\n\t@Test\n\tvoid serializationDelegateWithExplicitSerializerAndDeserializer() throws IOException {\n\t\tSerializationDelegate delegate = new SerializationDelegate(new DefaultSerializer(), new DefaultDeserializer());\n\t\tbyte[] serializedObj = delegate.serializeToByteArray(SPRING_FRAMEWORK);\n\t\tObject deserializedObj = delegate.deserialize(new ByteArrayInputStream(serializedObj));\n\t\tassertThat(deserializedObj).isEqualTo(SPRING_FRAMEWORK);\n\t}\n\n\t@Test\n\tvoid serializationDelegateWithExplicitClassLoader() throws IOException {\n\t\tSerializationDelegate delegate = new SerializationDelegate(getClass().getClassLoader());\n\t\tbyte[] serializedObj = delegate.serializeToByteArray(SPRING_FRAMEWORK);\n\t\tObject deserializedObj = delegate.deserialize(new ByteArrayInputStream(serializedObj));\n\t\tassertThat(deserializedObj).isEqualTo(SPRING_FRAMEWORK);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.serializer.SpyStringSerializer",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.serializer.SpyStringSerializer#expectedObject",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.serializer.SpyStringSerializer#expectedObject",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.serializer.SpyStringSerializer",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.serializer.SpyStringSerializer#expectedOutputStream",
    "tailType": "field"
  }
]