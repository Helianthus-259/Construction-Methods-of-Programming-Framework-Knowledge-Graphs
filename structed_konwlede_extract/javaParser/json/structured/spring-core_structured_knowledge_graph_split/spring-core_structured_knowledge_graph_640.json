[
  {
    "head": "org.springframework.cglib.proxy.Enhancer#setCallbacks(Callback[])",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Set the array of callbacks to use.\r\n * Ignored if you use {@link #createClass}.\r\n * You must use a {@link CallbackFilter} to specify the index into this\r\n * array for each method in the proxied class.\r\n * @param callbacks the callback array\r\n * @see #setCallbackFilter\r\n * @see #setCallback\r\n */\r\npublic void setCallbacks(Callback[] callbacks) {\r\n    if (callbacks != null && callbacks.length == 0) {\r\n        throw new IllegalArgumentException(\"Array cannot be empty\");\r\n    }\r\n    this.callbacks = callbacks;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.Enhancer#setCallbacks(Callback[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer#setUseFactory(boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Set whether the enhanced object instances should implement\r\n * the {@link Factory} interface.\r\n * This was added for tools that need for proxies to be more\r\n * indistinguishable from their targets. Also, in some cases it may\r\n * be necessary to disable the <code>Factory</code> interface to\r\n * prevent code from changing the underlying callbacks.\r\n * @param useFactory whether to implement <code>Factory</code>; default is <code>true</code>\r\n */\r\npublic void setUseFactory(boolean useFactory) {\r\n    this.useFactory = useFactory;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.Enhancer#setUseFactory(boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer#setInterceptDuringConstruction(boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Set whether methods called from within the proxy's constructer\r\n * will be intercepted. The default value is true. Unintercepted methods\r\n * will call the method of the proxy's base class, if it exists.\r\n * @param interceptDuringConstruction whether to intercept methods called from the constructor\r\n */\r\npublic void setInterceptDuringConstruction(boolean interceptDuringConstruction) {\r\n    this.interceptDuringConstruction = interceptDuringConstruction;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.Enhancer#setInterceptDuringConstruction(boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer#setCallbackType(Class)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Set the single type of {@link Callback} to use.\r\n * This may be used instead of {@link #setCallback} when calling\r\n * {@link #createClass}, since it may not be possible to have\r\n * an array of actual callback instances.\r\n * @param callbackType the type of callback to use for all methods\r\n * @see #setCallbackTypes\r\n */\r\npublic void setCallbackType(Class callbackType) {\r\n    setCallbackTypes(new Class[] { callbackType });\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.Enhancer#setCallbackType(Class)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer#setCallbackTypes(Class[])",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Set the array of callback types to use.\r\n * This may be used instead of {@link #setCallbacks} when calling\r\n * {@link #createClass}, since it may not be possible to have\r\n * an array of actual callback instances.\r\n * You must use a {@link CallbackFilter} to specify the index into this\r\n * array for each method in the proxied class.\r\n * @param callbackTypes the array of callback types\r\n */\r\npublic void setCallbackTypes(Class[] callbackTypes) {\r\n    if (callbackTypes != null && callbackTypes.length == 0) {\r\n        throw new IllegalArgumentException(\"Array cannot be empty\");\r\n    }\r\n    this.callbackTypes = CallbackInfo.determineTypes(callbackTypes);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.Enhancer#setCallbackTypes(Class[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer#create()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Generate a new class if necessary and uses the specified\r\n * callbacks (if any) to create a new object instance.\r\n * Uses the no-arg constructor of the superclass.\r\n * @return a new instance\r\n */\r\npublic Object create() {\r\n    classOnly = false;\r\n    argumentTypes = null;\r\n    return createHelper();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.Enhancer#create()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer#create(Class[],Object[])",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Generate a new class if necessary and uses the specified\r\n * callbacks (if any) to create a new object instance.\r\n * Uses the constructor of the superclass matching the <code>argumentTypes</code>\r\n * parameter, with the given arguments.\r\n * @param argumentTypes constructor signature\r\n * @param arguments compatible wrapped arguments to pass to constructor\r\n * @return a new instance\r\n */\r\npublic Object create(Class[] argumentTypes, Object[] arguments) {\r\n    classOnly = false;\r\n    if (argumentTypes == null || arguments == null || argumentTypes.length != arguments.length) {\r\n        throw new IllegalArgumentException(\"Arguments must be non-null and of equal length\");\r\n    }\r\n    this.argumentTypes = argumentTypes;\r\n    this.arguments = arguments;\r\n    return createHelper();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.Enhancer#create(Class[],Object[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer#createClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Generate a new class if necessary and return it without creating a new instance.\r\n * This ignores any callbacks that have been set.\r\n * To create a new instance you will have to use reflection, and methods\r\n * called during the constructor will not be intercepted. To avoid this problem,\r\n * use the multi-arg <code>create</code> method.\r\n * @see #create(Class[], Object[])\r\n */\r\npublic Class createClass() {\r\n    classOnly = true;\r\n    return (Class) createHelper();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.Enhancer#createClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer#setSerialVersionUID(Long)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Insert a static serialVersionUID field into the generated class.\r\n * @param sUID the field value, or null to avoid generating field.\r\n */\r\npublic void setSerialVersionUID(Long sUID) {\r\n    serialVersionUID = sUID;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.Enhancer#setSerialVersionUID(Long)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer#preValidate()",
    "headType": "method",
    "relation": "provide",
    "tail": "private void preValidate() {\r\n    if (callbackTypes == null) {\r\n        callbackTypes = CallbackInfo.determineTypes(callbacks, false);\r\n        validateCallbackTypes = true;\r\n    }\r\n    if (filter == null) {\r\n        if (callbackTypes.length > 1) {\r\n            throw new IllegalStateException(\"Multiple callback types possible but no filter specified\");\r\n        }\r\n        filter = ALL_ZERO;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.Enhancer#preValidate()",
    "tailType": "method"
  }
]