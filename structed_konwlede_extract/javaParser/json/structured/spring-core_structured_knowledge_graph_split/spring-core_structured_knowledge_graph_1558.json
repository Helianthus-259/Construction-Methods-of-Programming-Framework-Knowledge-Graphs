[
  {
    "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#resourcePatternMatchesTypeInDefaultPackageAndAbsoluteResourceName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#resourcePatternMatchesTypeInDefaultPackageAndAbsoluteResourceName()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#resourcePatternDoesNotMatchTypeAndResourceName()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resourcePatternDoesNotMatchTypeAndResourceName() {\r\n    this.runtimeHints.resources().registerPattern(\"spring.*\");\r\n    assertPredicateDoesNotMatch(resources.forResource(TypeReference.of(getClass()), \"spring.properties\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#resourcePatternDoesNotMatchTypeAndResourceName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#resourcePatternDoesNotMatchTypeAndResourceName()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#resourceBundleMatchesBundleName()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resourceBundleMatchesBundleName() {\r\n    this.runtimeHints.resources().registerResourceBundle(\"spring\");\r\n    assertPredicateMatches(resources.forBundle(\"spring\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#resourceBundleMatchesBundleName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#resourceBundleMatchesBundleName()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#resourceBundleDoesNotMatchBundleName()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resourceBundleDoesNotMatchBundleName() {\r\n    this.runtimeHints.resources().registerResourceBundle(\"spring\");\r\n    assertPredicateDoesNotMatch(resources.forBundle(\"other\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#resourceBundleDoesNotMatchBundleName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#resourceBundleDoesNotMatchBundleName()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#assertPredicateMatches(Predicate<RuntimeHints>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void assertPredicateMatches(Predicate<RuntimeHints> predicate) {\r\n    assertThat(predicate).accepts(this.runtimeHints);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#assertPredicateMatches(Predicate<RuntimeHints>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#assertPredicateDoesNotMatch(Predicate<RuntimeHints>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void assertPredicateDoesNotMatch(Predicate<RuntimeHints> predicate) {\r\n    assertThat(predicate).rejects(this.runtimeHints);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#assertPredicateDoesNotMatch(Predicate<RuntimeHints>)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.hint.predicate",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.hint.predicate",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.predicate.SerializationHintsPredicatesTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.hint.predicate.SerializationHintsPredicatesTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint.predicate;\n\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.aot.hint.RuntimeHints;\nimport org.springframework.aot.hint.TypeReference;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link SerializationHintsPredicates}.\n *\n * @author Stephane Nicoll\n */\nclass SerializationHintsPredicatesTests {\n\n\tprivate final SerializationHintsPredicates serialization = new SerializationHintsPredicates();\n\n\tprivate final RuntimeHints runtimeHints = new RuntimeHints();\n\n\t@Test\n\tvoid shouldMatchRegisteredClass() {\n\t\truntimeHints.serialization().registerType(String.class);\n\t\tassertThat(serialization.onType(String.class).test(runtimeHints)).isTrue();\n\t}\n\n\t@Test\n\tvoid shouldMatchRegisteredTypeReference() {\n\t\truntimeHints.serialization().registerType(TypeReference.of(String.class));\n\t\tassertThat(serialization.onType(String.class).test(runtimeHints)).isTrue();\n\t}\n\n\t@Test\n\tvoid shouldNotMatchUnregisteredType() {\n\t\truntimeHints.serialization().registerType(Integer.class);\n\t\tassertThat(serialization.onType(Long.class).test(runtimeHints)).isFalse();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.SerializationHintsPredicatesTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.hint.predicate.SerializationHintsPredicatesTests#serialization",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.hint.predicate.SerializationHintsPredicatesTests#serialization",
    "headType": "field",
    "relation": "haveType",
    "tail": "SerializationHintsPredicates",
    "tailType": "type"
  }
]