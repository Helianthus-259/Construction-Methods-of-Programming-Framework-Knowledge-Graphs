[
  {
    "head": "org.springframework.core.annotation.AnnotationsSpliterator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsSpliterator#getMapping(int,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsSpliterator#getMapping(int,int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsSpliterator#createMergedAnnotationIfPossible(int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@SuppressWarnings(\"unchecked\")\r\n@Nullable\r\nprivate MergedAnnotation<A> createMergedAnnotationIfPossible(int annotationIndex, int mappingIndex) {\r\n    MergedAnnotation<?> root = annotations[annotationIndex];\r\n    if (mappingIndex == 0) {\r\n        return (MergedAnnotation<A>) root;\r\n    }\r\n    IntrospectionFailureLogger logger = (this.requiredType != null ? IntrospectionFailureLogger.INFO : IntrospectionFailureLogger.DEBUG);\r\n    return TypeMappedAnnotation.createIfPossible(mappings[annotationIndex].get(mappingIndex), root, logger);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsSpliterator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsSpliterator#createMergedAnnotationIfPossible(int,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsSpliterator#createMergedAnnotationIfPossible(int,int)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsSpliterator#createMergedAnnotationIfPossible(int,int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsSpliterator#trySplit()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic Spliterator<MergedAnnotation<A>> trySplit() {\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsSpliterator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsSpliterator#trySplit()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsSpliterator#trySplit()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsSpliterator#trySplit()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsSpliterator#estimateSize()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic long estimateSize() {\r\n    int size = 0;\r\n    for (int i = 0; i < annotations.length; i++) {\r\n        AnnotationTypeMappings mappings = MergedAnnotationsCollection.this.mappings[i];\r\n        int numberOfMappings = mappings.size();\r\n        numberOfMappings -= Math.min(this.mappingCursors[i], mappings.size());\r\n        size += numberOfMappings;\r\n    }\r\n    return size;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsSpliterator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsSpliterator#estimateSize()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsSpliterator#estimateSize()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsSpliterator#characteristics()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int characteristics() {\r\n    return NONNULL | IMMUTABLE;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsSpliterator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsSpliterator#characteristics()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsSpliterator#characteristics()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.annotation",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.annotation.MergedAnnotationSelector",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationSelector",
    "headType": "class",
    "relation": "use",
    "tail": "@FunctionalInterface",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationSelector",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.annotation;\n\nimport java.lang.annotation.Annotation;\n\n/**\n * Strategy interface used to select between two {@link MergedAnnotation}\n * instances.\n *\n * @author Phillip Webb\n * @since 5.2\n * @param <A> the annotation type\n * @see MergedAnnotationSelectors\n */\n@FunctionalInterface\npublic interface MergedAnnotationSelector<A extends Annotation> {\n\n\t/**\n\t * Determine if the existing annotation is known to be the best\n\t * candidate and any subsequent selections may be skipped.\n\t * @param annotation the annotation to check\n\t * @return {@code true} if the annotation is known to be the best candidate\n\t */\n\tdefault boolean isBestCandidate(MergedAnnotation<A> annotation) {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Select the annotation that should be used.\n\t * @param existing an existing annotation returned from an earlier result\n\t * @param candidate a candidate annotation that may be better suited\n\t * @return the most appropriate annotation from the {@code existing} or\n\t * {@code candidate}\n\t */\n\tMergedAnnotation<A> select(MergedAnnotation<A> existing, MergedAnnotation<A> candidate);\n\n}\n",
    "tailType": "class_code"
  }
]