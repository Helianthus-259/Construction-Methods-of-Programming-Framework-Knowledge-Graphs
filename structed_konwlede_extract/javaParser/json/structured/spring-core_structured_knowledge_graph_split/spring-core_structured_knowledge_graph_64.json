[
  {
    "head": "org.springframework.core.type.AbstractMethodMetadataTests#isAbstractWhenNotAbstractReturnsFalse()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.AbstractMethodMetadataTests#isStatusWhenStaticReturnsTrue()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isStatusWhenStaticReturnsTrue() {\r\n    assertThat(getTagged(WithStaticMethod.class).isStatic()).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AbstractMethodMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AbstractMethodMetadataTests#isStatusWhenStaticReturnsTrue()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AbstractMethodMetadataTests#isStatusWhenStaticReturnsTrue()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.AbstractMethodMetadataTests#isStaticWhenNotStaticReturnsFalse()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isStaticWhenNotStaticReturnsFalse() {\r\n    assertThat(getTagged(WithMethod.class).isStatic()).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AbstractMethodMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AbstractMethodMetadataTests#isStaticWhenNotStaticReturnsFalse()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AbstractMethodMetadataTests#isStaticWhenNotStaticReturnsFalse()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.AbstractMethodMetadataTests#isFinalWhenFinalReturnsTrue()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isFinalWhenFinalReturnsTrue() {\r\n    assertThat(getTagged(WithFinalMethod.class).isFinal()).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AbstractMethodMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AbstractMethodMetadataTests#isFinalWhenFinalReturnsTrue()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AbstractMethodMetadataTests#isFinalWhenFinalReturnsTrue()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.AbstractMethodMetadataTests#isFinalWhenNonFinalReturnsFalse()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isFinalWhenNonFinalReturnsFalse() {\r\n    assertThat(getTagged(WithMethod.class).isFinal()).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AbstractMethodMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AbstractMethodMetadataTests#isFinalWhenNonFinalReturnsFalse()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AbstractMethodMetadataTests#isFinalWhenNonFinalReturnsFalse()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.AbstractMethodMetadataTests#isOverridableWhenOverridableReturnsTrue()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isOverridableWhenOverridableReturnsTrue() {\r\n    assertThat(getTagged(WithMethod.class).isOverridable()).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AbstractMethodMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AbstractMethodMetadataTests#isOverridableWhenOverridableReturnsTrue()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AbstractMethodMetadataTests#isOverridableWhenOverridableReturnsTrue()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.AbstractMethodMetadataTests#isOverridableWhenNonOverridableReturnsFalse()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isOverridableWhenNonOverridableReturnsFalse() {\r\n    assertThat(getTagged(WithStaticMethod.class).isOverridable()).isFalse();\r\n    assertThat(getTagged(WithFinalMethod.class).isOverridable()).isFalse();\r\n    assertThat(getTagged(WithPrivateMethod.class).isOverridable()).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AbstractMethodMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AbstractMethodMetadataTests#isOverridableWhenNonOverridableReturnsFalse()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AbstractMethodMetadataTests#isOverridableWhenNonOverridableReturnsFalse()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.generate",
    "tailType": "package"
  }
]