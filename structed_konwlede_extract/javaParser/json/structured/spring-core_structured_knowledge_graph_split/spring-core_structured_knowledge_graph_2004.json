[
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#readByteChannel(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid readByteChannel(DataBufferFactory bufferFactory) throws Exception {\r\n    super.bufferFactory = bufferFactory;\r\n    URI uri = this.resource.getURI();\r\n    Flux<DataBuffer> result = DataBufferUtils.readByteChannel(() -> FileChannel.open(Paths.get(uri), StandardOpenOption.READ), super.bufferFactory, 3);\r\n    verifyReadData(result);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferUtilsTests#readByteChannel(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#readByteChannel(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#readByteChannelError(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid readByteChannelError(DataBufferFactory bufferFactory) throws Exception {\r\n    super.bufferFactory = bufferFactory;\r\n    ReadableByteChannel channel = mock();\r\n    given(channel.read(any())).willAnswer(invocation -> {\r\n        ByteBuffer buffer = invocation.getArgument(0);\r\n        buffer.put(\"foo\".getBytes(StandardCharsets.UTF_8));\r\n        buffer.flip();\r\n        return 3;\r\n    }).willThrow(new IOException());\r\n    Flux<DataBuffer> result = DataBufferUtils.readByteChannel(() -> channel, super.bufferFactory, 3);\r\n    StepVerifier.create(result).consumeNextWith(stringConsumer(\"foo\")).expectError(IOException.class).verify(Duration.ofSeconds(3));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferUtilsTests#readByteChannelError(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#readByteChannelError(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#readByteChannelCancel(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid readByteChannelCancel(DataBufferFactory bufferFactory) throws Exception {\r\n    super.bufferFactory = bufferFactory;\r\n    URI uri = this.resource.getURI();\r\n    Flux<DataBuffer> result = DataBufferUtils.readByteChannel(() -> FileChannel.open(Paths.get(uri), StandardOpenOption.READ), super.bufferFactory, 3);\r\n    StepVerifier.create(result).consumeNextWith(stringConsumer(\"foo\")).thenCancel().verify();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferUtilsTests#readByteChannelCancel(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#readByteChannelCancel(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#readAsynchronousFileChannel(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid readAsynchronousFileChannel(DataBufferFactory bufferFactory) throws Exception {\r\n    super.bufferFactory = bufferFactory;\r\n    URI uri = this.resource.getURI();\r\n    Flux<DataBuffer> flux = DataBufferUtils.readAsynchronousFileChannel(() -> AsynchronousFileChannel.open(Paths.get(uri), StandardOpenOption.READ), super.bufferFactory, 3);\r\n    verifyReadData(flux);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferUtilsTests#readAsynchronousFileChannel(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#readAsynchronousFileChannel(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#readAsynchronousFileChannelPosition(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid readAsynchronousFileChannelPosition(DataBufferFactory bufferFactory) throws Exception {\r\n    super.bufferFactory = bufferFactory;\r\n    URI uri = this.resource.getURI();\r\n    Flux<DataBuffer> flux = DataBufferUtils.readAsynchronousFileChannel(() -> AsynchronousFileChannel.open(Paths.get(uri), StandardOpenOption.READ), 9, super.bufferFactory, 3);\r\n    StepVerifier.create(flux).consumeNextWith(stringConsumer(\"qux\")).expectComplete().verify(Duration.ofSeconds(5));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferUtilsTests#readAsynchronousFileChannelPosition(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#readAsynchronousFileChannelPosition(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#readAsynchronousFileChannelError(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid readAsynchronousFileChannelError(DataBufferFactory bufferFactory) {\r\n    super.bufferFactory = bufferFactory;\r\n    AsynchronousFileChannel channel = mock();\r\n    willAnswer(invocation -> {\r\n        ByteBuffer byteBuffer = invocation.getArgument(0);\r\n        byteBuffer.put(\"foo\".getBytes(StandardCharsets.UTF_8));\r\n        long pos = invocation.getArgument(1);\r\n        assertThat(pos).isEqualTo(0);\r\n        Object attachment = invocation.getArgument(2);\r\n        CompletionHandler<Integer, Object> completionHandler = invocation.getArgument(3);\r\n        completionHandler.completed(3, attachment);\r\n        return null;\r\n    }).willAnswer(invocation -> {\r\n        Object attachment = invocation.getArgument(2);\r\n        CompletionHandler<Integer, Object> completionHandler = invocation.getArgument(3);\r\n        completionHandler.failed(new IOException(), attachment);\r\n        return null;\r\n    }).given(channel).read(any(), anyLong(), any(), any());\r\n    Flux<DataBuffer> result = DataBufferUtils.readAsynchronousFileChannel(() -> channel, super.bufferFactory, 3);\r\n    StepVerifier.create(result).consumeNextWith(stringConsumer(\"foo\")).expectError(IOException.class).verify(Duration.ofSeconds(3));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferUtilsTests#readAsynchronousFileChannelError(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#readAsynchronousFileChannelError(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#readAsynchronousFileChannelCancel(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid readAsynchronousFileChannelCancel(DataBufferFactory bufferFactory) throws Exception {\r\n    super.bufferFactory = bufferFactory;\r\n    URI uri = this.resource.getURI();\r\n    Flux<DataBuffer> flux = DataBufferUtils.readAsynchronousFileChannel(() -> AsynchronousFileChannel.open(Paths.get(uri), StandardOpenOption.READ), super.bufferFactory, 3);\r\n    StepVerifier.create(flux).consumeNextWith(stringConsumer(\"foo\")).thenCancel().verify();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferUtilsTests#readAsynchronousFileChannelCancel(DataBufferFactory)",
    "tailType": "method"
  }
]