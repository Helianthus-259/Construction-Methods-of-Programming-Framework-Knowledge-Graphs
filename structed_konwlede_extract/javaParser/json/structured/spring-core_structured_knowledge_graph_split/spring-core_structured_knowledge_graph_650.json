[
  {
    "head": "org.springframework.cglib.proxy.InvocationHandler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.InvocationHandler#invoke(Object,Method,Object[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.InvocationHandler",
    "headType": "class",
    "relation": "extend",
    "tail": "Callback",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.proxy",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.proxy",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.proxy.InvocationHandlerGenerator",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.proxy.InvocationHandlerGenerator",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.proxy.InvocationHandlerGenerator",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2003,2004 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.cglib.proxy;\n\nimport java.util.Iterator;\nimport java.util.List;\n\nimport org.springframework.asm.Type;\nimport org.springframework.cglib.core.Block;\nimport org.springframework.cglib.core.ClassEmitter;\nimport org.springframework.cglib.core.CodeEmitter;\nimport org.springframework.cglib.core.Constants;\nimport org.springframework.cglib.core.EmitUtils;\nimport org.springframework.cglib.core.MethodInfo;\nimport org.springframework.cglib.core.Signature;\nimport org.springframework.cglib.core.TypeUtils;\n\n@SuppressWarnings({\"rawtypes\", \"unchecked\"})\nclass InvocationHandlerGenerator\nimplements CallbackGenerator\n{\n    public static final InvocationHandlerGenerator INSTANCE = new InvocationHandlerGenerator();\n\n    private static final Type INVOCATION_HANDLER =\n      TypeUtils.parseType(\"org.springframework.cglib.proxy.InvocationHandler\");\n    private static final Type UNDECLARED_THROWABLE_EXCEPTION =\n      TypeUtils.parseType(\"org.springframework.cglib.proxy.UndeclaredThrowableException\");\n    private static final Type METHOD =\n      TypeUtils.parseType(\"java.lang.reflect.Method\");\n    private static final Signature INVOKE =\n      TypeUtils.parseSignature(\"Object invoke(Object, java.lang.reflect.Method, Object[])\");\n\n    @Override\n\tpublic void generate(ClassEmitter ce, Context context, List methods) {\n        for (Iterator it = methods.iterator(); it.hasNext();) {\n            MethodInfo method = (MethodInfo)it.next();\n            Signature impl = context.getImplSignature(method);\n            ce.declare_field(Constants.PRIVATE_FINAL_STATIC, impl.getName(), METHOD, null);\n\n            CodeEmitter e = context.beginMethod(ce, method);\n            Block handler = e.begin_block();\n            context.emitCallback(e, context.getIndex(method));\n            e.load_this();\n            e.getfield(impl.getName());\n            e.create_arg_array();\n            e.invoke_interface(INVOCATION_HANDLER, INVOKE);\n            e.unbox(method.getSignature().getReturnType());\n            e.return_value();\n            handler.end();\n            EmitUtils.wrap_undeclared_throwable(e, handler, method.getExceptionTypes(), UNDECLARED_THROWABLE_EXCEPTION);\n            e.end_method();\n        }\n    }\n\n    @Override\n\tpublic void generateStatic(CodeEmitter e, Context context, List methods) {\n        for (Iterator it = methods.iterator(); it.hasNext();) {\n            MethodInfo method = (MethodInfo)it.next();\n            EmitUtils.load_method(e, method);\n            e.putfield(context.getImplSignature(method).getName());\n        }\n    }\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.proxy.InvocationHandlerGenerator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.proxy.InvocationHandlerGenerator#INSTANCE",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.proxy.InvocationHandlerGenerator#INSTANCE",
    "headType": "field",
    "relation": "haveType",
    "tail": "InvocationHandlerGenerator",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.proxy.InvocationHandlerGenerator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.proxy.InvocationHandlerGenerator#INVOCATION_HANDLER",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.proxy.InvocationHandlerGenerator#INVOCATION_HANDLER",
    "headType": "field",
    "relation": "haveType",
    "tail": "Type",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.proxy.InvocationHandlerGenerator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.proxy.InvocationHandlerGenerator#UNDECLARED_THROWABLE_EXCEPTION",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.proxy.InvocationHandlerGenerator#UNDECLARED_THROWABLE_EXCEPTION",
    "headType": "field",
    "relation": "haveType",
    "tail": "Type",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.proxy.InvocationHandlerGenerator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.proxy.InvocationHandlerGenerator#METHOD",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.proxy.InvocationHandlerGenerator#METHOD",
    "headType": "field",
    "relation": "haveType",
    "tail": "Type",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.proxy.InvocationHandlerGenerator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.proxy.InvocationHandlerGenerator#INVOKE",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.proxy.InvocationHandlerGenerator#INVOKE",
    "headType": "field",
    "relation": "haveType",
    "tail": "Signature",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.proxy.InvocationHandlerGenerator#generate(ClassEmitter,Context,List)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void generate(ClassEmitter ce, Context context, List methods) {\r\n    for (Iterator it = methods.iterator(); it.hasNext(); ) {\r\n        MethodInfo method = (MethodInfo) it.next();\r\n        Signature impl = context.getImplSignature(method);\r\n        ce.declare_field(Constants.PRIVATE_FINAL_STATIC, impl.getName(), METHOD, null);\r\n        CodeEmitter e = context.beginMethod(ce, method);\r\n        Block handler = e.begin_block();\r\n        context.emitCallback(e, context.getIndex(method));\r\n        e.load_this();\r\n        e.getfield(impl.getName());\r\n        e.create_arg_array();\r\n        e.invoke_interface(INVOCATION_HANDLER, INVOKE);\r\n        e.unbox(method.getSignature().getReturnType());\r\n        e.return_value();\r\n        handler.end();\r\n        EmitUtils.wrap_undeclared_throwable(e, handler, method.getExceptionTypes(), UNDECLARED_THROWABLE_EXCEPTION);\r\n        e.end_method();\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.InvocationHandlerGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.InvocationHandlerGenerator#generate(ClassEmitter,Context,List)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.InvocationHandlerGenerator#generate(ClassEmitter,Context,List)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.proxy.InvocationHandlerGenerator#generateStatic(CodeEmitter,Context,List)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void generateStatic(CodeEmitter e, Context context, List methods) {\r\n    for (Iterator it = methods.iterator(); it.hasNext(); ) {\r\n        MethodInfo method = (MethodInfo) it.next();\r\n        EmitUtils.load_method(e, method);\r\n        e.putfield(context.getImplSignature(method).getName());\r\n    }\r\n}",
    "tailType": "method_code"
  }
]