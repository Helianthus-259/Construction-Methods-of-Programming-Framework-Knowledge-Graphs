[
  {
    "head": "org.springframework.util.ClassUtilsTests#classLoader",
    "headType": "field",
    "relation": "haveType",
    "tail": "ClassLoader",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.ClassUtilsTests#staticLambdaExpression",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#staticLambdaExpression",
    "headType": "field",
    "relation": "haveType",
    "tail": "Supplier<String>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.ClassUtilsTests#instanceLambdaExpression",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#instanceLambdaExpression",
    "headType": "field",
    "relation": "haveType",
    "tail": "Supplier<String>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#isPresent()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isPresent() {\r\n    assertThat(ClassUtils.isPresent(\"java.lang.String\", classLoader)).isTrue();\r\n    assertThat(ClassUtils.isPresent(\"java.lang.MySpecialString\", classLoader)).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtilsTests#isPresent()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#isPresent()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#forName()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid forName() throws ClassNotFoundException {\r\n    assertThat(ClassUtils.forName(\"java.lang.String\", classLoader)).isEqualTo(String.class);\r\n    assertThat(ClassUtils.forName(\"java.lang.String[]\", classLoader)).isEqualTo(String[].class);\r\n    assertThat(ClassUtils.forName(String[].class.getName(), classLoader)).isEqualTo(String[].class);\r\n    assertThat(ClassUtils.forName(String[][].class.getName(), classLoader)).isEqualTo(String[][].class);\r\n    assertThat(ClassUtils.forName(String[][][].class.getName(), classLoader)).isEqualTo(String[][][].class);\r\n    assertThat(ClassUtils.forName(\"org.springframework.tests.sample.objects.TestObject\", classLoader)).isEqualTo(TestObject.class);\r\n    assertThat(ClassUtils.forName(\"org.springframework.tests.sample.objects.TestObject[]\", classLoader)).isEqualTo(TestObject[].class);\r\n    assertThat(ClassUtils.forName(TestObject[].class.getName(), classLoader)).isEqualTo(TestObject[].class);\r\n    assertThat(ClassUtils.forName(\"org.springframework.tests.sample.objects.TestObject[][]\", classLoader)).isEqualTo(TestObject[][].class);\r\n    assertThat(ClassUtils.forName(TestObject[][].class.getName(), classLoader)).isEqualTo(TestObject[][].class);\r\n    assertThat(ClassUtils.forName(\"[[[S\", classLoader)).isEqualTo(short[][][].class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtilsTests#forName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#forName()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#forNameWithNestedType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid forNameWithNestedType() throws ClassNotFoundException {\r\n    assertThat(ClassUtils.forName(\"org.springframework.util.ClassUtilsTests$NestedClass\", classLoader)).isEqualTo(NestedClass.class);\r\n    assertThat(ClassUtils.forName(\"org.springframework.util.ClassUtilsTests.NestedClass\", classLoader)).isEqualTo(NestedClass.class);\r\n    // Precondition: package name must have length == 1.\r\n    assertThat(ClassHavingNestedClass.class.getPackageName().length()).isEqualTo(1);\r\n    assertThat(ClassUtils.forName(\"a.ClassHavingNestedClass$NestedClass\", classLoader)).isEqualTo(ClassHavingNestedClass.NestedClass.class);\r\n    assertThat(ClassUtils.forName(\"a.ClassHavingNestedClass.NestedClass\", classLoader)).isEqualTo(ClassHavingNestedClass.NestedClass.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtilsTests#forNameWithNestedType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#forNameWithNestedType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#forNameWithPrimitiveClasses()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid forNameWithPrimitiveClasses() throws ClassNotFoundException {\r\n    assertThat(ClassUtils.forName(\"boolean\", classLoader)).isEqualTo(boolean.class);\r\n    assertThat(ClassUtils.forName(\"byte\", classLoader)).isEqualTo(byte.class);\r\n    assertThat(ClassUtils.forName(\"char\", classLoader)).isEqualTo(char.class);\r\n    assertThat(ClassUtils.forName(\"short\", classLoader)).isEqualTo(short.class);\r\n    assertThat(ClassUtils.forName(\"int\", classLoader)).isEqualTo(int.class);\r\n    assertThat(ClassUtils.forName(\"long\", classLoader)).isEqualTo(long.class);\r\n    assertThat(ClassUtils.forName(\"float\", classLoader)).isEqualTo(float.class);\r\n    assertThat(ClassUtils.forName(\"double\", classLoader)).isEqualTo(double.class);\r\n    assertThat(ClassUtils.forName(\"void\", classLoader)).isEqualTo(void.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtilsTests#forNameWithPrimitiveClasses()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#forNameWithPrimitiveClasses()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#forNameWithPrimitiveArrays()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid forNameWithPrimitiveArrays() throws ClassNotFoundException {\r\n    assertThat(ClassUtils.forName(\"boolean[]\", classLoader)).isEqualTo(boolean[].class);\r\n    assertThat(ClassUtils.forName(\"byte[]\", classLoader)).isEqualTo(byte[].class);\r\n    assertThat(ClassUtils.forName(\"char[]\", classLoader)).isEqualTo(char[].class);\r\n    assertThat(ClassUtils.forName(\"short[]\", classLoader)).isEqualTo(short[].class);\r\n    assertThat(ClassUtils.forName(\"int[]\", classLoader)).isEqualTo(int[].class);\r\n    assertThat(ClassUtils.forName(\"long[]\", classLoader)).isEqualTo(long[].class);\r\n    assertThat(ClassUtils.forName(\"float[]\", classLoader)).isEqualTo(float[].class);\r\n    assertThat(ClassUtils.forName(\"double[]\", classLoader)).isEqualTo(double[].class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtilsTests#forNameWithPrimitiveArrays()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#forNameWithPrimitiveArrays()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]