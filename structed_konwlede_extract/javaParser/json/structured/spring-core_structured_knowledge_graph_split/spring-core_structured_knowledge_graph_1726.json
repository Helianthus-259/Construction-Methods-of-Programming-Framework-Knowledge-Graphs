[
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getFromMethodWithNotAnnotated()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getFromMethodWithNotAnnotated() throws Exception {\r\n    Method method = Leaf.class.getMethod(\"notAnnotated\");\r\n    assertThat(method.getAnnotation(Order.class)).isNull();\r\n    assertThat(MergedAnnotations.from(method).get(Order.class).getDistance()).isEqualTo(-1);\r\n    assertThat(MergedAnnotations.from(method, SearchStrategy.TYPE_HIERARCHY).get(Order.class).getDistance()).isEqualTo(-1);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getFromMethodWithNotAnnotated()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getFromMethodWithNotAnnotated()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getFromMethodWithBridgeMethod()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getFromMethodWithBridgeMethod() throws Exception {\r\n    Method method = TransactionalStringGeneric.class.getMethod(\"something\", Object.class);\r\n    assertThat(method.isBridge()).isTrue();\r\n    assertThat(method.getAnnotation(Order.class)).isNull();\r\n    assertThat(MergedAnnotations.from(method).get(Order.class).getDistance()).isEqualTo(-1);\r\n    assertThat(MergedAnnotations.from(method, SearchStrategy.TYPE_HIERARCHY).get(Order.class).getDistance()).isEqualTo(0);\r\n    // As of JDK 8, invoking getAnnotation() on a bridge method actually finds an\r\n    // annotation on its 'bridged' method [1]; however, the Eclipse compiler does\r\n    // not support this [2]. Thus, we effectively ignore the following\r\n    // assertion if the test is currently executing within the Eclipse IDE.\r\n    //\r\n    // [1] https://bugs.openjdk.java.net/browse/JDK-6695379\r\n    // [2] https://bugs.eclipse.org/bugs/show_bug.cgi?id=495396\r\n    //\r\n    if (!IdeUtils.runningInEclipse()) {\r\n        assertThat(method.getAnnotation(Transactional.class)).isNotNull();\r\n    }\r\n    assertThat(MergedAnnotations.from(method).get(Transactional.class).getDistance()).isEqualTo(0);\r\n    assertThat(MergedAnnotations.from(method, SearchStrategy.TYPE_HIERARCHY).get(Transactional.class).getDistance()).isEqualTo(0);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getFromMethodWithBridgeMethod()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getFromMethodWithBridgeMethod()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getFromMethodWithBridgedMethod()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getFromMethodWithBridgedMethod() throws Exception {\r\n    Method method = TransactionalStringGeneric.class.getMethod(\"something\", String.class);\r\n    assertThat(method.isBridge()).isFalse();\r\n    assertThat(method.getAnnotation(Order.class)).isNull();\r\n    assertThat(MergedAnnotations.from(method).get(Order.class).getDistance()).isEqualTo(-1);\r\n    assertThat(MergedAnnotations.from(method, SearchStrategy.TYPE_HIERARCHY).get(Order.class).getDistance()).isEqualTo(0);\r\n    assertThat(method.getAnnotation(Transactional.class)).isNotNull();\r\n    assertThat(MergedAnnotations.from(method).get(Transactional.class).getDistance()).isEqualTo(0);\r\n    assertThat(MergedAnnotations.from(method, SearchStrategy.TYPE_HIERARCHY).get(Transactional.class).getDistance()).isEqualTo(0);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getFromMethodWithBridgedMethod()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getFromMethodWithBridgedMethod()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getFromMethodWithInterface()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getFromMethodWithInterface() throws Exception {\r\n    Method method = ImplementsInterfaceWithAnnotatedMethod.class.getMethod(\"foo\");\r\n    assertThat(MergedAnnotations.from(method, SearchStrategy.TYPE_HIERARCHY).get(Order.class).getDistance()).isEqualTo(0);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getFromMethodWithInterface()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getFromMethodWithInterface()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getFromMethodWithGenericInterface()",
    "headType": "method",
    "relation": "provide",
    "tail": "// SPR-16060\r\n@Test\r\nvoid getFromMethodWithGenericInterface() throws Exception {\r\n    Method method = ImplementsInterfaceWithGenericAnnotatedMethod.class.getMethod(\"foo\", String.class);\r\n    assertThat(MergedAnnotations.from(method, SearchStrategy.TYPE_HIERARCHY).get(Order.class).getDistance()).isEqualTo(0);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getFromMethodWithGenericInterface()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getFromMethodWithGenericInterface()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getFromMethodWithGenericSuperclass()",
    "headType": "method",
    "relation": "provide",
    "tail": "// SPR-17146\r\n@Test\r\nvoid getFromMethodWithGenericSuperclass() throws Exception {\r\n    Method method = ExtendsBaseClassWithGenericAnnotatedMethod.class.getMethod(\"foo\", String.class);\r\n    assertThat(MergedAnnotations.from(method, SearchStrategy.TYPE_HIERARCHY).get(Order.class).getDistance()).isEqualTo(0);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getFromMethodWithGenericSuperclass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getFromMethodWithGenericSuperclass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getFromMethodWithInterfaceOnSuper()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getFromMethodWithInterfaceOnSuper() throws Exception {\r\n    Method method = SubOfImplementsInterfaceWithAnnotatedMethod.class.getMethod(\"foo\");\r\n    assertThat(MergedAnnotations.from(method, SearchStrategy.TYPE_HIERARCHY).get(Order.class).getDistance()).isEqualTo(0);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getFromMethodWithInterfaceOnSuper()",
    "tailType": "method"
  }
]