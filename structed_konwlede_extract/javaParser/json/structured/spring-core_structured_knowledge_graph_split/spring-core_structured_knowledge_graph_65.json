[
  {
    "head": "org.springframework.core.type.AbstractMethodMetadataTests#getAnnotationsReturnsDirectAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getAnnotationsReturnsDirectAnnotations() {\r\n    MethodMetadata metadata = getTagged(WithDirectAnnotation.class);\r\n    assertThat(metadata.getAnnotations().stream().filter(MergedAnnotation::isDirectlyPresent).map(a -> a.getType().getName())).containsExactlyInAnyOrder(Tag.class.getName(), DirectAnnotation.class.getName());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AbstractMethodMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AbstractMethodMetadataTests#getAnnotationsReturnsDirectAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AbstractMethodMetadataTests#getAnnotationsReturnsDirectAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.generate.GeneratedClass",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.type.AbstractMethodMetadataTests#isAnnotatedWhenMatchesDirectAnnotationReturnsTrue()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isAnnotatedWhenMatchesDirectAnnotationReturnsTrue() {\r\n    assertThat(getTagged(WithDirectAnnotation.class).isAnnotated(DirectAnnotation.class.getName())).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AbstractMethodMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AbstractMethodMetadataTests#isAnnotatedWhenMatchesDirectAnnotationReturnsTrue()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AbstractMethodMetadataTests#isAnnotatedWhenMatchesDirectAnnotationReturnsTrue()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.AbstractMethodMetadataTests#isAnnotatedWhenMatchesMetaAnnotationReturnsTrue()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isAnnotatedWhenMatchesMetaAnnotationReturnsTrue() {\r\n    assertThat(getTagged(WithMetaAnnotation.class).isAnnotated(DirectAnnotation.class.getName())).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AbstractMethodMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AbstractMethodMetadataTests#isAnnotatedWhenMatchesMetaAnnotationReturnsTrue()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AbstractMethodMetadataTests#isAnnotatedWhenMatchesMetaAnnotationReturnsTrue()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.AbstractMethodMetadataTests#isAnnotatedWhenDoesNotMatchDirectOrMetaAnnotationReturnsFalse()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isAnnotatedWhenDoesNotMatchDirectOrMetaAnnotationReturnsFalse() {\r\n    assertThat(getTagged(WithMethod.class).isAnnotated(DirectAnnotation.class.getName())).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AbstractMethodMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AbstractMethodMetadataTests#isAnnotatedWhenDoesNotMatchDirectOrMetaAnnotationReturnsFalse()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AbstractMethodMetadataTests#isAnnotatedWhenDoesNotMatchDirectOrMetaAnnotationReturnsFalse()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.AbstractMethodMetadataTests#getAnnotationAttributesReturnsAttributes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getAnnotationAttributesReturnsAttributes() {\r\n    assertThat(getTagged(WithAnnotationAttributes.class).getAnnotationAttributes(AnnotationAttributes.class.getName())).containsOnly(entry(\"name\", \"test\"), entry(\"size\", 1));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AbstractMethodMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AbstractMethodMetadataTests#getAnnotationAttributesReturnsAttributes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AbstractMethodMetadataTests#getAnnotationAttributesReturnsAttributes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.AbstractMethodMetadataTests#getAllAnnotationAttributesReturnsAllAttributes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getAllAnnotationAttributesReturnsAllAttributes() {\r\n    MultiValueMap<String, Object> attributes = getTagged(WithMetaAnnotationAttributes.class).getAllAnnotationAttributes(AnnotationAttributes.class.getName());\r\n    assertThat(attributes).containsOnlyKeys(\"name\", \"size\");\r\n    assertThat(attributes.get(\"name\")).containsExactlyInAnyOrder(\"m1\", \"m2\");\r\n    assertThat(attributes.get(\"size\")).containsExactlyInAnyOrder(1, 2);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AbstractMethodMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AbstractMethodMetadataTests#getAllAnnotationAttributesReturnsAllAttributes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AbstractMethodMetadataTests#getAllAnnotationAttributesReturnsAllAttributes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.AbstractMethodMetadataTests#metadataLoadsForNestedAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "// gh-24375\r\n@Test\r\npublic void metadataLoadsForNestedAnnotations() {\r\n    AnnotationMetadata annotationMetadata = get(AnnotatedComponent.class);\r\n    assertThat(annotationMetadata.getAnnotationTypes()).containsExactly(EnclosingAnnotation.class.getName());\r\n}",
    "tailType": "method_code"
  }
]