[
  {
    "head": "org.springframework.core.io.UrlResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.UrlResource#createRelativeURL(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.UrlResource#getFilename()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation returns the URL-decoded name of the file that this URL\r\n * refers to.\r\n * @see java.net.URL#getPath()\r\n * @see java.net.URLDecoder#decode(String, java.nio.charset.Charset)\r\n */\r\n@Override\r\n@Nullable\r\npublic String getFilename() {\r\n    if (this.uri != null) {\r\n        String path = this.uri.getPath();\r\n        if (path != null) {\r\n            // Prefer URI path: decoded and has standard separators\r\n            return StringUtils.getFilename(this.uri.getPath());\r\n        }\r\n    }\r\n    // Otherwise, process URL path\r\n    String filename = StringUtils.getFilename(StringUtils.cleanPath(this.url.getPath()));\r\n    return (filename != null ? URLDecoder.decode(filename, StandardCharsets.UTF_8) : null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.UrlResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.UrlResource#getFilename()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.UrlResource#getFilename()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.UrlResource#getFilename()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.UrlResource#getDescription()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation returns a description that includes the URL.\r\n */\r\n@Override\r\npublic String getDescription() {\r\n    return \"URL [\" + (this.uri != null ? this.uri : this.url) + \"]\";\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.UrlResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.UrlResource#getDescription()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.UrlResource#getDescription()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.UrlResource#equals(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation compares the underlying URL references.\r\n */\r\n@Override\r\npublic boolean equals(@Nullable Object other) {\r\n    return (this == other || (other instanceof UrlResource that && getCleanedUrl().equals(that.getCleanedUrl())));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.UrlResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.UrlResource#equals(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.UrlResource#equals(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.UrlResource#hashCode()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation returns the hash code of the underlying URL reference.\r\n */\r\n@Override\r\npublic int hashCode() {\r\n    return getCleanedUrl().hashCode();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.UrlResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.UrlResource#hashCode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.UrlResource#hashCode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.UrlResource",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractFileResolvingResource",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.io",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.io",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.VfsResource",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.VfsResource",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URI;\nimport java.net.URL;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.util.Assert;\nimport org.springframework.util.ResourceUtils;\n\n/**\n * JBoss VFS based {@link Resource} implementation.\n *\n * <p>As of Spring 4.0, this class supports VFS 3.x on JBoss AS 6+\n * (package {@code org.jboss.vfs}) and is in particular compatible with\n * JBoss AS 7 and WildFly 8+.\n *\n * @author Ales Justin\n * @author Juergen Hoeller\n * @author Costin Leau\n * @author Sam Brannen\n * @since 3.0\n */\npublic class VfsResource extends AbstractResource {\n\n\tprivate final Object resource;\n\n\n\t/**\n\t * Create a new {@code VfsResource} wrapping the given resource handle.\n\t * @param resource a {@code org.jboss.vfs.VirtualFile} instance\n\t * (untyped in order to avoid a static dependency on the VFS API)\n\t */\n\tpublic VfsResource(Object resource) {\n\t\tAssert.notNull(resource, \"VirtualFile must not be null\");\n\t\tthis.resource = resource;\n\t}\n\n\n\t@Override\n\tpublic InputStream getInputStream() throws IOException {\n\t\treturn VfsUtils.getInputStream(this.resource);\n\t}\n\n\t@Override\n\tpublic boolean exists() {\n\t\treturn VfsUtils.exists(this.resource);\n\t}\n\n\t@Override\n\tpublic boolean isReadable() {\n\t\treturn VfsUtils.isReadable(this.resource);\n\t}\n\n\t@Override\n\tpublic URL getURL() throws IOException {\n\t\ttry {\n\t\t\treturn VfsUtils.getURL(this.resource);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tthrow new IOException(\"Failed to obtain URL for file \" + this.resource, ex);\n\t\t}\n\t}\n\n\t@Override\n\tpublic URI getURI() throws IOException {\n\t\ttry {\n\t\t\treturn VfsUtils.getURI(this.resource);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tthrow new IOException(\"Failed to obtain URI for \" + this.resource, ex);\n\t\t}\n\t}\n\n\t@Override\n\tpublic File getFile() throws IOException {\n\t\treturn VfsUtils.getFile(this.resource);\n\t}\n\n\t@Override\n\tpublic long contentLength() throws IOException {\n\t\treturn VfsUtils.getSize(this.resource);\n\t}\n\n\t@Override\n\tpublic long lastModified() throws IOException {\n\t\treturn VfsUtils.getLastModified(this.resource);\n\t}\n\n\t@Override\n\tpublic Resource createRelative(String relativePath) throws IOException {\n\t\tif (!relativePath.startsWith(\".\") && relativePath.contains(\"/\")) {\n\t\t\ttry {\n\t\t\t\treturn new VfsResource(VfsUtils.getChild(this.resource, relativePath));\n\t\t\t}\n\t\t\tcatch (IOException ex) {\n\t\t\t\t// fall back to getRelative\n\t\t\t}\n\t\t}\n\n\t\treturn new VfsResource(VfsUtils.getRelative(ResourceUtils.toRelativeURL(getURL(), relativePath)));\n\t}\n\n\t@Override\n\tpublic String getFilename() {\n\t\treturn VfsUtils.getName(this.resource);\n\t}\n\n\t@Override\n\tpublic String getDescription() {\n\t\treturn \"VFS resource [\" + this.resource + \"]\";\n\t}\n\n\t@Override\n\tpublic boolean equals(@Nullable Object other) {\n\t\treturn (this == other || (other instanceof VfsResource that && this.resource.equals(that.resource)));\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\treturn this.resource.hashCode();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.VfsResource",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.VfsResource#resource",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.VfsResource#resource",
    "headType": "field",
    "relation": "haveType",
    "tail": "Object",
    "tailType": "type"
  }
]