[
  {
    "head": "org.springframework.util.backoff.BackOff",
    "headType": "class",
    "relation": "use",
    "tail": "@FunctionalInterface",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.backoff.BackOff",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util.backoff;\n\n/**\n * Provide a {@link BackOffExecution} that indicates the rate at which\n * an operation should be retried.\n *\n * <p>Users of this interface are expected to use it like this:\n *\n * <pre class=\"code\">\n * BackOffExecution exec = backOff.start();\n *\n * // In the operation recovery/retry loop:\n * long waitInterval = exec.nextBackOff();\n * if (waitInterval == BackOffExecution.STOP) {\n *     // do not retry operation\n * }\n * else {\n *     // sleep, for example, Thread.sleep(waitInterval)\n *     // retry operation\n * }</pre>\n *\n * Once the underlying operation has completed successfully,\n * the execution instance can be discarded.\n *\n * @author Stephane Nicoll\n * @since 4.1\n * @see BackOffExecution\n */\n@FunctionalInterface\npublic interface BackOff {\n\n\t/**\n\t * Start a new back off execution.\n\t * @return a fresh {@link BackOffExecution} ready to be used\n\t */\n\tBackOffExecution start();\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.backoff.BackOff#start()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Start a new back off execution.\r\n * @return a fresh {@link BackOffExecution} ready to be used\r\n */\r\nBackOffExecution start();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.backoff.BackOff",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.backoff.BackOff#start()",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util.backoff",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util.backoff",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.backoff.BackOffExecution",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.backoff.BackOffExecution",
    "headType": "class",
    "relation": "use",
    "tail": "@FunctionalInterface",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.backoff.BackOffExecution",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util.backoff;\n\n/**\n * Represent a particular back-off execution.\n *\n * <p>Implementations do not need to be thread safe.\n *\n * @author Stephane Nicoll\n * @since 4.1\n * @see BackOff\n */\n@FunctionalInterface\npublic interface BackOffExecution {\n\n\t/**\n\t * Return value of {@link #nextBackOff()} that indicates that the operation\n\t * should not be retried.\n\t */\n\tlong STOP = -1;\n\n\t/**\n\t * Return the number of milliseconds to wait before retrying the operation\n\t * or {@link #STOP} ({@value #STOP}) to indicate that no further attempt\n\t * should be made for the operation.\n\t */\n\tlong nextBackOff();\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.backoff.BackOffExecution",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.backoff.BackOffExecution#STOP",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.backoff.BackOffExecution#STOP",
    "headType": "field",
    "relation": "haveType",
    "tail": "long",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.backoff.BackOffExecution#nextBackOff()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the number of milliseconds to wait before retrying the operation\r\n * or {@link #STOP} ({@value #STOP}) to indicate that no further attempt\r\n * should be made for the operation.\r\n */\r\nlong nextBackOff();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.backoff.BackOffExecution",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.backoff.BackOffExecution#nextBackOff()",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util.backoff",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util.backoff",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.backoff.ExponentialBackOff",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.backoff.ExponentialBackOff",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util.backoff;\n\nimport java.util.StringJoiner;\n\nimport org.springframework.util.Assert;\n\n/**\n * Implementation of {@link BackOff} that increases the back off period for each\n * retry attempt. When the interval has reached the {@linkplain #setMaxInterval\n * max interval}, it is no longer increased. Stops retrying once the\n * {@linkplain #setMaxElapsedTime max elapsed time} has been reached.\n *\n * <p>Example: The default interval is {@value #DEFAULT_INITIAL_INTERVAL} ms;\n * the default multiplier is {@value #DEFAULT_MULTIPLIER}; and the default max\n * interval is {@value #DEFAULT_MAX_INTERVAL}. For 10 attempts the sequence will be\n * as follows:\n *\n * <pre>\n * request#     back off\n *\n *  1              2000\n *  2              3000\n *  3              4500\n *  4              6750\n *  5             10125\n *  6             15187\n *  7             22780\n *  8             30000\n *  9             30000\n * 10             30000\n * </pre>\n *\n * <p>Note that the default max elapsed time is {@link Long#MAX_VALUE}, and the\n * default maximum number of attempts is {@link Integer#MAX_VALUE}.\n * Use {@link #setMaxElapsedTime} to limit the length of time that an instance\n * should accumulate before returning {@link BackOffExecution#STOP}. Alternatively,\n * use {@link #setMaxAttempts} to limit the number of attempts. The execution\n * stops when either of those two limits is reached.\n *\n * @author Stephane Nicoll\n * @author Gary Russell\n * @since 4.1\n */\npublic class ExponentialBackOff implements BackOff {\n\n\t/**\n\t * The default initial interval.\n\t */\n\tpublic static final long DEFAULT_INITIAL_INTERVAL = 2000L;\n\n\t/**\n\t * The default multiplier (increases the interval by 50%).\n\t */\n\tpublic static final double DEFAULT_MULTIPLIER = 1.5;\n\n\t/**\n\t * The default maximum back off time.\n\t */\n\tpublic static final long DEFAULT_MAX_INTERVAL = 30000L;\n\n\t/**\n\t * The default maximum elapsed time.\n\t */\n\tpublic static final long DEFAULT_MAX_ELAPSED_TIME = Long.MAX_VALUE;\n\n\t/**\n\t * The default maximum attempts.\n\t * @since 6.1\n\t */\n\tpublic static final int DEFAULT_MAX_ATTEMPTS = Integer.MAX_VALUE;\n\n\tprivate long initialInterval = DEFAULT_INITIAL_INTERVAL;\n\n\tprivate double multiplier = DEFAULT_MULTIPLIER;\n\n\tprivate long maxInterval = DEFAULT_MAX_INTERVAL;\n\n\tprivate long maxElapsedTime = DEFAULT_MAX_ELAPSED_TIME;\n\n\tprivate int maxAttempts = DEFAULT_MAX_ATTEMPTS;\n\n\n\t/**\n\t * Create an instance with the default settings.\n\t * @see #DEFAULT_INITIAL_INTERVAL\n\t * @see #DEFAULT_MULTIPLIER\n\t * @see #DEFAULT_MAX_INTERVAL\n\t * @see #DEFAULT_MAX_ELAPSED_TIME\n\t * @see #DEFAULT_MAX_ATTEMPTS\n\t */\n\tpublic ExponentialBackOff() {\n\t}\n\n\t/**\n\t * Create an instance with the supplied settings.\n\t * @param initialInterval the initial interval in milliseconds\n\t * @param multiplier the multiplier (should be greater than or equal to 1)\n\t */\n\tpublic ExponentialBackOff(long initialInterval, double multiplier) {\n\t\tcheckMultiplier(multiplier);\n\t\tthis.initialInterval = initialInterval;\n\t\tthis.multiplier = multiplier;\n\t}\n\n\n\t/**\n\t * Set the initial interval in milliseconds.\n\t */\n\tpublic void setInitialInterval(long initialInterval) {\n\t\tthis.initialInterval = initialInterval;\n\t}\n\n\t/**\n\t * Return the initial interval in milliseconds.\n\t */\n\tpublic long getInitialInterval() {\n\t\treturn this.initialInterval;\n\t}\n\n\t/**\n\t * Set the value to multiply the current interval by for each retry attempt.\n\t */\n\tpublic void setMultiplier(double multiplier) {\n\t\tcheckMultiplier(multiplier);\n\t\tthis.multiplier = multiplier;\n\t}\n\n\t/**\n\t * Return the value to multiply the current interval by for each retry attempt.\n\t */\n\tpublic double getMultiplier() {\n\t\treturn this.multiplier;\n\t}\n\n\t/**\n\t * Set the maximum back off time in milliseconds.\n\t */\n\tpublic void setMaxInterval(long maxInterval) {\n\t\tthis.maxInterval = maxInterval;\n\t}\n\n\t/**\n\t * Return the maximum back off time in milliseconds.\n\t */\n\tpublic long getMaxInterval() {\n\t\treturn this.maxInterval;\n\t}\n\n\t/**\n\t * Set the maximum elapsed time in milliseconds after which a call to\n\t * {@link BackOffExecution#nextBackOff()} returns {@link BackOffExecution#STOP}.\n\t * @param maxElapsedTime the maximum elapsed time\n\t * @see #setMaxAttempts\n\t */\n\tpublic void setMaxElapsedTime(long maxElapsedTime) {\n\t\tthis.maxElapsedTime = maxElapsedTime;\n\t}\n\n\t/**\n\t * Return the maximum elapsed time in milliseconds after which a call to\n\t * {@link BackOffExecution#nextBackOff()} returns {@link BackOffExecution#STOP}.\n\t * @return the maximum elapsed time\n\t * @see #getMaxAttempts()\n\t */\n\tpublic long getMaxElapsedTime() {\n\t\treturn this.maxElapsedTime;\n\t}\n\n\t/**\n\t * The maximum number of attempts after which a call to\n\t * {@link BackOffExecution#nextBackOff()} returns {@link BackOffExecution#STOP}.\n\t * @param maxAttempts the maximum number of attempts\n\t * @since 6.1\n\t * @see #setMaxElapsedTime\n\t */\n\tpublic void setMaxAttempts(int maxAttempts) {\n\t\tthis.maxAttempts = maxAttempts;\n\t}\n\n\t/**\n\t * Return the maximum number of attempts after which a call to\n\t * {@link BackOffExecution#nextBackOff()} returns {@link BackOffExecution#STOP}.\n\t * @return the maximum number of attempts\n\t * @since 6.1\n\t * @see #getMaxElapsedTime()\n\t */\n\tpublic int getMaxAttempts() {\n\t\treturn this.maxAttempts;\n\t}\n\n\t@Override\n\tpublic BackOffExecution start() {\n\t\treturn new ExponentialBackOffExecution();\n\t}\n\n\tprivate void checkMultiplier(double multiplier) {\n\t\tAssert.isTrue(multiplier >= 1, () -> \"Invalid multiplier '\" + multiplier + \"'. Should be greater than \" +\n\t\t\t\t\t\"or equal to 1. A multiplier of 1 is equivalent to a fixed interval.\");\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn new StringJoiner(\", \", ExponentialBackOff.class.getSimpleName() + \"{\", \"}\")\n\t\t\t\t.add(\"initialInterval=\" + this.initialInterval)\n\t\t\t\t.add(\"multiplier=\" + this.multiplier)\n\t\t\t\t.add(\"maxInterval=\" + this.maxInterval)\n\t\t\t\t.add(\"maxElapsedTime=\" + this.maxElapsedTime)\n\t\t\t\t.add(\"maxAttempts=\" + this.maxAttempts)\n\t\t\t\t.toString();\n\t}\n\n\tprivate class ExponentialBackOffExecution implements BackOffExecution {\n\n\t\tprivate long currentInterval = -1;\n\n\t\tprivate long currentElapsedTime = 0;\n\n\t\tprivate int attempts;\n\n\t\t@Override\n\t\tpublic long nextBackOff() {\n\t\t\tif (this.currentElapsedTime >= getMaxElapsedTime() || this.attempts >= getMaxAttempts()) {\n\t\t\t\treturn STOP;\n\t\t\t}\n\t\t\tlong nextInterval = computeNextInterval();\n\t\t\tthis.currentElapsedTime += nextInterval;\n\t\t\tthis.attempts++;\n\t\t\treturn nextInterval;\n\t\t}\n\n\t\tprivate long computeNextInterval() {\n\t\t\tlong maxInterval = getMaxInterval();\n\t\t\tif (this.currentInterval >= maxInterval) {\n\t\t\t\treturn maxInterval;\n\t\t\t}\n\t\t\telse if (this.currentInterval < 0) {\n\t\t\t\tlong initialInterval = getInitialInterval();\n\t\t\t\tthis.currentInterval = Math.min(initialInterval, maxInterval);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.currentInterval = multiplyInterval(maxInterval);\n\t\t\t}\n\t\t\treturn this.currentInterval;\n\t\t}\n\n\t\tprivate long multiplyInterval(long maxInterval) {\n\t\t\tlong i = this.currentInterval;\n\t\t\ti *= getMultiplier();\n\t\t\treturn Math.min(i, maxInterval);\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\tString currentIntervalDescription = this.currentInterval < 0 ? \"n/a\" : this.currentInterval + \"ms\";\n\t\t\treturn new StringJoiner(\", \", ExponentialBackOffExecution.class.getSimpleName() + \"{\", \"}\")\n\t\t\t\t\t.add(\"currentInterval=\" + currentIntervalDescription)\n\t\t\t\t\t.add(\"multiplier=\" + getMultiplier())\n\t\t\t\t\t.add(\"attempts=\" + this.attempts)\n\t\t\t\t\t.toString();\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.backoff.ExponentialBackOff",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.backoff.ExponentialBackOff#DEFAULT_INITIAL_INTERVAL",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.backoff.ExponentialBackOff#DEFAULT_INITIAL_INTERVAL",
    "headType": "field",
    "relation": "haveType",
    "tail": "long",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.backoff.ExponentialBackOff",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.backoff.ExponentialBackOff#DEFAULT_MULTIPLIER",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.backoff.ExponentialBackOff#DEFAULT_MULTIPLIER",
    "headType": "field",
    "relation": "haveType",
    "tail": "double",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.backoff.ExponentialBackOff",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.backoff.ExponentialBackOff#DEFAULT_MAX_INTERVAL",
    "tailType": "field"
  }
]