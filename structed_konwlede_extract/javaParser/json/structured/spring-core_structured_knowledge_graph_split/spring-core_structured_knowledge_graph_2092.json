[
  {
    "head": "org.springframework.core.ResolvableTypeTests#forInstanceNoProvider()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid forInstanceNoProvider() {\r\n    ResolvableType type = ResolvableType.forInstance(new Object());\r\n    assertThat(type.getType()).isEqualTo(Object.class);\r\n    assertThat(type.resolve()).isEqualTo(Object.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#forInstanceNoProvider()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#forInstanceNoProvider()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#forInstanceProvider()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid forInstanceProvider() {\r\n    ResolvableType type = ResolvableType.forInstance(new MyGenericInterfaceType<>(String.class));\r\n    assertThat(type.getRawClass()).isEqualTo(MyGenericInterfaceType.class);\r\n    assertThat(type.getGeneric().resolve()).isEqualTo(String.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#forInstanceProvider()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#forInstanceProvider()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#forInstanceProviderNull()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid forInstanceProviderNull() {\r\n    ResolvableType type = ResolvableType.forInstance(new MyGenericInterfaceType<>(null));\r\n    assertThat(type.getType()).isEqualTo(MyGenericInterfaceType.class);\r\n    assertThat(type.resolve()).isEqualTo(MyGenericInterfaceType.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#forInstanceProviderNull()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#forInstanceProviderNull()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#forField()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid forField() throws Exception {\r\n    Field field = Fields.class.getField(\"charSequenceList\");\r\n    ResolvableType type = ResolvableType.forField(field);\r\n    assertThat(type.getType()).isEqualTo(field.getGenericType());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#forField()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#forField()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#forPrivateField()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid forPrivateField() throws Exception {\r\n    Field field = Fields.class.getDeclaredField(\"privateField\");\r\n    ResolvableType type = ResolvableType.forField(field);\r\n    assertThat(type.getType()).isEqualTo(field.getGenericType());\r\n    assertThat(type.resolve()).isEqualTo(List.class);\r\n    assertThat(type.getSource()).isSameAs(field);\r\n    Field field2 = Fields.class.getDeclaredField(\"otherPrivateField\");\r\n    ResolvableType type2 = ResolvableType.forField(field2);\r\n    assertThat(type2.getType()).isEqualTo(field2.getGenericType());\r\n    assertThat(type2.resolve()).isEqualTo(List.class);\r\n    assertThat(type2.getSource()).isSameAs(field2);\r\n    assertThat(type2).isEqualTo(type);\r\n    assertThat(type2.hashCode()).isEqualTo(type.hashCode());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#forPrivateField()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#forPrivateField()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#forFieldMustNotBeNull()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid forFieldMustNotBeNull() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> ResolvableType.forField(null)).withMessage(\"Field must not be null\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#forFieldMustNotBeNull()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#forFieldMustNotBeNull()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#forConstructorParameter()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid forConstructorParameter() throws Exception {\r\n    Constructor<Constructors> constructor = Constructors.class.getConstructor(List.class);\r\n    ResolvableType type = ResolvableType.forConstructorParameter(constructor, 0);\r\n    assertThat(type.getType()).isEqualTo(constructor.getGenericParameterTypes()[0]);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#forConstructorParameter()",
    "tailType": "method"
  }
]