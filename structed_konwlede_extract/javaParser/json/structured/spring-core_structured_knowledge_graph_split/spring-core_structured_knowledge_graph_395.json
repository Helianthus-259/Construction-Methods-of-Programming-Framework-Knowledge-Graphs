[
  {
    "head": "org.springframework.asm",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.asm.Context",
    "tailType": "class"
  },
  {
    "head": "org.springframework.asm.Context",
    "headType": "class",
    "relation": "provide",
    "tail": "// ASM: a very small and fast Java bytecode manipulation framework\n// Copyright (c) 2000-2011 INRIA, France Telecom\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions\n// are met:\n// 1. Redistributions of source code must retain the above copyright\n//    notice, this list of conditions and the following disclaimer.\n// 2. Redistributions in binary form must reproduce the above copyright\n//    notice, this list of conditions and the following disclaimer in the\n//    documentation and/or other materials provided with the distribution.\n// 3. Neither the name of the copyright holders nor the names of its\n//    contributors may be used to endorse or promote products derived from\n//    this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n// THE POSSIBILITY OF SUCH DAMAGE.\n\npackage org.springframework.asm;\n\n/**\n * Information about a class being parsed in a {@link ClassReader}.\n *\n * @author Eric Bruneton\n */\nfinal class Context {\n\n  /** The prototypes of the attributes that must be parsed in this class. */\n  Attribute[] attributePrototypes;\n\n  /**\n   * The options used to parse this class. One or more of {@link ClassReader#SKIP_CODE}, {@link\n   * ClassReader#SKIP_DEBUG}, {@link ClassReader#SKIP_FRAMES}, {@link ClassReader#EXPAND_FRAMES} or\n   * {@link ClassReader#EXPAND_ASM_INSNS}.\n   */\n  int parsingOptions;\n\n  /** The buffer used to read strings in the constant pool. */\n  char[] charBuffer;\n\n  // Information about the current method, i.e. the one read in the current (or latest) call\n  // to {@link ClassReader#readMethod()}.\n\n  /** The access flags of the current method. */\n  int currentMethodAccessFlags;\n\n  /** The name of the current method. */\n  String currentMethodName;\n\n  /** The descriptor of the current method. */\n  String currentMethodDescriptor;\n\n  /**\n   * The labels of the current method, indexed by bytecode offset (only bytecode offsets for which a\n   * label is needed have a non null associated Label).\n   */\n  Label[] currentMethodLabels;\n\n  // Information about the current type annotation target, i.e. the one read in the current\n  // (or latest) call to {@link ClassReader#readAnnotationTarget()}.\n\n  /**\n   * The target_type and target_info of the current type annotation target, encoded as described in\n   * {@link TypeReference}.\n   */\n  int currentTypeAnnotationTarget;\n\n  /** The target_path of the current type annotation target. */\n  TypePath currentTypeAnnotationTargetPath;\n\n  /** The start of each local variable range in the current local variable annotation. */\n  Label[] currentLocalVariableAnnotationRangeStarts;\n\n  /** The end of each local variable range in the current local variable annotation. */\n  Label[] currentLocalVariableAnnotationRangeEnds;\n\n  /**\n   * The local variable index of each local variable range in the current local variable annotation.\n   */\n  int[] currentLocalVariableAnnotationRangeIndices;\n\n  // Information about the current stack map frame, i.e. the one read in the current (or latest)\n  // call to {@link ClassReader#readFrame()}.\n\n  /** The bytecode offset of the current stack map frame. */\n  int currentFrameOffset;\n\n  /**\n   * The type of the current stack map frame. One of {@link Opcodes#F_FULL}, {@link\n   * Opcodes#F_APPEND}, {@link Opcodes#F_CHOP}, {@link Opcodes#F_SAME} or {@link Opcodes#F_SAME1}.\n   */\n  int currentFrameType;\n\n  /**\n   * The number of local variable types in the current stack map frame. Each type is represented\n   * with a single array element (even long and double).\n   */\n  int currentFrameLocalCount;\n\n  /**\n   * The delta number of local variable types in the current stack map frame (each type is\n   * represented with a single array element - even long and double). This is the number of local\n   * variable types in this frame, minus the number of local variable types in the previous frame.\n   */\n  int currentFrameLocalCountDelta;\n\n  /**\n   * The types of the local variables in the current stack map frame. Each type is represented with\n   * a single array element (even long and double), using the format described in {@link\n   * MethodVisitor#visitFrame}. Depending on {@link #currentFrameType}, this contains the types of\n   * all the local variables, or only those of the additional ones (compared to the previous frame).\n   */\n  Object[] currentFrameLocalTypes;\n\n  /**\n   * The number stack element types in the current stack map frame. Each type is represented with a\n   * single array element (even long and double).\n   */\n  int currentFrameStackCount;\n\n  /**\n   * The types of the stack elements in the current stack map frame. Each type is represented with a\n   * single array element (even long and double), using the format described in {@link\n   * MethodVisitor#visitFrame}.\n   */\n  Object[] currentFrameStackTypes;\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.asm.Context",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.Context#attributePrototypes",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.Context#attributePrototypes",
    "headType": "field",
    "relation": "haveType",
    "tail": "Attribute",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.Context",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.Context#parsingOptions",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.Context#parsingOptions",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.Context",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.Context#charBuffer",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.Context#charBuffer",
    "headType": "field",
    "relation": "haveType",
    "tail": "char",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.Context",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.Context#currentMethodAccessFlags",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.Context#currentMethodAccessFlags",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.Context",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.Context#currentMethodName",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.Context#currentMethodName",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.Context",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.Context#currentMethodDescriptor",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.Context#currentMethodDescriptor",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.Context",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.Context#currentMethodLabels",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.Context#currentMethodLabels",
    "headType": "field",
    "relation": "haveType",
    "tail": "Label",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.Context",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.Context#currentTypeAnnotationTarget",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.Context#currentTypeAnnotationTarget",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.Context",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.Context#currentTypeAnnotationTargetPath",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.Context#currentTypeAnnotationTargetPath",
    "headType": "field",
    "relation": "haveType",
    "tail": "TypePath",
    "tailType": "type"
  }
]