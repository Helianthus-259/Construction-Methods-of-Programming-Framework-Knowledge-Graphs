[
  {
    "head": "org.springframework.util.TypeUtils#isAssignable(WildcardType,Type)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static boolean isAssignable(WildcardType lhsType, Type rhsType) {\r\n    Type[] lUpperBounds = getUpperBounds(lhsType);\r\n    Type[] lLowerBounds = getLowerBounds(lhsType);\r\n    if (rhsType instanceof WildcardType rhsWcType) {\r\n        // both the upper and lower bounds of the right-hand side must be\r\n        // completely enclosed in the upper and lower bounds of the left-\r\n        // hand side.\r\n        Type[] rUpperBounds = getUpperBounds(rhsWcType);\r\n        Type[] rLowerBounds = getLowerBounds(rhsWcType);\r\n        for (Type lBound : lUpperBounds) {\r\n            for (Type rBound : rUpperBounds) {\r\n                if (!isAssignableBound(lBound, rBound)) {\r\n                    return false;\r\n                }\r\n            }\r\n            for (Type rBound : rLowerBounds) {\r\n                if (!isAssignableBound(lBound, rBound)) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        for (Type lBound : lLowerBounds) {\r\n            for (Type rBound : rUpperBounds) {\r\n                if (!isAssignableBound(rBound, lBound)) {\r\n                    return false;\r\n                }\r\n            }\r\n            for (Type rBound : rLowerBounds) {\r\n                if (!isAssignableBound(rBound, lBound)) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        for (Type lBound : lUpperBounds) {\r\n            if (!isAssignableBound(lBound, rhsType)) {\r\n                return false;\r\n            }\r\n        }\r\n        for (Type lBound : lLowerBounds) {\r\n            if (!isAssignableBound(rhsType, lBound)) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.TypeUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.TypeUtils#isAssignable(WildcardType,Type)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.TypeUtils#getLowerBounds(WildcardType)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static Type[] getLowerBounds(WildcardType wildcardType) {\r\n    Type[] lowerBounds = wildcardType.getLowerBounds();\r\n    // supply the implicit lower bound if none are specified\r\n    return (lowerBounds.length == 0 ? IMPLICIT_LOWER_BOUNDS : lowerBounds);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.TypeUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.TypeUtils#getLowerBounds(WildcardType)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.TypeUtils#getUpperBounds(WildcardType)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static Type[] getUpperBounds(WildcardType wildcardType) {\r\n    Type[] upperBounds = wildcardType.getUpperBounds();\r\n    // supply the implicit upper bound if none are specified\r\n    return (upperBounds.length == 0 ? IMPLICIT_UPPER_BOUNDS : upperBounds);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.TypeUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.TypeUtils#getUpperBounds(WildcardType)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.TypeUtils#isAssignableBound(Type,Type)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static boolean isAssignableBound(@Nullable Type lhsType, @Nullable Type rhsType) {\r\n    if (rhsType == null) {\r\n        return true;\r\n    }\r\n    if (lhsType == null) {\r\n        return false;\r\n    }\r\n    return isAssignable(lhsType, rhsType);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.TypeUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.TypeUtils#isAssignableBound(Type,Type)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util.unit",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util.unit",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.unit.DataSize",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.unit.DataSize",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.unit.DataSize",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util.unit;\n\nimport java.io.Serializable;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.util.Assert;\nimport org.springframework.util.StringUtils;\n\n/**\n * A data size, such as '12MB'. This class models data size in terms of\n * bytes and is immutable and thread-safe.\n *\n * <p>The terms and units used in this class are based on\n * <a href=\"https://en.wikipedia.org/wiki/Binary_prefix\">binary prefixes</a>\n * indicating multiplication by powers of 2. Consult the following table and\n * the Javadoc for {@link DataUnit} for details.\n *\n * <p>\n * <table border=\"1\">\n * <tr><th>Term</th><th>Data Size</th><th>Size in Bytes</th></tr>\n * <tr><td>byte</td><td>1B</td><td>1</td></tr>\n * <tr><td>kilobyte</td><td>1KB</td><td>1,024</td></tr>\n * <tr><td>megabyte</td><td>1MB</td><td>1,048,576</td></tr>\n * <tr><td>gigabyte</td><td>1GB</td><td>1,073,741,824</td></tr>\n * <tr><td>terabyte</td><td>1TB</td><td>1,099,511,627,776</td></tr>\n * </table>\n *\n * @author Stephane Nicoll\n * @author Sam Brannen\n * @since 5.1\n * @see DataUnit\n */\n@SuppressWarnings(\"serial\")\npublic final class DataSize implements Comparable<DataSize>, Serializable {\n\n\t/**\n\t * Bytes per Kilobyte.\n\t */\n\tprivate static final long BYTES_PER_KB = 1024;\n\n\t/**\n\t * Bytes per Megabyte.\n\t */\n\tprivate static final long BYTES_PER_MB = BYTES_PER_KB * 1024;\n\n\t/**\n\t * Bytes per Gigabyte.\n\t */\n\tprivate static final long BYTES_PER_GB = BYTES_PER_MB * 1024;\n\n\t/**\n\t * Bytes per Terabyte.\n\t */\n\tprivate static final long BYTES_PER_TB = BYTES_PER_GB * 1024;\n\n\n\tprivate final long bytes;\n\n\n\tprivate DataSize(long bytes) {\n\t\tthis.bytes = bytes;\n\t}\n\n\n\t/**\n\t * Obtain a {@link DataSize} representing the specified number of bytes.\n\t * @param bytes the number of bytes, positive or negative\n\t * @return a {@code DataSize}\n\t */\n\tpublic static DataSize ofBytes(long bytes) {\n\t\treturn new DataSize(bytes);\n\t}\n\n\t/**\n\t * Obtain a {@link DataSize} representing the specified number of kilobytes.\n\t * @param kilobytes the number of kilobytes, positive or negative\n\t * @return a {@code DataSize}\n\t */\n\tpublic static DataSize ofKilobytes(long kilobytes) {\n\t\treturn new DataSize(Math.multiplyExact(kilobytes, BYTES_PER_KB));\n\t}\n\n\t/**\n\t * Obtain a {@link DataSize} representing the specified number of megabytes.\n\t * @param megabytes the number of megabytes, positive or negative\n\t * @return a {@code DataSize}\n\t */\n\tpublic static DataSize ofMegabytes(long megabytes) {\n\t\treturn new DataSize(Math.multiplyExact(megabytes, BYTES_PER_MB));\n\t}\n\n\t/**\n\t * Obtain a {@link DataSize} representing the specified number of gigabytes.\n\t * @param gigabytes the number of gigabytes, positive or negative\n\t * @return a {@code DataSize}\n\t */\n\tpublic static DataSize ofGigabytes(long gigabytes) {\n\t\treturn new DataSize(Math.multiplyExact(gigabytes, BYTES_PER_GB));\n\t}\n\n\t/**\n\t * Obtain a {@link DataSize} representing the specified number of terabytes.\n\t * @param terabytes the number of terabytes, positive or negative\n\t * @return a {@code DataSize}\n\t */\n\tpublic static DataSize ofTerabytes(long terabytes) {\n\t\treturn new DataSize(Math.multiplyExact(terabytes, BYTES_PER_TB));\n\t}\n\n\t/**\n\t * Obtain a {@link DataSize} representing an amount in the specified {@link DataUnit}.\n\t * @param amount the amount of the size, measured in terms of the unit,\n\t * positive or negative\n\t * @return a corresponding {@code DataSize}\n\t */\n\tpublic static DataSize of(long amount, DataUnit unit) {\n\t\tAssert.notNull(unit, \"Unit must not be null\");\n\t\treturn new DataSize(Math.multiplyExact(amount, unit.size().toBytes()));\n\t}\n\n\t/**\n\t * Obtain a {@link DataSize} from a text string such as {@code 12MB} using\n\t * {@link DataUnit#BYTES} if no unit is specified.\n\t * <p>Examples:\n\t * <pre>\n\t * \"12KB\" -- parses as \"12 kilobytes\"\n\t * \"5MB\"  -- parses as \"5 megabytes\"\n\t * \"20\"   -- parses as \"20 bytes\"\n\t * </pre>\n\t * @param text the text to parse\n\t * @return the parsed {@code DataSize}\n\t * @see #parse(CharSequence, DataUnit)\n\t */\n\tpublic static DataSize parse(CharSequence text) {\n\t\treturn parse(text, null);\n\t}\n\n\t/**\n\t * Obtain a {@link DataSize} from a text string such as {@code 12MB} using\n\t * the specified default {@link DataUnit} if no unit is specified.\n\t * <p>The string starts with a number followed optionally by a unit matching\n\t * one of the supported {@linkplain DataUnit suffixes}.\n\t * <p>If neither a unit nor a default {@code DataUnit} is specified,\n\t * {@link DataUnit#BYTES} will be inferred.\n\t * <p>Examples:\n\t * <pre>\n\t * \"12KB\" -- parses as \"12 kilobytes\"\n\t * \"5MB\"  -- parses as \"5 megabytes\"\n\t * \"20\"   -- parses as \"20 kilobytes\" (where the {@code defaultUnit} is {@link DataUnit#KILOBYTES})\n\t * \"20\"   -- parses as \"20 bytes\" (if the {@code defaultUnit} is {@code null})\n\t * </pre>\n\t * @param text the text to parse\n\t * @param defaultUnit the default {@code DataUnit} to use\n\t * @return the parsed {@code DataSize}\n\t */\n\tpublic static DataSize parse(CharSequence text, @Nullable DataUnit defaultUnit) {\n\t\tAssert.notNull(text, \"Text must not be null\");\n\t\ttry {\n\t\t\tCharSequence trimmedText = StringUtils.trimAllWhitespace(text);\n\t\t\tMatcher matcher = DataSizeUtils.PATTERN.matcher(trimmedText);\n\t\t\tAssert.state(matcher.matches(), () -> \"'\" + text + \"' does not match data size pattern\");\n\t\t\tDataUnit unit = DataSizeUtils.determineDataUnit(matcher.group(2), defaultUnit);\n\t\t\tlong amount = Long.parseLong(trimmedText, matcher.start(1), matcher.end(1), 10);\n\t\t\treturn DataSize.of(amount, unit);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tthrow new IllegalArgumentException(\"'\" + text + \"' is not a valid data size\", ex);\n\t\t}\n\t}\n\n\t/**\n\t * Checks if this size is negative, excluding zero.\n\t * @return true if this size has a size less than zero bytes\n\t */\n\tpublic boolean isNegative() {\n\t\treturn this.bytes < 0;\n\t}\n\n\t/**\n\t * Return the number of bytes in this instance.\n\t * @return the number of bytes\n\t */\n\tpublic long toBytes() {\n\t\treturn this.bytes;\n\t}\n\n\t/**\n\t * Return the number of kilobytes in this instance.\n\t * @return the number of kilobytes\n\t */\n\tpublic long toKilobytes() {\n\t\treturn this.bytes / BYTES_PER_KB;\n\t}\n\n\t/**\n\t * Return the number of megabytes in this instance.\n\t * @return the number of megabytes\n\t */\n\tpublic long toMegabytes() {\n\t\treturn this.bytes / BYTES_PER_MB;\n\t}\n\n\t/**\n\t * Return the number of gigabytes in this instance.\n\t * @return the number of gigabytes\n\t */\n\tpublic long toGigabytes() {\n\t\treturn this.bytes / BYTES_PER_GB;\n\t}\n\n\t/**\n\t * Return the number of terabytes in this instance.\n\t * @return the number of terabytes\n\t */\n\tpublic long toTerabytes() {\n\t\treturn this.bytes / BYTES_PER_TB;\n\t}\n\n\t@Override\n\tpublic int compareTo(DataSize other) {\n\t\treturn Long.compare(this.bytes, other.bytes);\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn String.format(\"%dB\", this.bytes);\n\t}\n\n\n\t@Override\n\tpublic boolean equals(@Nullable Object other) {\n\t\tif (this == other) {\n\t\t\treturn true;\n\t\t}\n\t\tif (other == null || getClass() != other.getClass()) {\n\t\t\treturn false;\n\t\t}\n\t\tDataSize that = (DataSize) other;\n\t\treturn (this.bytes == that.bytes);\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\treturn Long.hashCode(this.bytes);\n\t}\n\n\n\t/**\n\t * Static nested class to support lazy loading of the {@link #PATTERN}.\n\t * @since 5.3.21\n\t */\n\tprivate static class DataSizeUtils {\n\n\t\t/**\n\t\t * The pattern for parsing.\n\t\t */\n\t\tprivate static final Pattern PATTERN = Pattern.compile(\"^([+\\\\-]?\\\\d+)([a-zA-Z]{0,2})$\");\n\n\t\tprivate static DataUnit determineDataUnit(String suffix, @Nullable DataUnit defaultUnit) {\n\t\t\tDataUnit defaultUnitToUse = (defaultUnit != null ? defaultUnit : DataUnit.BYTES);\n\t\t\treturn (StringUtils.hasLength(suffix) ? DataUnit.fromSuffix(suffix) : defaultUnitToUse);\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.unit.DataSize",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.unit.DataSize#BYTES_PER_KB",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.unit.DataSize#BYTES_PER_KB",
    "headType": "field",
    "relation": "haveType",
    "tail": "long",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.unit.DataSize",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.unit.DataSize#BYTES_PER_MB",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.unit.DataSize#BYTES_PER_MB",
    "headType": "field",
    "relation": "haveType",
    "tail": "long",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.unit.DataSize",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.unit.DataSize#BYTES_PER_GB",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.unit.DataSize#BYTES_PER_GB",
    "headType": "field",
    "relation": "haveType",
    "tail": "long",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.unit.DataSize",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.unit.DataSize#BYTES_PER_TB",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.unit.DataSize#BYTES_PER_TB",
    "headType": "field",
    "relation": "haveType",
    "tail": "long",
    "tailType": "type"
  }
]