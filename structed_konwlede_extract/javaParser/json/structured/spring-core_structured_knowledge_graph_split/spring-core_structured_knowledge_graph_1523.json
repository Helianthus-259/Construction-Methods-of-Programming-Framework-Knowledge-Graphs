[
  {
    "head": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrarTests#shouldProcessAnnotationOnInterface()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldProcessAnnotationOnInterface() {\r\n    process(SampleMethodAnnotatedBeanWithInterface.class);\r\n    assertThat(this.runtimeHints.reflection().getTypeHint(SampleInterface.class)).satisfies(typeHint -> assertThat(typeHint.methods()).singleElement().satisfies(methodHint -> assertThat(methodHint.getName()).isEqualTo(\"managed\")));\r\n    assertThat(this.runtimeHints.reflection().getTypeHint(SampleMethodAnnotatedBeanWithInterface.class)).satisfies(typeHint -> assertThat(typeHint.methods()).singleElement().satisfies(methodHint -> assertThat(methodHint.getName()).isEqualTo(\"managed\")));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrarTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrarTests#shouldProcessAnnotationOnInterface()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrarTests#shouldProcessAnnotationOnInterface()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrarTests#shouldProcessAnnotationOnInheritedClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldProcessAnnotationOnInheritedClass() {\r\n    process(SampleMethodAnnotatedBeanWithInheritance.class);\r\n    assertThat(this.runtimeHints.reflection().getTypeHint(SampleInheritedClass.class)).satisfies(typeHint -> assertThat(typeHint.methods()).singleElement().satisfies(methodHint -> assertThat(methodHint.getName()).isEqualTo(\"managed\")));\r\n    assertThat(this.runtimeHints.reflection().getTypeHint(SampleMethodAnnotatedBeanWithInheritance.class)).satisfies(typeHint -> assertThat(typeHint.methods()).singleElement().satisfies(methodHint -> assertThat(methodHint.getName()).isEqualTo(\"managed\")));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrarTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrarTests#shouldProcessAnnotationOnInheritedClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrarTests#shouldProcessAnnotationOnInheritedClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrarTests#shouldProcessDifferentAnnotationsOnTypeAndField()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldProcessDifferentAnnotationsOnTypeAndField() {\r\n    process(SampleTypeAndFieldAnnotatedBean.class);\r\n    assertThat(this.runtimeHints.reflection().getTypeHint(SampleTypeAndFieldAnnotatedBean.class)).satisfies(typeHint -> {\r\n        assertThat(typeHint.fields().map(FieldHint::getName)).containsOnly(\"MESSAGE\");\r\n        assertThat(typeHint.getMemberCategories()).containsOnly(MemberCategory.INVOKE_DECLARED_CONSTRUCTORS);\r\n        assertThat(typeHint.methods()).isEmpty();\r\n        assertThat(typeHint.constructors()).isEmpty();\r\n    });\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrarTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrarTests#shouldProcessDifferentAnnotationsOnTypeAndField()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrarTests#shouldProcessDifferentAnnotationsOnTypeAndField()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrarTests#shouldInvokeCustomProcessor()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldInvokeCustomProcessor() {\r\n    process(SampleCustomProcessor.class);\r\n    assertThat(RuntimeHintsPredicates.reflection().onMethodInvocation(SampleCustomProcessor.class, \"managed\")).accepts(this.runtimeHints);\r\n    assertThat(RuntimeHintsPredicates.reflection().onType(String.class).withMemberCategory(MemberCategory.INVOKE_DECLARED_METHODS)).accepts(this.runtimeHints);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrarTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrarTests#shouldInvokeCustomProcessor()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrarTests#shouldInvokeCustomProcessor()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrarTests#process(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void process(Class<?> beanClass) {\r\n    this.registrar.registerRuntimeHints(this.runtimeHints, beanClass);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrarTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrarTests#process(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.annotation.SampleTypeAnnotatedBean",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.hint.annotation.SampleTypeAnnotatedBean",
    "headType": "class",
    "relation": "use",
    "tail": "@Reflective",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.annotation.SampleTypeAnnotatedBean",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.annotation.SampleTypeAnnotatedBean",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint.annotation;\n\nimport java.io.Closeable;\nimport java.lang.annotation.Documented;\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\nimport java.lang.reflect.Method;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.ValueSource;\n\nimport org.springframework.aot.hint.FieldHint;\nimport org.springframework.aot.hint.MemberCategory;\nimport org.springframework.aot.hint.ReflectionHints;\nimport org.springframework.aot.hint.RuntimeHints;\nimport org.springframework.aot.hint.TypeHint;\nimport org.springframework.aot.hint.TypeReference;\nimport org.springframework.aot.hint.predicate.RuntimeHintsPredicates;\nimport org.springframework.core.annotation.AliasFor;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.verifyNoInteractions;\n\n/**\n * Tests for {@link ReflectiveRuntimeHintsRegistrar}.\n *\n * @author Stephane Nicoll\n * @author Andy Wilkinson\n */\nclass ReflectiveRuntimeHintsRegistrarTests {\n\n\tprivate final ReflectiveRuntimeHintsRegistrar registrar = new ReflectiveRuntimeHintsRegistrar();\n\n\tprivate final RuntimeHints runtimeHints = new RuntimeHints();\n\n\t@ParameterizedTest\n\t@ValueSource(classes = { SampleTypeAnnotatedBean.class, SampleFieldAnnotatedBean.class,\n\t\t\tSampleConstructorAnnotatedBean.class, SampleMethodAnnotatedBean.class, SampleInterface.class,\n\t\t\tSampleMethodMetaAnnotatedBeanWithAlias.class, SampleMethodAnnotatedBeanWithInterface.class })\n\tvoid isCandidateWithMatchingAnnotatedElement(Class<?> candidate) {\n\t\tassertThat(this.registrar.isCandidate(candidate)).isTrue();\n\t}\n\n\t@ParameterizedTest\n\t@ValueSource(classes = { String.class, Closeable.class })\n\tvoid isCandidateWithNonMatchingAnnotatedElement(Class<?> candidate) {\n\t\tassertThat(this.registrar.isCandidate(candidate)).isFalse();\n\t}\n\n\t@Test\n\tvoid shouldIgnoreNonAnnotatedType() {\n\t\tRuntimeHints mock = mock();\n\t\tthis.registrar.registerRuntimeHints(mock, String.class);\n\t\tverifyNoInteractions(mock);\n\t}\n\n\t@Test\n\tvoid shouldProcessAnnotationOnType() {\n\t\tprocess(SampleTypeAnnotatedBean.class);\n\t\tassertThat(this.runtimeHints.reflection().getTypeHint(SampleTypeAnnotatedBean.class))\n\t\t\t\t.isNotNull();\n\t}\n\n\t@Test\n\tvoid shouldProcessWithMultipleProcessorsWithAnnotationOnType() {\n\t\tprocess(SampleMultipleCustomProcessors.class);\n\t\tTypeHint typeHint = this.runtimeHints.reflection().getTypeHint(SampleMultipleCustomProcessors.class);\n\t\tassertThat(typeHint).isNotNull();\n\t\tassertThat(typeHint.getMemberCategories()).containsExactly(MemberCategory.INVOKE_DECLARED_METHODS);\n\t}\n\n\t@Test\n\tvoid shouldProcessAnnotationOnConstructor() {\n\t\tprocess(SampleConstructorAnnotatedBean.class);\n\t\tassertThat(this.runtimeHints.reflection().getTypeHint(SampleConstructorAnnotatedBean.class))\n\t\t\t\t.satisfies(typeHint -> assertThat(typeHint.constructors()).singleElement()\n\t\t\t\t\t\t.satisfies(constructorHint -> assertThat(constructorHint.getParameterTypes())\n\t\t\t\t\t\t\t\t.containsExactly(TypeReference.of(String.class))));\n\t}\n\n\t@Test\n\tvoid shouldProcessAnnotationOnField() {\n\t\tprocess(SampleFieldAnnotatedBean.class);\n\t\tassertThat(this.runtimeHints.reflection().getTypeHint(SampleFieldAnnotatedBean.class))\n\t\t\t\t.satisfies(typeHint -> assertThat(typeHint.fields()).singleElement()\n\t\t\t\t\t\t.satisfies(fieldHint -> assertThat(fieldHint.getName()).isEqualTo(\"managed\")));\n\t}\n\n\t@Test\n\tvoid shouldProcessAnnotationOnMethod() {\n\t\tprocess(SampleMethodAnnotatedBean.class);\n\t\tassertThat(this.runtimeHints.reflection().getTypeHint(SampleMethodAnnotatedBean.class))\n\t\t\t\t.satisfies(typeHint -> assertThat(typeHint.methods()).singleElement()\n\t\t\t\t\t\t.satisfies(methodHint -> assertThat(methodHint.getName()).isEqualTo(\"managed\")));\n\t}\n\n\t@Test\n\tvoid shouldProcessAnnotationOnInterface() {\n\t\tprocess(SampleMethodAnnotatedBeanWithInterface.class);\n\t\tassertThat(this.runtimeHints.reflection().getTypeHint(SampleInterface.class))\n\t\t\t\t.satisfies(typeHint -> assertThat(typeHint.methods()).singleElement()\n\t\t\t\t\t\t.satisfies(methodHint -> assertThat(methodHint.getName()).isEqualTo(\"managed\")));\n\t\tassertThat(this.runtimeHints.reflection().getTypeHint(SampleMethodAnnotatedBeanWithInterface.class))\n\t\t\t\t.satisfies(typeHint -> assertThat(typeHint.methods()).singleElement()\n\t\t\t\t\t\t.satisfies(methodHint -> assertThat(methodHint.getName()).isEqualTo(\"managed\")));\n\t}\n\n\t@Test\n\tvoid shouldProcessAnnotationOnInheritedClass() {\n\t\tprocess(SampleMethodAnnotatedBeanWithInheritance.class);\n\t\tassertThat(this.runtimeHints.reflection().getTypeHint(SampleInheritedClass.class))\n\t\t\t\t.satisfies(typeHint -> assertThat(typeHint.methods()).singleElement()\n\t\t\t\t\t\t.satisfies(methodHint -> assertThat(methodHint.getName()).isEqualTo(\"managed\")));\n\t\tassertThat(this.runtimeHints.reflection().getTypeHint(SampleMethodAnnotatedBeanWithInheritance.class))\n\t\t\t\t.satisfies(typeHint -> assertThat(typeHint.methods()).singleElement()\n\t\t\t\t\t\t.satisfies(methodHint -> assertThat(methodHint.getName()).isEqualTo(\"managed\")));\n\t}\n\n\t@Test\n\tvoid shouldProcessDifferentAnnotationsOnTypeAndField() {\n\t\tprocess(SampleTypeAndFieldAnnotatedBean.class);\n\t\tassertThat(this.runtimeHints.reflection().getTypeHint(SampleTypeAndFieldAnnotatedBean.class))\n\t\t\t\t.satisfies(typeHint -> {\n\t\t\t\t\tassertThat(typeHint.fields().map(FieldHint::getName)).containsOnly(\"MESSAGE\");\n\t\t\t\t\tassertThat(typeHint.getMemberCategories()).containsOnly(MemberCategory.INVOKE_DECLARED_CONSTRUCTORS);\n\t\t\t\t\tassertThat(typeHint.methods()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.constructors()).isEmpty();\n\t\t\t\t});\n\t}\n\n\t@Test\n\tvoid shouldInvokeCustomProcessor() {\n\t\tprocess(SampleCustomProcessor.class);\n\t\tassertThat(RuntimeHintsPredicates.reflection()\n\t\t\t\t.onMethodInvocation(SampleCustomProcessor.class, \"managed\")).accepts(this.runtimeHints);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onType(String.class)\n\t\t\t\t.withMemberCategory(MemberCategory.INVOKE_DECLARED_METHODS)).accepts(this.runtimeHints);\n\n\t}\n\n\tprivate void process(Class<?> beanClass) {\n\t\tthis.registrar.registerRuntimeHints(this.runtimeHints, beanClass);\n\t}\n\n\n\t@Reflective\n\t@SuppressWarnings(\"unused\")\n\tstatic class SampleTypeAnnotatedBean {\n\n\t\tprivate String notManaged;\n\n\t\tpublic void notManaged() {\n\t\t}\n\t}\n\n\t@SuppressWarnings(\"unused\")\n\tstatic class SampleConstructorAnnotatedBean {\n\n\t\t@Reflective\n\t\tSampleConstructorAnnotatedBean(String name) {\n\t\t}\n\n\t\tSampleConstructorAnnotatedBean(Integer nameAsNumber) {\n\t\t}\n\t}\n\n\t@SuppressWarnings(\"unused\")\n\tstatic class SampleFieldAnnotatedBean {\n\n\t\t@Reflective\n\t\tString managed;\n\n\t\tString notManaged;\n\n\t}\n\n\t@SuppressWarnings(\"unused\")\n\tstatic class SampleMethodAnnotatedBean {\n\n\t\t@Reflective\n\t\tvoid managed() {\n\t\t}\n\n\t\tvoid notManaged() {\n\t\t}\n\t}\n\n\t@RegisterReflection(memberCategories = MemberCategory.INVOKE_DECLARED_CONSTRUCTORS)\n\tstatic class SampleTypeAndFieldAnnotatedBean {\n\n\t\t@Reflective\n\t\tprivate static final String MESSAGE = \"Hello\";\n\n\t}\n\n\t@SuppressWarnings(\"unused\")\n\tstatic class SampleMethodMetaAnnotatedBean {\n\n\t\t@SampleInvoker\n\t\tvoid invoke() {\n\t\t}\n\n\t\tvoid notManaged() {\n\t\t}\n\t}\n\n\t@SuppressWarnings(\"unused\")\n\tstatic class SampleMethodMetaAnnotatedBeanWithAlias {\n\n\t\t@RetryInvoker\n\t\tvoid invoke() {\n\t\t}\n\n\t\tvoid notManaged() {\n\t\t}\n\t}\n\n\tstatic class SampleMethodAnnotatedBeanWithInterface implements SampleInterface {\n\n\t\t@Override\n\t\tpublic void managed() {\n\t\t}\n\n\t\tpublic void notManaged() {\n\t\t}\n\t}\n\n\tstatic class SampleMethodAnnotatedBeanWithInheritance extends SampleInheritedClass {\n\n\t\t@Override\n\t\tpublic void managed() {\n\t\t}\n\n\t\tpublic void notManaged() {\n\t\t}\n\t}\n\n\t@Target({ ElementType.METHOD, ElementType.ANNOTATION_TYPE })\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Documented\n\t@Reflective\n\t@interface SampleInvoker {\n\n\t\tint retries() default 0;\n\t}\n\n\t@Target({ ElementType.METHOD })\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Documented\n\t@SampleInvoker\n\t@interface RetryInvoker {\n\n\t\t@AliasFor(attribute = \"retries\", annotation = SampleInvoker.class)\n\t\tint value() default 1;\n\t}\n\n\t@Target(ElementType.TYPE)\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Documented\n\t@Reflective(TestTypeHintReflectiveProcessor.class)\n\t@interface ReflectiveWithCustomProcessor {\n\t}\n\n\tinterface SampleInterface {\n\n\t\t@Reflective\n\t\tvoid managed();\n\t}\n\n\tstatic class SampleInheritedClass {\n\n\t\t@Reflective\n\t\tvoid managed() {\n\t\t}\n\t}\n\n\tstatic class SampleCustomProcessor {\n\n\t\t@Reflective(TestMethodHintReflectiveProcessor.class)\n\t\tpublic String managed() {\n\t\t\treturn \"test\";\n\t\t}\n\t}\n\n\t@Reflective\n\t@ReflectiveWithCustomProcessor\n\tstatic class SampleMultipleCustomProcessors {\n\n\t\tpublic String managed() {\n\t\t\treturn \"test\";\n\t\t}\n\t}\n\n\tprivate static class TestMethodHintReflectiveProcessor extends SimpleReflectiveProcessor {\n\n\t\t@Override\n\t\tprotected void registerMethodHint(ReflectionHints hints, Method method) {\n\t\t\tsuper.registerMethodHint(hints, method);\n\t\t\thints.registerType(method.getReturnType(), MemberCategory.INVOKE_DECLARED_METHODS);\n\t\t}\n\t}\n\n\tprivate static class TestTypeHintReflectiveProcessor extends SimpleReflectiveProcessor {\n\n\t\t@Override\n\t\tprotected void registerTypeHint(ReflectionHints hints, Class<?> type) {\n\t\t\tsuper.registerTypeHint(hints, type);\n\t\t\thints.registerType(type, MemberCategory.INVOKE_DECLARED_METHODS);\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.hint.annotation.SampleTypeAnnotatedBean",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.hint.annotation.SampleTypeAnnotatedBean#notManaged",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.hint.annotation.SampleTypeAnnotatedBean#notManaged",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  }
]