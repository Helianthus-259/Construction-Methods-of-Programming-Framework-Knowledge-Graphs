[
  {
    "head": "org.springframework.util.AssertTests#hasLengthWithEmptyString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid hasLengthWithEmptyString() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.hasLength(\"\", \"enigma\")).withMessageContaining(\"enigma\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AssertTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AssertTests#hasLengthWithEmptyString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AssertTests#hasLengthWithEmptyString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AssertTests#hasLengthWithNull()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid hasLengthWithNull() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.hasLength(null, \"enigma\")).withMessageContaining(\"enigma\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AssertTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AssertTests#hasLengthWithNull()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AssertTests#hasLengthWithNull()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AssertTests#hasLengthWithMessageSupplier()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid hasLengthWithMessageSupplier() {\r\n    Assert.hasLength(\"foo\", () -> \"enigma\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AssertTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AssertTests#hasLengthWithMessageSupplier()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AssertTests#hasLengthWithMessageSupplier()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AssertTests#hasLengthWithWhitespaceOnlyAndMessageSupplier()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid hasLengthWithWhitespaceOnlyAndMessageSupplier() {\r\n    Assert.hasLength(\"\\t\", () -> \"enigma\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AssertTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AssertTests#hasLengthWithWhitespaceOnlyAndMessageSupplier()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AssertTests#hasLengthWithWhitespaceOnlyAndMessageSupplier()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AssertTests#hasLengthWithEmptyStringAndMessageSupplier()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid hasLengthWithEmptyStringAndMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.hasLength(\"\", () -> \"enigma\")).withMessageContaining(\"enigma\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AssertTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AssertTests#hasLengthWithEmptyStringAndMessageSupplier()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AssertTests#hasLengthWithEmptyStringAndMessageSupplier()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AssertTests#hasLengthWithNullAndMessageSupplier()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid hasLengthWithNullAndMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.hasLength(null, () -> \"enigma\")).withMessageContaining(\"enigma\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AssertTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AssertTests#hasLengthWithNullAndMessageSupplier()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AssertTests#hasLengthWithNullAndMessageSupplier()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AssertTests#hasLengthWithNullAndNullMessageSupplier()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid hasLengthWithNullAndNullMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.hasLength(null, (Supplier<String>) null)).withMessage(null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AssertTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AssertTests#hasLengthWithNullAndNullMessageSupplier()",
    "tailType": "method"
  }
]