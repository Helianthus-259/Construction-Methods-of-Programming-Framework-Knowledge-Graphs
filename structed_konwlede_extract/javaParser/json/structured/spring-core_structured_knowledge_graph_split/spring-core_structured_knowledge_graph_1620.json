[
  {
    "head": "org.springframework.core.annotation.AnnotationAttributesTests#typeSafeAttributeAccess()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributesTests#unresolvableClassWithClassNotFoundException()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid unresolvableClassWithClassNotFoundException() {\r\n    attributes.put(\"unresolvableClass\", new ClassNotFoundException(\"myclass\"));\r\n    assertThatIllegalArgumentException().isThrownBy(() -> attributes.getClass(\"unresolvableClass\")).withMessageContaining(\"myclass\").withCauseInstanceOf(ClassNotFoundException.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationAttributesTests#unresolvableClassWithClassNotFoundException()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributesTests#unresolvableClassWithClassNotFoundException()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributesTests#unresolvableClassWithLinkageError()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid unresolvableClassWithLinkageError() {\r\n    attributes.put(\"unresolvableClass\", new LinkageError(\"myclass\"));\r\n    assertThatIllegalArgumentException().isThrownBy(() -> attributes.getClass(\"unresolvableClass\")).withMessageContaining(\"myclass\").withCauseInstanceOf(LinkageError.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationAttributesTests#unresolvableClassWithLinkageError()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributesTests#unresolvableClassWithLinkageError()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributesTests#singleElementToSingleElementArrayConversionSupport()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid singleElementToSingleElementArrayConversionSupport() {\r\n    Filter filter = FilteredClass.class.getAnnotation(Filter.class);\r\n    AnnotationAttributes nestedAttributes = new AnnotationAttributes();\r\n    nestedAttributes.put(\"name\", \"Dilbert\");\r\n    // Store single elements\r\n    attributes.put(\"names\", \"Dogbert\");\r\n    attributes.put(\"classes\", Number.class);\r\n    attributes.put(\"nestedAttributes\", nestedAttributes);\r\n    attributes.put(\"filters\", filter);\r\n    // Get back arrays of single elements\r\n    assertThat(attributes.getStringArray(\"names\")).isEqualTo(new String[] { \"Dogbert\" });\r\n    assertThat(attributes.getClassArray(\"classes\")).isEqualTo(new Class<?>[] { Number.class });\r\n    AnnotationAttributes[] array = attributes.getAnnotationArray(\"nestedAttributes\");\r\n    assertThat(array).isNotNull();\r\n    assertThat(array).hasSize(1);\r\n    assertThat(array[0].getString(\"name\")).isEqualTo(\"Dilbert\");\r\n    Filter[] filters = attributes.getAnnotationArray(\"filters\", Filter.class);\r\n    assertThat(filters).isNotNull();\r\n    assertThat(filters).hasSize(1);\r\n    assertThat(filters[0].pattern()).isEqualTo(\"foo\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationAttributesTests#singleElementToSingleElementArrayConversionSupport()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributesTests#singleElementToSingleElementArrayConversionSupport()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributesTests#nestedAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nestedAnnotations() {\r\n    Filter filter = FilteredClass.class.getAnnotation(Filter.class);\r\n    attributes.put(\"filter\", filter);\r\n    attributes.put(\"filters\", new Filter[] { filter, filter });\r\n    Filter retrievedFilter = attributes.getAnnotation(\"filter\", Filter.class);\r\n    assertThat(retrievedFilter).isEqualTo(filter);\r\n    assertThat(retrievedFilter.pattern()).isEqualTo(\"foo\");\r\n    Filter[] retrievedFilters = attributes.getAnnotationArray(\"filters\", Filter.class);\r\n    assertThat(retrievedFilters).isNotNull();\r\n    assertThat(retrievedFilters).hasSize(2);\r\n    assertThat(retrievedFilters[1].pattern()).isEqualTo(\"foo\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationAttributesTests#nestedAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributesTests#nestedAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributesTests#getEnumWithNullAttributeName()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getEnumWithNullAttributeName() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> attributes.getEnum(null)).withMessageContaining(\"must not be null or empty\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationAttributesTests#getEnumWithNullAttributeName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributesTests#getEnumWithNullAttributeName()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributesTests#getEnumWithEmptyAttributeName()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getEnumWithEmptyAttributeName() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> attributes.getEnum(\"\")).withMessageContaining(\"must not be null or empty\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationAttributesTests#getEnumWithEmptyAttributeName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributesTests#getEnumWithEmptyAttributeName()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributesTests#getEnumWithUnknownAttributeName()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getEnumWithUnknownAttributeName() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> attributes.getEnum(\"bogus\")).withMessageContaining(\"Attribute 'bogus' not found\");\r\n}",
    "tailType": "method_code"
  }
]