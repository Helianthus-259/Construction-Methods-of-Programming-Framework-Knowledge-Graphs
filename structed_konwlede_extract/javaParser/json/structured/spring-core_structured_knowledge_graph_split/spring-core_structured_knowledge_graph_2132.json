[
  {
    "head": "org.springframework.core.serializer.SerializationConverterTests#deserializationFailure()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid deserializationFailure() {\r\n    DeserializingConverter fromBytes = new DeserializingConverter();\r\n    assertThatExceptionOfType(SerializationFailedException.class).isThrownBy(() -> fromBytes.convert(\"Junk\".getBytes()));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.serializer.SerializationConverterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.serializer.SerializationConverterTests#deserializationFailure()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.serializer.SerializationConverterTests#deserializationFailure()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.serializer.SerializationConverterTests#deserializationWithExplicitClassLoader()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid deserializationWithExplicitClassLoader() {\r\n    DeserializingConverter fromBytes = new DeserializingConverter(getClass().getClassLoader());\r\n    SerializingConverter toBytes = new SerializingConverter();\r\n    String expected = \"SPRING FRAMEWORK\";\r\n    assertThat(fromBytes.convert(toBytes.convert(expected))).isEqualTo(expected);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.serializer.SerializationConverterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.serializer.SerializationConverterTests#deserializationWithExplicitClassLoader()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.serializer.SerializationConverterTests#deserializationWithExplicitClassLoader()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.serializer.SerializationConverterTests#deserializationWithExplicitDeserializer()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid deserializationWithExplicitDeserializer() {\r\n    DeserializingConverter fromBytes = new DeserializingConverter(new DefaultDeserializer());\r\n    SerializingConverter toBytes = new SerializingConverter();\r\n    String expected = \"SPRING FRAMEWORK\";\r\n    assertThat(fromBytes.convert(toBytes.convert(expected))).isEqualTo(expected);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.serializer.SerializationConverterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.serializer.SerializationConverterTests#deserializationWithExplicitDeserializer()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.serializer.SerializationConverterTests#deserializationWithExplicitDeserializer()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.serializer.SerializationConverterTests#deserializationIOException()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid deserializationIOException() {\r\n    ClassNotFoundException classNotFoundException = new ClassNotFoundException();\r\n    try (MockedConstruction<ConfigurableObjectInputStream> mocked = Mockito.mockConstruction(ConfigurableObjectInputStream.class, (mock, context) -> given(mock.readObject()).willThrow(classNotFoundException))) {\r\n        DefaultDeserializer defaultSerializer = new DefaultDeserializer(getClass().getClassLoader());\r\n        assertThat(mocked).isNotNull();\r\n        assertThatIOException().isThrownBy(() -> defaultSerializer.deserialize(new ByteArrayInputStream(\"test\".getBytes()))).withMessage(\"Failed to deserialize object type\").havingCause().isSameAs(classNotFoundException);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.serializer.SerializationConverterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.serializer.SerializationConverterTests#deserializationIOException()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.serializer.SerializationConverterTests#deserializationIOException()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.serializer",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.serializer.UnSerializable",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.serializer.UnSerializable",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.serializer;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.NotSerializableException;\nimport java.io.Serializable;\n\nimport org.junit.jupiter.api.Test;\nimport org.mockito.MockedConstruction;\nimport org.mockito.Mockito;\n\nimport org.springframework.core.ConfigurableObjectInputStream;\nimport org.springframework.core.serializer.support.DeserializingConverter;\nimport org.springframework.core.serializer.support.SerializationFailedException;\nimport org.springframework.core.serializer.support.SerializingConverter;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatExceptionOfType;\nimport static org.assertj.core.api.Assertions.assertThatIOException;\nimport static org.mockito.BDDMockito.given;\n\n/**\n * Tests for {@link SerializingConverter} and {@link DeserializingConverter}.\n *\n * @author Gary Russell\n * @author Mark Fisher\n * @since 3.0.5\n */\nclass SerializationConverterTests {\n\n\t@Test\n\tvoid serializeAndDeserializeStringWithDefaultSerializer() {\n\t\tSerializingConverter toBytes = new SerializingConverter();\n\t\tbyte[] bytes = toBytes.convert(\"Testing\");\n\t\tDeserializingConverter fromBytes = new DeserializingConverter();\n\t\tassertThat(fromBytes.convert(bytes)).isEqualTo(\"Testing\");\n\t}\n\n\t@Test\n\tvoid serializeAndDeserializeStringWithExplicitSerializer() {\n\t\tSerializingConverter toBytes = new SerializingConverter(new DefaultSerializer());\n\t\tbyte[] bytes = toBytes.convert(\"Testing\");\n\t\tDeserializingConverter fromBytes = new DeserializingConverter();\n\t\tassertThat(fromBytes.convert(bytes)).isEqualTo(\"Testing\");\n\t}\n\n\t@Test\n\tvoid nonSerializableObject() {\n\t\tSerializingConverter toBytes = new SerializingConverter();\n\t\tassertThatExceptionOfType(SerializationFailedException.class)\n\t\t\t\t.isThrownBy(() -> toBytes.convert(new Object()))\n\t\t\t\t.havingCause()\n\t\t\t\t\t.isInstanceOf(IllegalArgumentException.class)\n\t\t\t\t\t.withMessageContaining(\"requires a Serializable payload\");\n\t}\n\n\t@Test\n\tvoid nonSerializableField() {\n\t\tSerializingConverter toBytes = new SerializingConverter();\n\t\tassertThatExceptionOfType(SerializationFailedException.class)\n\t\t\t\t.isThrownBy(() -> toBytes.convert(new UnSerializable()))\n\t\t\t\t.withCauseInstanceOf(NotSerializableException.class);\n\t}\n\n\t@Test\n\tvoid deserializationFailure() {\n\t\tDeserializingConverter fromBytes = new DeserializingConverter();\n\t\tassertThatExceptionOfType(SerializationFailedException.class)\n\t\t\t\t.isThrownBy(() -> fromBytes.convert(\"Junk\".getBytes()));\n\t}\n\n\t@Test\n\tvoid deserializationWithExplicitClassLoader() {\n\t\tDeserializingConverter fromBytes = new DeserializingConverter(getClass().getClassLoader());\n\t\tSerializingConverter toBytes = new SerializingConverter();\n\t\tString expected = \"SPRING FRAMEWORK\";\n\t\tassertThat(fromBytes.convert(toBytes.convert(expected))).isEqualTo(expected);\n\t}\n\n\t@Test\n\tvoid deserializationWithExplicitDeserializer() {\n\t\tDeserializingConverter fromBytes = new DeserializingConverter(new DefaultDeserializer());\n\t\tSerializingConverter toBytes = new SerializingConverter();\n\t\tString expected = \"SPRING FRAMEWORK\";\n\t\tassertThat(fromBytes.convert(toBytes.convert(expected))).isEqualTo(expected);\n\t}\n\n\t@Test\n\tvoid deserializationIOException() {\n\t\tClassNotFoundException classNotFoundException = new ClassNotFoundException();\n\t\ttry (MockedConstruction<ConfigurableObjectInputStream> mocked =\n\t\t\t\tMockito.mockConstruction(ConfigurableObjectInputStream.class,\n\t\t\t\t\t(mock, context) -> given(mock.readObject()).willThrow(classNotFoundException))) {\n\t\t\tDefaultDeserializer defaultSerializer = new DefaultDeserializer(getClass().getClassLoader());\n\t\t\tassertThat(mocked).isNotNull();\n\t\t\tassertThatIOException()\n\t\t\t\t\t.isThrownBy(() -> defaultSerializer.deserialize(new ByteArrayInputStream(\"test\".getBytes())))\n\t\t\t\t\t.withMessage(\"Failed to deserialize object type\")\n\t\t\t\t\t.havingCause().isSameAs(classNotFoundException);\n\t\t}\n\t}\n\n\n\tstatic class UnSerializable implements Serializable {\n\n\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t@SuppressWarnings({\"unused\", \"serial\"})\n\t\tprivate Object object = new Object();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.serializer.UnSerializable",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.serializer.UnSerializable#serialVersionUID",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.serializer.UnSerializable#serialVersionUID",
    "headType": "field",
    "relation": "haveType",
    "tail": "long",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.serializer.UnSerializable",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.serializer.UnSerializable#object",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.serializer.UnSerializable#object",
    "headType": "field",
    "relation": "haveType",
    "tail": "Object",
    "tailType": "type"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.serializer",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.serializer",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.serializer.SerializerTests",
    "tailType": "class"
  }
]