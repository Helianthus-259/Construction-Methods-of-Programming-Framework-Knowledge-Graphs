[
  {
    "head": "org.springframework.core.io.InputStreamResource#hashCode()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation returns the hash code of the underlying InputStream.\r\n */\r\n@Override\r\npublic int hashCode() {\r\n    return this.equality.hashCode();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.InputStreamResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.InputStreamResource#hashCode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.InputStreamResource#hashCode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.InputStreamResource",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractResource",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.io",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.io",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.InputStreamSource",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.InputStreamSource",
    "headType": "class",
    "relation": "use",
    "tail": "@FunctionalInterface",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.InputStreamSource",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io;\n\nimport java.io.IOException;\nimport java.io.InputStream;\n\n/**\n * Simple interface for objects that are sources for an {@link InputStream}.\n *\n * <p>This is the base interface for Spring's more extensive {@link Resource} interface.\n *\n * <p>For single-use streams, {@link InputStreamResource} can be used for any\n * given {@code InputStream}. Spring's {@link ByteArrayResource} or any\n * file-based {@code Resource} implementation can be used as a concrete\n * instance, allowing one to read the underlying content stream multiple times.\n * This makes this interface useful as an abstract content source for mail\n * attachments, for example.\n *\n * @author Juergen Hoeller\n * @since 20.01.2004\n * @see java.io.InputStream\n * @see Resource\n * @see InputStreamResource\n * @see ByteArrayResource\n */\n@FunctionalInterface\npublic interface InputStreamSource {\n\n\t/**\n\t * Return an {@link InputStream} for the content of an underlying resource.\n\t * <p>It is usually expected that every such call creates a <i>fresh</i> stream.\n\t * <p>This requirement is particularly important when you consider an API such\n\t * as JavaMail, which needs to be able to read the stream multiple times when\n\t * creating mail attachments. For such a use case, it is <i>required</i>\n\t * that each {@code getInputStream()} call returns a fresh stream.\n\t * @return the input stream for the underlying resource (must not be {@code null})\n\t * @throws java.io.FileNotFoundException if the underlying resource does not exist\n\t * @throws IOException if the content stream could not be opened\n\t * @see Resource#isReadable()\n\t * @see Resource#isOpen()\n\t */\n\tInputStream getInputStream() throws IOException;\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.InputStreamSource#getInputStream()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return an {@link InputStream} for the content of an underlying resource.\r\n * <p>It is usually expected that every such call creates a <i>fresh</i> stream.\r\n * <p>This requirement is particularly important when you consider an API such\r\n * as JavaMail, which needs to be able to read the stream multiple times when\r\n * creating mail attachments. For such a use case, it is <i>required</i>\r\n * that each {@code getInputStream()} call returns a fresh stream.\r\n * @return the input stream for the underlying resource (must not be {@code null})\r\n * @throws java.io.FileNotFoundException if the underlying resource does not exist\r\n * @throws IOException if the content stream could not be opened\r\n * @see Resource#isReadable()\r\n * @see Resource#isOpen()\r\n */\r\nInputStream getInputStream() throws IOException;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.InputStreamSource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.InputStreamSource#getInputStream()",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.io",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.io",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.ModuleResource",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.ModuleResource",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io;\n\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.util.Assert;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link Resource} implementation for {@link java.lang.Module} resolution,\n * performing {@link #getInputStream()} access via {@link Module#getResourceAsStream}.\n *\n * <p>Alternatively, consider accessing resources in a module path layout via\n * {@link ClassPathResource} for exported resources, or specifically relative to\n * a {@code Class} via {@link ClassPathResource#ClassPathResource(String, Class)}\n * for local resolution within the containing module of that specific class.\n * In common scenarios, module resources will simply be transparently visible as\n * classpath resources and therefore do not need any special treatment at all.\n *\n * @author Juergen Hoeller\n * @author Sam Brannen\n * @since 6.1\n * @see Module#getResourceAsStream\n * @see ClassPathResource\n */\npublic class ModuleResource extends AbstractResource {\n\n\tprivate final Module module;\n\n\tprivate final String path;\n\n\n\t/**\n\t * Create a new {@code ModuleResource} for the given {@link Module}\n\t * and the given resource path.\n\t * @param module the runtime module to search within\n\t * @param path the resource path within the module\n\t */\n\tpublic ModuleResource(Module module, String path) {\n\t\tAssert.notNull(module, \"Module must not be null\");\n\t\tAssert.notNull(path, \"Path must not be null\");\n\t\tthis.module = module;\n\t\tthis.path = path;\n\t}\n\n\n\t/**\n\t * Return the {@link Module} for this resource.\n\t */\n\tpublic final Module getModule() {\n\t\treturn this.module;\n\t}\n\n\t/**\n\t * Return the path for this resource.\n\t */\n\tpublic final String getPath() {\n\t\treturn this.path;\n\t}\n\n\n\t@Override\n\tpublic InputStream getInputStream() throws IOException {\n\t\tInputStream is = this.module.getResourceAsStream(this.path);\n\t\tif (is == null) {\n\t\t\tthrow new FileNotFoundException(getDescription() + \" cannot be opened because it does not exist\");\n\t\t}\n\t\treturn is;\n\t}\n\n\t@Override\n\tpublic Resource createRelative(String relativePath) {\n\t\tString pathToUse = StringUtils.applyRelativePath(this.path, relativePath);\n\t\treturn new ModuleResource(this.module, pathToUse);\n\t}\n\n\t@Override\n\tpublic @Nullable String getFilename() {\n\t\treturn StringUtils.getFilename(this.path);\n\t}\n\n\t@Override\n\tpublic String getDescription() {\n\t\treturn \"module resource [\" + this.path + \"]\" +\n\t\t\t\t(this.module.isNamed() ? \" from module [\" + this.module.getName() + \"]\" : \"\");\n\t}\n\n\n\t@Override\n\tpublic boolean equals(@Nullable Object obj) {\n\t\treturn (this == obj || (obj instanceof ModuleResource that &&\n\t\t\t\tthis.module.equals(that.module) && this.path.equals(that.path)));\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\treturn this.module.hashCode() * 31 + this.path.hashCode();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.ModuleResource",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.ModuleResource#module",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.ModuleResource#module",
    "headType": "field",
    "relation": "haveType",
    "tail": "Module",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.ModuleResource",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.ModuleResource#path",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.ModuleResource#path",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.ModuleResource#getModule()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the {@link Module} for this resource.\r\n */\r\npublic final Module getModule() {\r\n    return this.module;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.ModuleResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.ModuleResource#getModule()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.ModuleResource#getPath()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the path for this resource.\r\n */\r\npublic final String getPath() {\r\n    return this.path;\r\n}",
    "tailType": "method_code"
  }
]