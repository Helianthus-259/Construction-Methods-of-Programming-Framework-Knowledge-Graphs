[
  {
    "head": "org.springframework.util.ObjectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ObjectUtils#nullSafeConciseToString(Object)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.PathMatcher",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.PathMatcher",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.util.Comparator;\nimport java.util.Map;\n\n/**\n * Strategy interface for {@code String}-based path matching.\n *\n * <p>Used by {@link org.springframework.core.io.support.PathMatchingResourcePatternResolver},\n * {@link org.springframework.web.servlet.handler.AbstractUrlHandlerMapping},\n * and {@link org.springframework.web.servlet.mvc.WebContentInterceptor}.\n *\n * <p>The default implementation is {@link AntPathMatcher}, supporting the\n * Ant-style pattern syntax.\n *\n * @author Juergen Hoeller\n * @since 1.2\n * @see AntPathMatcher\n */\npublic interface PathMatcher {\n\n\t/**\n\t * Does the given {@code path} represent a pattern that can be matched\n\t * by an implementation of this interface?\n\t * <p>If the return value is {@code false}, then the {@link #match}\n\t * method does not have to be used because direct equality comparisons\n\t * on the static path Strings will lead to the same result.\n\t * @param path the path to check\n\t * @return {@code true} if the given {@code path} represents a pattern\n\t */\n\tboolean isPattern(String path);\n\n\t/**\n\t * Match the given {@code path} against the given {@code pattern},\n\t * according to this PathMatcher's matching strategy.\n\t * @param pattern the pattern to match against\n\t * @param path the path to test\n\t * @return {@code true} if the supplied {@code path} matched,\n\t * {@code false} if it didn't\n\t */\n\tboolean match(String pattern, String path);\n\n\t/**\n\t * Match the given {@code path} against the corresponding part of the given\n\t * {@code pattern}, according to this PathMatcher's matching strategy.\n\t * <p>Determines whether the pattern at least matches as far as the given base\n\t * path goes, assuming that a full path may then match as well.\n\t * @param pattern the pattern to match against\n\t * @param path the path to test\n\t * @return {@code true} if the supplied {@code path} matched,\n\t * {@code false} if it didn't\n\t */\n\tboolean matchStart(String pattern, String path);\n\n\t/**\n\t * Given a pattern and a full path, determine the pattern-mapped part.\n\t * <p>This method is supposed to find out which part of the path is matched\n\t * dynamically through an actual pattern, that is, it strips off a statically\n\t * defined leading path from the given full path, returning only the actually\n\t * pattern-matched part of the path.\n\t * <p>For example: For \"myroot/*.html\" as pattern and \"myroot/myfile.html\"\n\t * as full path, this method should return \"myfile.html\". The detailed\n\t * determination rules are specified to this PathMatcher's matching strategy.\n\t * <p>A simple implementation may return the given full path as-is in case\n\t * of an actual pattern, and the empty String in case of the pattern not\n\t * containing any dynamic parts (i.e. the {@code pattern} parameter being\n\t * a static path that wouldn't qualify as an actual {@link #isPattern pattern}).\n\t * A sophisticated implementation will differentiate between the static parts\n\t * and the dynamic parts of the given path pattern.\n\t * @param pattern the path pattern\n\t * @param path the full path to introspect\n\t * @return the pattern-mapped part of the given {@code path}\n\t * (never {@code null})\n\t */\n\tString extractPathWithinPattern(String pattern, String path);\n\n\t/**\n\t * Given a pattern and a full path, extract the URI template variables. URI template\n\t * variables are expressed through curly brackets ('{' and '}').\n\t * <p>For example: For pattern \"/hotels/{hotel}\" and path \"/hotels/1\", this method will\n\t * return a map containing \"hotel\" &rarr; \"1\".\n\t * @param pattern the path pattern, possibly containing URI templates\n\t * @param path the full path to extract template variables from\n\t * @return a map, containing variable names as keys; variables values as values\n\t */\n\tMap<String, String> extractUriTemplateVariables(String pattern, String path);\n\n\t/**\n\t * Given a full path, returns a {@link Comparator} suitable for sorting patterns\n\t * in order of explicitness for that path.\n\t * <p>The full algorithm used depends on the underlying implementation,\n\t * but generally, the returned {@code Comparator} will\n\t * {@linkplain java.util.List#sort(java.util.Comparator) sort}\n\t * a list so that more specific patterns come before generic patterns.\n\t * @param path the full path to use for comparison\n\t * @return a comparator capable of sorting patterns in order of explicitness\n\t */\n\tComparator<String> getPatternComparator(String path);\n\n\t/**\n\t * Combines two patterns into a new pattern that is returned.\n\t * <p>The full algorithm used for combining the two pattern depends on the underlying implementation.\n\t * @param pattern1 the first pattern\n\t * @param pattern2 the second pattern\n\t * @return the combination of the two patterns\n\t * @throws IllegalArgumentException when the two patterns cannot be combined\n\t */\n\tString combine(String pattern1, String pattern2);\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.PathMatcher#isPattern(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Does the given {@code path} represent a pattern that can be matched\r\n * by an implementation of this interface?\r\n * <p>If the return value is {@code false}, then the {@link #match}\r\n * method does not have to be used because direct equality comparisons\r\n * on the static path Strings will lead to the same result.\r\n * @param path the path to check\r\n * @return {@code true} if the given {@code path} represents a pattern\r\n */\r\nboolean isPattern(String path);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.PathMatcher",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PathMatcher#isPattern(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.PathMatcher#match(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Match the given {@code path} against the given {@code pattern},\r\n * according to this PathMatcher's matching strategy.\r\n * @param pattern the pattern to match against\r\n * @param path the path to test\r\n * @return {@code true} if the supplied {@code path} matched,\r\n * {@code false} if it didn't\r\n */\r\nboolean match(String pattern, String path);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.PathMatcher",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PathMatcher#match(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.PathMatcher#matchStart(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Match the given {@code path} against the corresponding part of the given\r\n * {@code pattern}, according to this PathMatcher's matching strategy.\r\n * <p>Determines whether the pattern at least matches as far as the given base\r\n * path goes, assuming that a full path may then match as well.\r\n * @param pattern the pattern to match against\r\n * @param path the path to test\r\n * @return {@code true} if the supplied {@code path} matched,\r\n * {@code false} if it didn't\r\n */\r\nboolean matchStart(String pattern, String path);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.PathMatcher",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PathMatcher#matchStart(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.PathMatcher#extractPathWithinPattern(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Given a pattern and a full path, determine the pattern-mapped part.\r\n * <p>This method is supposed to find out which part of the path is matched\r\n * dynamically through an actual pattern, that is, it strips off a statically\r\n * defined leading path from the given full path, returning only the actually\r\n * pattern-matched part of the path.\r\n * <p>For example: For \"myroot/*.html\" as pattern and \"myroot/myfile.html\"\r\n * as full path, this method should return \"myfile.html\". The detailed\r\n * determination rules are specified to this PathMatcher's matching strategy.\r\n * <p>A simple implementation may return the given full path as-is in case\r\n * of an actual pattern, and the empty String in case of the pattern not\r\n * containing any dynamic parts (i.e. the {@code pattern} parameter being\r\n * a static path that wouldn't qualify as an actual {@link #isPattern pattern}).\r\n * A sophisticated implementation will differentiate between the static parts\r\n * and the dynamic parts of the given path pattern.\r\n * @param pattern the path pattern\r\n * @param path the full path to introspect\r\n * @return the pattern-mapped part of the given {@code path}\r\n * (never {@code null})\r\n */\r\nString extractPathWithinPattern(String pattern, String path);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.PathMatcher",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PathMatcher#extractPathWithinPattern(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.PathMatcher#extractUriTemplateVariables(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Given a pattern and a full path, extract the URI template variables. URI template\r\n * variables are expressed through curly brackets ('{' and '}').\r\n * <p>For example: For pattern \"/hotels/{hotel}\" and path \"/hotels/1\", this method will\r\n * return a map containing \"hotel\" &rarr; \"1\".\r\n * @param pattern the path pattern, possibly containing URI templates\r\n * @param path the full path to extract template variables from\r\n * @return a map, containing variable names as keys; variables values as values\r\n */\r\nMap<String, String> extractUriTemplateVariables(String pattern, String path);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.PathMatcher",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PathMatcher#extractUriTemplateVariables(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.PathMatcher#getPatternComparator(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Given a full path, returns a {@link Comparator} suitable for sorting patterns\r\n * in order of explicitness for that path.\r\n * <p>The full algorithm used depends on the underlying implementation,\r\n * but generally, the returned {@code Comparator} will\r\n * {@linkplain java.util.List#sort(java.util.Comparator) sort}\r\n * a list so that more specific patterns come before generic patterns.\r\n * @param path the full path to use for comparison\r\n * @return a comparator capable of sorting patterns in order of explicitness\r\n */\r\nComparator<String> getPatternComparator(String path);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.PathMatcher",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PathMatcher#getPatternComparator(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.PathMatcher#combine(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Combines two patterns into a new pattern that is returned.\r\n * <p>The full algorithm used for combining the two pattern depends on the underlying implementation.\r\n * @param pattern1 the first pattern\r\n * @param pattern2 the second pattern\r\n * @return the combination of the two patterns\r\n * @throws IllegalArgumentException when the two patterns cannot be combined\r\n */\r\nString combine(String pattern1, String pattern2);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.PathMatcher",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PathMatcher#combine(String,String)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  }
]