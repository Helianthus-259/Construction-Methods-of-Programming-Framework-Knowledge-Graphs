[
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertHashMapValuesToList()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid convertHashMapValuesToList() {\r\n    Map<String, Integer> hashMap = new LinkedHashMap<>();\r\n    hashMap.put(\"1\", 1);\r\n    hashMap.put(\"2\", 2);\r\n    @SuppressWarnings(\"unchecked\")\r\n    List<Integer> converted = conversionService.convert(hashMap.values(), List.class);\r\n    assertThat(converted).containsExactly(1, 2);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertHashMapValuesToList()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertHashMapValuesToList()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#map()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid map() {\r\n    Map<String, String> strings = new HashMap<>();\r\n    strings.put(\"3\", \"9\");\r\n    strings.put(\"6\", \"31\");\r\n    @SuppressWarnings(\"unchecked\")\r\n    Map<Integer, Integer> integers = (Map<Integer, Integer>) conversionService.convert(strings, TypeDescriptor.map(Map.class, TypeDescriptor.valueOf(Integer.class), TypeDescriptor.valueOf(Integer.class)));\r\n    assertThat(integers).contains(entry(3, 9), entry(6, 31));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.DefaultConversionServiceTests#map()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#map()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertPropertiesToString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid convertPropertiesToString() {\r\n    Properties foo = new Properties();\r\n    foo.setProperty(\"1\", \"BAR\");\r\n    foo.setProperty(\"2\", \"BAZ\");\r\n    String result = conversionService.convert(foo, String.class);\r\n    assertThat(result).contains(\"1=BAR\", \"2=BAZ\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertPropertiesToString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertPropertiesToString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertStringToProperties()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid convertStringToProperties() {\r\n    Properties result = conversionService.convert(\"\"\"\r\n        a=b\r\n        c=2\r\n        d=\"\"\", Properties.class);\r\n    assertThat(result).contains(entry(\"a\", \"b\"), entry(\"c\", \"2\"), entry(\"d\", \"\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertStringToProperties()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertStringToProperties()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertStringToPropertiesWithLeadingSpaces()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid convertStringToPropertiesWithLeadingSpaces() {\r\n    Properties result = conversionService.convert(\"\"\"\r\n        \\s  foo=bar\r\n        \\s   bar=baz\r\n        \\s    baz=boo\"\"\", Properties.class);\r\n    assertThat(result).contains(entry(\"foo\", \"bar\"), entry(\"bar\", \"baz\"), entry(\"baz\", \"boo\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertStringToPropertiesWithLeadingSpaces()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertStringToPropertiesWithLeadingSpaces()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertObjectToStringWithValueOfMethodPresentUsingToString()",
    "headType": "method",
    "relation": "provide",
    "tail": "// generic object conversion\r\n@Test\r\nvoid convertObjectToStringWithValueOfMethodPresentUsingToString() {\r\n    ISBN.reset();\r\n    assertThat(conversionService.convert(new ISBN(\"123456789\"), String.class)).isEqualTo(\"123456789\");\r\n    assertThat(ISBN.constructorCount).as(\"constructor invocations\").isEqualTo(1);\r\n    assertThat(ISBN.valueOfCount).as(\"valueOf() invocations\").isEqualTo(0);\r\n    assertThat(ISBN.toStringCount).as(\"toString() invocations\").isEqualTo(1);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertObjectToStringWithValueOfMethodPresentUsingToString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertObjectToStringWithValueOfMethodPresentUsingToString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertObjectToObjectUsingValueOfMethod()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * @see org.springframework.core.convert.support.ObjectToObjectConverterTests\r\n */\r\n@Test\r\nvoid convertObjectToObjectUsingValueOfMethod() {\r\n    ISBN.reset();\r\n    assertThat(conversionService.convert(\"123456789\", ISBN.class)).isEqualTo(new ISBN(\"123456789\"));\r\n    assertThat(ISBN.valueOfCount).as(\"valueOf() invocations\").isEqualTo(1);\r\n    // valueOf() invokes the constructor\r\n    assertThat(ISBN.constructorCount).as(\"constructor invocations\").isEqualTo(2);\r\n    assertThat(ISBN.toStringCount).as(\"toString() invocations\").isEqualTo(0);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertObjectToObjectUsingValueOfMethod()",
    "tailType": "method"
  }
]