[
  {
    "head": "org.springframework.core.env.MutablePropertySourcesTests#test()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid test() {\r\n    MutablePropertySources sources = new MutablePropertySources();\r\n    sources.addLast(new MockPropertySource(\"b\").withProperty(\"p1\", \"bValue\"));\r\n    sources.addLast(new MockPropertySource(\"d\").withProperty(\"p1\", \"dValue\"));\r\n    sources.addLast(new MockPropertySource(\"f\").withProperty(\"p1\", \"fValue\"));\r\n    assertThat(sources).hasSize(3);\r\n    assertThat(sources.contains(\"a\")).isFalse();\r\n    assertThat(sources.contains(\"b\")).isTrue();\r\n    assertThat(sources.contains(\"c\")).isFalse();\r\n    assertThat(sources.contains(\"d\")).isTrue();\r\n    assertThat(sources.contains(\"e\")).isFalse();\r\n    assertThat(sources.contains(\"f\")).isTrue();\r\n    assertThat(sources.contains(\"g\")).isFalse();\r\n    assertThat(sources.get(\"b\")).isNotNull();\r\n    assertThat(sources.get(\"b\").getProperty(\"p1\")).isEqualTo(\"bValue\");\r\n    assertThat(sources.get(\"d\")).isNotNull();\r\n    assertThat(sources.get(\"d\").getProperty(\"p1\")).isEqualTo(\"dValue\");\r\n    sources.addBefore(\"b\", new MockPropertySource(\"a\"));\r\n    sources.addAfter(\"b\", new MockPropertySource(\"c\"));\r\n    assertThat(sources).hasSize(5);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"a\"))).isEqualTo(0);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"b\"))).isEqualTo(1);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"c\"))).isEqualTo(2);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"d\"))).isEqualTo(3);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"f\"))).isEqualTo(4);\r\n    sources.addBefore(\"f\", new MockPropertySource(\"e\"));\r\n    sources.addAfter(\"f\", new MockPropertySource(\"g\"));\r\n    assertThat(sources).hasSize(7);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"a\"))).isEqualTo(0);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"b\"))).isEqualTo(1);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"c\"))).isEqualTo(2);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"d\"))).isEqualTo(3);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"e\"))).isEqualTo(4);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"f\"))).isEqualTo(5);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"g\"))).isEqualTo(6);\r\n    sources.addLast(new MockPropertySource(\"a\"));\r\n    assertThat(sources).hasSize(7);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"b\"))).isEqualTo(0);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"c\"))).isEqualTo(1);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"d\"))).isEqualTo(2);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"e\"))).isEqualTo(3);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"f\"))).isEqualTo(4);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"g\"))).isEqualTo(5);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"a\"))).isEqualTo(6);\r\n    sources.addFirst(new MockPropertySource(\"a\"));\r\n    assertThat(sources).hasSize(7);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"a\"))).isEqualTo(0);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"b\"))).isEqualTo(1);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"c\"))).isEqualTo(2);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"d\"))).isEqualTo(3);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"e\"))).isEqualTo(4);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"f\"))).isEqualTo(5);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"g\"))).isEqualTo(6);\r\n    assertThat(PropertySource.named(\"a\")).isEqualTo(sources.remove(\"a\"));\r\n    assertThat(sources).hasSize(6);\r\n    assertThat(sources.contains(\"a\")).isFalse();\r\n    assertThat(sources.remove(\"a\")).isNull();\r\n    assertThat(sources).hasSize(6);\r\n    String bogusPS = \"bogus\";\r\n    assertThatIllegalArgumentException().isThrownBy(() -> sources.addAfter(bogusPS, new MockPropertySource(\"h\"))).withMessageContaining(\"does not exist\");\r\n    sources.addFirst(new MockPropertySource(\"a\"));\r\n    assertThat(sources).hasSize(7);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"a\"))).isEqualTo(0);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"b\"))).isEqualTo(1);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"c\"))).isEqualTo(2);\r\n    sources.replace(\"a\", new MockPropertySource(\"a-replaced\"));\r\n    assertThat(sources).hasSize(7);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"a-replaced\"))).isEqualTo(0);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"b\"))).isEqualTo(1);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"c\"))).isEqualTo(2);\r\n    sources.replace(\"a-replaced\", new MockPropertySource(\"a\"));\r\n    assertThatIllegalArgumentException().isThrownBy(() -> sources.replace(bogusPS, new MockPropertySource(\"bogus-replaced\"))).withMessageContaining(\"does not exist\");\r\n    assertThatIllegalArgumentException().isThrownBy(() -> sources.addBefore(\"b\", new MockPropertySource(\"b\"))).withMessageContaining(\"cannot be added relative to itself\");\r\n    assertThatIllegalArgumentException().isThrownBy(() -> sources.addAfter(\"b\", new MockPropertySource(\"b\"))).withMessageContaining(\"cannot be added relative to itself\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.MutablePropertySourcesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.MutablePropertySourcesTests#test()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.MutablePropertySourcesTests#test()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.MutablePropertySourcesTests#getNonExistentPropertySourceReturnsNull()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getNonExistentPropertySourceReturnsNull() {\r\n    MutablePropertySources sources = new MutablePropertySources();\r\n    assertThat(sources.get(\"bogus\")).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.MutablePropertySourcesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.MutablePropertySourcesTests#getNonExistentPropertySourceReturnsNull()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.MutablePropertySourcesTests#getNonExistentPropertySourceReturnsNull()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.MutablePropertySourcesTests#iteratorContainsPropertySource()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid iteratorContainsPropertySource() {\r\n    MutablePropertySources sources = new MutablePropertySources();\r\n    sources.addLast(new MockPropertySource(\"test\"));\r\n    Iterator<PropertySource<?>> it = sources.iterator();\r\n    assertThat(it.hasNext()).isTrue();\r\n    assertThat(it.next().getName()).isEqualTo(\"test\");\r\n    assertThatExceptionOfType(UnsupportedOperationException.class).isThrownBy(it::remove);\r\n    assertThat(it.hasNext()).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.MutablePropertySourcesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.MutablePropertySourcesTests#iteratorContainsPropertySource()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.MutablePropertySourcesTests#iteratorContainsPropertySource()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.MutablePropertySourcesTests#iteratorIsEmptyForEmptySources()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid iteratorIsEmptyForEmptySources() {\r\n    MutablePropertySources sources = new MutablePropertySources();\r\n    Iterator<PropertySource<?>> it = sources.iterator();\r\n    assertThat(it.hasNext()).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.MutablePropertySourcesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.MutablePropertySourcesTests#iteratorIsEmptyForEmptySources()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.MutablePropertySourcesTests#iteratorIsEmptyForEmptySources()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.MutablePropertySourcesTests#streamContainsPropertySource()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid streamContainsPropertySource() {\r\n    MutablePropertySources sources = new MutablePropertySources();\r\n    sources.addLast(new MockPropertySource(\"test\"));\r\n    assertThat(sources.stream()).isNotNull();\r\n    assertThat(sources.stream().count()).isEqualTo(1L);\r\n    assertThat(sources.stream().anyMatch(source -> \"test\".equals(source.getName()))).isTrue();\r\n    assertThat(sources.stream().anyMatch(source -> \"bogus\".equals(source.getName()))).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.MutablePropertySourcesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.MutablePropertySourcesTests#streamContainsPropertySource()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.MutablePropertySourcesTests#streamContainsPropertySource()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.MutablePropertySourcesTests#streamIsEmptyForEmptySources()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid streamIsEmptyForEmptySources() {\r\n    MutablePropertySources sources = new MutablePropertySources();\r\n    assertThat(sources.stream()).isNotNull();\r\n    assertThat(sources.stream().count()).isEqualTo(0L);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.MutablePropertySourcesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.MutablePropertySourcesTests#streamIsEmptyForEmptySources()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.MutablePropertySourcesTests#streamIsEmptyForEmptySources()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.env",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.env",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.env.ProfilesTests",
    "tailType": "class"
  }
]