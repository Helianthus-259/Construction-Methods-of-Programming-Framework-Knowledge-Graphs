[
  {
    "head": "org.springframework.util.xml.DomUtilsTests#getTextValueWithCommentInXml()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getTextValueWithCommentInXml() {\r\n    Element elementWithComment = getDocumentElement(\"\"\"\r\n        <?xml version=\"1.0\"?>\r\n        <state>\r\n        \t<!-- This is a comment -->\r\n        \t<person>Alice</person>\r\n        </state>\"\"\");\r\n    assertThat(DomUtils.getTextValue(elementWithComment)).isBlank();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.DomUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.DomUtilsTests#getTextValueWithCommentInXml()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.DomUtilsTests#getTextValueWithCommentInXml()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.DomUtilsTests#getTextValueWithEntityReference()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getTextValueWithEntityReference() {\r\n    Element elementWithEntityReference = getDocumentElement(\"\"\"\r\n        <?xml version=\"1.0\"?>\r\n        <state>\r\n        \t&amp;\r\n        \t<person>Alice</person>\r\n        </state>\"\"\");\r\n    assertThat(DomUtils.getTextValue(elementWithEntityReference)).contains(\"&\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.DomUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.DomUtilsTests#getTextValueWithEntityReference()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.DomUtilsTests#getTextValueWithEntityReference()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.DomUtilsTests#getTextValueWithEmptyElement()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getTextValueWithEmptyElement() {\r\n    Element emptyElement = getDocumentElement(\"\"\"\r\n        <?xml version=\"1.0\"?>\r\n        <person></person>\"\"\");\r\n    assertThat(DomUtils.getTextValue(emptyElement)).isBlank();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.DomUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.DomUtilsTests#getTextValueWithEmptyElement()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.DomUtilsTests#getTextValueWithEmptyElement()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.DomUtilsTests#nodeNameEqualsWhenTrue()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nodeNameEqualsWhenTrue() {\r\n    assertThat(DomUtils.nodeNameEquals(SCHOOL_ELEMENT, \"school\")).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.DomUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.DomUtilsTests#nodeNameEqualsWhenTrue()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.DomUtilsTests#nodeNameEqualsWhenTrue()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.DomUtilsTests#nodeNameEqualsWhenFalse()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nodeNameEqualsWhenFalse() {\r\n    assertThat(DomUtils.nodeNameEquals(SCHOOL_ELEMENT, \"college\")).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.DomUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.DomUtilsTests#nodeNameEqualsWhenFalse()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.DomUtilsTests#nodeNameEqualsWhenFalse()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.DomUtilsTests#getDocumentElement(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static Element getDocumentElement(String xmlContent) {\r\n    try {\r\n        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();\r\n        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\r\n        Document document = documentBuilder.parse(new ByteArrayInputStream(xmlContent.getBytes()));\r\n        return document.getDocumentElement();\r\n    } catch (Exception ex) {\r\n        throw new IllegalStateException(\"Failed to parse xml content:%n%s\".formatted(xmlContent), ex);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.DomUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.DomUtilsTests#getDocumentElement(String)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util.xml",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util.xml",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.xml.ListBasedXMLEventReaderTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.xml.ListBasedXMLEventReaderTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util.xml;\n\nimport java.io.StringReader;\nimport java.io.StringWriter;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport javax.xml.stream.XMLEventReader;\nimport javax.xml.stream.XMLEventWriter;\nimport javax.xml.stream.XMLInputFactory;\nimport javax.xml.stream.XMLOutputFactory;\nimport javax.xml.stream.XMLStreamException;\nimport javax.xml.stream.events.XMLEvent;\n\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.core.testfixture.xml.XmlContent;\n\nimport static javax.xml.stream.XMLStreamConstants.END_DOCUMENT;\nimport static javax.xml.stream.XMLStreamConstants.END_ELEMENT;\nimport static javax.xml.stream.XMLStreamConstants.START_DOCUMENT;\nimport static javax.xml.stream.XMLStreamConstants.START_ELEMENT;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n\n/**\n * @author Arjen Poutsma\n * @author Andrzej Ho≈Çowko\n */\nclass ListBasedXMLEventReaderTests {\n\n\tprivate final XMLInputFactory inputFactory = XMLInputFactory.newInstance();\n\n\tprivate final XMLOutputFactory outputFactory = XMLOutputFactory.newFactory();\n\n\n\t@Test\n\tvoid standard() throws Exception {\n\t\tString xml = \"<foo><bar>baz</bar></foo>\";\n\t\tList<XMLEvent> events = readEvents(xml);\n\n\t\tListBasedXMLEventReader reader = new ListBasedXMLEventReader(events);\n\n\t\tStringWriter resultWriter = new StringWriter();\n\t\tXMLEventWriter writer = this.outputFactory.createXMLEventWriter(resultWriter);\n\t\twriter.add(reader);\n\n\t\tassertThat(XmlContent.from(resultWriter)).isSimilarTo(xml);\n\t}\n\n\t@Test\n\tvoid getElementText() throws Exception {\n\t\tString xml = \"<foo><bar>baz</bar></foo>\";\n\t\tList<XMLEvent> events = readEvents(xml);\n\n\t\tListBasedXMLEventReader reader = new ListBasedXMLEventReader(events);\n\n\t\tassertThat(reader.nextEvent().getEventType()).isEqualTo(START_DOCUMENT);\n\t\tassertThat(reader.nextEvent().getEventType()).isEqualTo(START_ELEMENT);\n\t\tassertThat(reader.nextEvent().getEventType()).isEqualTo(START_ELEMENT);\n\t\tassertThat(reader.getElementText()).isEqualTo(\"baz\");\n\t\tassertThat(reader.nextEvent().getEventType()).isEqualTo(END_ELEMENT);\n\t\tassertThat(reader.nextEvent().getEventType()).isEqualTo(END_DOCUMENT);\n\t}\n\n\t@Test\n\tvoid getElementTextThrowsExceptionAtWrongPosition() throws Exception {\n\t\tString xml = \"<foo><bar>baz</bar></foo>\";\n\t\tList<XMLEvent> events = readEvents(xml);\n\n\t\tListBasedXMLEventReader reader = new ListBasedXMLEventReader(events);\n\n\t\tassertThat(reader.nextEvent().getEventType()).isEqualTo(START_DOCUMENT);\n\n\t\tassertThatExceptionOfType(XMLStreamException.class).isThrownBy(\n\t\t\t\treader::getElementText)\n\t\t\t.withMessageStartingWith(\"Not at START_ELEMENT\");\n\t}\n\n\tprivate List<XMLEvent> readEvents(String xml) throws XMLStreamException {\n\t\tXMLEventReader reader = this.inputFactory.createXMLEventReader(new StringReader(xml));\n\t\tList<XMLEvent> events = new ArrayList<>();\n\t\twhile (reader.hasNext()) {\n\t\t\tevents.add(reader.nextEvent());\n\t\t}\n\t\treturn events;\n\t}\n\n}\n",
    "tailType": "class_code"
  }
]