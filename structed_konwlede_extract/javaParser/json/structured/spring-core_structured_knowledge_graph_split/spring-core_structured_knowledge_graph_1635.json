[
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnMethodHierarchyScansInCorrectOrder()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodWhenNotAnnotatedScansNone()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid superclassStrategyOnMethodWhenNotAnnotatedScansNone() {\r\n    Method source = methodFrom(WithNoAnnotations.class);\r\n    assertThat(scan(source, SearchStrategy.SUPERCLASS)).isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodWhenNotAnnotatedScansNone()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodWhenNotAnnotatedScansNone()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodScansAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid superclassStrategyOnMethodScansAnnotations() {\r\n    Method source = methodFrom(WithSingleAnnotation.class);\r\n    assertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\"0:TestAnnotation1\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodScansAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodScansAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodWhenMultipleAnnotationsScansAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid superclassStrategyOnMethodWhenMultipleAnnotationsScansAnnotations() {\r\n    Method source = methodFrom(WithMultipleAnnotations.class);\r\n    assertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\"0:TestAnnotation1\", \"0:TestAnnotation2\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodWhenMultipleAnnotationsScansAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodWhenMultipleAnnotationsScansAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodWhenHasSuperclassScansSuperclass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid superclassStrategyOnMethodWhenHasSuperclassScansSuperclass() {\r\n    Method source = methodFrom(WithSingleSuperclass.class);\r\n    assertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\"0:TestAnnotation1\", \"1:TestAnnotation2\", \"1:TestInheritedAnnotation2\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodWhenHasSuperclassScansSuperclass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodWhenHasSuperclassScansSuperclass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodWhenHasInterfaceDoesNotIncludeInterfaces()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid superclassStrategyOnMethodWhenHasInterfaceDoesNotIncludeInterfaces() {\r\n    Method source = methodFrom(WithSingleInterface.class);\r\n    assertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\"0:TestAnnotation1\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodWhenHasInterfaceDoesNotIncludeInterfaces()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodWhenHasInterfaceDoesNotIncludeInterfaces()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodHierarchyScansInCorrectOrder()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid superclassStrategyOnMethodHierarchyScansInCorrectOrder() {\r\n    Method source = methodFrom(WithHierarchy.class);\r\n    assertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\"0:TestAnnotation1\", \"1:TestAnnotation2\", \"1:TestInheritedAnnotation2\", \"2:TestAnnotation3\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodHierarchyScansInCorrectOrder()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodHierarchyScansInCorrectOrder()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWhenNotAnnotatedScansNone()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid typeHierarchyStrategyOnMethodWhenNotAnnotatedScansNone() {\r\n    Method source = methodFrom(WithNoAnnotations.class);\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).isEmpty();\r\n}",
    "tailType": "method_code"
  }
]