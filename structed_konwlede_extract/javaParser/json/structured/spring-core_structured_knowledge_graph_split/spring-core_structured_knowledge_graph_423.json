[
  {
    "head": "org.springframework.util.xml.StaxUtilsTests#isStaxSourceInvalid()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.StaxUtilsTests#isStaxSource()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isStaxSource() throws Exception {\r\n    XMLInputFactory inputFactory = XMLInputFactory.newInstance();\r\n    String expected = \"<element/>\";\r\n    XMLStreamReader streamReader = inputFactory.createXMLStreamReader(new StringReader(expected));\r\n    Source source = StaxUtils.createCustomStaxSource(streamReader);\r\n    assertThat(StaxUtils.isStaxSource(source)).as(\"Not a StAX Source\").isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.StaxUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxUtilsTests#isStaxSource()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.StaxUtilsTests#isStaxSource()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.StaxUtilsTests#isStaxSourceJaxp14()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isStaxSourceJaxp14() throws Exception {\r\n    XMLInputFactory inputFactory = XMLInputFactory.newInstance();\r\n    String expected = \"<element/>\";\r\n    XMLStreamReader streamReader = inputFactory.createXMLStreamReader(new StringReader(expected));\r\n    StAXSource source = new StAXSource(streamReader);\r\n    assertThat(StaxUtils.isStaxSource(source)).as(\"Not a StAX Source\").isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.StaxUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxUtilsTests#isStaxSourceJaxp14()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.StaxUtilsTests#isStaxSourceJaxp14()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.StaxUtilsTests#isStaxResultInvalid()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isStaxResultInvalid() {\r\n    assertThat(StaxUtils.isStaxResult(new DOMResult())).as(\"A StAX Result\").isFalse();\r\n    assertThat(StaxUtils.isStaxResult(new SAXResult())).as(\"A StAX Result\").isFalse();\r\n    assertThat(StaxUtils.isStaxResult(new StreamResult())).as(\"A StAX Result\").isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.StaxUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxUtilsTests#isStaxResultInvalid()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.StaxUtilsTests#isStaxResultInvalid()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.StaxUtilsTests#isStaxResult()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isStaxResult() throws Exception {\r\n    XMLOutputFactory outputFactory = XMLOutputFactory.newInstance();\r\n    XMLStreamWriter streamWriter = outputFactory.createXMLStreamWriter(new StringWriter());\r\n    Result result = StaxUtils.createCustomStaxResult(streamWriter);\r\n    assertThat(StaxUtils.isStaxResult(result)).as(\"Not a StAX Result\").isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.StaxUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxUtilsTests#isStaxResult()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.StaxUtilsTests#isStaxResult()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.StaxUtilsTests#isStaxResultJaxp14()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isStaxResultJaxp14() throws Exception {\r\n    XMLOutputFactory outputFactory = XMLOutputFactory.newInstance();\r\n    XMLStreamWriter streamWriter = outputFactory.createXMLStreamWriter(new StringWriter());\r\n    StAXResult result = new StAXResult(streamWriter);\r\n    assertThat(StaxUtils.isStaxResult(result)).as(\"Not a StAX Result\").isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.StaxUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxUtilsTests#isStaxResultJaxp14()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.StaxUtilsTests#isStaxResultJaxp14()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.asm",
    "tailType": "package"
  },
  {
    "head": "org.springframework.asm",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.asm.Handler",
    "tailType": "class"
  },
  {
    "head": "org.springframework.asm.Handler",
    "headType": "class",
    "relation": "provide",
    "tail": "// ASM: a very small and fast Java bytecode manipulation framework\n// Copyright (c) 2000-2011 INRIA, France Telecom\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions\n// are met:\n// 1. Redistributions of source code must retain the above copyright\n//    notice, this list of conditions and the following disclaimer.\n// 2. Redistributions in binary form must reproduce the above copyright\n//    notice, this list of conditions and the following disclaimer in the\n//    documentation and/or other materials provided with the distribution.\n// 3. Neither the name of the copyright holders nor the names of its\n//    contributors may be used to endorse or promote products derived from\n//    this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n// THE POSSIBILITY OF SUCH DAMAGE.\npackage org.springframework.asm;\n\n/**\n * Information about an exception handler. Corresponds to an element of the exception_table array of\n * a Code attribute, as defined in the Java Virtual Machine Specification (JVMS). Handler instances\n * can be chained together, with their {@link #nextHandler} field, to describe a full JVMS\n * exception_table array.\n *\n * @see <a href=\"https://docs.oracle.com/javase/specs/jvms/se9/html/jvms-4.html#jvms-4.7.3\">JVMS\n *     4.7.3</a>\n * @author Eric Bruneton\n */\nfinal class Handler {\n\n  /**\n   * The start_pc field of this JVMS exception_table entry. Corresponds to the beginning of the\n   * exception handler's scope (inclusive).\n   */\n  final Label startPc;\n\n  /**\n   * The end_pc field of this JVMS exception_table entry. Corresponds to the end of the exception\n   * handler's scope (exclusive).\n   */\n  final Label endPc;\n\n  /**\n   * The handler_pc field of this JVMS exception_table entry. Corresponding to the beginning of the\n   * exception handler's code.\n   */\n  final Label handlerPc;\n\n  /**\n   * The catch_type field of this JVMS exception_table entry. This is the constant pool index of the\n   * internal name of the type of exceptions handled by this handler, or 0 to catch any exceptions.\n   */\n  final int catchType;\n\n  /**\n   * The internal name of the type of exceptions handled by this handler, or {@literal null} to\n   * catch any exceptions.\n   */\n  final String catchTypeDescriptor;\n\n  /** The next exception handler. */\n  Handler nextHandler;\n\n  /**\n   * Constructs a new Handler.\n   *\n   * @param startPc the start_pc field of this JVMS exception_table entry.\n   * @param endPc the end_pc field of this JVMS exception_table entry.\n   * @param handlerPc the handler_pc field of this JVMS exception_table entry.\n   * @param catchType The catch_type field of this JVMS exception_table entry.\n   * @param catchTypeDescriptor The internal name of the type of exceptions handled by this handler,\n   *     or {@literal null} to catch any exceptions.\n   */\n  Handler(\n      final Label startPc,\n      final Label endPc,\n      final Label handlerPc,\n      final int catchType,\n      final String catchTypeDescriptor) {\n    this.startPc = startPc;\n    this.endPc = endPc;\n    this.handlerPc = handlerPc;\n    this.catchType = catchType;\n    this.catchTypeDescriptor = catchTypeDescriptor;\n  }\n\n  /**\n   * Constructs a new Handler from the given one, with a different scope.\n   *\n   * @param handler an existing Handler.\n   * @param startPc the start_pc field of this JVMS exception_table entry.\n   * @param endPc the end_pc field of this JVMS exception_table entry.\n   */\n  Handler(final Handler handler, final Label startPc, final Label endPc) {\n    this(startPc, endPc, handler.handlerPc, handler.catchType, handler.catchTypeDescriptor);\n    this.nextHandler = handler.nextHandler;\n  }\n\n  /**\n   * Removes the range between start and end from the Handler list that begins with the given\n   * element.\n   *\n   * @param firstHandler the beginning of a Handler list. May be {@literal null}.\n   * @param start the start of the range to be removed.\n   * @param end the end of the range to be removed. Maybe {@literal null}.\n   * @return the exception handler list with the start-end range removed.\n   */\n  static Handler removeRange(final Handler firstHandler, final Label start, final Label end) {\n    if (firstHandler == null) {\n      return null;\n    } else {\n      firstHandler.nextHandler = removeRange(firstHandler.nextHandler, start, end);\n    }\n    int handlerStart = firstHandler.startPc.bytecodeOffset;\n    int handlerEnd = firstHandler.endPc.bytecodeOffset;\n    int rangeStart = start.bytecodeOffset;\n    int rangeEnd = end == null ? Integer.MAX_VALUE : end.bytecodeOffset;\n    // Return early if [handlerStart,handlerEnd[ and [rangeStart,rangeEnd[ don't intersect.\n    if (rangeStart >= handlerEnd || rangeEnd <= handlerStart) {\n      return firstHandler;\n    }\n    if (rangeStart <= handlerStart) {\n      if (rangeEnd >= handlerEnd) {\n        // If [handlerStart,handlerEnd[ is included in [rangeStart,rangeEnd[, remove firstHandler.\n        return firstHandler.nextHandler;\n      } else {\n        // [handlerStart,handlerEnd[ - [rangeStart,rangeEnd[ = [rangeEnd,handlerEnd[\n        return new Handler(firstHandler, end, firstHandler.endPc);\n      }\n    } else if (rangeEnd >= handlerEnd) {\n      // [handlerStart,handlerEnd[ - [rangeStart,rangeEnd[ = [handlerStart,rangeStart[\n      return new Handler(firstHandler, firstHandler.startPc, start);\n    } else {\n      // [handlerStart,handlerEnd[ - [rangeStart,rangeEnd[ =\n      //     [handlerStart,rangeStart[ + [rangeEnd,handerEnd[\n      firstHandler.nextHandler = new Handler(firstHandler, end, firstHandler.endPc);\n      return new Handler(firstHandler, firstHandler.startPc, start);\n    }\n  }\n\n  /**\n   * Returns the number of elements of the Handler list that begins with the given element.\n   *\n   * @param firstHandler the beginning of a Handler list. May be {@literal null}.\n   * @return the number of elements of the Handler list that begins with 'handler'.\n   */\n  static int getExceptionTableLength(final Handler firstHandler) {\n    int length = 0;\n    Handler handler = firstHandler;\n    while (handler != null) {\n      length++;\n      handler = handler.nextHandler;\n    }\n    return length;\n  }\n\n  /**\n   * Returns the size in bytes of the JVMS exception_table corresponding to the Handler list that\n   * begins with the given element. <i>This includes the exception_table_length field.</i>\n   *\n   * @param firstHandler the beginning of a Handler list. May be {@literal null}.\n   * @return the size in bytes of the exception_table_length and exception_table structures.\n   */\n  static int getExceptionTableSize(final Handler firstHandler) {\n    return 2 + 8 * getExceptionTableLength(firstHandler);\n  }\n\n  /**\n   * Puts the JVMS exception_table corresponding to the Handler list that begins with the given\n   * element. <i>This includes the exception_table_length field.</i>\n   *\n   * @param firstHandler the beginning of a Handler list. May be {@literal null}.\n   * @param output where the exception_table_length and exception_table structures must be put.\n   */\n  static void putExceptionTable(final Handler firstHandler, final ByteVector output) {\n    output.putShort(getExceptionTableLength(firstHandler));\n    Handler handler = firstHandler;\n    while (handler != null) {\n      output\n          .putShort(handler.startPc.bytecodeOffset)\n          .putShort(handler.endPc.bytecodeOffset)\n          .putShort(handler.handlerPc.bytecodeOffset)\n          .putShort(handler.catchType);\n      handler = handler.nextHandler;\n    }\n  }\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.asm.Handler",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.Handler#startPc",
    "tailType": "field"
  }
]