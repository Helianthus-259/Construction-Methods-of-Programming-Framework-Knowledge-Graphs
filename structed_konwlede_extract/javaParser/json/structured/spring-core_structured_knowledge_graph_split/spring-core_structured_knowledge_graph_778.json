[
  {
    "head": "org.springframework.core.annotation.MergedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotation#getDefaultValue(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotation#getDefaultValue(String,Class<T>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the default attribute value from the annotation as specified in\r\n * the annotation declaration.\r\n * @param attributeName the attribute name\r\n * @param type the attribute type. Must be compatible with the underlying\r\n * attribute type or {@code Object.class}.\r\n * @return an optional of the default value or {@link Optional#empty()} if\r\n * there is no matching attribute or no defined default\r\n */\r\n<T> Optional<T> getDefaultValue(String attributeName, Class<T> type);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotation#getDefaultValue(String,Class<T>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotation#filterDefaultValues()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a new view of the annotation with all attributes that have default\r\n * values removed.\r\n * @return a filtered view of the annotation without any attributes that\r\n * have a default value\r\n * @see #filterAttributes(Predicate)\r\n */\r\nMergedAnnotation<A> filterDefaultValues();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotation#filterDefaultValues()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotation#filterAttributes(Predicate<String>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a new view of the annotation with only attributes that match the\r\n * given predicate.\r\n * @param predicate a predicate used to filter attribute names\r\n * @return a filtered view of the annotation\r\n * @see #filterDefaultValues()\r\n * @see MergedAnnotationPredicates\r\n */\r\nMergedAnnotation<A> filterAttributes(Predicate<String> predicate);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotation#filterAttributes(Predicate<String>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotation#withNonMergedAttributes()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a new view of the annotation that exposes non-merged attribute values.\r\n * <p>Methods from this view will return attribute values with only alias mirroring\r\n * rules applied. Aliases to {@link #getMetaSource() meta-source} attributes will\r\n * not be applied.\r\n * @return a non-merged view of the annotation\r\n */\r\nMergedAnnotation<A> withNonMergedAttributes();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotation#withNonMergedAttributes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotation#asAnnotationAttributes(Adapt)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a new mutable {@link AnnotationAttributes} instance from this\r\n * merged annotation.\r\n * <p>The {@link Adapt adaptations} may be used to change the way that values\r\n * are added.\r\n * @param adaptations the adaptations that should be applied to the annotation values\r\n * @return an immutable map containing the attributes and values\r\n */\r\nAnnotationAttributes asAnnotationAttributes(Adapt... adaptations);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotation#asAnnotationAttributes(Adapt)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotation#asMap(Adapt)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get an immutable {@link Map} that contains all the annotation attributes.\r\n * <p>The {@link Adapt adaptations} may be used to change the way that values are added.\r\n * @param adaptations the adaptations that should be applied to the annotation values\r\n * @return an immutable map containing the attributes and values\r\n */\r\nMap<String, Object> asMap(Adapt... adaptations);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotation#asMap(Adapt)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotation#asMap(Function<MergedAnnotation<?>,T>,Adapt)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a new {@link Map} instance of the given type that contains all the annotation\r\n * attributes.\r\n * <p>The {@link Adapt adaptations} may be used to change the way that values are added.\r\n * @param factory a map factory\r\n * @param adaptations the adaptations that should be applied to the annotation values\r\n * @return a map containing the attributes and values\r\n */\r\n<T extends Map<String, Object>> T asMap(Function<MergedAnnotation<?>, T> factory, Adapt... adaptations);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotation#asMap(Function<MergedAnnotation<?>,T>,Adapt)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotation#synthesize()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a type-safe synthesized version of this merged annotation that can\r\n * be used directly in code.\r\n * <p>The result is synthesized using a JDK {@link java.lang.reflect.Proxy Proxy}\r\n * and as a result may incur a computational cost when first invoked.\r\n * <p>If this merged annotation was created {@linkplain #of(AnnotatedElement, Class, Map)\r\n * from} a map of annotation attributes or default attribute values, those\r\n * attributes will always be synthesized into an annotation instance.\r\n * <p>If this merged annotation was created {@linkplain #from(Annotation) from}\r\n * an annotation instance, that annotation will be returned unmodified if it is\r\n * not <em>synthesizable</em>. An annotation is considered synthesizable if\r\n * it has not already been synthesized and one of the following is true.\r\n * <ul>\r\n * <li>The annotation declares attributes annotated with {@link AliasFor @AliasFor}.</li>\r\n * <li>The annotation is a composed annotation that relies on convention-based\r\n * annotation attribute overrides in meta-annotations.</li>\r\n * <li>The annotation declares attributes that are annotations or arrays of\r\n * annotations that are themselves synthesizable.</li>\r\n * </ul>\r\n * @return a synthesized version of the annotation or the original annotation\r\n * unmodified\r\n * @throws NoSuchElementException on a missing annotation\r\n */\r\nA synthesize() throws NoSuchElementException;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotation#synthesize()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotation#synthesize(Predicate<? super MergedAnnotation<A>>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Optionally create a type-safe synthesized version of this annotation based\r\n * on a condition predicate.\r\n * <p>The result is synthesized using a JDK {@link java.lang.reflect.Proxy Proxy}\r\n * and as a result may incur a computational cost when first invoked.\r\n * <p>Consult the documentation for {@link #synthesize()} for an explanation\r\n * of what is considered synthesizable.\r\n * @param condition the test to determine if the annotation can be synthesized\r\n * @return an optional containing the synthesized version of the annotation or\r\n * an empty optional if the condition doesn't match\r\n * @throws NoSuchElementException on a missing annotation\r\n * @see MergedAnnotationPredicates\r\n */\r\nOptional<A> synthesize(Predicate<? super MergedAnnotation<A>> condition) throws NoSuchElementException;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotation#synthesize(Predicate<? super MergedAnnotation<A>>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotation#missing()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a {@link MergedAnnotation} that represents a missing annotation\r\n * (i.e. one that is not present).\r\n * @return an instance representing a missing annotation\r\n */\r\nstatic <A extends Annotation> MergedAnnotation<A> missing() {\r\n    return MissingMergedAnnotation.getInstance();\r\n}",
    "tailType": "method_code"
  }
]