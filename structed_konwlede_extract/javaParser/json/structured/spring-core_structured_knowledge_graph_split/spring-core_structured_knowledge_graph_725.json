[
  {
    "head": "org.springframework.cglib.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.util.SorterTemplate",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.util.SorterTemplate",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2003 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.cglib.util;\n\nabstract class SorterTemplate {\n    private static final int MERGESORT_THRESHOLD = 12;\n    private static final int QUICKSORT_THRESHOLD = 7;\n\n    abstract protected void swap(int i, int j);\n    abstract protected int compare(int i, int j);\n\n    protected void quickSort(int lo, int hi) {\n        quickSortHelper(lo, hi);\n        insertionSort(lo, hi);\n    }\n\n    private void quickSortHelper(int lo, int hi) {\n        for (;;) {\n            int diff = hi - lo;\n            if (diff <= QUICKSORT_THRESHOLD) {\n                break;\n            }\n            int i = (hi + lo) / 2;\n            if (compare(lo, i) > 0) {\n                swap(lo, i);\n            }\n            if (compare(lo, hi) > 0) {\n                swap(lo, hi);\n            }\n            if (compare(i, hi) > 0) {\n                swap(i, hi);\n            }\n            int j = hi - 1;\n            swap(i, j);\n            i = lo;\n            int v = j;\n            for (;;) {\n                while (compare(++i, v) < 0) {\n                    /* nothing */\n                }\n                while (compare(--j, v) > 0) {\n                    /* nothing */\n                }\n                if (j < i) {\n                    break;\n                }\n                swap(i, j);\n            }\n            swap(i, hi - 1);\n            if (j - lo <= hi - i + 1) {\n                quickSortHelper(lo, j);\n                lo = i + 1;\n            } else {\n                quickSortHelper(i + 1, hi);\n                hi = j;\n            }\n        }\n    }\n\n    private void insertionSort(int lo, int hi) {\n        for (int i = lo + 1 ; i <= hi; i++) {\n            for (int j = i; j > lo; j--) {\n                if (compare(j - 1, j) > 0) {\n                    swap(j - 1, j);\n                } else {\n                    break;\n                }\n            }\n        }\n    }\n\n    protected void mergeSort(int lo, int hi) {\n        int diff = hi - lo;\n        if (diff <= MERGESORT_THRESHOLD) {\n            insertionSort(lo, hi);\n            return;\n        }\n        int mid = lo + diff / 2;\n        mergeSort(lo, mid);\n        mergeSort(mid, hi);\n        merge(lo, mid, hi, mid - lo, hi - mid);\n    }\n\n    private void merge(int lo, int pivot, int hi, int len1, int len2) {\n        if (len1 == 0 || len2 == 0) {\n            return;\n        }\n        if (len1 + len2 == 2) {\n            if (compare(pivot, lo) < 0) {\n                swap(pivot, lo);\n            }\n            return;\n        }\n        int first_cut, second_cut;\n        int len11, len22;\n        if (len1 > len2) {\n            len11 = len1 / 2;\n            first_cut = lo + len11;\n            second_cut = lower(pivot, hi, first_cut);\n            len22 = second_cut - pivot;\n        } else {\n            len22 = len2 / 2;\n            second_cut = pivot + len22;\n            first_cut = upper(lo, pivot, second_cut);\n            len11 = first_cut - lo;\n        }\n        rotate(first_cut, pivot, second_cut);\n        int new_mid = first_cut + len22;\n        merge(lo, first_cut, new_mid, len11, len22);\n        merge(new_mid, second_cut, hi, len1 - len11, len2 - len22);\n    }\n\n    private void rotate(int lo, int mid, int hi) {\n        int lot = lo;\n        int hit = mid - 1;\n        while (lot < hit) {\n            swap(lot++, hit--);\n        }\n        lot = mid; hit = hi - 1;\n        while (lot < hit) {\n            swap(lot++, hit--);\n        }\n        lot = lo; hit = hi - 1;\n        while (lot < hit) {\n            swap(lot++, hit--);\n        }\n    }\n\n    private int lower(int lo, int hi, int val) {\n        int len = hi - lo;\n        while (len > 0) {\n            int half = len / 2;\n            int mid= lo + half;\n            if (compare(mid, val) < 0) {\n                lo = mid + 1;\n                len = len - half -1;\n            } else {\n                len = half;\n            }\n        }\n        return lo;\n    }\n\n    private int upper(int lo, int hi, int val) {\n        int len = hi - lo;\n        while (len > 0) {\n            int half = len / 2;\n            int mid = lo + half;\n            if (compare(val, mid) < 0) {\n                len = half;\n            } else {\n                lo = mid + 1;\n                len = len - half -1;\n            }\n        }\n        return lo;\n    }\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.util.SorterTemplate",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.util.SorterTemplate#MERGESORT_THRESHOLD",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.util.SorterTemplate#MERGESORT_THRESHOLD",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.util.SorterTemplate",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.util.SorterTemplate#QUICKSORT_THRESHOLD",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.util.SorterTemplate#QUICKSORT_THRESHOLD",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.util.SorterTemplate#swap(int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "abstract protected void swap(int i, int j);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.util.SorterTemplate",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.util.SorterTemplate#swap(int,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.util.SorterTemplate#compare(int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "abstract protected int compare(int i, int j);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.util.SorterTemplate",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.util.SorterTemplate#compare(int,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.util.SorterTemplate#quickSort(int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "protected void quickSort(int lo, int hi) {\r\n    quickSortHelper(lo, hi);\r\n    insertionSort(lo, hi);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.util.SorterTemplate",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.util.SorterTemplate#quickSort(int,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.util.SorterTemplate#quickSortHelper(int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void quickSortHelper(int lo, int hi) {\r\n    for (; ; ) {\r\n        int diff = hi - lo;\r\n        if (diff <= QUICKSORT_THRESHOLD) {\r\n            break;\r\n        }\r\n        int i = (hi + lo) / 2;\r\n        if (compare(lo, i) > 0) {\r\n            swap(lo, i);\r\n        }\r\n        if (compare(lo, hi) > 0) {\r\n            swap(lo, hi);\r\n        }\r\n        if (compare(i, hi) > 0) {\r\n            swap(i, hi);\r\n        }\r\n        int j = hi - 1;\r\n        swap(i, j);\r\n        i = lo;\r\n        int v = j;\r\n        for (; ; ) {\r\n            while (compare(++i, v) < 0) {\r\n                /* nothing */\r\n            }\r\n            while (compare(--j, v) > 0) {\r\n                /* nothing */\r\n            }\r\n            if (j < i) {\r\n                break;\r\n            }\r\n            swap(i, j);\r\n        }\r\n        swap(i, hi - 1);\r\n        if (j - lo <= hi - i + 1) {\r\n            quickSortHelper(lo, j);\r\n            lo = i + 1;\r\n        } else {\r\n            quickSortHelper(i + 1, hi);\r\n            hi = j;\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.util.SorterTemplate",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.util.SorterTemplate#quickSortHelper(int,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.util.SorterTemplate#insertionSort(int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void insertionSort(int lo, int hi) {\r\n    for (int i = lo + 1; i <= hi; i++) {\r\n        for (int j = i; j > lo; j--) {\r\n            if (compare(j - 1, j) > 0) {\r\n                swap(j - 1, j);\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.util.SorterTemplate",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.util.SorterTemplate#insertionSort(int,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.util.SorterTemplate#mergeSort(int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "protected void mergeSort(int lo, int hi) {\r\n    int diff = hi - lo;\r\n    if (diff <= MERGESORT_THRESHOLD) {\r\n        insertionSort(lo, hi);\r\n        return;\r\n    }\r\n    int mid = lo + diff / 2;\r\n    mergeSort(lo, mid);\r\n    mergeSort(mid, hi);\r\n    merge(lo, mid, hi, mid - lo, hi - mid);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.util.SorterTemplate",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.util.SorterTemplate#mergeSort(int,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.util.SorterTemplate#merge(int,int,int,int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void merge(int lo, int pivot, int hi, int len1, int len2) {\r\n    if (len1 == 0 || len2 == 0) {\r\n        return;\r\n    }\r\n    if (len1 + len2 == 2) {\r\n        if (compare(pivot, lo) < 0) {\r\n            swap(pivot, lo);\r\n        }\r\n        return;\r\n    }\r\n    int first_cut, second_cut;\r\n    int len11, len22;\r\n    if (len1 > len2) {\r\n        len11 = len1 / 2;\r\n        first_cut = lo + len11;\r\n        second_cut = lower(pivot, hi, first_cut);\r\n        len22 = second_cut - pivot;\r\n    } else {\r\n        len22 = len2 / 2;\r\n        second_cut = pivot + len22;\r\n        first_cut = upper(lo, pivot, second_cut);\r\n        len11 = first_cut - lo;\r\n    }\r\n    rotate(first_cut, pivot, second_cut);\r\n    int new_mid = first_cut + len22;\r\n    merge(lo, first_cut, new_mid, len11, len22);\r\n    merge(new_mid, second_cut, hi, len1 - len11, len2 - len22);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.util.SorterTemplate",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.util.SorterTemplate#merge(int,int,int,int,int)",
    "tailType": "method"
  }
]