[
  {
    "head": "org.springframework.aot.generate.GeneratedMethodsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedMethodsTests#withPrefixWhenGeneratingSetMethodUsesPrefix()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedMethodsTests#withPrefixWhenGeneratingSetMethodUsesPrefix()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedMethodsTests#withPrefixWhenGeneratingIsMethodUsesPrefix()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid withPrefixWhenGeneratingIsMethodUsesPrefix() {\r\n    GeneratedMethod generateMethod = this.methods.withPrefix(\"myBean\").add(\"isTest\", methodSpecCustomizer);\r\n    assertThat(generateMethod.getName()).hasToString(\"isMyBeanTest\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedMethodsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedMethodsTests#withPrefixWhenGeneratingIsMethodUsesPrefix()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedMethodsTests#withPrefixWhenGeneratingIsMethodUsesPrefix()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedMethodsTests#withPrefixWhenGeneratingOtherMethodUsesPrefix()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid withPrefixWhenGeneratingOtherMethodUsesPrefix() {\r\n    GeneratedMethod generateMethod = this.methods.withPrefix(\"myBean\").add(\"test\", methodSpecCustomizer);\r\n    assertThat(generateMethod.getName()).hasToString(\"myBeanTest\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedMethodsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedMethodsTests#withPrefixWhenGeneratingOtherMethodUsesPrefix()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedMethodsTests#withPrefixWhenGeneratingOtherMethodUsesPrefix()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedMethodsTests#doWithMethodSpecsAcceptsMethodSpecs()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid doWithMethodSpecsAcceptsMethodSpecs() {\r\n    this.methods.add(\"springBeans\", methodSpecCustomizer);\r\n    this.methods.add(\"springContext\", methodSpecCustomizer);\r\n    List<String> names = new ArrayList<>();\r\n    this.methods.doWithMethodSpecs(methodSpec -> names.add(methodSpec.name));\r\n    assertThat(names).containsExactly(\"springBeans\", \"springContext\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedMethodsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedMethodsTests#doWithMethodSpecsAcceptsMethodSpecs()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedMethodsTests#doWithMethodSpecsAcceptsMethodSpecs()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.generate",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.generate",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.generate.GeneratedMethodTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedMethodTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.generate;\n\nimport java.util.function.Consumer;\n\nimport javax.lang.model.element.Modifier;\n\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.aot.generate.MethodReference.ArgumentCodeGenerator;\nimport org.springframework.javapoet.ClassName;\nimport org.springframework.javapoet.CodeBlock;\nimport org.springframework.javapoet.MethodSpec;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatIllegalStateException;\n\n/**\n * Tests for {@link GeneratedMethod}.\n *\n * @author Phillip Webb\n * @author Stephane Nicoll\n */\nclass GeneratedMethodTests {\n\n\tprivate static final ClassName TEST_CLASS_NAME = ClassName.get(\"com.example\", \"Test\");\n\n\tprivate static final Consumer<MethodSpec.Builder> emptyMethod = method -> {};\n\n\tprivate static final String NAME = \"spring\";\n\n\t@Test\n\tvoid getNameReturnsName() {\n\t\tGeneratedMethod generatedMethod = new GeneratedMethod(TEST_CLASS_NAME, NAME, emptyMethod);\n\t\tassertThat(generatedMethod.getName()).isSameAs(NAME);\n\t}\n\n\t@Test\n\tvoid generateMethodSpecReturnsMethodSpec() {\n\t\tGeneratedMethod generatedMethod = create(method -> method.addJavadoc(\"Test\"));\n\t\tassertThat(generatedMethod.getMethodSpec().javadoc).asString().contains(\"Test\");\n\t}\n\n\t@Test\n\tvoid generateMethodSpecWhenMethodNameIsChangedThrowsException() {\n\t\tassertThatIllegalStateException().isThrownBy(() ->\n\t\t\t\t\t\tcreate(method -> method.setName(\"badname\")).getMethodSpec())\n\t\t\t\t.withMessage(\"'method' consumer must not change the generated method name\");\n\t}\n\n\t@Test\n\tvoid toMethodReferenceWithInstanceMethod() {\n\t\tGeneratedMethod generatedMethod = create(emptyMethod);\n\t\tMethodReference methodReference = generatedMethod.toMethodReference();\n\t\tassertThat(methodReference).isNotNull();\n\t\tassertThat(methodReference.toInvokeCodeBlock(ArgumentCodeGenerator.none(), TEST_CLASS_NAME))\n\t\t\t\t.isEqualTo(CodeBlock.of(\"spring()\"));\n\t}\n\n\t@Test\n\tvoid toMethodReferenceWithStaticMethod() {\n\t\tGeneratedMethod generatedMethod = create(method -> method.addModifiers(Modifier.STATIC));\n\t\tMethodReference methodReference = generatedMethod.toMethodReference();\n\t\tassertThat(methodReference).isNotNull();\n\t\tClassName anotherDeclaringClass = ClassName.get(\"com.example\", \"Another\");\n\t\tassertThat(methodReference.toInvokeCodeBlock(ArgumentCodeGenerator.none(), anotherDeclaringClass))\n\t\t\t\t.isEqualTo(CodeBlock.of(\"com.example.Test.spring()\"));\n\t}\n\n\tprivate GeneratedMethod create(Consumer<MethodSpec.Builder> method) {\n\t\treturn new GeneratedMethod(TEST_CLASS_NAME, NAME, method);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedMethodTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.generate.GeneratedMethodTests#TEST_CLASS_NAME",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedMethodTests#TEST_CLASS_NAME",
    "headType": "field",
    "relation": "haveType",
    "tail": "ClassName",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedMethodTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.generate.GeneratedMethodTests#emptyMethod",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedMethodTests#emptyMethod",
    "headType": "field",
    "relation": "haveType",
    "tail": "Consumer<MethodSpec.Builder>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedMethodTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.generate.GeneratedMethodTests#NAME",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedMethodTests#NAME",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  }
]