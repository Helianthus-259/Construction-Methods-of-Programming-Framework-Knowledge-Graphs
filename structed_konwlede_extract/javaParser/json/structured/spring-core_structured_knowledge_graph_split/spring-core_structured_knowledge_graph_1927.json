[
  {
    "head": "org.springframework.core.convert.support.Text#value",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.support.Text#toData()",
    "headType": "method",
    "relation": "provide",
    "tail": "public Optional<Data> toData() {\r\n    return Optional.of(new Data(this.value));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.Text",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.Text#toData()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.support.Data",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.support.Data",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert.support;\n\nimport java.util.Optional;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.core.convert.ConverterNotFoundException;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n\n/**\n * Tests for {@link ObjectToObjectConverter}.\n *\n * @author Sam Brannen\n * @author Phillip Webb\n * @since 5.3.21\n * @see org.springframework.core.convert.converter.DefaultConversionServiceTests#convertObjectToObjectUsingValueOfMethod()\n */\nclass ObjectToObjectConverterTests {\n\n\tprivate final GenericConversionService conversionService = new GenericConversionService();\n\n\n\t@BeforeEach\n\tvoid setup() {\n\t\tconversionService.addConverter(new ObjectToObjectConverter());\n\t}\n\n\n\t/**\n\t * This test effectively verifies that the {@link ObjectToObjectConverter}\n\t * was properly registered with the {@link GenericConversionService}.\n\t */\n\t@Test\n\tvoid nonStaticToTargetTypeSimpleNameMethodWithMatchingReturnType() {\n\t\tassertThat(conversionService.canConvert(Source.class, Data.class))\n\t\t\t\t.as(\"can convert Source to Data\").isTrue();\n\t\tData data = conversionService.convert(new Source(\"test\"), Data.class);\n\t\tassertThat(data).asString().isEqualTo(\"test\");\n\t}\n\n\t@Test\n\tvoid nonStaticToTargetTypeSimpleNameMethodWithDifferentReturnType() {\n\t\tassertThat(conversionService.canConvert(Text.class, Data.class))\n\t\t\t\t.as(\"can convert Text to Data\").isFalse();\n\t\tassertThat(conversionService.canConvert(Text.class, Optional.class))\n\t\t\t\t.as(\"can convert Text to Optional\").isFalse();\n\t\tassertThatExceptionOfType(ConverterNotFoundException.class)\n\t\t\t\t.as(\"convert Text to Data\")\n\t\t\t\t.isThrownBy(() -> conversionService.convert(new Text(\"test\"), Data.class));\n\t}\n\n\t@Test\n\tvoid staticValueOfFactoryMethodWithDifferentReturnType() {\n\t\tassertThat(conversionService.canConvert(String.class, Data.class))\n\t\t\t\t.as(\"can convert String to Data\").isFalse();\n\t\tassertThatExceptionOfType(ConverterNotFoundException.class)\n\t\t\t\t.as(\"convert String to Data\")\n\t\t\t\t.isThrownBy(() -> conversionService.convert(\"test\", Data.class));\n\t}\n\n\n\tstatic class Source {\n\n\t\tprivate final String value;\n\n\t\tprivate Source(String value) {\n\t\t\tthis.value = value;\n\t\t}\n\n\t\tpublic Data toData() {\n\t\t\treturn new Data(this.value);\n\t\t}\n\t}\n\n\n\tstatic class Text {\n\n\t\tprivate final String value;\n\n\t\tprivate Text(String value) {\n\t\t\tthis.value = value;\n\t\t}\n\n\t\tpublic Optional<Data> toData() {\n\t\t\treturn Optional.of(new Data(this.value));\n\t\t}\n\t}\n\n\n\tstatic class Data {\n\n\t\tprivate final String value;\n\n\t\tprivate Data(String value) {\n\t\t\tthis.value = value;\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn this.value;\n\t\t}\n\n\t\tpublic static Optional<Data> valueOf(String string) {\n\t\t\treturn (string != null ? Optional.of(new Data(string)) : Optional.empty());\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.convert.support.Data",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.support.Data#value",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.support.Data#value",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.support.Data#toString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String toString() {\r\n    return this.value;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.Data",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.Data#toString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.Data#toString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.Data#valueOf(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static Optional<Data> valueOf(String string) {\r\n    return (string != null ? Optional.of(new Data(string)) : Optional.empty());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.Data",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.Data#valueOf(String)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.convert.support",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.convert.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.support.StreamConverterTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.support.StreamConverterTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert.support;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Stream;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.core.convert.ConversionFailedException;\nimport org.springframework.core.convert.ConverterNotFoundException;\nimport org.springframework.core.convert.TypeDescriptor;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatExceptionOfType;\nimport static org.assertj.core.api.Assertions.assertThatIllegalStateException;\nimport static org.assertj.core.api.InstanceOfAssertFactories.list;\nimport static org.assertj.core.api.InstanceOfAssertFactories.stream;\n\n/**\n * Tests for {@link StreamConverter}.\n *\n * @author Stephane Nicoll\n * @author Sam Brannen\n * @since 4.2\n */\nclass StreamConverterTests {\n\n\tprivate final GenericConversionService conversionService = new GenericConversionService();\n\n\tprivate final StreamConverter streamConverter = new StreamConverter(this.conversionService);\n\n\n\t@BeforeEach\n\tvoid setup() {\n\t\tthis.conversionService.addConverter(new CollectionToCollectionConverter(this.conversionService));\n\t\tthis.conversionService.addConverter(new ArrayToCollectionConverter(this.conversionService));\n\t\tthis.conversionService.addConverter(new CollectionToArrayConverter(this.conversionService));\n\t\tthis.conversionService.addConverter(this.streamConverter);\n\t}\n\n\n\t@Test\n\tvoid convertFromStreamToList() throws NoSuchFieldException {\n\t\tthis.conversionService.addConverter(Number.class, String.class, new ObjectToStringConverter());\n\t\tStream<Integer> stream = Stream.of(1, 2, 3);\n\t\tTypeDescriptor listOfStrings = new TypeDescriptor(Types.class.getField(\"listOfStrings\"));\n\t\tObject result = this.conversionService.convert(stream, listOfStrings);\n\n\t\tassertThat(result).asInstanceOf(list(String.class)).containsExactly(\"1\", \"2\", \"3\");\n\t}\n\n\t@Test\n\tvoid convertFromStreamToArray() throws NoSuchFieldException {\n\t\tthis.conversionService.addConverterFactory(new NumberToNumberConverterFactory());\n\t\tStream<Integer> stream = Stream.of(1, 2, 3);\n\t\tTypeDescriptor arrayOfLongs = new TypeDescriptor(Types.class.getField(\"arrayOfLongs\"));\n\t\tObject result = this.conversionService.convert(stream, arrayOfLongs);\n\n\t\tassertThat(result).as(\"Converted object must not be null\").isNotNull();\n\t\tassertThat(result.getClass().isArray()).as(\"Converted object must be an array\").isTrue();\n\t\tLong[] content = (Long[]) result;\n\t\tassertThat(content).containsExactly(1L, 2L, 3L);\n\t}\n\n\t@Test\n\tvoid convertFromStreamToRawList() throws NoSuchFieldException {\n\t\tStream<Integer> stream = Stream.of(1, 2, 3);\n\t\tTypeDescriptor listOfStrings = new TypeDescriptor(Types.class.getField(\"rawList\"));\n\t\tObject result = this.conversionService.convert(stream, listOfStrings);\n\n\t\tassertThat(result).asInstanceOf(list(Object.class)).containsExactly(1, 2, 3);\n\t}\n\n\t@Test\n\tvoid convertFromStreamToArrayNoConverter() throws NoSuchFieldException {\n\t\tStream<Integer> stream = Stream.of(1, 2, 3);\n\t\tTypeDescriptor arrayOfLongs = new TypeDescriptor(Types.class.getField(\"arrayOfLongs\"));\n\t\tassertThatExceptionOfType(ConversionFailedException.class)\n\t\t\t.isThrownBy(() -> this.conversionService.convert(stream, arrayOfLongs))\n\t\t\t.withCauseInstanceOf(ConverterNotFoundException.class);\n\t}\n\n\t@Test\n\tvoid convertFromListToStream() throws NoSuchFieldException {\n\t\tthis.conversionService.addConverterFactory(new StringToNumberConverterFactory());\n\t\tList<String> list = Arrays.asList(\"1\", \"2\", \"3\");\n\t\tTypeDescriptor streamOfInteger = new TypeDescriptor(Types.class.getField(\"streamOfIntegers\"));\n\t\tObject result = this.conversionService.convert(list, streamOfInteger);\n\n\t\tassertThat(result).as(\"Converted object must be a stream\").isInstanceOf(Stream.class);\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tStream<Integer> content = (Stream<Integer>) result;\n\t\tassertThat(content.mapToInt(x -> x).sum()).isEqualTo(6);\n\t}\n\n\t@Test\n\tvoid convertFromArrayToStream() throws NoSuchFieldException {\n\t\tInteger[] array = new Integer[] {1, 0, 1};\n\t\tthis.conversionService.addConverter(Integer.class, Boolean.class, source -> source == 1);\n\t\tTypeDescriptor streamOfBoolean = new TypeDescriptor(Types.class.getField(\"streamOfBooleans\"));\n\t\tObject result = this.conversionService.convert(array, streamOfBoolean);\n\n\t\tassertThat(result).asInstanceOf(stream(Boolean.class)).filteredOn(x -> x).hasSize(2);\n\t}\n\n\t@Test\n\tvoid convertFromListToRawStream() throws NoSuchFieldException {\n\t\tList<String> list = Arrays.asList(\"1\", \"2\", \"3\");\n\t\tTypeDescriptor streamOfInteger = new TypeDescriptor(Types.class.getField(\"rawStream\"));\n\t\tObject result = this.conversionService.convert(list, streamOfInteger);\n\n\t\tassertThat(result).as(\"Converted object must be a stream\").isInstanceOf(Stream.class);\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tStream<Object> content = (Stream<Object>) result;\n\t\tassertThat(content).containsExactly(\"1\", \"2\", \"3\");\n\t}\n\n\t@Test\n\tvoid doesNotMatchIfNoStream() throws NoSuchFieldException {\n\t\tassertThat(this.streamConverter.matches(\n\t\t\t\tnew TypeDescriptor(Types.class.getField(\"listOfStrings\")),\n\t\t\t\tnew TypeDescriptor(Types.class.getField(\"arrayOfLongs\")))).as(\"Should not match non stream type\").isFalse();\n\t}\n\n\t@Test\n\tvoid shouldFailToConvertIfNoStream() throws NoSuchFieldException {\n\t\tTypeDescriptor sourceType = new TypeDescriptor(Types.class.getField(\"listOfStrings\"));\n\t\tTypeDescriptor targetType = new TypeDescriptor(Types.class.getField(\"arrayOfLongs\"));\n\t\tassertThatIllegalStateException().isThrownBy(() ->\n\t\t\tthis.streamConverter.convert(new Object(), sourceType, targetType));\n\t}\n\n\n\t@SuppressWarnings({ \"rawtypes\" })\n\tstatic class Types {\n\n\t\tpublic List<String> listOfStrings;\n\n\t\tpublic Long[] arrayOfLongs;\n\n\t\tpublic Stream<Integer> streamOfIntegers;\n\n\t\tpublic Stream<Boolean> streamOfBooleans;\n\n\t\tpublic Stream rawStream;\n\n\t\tpublic List rawList;\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.convert.support.StreamConverterTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.support.StreamConverterTests#conversionService",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.support.StreamConverterTests#conversionService",
    "headType": "field",
    "relation": "haveType",
    "tail": "GenericConversionService",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.support.StreamConverterTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.support.StreamConverterTests#streamConverter",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.support.StreamConverterTests#streamConverter",
    "headType": "field",
    "relation": "haveType",
    "tail": "StreamConverter",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.support.StreamConverterTests#setup()",
    "headType": "method",
    "relation": "provide",
    "tail": "@BeforeEach\r\nvoid setup() {\r\n    this.conversionService.addConverter(new CollectionToCollectionConverter(this.conversionService));\r\n    this.conversionService.addConverter(new ArrayToCollectionConverter(this.conversionService));\r\n    this.conversionService.addConverter(new CollectionToArrayConverter(this.conversionService));\r\n    this.conversionService.addConverter(this.streamConverter);\r\n}",
    "tailType": "method_code"
  }
]