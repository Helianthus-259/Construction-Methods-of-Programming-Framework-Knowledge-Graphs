[
  {
    "head": "org.springframework.cglib.proxy.LazyLoaderGenerator#generate(ClassEmitter,Context,List)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.proxy.LazyLoaderGenerator#loadMethod(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "private Signature loadMethod(int index) {\r\n    return new Signature(\"CGLIB$LOAD_PRIVATE_\" + index, Constants.TYPE_OBJECT, Constants.TYPES_EMPTY);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.LazyLoaderGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.LazyLoaderGenerator#loadMethod(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.LazyLoaderGenerator#generateStatic(CodeEmitter,Context,List)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void generateStatic(CodeEmitter e, Context context, List methods) ;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.LazyLoaderGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.LazyLoaderGenerator#generateStatic(CodeEmitter,Context,List)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.LazyLoaderGenerator#generateStatic(CodeEmitter,Context,List)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.proxy",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.proxy",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.proxy.MethodInterceptor",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.proxy.MethodInterceptor",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002,2003 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.cglib.proxy;\n\n/**\n * General-purpose {@link Enhancer} callback which provides for \"around advice\".\n * @author Juozas Baliuka <a href=\"mailto:baliuka@mwm.lt\">baliuka@mwm.lt</a>\n * @version $Id: MethodInterceptor.java,v 1.8 2004/06/24 21:15:20 herbyderby Exp $\n */\npublic interface MethodInterceptor\nextends Callback\n{\n    /**\n     * All generated proxied methods call this method instead of the original method.\n     * The original method may either be invoked by normal reflection using the Method object,\n     * or by using the MethodProxy (faster).\n     * @param obj \"this\", the enhanced object\n     * @param method intercepted Method\n     * @param args argument array; primitive types are wrapped\n     * @param proxy used to invoke super (non-intercepted method); may be called\n     * as many times as needed\n     * @throws Throwable any exception may be thrown; if so, super method will not be invoked\n     * @return any value compatible with the signature of the proxied method. Method returning void will ignore this value.\n     * @see MethodProxy\n     */\n    public Object intercept(Object obj, java.lang.reflect.Method method, Object[] args,\n                               MethodProxy proxy) throws Throwable;\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.proxy.MethodInterceptor#intercept(Object,java.lang.reflect.Method,Object[],MethodProxy)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * All generated proxied methods call this method instead of the original method.\r\n * The original method may either be invoked by normal reflection using the Method object,\r\n * or by using the MethodProxy (faster).\r\n * @param obj \"this\", the enhanced object\r\n * @param method intercepted Method\r\n * @param args argument array; primitive types are wrapped\r\n * @param proxy used to invoke super (non-intercepted method); may be called\r\n * as many times as needed\r\n * @throws Throwable any exception may be thrown; if so, super method will not be invoked\r\n * @return any value compatible with the signature of the proxied method. Method returning void will ignore this value.\r\n * @see MethodProxy\r\n */\r\npublic Object intercept(Object obj, java.lang.reflect.Method method, Object[] args, MethodProxy proxy) throws Throwable;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.MethodInterceptor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.MethodInterceptor#intercept(Object,java.lang.reflect.Method,Object[],MethodProxy)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.MethodInterceptor",
    "headType": "class",
    "relation": "extend",
    "tail": "Callback",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.proxy",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.proxy",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.proxy.MethodInterceptorGenerator",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.proxy.MethodInterceptorGenerator",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.proxy.MethodInterceptorGenerator",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2003,2004 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.cglib.proxy;\n\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.springframework.asm.Label;\nimport org.springframework.asm.Type;\nimport org.springframework.cglib.core.ClassEmitter;\nimport org.springframework.cglib.core.ClassInfo;\nimport org.springframework.cglib.core.CodeEmitter;\nimport org.springframework.cglib.core.CollectionUtils;\nimport org.springframework.cglib.core.Constants;\nimport org.springframework.cglib.core.EmitUtils;\nimport org.springframework.cglib.core.Local;\nimport org.springframework.cglib.core.MethodInfo;\nimport org.springframework.cglib.core.ObjectSwitchCallback;\nimport org.springframework.cglib.core.Signature;\nimport org.springframework.cglib.core.Transformer;\nimport org.springframework.cglib.core.TypeUtils;\n\n@SuppressWarnings({\"rawtypes\", \"unchecked\", \"deprecation\"})\nclass MethodInterceptorGenerator\nimplements CallbackGenerator\n{\n    public static final MethodInterceptorGenerator INSTANCE = new MethodInterceptorGenerator();\n\n    static final String EMPTY_ARGS_NAME = \"CGLIB$emptyArgs\";\n    static final String FIND_PROXY_NAME = \"CGLIB$findMethodProxy\";\n    static final Class[] FIND_PROXY_TYPES = { Signature.class };\n\n    private static final Type ABSTRACT_METHOD_ERROR =\n      TypeUtils.parseType(\"AbstractMethodError\");\n    private static final Type METHOD =\n      TypeUtils.parseType(\"java.lang.reflect.Method\");\n    private static final Type REFLECT_UTILS =\n      TypeUtils.parseType(\"org.springframework.cglib.core.ReflectUtils\");\n    private static final Type METHOD_PROXY =\n      TypeUtils.parseType(\"org.springframework.cglib.proxy.MethodProxy\");\n    private static final Type METHOD_INTERCEPTOR =\n      TypeUtils.parseType(\"org.springframework.cglib.proxy.MethodInterceptor\");\n    private static final Signature GET_DECLARED_METHODS =\n      TypeUtils.parseSignature(\"java.lang.reflect.Method[] getDeclaredMethods()\");\n    private static final Signature FIND_METHODS =\n      TypeUtils.parseSignature(\"java.lang.reflect.Method[] findMethods(String[], java.lang.reflect.Method[])\");\n    private static final Signature MAKE_PROXY =\n      new Signature(\"create\", METHOD_PROXY, new Type[]{\n          Constants.TYPE_CLASS,\n          Constants.TYPE_CLASS,\n          Constants.TYPE_STRING,\n          Constants.TYPE_STRING,\n          Constants.TYPE_STRING\n      });\n    private static final Signature INTERCEPT =\n      new Signature(\"intercept\", Constants.TYPE_OBJECT, new Type[]{\n          Constants.TYPE_OBJECT,\n          METHOD,\n          Constants.TYPE_OBJECT_ARRAY,\n          METHOD_PROXY\n      });\n    private static final Signature FIND_PROXY =\n      new Signature(FIND_PROXY_NAME, METHOD_PROXY, new Type[]{ Constants.TYPE_SIGNATURE });\n    private static final Signature TO_STRING =\n      TypeUtils.parseSignature(\"String toString()\");\n    private static final Transformer METHOD_TO_CLASS = value -> ((MethodInfo)value).getClassInfo();\n\n    private String getMethodField(Signature impl) {\n        return impl.getName() + \"$Method\";\n    }\n    private String getMethodProxyField(Signature impl) {\n        return impl.getName() + \"$Proxy\";\n    }\n\n    @Override\n    public void generate(ClassEmitter ce, Context context, List methods) {\n        Map sigMap = new HashMap();\n        for (Iterator it = methods.iterator(); it.hasNext();) {\n            MethodInfo method = (MethodInfo)it.next();\n            Signature sig = method.getSignature();\n            Signature impl = context.getImplSignature(method);\n\n            String methodField = getMethodField(impl);\n            String methodProxyField = getMethodProxyField(impl);\n\n            sigMap.put(sig.toString(), methodProxyField);\n            ce.declare_field(Constants.PRIVATE_FINAL_STATIC, methodField, METHOD, null);\n            ce.declare_field(Constants.PRIVATE_FINAL_STATIC, methodProxyField, METHOD_PROXY, null);\n            ce.declare_field(Constants.PRIVATE_FINAL_STATIC, EMPTY_ARGS_NAME, Constants.TYPE_OBJECT_ARRAY, null);\n            CodeEmitter e;\n\n            // access method\n            e = ce.begin_method(Constants.ACC_FINAL,\n                                impl,\n                                method.getExceptionTypes());\n            superHelper(e, method, context);\n            e.return_value();\n            e.end_method();\n\n            // around method\n            e = context.beginMethod(ce, method);\n            Label nullInterceptor = e.make_label();\n            context.emitCallback(e, context.getIndex(method));\n            e.dup();\n            e.ifnull(nullInterceptor);\n\n            e.load_this();\n            e.getfield(methodField);\n\n            if (sig.getArgumentTypes().length == 0) {\n                e.getfield(EMPTY_ARGS_NAME);\n            } else {\n                e.create_arg_array();\n            }\n\n            e.getfield(methodProxyField);\n            e.invoke_interface(METHOD_INTERCEPTOR, INTERCEPT);\n            e.unbox_or_zero(sig.getReturnType());\n            e.return_value();\n\n            e.mark(nullInterceptor);\n            superHelper(e, method, context);\n            e.return_value();\n            e.end_method();\n        }\n        generateFindProxy(ce, sigMap);\n    }\n\n    private static void superHelper(CodeEmitter e, MethodInfo method, Context context)\n    {\n        if (TypeUtils.isAbstract(method.getModifiers())) {\n            e.throw_exception(ABSTRACT_METHOD_ERROR, method.toString() + \" is abstract\" );\n        } else {\n            e.load_this();\n            context.emitLoadArgsAndInvoke(e, method);\n        }\n    }\n\n    @Override\n    public void generateStatic(CodeEmitter e, Context context, List methods) throws Exception {\n        /* generates:\n           static {\n             Class thisClass = Class.forName(\"NameOfThisClass\");\n             Class cls = Class.forName(\"java.lang.Object\");\n             String[] sigs = new String[]{ \"toString\", \"()Ljava/lang/String;\", ... };\n             Method[] methods = cls.getDeclaredMethods();\n             methods = ReflectUtils.findMethods(sigs, methods);\n             METHOD_0 = methods[0];\n             CGLIB$ACCESS_0 = MethodProxy.create(cls, thisClass, \"()Ljava/lang/String;\", \"toString\", \"CGLIB$ACCESS_0\");\n             ...\n           }\n        */\n\n        e.push(0);\n        e.newarray();\n        e.putfield(EMPTY_ARGS_NAME);\n\n        Local thisclass = e.make_local();\n        Local declaringclass = e.make_local();\n        EmitUtils.load_class_this(e);\n        e.store_local(thisclass);\n\n        Map methodsByClass = CollectionUtils.bucket(methods, METHOD_TO_CLASS);\n        for (Iterator i = methodsByClass.keySet().iterator(); i.hasNext();) {\n            ClassInfo classInfo = (ClassInfo)i.next();\n\n            List classMethods = (List)methodsByClass.get(classInfo);\n            e.push(2 * classMethods.size());\n            e.newarray(Constants.TYPE_STRING);\n            for (int index = 0; index < classMethods.size(); index++) {\n                MethodInfo method = (MethodInfo)classMethods.get(index);\n                Signature sig = method.getSignature();\n                e.dup();\n                e.push(2 * index);\n                e.push(sig.getName());\n                e.aastore();\n                e.dup();\n                e.push(2 * index + 1);\n                e.push(sig.getDescriptor());\n                e.aastore();\n            }\n\n            EmitUtils.load_class(e, classInfo.getType());\n            e.dup();\n            e.store_local(declaringclass);\n            e.invoke_virtual(Constants.TYPE_CLASS, GET_DECLARED_METHODS);\n            e.invoke_static(REFLECT_UTILS, FIND_METHODS);\n\n            for (int index = 0; index < classMethods.size(); index++) {\n                MethodInfo method = (MethodInfo)classMethods.get(index);\n                Signature sig = method.getSignature();\n                Signature impl = context.getImplSignature(method);\n                e.dup();\n                e.push(index);\n                e.array_load(METHOD);\n                e.putfield(getMethodField(impl));\n\n                e.load_local(declaringclass);\n                e.load_local(thisclass);\n                e.push(sig.getDescriptor());\n                e.push(sig.getName());\n                e.push(impl.getName());\n                e.invoke_static(METHOD_PROXY, MAKE_PROXY);\n                e.putfield(getMethodProxyField(impl));\n            }\n            e.pop();\n        }\n    }\n\n    public void generateFindProxy(ClassEmitter ce, final Map sigMap) {\n        final CodeEmitter e = ce.begin_method(Constants.ACC_PUBLIC | Constants.ACC_STATIC,\n                                              FIND_PROXY,\n                                              null);\n        e.load_arg(0);\n        e.invoke_virtual(Constants.TYPE_OBJECT, TO_STRING);\n        ObjectSwitchCallback callback = new ObjectSwitchCallback() {\n            @Override\n            public void processCase(Object key, Label end) {\n                e.getfield((String)sigMap.get(key));\n                e.return_value();\n            }\n            @Override\n            public void processDefault() {\n                e.aconst_null();\n                e.return_value();\n            }\n        };\n        EmitUtils.string_switch(e,\n                                (String[])sigMap.keySet().toArray(new String[0]),\n                                Constants.SWITCH_STYLE_HASH,\n                                callback);\n        e.end_method();\n    }\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.proxy.MethodInterceptorGenerator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.proxy.MethodInterceptorGenerator#INSTANCE",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.proxy.MethodInterceptorGenerator#INSTANCE",
    "headType": "field",
    "relation": "haveType",
    "tail": "MethodInterceptorGenerator",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.proxy.MethodInterceptorGenerator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.proxy.MethodInterceptorGenerator#EMPTY_ARGS_NAME",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.proxy.MethodInterceptorGenerator#EMPTY_ARGS_NAME",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  }
]