[
  {
    "head": "org.springframework.aot.hint.TypeHintTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.TypeHintTests#createWithNullTypeReference()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.TypeHintTests#createWithNullTypeReference()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.TypeHintTests#createWithType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid createWithType() {\r\n    TypeHint hint = TypeHint.of(TypeReference.of(String.class)).build();\r\n    assertThat(hint).isNotNull();\r\n    assertThat(hint.getType().getCanonicalName()).isEqualTo(\"java.lang.String\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.TypeHintTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.TypeHintTests#createWithType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.TypeHintTests#createWithType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.TypeHintTests#createWithTypeAndReachableType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid createWithTypeAndReachableType() {\r\n    TypeHint hint = TypeHint.of(TypeReference.of(String.class)).onReachableType(TypeReference.of(\"com.example.Test\")).build();\r\n    assertThat(hint).isNotNull();\r\n    assertThat(hint.getReachableType()).isNotNull();\r\n    assertThat(hint.getReachableType().getCanonicalName()).isEqualTo(\"com.example.Test\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.TypeHintTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.TypeHintTests#createWithTypeAndReachableType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.TypeHintTests#createWithTypeAndReachableType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.TypeHintTests#createWithField()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid createWithField() {\r\n    assertFieldHint(TypeHint.of(TypeReference.of(String.class)).withField(\"value\"), fieldHint -> assertThat(fieldHint.getName()).isEqualTo(\"value\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.TypeHintTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.TypeHintTests#createWithField()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.TypeHintTests#createWithField()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.TypeHintTests#assertFieldHint(Builder,Consumer<FieldHint>)",
    "headType": "method",
    "relation": "provide",
    "tail": "void assertFieldHint(Builder builder, Consumer<FieldHint> fieldHint) {\r\n    TypeHint hint = builder.build();\r\n    assertThat(hint.fields()).singleElement().satisfies(fieldHint);\r\n    assertThat(hint.constructors()).isEmpty();\r\n    assertThat(hint.methods()).isEmpty();\r\n    assertThat(hint.getMemberCategories()).isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.TypeHintTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.TypeHintTests#assertFieldHint(Builder,Consumer<FieldHint>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.TypeHintTests#createWithConstructor()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid createWithConstructor() {\r\n    List<TypeReference> parameterTypes = TypeReference.listOf(byte[].class, int.class);\r\n    assertConstructorHint(TypeHint.of(TypeReference.of(String.class)).withConstructor(parameterTypes, ExecutableMode.INTROSPECT), constructorHint -> {\r\n        assertThat(constructorHint.getParameterTypes()).containsOnlyOnceElementsOf(parameterTypes);\r\n        assertThat(constructorHint.getMode()).isEqualTo(ExecutableMode.INTROSPECT);\r\n    });\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.TypeHintTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.TypeHintTests#createWithConstructor()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.TypeHintTests#createWithConstructor()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.TypeHintTests#createWithConstructorWithSameConstructorUpdatesEntry()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid createWithConstructorWithSameConstructorUpdatesEntry() {\r\n    List<TypeReference> parameterTypes = TypeReference.listOf(byte[].class, int.class);\r\n    Builder builder = TypeHint.of(TypeReference.of(String.class)).withConstructor(parameterTypes, ExecutableMode.INTROSPECT);\r\n    assertConstructorHint(builder.withConstructor(parameterTypes, ExecutableMode.INVOKE), constructorHint -> {\r\n        assertThat(constructorHint.getParameterTypes()).containsExactlyElementsOf(parameterTypes);\r\n        assertThat(constructorHint.getMode()).isEqualTo(ExecutableMode.INVOKE);\r\n    });\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.TypeHintTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.TypeHintTests#createWithConstructorWithSameConstructorUpdatesEntry()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.TypeHintTests#createWithConstructorWithSameConstructorUpdatesEntry()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.TypeHintTests#createWithConstructorAndSameConstructorAppliesExecutableModePrecedence()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid createWithConstructorAndSameConstructorAppliesExecutableModePrecedence() {\r\n    List<TypeReference> parameterTypes = TypeReference.listOf(byte[].class, int.class);\r\n    Builder builder = TypeHint.of(TypeReference.of(String.class)).withConstructor(parameterTypes, ExecutableMode.INVOKE);\r\n    assertConstructorHint(builder.withConstructor(parameterTypes, ExecutableMode.INTROSPECT), constructorHint -> {\r\n        assertThat(constructorHint.getParameterTypes()).containsExactlyElementsOf(parameterTypes);\r\n        assertThat(constructorHint.getMode()).isEqualTo(ExecutableMode.INVOKE);\r\n    });\r\n}",
    "tailType": "method_code"
  }
]