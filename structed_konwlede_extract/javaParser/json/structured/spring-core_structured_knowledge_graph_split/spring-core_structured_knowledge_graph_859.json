[
  {
    "head": "org.springframework.core.convert.converter.ConvertiblePair#equals(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.ConvertiblePair#hashCode()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int hashCode() {\r\n    return (this.sourceType.hashCode() * 31 + this.targetType.hashCode());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.ConvertiblePair",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.ConvertiblePair#hashCode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.ConvertiblePair#hashCode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.ConvertiblePair#toString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String toString() {\r\n    return (this.sourceType.getName() + \" -> \" + this.targetType.getName());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.ConvertiblePair",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.ConvertiblePair#toString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.ConvertiblePair#toString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.convert.converter",
    "tailType": "package"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.convert",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.convert",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.ConverterNotFoundException",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.ConverterNotFoundException",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.ConverterNotFoundException",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * Exception to be thrown when a suitable converter could not be found\n * in a given conversion service.\n *\n * @author Keith Donald\n * @author Juergen Hoeller\n * @since 3.0\n */\n@SuppressWarnings(\"serial\")\npublic class ConverterNotFoundException extends ConversionException {\n\n\tprivate final @Nullable TypeDescriptor sourceType;\n\n\tprivate final TypeDescriptor targetType;\n\n\n\t/**\n\t * Create a new conversion executor not found exception.\n\t * @param sourceType the source type requested to convert from\n\t * @param targetType the target type requested to convert to\n\t */\n\tpublic ConverterNotFoundException(@Nullable TypeDescriptor sourceType, TypeDescriptor targetType) {\n\t\tsuper(\"No converter found capable of converting from type [\" + sourceType + \"] to type [\" + targetType + \"]\");\n\t\tthis.sourceType = sourceType;\n\t\tthis.targetType = targetType;\n\t}\n\n\n\t/**\n\t * Return the source type that was requested to convert from.\n\t */\n\tpublic @Nullable TypeDescriptor getSourceType() {\n\t\treturn this.sourceType;\n\t}\n\n\t/**\n\t * Return the target type that was requested to convert to.\n\t */\n\tpublic TypeDescriptor getTargetType() {\n\t\treturn this.targetType;\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.convert.ConverterNotFoundException",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.ConverterNotFoundException#sourceType",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.ConverterNotFoundException#sourceType",
    "headType": "field",
    "relation": "haveType",
    "tail": "TypeDescriptor",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.ConverterNotFoundException",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.ConverterNotFoundException#targetType",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.ConverterNotFoundException#targetType",
    "headType": "field",
    "relation": "haveType",
    "tail": "TypeDescriptor",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.ConverterNotFoundException#getSourceType()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the source type that was requested to convert from.\r\n */\r\n@Nullable\r\npublic TypeDescriptor getSourceType() {\r\n    return this.sourceType;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.ConverterNotFoundException",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.ConverterNotFoundException#getSourceType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.ConverterNotFoundException#getSourceType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.ConverterNotFoundException#getTargetType()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the target type that was requested to convert to.\r\n */\r\npublic TypeDescriptor getTargetType() {\r\n    return this.targetType;\r\n}",
    "tailType": "method_code"
  }
]