[
  {
    "head": "org.springframework.util.function.ThrowingSupplier",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util.function;\n\nimport java.util.function.BiFunction;\nimport java.util.function.Supplier;\n\n/**\n * A {@link Supplier} that allows invocation of code that throws a checked exception.\n *\n * @author Stephane Nicoll\n * @author Phillip Webb\n * @since 6.0\n * @param <T> the type of results supplied by this supplier\n */\npublic interface ThrowingSupplier<T> extends Supplier<T> {\n\n\t/**\n\t * Gets a result, possibly throwing a checked exception.\n\t * @return a result\n\t * @throws Exception on error\n\t */\n\tT getWithException() throws Exception;\n\n\t/**\n\t * Default {@link Supplier#get()} that wraps any thrown checked exceptions\n\t * (by default in a {@link RuntimeException}).\n\t * @see java.util.function.Supplier#get()\n\t */\n\t@Override\n\tdefault T get() {\n\t\treturn get(RuntimeException::new);\n\t}\n\n\t/**\n\t * Gets a result, wrapping any thrown checked exceptions using the given\n\t * {@code exceptionWrapper}.\n\t * @param exceptionWrapper {@link BiFunction} that wraps the given message\n\t * and checked exception into a runtime exception\n\t * @return a result\n\t */\n\tdefault T get(BiFunction<String, Exception, RuntimeException> exceptionWrapper) {\n\t\ttry {\n\t\t\treturn getWithException();\n\t\t}\n\t\tcatch (RuntimeException ex) {\n\t\t\tthrow ex;\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tthrow exceptionWrapper.apply(ex.getMessage(), ex);\n\t\t}\n\t}\n\n\t/**\n\t * Return a new {@link ThrowingSupplier} where the {@link #get()} method\n\t * wraps any thrown checked exceptions using the given\n\t * {@code exceptionWrapper}.\n\t * @param exceptionWrapper {@link BiFunction} that wraps the given message\n\t * and checked exception into a runtime exception\n\t * @return the replacement {@link ThrowingSupplier} instance\n\t */\n\tdefault ThrowingSupplier<T> throwing(BiFunction<String, Exception, RuntimeException> exceptionWrapper) {\n\t\treturn new ThrowingSupplier<>() {\n\t\t\t@Override\n\t\t\tpublic T getWithException() throws Exception {\n\t\t\t\treturn ThrowingSupplier.this.getWithException();\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic T get() {\n\t\t\t\treturn get(exceptionWrapper);\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Lambda friendly convenience method that can be used to create a\n\t * {@link ThrowingSupplier} where the {@link #get()} method wraps any checked\n\t * exception thrown by the supplied lambda expression or method reference.\n\t * <p>This method can be especially useful when working with method references.\n\t * It allows you to easily convert a method that throws a checked exception\n\t * into an instance compatible with a regular {@link Supplier}.\n\t * <p>For example:\n\t * <pre class=\"code\">\n\t * optional.orElseGet(ThrowingSupplier.of(Example::methodThatCanThrowCheckedException));\n\t * </pre>\n\t * @param <T> the type of results supplied by this supplier\n\t * @param supplier the source supplier\n\t * @return a new {@link ThrowingSupplier} instance\n\t */\n\tstatic <T> ThrowingSupplier<T> of(ThrowingSupplier<T> supplier) {\n\t\treturn supplier;\n\t}\n\n\t/**\n\t * Lambda friendly convenience method that can be used to create\n\t * {@link ThrowingSupplier} where the {@link #get()} method wraps any\n\t * thrown checked exceptions using the given {@code exceptionWrapper}.\n\t * <p>This method can be especially useful when working with method references.\n\t * It allows you to easily convert a method that throws a checked exception\n\t * into an instance compatible with a regular {@link Supplier}.\n\t * <p>For example:\n\t * <pre class=\"code\">\n\t * optional.orElseGet(ThrowingSupplier.of(Example::methodThatCanThrowCheckedException, IllegalStateException::new));\n\t * </pre>\n\t * @param <T> the type of results supplied by this supplier\n\t * @param supplier the source supplier\n\t * @param exceptionWrapper the exception wrapper to use\n\t * @return a new {@link ThrowingSupplier} instance\n\t */\n\tstatic <T> ThrowingSupplier<T> of(ThrowingSupplier<T> supplier,\n\t\t\tBiFunction<String, Exception, RuntimeException> exceptionWrapper) {\n\n\t\treturn supplier.throwing(exceptionWrapper);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.function.ThrowingSupplier#getWithException()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Gets a result, possibly throwing a checked exception.\r\n * @return a result\r\n * @throws Exception on error\r\n */\r\nT getWithException() throws Exception;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.function.ThrowingSupplier",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.function.ThrowingSupplier#getWithException()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.function.ThrowingSupplier#get()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Default {@link Supplier#get()} that wraps any thrown checked exceptions\r\n * (by default in a {@link RuntimeException}).\r\n * @see java.util.function.Supplier#get()\r\n */\r\n@Override\r\ndefault T get() {\r\n    return get(RuntimeException::new);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.function.ThrowingSupplier",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.function.ThrowingSupplier#get()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.function.ThrowingSupplier#get()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.function.ThrowingSupplier#get(BiFunction<String,Exception,RuntimeException>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Gets a result, wrapping any thrown checked exceptions using the given\r\n * {@code exceptionWrapper}.\r\n * @param exceptionWrapper {@link BiFunction} that wraps the given message\r\n * and checked exception into a runtime exception\r\n * @return a result\r\n */\r\ndefault T get(BiFunction<String, Exception, RuntimeException> exceptionWrapper) {\r\n    try {\r\n        return getWithException();\r\n    } catch (RuntimeException ex) {\r\n        throw ex;\r\n    } catch (Exception ex) {\r\n        throw exceptionWrapper.apply(ex.getMessage(), ex);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.function.ThrowingSupplier",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.function.ThrowingSupplier#get(BiFunction<String,Exception,RuntimeException>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.function.ThrowingSupplier#throwing(BiFunction<String,Exception,RuntimeException>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a new {@link ThrowingSupplier} where the {@link #get()} method\r\n * wraps any thrown checked exceptions using the given\r\n * {@code exceptionWrapper}.\r\n * @param exceptionWrapper {@link BiFunction} that wraps the given message\r\n * and checked exception into a runtime exception\r\n * @return the replacement {@link ThrowingSupplier} instance\r\n */\r\ndefault ThrowingSupplier<T> throwing(BiFunction<String, Exception, RuntimeException> exceptionWrapper) {\r\n    return new ThrowingSupplier<>() {\r\n\r\n        @Override\r\n        public T getWithException() throws Exception {\r\n            return ThrowingSupplier.this.getWithException();\r\n        }\r\n\r\n        @Override\r\n        public T get() {\r\n            return get(exceptionWrapper);\r\n        }\r\n    };\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.function.ThrowingSupplier",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.function.ThrowingSupplier#throwing(BiFunction<String,Exception,RuntimeException>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.function.ThrowingSupplier#of(ThrowingSupplier<T>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Lambda friendly convenience method that can be used to create a\r\n * {@link ThrowingSupplier} where the {@link #get()} method wraps any checked\r\n * exception thrown by the supplied lambda expression or method reference.\r\n * <p>This method can be especially useful when working with method references.\r\n * It allows you to easily convert a method that throws a checked exception\r\n * into an instance compatible with a regular {@link Supplier}.\r\n * <p>For example:\r\n * <pre class=\"code\">\r\n * optional.orElseGet(ThrowingSupplier.of(Example::methodThatCanThrowCheckedException));\r\n * </pre>\r\n * @param <T> the type of results supplied by this supplier\r\n * @param supplier the source supplier\r\n * @return a new {@link ThrowingSupplier} instance\r\n */\r\nstatic <T> ThrowingSupplier<T> of(ThrowingSupplier<T> supplier) {\r\n    return supplier;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.function.ThrowingSupplier",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.function.ThrowingSupplier#of(ThrowingSupplier<T>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.function.ThrowingSupplier#of(ThrowingSupplier<T>,BiFunction<String,Exception,RuntimeException>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Lambda friendly convenience method that can be used to create\r\n * {@link ThrowingSupplier} where the {@link #get()} method wraps any\r\n * thrown checked exceptions using the given {@code exceptionWrapper}.\r\n * <p>This method can be especially useful when working with method references.\r\n * It allows you to easily convert a method that throws a checked exception\r\n * into an instance compatible with a regular {@link Supplier}.\r\n * <p>For example:\r\n * <pre class=\"code\">\r\n * optional.orElseGet(ThrowingSupplier.of(Example::methodThatCanThrowCheckedException, IllegalStateException::new));\r\n * </pre>\r\n * @param <T> the type of results supplied by this supplier\r\n * @param supplier the source supplier\r\n * @param exceptionWrapper the exception wrapper to use\r\n * @return a new {@link ThrowingSupplier} instance\r\n */\r\nstatic <T> ThrowingSupplier<T> of(ThrowingSupplier<T> supplier, BiFunction<String, Exception, RuntimeException> exceptionWrapper) {\r\n    return supplier.throwing(exceptionWrapper);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.function.ThrowingSupplier",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.function.ThrowingSupplier#of(ThrowingSupplier<T>,BiFunction<String,Exception,RuntimeException>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.function.ThrowingSupplier",
    "headType": "class",
    "relation": "extend",
    "tail": "Supplier",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.IdGenerator",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.IdGenerator",
    "headType": "class",
    "relation": "use",
    "tail": "@FunctionalInterface",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.IdGenerator",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2020 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.util.UUID;\n\n/**\n * Contract for generating universally unique identifiers ({@link UUID UUIDs}).\n *\n * @author Rossen Stoyanchev\n * @since 4.0\n */\n@FunctionalInterface\npublic interface IdGenerator {\n\n\t/**\n\t * Generate a new identifier.\n\t * @return the generated identifier\n\t */\n\tUUID generateId();\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.IdGenerator#generateId()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Generate a new identifier.\r\n * @return the generated identifier\r\n */\r\nUUID generateId();",
    "tailType": "method_code"
  }
]