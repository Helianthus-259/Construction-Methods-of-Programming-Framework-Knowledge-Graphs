[
  {
    "head": "org.springframework.core.io.support.EncodedResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.EncodedResource#getEncoding()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.EncodedResource#getEncoding()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.support.EncodedResource#getCharset()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the {@code Charset} to use for reading from the {@linkplain #getResource() resource},\r\n * or {@code null} if none specified.\r\n */\r\n@Nullable\r\npublic final Charset getCharset() {\r\n    return this.charset;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.EncodedResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.EncodedResource#getCharset()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.EncodedResource#getCharset()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.support.EncodedResource#requiresReader()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine whether a {@link Reader} is required as opposed to an {@link InputStream},\r\n * i.e. whether an {@linkplain #getEncoding() encoding} or a {@link #getCharset() Charset}\r\n * has been specified.\r\n * @see #getReader()\r\n * @see #getInputStream()\r\n */\r\npublic boolean requiresReader() {\r\n    return (this.encoding != null || this.charset != null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.EncodedResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.EncodedResource#requiresReader()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.EncodedResource#getReader()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Open a {@code java.io.Reader} for the specified resource, using the specified\r\n * {@link #getCharset() Charset} or {@linkplain #getEncoding() encoding}\r\n * (if any).\r\n * @throws IOException if opening the Reader failed\r\n * @see #requiresReader()\r\n * @see #getInputStream()\r\n */\r\npublic Reader getReader() throws IOException {\r\n    if (this.charset != null) {\r\n        return new InputStreamReader(this.resource.getInputStream(), this.charset);\r\n    } else if (this.encoding != null) {\r\n        return new InputStreamReader(this.resource.getInputStream(), this.encoding);\r\n    } else {\r\n        return new InputStreamReader(this.resource.getInputStream());\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.EncodedResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.EncodedResource#getReader()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.EncodedResource#getInputStream()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Open an {@code InputStream} for the specified resource, ignoring any specified\r\n * {@link #getCharset() Charset} or {@linkplain #getEncoding() encoding}.\r\n * @throws IOException if opening the InputStream failed\r\n * @see #requiresReader()\r\n * @see #getReader()\r\n */\r\n@Override\r\npublic InputStream getInputStream() throws IOException {\r\n    return this.resource.getInputStream();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.EncodedResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.EncodedResource#getInputStream()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.EncodedResource#getInputStream()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.support.EncodedResource#getContentAsString()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the contents of the specified resource as a string, using the specified\r\n * {@link #getCharset() Charset} or {@linkplain #getEncoding() encoding} (if any).\r\n * @throws IOException if opening the resource failed\r\n * @since 6.0.5\r\n * @see Resource#getContentAsString(Charset)\r\n */\r\npublic String getContentAsString() throws IOException {\r\n    Charset charset;\r\n    if (this.charset != null) {\r\n        charset = this.charset;\r\n    } else if (this.encoding != null) {\r\n        charset = Charset.forName(this.encoding);\r\n    } else {\r\n        charset = Charset.defaultCharset();\r\n    }\r\n    return this.resource.getContentAsString(charset);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.EncodedResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.EncodedResource#getContentAsString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.EncodedResource#equals(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean equals(@Nullable Object other) {\r\n    return (this == other || (other instanceof EncodedResource that && this.resource.equals(that.resource) && ObjectUtils.nullSafeEquals(this.charset, that.charset) && ObjectUtils.nullSafeEquals(this.encoding, that.encoding)));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.EncodedResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.EncodedResource#equals(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.EncodedResource#equals(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.support.EncodedResource#hashCode()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int hashCode() {\r\n    return this.resource.hashCode();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.EncodedResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.EncodedResource#hashCode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.EncodedResource#hashCode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  }
]