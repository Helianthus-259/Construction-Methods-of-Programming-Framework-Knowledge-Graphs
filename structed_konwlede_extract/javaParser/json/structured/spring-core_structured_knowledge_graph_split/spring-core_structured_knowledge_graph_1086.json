[
  {
    "head": "org.springframework.core.io.WritableResource",
    "headType": "class",
    "relation": "extend",
    "tail": "Resource",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.KotlinDetector",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.KotlinDetector",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.KotlinDetector",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core;\n\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Method;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.util.ClassUtils;\n\n/**\n * A common delegate for detecting Kotlin's presence and for identifying Kotlin types. All the methods of this class\n * can be safely used without any preliminary classpath checks.\n *\n * @author Juergen Hoeller\n * @author Sebastien Deleuze\n * @since 5.0\n */\n@SuppressWarnings(\"unchecked\")\npublic abstract class KotlinDetector {\n\n\tprivate static final @Nullable Class<? extends Annotation> kotlinMetadata;\n\n\tprivate static final @Nullable Class<? extends Annotation> kotlinJvmInline;\n\n\tprivate static final @Nullable Class<?> kotlinCoroutineContinuation;\n\n\t// For ConstantFieldFeature compliance, otherwise could be deduced from kotlinMetadata\n\tprivate static final boolean kotlinPresent;\n\n\tprivate static final boolean kotlinReflectPresent;\n\n\tstatic {\n\t\tClassLoader classLoader = KotlinDetector.class.getClassLoader();\n\t\tClass<?> metadata = null;\n\t\tClass<?> jvmInline = null;\n\t\tClass<?> coroutineContinuation = null;\n\t\ttry {\n\t\t\tmetadata = ClassUtils.forName(\"kotlin.Metadata\", classLoader);\n\t\t\ttry {\n\t\t\t\tjvmInline = ClassUtils.forName(\"kotlin.jvm.JvmInline\", classLoader);\n\t\t\t}\n\t\t\tcatch (ClassNotFoundException ex) {\n\t\t\t\t// JVM inline support not available\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tcoroutineContinuation = ClassUtils.forName(\"kotlin.coroutines.Continuation\", classLoader);\n\t\t\t}\n\t\t\tcatch (ClassNotFoundException ex) {\n\t\t\t\t// Coroutines support not available\n\t\t\t}\n\t\t}\n\t\tcatch (ClassNotFoundException ex) {\n\t\t\t// Kotlin API not available - no Kotlin support\n\t\t}\n\t\tkotlinMetadata = (Class<? extends Annotation>) metadata;\n\t\tkotlinPresent = (kotlinMetadata != null);\n\t\tkotlinReflectPresent = ClassUtils.isPresent(\"kotlin.reflect.full.KClasses\", classLoader);\n\t\tkotlinJvmInline = (Class<? extends Annotation>) jvmInline;\n\t\tkotlinCoroutineContinuation = coroutineContinuation;\n\t}\n\n\n\t/**\n\t * Determine whether Kotlin is present in general.\n\t */\n\tpublic static boolean isKotlinPresent() {\n\t\treturn kotlinPresent;\n\t}\n\n\t/**\n\t * Determine whether Kotlin reflection is present.\n\t * @since 5.1\n\t */\n\tpublic static boolean isKotlinReflectPresent() {\n\t\treturn kotlinReflectPresent;\n\t}\n\n\t/**\n\t * Determine whether the given {@code Class} is a Kotlin type\n\t * (with Kotlin metadata present on it).\n\t *\n\t * <p>As of Kotlin 2.0, this method can't be used to detect Kotlin\n\t * lambdas unless they are annotated with <code>@JvmSerializableLambda</code>\n\t * as invokedynamic has become the default method for lambda generation.\n\t */\n\tpublic static boolean isKotlinType(Class<?> clazz) {\n\t\treturn (kotlinPresent && clazz.getDeclaredAnnotation(kotlinMetadata) != null);\n\t}\n\n\t/**\n\t * Return {@code true} if the method is a suspending function.\n\t * @since 5.3\n\t */\n\tpublic static boolean isSuspendingFunction(Method method) {\n\t\tif (kotlinCoroutineContinuation == null) {\n\t\t\treturn false;\n\t\t}\n\t\tint parameterCount = method.getParameterCount();\n\t\treturn (parameterCount > 0 && method.getParameterTypes()[parameterCount - 1] == kotlinCoroutineContinuation);\n\t}\n\n\t/**\n\t * Determine whether the given {@code Class} is an inline class\n\t * (annotated with {@code @JvmInline}).\n\t * @since 6.1.5\n\t * @see <a href=\"https://kotlinlang.org/docs/inline-classes.html\">Kotlin inline value classes</a>\n\t */\n\tpublic static boolean isInlineClass(Class<?> clazz) {\n\t\treturn (kotlinJvmInline != null && clazz.getDeclaredAnnotation(kotlinJvmInline) != null);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.KotlinDetector",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.KotlinDetector#kotlinMetadata",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.KotlinDetector#kotlinMetadata",
    "headType": "field",
    "relation": "haveType",
    "tail": "Class<? extends Annotation>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.KotlinDetector",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.KotlinDetector#kotlinJvmInline",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.KotlinDetector#kotlinJvmInline",
    "headType": "field",
    "relation": "haveType",
    "tail": "Class<? extends Annotation>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.KotlinDetector",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.KotlinDetector#kotlinCoroutineContinuation",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.KotlinDetector#kotlinCoroutineContinuation",
    "headType": "field",
    "relation": "haveType",
    "tail": "Class<?>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.KotlinDetector",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.KotlinDetector#kotlinPresent",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.KotlinDetector#kotlinPresent",
    "headType": "field",
    "relation": "haveType",
    "tail": "boolean",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.KotlinDetector",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.KotlinDetector#kotlinReflectPresent",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.KotlinDetector#kotlinReflectPresent",
    "headType": "field",
    "relation": "haveType",
    "tail": "boolean",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.KotlinDetector#isKotlinPresent()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine whether Kotlin is present in general.\r\n */\r\npublic static boolean isKotlinPresent() {\r\n    return kotlinPresent;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.KotlinDetector",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.KotlinDetector#isKotlinPresent()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.KotlinDetector#isKotlinReflectPresent()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine whether Kotlin reflection is present.\r\n * @since 5.1\r\n */\r\npublic static boolean isKotlinReflectPresent() {\r\n    return kotlinReflectPresent;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.KotlinDetector",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.KotlinDetector#isKotlinReflectPresent()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.KotlinDetector#isKotlinType(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine whether the given {@code Class} is a Kotlin type\r\n * (with Kotlin metadata present on it).\r\n *\r\n * <p>As of Kotlin 2.0, this method can't be used to detect Kotlin\r\n * lambdas unless they are annotated with <code>@JvmSerializableLambda</code>\r\n * as invokedynamic has become the default method for lambda generation.\r\n */\r\npublic static boolean isKotlinType(Class<?> clazz) {\r\n    return (kotlinPresent && clazz.getDeclaredAnnotation(kotlinMetadata) != null);\r\n}",
    "tailType": "method_code"
  }
]