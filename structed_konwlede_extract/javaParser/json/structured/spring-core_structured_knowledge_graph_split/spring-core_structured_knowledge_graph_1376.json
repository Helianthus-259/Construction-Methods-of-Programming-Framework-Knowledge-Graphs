[
  {
    "head": "org.springframework.util.ResizableByteArrayOutputStream",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ResizableByteArrayOutputStream#resize(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ResizableByteArrayOutputStream#grow(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Grow the internal buffer size.\r\n * @param additionalCapacity the number of bytes to add to the current buffer size\r\n * @see ResizableByteArrayOutputStream#size()\r\n */\r\npublic synchronized void grow(int additionalCapacity) {\r\n    Assert.isTrue(additionalCapacity >= 0, \"Additional capacity must be 0 or higher\");\r\n    if (this.count + additionalCapacity > this.buf.length) {\r\n        int newCapacity = Math.max(this.buf.length * 2, this.count + additionalCapacity);\r\n        resize(newCapacity);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ResizableByteArrayOutputStream",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ResizableByteArrayOutputStream#grow(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ResizableByteArrayOutputStream#capacity()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the current size of this stream's internal buffer.\r\n */\r\npublic synchronized int capacity() {\r\n    return this.buf.length;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ResizableByteArrayOutputStream",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ResizableByteArrayOutputStream#capacity()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ResizableByteArrayOutputStream",
    "headType": "class",
    "relation": "extend",
    "tail": "ByteArrayOutputStream",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.ResourceUtils",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.ResourceUtils",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.net.JarURLConnection;\nimport java.net.MalformedURLException;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.Locale;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * Utility methods for resolving resource locations to files in the\n * file system. Mainly for internal use within the framework.\n *\n * <p>Consider using Spring's Resource abstraction in the core package\n * for handling all kinds of file resources in a uniform manner.\n * {@link org.springframework.core.io.ResourceLoader}'s {@code getResource()}\n * method can resolve any location to a {@link org.springframework.core.io.Resource}\n * object, which in turn allows one to obtain a {@code java.io.File} in the\n * file system through its {@code getFile()} method.\n *\n * @author Juergen Hoeller\n * @since 1.1.5\n * @see org.springframework.core.io.Resource\n * @see org.springframework.core.io.ClassPathResource\n * @see org.springframework.core.io.FileSystemResource\n * @see org.springframework.core.io.UrlResource\n * @see org.springframework.core.io.ResourceLoader\n */\npublic abstract class ResourceUtils {\n\n\t/** Pseudo URL prefix for loading from the class path: \"classpath:\". */\n\tpublic static final String CLASSPATH_URL_PREFIX = \"classpath:\";\n\n\t/** URL prefix for loading from the file system: \"file:\". */\n\tpublic static final String FILE_URL_PREFIX = \"file:\";\n\n\t/** URL prefix for loading from a jar file: \"jar:\". */\n\tpublic static final String JAR_URL_PREFIX = \"jar:\";\n\n\t/** URL prefix for loading from a war file on Tomcat: \"war:\". */\n\tpublic static final String WAR_URL_PREFIX = \"war:\";\n\n\t/** URL protocol for a file in the file system: \"file\". */\n\tpublic static final String URL_PROTOCOL_FILE = \"file\";\n\n\t/** URL protocol for an entry from a jar file: \"jar\". */\n\tpublic static final String URL_PROTOCOL_JAR = \"jar\";\n\n\t/** URL protocol for an entry from a war file: \"war\". */\n\tpublic static final String URL_PROTOCOL_WAR = \"war\";\n\n\t/** URL protocol for an entry from a zip file: \"zip\". */\n\tpublic static final String URL_PROTOCOL_ZIP = \"zip\";\n\n\t/** URL protocol for an entry from a WebSphere jar file: \"wsjar\". */\n\tpublic static final String URL_PROTOCOL_WSJAR = \"wsjar\";\n\n\t/** URL protocol for an entry from a JBoss jar file: \"vfszip\". */\n\tpublic static final String URL_PROTOCOL_VFSZIP = \"vfszip\";\n\n\t/** URL protocol for a JBoss file system resource: \"vfsfile\". */\n\tpublic static final String URL_PROTOCOL_VFSFILE = \"vfsfile\";\n\n\t/** URL protocol for a general JBoss VFS resource: \"vfs\". */\n\tpublic static final String URL_PROTOCOL_VFS = \"vfs\";\n\n\t/** File extension for a regular jar file: \".jar\". */\n\tpublic static final String JAR_FILE_EXTENSION = \".jar\";\n\n\t/** Separator between JAR URL and file path within the JAR: \"!/\". */\n\tpublic static final String JAR_URL_SEPARATOR = \"!/\";\n\n\t/** Special separator between WAR URL and jar part on Tomcat. */\n\tpublic static final String WAR_URL_SEPARATOR = \"*/\";\n\n\n\t/**\n\t * Return whether the given resource location is a URL:\n\t * either a special \"classpath\" pseudo URL or a standard URL.\n\t * @param resourceLocation the location String to check\n\t * @return whether the location qualifies as a URL\n\t * @see #CLASSPATH_URL_PREFIX\n\t * @see java.net.URL\n\t * @see #toURL(String)\n\t */\n\tpublic static boolean isUrl(@Nullable String resourceLocation) {\n\t\tif (resourceLocation == null) {\n\t\t\treturn false;\n\t\t}\n\t\tif (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {\n\t\t\treturn true;\n\t\t}\n\t\ttry {\n\t\t\ttoURL(resourceLocation);\n\t\t\treturn true;\n\t\t}\n\t\tcatch (MalformedURLException ex) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Resolve the given resource location to a {@code java.net.URL}.\n\t * <p>Does not check whether the URL actually exists; simply returns\n\t * the URL that the given location would correspond to.\n\t * @param resourceLocation the resource location to resolve: either a\n\t * \"classpath:\" pseudo URL, a \"file:\" URL, or a plain file path\n\t * @return a corresponding URL object\n\t * @throws FileNotFoundException if the resource cannot be resolved to a URL\n\t * @see #toURL(String)\n\t */\n\tpublic static URL getURL(String resourceLocation) throws FileNotFoundException {\n\t\tAssert.notNull(resourceLocation, \"Resource location must not be null\");\n\t\tif (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {\n\t\t\tString path = resourceLocation.substring(CLASSPATH_URL_PREFIX.length());\n\t\t\tClassLoader cl = ClassUtils.getDefaultClassLoader();\n\t\t\tURL url = (cl != null ? cl.getResource(path) : ClassLoader.getSystemResource(path));\n\t\t\tif (url == null) {\n\t\t\t\tString description = \"class path resource [\" + path + \"]\";\n\t\t\t\tthrow new FileNotFoundException(description +\n\t\t\t\t\t\t\" cannot be resolved to URL because it does not exist\");\n\t\t\t}\n\t\t\treturn url;\n\t\t}\n\t\ttry {\n\t\t\t// try URL\n\t\t\treturn toURL(resourceLocation);\n\t\t}\n\t\tcatch (MalformedURLException ex) {\n\t\t\t// no URL -> treat as file path\n\t\t\ttry {\n\t\t\t\treturn new File(resourceLocation).toURI().toURL();\n\t\t\t}\n\t\t\tcatch (MalformedURLException ex2) {\n\t\t\t\tthrow new FileNotFoundException(\"Resource location [\" + resourceLocation +\n\t\t\t\t\t\t\"] is neither a URL not a well-formed file path\");\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Resolve the given resource location to a {@code java.io.File},\n\t * i.e. to a file in the file system.\n\t * <p>Does not check whether the file actually exists; simply returns\n\t * the File that the given location would correspond to.\n\t * @param resourceLocation the resource location to resolve: either a\n\t * \"classpath:\" pseudo URL, a \"file:\" URL, or a plain file path\n\t * @return a corresponding File object\n\t * @throws FileNotFoundException if the resource cannot be resolved to\n\t * a file in the file system\n\t * @see #getFile(URL)\n\t */\n\tpublic static File getFile(String resourceLocation) throws FileNotFoundException {\n\t\tAssert.notNull(resourceLocation, \"Resource location must not be null\");\n\t\tif (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {\n\t\t\tString path = resourceLocation.substring(CLASSPATH_URL_PREFIX.length());\n\t\t\tString description = \"class path resource [\" + path + \"]\";\n\t\t\tClassLoader cl = ClassUtils.getDefaultClassLoader();\n\t\t\tURL url = (cl != null ? cl.getResource(path) : ClassLoader.getSystemResource(path));\n\t\t\tif (url == null) {\n\t\t\t\tthrow new FileNotFoundException(description +\n\t\t\t\t\t\t\" cannot be resolved to absolute file path because it does not exist\");\n\t\t\t}\n\t\t\treturn getFile(url, description);\n\t\t}\n\t\ttry {\n\t\t\t// try URL\n\t\t\treturn getFile(toURL(resourceLocation));\n\t\t}\n\t\tcatch (MalformedURLException ex) {\n\t\t\t// no URL -> treat as file path\n\t\t\treturn new File(resourceLocation);\n\t\t}\n\t}\n\n\t/**\n\t * Resolve the given resource URL to a {@code java.io.File},\n\t * i.e. to a file in the file system.\n\t * @param resourceUrl the resource URL to resolve\n\t * @return a corresponding File object\n\t * @throws FileNotFoundException if the URL cannot be resolved to\n\t * a file in the file system\n\t * @see #getFile(URL, String)\n\t */\n\tpublic static File getFile(URL resourceUrl) throws FileNotFoundException {\n\t\treturn getFile(resourceUrl, \"URL\");\n\t}\n\n\t/**\n\t * Resolve the given resource URL to a {@code java.io.File},\n\t * i.e. to a file in the file system.\n\t * @param resourceUrl the resource URL to resolve\n\t * @param description a description of the original resource that\n\t * the URL was created for (for example, a class path location)\n\t * @return a corresponding File object\n\t * @throws FileNotFoundException if the URL cannot be resolved to\n\t * a file in the file system\n\t */\n\tpublic static File getFile(URL resourceUrl, String description) throws FileNotFoundException {\n\t\tAssert.notNull(resourceUrl, \"Resource URL must not be null\");\n\t\tif (!URL_PROTOCOL_FILE.equals(resourceUrl.getProtocol())) {\n\t\t\tthrow new FileNotFoundException(\n\t\t\t\t\tdescription + \" cannot be resolved to absolute file path \" +\n\t\t\t\t\t\"because it does not reside in the file system: \" + resourceUrl);\n\t\t}\n\t\ttry {\n\t\t\t// URI decoding for special characters such as spaces.\n\t\t\treturn new File(toURI(resourceUrl).getSchemeSpecificPart());\n\t\t}\n\t\tcatch (URISyntaxException ex) {\n\t\t\t// Fallback for URLs that are not valid URIs (should hardly ever happen).\n\t\t\treturn new File(resourceUrl.getFile());\n\t\t}\n\t}\n\n\t/**\n\t * Resolve the given resource URI to a {@code java.io.File},\n\t * i.e. to a file in the file system.\n\t * @param resourceUri the resource URI to resolve\n\t * @return a corresponding File object\n\t * @throws FileNotFoundException if the URL cannot be resolved to\n\t * a file in the file system\n\t * @since 2.5\n\t * @see #getFile(URI, String)\n\t */\n\tpublic static File getFile(URI resourceUri) throws FileNotFoundException {\n\t\treturn getFile(resourceUri, \"URI\");\n\t}\n\n\t/**\n\t * Resolve the given resource URI to a {@code java.io.File},\n\t * i.e. to a file in the file system.\n\t * @param resourceUri the resource URI to resolve\n\t * @param description a description of the original resource that\n\t * the URI was created for (for example, a class path location)\n\t * @return a corresponding File object\n\t * @throws FileNotFoundException if the URL cannot be resolved to\n\t * a file in the file system\n\t * @since 2.5\n\t */\n\tpublic static File getFile(URI resourceUri, String description) throws FileNotFoundException {\n\t\tAssert.notNull(resourceUri, \"Resource URI must not be null\");\n\t\tif (!URL_PROTOCOL_FILE.equals(resourceUri.getScheme())) {\n\t\t\tthrow new FileNotFoundException(\n\t\t\t\t\tdescription + \" cannot be resolved to absolute file path \" +\n\t\t\t\t\t\"because it does not reside in the file system: \" + resourceUri);\n\t\t}\n\t\treturn new File(resourceUri.getSchemeSpecificPart());\n\t}\n\n\t/**\n\t * Determine whether the given URL points to a resource in the file system,\n\t * i.e. has protocol \"file\", \"vfsfile\" or \"vfs\".\n\t * @param url the URL to check\n\t * @return whether the URL has been identified as a file system URL\n\t * @see #isJarURL(URL)\n\t */\n\tpublic static boolean isFileURL(URL url) {\n\t\tString protocol = url.getProtocol();\n\t\treturn (URL_PROTOCOL_FILE.equals(protocol) || URL_PROTOCOL_VFSFILE.equals(protocol) ||\n\t\t\t\tURL_PROTOCOL_VFS.equals(protocol));\n\t}\n\n\t/**\n\t * Determine whether the given URL points to a resource in a jar file\n\t * &mdash; for example, whether the URL has protocol \"jar\", \"war, \"zip\",\n\t * \"vfszip\", or \"wsjar\".\n\t * @param url the URL to check\n\t * @return whether the URL has been identified as a JAR URL\n\t * @see #isJarFileURL(URL)\n\t */\n\tpublic static boolean isJarURL(URL url) {\n\t\tString protocol = url.getProtocol();\n\t\treturn (URL_PROTOCOL_JAR.equals(protocol) || URL_PROTOCOL_WAR.equals(protocol) ||\n\t\t\t\tURL_PROTOCOL_ZIP.equals(protocol) || URL_PROTOCOL_VFSZIP.equals(protocol) ||\n\t\t\t\tURL_PROTOCOL_WSJAR.equals(protocol));\n\t}\n\n\t/**\n\t * Determine whether the given URL points to a jar file itself,\n\t * that is, has protocol \"file\" and ends with the \".jar\" extension.\n\t * @param url the URL to check\n\t * @return whether the URL has been identified as a JAR file URL\n\t * @since 4.1\n\t * @see #extractJarFileURL(URL)\n\t */\n\tpublic static boolean isJarFileURL(URL url) {\n\t\treturn (URL_PROTOCOL_FILE.equals(url.getProtocol()) &&\n\t\t\t\turl.getPath().toLowerCase(Locale.ROOT).endsWith(JAR_FILE_EXTENSION));\n\t}\n\n\t/**\n\t * Extract the URL for the actual jar file from the given URL\n\t * (which may point to a resource in a jar file or to a jar file itself).\n\t * @param jarUrl the original URL\n\t * @return the URL for the actual jar file\n\t * @throws MalformedURLException if no valid jar file URL could be extracted\n\t * @see #extractArchiveURL(URL)\n\t */\n\tpublic static URL extractJarFileURL(URL jarUrl) throws MalformedURLException {\n\t\tString urlFile = jarUrl.getFile();\n\t\tint separatorIndex = urlFile.indexOf(JAR_URL_SEPARATOR);\n\t\tif (separatorIndex != -1) {\n\t\t\tString jarFile = urlFile.substring(0, separatorIndex);\n\t\t\ttry {\n\t\t\t\treturn toURL(jarFile);\n\t\t\t}\n\t\t\tcatch (MalformedURLException ex) {\n\t\t\t\t// Probably no protocol in original jar URL, like \"jar:C:/mypath/myjar.jar\".\n\t\t\t\t// This usually indicates that the jar file resides in the file system.\n\t\t\t\tif (!jarFile.startsWith(\"/\")) {\n\t\t\t\t\tjarFile = \"/\" + jarFile;\n\t\t\t\t}\n\t\t\t\treturn toURL(FILE_URL_PREFIX + jarFile);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\treturn jarUrl;\n\t\t}\n\t}\n\n\t/**\n\t * Extract the URL for the outermost archive from the given jar/war URL\n\t * (which may point to a resource in a jar file or to a jar file itself).\n\t * <p>In the case of a jar file nested within a war file, this will return\n\t * a URL to the war file since that is the one resolvable in the file system.\n\t * @param jarUrl the original URL\n\t * @return the URL for the actual jar file\n\t * @throws MalformedURLException if no valid jar file URL could be extracted\n\t * @since 4.1.8\n\t * @see #extractJarFileURL(URL)\n\t */\n\tpublic static URL extractArchiveURL(URL jarUrl) throws MalformedURLException {\n\t\tString urlFile = jarUrl.getFile();\n\n\t\tint endIndex = urlFile.indexOf(WAR_URL_SEPARATOR);\n\t\tif (endIndex != -1) {\n\t\t\t// Tomcat's \"war:file:...mywar.war*/WEB-INF/lib/myjar.jar!/myentry.txt\"\n\t\t\tString warFile = urlFile.substring(0, endIndex);\n\t\t\tif (URL_PROTOCOL_WAR.equals(jarUrl.getProtocol())) {\n\t\t\t\treturn toURL(warFile);\n\t\t\t}\n\t\t\tint startIndex = warFile.indexOf(WAR_URL_PREFIX);\n\t\t\tif (startIndex != -1) {\n\t\t\t\treturn toURL(warFile.substring(startIndex + WAR_URL_PREFIX.length()));\n\t\t\t}\n\t\t}\n\n\t\t// Regular \"jar:file:...myjar.jar!/myentry.txt\"\n\t\treturn extractJarFileURL(jarUrl);\n\t}\n\n\t/**\n\t * Create a URI instance for the given URL,\n\t * replacing spaces with \"%20\" URI encoding first.\n\t * @param url the URL to convert into a URI instance\n\t * @return the URI instance\n\t * @throws URISyntaxException if the URL wasn't a valid URI\n\t * @see java.net.URL#toURI()\n\t * @see #toURI(String)\n\t */\n\tpublic static URI toURI(URL url) throws URISyntaxException {\n\t\treturn toURI(url.toString());\n\t}\n\n\t/**\n\t * Create a URI instance for the given location String,\n\t * replacing spaces with \"%20\" URI encoding first.\n\t * @param location the location String to convert into a URI instance\n\t * @return the URI instance\n\t * @throws URISyntaxException if the location wasn't a valid URI\n\t * @see #toURI(URL)\n\t */\n\tpublic static URI toURI(String location) throws URISyntaxException {\n\t\treturn new URI(StringUtils.replace(location, \" \", \"%20\"));\n\t}\n\n\t/**\n\t * Create a clean URL instance for the given location String,\n\t * going through URI construction and then URL conversion.\n\t * @param location the location String to convert into a URL instance\n\t * @return the URL instance\n\t * @throws MalformedURLException if the location wasn't a valid URL\n\t * @since 6.0\n\t * @see java.net.URI#toURL()\n\t * @see #toURI(String)\n\t */\n\t@SuppressWarnings(\"deprecation\")  // on JDK 20 (deprecated URL constructor)\n\tpublic static URL toURL(String location) throws MalformedURLException {\n\t\ttry {\n\t\t\t// Prefer URI construction with toURL conversion (as of 6.1)\n\t\t\treturn toURI(StringUtils.cleanPath(location)).toURL();\n\t\t}\n\t\tcatch (URISyntaxException | IllegalArgumentException ex) {\n\t\t\t// Lenient fallback to deprecated URL constructor,\n\t\t\t// e.g. for decoded location Strings with percent characters.\n\t\t\treturn new URL(location);\n\t\t}\n\t}\n\n\t/**\n\t * Create a clean URL instance for the given root URL and relative path,\n\t * going through URI construction and then URL conversion.\n\t * @param root the root URL to start from\n\t * @param relativePath the relative path to apply\n\t * @return the relative URL instance\n\t * @throws MalformedURLException if the end result is not a valid URL\n\t * @since 6.0\n\t * @see #toURL(String)\n\t * @see StringUtils#applyRelativePath\n\t */\n\t@SuppressWarnings(\"deprecation\")  // on JDK 20 (deprecated URL constructor)\n\tpublic static URL toRelativeURL(URL root, String relativePath) throws MalformedURLException {\n\t\t// # can appear in filenames, java.net.URL should not treat it as a fragment\n\t\trelativePath = StringUtils.replace(relativePath, \"#\", \"%23\");\n\n\t\t// Retain original URL instance, potentially including custom URLStreamHandler.\n\t\treturn new URL(root, StringUtils.cleanPath(StringUtils.applyRelativePath(root.toString(), relativePath)));\n\t}\n\n\t/**\n\t * Set the {@link URLConnection#setUseCaches \"useCaches\"} flag on the\n\t * given connection, preferring {@code false} but leaving the flag at\n\t * its JVM default value for jar resources (typically {@code true}).\n\t * @param con the URLConnection to set the flag on\n\t * @see URLConnection#setUseCaches\n\t */\n\tpublic static void useCachesIfNecessary(URLConnection con) {\n\t\tif (!(con instanceof JarURLConnection)) {\n\t\t\tcon.setUseCaches(false);\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.ResourceUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.ResourceUtils#CLASSPATH_URL_PREFIX",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.ResourceUtils#CLASSPATH_URL_PREFIX",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.ResourceUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.ResourceUtils#FILE_URL_PREFIX",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.ResourceUtils#FILE_URL_PREFIX",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.ResourceUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.ResourceUtils#JAR_URL_PREFIX",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.ResourceUtils#JAR_URL_PREFIX",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.ResourceUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.ResourceUtils#WAR_URL_PREFIX",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.ResourceUtils#WAR_URL_PREFIX",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.ResourceUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.ResourceUtils#URL_PROTOCOL_FILE",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.ResourceUtils#URL_PROTOCOL_FILE",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.ResourceUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.ResourceUtils#URL_PROTOCOL_JAR",
    "tailType": "field"
  }
]