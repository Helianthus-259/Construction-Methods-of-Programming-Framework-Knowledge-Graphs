[
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#collectMultiValueMapFavorsInheritedComposedAnnotationsOverMoreLocallyDeclaredComposedAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#collectMultiValueMapFromClassWithLocalAnnotationThatShadowsAnnotationFromSuperclass()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * If the \"value\" entry contains both \"DerivedTxConfig\" AND \"TxConfig\", then\r\n * the algorithm is accidentally picking up shadowed annotations of the same\r\n * type within the class hierarchy. Such undesirable behavior would cause\r\n * the logic in\r\n * {@code org.springframework.context.annotation.ProfileCondition} to fail.\r\n */\r\n@Test\r\nvoid collectMultiValueMapFromClassWithLocalAnnotationThatShadowsAnnotationFromSuperclass() {\r\n    MultiValueMap<String, Object> map = MergedAnnotations.from(DerivedTxConfig.class, SearchStrategy.INHERITED_ANNOTATIONS).stream(Transactional.class).collect(MergedAnnotationCollectors.toMultiValueMap());\r\n    assertThat(map).contains(entry(\"value\", List.of(\"DerivedTxConfig\")));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#collectMultiValueMapFromClassWithLocalAnnotationThatShadowsAnnotationFromSuperclass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#collectMultiValueMapFromClassWithLocalAnnotationThatShadowsAnnotationFromSuperclass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#collectMultiValueMapFromClassWithMultipleComposedAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Note: this functionality is required by\r\n * {@code org.springframework.context.annotation.ProfileCondition}.\r\n */\r\n@Test\r\nvoid collectMultiValueMapFromClassWithMultipleComposedAnnotations() {\r\n    MultiValueMap<String, Object> map = MergedAnnotations.from(TxFromMultipleComposedAnnotations.class, SearchStrategy.INHERITED_ANNOTATIONS).stream(Transactional.class).collect(MergedAnnotationCollectors.toMultiValueMap());\r\n    assertThat(map).contains(entry(\"value\", List.of(\"TxInheritedComposed\", \"TxComposed\")));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#collectMultiValueMapFromClassWithMultipleComposedAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#collectMultiValueMapFromClassWithMultipleComposedAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithInheritedAnnotationsFromClassWithLocalAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getWithInheritedAnnotationsFromClassWithLocalAnnotation() {\r\n    MergedAnnotation<?> annotation = MergedAnnotations.from(TxConfig.class, SearchStrategy.INHERITED_ANNOTATIONS).get(Transactional.class);\r\n    assertThat(annotation.getString(\"value\")).isEqualTo(\"TxConfig\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getWithInheritedAnnotationsFromClassWithLocalAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithInheritedAnnotationsFromClassWithLocalAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithInheritedAnnotationsFromClassWithLocalAnnotationThatShadowsAnnotationFromSuperclass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getWithInheritedAnnotationsFromClassWithLocalAnnotationThatShadowsAnnotationFromSuperclass() {\r\n    MergedAnnotation<?> annotation = MergedAnnotations.from(DerivedTxConfig.class, SearchStrategy.INHERITED_ANNOTATIONS).get(Transactional.class);\r\n    assertThat(annotation.getString(\"value\")).isEqualTo(\"DerivedTxConfig\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getWithInheritedAnnotationsFromClassWithLocalAnnotationThatShadowsAnnotationFromSuperclass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithInheritedAnnotationsFromClassWithLocalAnnotationThatShadowsAnnotationFromSuperclass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithInheritedAnnotationsFromMetaCycleAnnotatedClassWithMissingTargetMetaAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getWithInheritedAnnotationsFromMetaCycleAnnotatedClassWithMissingTargetMetaAnnotation() {\r\n    MergedAnnotation<?> annotation = MergedAnnotations.from(MetaCycleAnnotatedClass.class, SearchStrategy.INHERITED_ANNOTATIONS).get(Transactional.class);\r\n    assertThat(annotation.isPresent()).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getWithInheritedAnnotationsFromMetaCycleAnnotatedClassWithMissingTargetMetaAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithInheritedAnnotationsFromMetaCycleAnnotatedClassWithMissingTargetMetaAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithInheritedAnnotationsFavorsLocalComposedAnnotationOverInheritedAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getWithInheritedAnnotationsFavorsLocalComposedAnnotationOverInheritedAnnotation() {\r\n    MergedAnnotation<?> annotation = MergedAnnotations.from(SubClassWithInheritedAnnotation.class, SearchStrategy.INHERITED_ANNOTATIONS).get(Transactional.class);\r\n    assertThat(annotation.getBoolean(\"readOnly\")).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getWithInheritedAnnotationsFavorsLocalComposedAnnotationOverInheritedAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithInheritedAnnotationsFavorsLocalComposedAnnotationOverInheritedAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithInheritedAnnotationsFavorsInheritedAnnotationsOverMoreLocallyDeclaredComposedAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getWithInheritedAnnotationsFavorsInheritedAnnotationsOverMoreLocallyDeclaredComposedAnnotations() {\r\n    MergedAnnotation<?> annotation = MergedAnnotations.from(SubSubClassWithInheritedAnnotation.class, SearchStrategy.INHERITED_ANNOTATIONS).get(Transactional.class);\r\n    assertThat(annotation.getBoolean(\"readOnly\")).isFalse();\r\n}",
    "tailType": "method_code"
  }
]