[
  {
    "head": "org.springframework.util.StringUtilsTests#parseLocaleWithMultiSpecialCharactersInVariant()",
    "headType": "method",
    "relation": "provide",
    "tail": "// SPR-8637\r\n@Test\r\nvoid parseLocaleWithMultiSpecialCharactersInVariant() {\r\n    String variant = \"proper-northern\";\r\n    String localeString = \"en_GB_\" + variant;\r\n    Locale locale = StringUtils.parseLocaleString(localeString);\r\n    assertThat(locale.getVariant()).as(\"Multi-valued variant portion of the Locale not extracted correctly.\").isEqualTo(variant);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#parseLocaleWithMultiSpecialCharactersInVariant()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#parseLocaleWithMultiSpecialCharactersInVariant()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#parseLocaleWithMultiValuedVariant()",
    "headType": "method",
    "relation": "provide",
    "tail": "// SPR-3671\r\n@Test\r\nvoid parseLocaleWithMultiValuedVariant() {\r\n    String variant = \"proper_northern\";\r\n    String localeString = \"en_GB_\" + variant;\r\n    Locale locale = StringUtils.parseLocaleString(localeString);\r\n    assertThat(locale.getVariant()).as(\"Multi-valued variant portion of the Locale not extracted correctly.\").isEqualTo(variant);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#parseLocaleWithMultiValuedVariant()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#parseLocaleWithMultiValuedVariant()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#parseLocaleWithMultiValuedVariantUsingSpacesAsSeparators()",
    "headType": "method",
    "relation": "provide",
    "tail": "// SPR-3671\r\n@Test\r\nvoid parseLocaleWithMultiValuedVariantUsingSpacesAsSeparators() {\r\n    String variant = \"proper northern\";\r\n    String localeString = \"en GB \" + variant;\r\n    Locale locale = StringUtils.parseLocaleString(localeString);\r\n    assertThat(locale.getVariant()).as(\"Multi-valued variant portion of the Locale not extracted correctly.\").isEqualTo(variant);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#parseLocaleWithMultiValuedVariantUsingSpacesAsSeparators()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#parseLocaleWithMultiValuedVariantUsingSpacesAsSeparators()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#parseLocaleWithMultiValuedVariantUsingMixtureOfUnderscoresAndSpacesAsSeparators()",
    "headType": "method",
    "relation": "provide",
    "tail": "// SPR-3671\r\n@Test\r\nvoid parseLocaleWithMultiValuedVariantUsingMixtureOfUnderscoresAndSpacesAsSeparators() {\r\n    String variant = \"proper northern\";\r\n    String localeString = \"en_GB_\" + variant;\r\n    Locale locale = StringUtils.parseLocaleString(localeString);\r\n    assertThat(locale.getVariant()).as(\"Multi-valued variant portion of the Locale not extracted correctly.\").isEqualTo(variant);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#parseLocaleWithMultiValuedVariantUsingMixtureOfUnderscoresAndSpacesAsSeparators()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#parseLocaleWithMultiValuedVariantUsingMixtureOfUnderscoresAndSpacesAsSeparators()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#parseLocaleWithInvalidCharacters()",
    "headType": "method",
    "relation": "provide",
    "tail": "// SPR-7779\r\n@Test\r\nvoid parseLocaleWithInvalidCharacters() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> StringUtils.parseLocaleString(\"%0D%0AContent-length:30%0D%0A%0D%0A%3Cscript%3Ealert%28123%29%3C/script%3E\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#parseLocaleWithInvalidCharacters()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#parseLocaleWithInvalidCharacters()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#parseLocaleWithSameLowercaseTokenForLanguageAndCountry()",
    "headType": "method",
    "relation": "provide",
    "tail": "// SPR-9420\r\n@Test\r\nvoid parseLocaleWithSameLowercaseTokenForLanguageAndCountry() {\r\n    assertThat(StringUtils.parseLocaleString(\"tr_tr\").toString()).isEqualTo(\"tr_TR\");\r\n    assertThat(StringUtils.parseLocaleString(\"bg_bg_vnt\").toString()).isEqualTo(\"bg_BG_vnt\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#parseLocaleWithSameLowercaseTokenForLanguageAndCountry()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#parseLocaleWithSameLowercaseTokenForLanguageAndCountry()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#parseLocaleWithVariantContainingCountryCode()",
    "headType": "method",
    "relation": "provide",
    "tail": "// SPR-11806\r\n@Test\r\nvoid parseLocaleWithVariantContainingCountryCode() {\r\n    String variant = \"GBtest\";\r\n    String localeString = \"en_GB_\" + variant;\r\n    Locale locale = StringUtils.parseLocaleString(localeString);\r\n    assertThat(locale.getVariant()).as(\"Variant containing country code not extracted correctly\").isEqualTo(variant);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#parseLocaleWithVariantContainingCountryCode()",
    "tailType": "method"
  }
]