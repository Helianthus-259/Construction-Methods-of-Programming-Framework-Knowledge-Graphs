[
  {
    "head": "org.springframework.core.ConstantsTests#withClassThatExposesNoConstants()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ConstantsTests#ctorWithNullClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid ctorWithNullClass() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> new Constants(null));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ConstantsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ConstantsTests#ctorWithNullClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ConstantsTests#ctorWithNullClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.NoConstants",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.NoConstants",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core;\n\nimport java.util.Locale;\nimport java.util.Set;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatExceptionOfType;\nimport static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n\n/**\n * @author Rod Johnson\n * @author Juergen Hoeller\n * @author Rick Evans\n * @since 28.04.2003\n */\n@SuppressWarnings(\"deprecation\")\nclass ConstantsTests {\n\n\t@Test\n\tvoid constants() {\n\t\tConstants c = new Constants(A.class);\n\t\tassertThat(c.getClassName()).isEqualTo(A.class.getName());\n\t\tassertThat(c.getSize()).isEqualTo(9);\n\n\t\tassertThat(c.asNumber(\"DOG\").intValue()).isEqualTo(A.DOG);\n\t\tassertThat(c.asNumber(\"dog\").intValue()).isEqualTo(A.DOG);\n\t\tassertThat(c.asNumber(\"cat\").intValue()).isEqualTo(A.CAT);\n\n\t\tassertThatExceptionOfType(Constants.ConstantException.class).isThrownBy(() ->\n\t\t\t\tc.asNumber(\"bogus\"));\n\n\t\tassertThat(c.asString(\"S1\")).isEqualTo(A.S1);\n\t\tassertThatExceptionOfType(Constants.ConstantException.class).as(\"wrong type\").isThrownBy(() ->\n\t\t\t\tc.asNumber(\"S1\"));\n\t}\n\n\t@Test\n\tvoid getNames() {\n\t\tConstants c = new Constants(A.class);\n\n\t\tSet<String> names = c.getNames(\"\");\n\t\tassertThat(names).hasSize(c.getSize());\n\t\tassertThat(names).contains(\"DOG\");\n\t\tassertThat(names).contains(\"CAT\");\n\t\tassertThat(names).contains(\"S1\");\n\n\t\tnames = c.getNames(\"D\");\n\t\tassertThat(names).hasSize(1);\n\t\tassertThat(names).contains(\"DOG\");\n\n\t\tnames = c.getNames(\"d\");\n\t\tassertThat(names).hasSize(1);\n\t\tassertThat(names).contains(\"DOG\");\n\t}\n\n\t@Test\n\tvoid getValues() {\n\t\tConstants c = new Constants(A.class);\n\n\t\tSet<Object> values = c.getValues(\"\");\n\t\tassertThat(values).hasSize(7);\n\t\tassertThat(values).contains(0);\n\t\tassertThat(values).contains(66);\n\t\tassertThat(values).contains(\"\");\n\n\t\tvalues = c.getValues(\"D\");\n\t\tassertThat(values).hasSize(1);\n\t\tassertThat(values).contains(0);\n\n\t\tvalues = c.getValues(\"prefix\");\n\t\tassertThat(values).hasSize(2);\n\t\tassertThat(values).contains(1);\n\t\tassertThat(values).contains(2);\n\n\t\tvalues = c.getValuesForProperty(\"myProperty\");\n\t\tassertThat(values).hasSize(2);\n\t\tassertThat(values).contains(1);\n\t\tassertThat(values).contains(2);\n\t}\n\n\t@Test\n\tvoid getValuesInTurkey() {\n\t\tLocale oldLocale = Locale.getDefault();\n\t\tLocale.setDefault(new Locale(\"tr\", \"\"));\n\t\ttry {\n\t\t\tConstants c = new Constants(A.class);\n\n\t\t\tSet<Object> values = c.getValues(\"\");\n\t\t\tassertThat(values).hasSize(7);\n\t\t\tassertThat(values).contains(0);\n\t\t\tassertThat(values).contains(66);\n\t\t\tassertThat(values).contains(\"\");\n\n\t\t\tvalues = c.getValues(\"D\");\n\t\t\tassertThat(values).hasSize(1);\n\t\t\tassertThat(values).contains(0);\n\n\t\t\tvalues = c.getValues(\"prefix\");\n\t\t\tassertThat(values).hasSize(2);\n\t\t\tassertThat(values).contains(1);\n\t\t\tassertThat(values).contains(2);\n\n\t\t\tvalues = c.getValuesForProperty(\"myProperty\");\n\t\t\tassertThat(values).hasSize(2);\n\t\t\tassertThat(values).contains(1);\n\t\t\tassertThat(values).contains(2);\n\t\t}\n\t\tfinally {\n\t\t\tLocale.setDefault(oldLocale);\n\t\t}\n\t}\n\n\t@Test\n\tvoid suffixAccess() {\n\t\tConstants c = new Constants(A.class);\n\n\t\tSet<String> names = c.getNamesForSuffix(\"_PROPERTY\");\n\t\tassertThat(names).hasSize(2);\n\t\tassertThat(names).contains(\"NO_PROPERTY\");\n\t\tassertThat(names).contains(\"YES_PROPERTY\");\n\n\t\tSet<Object> values = c.getValuesForSuffix(\"_PROPERTY\");\n\t\tassertThat(values).hasSize(2);\n\t\tassertThat(values).contains(3);\n\t\tassertThat(values).contains(4);\n\t}\n\n\t@Test\n\tvoid toCode() {\n\t\tConstants c = new Constants(A.class);\n\n\t\tassertThat(c.toCode(0, \"\")).isEqualTo(\"DOG\");\n\t\tassertThat(c.toCode(0, \"D\")).isEqualTo(\"DOG\");\n\t\tassertThat(c.toCode(0, \"DO\")).isEqualTo(\"DOG\");\n\t\tassertThat(c.toCode(0, \"DoG\")).isEqualTo(\"DOG\");\n\t\tassertThat(c.toCode(0, null)).isEqualTo(\"DOG\");\n\t\tassertThat(c.toCode(66, \"\")).isEqualTo(\"CAT\");\n\t\tassertThat(c.toCode(66, \"C\")).isEqualTo(\"CAT\");\n\t\tassertThat(c.toCode(66, \"ca\")).isEqualTo(\"CAT\");\n\t\tassertThat(c.toCode(66, \"cAt\")).isEqualTo(\"CAT\");\n\t\tassertThat(c.toCode(66, null)).isEqualTo(\"CAT\");\n\t\tassertThat(c.toCode(\"\", \"\")).isEqualTo(\"S1\");\n\t\tassertThat(c.toCode(\"\", \"s\")).isEqualTo(\"S1\");\n\t\tassertThat(c.toCode(\"\", \"s1\")).isEqualTo(\"S1\");\n\t\tassertThat(c.toCode(\"\", null)).isEqualTo(\"S1\");\n\t\tassertThatExceptionOfType(Constants.ConstantException.class).isThrownBy(() ->\n\t\t\t\tc.toCode(\"bogus\", \"bogus\"));\n\t\tassertThatExceptionOfType(Constants.ConstantException.class).isThrownBy(() ->\n\t\t\t\tc.toCode(\"bogus\", null));\n\n\t\tassertThat(c.toCodeForProperty(1, \"myProperty\")).isEqualTo(\"MY_PROPERTY_NO\");\n\t\tassertThat(c.toCodeForProperty(2, \"myProperty\")).isEqualTo(\"MY_PROPERTY_YES\");\n\t\tassertThatExceptionOfType(Constants.ConstantException.class).isThrownBy(() ->\n\t\t\t\tc.toCodeForProperty(\"bogus\", \"bogus\"));\n\n\t\tassertThat(c.toCodeForSuffix(0, \"\")).isEqualTo(\"DOG\");\n\t\tassertThat(c.toCodeForSuffix(0, \"G\")).isEqualTo(\"DOG\");\n\t\tassertThat(c.toCodeForSuffix(0, \"OG\")).isEqualTo(\"DOG\");\n\t\tassertThat(c.toCodeForSuffix(0, \"DoG\")).isEqualTo(\"DOG\");\n\t\tassertThat(c.toCodeForSuffix(0, null)).isEqualTo(\"DOG\");\n\t\tassertThat(c.toCodeForSuffix(66, \"\")).isEqualTo(\"CAT\");\n\t\tassertThat(c.toCodeForSuffix(66, \"T\")).isEqualTo(\"CAT\");\n\t\tassertThat(c.toCodeForSuffix(66, \"at\")).isEqualTo(\"CAT\");\n\t\tassertThat(c.toCodeForSuffix(66, \"cAt\")).isEqualTo(\"CAT\");\n\t\tassertThat(c.toCodeForSuffix(66, null)).isEqualTo(\"CAT\");\n\t\tassertThat(c.toCodeForSuffix(\"\", \"\")).isEqualTo(\"S1\");\n\t\tassertThat(c.toCodeForSuffix(\"\", \"1\")).isEqualTo(\"S1\");\n\t\tassertThat(c.toCodeForSuffix(\"\", \"s1\")).isEqualTo(\"S1\");\n\t\tassertThat(c.toCodeForSuffix(\"\", null)).isEqualTo(\"S1\");\n\t\tassertThatExceptionOfType(Constants.ConstantException.class).isThrownBy(() ->\n\t\t\t\tc.toCodeForSuffix(\"bogus\", \"bogus\"));\n\t\tassertThatExceptionOfType(Constants.ConstantException.class).isThrownBy(() ->\n\t\t\t\tc.toCodeForSuffix(\"bogus\", null));\n\t}\n\n\t@Test\n\tvoid getValuesWithNullPrefix() {\n\t\tConstants c = new Constants(A.class);\n\t\tSet<?> values = c.getValues(null);\n\t\tassertThat(values).as(\"Must have returned *all* public static final values\").hasSize(7);\n\t}\n\n\t@Test\n\tvoid getValuesWithEmptyStringPrefix() {\n\t\tConstants c = new Constants(A.class);\n\t\tSet<Object> values = c.getValues(\"\");\n\t\tassertThat(values).as(\"Must have returned *all* public static final values\").hasSize(7);\n\t}\n\n\t@Test\n\tvoid getValuesWithWhitespacedStringPrefix() {\n\t\tConstants c = new Constants(A.class);\n\t\tSet<?> values = c.getValues(\" \");\n\t\tassertThat(values).as(\"Must have returned *all* public static final values\").hasSize(7);\n\t}\n\n\t@Test\n\tvoid withClassThatExposesNoConstants() {\n\t\tConstants c = new Constants(NoConstants.class);\n\t\tassertThat(c.getSize()).isEqualTo(0);\n\t\tfinal Set<?> values = c.getValues(\"\");\n\t\tassertThat(values).isNotNull();\n\t\tassertThat(values).isEmpty();\n\t}\n\n\t@Test\n\tvoid ctorWithNullClass() {\n\t\tassertThatIllegalArgumentException().isThrownBy(() ->\n\t\t\t\tnew Constants(null));\n\t}\n\n\n\tprivate static final class NoConstants {\n\t}\n\n\n\t@SuppressWarnings(\"unused\")\n\tprivate static final class A {\n\n\t\tpublic static final int DOG = 0;\n\t\tpublic static final int CAT = 66;\n\t\tpublic static final String S1 = \"\";\n\n\t\tpublic static final int PREFIX_NO = 1;\n\t\tpublic static final int PREFIX_YES = 2;\n\n\t\tpublic static final int MY_PROPERTY_NO = 1;\n\t\tpublic static final int MY_PROPERTY_YES = 2;\n\n\t\tpublic static final int NO_PROPERTY = 3;\n\t\tpublic static final int YES_PROPERTY = 4;\n\n\t\t/** ignore these */\n\t\tprotected static final int P = -1;\n\t\tprotected boolean f;\n\t\tstatic final Object o = new Object();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.A",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.A",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.A",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core;\n\nimport java.util.Locale;\nimport java.util.Set;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatExceptionOfType;\nimport static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n\n/**\n * @author Rod Johnson\n * @author Juergen Hoeller\n * @author Rick Evans\n * @since 28.04.2003\n */\n@SuppressWarnings(\"deprecation\")\nclass ConstantsTests {\n\n\t@Test\n\tvoid constants() {\n\t\tConstants c = new Constants(A.class);\n\t\tassertThat(c.getClassName()).isEqualTo(A.class.getName());\n\t\tassertThat(c.getSize()).isEqualTo(9);\n\n\t\tassertThat(c.asNumber(\"DOG\").intValue()).isEqualTo(A.DOG);\n\t\tassertThat(c.asNumber(\"dog\").intValue()).isEqualTo(A.DOG);\n\t\tassertThat(c.asNumber(\"cat\").intValue()).isEqualTo(A.CAT);\n\n\t\tassertThatExceptionOfType(Constants.ConstantException.class).isThrownBy(() ->\n\t\t\t\tc.asNumber(\"bogus\"));\n\n\t\tassertThat(c.asString(\"S1\")).isEqualTo(A.S1);\n\t\tassertThatExceptionOfType(Constants.ConstantException.class).as(\"wrong type\").isThrownBy(() ->\n\t\t\t\tc.asNumber(\"S1\"));\n\t}\n\n\t@Test\n\tvoid getNames() {\n\t\tConstants c = new Constants(A.class);\n\n\t\tSet<String> names = c.getNames(\"\");\n\t\tassertThat(names).hasSize(c.getSize());\n\t\tassertThat(names).contains(\"DOG\");\n\t\tassertThat(names).contains(\"CAT\");\n\t\tassertThat(names).contains(\"S1\");\n\n\t\tnames = c.getNames(\"D\");\n\t\tassertThat(names).hasSize(1);\n\t\tassertThat(names).contains(\"DOG\");\n\n\t\tnames = c.getNames(\"d\");\n\t\tassertThat(names).hasSize(1);\n\t\tassertThat(names).contains(\"DOG\");\n\t}\n\n\t@Test\n\tvoid getValues() {\n\t\tConstants c = new Constants(A.class);\n\n\t\tSet<Object> values = c.getValues(\"\");\n\t\tassertThat(values).hasSize(7);\n\t\tassertThat(values).contains(0);\n\t\tassertThat(values).contains(66);\n\t\tassertThat(values).contains(\"\");\n\n\t\tvalues = c.getValues(\"D\");\n\t\tassertThat(values).hasSize(1);\n\t\tassertThat(values).contains(0);\n\n\t\tvalues = c.getValues(\"prefix\");\n\t\tassertThat(values).hasSize(2);\n\t\tassertThat(values).contains(1);\n\t\tassertThat(values).contains(2);\n\n\t\tvalues = c.getValuesForProperty(\"myProperty\");\n\t\tassertThat(values).hasSize(2);\n\t\tassertThat(values).contains(1);\n\t\tassertThat(values).contains(2);\n\t}\n\n\t@Test\n\tvoid getValuesInTurkey() {\n\t\tLocale oldLocale = Locale.getDefault();\n\t\tLocale.setDefault(new Locale(\"tr\", \"\"));\n\t\ttry {\n\t\t\tConstants c = new Constants(A.class);\n\n\t\t\tSet<Object> values = c.getValues(\"\");\n\t\t\tassertThat(values).hasSize(7);\n\t\t\tassertThat(values).contains(0);\n\t\t\tassertThat(values).contains(66);\n\t\t\tassertThat(values).contains(\"\");\n\n\t\t\tvalues = c.getValues(\"D\");\n\t\t\tassertThat(values).hasSize(1);\n\t\t\tassertThat(values).contains(0);\n\n\t\t\tvalues = c.getValues(\"prefix\");\n\t\t\tassertThat(values).hasSize(2);\n\t\t\tassertThat(values).contains(1);\n\t\t\tassertThat(values).contains(2);\n\n\t\t\tvalues = c.getValuesForProperty(\"myProperty\");\n\t\t\tassertThat(values).hasSize(2);\n\t\t\tassertThat(values).contains(1);\n\t\t\tassertThat(values).contains(2);\n\t\t}\n\t\tfinally {\n\t\t\tLocale.setDefault(oldLocale);\n\t\t}\n\t}\n\n\t@Test\n\tvoid suffixAccess() {\n\t\tConstants c = new Constants(A.class);\n\n\t\tSet<String> names = c.getNamesForSuffix(\"_PROPERTY\");\n\t\tassertThat(names).hasSize(2);\n\t\tassertThat(names).contains(\"NO_PROPERTY\");\n\t\tassertThat(names).contains(\"YES_PROPERTY\");\n\n\t\tSet<Object> values = c.getValuesForSuffix(\"_PROPERTY\");\n\t\tassertThat(values).hasSize(2);\n\t\tassertThat(values).contains(3);\n\t\tassertThat(values).contains(4);\n\t}\n\n\t@Test\n\tvoid toCode() {\n\t\tConstants c = new Constants(A.class);\n\n\t\tassertThat(c.toCode(0, \"\")).isEqualTo(\"DOG\");\n\t\tassertThat(c.toCode(0, \"D\")).isEqualTo(\"DOG\");\n\t\tassertThat(c.toCode(0, \"DO\")).isEqualTo(\"DOG\");\n\t\tassertThat(c.toCode(0, \"DoG\")).isEqualTo(\"DOG\");\n\t\tassertThat(c.toCode(0, null)).isEqualTo(\"DOG\");\n\t\tassertThat(c.toCode(66, \"\")).isEqualTo(\"CAT\");\n\t\tassertThat(c.toCode(66, \"C\")).isEqualTo(\"CAT\");\n\t\tassertThat(c.toCode(66, \"ca\")).isEqualTo(\"CAT\");\n\t\tassertThat(c.toCode(66, \"cAt\")).isEqualTo(\"CAT\");\n\t\tassertThat(c.toCode(66, null)).isEqualTo(\"CAT\");\n\t\tassertThat(c.toCode(\"\", \"\")).isEqualTo(\"S1\");\n\t\tassertThat(c.toCode(\"\", \"s\")).isEqualTo(\"S1\");\n\t\tassertThat(c.toCode(\"\", \"s1\")).isEqualTo(\"S1\");\n\t\tassertThat(c.toCode(\"\", null)).isEqualTo(\"S1\");\n\t\tassertThatExceptionOfType(Constants.ConstantException.class).isThrownBy(() ->\n\t\t\t\tc.toCode(\"bogus\", \"bogus\"));\n\t\tassertThatExceptionOfType(Constants.ConstantException.class).isThrownBy(() ->\n\t\t\t\tc.toCode(\"bogus\", null));\n\n\t\tassertThat(c.toCodeForProperty(1, \"myProperty\")).isEqualTo(\"MY_PROPERTY_NO\");\n\t\tassertThat(c.toCodeForProperty(2, \"myProperty\")).isEqualTo(\"MY_PROPERTY_YES\");\n\t\tassertThatExceptionOfType(Constants.ConstantException.class).isThrownBy(() ->\n\t\t\t\tc.toCodeForProperty(\"bogus\", \"bogus\"));\n\n\t\tassertThat(c.toCodeForSuffix(0, \"\")).isEqualTo(\"DOG\");\n\t\tassertThat(c.toCodeForSuffix(0, \"G\")).isEqualTo(\"DOG\");\n\t\tassertThat(c.toCodeForSuffix(0, \"OG\")).isEqualTo(\"DOG\");\n\t\tassertThat(c.toCodeForSuffix(0, \"DoG\")).isEqualTo(\"DOG\");\n\t\tassertThat(c.toCodeForSuffix(0, null)).isEqualTo(\"DOG\");\n\t\tassertThat(c.toCodeForSuffix(66, \"\")).isEqualTo(\"CAT\");\n\t\tassertThat(c.toCodeForSuffix(66, \"T\")).isEqualTo(\"CAT\");\n\t\tassertThat(c.toCodeForSuffix(66, \"at\")).isEqualTo(\"CAT\");\n\t\tassertThat(c.toCodeForSuffix(66, \"cAt\")).isEqualTo(\"CAT\");\n\t\tassertThat(c.toCodeForSuffix(66, null)).isEqualTo(\"CAT\");\n\t\tassertThat(c.toCodeForSuffix(\"\", \"\")).isEqualTo(\"S1\");\n\t\tassertThat(c.toCodeForSuffix(\"\", \"1\")).isEqualTo(\"S1\");\n\t\tassertThat(c.toCodeForSuffix(\"\", \"s1\")).isEqualTo(\"S1\");\n\t\tassertThat(c.toCodeForSuffix(\"\", null)).isEqualTo(\"S1\");\n\t\tassertThatExceptionOfType(Constants.ConstantException.class).isThrownBy(() ->\n\t\t\t\tc.toCodeForSuffix(\"bogus\", \"bogus\"));\n\t\tassertThatExceptionOfType(Constants.ConstantException.class).isThrownBy(() ->\n\t\t\t\tc.toCodeForSuffix(\"bogus\", null));\n\t}\n\n\t@Test\n\tvoid getValuesWithNullPrefix() {\n\t\tConstants c = new Constants(A.class);\n\t\tSet<?> values = c.getValues(null);\n\t\tassertThat(values).as(\"Must have returned *all* public static final values\").hasSize(7);\n\t}\n\n\t@Test\n\tvoid getValuesWithEmptyStringPrefix() {\n\t\tConstants c = new Constants(A.class);\n\t\tSet<Object> values = c.getValues(\"\");\n\t\tassertThat(values).as(\"Must have returned *all* public static final values\").hasSize(7);\n\t}\n\n\t@Test\n\tvoid getValuesWithWhitespacedStringPrefix() {\n\t\tConstants c = new Constants(A.class);\n\t\tSet<?> values = c.getValues(\" \");\n\t\tassertThat(values).as(\"Must have returned *all* public static final values\").hasSize(7);\n\t}\n\n\t@Test\n\tvoid withClassThatExposesNoConstants() {\n\t\tConstants c = new Constants(NoConstants.class);\n\t\tassertThat(c.getSize()).isEqualTo(0);\n\t\tfinal Set<?> values = c.getValues(\"\");\n\t\tassertThat(values).isNotNull();\n\t\tassertThat(values).isEmpty();\n\t}\n\n\t@Test\n\tvoid ctorWithNullClass() {\n\t\tassertThatIllegalArgumentException().isThrownBy(() ->\n\t\t\t\tnew Constants(null));\n\t}\n\n\n\tprivate static final class NoConstants {\n\t}\n\n\n\t@SuppressWarnings(\"unused\")\n\tprivate static final class A {\n\n\t\tpublic static final int DOG = 0;\n\t\tpublic static final int CAT = 66;\n\t\tpublic static final String S1 = \"\";\n\n\t\tpublic static final int PREFIX_NO = 1;\n\t\tpublic static final int PREFIX_YES = 2;\n\n\t\tpublic static final int MY_PROPERTY_NO = 1;\n\t\tpublic static final int MY_PROPERTY_YES = 2;\n\n\t\tpublic static final int NO_PROPERTY = 3;\n\t\tpublic static final int YES_PROPERTY = 4;\n\n\t\t/** ignore these */\n\t\tprotected static final int P = -1;\n\t\tprotected boolean f;\n\t\tstatic final Object o = new Object();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.A",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.A#DOG",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.A#DOG",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.A",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.A#CAT",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.A#CAT",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.A",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.A#S1",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.A#S1",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.A",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.A#PREFIX_NO",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.A#PREFIX_NO",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.A",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.A#PREFIX_YES",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.A#PREFIX_YES",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.A",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.A#MY_PROPERTY_NO",
    "tailType": "field"
  }
]