[
  {
    "head": "org.springframework.util.GetPubliclyAccessibleMethodTests#publicMethodInNonPublicClass(TestInfo)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\npublic // This method is intentionally public.\r\nvoid publicMethodInNonPublicClass(TestInfo testInfo) {\r\n    Method originalMethod = testInfo.getTestMethod().get();\r\n    // Prerequisites for this use case:\r\n    assertPublic(originalMethod);\r\n    assertNotPublic(originalMethod.getDeclaringClass());\r\n    Method publiclyAccessibleMethod = ClassUtils.getPubliclyAccessibleMethodIfPossible(originalMethod, null);\r\n    assertThat(publiclyAccessibleMethod).isSameAs(originalMethod);\r\n    assertNotPubliclyAccessible(publiclyAccessibleMethod);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.GetPubliclyAccessibleMethodTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.GetPubliclyAccessibleMethodTests#publicMethodInNonPublicClass(TestInfo)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.GetPubliclyAccessibleMethodTests#publicMethodInNonPublicClass(TestInfo)",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.GetPubliclyAccessibleMethodTests#publicMethodInNonPublicInterface()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid publicMethodInNonPublicInterface() throws Exception {\r\n    Class<?> originalType = PrivateInterface.class;\r\n    Method originalMethod = originalType.getDeclaredMethod(\"getMessage\");\r\n    // Prerequisites for this use case:\r\n    assertPublic(originalMethod);\r\n    assertNotPublic(originalMethod.getDeclaringClass());\r\n    Method publiclyAccessibleMethod = ClassUtils.getPubliclyAccessibleMethodIfPossible(originalMethod, null);\r\n    assertThat(publiclyAccessibleMethod).isSameAs(originalMethod);\r\n    assertNotPubliclyAccessible(publiclyAccessibleMethod);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.GetPubliclyAccessibleMethodTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.GetPubliclyAccessibleMethodTests#publicMethodInNonPublicInterface()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.GetPubliclyAccessibleMethodTests#publicMethodInNonPublicInterface()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.GetPubliclyAccessibleMethodTests#publicMethodInPublicClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid publicMethodInPublicClass() throws Exception {\r\n    Class<?> originalType = String.class;\r\n    Method originalMethod = originalType.getDeclaredMethod(\"toString\");\r\n    Method publiclyAccessibleMethod = ClassUtils.getPubliclyAccessibleMethodIfPossible(originalMethod, null);\r\n    assertThat(publiclyAccessibleMethod.getDeclaringClass()).isEqualTo(originalType);\r\n    assertThat(publiclyAccessibleMethod).isSameAs(originalMethod);\r\n    assertPubliclyAccessible(publiclyAccessibleMethod);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.GetPubliclyAccessibleMethodTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.GetPubliclyAccessibleMethodTests#publicMethodInPublicClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.GetPubliclyAccessibleMethodTests#publicMethodInPublicClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.GetPubliclyAccessibleMethodTests#publicInterfaceMethodInPublicClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid publicInterfaceMethodInPublicClass() throws Exception {\r\n    Class<?> originalType = ArrayList.class;\r\n    Method originalMethod = originalType.getDeclaredMethod(\"size\");\r\n    Method publiclyAccessibleMethod = ClassUtils.getPubliclyAccessibleMethodIfPossible(originalMethod, null);\r\n    // Should not find the interface method in List.\r\n    assertThat(publiclyAccessibleMethod.getDeclaringClass()).isEqualTo(originalType);\r\n    assertThat(publiclyAccessibleMethod).isSameAs(originalMethod);\r\n    assertPubliclyAccessible(publiclyAccessibleMethod);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.GetPubliclyAccessibleMethodTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.GetPubliclyAccessibleMethodTests#publicInterfaceMethodInPublicClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.GetPubliclyAccessibleMethodTests#publicInterfaceMethodInPublicClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.GetPubliclyAccessibleMethodTests#publicMethodInJavaLangObjectDeclaredInNonPublicClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid publicMethodInJavaLangObjectDeclaredInNonPublicClass() throws Exception {\r\n    List<String> unmodifiableList = Collections.unmodifiableList(Arrays.asList(\"foo\", \"bar\"));\r\n    Class<?> targetClass = unmodifiableList.getClass();\r\n    // Prerequisites for this use case:\r\n    assertNotPublic(targetClass);\r\n    Method originalMethod = targetClass.getMethod(\"toString\");\r\n    Method publiclyAccessibleMethod = ClassUtils.getPubliclyAccessibleMethodIfPossible(originalMethod, null);\r\n    assertThat(publiclyAccessibleMethod.getDeclaringClass()).isEqualTo(Object.class);\r\n    assertThat(publiclyAccessibleMethod.getName()).isEqualTo(\"toString\");\r\n    assertThat(publiclyAccessibleMethod.getParameterTypes()).isEmpty();\r\n    assertPubliclyAccessible(publiclyAccessibleMethod);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.GetPubliclyAccessibleMethodTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.GetPubliclyAccessibleMethodTests#publicMethodInJavaLangObjectDeclaredInNonPublicClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.GetPubliclyAccessibleMethodTests#publicMethodInJavaLangObjectDeclaredInNonPublicClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.GetPubliclyAccessibleMethodTests#publicMethodInJavaTimeZoneIdDeclaredInNonPublicSubclass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid publicMethodInJavaTimeZoneIdDeclaredInNonPublicSubclass() throws Exception {\r\n    // Returns a package-private java.time.ZoneRegion.\r\n    ZoneId zoneId = ZoneId.of(\"CET\");\r\n    Class<?> targetClass = zoneId.getClass();\r\n    // Prerequisites for this use case:\r\n    assertNotPublic(targetClass);\r\n    Method originalMethod = targetClass.getDeclaredMethod(\"getId\");\r\n    Method publiclyAccessibleMethod = ClassUtils.getPubliclyAccessibleMethodIfPossible(originalMethod, null);\r\n    assertThat(publiclyAccessibleMethod.getDeclaringClass()).isEqualTo(ZoneId.class);\r\n    assertThat(publiclyAccessibleMethod.getName()).isEqualTo(\"getId\");\r\n    assertThat(publiclyAccessibleMethod.getParameterTypes()).isEmpty();\r\n    assertPubliclyAccessible(publiclyAccessibleMethod);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.GetPubliclyAccessibleMethodTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.GetPubliclyAccessibleMethodTests#publicMethodInJavaTimeZoneIdDeclaredInNonPublicSubclass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.GetPubliclyAccessibleMethodTests#publicMethodInJavaTimeZoneIdDeclaredInNonPublicSubclass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.GetPubliclyAccessibleMethodTests#publicInterfaceMethodDeclaredInNonPublicClassWithLateBindingOfClassMethodToSubclassDeclaredInterface()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid publicInterfaceMethodDeclaredInNonPublicClassWithLateBindingOfClassMethodToSubclassDeclaredInterface() throws Exception {\r\n    HashMap<String, String> hashMap = new HashMap<>();\r\n    // Returns a package-private java.util.HashMap.KeyIterator which extends java.util.HashMap.HashIterator\r\n    // which declares hasNext(), even though HashIterator does not implement Iterator. Rather, KeyIterator\r\n    // implements HashIterator.\r\n    Iterator<String> iterator = hashMap.keySet().iterator();\r\n    Class<?> targetClass = iterator.getClass();\r\n    // Prerequisites for this use case:\r\n    assertNotPublic(targetClass);\r\n    Method originalMethod = targetClass.getMethod(\"hasNext\");\r\n    Method publiclyAccessibleMethod = ClassUtils.getPubliclyAccessibleMethodIfPossible(originalMethod, targetClass);\r\n    assertThat(publiclyAccessibleMethod.getDeclaringClass()).isEqualTo(Iterator.class);\r\n    assertThat(publiclyAccessibleMethod.getName()).isEqualTo(\"hasNext\");\r\n    assertThat(publiclyAccessibleMethod.getParameterTypes()).isEmpty();\r\n    assertPubliclyAccessible(publiclyAccessibleMethod);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.GetPubliclyAccessibleMethodTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.GetPubliclyAccessibleMethodTests#publicInterfaceMethodDeclaredInNonPublicClassWithLateBindingOfClassMethodToSubclassDeclaredInterface()",
    "tailType": "method"
  }
]