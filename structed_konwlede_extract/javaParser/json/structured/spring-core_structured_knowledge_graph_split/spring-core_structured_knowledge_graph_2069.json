[
  {
    "head": "org.springframework.core.MethodParameterTests#multipleResolveParameterTypeCalls()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\n@Deprecated\r\nvoid multipleResolveParameterTypeCalls() throws Exception {\r\n    Method method = ArrayList.class.getMethod(\"get\", int.class);\r\n    MethodParameter methodParameter = MethodParameter.forExecutable(method, -1);\r\n    assertThat(methodParameter.getParameterType()).isEqualTo(Object.class);\r\n    GenericTypeResolver.resolveParameterType(methodParameter, StringList.class);\r\n    assertThat(methodParameter.getParameterType()).isEqualTo(String.class);\r\n    GenericTypeResolver.resolveParameterType(methodParameter, IntegerList.class);\r\n    assertThat(methodParameter.getParameterType()).isEqualTo(Integer.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MethodParameterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodParameterTests#multipleResolveParameterTypeCalls()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MethodParameterTests#multipleResolveParameterTypeCalls()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.MethodParameterTests#multipleResolveParameterTypeCalls()",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.MethodParameterTests#equalsAndHashCodeConsidersContainingClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid equalsAndHashCodeConsidersContainingClass() throws Exception {\r\n    Method method = ArrayList.class.getMethod(\"get\", int.class);\r\n    MethodParameter m1 = MethodParameter.forExecutable(method, -1);\r\n    MethodParameter m2 = MethodParameter.forExecutable(method, -1);\r\n    MethodParameter m3 = MethodParameter.forExecutable(method, -1).nested();\r\n    assertThat(m1).isEqualTo(m2).isNotEqualTo(m3);\r\n    assertThat(m1.hashCode()).isEqualTo(m2.hashCode());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MethodParameterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodParameterTests#equalsAndHashCodeConsidersContainingClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MethodParameterTests#equalsAndHashCodeConsidersContainingClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.MethodParameterTests#equalsAndHashCodeConsidersNesting()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid equalsAndHashCodeConsidersNesting() throws Exception {\r\n    Method method = ArrayList.class.getMethod(\"get\", int.class);\r\n    MethodParameter m1 = MethodParameter.forExecutable(method, -1).withContainingClass(StringList.class);\r\n    MethodParameter m2 = MethodParameter.forExecutable(method, -1).withContainingClass(StringList.class);\r\n    MethodParameter m3 = MethodParameter.forExecutable(method, -1).withContainingClass(IntegerList.class);\r\n    MethodParameter m4 = MethodParameter.forExecutable(method, -1);\r\n    assertThat(m1).isEqualTo(m2).isNotEqualTo(m3).isNotEqualTo(m4);\r\n    assertThat(m1.hashCode()).isEqualTo(m2.hashCode());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MethodParameterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodParameterTests#equalsAndHashCodeConsidersNesting()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MethodParameterTests#equalsAndHashCodeConsidersNesting()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.MethodParameterTests#withContainingClassReturnsNewInstance()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid withContainingClassReturnsNewInstance() throws Exception {\r\n    Method method = ArrayList.class.getMethod(\"get\", int.class);\r\n    MethodParameter m1 = MethodParameter.forExecutable(method, -1);\r\n    MethodParameter m2 = m1.withContainingClass(StringList.class);\r\n    MethodParameter m3 = m1.withContainingClass(IntegerList.class);\r\n    assertThat(m1).isNotSameAs(m2).isNotSameAs(m3);\r\n    assertThat(m1.getParameterType()).isEqualTo(Object.class);\r\n    assertThat(m2.getParameterType()).isEqualTo(String.class);\r\n    assertThat(m3.getParameterType()).isEqualTo(Integer.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MethodParameterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodParameterTests#withContainingClassReturnsNewInstance()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MethodParameterTests#withContainingClassReturnsNewInstance()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.MethodParameterTests#withTypeIndexReturnsNewInstance()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid withTypeIndexReturnsNewInstance() throws Exception {\r\n    Method method = ArrayList.class.getMethod(\"get\", int.class);\r\n    MethodParameter m1 = MethodParameter.forExecutable(method, -1);\r\n    MethodParameter m2 = m1.withTypeIndex(2);\r\n    MethodParameter m3 = m1.withTypeIndex(3);\r\n    assertThat(m1).isNotSameAs(m2).isNotSameAs(m3);\r\n    assertThat(m1.getTypeIndexForCurrentLevel()).isNull();\r\n    assertThat(m2.getTypeIndexForCurrentLevel()).isEqualTo(2);\r\n    assertThat(m3.getTypeIndexForCurrentLevel()).isEqualTo(3);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MethodParameterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodParameterTests#withTypeIndexReturnsNewInstance()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MethodParameterTests#withTypeIndexReturnsNewInstance()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.MethodParameterTests#mutatingNestingLevelShouldNotChangeNewInstance()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\n@SuppressWarnings(\"deprecation\")\r\nvoid mutatingNestingLevelShouldNotChangeNewInstance() throws Exception {\r\n    Method method = ArrayList.class.getMethod(\"get\", int.class);\r\n    MethodParameter m1 = MethodParameter.forExecutable(method, -1);\r\n    MethodParameter m2 = m1.withTypeIndex(2);\r\n    assertThat(m2.getTypeIndexForCurrentLevel()).isEqualTo(2);\r\n    m1.setTypeIndexForCurrentLevel(1);\r\n    m2.decreaseNestingLevel();\r\n    assertThat(m2.getTypeIndexForCurrentLevel()).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MethodParameterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodParameterTests#mutatingNestingLevelShouldNotChangeNewInstance()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MethodParameterTests#mutatingNestingLevelShouldNotChangeNewInstance()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.MethodParameterTests#mutatingNestingLevelShouldNotChangeNewInstance()",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  }
]