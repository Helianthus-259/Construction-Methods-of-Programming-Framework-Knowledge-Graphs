[
  {
    "head": "org.springframework.asm.SymbolTable",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.SymbolTable#putConstantPool(ByteVector)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.SymbolTable#computeBootstrapMethodsSize()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the size in bytes of this symbol table's BootstrapMethods attribute. Also adds the\r\n * attribute name in the constant pool.\r\n *\r\n * @return the size in bytes of this symbol table's BootstrapMethods attribute.\r\n */\r\nint computeBootstrapMethodsSize() {\r\n    if (bootstrapMethods != null) {\r\n        addConstantUtf8(Constants.BOOTSTRAP_METHODS);\r\n        return 8 + bootstrapMethods.length;\r\n    } else {\r\n        return 0;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.SymbolTable",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.SymbolTable#computeBootstrapMethodsSize()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.SymbolTable#putBootstrapMethods(ByteVector)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Puts this symbol table's BootstrapMethods attribute in the given ByteVector. This includes the\r\n * 6 attribute header bytes and the num_bootstrap_methods value.\r\n *\r\n * @param output where the JVMS BootstrapMethods attribute must be put.\r\n */\r\nvoid putBootstrapMethods(final ByteVector output) {\r\n    if (bootstrapMethods != null) {\r\n        output.putShort(addConstantUtf8(Constants.BOOTSTRAP_METHODS)).putInt(bootstrapMethods.length + 2).putShort(bootstrapMethodCount).putByteArray(bootstrapMethods.data, 0, bootstrapMethods.length);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.SymbolTable",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.SymbolTable#putBootstrapMethods(ByteVector)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.SymbolTable#get(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "// -----------------------------------------------------------------------------------------------\r\n// Generic symbol table entries management.\r\n// -----------------------------------------------------------------------------------------------\r\n/**\r\n * Returns the list of entries which can potentially have the given hash code.\r\n *\r\n * @param hashCode a {@link Entry#hashCode} value.\r\n * @return the list of entries which can potentially have the given hash code. The list is stored\r\n *     via the {@link Entry#next} field.\r\n */\r\nprivate Entry get(final int hashCode) {\r\n    return entries[hashCode % entries.length];\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.SymbolTable",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.SymbolTable#get(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.SymbolTable#put(Entry)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Puts the given entry in the {@link #entries} hash set. This method does <i>not</i> check\r\n * whether {@link #entries} already contains a similar entry or not. {@link #entries} is resized\r\n * if necessary to avoid hash collisions (multiple entries needing to be stored at the same {@link\r\n * #entries} array index) as much as possible, with reasonable memory usage.\r\n *\r\n * @param entry an Entry (which must not already be contained in {@link #entries}).\r\n * @return the given entry\r\n */\r\nprivate Entry put(final Entry entry) {\r\n    if (entryCount > (entries.length * 3) / 4) {\r\n        int currentCapacity = entries.length;\r\n        int newCapacity = currentCapacity * 2 + 1;\r\n        Entry[] newEntries = new Entry[newCapacity];\r\n        for (int i = currentCapacity - 1; i >= 0; --i) {\r\n            Entry currentEntry = entries[i];\r\n            while (currentEntry != null) {\r\n                int newCurrentEntryIndex = currentEntry.hashCode % newCapacity;\r\n                Entry nextEntry = currentEntry.next;\r\n                currentEntry.next = newEntries[newCurrentEntryIndex];\r\n                newEntries[newCurrentEntryIndex] = currentEntry;\r\n                currentEntry = nextEntry;\r\n            }\r\n        }\r\n        entries = newEntries;\r\n    }\r\n    entryCount++;\r\n    int index = entry.hashCode % entries.length;\r\n    entry.next = entries[index];\r\n    return entries[index] = entry;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.SymbolTable",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.SymbolTable#put(Entry)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.SymbolTable#add(Entry)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Adds the given entry in the {@link #entries} hash set. This method does <i>not</i> check\r\n * whether {@link #entries} already contains a similar entry or not, and does <i>not</i> resize\r\n * {@link #entries} if necessary.\r\n *\r\n * @param entry an Entry (which must not already be contained in {@link #entries}).\r\n */\r\nprivate void add(final Entry entry) {\r\n    entryCount++;\r\n    int index = entry.hashCode % entries.length;\r\n    entry.next = entries[index];\r\n    entries[index] = entry;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.SymbolTable",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.SymbolTable#add(Entry)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.SymbolTable#addConstant(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "// -----------------------------------------------------------------------------------------------\r\n// Constant pool entries management.\r\n// -----------------------------------------------------------------------------------------------\r\n/**\r\n * Adds a number or string constant to the constant pool of this symbol table. Does nothing if the\r\n * constant pool already contains a similar item.\r\n *\r\n * @param value the value of the constant to be added to the constant pool. This parameter must be\r\n *     an {@link Integer}, {@link Byte}, {@link Character}, {@link Short}, {@link Boolean}, {@link\r\n *     Float}, {@link Long}, {@link Double}, {@link String}, {@link Type} or {@link Handle}.\r\n * @return a new or already existing Symbol with the given value.\r\n */\r\nSymbol addConstant(final Object value) {\r\n    if (value instanceof Integer) {\r\n        return addConstantInteger(((Integer) value).intValue());\r\n    } else if (value instanceof Byte) {\r\n        return addConstantInteger(((Byte) value).intValue());\r\n    } else if (value instanceof Character) {\r\n        return addConstantInteger(((Character) value).charValue());\r\n    } else if (value instanceof Short) {\r\n        return addConstantInteger(((Short) value).intValue());\r\n    } else if (value instanceof Boolean) {\r\n        return addConstantInteger(((Boolean) value).booleanValue() ? 1 : 0);\r\n    } else if (value instanceof Float) {\r\n        return addConstantFloat(((Float) value).floatValue());\r\n    } else if (value instanceof Long) {\r\n        return addConstantLong(((Long) value).longValue());\r\n    } else if (value instanceof Double) {\r\n        return addConstantDouble(((Double) value).doubleValue());\r\n    } else if (value instanceof String) {\r\n        return addConstantString((String) value);\r\n    } else if (value instanceof Type) {\r\n        Type type = (Type) value;\r\n        int typeSort = type.getSort();\r\n        if (typeSort == Type.OBJECT) {\r\n            return addConstantClass(type.getInternalName());\r\n        } else if (typeSort == Type.METHOD) {\r\n            return addConstantMethodType(type.getDescriptor());\r\n        } else {\r\n            // type is a primitive or array type.\r\n            return addConstantClass(type.getDescriptor());\r\n        }\r\n    } else if (value instanceof Handle) {\r\n        Handle handle = (Handle) value;\r\n        return addConstantMethodHandle(handle.getTag(), handle.getOwner(), handle.getName(), handle.getDesc(), handle.isInterface());\r\n    } else if (value instanceof ConstantDynamic) {\r\n        ConstantDynamic constantDynamic = (ConstantDynamic) value;\r\n        return addConstantDynamic(constantDynamic.getName(), constantDynamic.getDescriptor(), constantDynamic.getBootstrapMethod(), constantDynamic.getBootstrapMethodArgumentsUnsafe());\r\n    } else {\r\n        throw new IllegalArgumentException(\"value \" + value);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.SymbolTable",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.SymbolTable#addConstant(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.SymbolTable#addConstantClass(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Adds a CONSTANT_Class_info to the constant pool of this symbol table. Does nothing if the\r\n * constant pool already contains a similar item.\r\n *\r\n * @param value the internal name of a class.\r\n * @return a new or already existing Symbol with the given value.\r\n */\r\nSymbol addConstantClass(final String value) {\r\n    return addConstantUtf8Reference(Symbol.CONSTANT_CLASS_TAG, value);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.SymbolTable",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.SymbolTable#addConstantClass(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.SymbolTable#addConstantFieldref(String,String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table. Does nothing if the\r\n * constant pool already contains a similar item.\r\n *\r\n * @param owner the internal name of a class.\r\n * @param name a field name.\r\n * @param descriptor a field descriptor.\r\n * @return a new or already existing Symbol with the given value.\r\n */\r\nSymbol addConstantFieldref(final String owner, final String name, final String descriptor) {\r\n    return addConstantMemberReference(Symbol.CONSTANT_FIELDREF_TAG, owner, name, descriptor);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.SymbolTable",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.SymbolTable#addConstantFieldref(String,String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.SymbolTable#addConstantMethodref(String,String,String,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this\r\n * symbol table. Does nothing if the constant pool already contains a similar item.\r\n *\r\n * @param owner the internal name of a class.\r\n * @param name a method name.\r\n * @param descriptor a method descriptor.\r\n * @param isInterface whether owner is an interface or not.\r\n * @return a new or already existing Symbol with the given value.\r\n */\r\nSymbol addConstantMethodref(final String owner, final String name, final String descriptor, final boolean isInterface) {\r\n    int tag = isInterface ? Symbol.CONSTANT_INTERFACE_METHODREF_TAG : Symbol.CONSTANT_METHODREF_TAG;\r\n    return addConstantMemberReference(tag, owner, name, descriptor);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.SymbolTable",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.SymbolTable#addConstantMethodref(String,String,String,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.SymbolTable#addConstantMemberReference(int,String,String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Adds a CONSTANT_Fieldref_info, CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to\r\n * the constant pool of this symbol table. Does nothing if the constant pool already contains a\r\n * similar item.\r\n *\r\n * @param tag one of {@link Symbol#CONSTANT_FIELDREF_TAG}, {@link Symbol#CONSTANT_METHODREF_TAG}\r\n *     or {@link Symbol#CONSTANT_INTERFACE_METHODREF_TAG}.\r\n * @param owner the internal name of a class.\r\n * @param name a field or method name.\r\n * @param descriptor a field or method descriptor.\r\n * @return a new or already existing Symbol with the given value.\r\n */\r\nprivate Entry addConstantMemberReference(final int tag, final String owner, final String name, final String descriptor) {\r\n    int hashCode = hash(tag, owner, name, descriptor);\r\n    Entry entry = get(hashCode);\r\n    while (entry != null) {\r\n        if (entry.tag == tag && entry.hashCode == hashCode && entry.owner.equals(owner) && entry.name.equals(name) && entry.value.equals(descriptor)) {\r\n            return entry;\r\n        }\r\n        entry = entry.next;\r\n    }\r\n    constantPool.put122(tag, addConstantClass(owner).index, addConstantNameAndType(name, descriptor));\r\n    return put(new Entry(constantPoolCount++, tag, owner, name, descriptor, 0, hashCode));\r\n}",
    "tailType": "method_code"
  }
]