[
  {
    "head": "org.springframework.core.ParameterNameDiscoverer#getParameterNames(Method)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return parameter names for a method, or {@code null} if they cannot be determined.\r\n * <p>Individual entries in the array may be {@code null} if parameter names are only\r\n * available for some parameters of the given method but not for others. However,\r\n * it is recommended to use stub parameter names instead wherever feasible.\r\n * @param method the method to find parameter names for\r\n * @return an array of parameter names if the names can be resolved,\r\n * or {@code null} if they cannot\r\n */\r\n@Nullable\r\nString @Nullable [] getParameterNames(Method method);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ParameterNameDiscoverer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ParameterNameDiscoverer#getParameterNames(Method)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ParameterNameDiscoverer#getParameterNames(Method)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ParameterNameDiscoverer#getParameterNames(Constructor<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return parameter names for a constructor, or {@code null} if they cannot be determined.\r\n * <p>Individual entries in the array may be {@code null} if parameter names are only\r\n * available for some parameters of the given constructor but not for others. However,\r\n * it is recommended to use stub parameter names instead wherever feasible.\r\n * @param ctor the constructor to find parameter names for\r\n * @return an array of parameter names if the names can be resolved,\r\n * or {@code null} if they cannot\r\n */\r\n@Nullable\r\nString @Nullable [] getParameterNames(Constructor<?> ctor);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ParameterNameDiscoverer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ParameterNameDiscoverer#getParameterNames(Constructor<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ParameterNameDiscoverer#getParameterNames(Constructor<?>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.PrioritizedParameterNameDiscoverer",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.PrioritizedParameterNameDiscoverer",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2020 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core;\n\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * {@link ParameterNameDiscoverer} implementation that tries several discoverer\n * delegates in succession. Those added first in the {@code addDiscoverer} method\n * have the highest priority. If one returns {@code null}, the next will be tried.\n *\n * <p>The default behavior is to return {@code null} if no discoverer matches.\n *\n * @author Rod Johnson\n * @author Juergen Hoeller\n * @since 2.0\n */\npublic class PrioritizedParameterNameDiscoverer implements ParameterNameDiscoverer {\n\n\tprivate final List<ParameterNameDiscoverer> parameterNameDiscoverers = new ArrayList<>(2);\n\n\n\t/**\n\t * Add a further {@link ParameterNameDiscoverer} delegate to the list of\n\t * discoverers that this {@code PrioritizedParameterNameDiscoverer} checks.\n\t */\n\tpublic void addDiscoverer(ParameterNameDiscoverer pnd) {\n\t\tthis.parameterNameDiscoverers.add(pnd);\n\t}\n\n\n\t@Override\n\tpublic @Nullable String @Nullable [] getParameterNames(Method method) {\n\t\tfor (ParameterNameDiscoverer pnd : this.parameterNameDiscoverers) {\n\t\t\t@Nullable String[] result = pnd.getParameterNames(method);\n\t\t\tif (result != null) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t@Override\n\tpublic @Nullable String @Nullable [] getParameterNames(Constructor<?> ctor) {\n\t\tfor (ParameterNameDiscoverer pnd : this.parameterNameDiscoverers) {\n\t\t\t@Nullable String[] result = pnd.getParameterNames(ctor);\n\t\t\tif (result != null) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.PrioritizedParameterNameDiscoverer",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.PrioritizedParameterNameDiscoverer#parameterNameDiscoverers",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.PrioritizedParameterNameDiscoverer#parameterNameDiscoverers",
    "headType": "field",
    "relation": "haveType",
    "tail": "List<ParameterNameDiscoverer>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.PrioritizedParameterNameDiscoverer#addDiscoverer(ParameterNameDiscoverer)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Add a further {@link ParameterNameDiscoverer} delegate to the list of\r\n * discoverers that this {@code PrioritizedParameterNameDiscoverer} checks.\r\n */\r\npublic void addDiscoverer(ParameterNameDiscoverer pnd) {\r\n    this.parameterNameDiscoverers.add(pnd);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.PrioritizedParameterNameDiscoverer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.PrioritizedParameterNameDiscoverer#addDiscoverer(ParameterNameDiscoverer)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.PrioritizedParameterNameDiscoverer#getParameterNames(Method)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic String @Nullable [] getParameterNames(Method method) {\r\n    for (ParameterNameDiscoverer pnd : this.parameterNameDiscoverers) {\r\n        @Nullable\r\n        String[] result = pnd.getParameterNames(method);\r\n        if (result != null) {\r\n            return result;\r\n        }\r\n    }\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.PrioritizedParameterNameDiscoverer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.PrioritizedParameterNameDiscoverer#getParameterNames(Method)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.PrioritizedParameterNameDiscoverer#getParameterNames(Method)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.PrioritizedParameterNameDiscoverer#getParameterNames(Method)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.PrioritizedParameterNameDiscoverer#getParameterNames(Constructor<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic String @Nullable [] getParameterNames(Constructor<?> ctor) {\r\n    for (ParameterNameDiscoverer pnd : this.parameterNameDiscoverers) {\r\n        @Nullable\r\n        String[] result = pnd.getParameterNames(ctor);\r\n        if (result != null) {\r\n            return result;\r\n        }\r\n    }\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.PrioritizedParameterNameDiscoverer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.PrioritizedParameterNameDiscoverer#getParameterNames(Constructor<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.PrioritizedParameterNameDiscoverer#getParameterNames(Constructor<?>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  }
]