[
  {
    "head": "org.springframework.cglib.core.EmitUtils#append_string_helper(CodeEmitter,Type,ArrayDelimiters,CustomizerRegistry,ProcessArrayCallback)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static void append_string_helper(CodeEmitter e, Type type, ArrayDelimiters delims, CustomizerRegistry registry, ProcessArrayCallback callback) {\r\n    Label skip = e.make_label();\r\n    Label end = e.make_label();\r\n    if (TypeUtils.isPrimitive(type)) {\r\n        switch(type.getSort()) {\r\n            case Type.INT:\r\n            case Type.SHORT:\r\n            case Type.BYTE:\r\n                e.invoke_virtual(Constants.TYPE_STRING_BUFFER, APPEND_INT);\r\n                break;\r\n            case Type.DOUBLE:\r\n                e.invoke_virtual(Constants.TYPE_STRING_BUFFER, APPEND_DOUBLE);\r\n                break;\r\n            case Type.FLOAT:\r\n                e.invoke_virtual(Constants.TYPE_STRING_BUFFER, APPEND_FLOAT);\r\n                break;\r\n            case Type.LONG:\r\n                e.invoke_virtual(Constants.TYPE_STRING_BUFFER, APPEND_LONG);\r\n                break;\r\n            case Type.BOOLEAN:\r\n                e.invoke_virtual(Constants.TYPE_STRING_BUFFER, APPEND_BOOLEAN);\r\n                break;\r\n            case Type.CHAR:\r\n                e.invoke_virtual(Constants.TYPE_STRING_BUFFER, APPEND_CHAR);\r\n                break;\r\n        }\r\n    } else if (TypeUtils.isArray(type)) {\r\n        e.dup();\r\n        e.ifnull(skip);\r\n        e.swap();\r\n        if (delims != null && delims.before != null && !delims.before.isEmpty()) {\r\n            e.push(delims.before);\r\n            e.invoke_virtual(Constants.TYPE_STRING_BUFFER, APPEND_STRING);\r\n            e.swap();\r\n        }\r\n        EmitUtils.process_array(e, type, callback);\r\n        shrinkStringBuffer(e, 2);\r\n        if (delims != null && delims.after != null && !delims.after.isEmpty()) {\r\n            e.push(delims.after);\r\n            e.invoke_virtual(Constants.TYPE_STRING_BUFFER, APPEND_STRING);\r\n        }\r\n    } else {\r\n        e.dup();\r\n        e.ifnull(skip);\r\n        for (Customizer customizer : registry.get(Customizer.class)) {\r\n            customizer.customize(e, type);\r\n        }\r\n        e.invoke_virtual(Constants.TYPE_OBJECT, TO_STRING);\r\n        e.invoke_virtual(Constants.TYPE_STRING_BUFFER, APPEND_STRING);\r\n    }\r\n    e.goTo(end);\r\n    e.mark(skip);\r\n    e.pop();\r\n    e.push(\"null\");\r\n    e.invoke_virtual(Constants.TYPE_STRING_BUFFER, APPEND_STRING);\r\n    e.mark(end);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.EmitUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.EmitUtils#append_string_helper(CodeEmitter,Type,ArrayDelimiters,CustomizerRegistry,ProcessArrayCallback)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.EmitUtils#shrinkStringBuffer(CodeEmitter,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static void shrinkStringBuffer(CodeEmitter e, int amt) {\r\n    e.dup();\r\n    e.dup();\r\n    e.invoke_virtual(Constants.TYPE_STRING_BUFFER, LENGTH);\r\n    e.push(amt);\r\n    e.math(CodeEmitter.SUB, Type.INT_TYPE);\r\n    e.invoke_virtual(Constants.TYPE_STRING_BUFFER, SET_LENGTH);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.EmitUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.EmitUtils#shrinkStringBuffer(CodeEmitter,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.EmitUtils#load_method(CodeEmitter,MethodInfo)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static void load_method(CodeEmitter e, MethodInfo method) {\r\n    load_class(e, method.getClassInfo().getType());\r\n    e.push(method.getSignature().getName());\r\n    push_object(e, method.getSignature().getArgumentTypes());\r\n    e.invoke_virtual(Constants.TYPE_CLASS, GET_DECLARED_METHOD);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.EmitUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.EmitUtils#load_method(CodeEmitter,MethodInfo)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.EmitUtils#method_switch(CodeEmitter,List,ObjectSwitchCallback)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static void method_switch(CodeEmitter e, List methods, ObjectSwitchCallback callback) {\r\n    member_switch_helper(e, methods, callback, true);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.EmitUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.EmitUtils#method_switch(CodeEmitter,List,ObjectSwitchCallback)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.EmitUtils#constructor_switch(CodeEmitter,List,ObjectSwitchCallback)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static void constructor_switch(CodeEmitter e, List constructors, ObjectSwitchCallback callback) {\r\n    member_switch_helper(e, constructors, callback, false);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.EmitUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.EmitUtils#constructor_switch(CodeEmitter,List,ObjectSwitchCallback)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.EmitUtils#member_switch_helper(CodeEmitter,List,ObjectSwitchCallback,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static void member_switch_helper(final CodeEmitter e, List members, final ObjectSwitchCallback callback, boolean useName) {\r\n    try {\r\n        final Map cache = new HashMap();\r\n        final ParameterTyper cached = member -> {\r\n            Type[] types = (Type[]) cache.get(member);\r\n            if (types == null) {\r\n                cache.put(member, types = member.getSignature().getArgumentTypes());\r\n            }\r\n            return types;\r\n        };\r\n        final Label def = e.make_label();\r\n        final Label end = e.make_label();\r\n        if (useName) {\r\n            e.swap();\r\n            final Map buckets = CollectionUtils.bucket(members, value -> ((MethodInfo) value).getSignature().getName());\r\n            String[] names = (String[]) buckets.keySet().toArray(new String[buckets.size()]);\r\n            EmitUtils.string_switch(e, names, Constants.SWITCH_STYLE_HASH, new ObjectSwitchCallback() {\r\n\r\n                @Override\r\n                public void processCase(Object key, Label dontUseEnd) throws Exception {\r\n                    member_helper_size(e, (List) buckets.get(key), callback, cached, def, end);\r\n                }\r\n\r\n                @Override\r\n                public void processDefault() throws Exception {\r\n                    e.goTo(def);\r\n                }\r\n            });\r\n        } else {\r\n            member_helper_size(e, members, callback, cached, def, end);\r\n        }\r\n        e.mark(def);\r\n        e.pop();\r\n        callback.processDefault();\r\n        e.mark(end);\r\n    } catch (RuntimeException | Error ex) {\r\n        throw ex;\r\n    } catch (Exception ex) {\r\n        throw new CodeGenerationException(ex);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.EmitUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.EmitUtils#member_switch_helper(CodeEmitter,List,ObjectSwitchCallback,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.EmitUtils#member_helper_size(CodeEmitter,List,ObjectSwitchCallback,ParameterTyper,Label,Label)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static void member_helper_size(final CodeEmitter e, List members, final ObjectSwitchCallback callback, final ParameterTyper typer, final Label def, final Label end) throws Exception {\r\n    final Map buckets = CollectionUtils.bucket(members, value -> typer.getParameterTypes((MethodInfo) value).length);\r\n    e.dup();\r\n    e.arraylength();\r\n    e.process_switch(EmitUtils.getSwitchKeys(buckets), new ProcessSwitchCallback() {\r\n\r\n        @Override\r\n        public void processCase(int key, Label dontUseEnd) throws Exception {\r\n            List bucket = (List) buckets.get(key);\r\n            member_helper_type(e, bucket, callback, typer, def, end, new BitSet());\r\n        }\r\n\r\n        @Override\r\n        public void processDefault() throws Exception {\r\n            e.goTo(def);\r\n        }\r\n    });\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.EmitUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.EmitUtils#member_helper_size(CodeEmitter,List,ObjectSwitchCallback,ParameterTyper,Label,Label)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.EmitUtils#member_helper_type(CodeEmitter,List,ObjectSwitchCallback,ParameterTyper,Label,Label,BitSet)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static void member_helper_type(final CodeEmitter e, List members, final ObjectSwitchCallback callback, final ParameterTyper typer, final Label def, final Label end, final BitSet checked) throws Exception {\r\n    if (members.size() == 1) {\r\n        MethodInfo member = (MethodInfo) members.get(0);\r\n        Type[] types = typer.getParameterTypes(member);\r\n        // need to check classes that have not already been checked via switches\r\n        for (int i = 0; i < types.length; i++) {\r\n            if (checked == null || !checked.get(i)) {\r\n                e.dup();\r\n                e.aaload(i);\r\n                e.invoke_virtual(Constants.TYPE_CLASS, GET_NAME);\r\n                e.push(TypeUtils.emulateClassGetName(types[i]));\r\n                e.invoke_virtual(Constants.TYPE_OBJECT, EQUALS);\r\n                e.if_jump(CodeEmitter.EQ, def);\r\n            }\r\n        }\r\n        e.pop();\r\n        callback.processCase(member, end);\r\n    } else {\r\n        // choose the index that has the best chance of uniquely identifying member\r\n        Type[] example = typer.getParameterTypes((MethodInfo) members.get(0));\r\n        Map buckets = null;\r\n        int index = -1;\r\n        for (int i = 0; i < example.length; i++) {\r\n            final int j = i;\r\n            Map test = CollectionUtils.bucket(members, value -> TypeUtils.emulateClassGetName(typer.getParameterTypes((MethodInfo) value)[j]));\r\n            if (buckets == null || test.size() > buckets.size()) {\r\n                buckets = test;\r\n                index = i;\r\n            }\r\n        }\r\n        if (buckets == null || buckets.size() == 1) {\r\n            // TODO: switch by returnType\r\n            // must have two methods with same name, types, and different return types\r\n            e.goTo(def);\r\n        } else {\r\n            checked.set(index);\r\n            e.dup();\r\n            e.aaload(index);\r\n            e.invoke_virtual(Constants.TYPE_CLASS, GET_NAME);\r\n            final Map fbuckets = buckets;\r\n            String[] names = (String[]) buckets.keySet().toArray(new String[buckets.size()]);\r\n            EmitUtils.string_switch(e, names, Constants.SWITCH_STYLE_HASH, new ObjectSwitchCallback() {\r\n\r\n                @Override\r\n                public void processCase(Object key, Label dontUseEnd) throws Exception {\r\n                    member_helper_type(e, (List) fbuckets.get(key), callback, typer, def, end, checked);\r\n                }\r\n\r\n                @Override\r\n                public void processDefault() throws Exception {\r\n                    e.goTo(def);\r\n                }\r\n            });\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.EmitUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.EmitUtils#member_helper_type(CodeEmitter,List,ObjectSwitchCallback,ParameterTyper,Label,Label,BitSet)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.EmitUtils#wrap_throwable(Block,Type)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static void wrap_throwable(Block block, Type wrapper) {\r\n    CodeEmitter e = block.getCodeEmitter();\r\n    e.catch_exception(block, Constants.TYPE_THROWABLE);\r\n    e.new_instance(wrapper);\r\n    e.dup_x1();\r\n    e.swap();\r\n    e.invoke_constructor(wrapper, CSTRUCT_THROWABLE);\r\n    e.athrow();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.EmitUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.EmitUtils#wrap_throwable(Block,Type)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.EmitUtils#add_properties(ClassEmitter,String[],Type[])",
    "headType": "method",
    "relation": "provide",
    "tail": "public static void add_properties(ClassEmitter ce, String[] names, Type[] types) {\r\n    for (int i = 0; i < names.length; i++) {\r\n        String fieldName = \"$cglib_prop_\" + names[i];\r\n        ce.declare_field(Constants.ACC_PRIVATE, fieldName, types[i], null);\r\n        EmitUtils.add_property(ce, names[i], types[i], fieldName);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.EmitUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.EmitUtils#add_properties(ClassEmitter,String[],Type[])",
    "tailType": "method"
  }
]