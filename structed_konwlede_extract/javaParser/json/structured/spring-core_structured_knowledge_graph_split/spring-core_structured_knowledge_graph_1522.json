[
  {
    "head": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrarTests#isCandidateWithNonMatchingAnnotatedElement(Class<?>)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrarTests#isCandidateWithNonMatchingAnnotatedElement(Class<?>)",
    "headType": "method",
    "relation": "use",
    "tail": "@ValueSource",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrarTests#shouldIgnoreNonAnnotatedType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldIgnoreNonAnnotatedType() {\r\n    RuntimeHints mock = mock();\r\n    this.registrar.registerRuntimeHints(mock, String.class);\r\n    verifyNoInteractions(mock);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrarTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrarTests#shouldIgnoreNonAnnotatedType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrarTests#shouldIgnoreNonAnnotatedType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrarTests#shouldProcessAnnotationOnType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldProcessAnnotationOnType() {\r\n    process(SampleTypeAnnotatedBean.class);\r\n    assertThat(this.runtimeHints.reflection().getTypeHint(SampleTypeAnnotatedBean.class)).isNotNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrarTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrarTests#shouldProcessAnnotationOnType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrarTests#shouldProcessAnnotationOnType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrarTests#shouldProcessWithMultipleProcessorsWithAnnotationOnType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldProcessWithMultipleProcessorsWithAnnotationOnType() {\r\n    process(SampleMultipleCustomProcessors.class);\r\n    TypeHint typeHint = this.runtimeHints.reflection().getTypeHint(SampleMultipleCustomProcessors.class);\r\n    assertThat(typeHint).isNotNull();\r\n    assertThat(typeHint.getMemberCategories()).containsExactly(MemberCategory.INVOKE_DECLARED_METHODS);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrarTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrarTests#shouldProcessWithMultipleProcessorsWithAnnotationOnType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrarTests#shouldProcessWithMultipleProcessorsWithAnnotationOnType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrarTests#shouldProcessAnnotationOnConstructor()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldProcessAnnotationOnConstructor() {\r\n    process(SampleConstructorAnnotatedBean.class);\r\n    assertThat(this.runtimeHints.reflection().getTypeHint(SampleConstructorAnnotatedBean.class)).satisfies(typeHint -> assertThat(typeHint.constructors()).singleElement().satisfies(constructorHint -> assertThat(constructorHint.getParameterTypes()).containsExactly(TypeReference.of(String.class))));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrarTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrarTests#shouldProcessAnnotationOnConstructor()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrarTests#shouldProcessAnnotationOnConstructor()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrarTests#shouldProcessAnnotationOnField()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldProcessAnnotationOnField() {\r\n    process(SampleFieldAnnotatedBean.class);\r\n    assertThat(this.runtimeHints.reflection().getTypeHint(SampleFieldAnnotatedBean.class)).satisfies(typeHint -> assertThat(typeHint.fields()).singleElement().satisfies(fieldHint -> assertThat(fieldHint.getName()).isEqualTo(\"managed\")));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrarTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrarTests#shouldProcessAnnotationOnField()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrarTests#shouldProcessAnnotationOnField()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrarTests#shouldProcessAnnotationOnMethod()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldProcessAnnotationOnMethod() {\r\n    process(SampleMethodAnnotatedBean.class);\r\n    assertThat(this.runtimeHints.reflection().getTypeHint(SampleMethodAnnotatedBean.class)).satisfies(typeHint -> assertThat(typeHint.methods()).singleElement().satisfies(methodHint -> assertThat(methodHint.getName()).isEqualTo(\"managed\")));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrarTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrarTests#shouldProcessAnnotationOnMethod()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrarTests#shouldProcessAnnotationOnMethod()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]