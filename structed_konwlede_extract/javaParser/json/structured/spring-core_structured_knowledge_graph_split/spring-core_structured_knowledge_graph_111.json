[
  {
    "head": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrar",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrar#registerRuntimeHints(RuntimeHints,Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrar#isCandidate(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Specify if the given {@code type} is a valid candidate.\r\n * @param type the type to inspect\r\n * @return {@code true} if the type uses {@link Reflective} in a way that\r\n * is supported by this registrar\r\n * @since 6.2\r\n */\r\npublic boolean isCandidate(Class<?> type) {\r\n    if (isReflective(type)) {\r\n        return true;\r\n    }\r\n    AtomicBoolean candidate = new AtomicBoolean(false);\r\n    doWithReflectiveConstructors(type, constructor -> candidate.set(true));\r\n    if (!candidate.get()) {\r\n        ReflectionUtils.doWithFields(type, field -> candidate.set(true), this::isReflective);\r\n    }\r\n    if (!candidate.get()) {\r\n        ReflectionUtils.doWithMethods(type, method -> candidate.set(true), this::isReflective);\r\n    }\r\n    return candidate.get();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrar",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrar#isCandidate(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrar#processType(Set<Entry>,Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void processType(Set<Entry> entries, Class<?> typeToProcess) {\r\n    if (isReflective(typeToProcess)) {\r\n        entries.add(createEntry(typeToProcess));\r\n    }\r\n    doWithReflectiveConstructors(typeToProcess, constructor -> entries.add(createEntry(constructor)));\r\n    ReflectionUtils.doWithFields(typeToProcess, field -> entries.add(createEntry(field)), this::isReflective);\r\n    ReflectionUtils.doWithMethods(typeToProcess, method -> entries.add(createEntry(method)), this::isReflective);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrar",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrar#processType(Set<Entry>,Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrar#doWithReflectiveConstructors(Class<?>,Consumer<Constructor<?>>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void doWithReflectiveConstructors(Class<?> typeToProcess, Consumer<Constructor<?>> consumer) {\r\n    for (Constructor<?> constructor : typeToProcess.getDeclaredConstructors()) {\r\n        if (isReflective(constructor)) {\r\n            consumer.accept(constructor);\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrar",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrar#doWithReflectiveConstructors(Class<?>,Consumer<Constructor<?>>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrar#isReflective(AnnotatedElement)",
    "headType": "method",
    "relation": "provide",
    "tail": "private boolean isReflective(AnnotatedElement element) {\r\n    return MergedAnnotations.from(element, TYPE_HIERARCHY).isPresent(Reflective.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrar",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrar#isReflective(AnnotatedElement)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrar#createEntry(AnnotatedElement)",
    "headType": "method",
    "relation": "provide",
    "tail": "@SuppressWarnings(\"unchecked\")\r\nprivate Entry createEntry(AnnotatedElement element) {\r\n    List<ReflectiveProcessor> processors = MergedAnnotations.from(element, TYPE_HIERARCHY).stream(Reflective.class).map(annotation -> annotation.getClassArray(\"value\")).flatMap(Arrays::stream).distinct().map(type -> (Class<? extends ReflectiveProcessor>) type).map(processorClass -> this.processors.computeIfAbsent(processorClass, this::instantiateClass)).toList();\r\n    ReflectiveProcessor processorToUse = (processors.size() == 1 ? processors.get(0) : new DelegatingReflectiveProcessor(processors));\r\n    return new Entry(element, processorToUse);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrar",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrar#createEntry(AnnotatedElement)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrar#createEntry(AnnotatedElement)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrar#instantiateClass(Class<? extends ReflectiveProcessor>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private ReflectiveProcessor instantiateClass(Class<? extends ReflectiveProcessor> type) {\r\n    try {\r\n        Constructor<? extends ReflectiveProcessor> constructor = type.getDeclaredConstructor();\r\n        ReflectionUtils.makeAccessible(constructor);\r\n        return constructor.newInstance();\r\n    } catch (Exception ex) {\r\n        throw new IllegalStateException(\"Failed to instantiate \" + type, ex);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrar",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrar#instantiateClass(Class<? extends ReflectiveProcessor>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.annotation.DelegatingReflectiveProcessor",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.hint.annotation.DelegatingReflectiveProcessor",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint.annotation;\n\nimport java.lang.reflect.AnnotatedElement;\nimport java.lang.reflect.Constructor;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.concurrent.atomic.AtomicBoolean;\nimport java.util.function.Consumer;\n\nimport org.springframework.aot.hint.ReflectionHints;\nimport org.springframework.aot.hint.RuntimeHints;\nimport org.springframework.core.annotation.MergedAnnotations;\nimport org.springframework.util.ClassUtils;\nimport org.springframework.util.ReflectionUtils;\n\nimport static org.springframework.core.annotation.MergedAnnotations.SearchStrategy.TYPE_HIERARCHY;\n\n/**\n * Process {@link Reflective @Reflective} annotated elements.\n *\n * @author Stephane Nicoll\n * @author Andy Wilkinson\n * @since 6.0\n */\npublic class ReflectiveRuntimeHintsRegistrar {\n\n\tprivate final Map<Class<? extends ReflectiveProcessor>, ReflectiveProcessor> processors = new HashMap<>();\n\n\n\t/**\n\t * Register the relevant runtime hints for elements that are annotated with\n\t * {@link Reflective}.\n\t * @param runtimeHints the runtime hints instance to use\n\t * @param types the types to process\n\t */\n\tpublic void registerRuntimeHints(RuntimeHints runtimeHints, Class<?>... types) {\n\t\tSet<Entry> entries = new HashSet<>();\n\t\tfor (Class<?> type : types) {\n\t\t\tprocessType(entries, type);\n\t\t\tfor (Class<?> implementedInterface : ClassUtils.getAllInterfacesForClass(type)) {\n\t\t\t\tprocessType(entries, implementedInterface);\n\t\t\t}\n\t\t}\n\t\tentries.forEach(entry -> {\n\t\t\tAnnotatedElement element = entry.element();\n\t\t\tentry.processor().registerReflectionHints(runtimeHints.reflection(), element);\n\t\t});\n\t}\n\n\t/**\n\t * Specify if the given {@code type} is a valid candidate.\n\t * @param type the type to inspect\n\t * @return {@code true} if the type uses {@link Reflective} in a way that\n\t * is supported by this registrar\n\t * @since 6.2\n\t */\n\tpublic boolean isCandidate(Class<?> type) {\n\t\tif (isReflective(type)) {\n\t\t\treturn true;\n\t\t}\n\t\tAtomicBoolean candidate = new AtomicBoolean(false);\n\t\tdoWithReflectiveConstructors(type, constructor -> candidate.set(true));\n\t\tif (!candidate.get()) {\n\t\t\tReflectionUtils.doWithFields(type, field -> candidate.set(true), this::isReflective);\n\t\t}\n\t\tif (!candidate.get()) {\n\t\t\tReflectionUtils.doWithMethods(type, method -> candidate.set(true), this::isReflective);\n\t\t}\n\t\treturn candidate.get();\n\t}\n\n\tprivate void processType(Set<Entry> entries, Class<?> typeToProcess) {\n\t\tif (isReflective(typeToProcess)) {\n\t\t\tentries.add(createEntry(typeToProcess));\n\t\t}\n\t\tdoWithReflectiveConstructors(typeToProcess, constructor ->\n\t\t\t\tentries.add(createEntry(constructor)));\n\t\tReflectionUtils.doWithFields(typeToProcess, field ->\n\t\t\t\tentries.add(createEntry(field)), this::isReflective);\n\t\tReflectionUtils.doWithMethods(typeToProcess, method ->\n\t\t\t\tentries.add(createEntry(method)), this::isReflective);\n\t}\n\n\tprivate void doWithReflectiveConstructors(Class<?> typeToProcess, Consumer<Constructor<?>> consumer) {\n\t\tfor (Constructor<?> constructor : typeToProcess.getDeclaredConstructors()) {\n\t\t\tif (isReflective(constructor)) {\n\t\t\t\tconsumer.accept(constructor);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate boolean isReflective(AnnotatedElement element) {\n\t\treturn MergedAnnotations.from(element, TYPE_HIERARCHY).isPresent(Reflective.class);\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tprivate Entry createEntry(AnnotatedElement element) {\n\t\tList<ReflectiveProcessor> processors = MergedAnnotations.from(element, TYPE_HIERARCHY)\n\t\t\t\t.stream(Reflective.class)\n\t\t\t\t.map(annotation -> annotation.getClassArray(\"value\"))\n\t\t\t\t.flatMap(Arrays::stream)\n\t\t\t\t.distinct()\n\t\t\t\t.map(type -> (Class<? extends ReflectiveProcessor>) type)\n\t\t\t\t.map(processorClass -> this.processors.computeIfAbsent(processorClass, this::instantiateClass))\n\t\t\t\t.toList();\n\t\tReflectiveProcessor processorToUse = (processors.size() == 1 ? processors.get(0) :\n\t\t\t\tnew DelegatingReflectiveProcessor(processors));\n\t\treturn new Entry(element, processorToUse);\n\t}\n\n\tprivate ReflectiveProcessor instantiateClass(Class<? extends ReflectiveProcessor> type) {\n\t\ttry {\n\t\t\tConstructor<? extends ReflectiveProcessor> constructor = type.getDeclaredConstructor();\n\t\t\tReflectionUtils.makeAccessible(constructor);\n\t\t\treturn constructor.newInstance();\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tthrow new IllegalStateException(\"Failed to instantiate \" + type, ex);\n\t\t}\n\t}\n\n\tprivate static class DelegatingReflectiveProcessor implements ReflectiveProcessor {\n\n\t\tprivate final Iterable<ReflectiveProcessor> processors;\n\n\t\tDelegatingReflectiveProcessor(Iterable<ReflectiveProcessor> processors) {\n\t\t\tthis.processors = processors;\n\t\t}\n\n\t\t@Override\n\t\tpublic void registerReflectionHints(ReflectionHints hints, AnnotatedElement element) {\n\t\t\tthis.processors.forEach(processor -> processor.registerReflectionHints(hints, element));\n\t\t}\n\n\t}\n\n\tprivate record Entry(AnnotatedElement element, ReflectiveProcessor processor) {}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.hint.annotation.DelegatingReflectiveProcessor",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.hint.annotation.DelegatingReflectiveProcessor#processors",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.hint.annotation.DelegatingReflectiveProcessor#processors",
    "headType": "field",
    "relation": "haveType",
    "tail": "Iterable<ReflectiveProcessor>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.hint.annotation.DelegatingReflectiveProcessor#registerReflectionHints(ReflectionHints,AnnotatedElement)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void registerReflectionHints(ReflectionHints hints, AnnotatedElement element) {\r\n    this.processors.forEach(processor -> processor.registerReflectionHints(hints, element));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.annotation.DelegatingReflectiveProcessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.annotation.DelegatingReflectiveProcessor#registerReflectionHints(ReflectionHints,AnnotatedElement)",
    "tailType": "method"
  }
]