[
  {
    "head": "org.springframework.cglib.proxy.Enhancer#validate()",
    "headType": "method",
    "relation": "provide",
    "tail": "private void validate() {\r\n    if (classOnly ^ (callbacks == null)) {\r\n        if (classOnly) {\r\n            throw new IllegalStateException(\"createClass does not accept callbacks\");\r\n        } else {\r\n            throw new IllegalStateException(\"Callbacks are required\");\r\n        }\r\n    }\r\n    if (classOnly && (callbackTypes == null)) {\r\n        throw new IllegalStateException(\"Callback types are required\");\r\n    }\r\n    if (validateCallbackTypes) {\r\n        callbackTypes = null;\r\n    }\r\n    if (callbacks != null && callbackTypes != null) {\r\n        if (callbacks.length != callbackTypes.length) {\r\n            throw new IllegalStateException(\"Lengths of callback and callback types array must be the same\");\r\n        }\r\n        Type[] check = CallbackInfo.determineTypes(callbacks);\r\n        for (int i = 0; i < check.length; i++) {\r\n            if (!check[i].equals(callbackTypes[i])) {\r\n                throw new IllegalStateException(\"Callback \" + check[i] + \" is not assignable to \" + callbackTypes[i]);\r\n            }\r\n        }\r\n    } else if (callbacks != null) {\r\n        callbackTypes = CallbackInfo.determineTypes(callbacks);\r\n    }\r\n    if (interfaces != null) {\r\n        for (Class element : interfaces) {\r\n            if (element == null) {\r\n                throw new IllegalStateException(\"Interfaces cannot be null\");\r\n            }\r\n            if (!element.isInterface()) {\r\n                throw new IllegalStateException(element + \" is not an interface\");\r\n            }\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.Enhancer#validate()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer#createHelper()",
    "headType": "method",
    "relation": "provide",
    "tail": "private Object createHelper() {\r\n    preValidate();\r\n    // SPRING PATCH BEGIN\r\n    Object key = new EnhancerKey((superclass != null ? superclass.getName() : null), (interfaces != null ? Arrays.asList(ReflectUtils.getNames(interfaces)) : null), (filter == ALL_ZERO ? null : new WeakCacheKey<>(filter)), Arrays.asList(callbackTypes), useFactory, interceptDuringConstruction, serialVersionUID);\r\n    // SPRING PATCH END\r\n    this.currentKey = key;\r\n    Object result = super.create(key);\r\n    return result;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.Enhancer#createHelper()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer#generate(ClassLoaderData)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected Class generate(ClassLoaderData data) {\r\n    validate();\r\n    if (superclass != null) {\r\n        setNamePrefix(superclass.getName());\r\n    } else if (interfaces != null) {\r\n        setNamePrefix(interfaces[ReflectUtils.findPackageProtected(interfaces)].getName());\r\n    }\r\n    return super.generate(data);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.Enhancer#generate(ClassLoaderData)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer#generate(ClassLoaderData)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer#getDefaultClassLoader()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected ClassLoader getDefaultClassLoader() {\r\n    if (superclass != null) {\r\n        return superclass.getClassLoader();\r\n    } else if (interfaces != null) {\r\n        return interfaces[0].getClassLoader();\r\n    } else {\r\n        return null;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.Enhancer#getDefaultClassLoader()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer#getDefaultClassLoader()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer#getProtectionDomain()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected ProtectionDomain getProtectionDomain() {\r\n    if (superclass != null) {\r\n        return ReflectUtils.getProtectionDomain(superclass);\r\n    } else if (interfaces != null) {\r\n        return ReflectUtils.getProtectionDomain(interfaces[0]);\r\n    } else {\r\n        return null;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.Enhancer#getProtectionDomain()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer#getProtectionDomain()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer#rename(Signature,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "private Signature rename(Signature sig, int index) {\r\n    return new Signature(\"CGLIB$\" + sig.getName() + \"$\" + index, sig.getDescriptor());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.Enhancer#rename(Signature,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer#getMethods(Class,Class[],List)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Finds all of the methods that will be extended by an\r\n * Enhancer-generated class using the specified superclass and\r\n * interfaces. This can be useful in building a list of Callback\r\n * objects. The methods are added to the end of the given list.  Due\r\n * to the subclassing nature of the classes generated by Enhancer,\r\n * the methods are guaranteed to be non-static, non-final, and\r\n * non-private. Each method signature will only occur once, even if\r\n * it occurs in multiple classes.\r\n * @param superclass the class that will be extended, or null\r\n * @param interfaces the list of interfaces that will be implemented, or null\r\n * @param methods the list into which to copy the applicable methods\r\n */\r\npublic static void getMethods(Class superclass, Class[] interfaces, List methods) {\r\n    getMethods(superclass, interfaces, methods, null, null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.Enhancer#getMethods(Class,Class[],List)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer#getMethods(Class,Class[],List,List,Set)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static void getMethods(Class superclass, Class[] interfaces, List methods, List interfaceMethods, Set forcePublic) {\r\n    ReflectUtils.addAllMethods(superclass, methods);\r\n    List target = (interfaceMethods != null) ? interfaceMethods : methods;\r\n    if (interfaces != null) {\r\n        for (Class element : interfaces) {\r\n            if (element != Factory.class) {\r\n                ReflectUtils.addAllMethods(element, target);\r\n            }\r\n        }\r\n    }\r\n    if (interfaceMethods != null) {\r\n        if (forcePublic != null) {\r\n            forcePublic.addAll(MethodWrapper.createSet(interfaceMethods));\r\n        }\r\n        methods.addAll(interfaceMethods);\r\n    }\r\n    CollectionUtils.filter(methods, new RejectModifierPredicate(Constants.ACC_STATIC));\r\n    CollectionUtils.filter(methods, new VisibilityPredicate(superclass, true));\r\n    CollectionUtils.filter(methods, new DuplicatesPredicate());\r\n    CollectionUtils.filter(methods, new RejectModifierPredicate(Constants.ACC_FINAL));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.Enhancer#getMethods(Class,Class[],List,List,Set)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer#generateClass(ClassVisitor)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void generateClass(ClassVisitor v) throws Exception {\r\n    Class sc = (superclass == null) ? Object.class : superclass;\r\n    if (TypeUtils.isFinal(sc.getModifiers())) {\r\n        throw new IllegalArgumentException(\"Cannot subclass final class \" + sc.getName());\r\n    }\r\n    List constructors = new ArrayList(Arrays.asList(sc.getDeclaredConstructors()));\r\n    filterConstructors(sc, constructors);\r\n    // Order is very important: must add superclass, then\r\n    // its superclass chain, then each interface and\r\n    // its superinterfaces.\r\n    List actualMethods = new ArrayList();\r\n    List interfaceMethods = new ArrayList();\r\n    final Set forcePublic = new HashSet();\r\n    getMethods(sc, interfaces, actualMethods, interfaceMethods, forcePublic);\r\n    List methods = CollectionUtils.transform(actualMethods, value -> {\r\n        Method method = (Method) value;\r\n        int modifiers = Constants.ACC_FINAL | (method.getModifiers() & ~Constants.ACC_ABSTRACT & ~Constants.ACC_NATIVE & ~Constants.ACC_SYNCHRONIZED);\r\n        if (forcePublic.contains(MethodWrapper.create(method))) {\r\n            modifiers = (modifiers & ~Constants.ACC_PROTECTED) | Constants.ACC_PUBLIC;\r\n        }\r\n        return ReflectUtils.getMethodInfo(method, modifiers);\r\n    });\r\n    ClassEmitter e = new ClassEmitter(v);\r\n    if (currentData == null) {\r\n        e.begin_class(Constants.V1_8, Constants.ACC_PUBLIC, getClassName(), Type.getType(sc), (useFactory ? TypeUtils.add(TypeUtils.getTypes(interfaces), FACTORY) : TypeUtils.getTypes(interfaces)), Constants.SOURCE_FILE);\r\n    } else {\r\n        e.begin_class(Constants.V1_8, Constants.ACC_PUBLIC, getClassName(), null, new Type[] { FACTORY }, Constants.SOURCE_FILE);\r\n    }\r\n    List constructorInfo = CollectionUtils.transform(constructors, MethodInfoTransformer.getInstance());\r\n    e.declare_field(Constants.ACC_PRIVATE, BOUND_FIELD, Type.BOOLEAN_TYPE, null);\r\n    e.declare_field(Constants.ACC_PUBLIC | Constants.ACC_STATIC, FACTORY_DATA_FIELD, OBJECT_TYPE, null);\r\n    if (!interceptDuringConstruction) {\r\n        e.declare_field(Constants.ACC_PRIVATE, CONSTRUCTED_FIELD, Type.BOOLEAN_TYPE, null);\r\n    }\r\n    e.declare_field(Constants.PRIVATE_FINAL_STATIC, THREAD_CALLBACKS_FIELD, THREAD_LOCAL, null);\r\n    e.declare_field(Constants.PRIVATE_FINAL_STATIC, STATIC_CALLBACKS_FIELD, CALLBACK_ARRAY, null);\r\n    if (serialVersionUID != null) {\r\n        e.declare_field(Constants.PRIVATE_FINAL_STATIC, Constants.SUID_FIELD_NAME, Type.LONG_TYPE, serialVersionUID);\r\n    }\r\n    for (int i = 0; i < callbackTypes.length; i++) {\r\n        e.declare_field(Constants.ACC_PRIVATE, getCallbackField(i), callbackTypes[i], null);\r\n    }\r\n    // This is declared private to avoid \"public field\" pollution\r\n    e.declare_field(Constants.ACC_PRIVATE | Constants.ACC_STATIC, CALLBACK_FILTER_FIELD, OBJECT_TYPE, null);\r\n    if (currentData == null) {\r\n        emitMethods(e, methods, actualMethods);\r\n        emitConstructors(e, constructorInfo);\r\n    } else {\r\n        emitDefaultConstructor(e);\r\n    }\r\n    emitSetThreadCallbacks(e);\r\n    emitSetStaticCallbacks(e);\r\n    emitBindCallbacks(e);\r\n    if (useFactory || currentData != null) {\r\n        int[] keys = getCallbackKeys();\r\n        emitNewInstanceCallbacks(e);\r\n        emitNewInstanceCallback(e);\r\n        emitNewInstanceMultiarg(e, constructorInfo);\r\n        emitGetCallback(e, keys);\r\n        emitSetCallback(e, keys);\r\n        emitGetCallbacks(e);\r\n        emitSetCallbacks(e);\r\n    }\r\n    e.end_class();\r\n}",
    "tailType": "method_code"
  }
]