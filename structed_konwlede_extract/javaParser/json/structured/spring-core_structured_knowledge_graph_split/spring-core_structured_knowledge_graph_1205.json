[
  {
    "head": "org.springframework.core.type.classreading.SimpleMethodMetadata",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.classreading.SimpleMethodMetadata#toString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleMethodMetadata#toString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.type.classreading",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.type.classreading",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.type.classreading.SimpleMethodMetadataReadingVisitor",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleMethodMetadataReadingVisitor",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2021 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.type.classreading;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.function.Consumer;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.asm.AnnotationVisitor;\nimport org.springframework.asm.MethodVisitor;\nimport org.springframework.asm.SpringAsmInfo;\nimport org.springframework.asm.Type;\nimport org.springframework.core.annotation.MergedAnnotation;\nimport org.springframework.core.annotation.MergedAnnotations;\n\n/**\n * ASM method visitor that creates {@link SimpleMethodMetadata}.\n *\n * @author Phillip Webb\n * @author Sam Brannen\n * @author Juergen Hoeller\n * @since 5.2\n */\nfinal class SimpleMethodMetadataReadingVisitor extends MethodVisitor {\n\n\tprivate final @Nullable ClassLoader classLoader;\n\n\tprivate final String declaringClassName;\n\n\tprivate final int access;\n\n\tprivate final String methodName;\n\n\tprivate final String descriptor;\n\n\tprivate final List<MergedAnnotation<?>> annotations = new ArrayList<>(4);\n\n\tprivate final Consumer<SimpleMethodMetadata> consumer;\n\n\tprivate @Nullable Source source;\n\n\n\tSimpleMethodMetadataReadingVisitor(@Nullable ClassLoader classLoader, String declaringClassName,\n\t\t\tint access, String methodName, String descriptor, Consumer<SimpleMethodMetadata> consumer) {\n\n\t\tsuper(SpringAsmInfo.ASM_VERSION);\n\t\tthis.classLoader = classLoader;\n\t\tthis.declaringClassName = declaringClassName;\n\t\tthis.access = access;\n\t\tthis.methodName = methodName;\n\t\tthis.descriptor = descriptor;\n\t\tthis.consumer = consumer;\n\t}\n\n\n\t@Override\n\tpublic @Nullable AnnotationVisitor visitAnnotation(String descriptor, boolean visible) {\n\t\treturn MergedAnnotationReadingVisitor.get(this.classLoader, getSource(),\n\t\t\t\tdescriptor, visible, this.annotations::add);\n\t}\n\n\t@Override\n\tpublic void visitEnd() {\n\t\tString returnTypeName = Type.getReturnType(this.descriptor).getClassName();\n\t\tMergedAnnotations annotations = MergedAnnotations.of(this.annotations);\n\t\tSimpleMethodMetadata metadata = new SimpleMethodMetadata(this.methodName, this.access,\n\t\t\t\tthis.declaringClassName, returnTypeName, getSource(), annotations);\n\t\tthis.consumer.accept(metadata);\n\t}\n\n\tprivate Object getSource() {\n\t\tSource source = this.source;\n\t\tif (source == null) {\n\t\t\tsource = new Source(this.declaringClassName, this.methodName, this.descriptor);\n\t\t\tthis.source = source;\n\t\t}\n\t\treturn source;\n\t}\n\n\n\t/**\n\t * {@link MergedAnnotation} source.\n\t */\n\tstatic final class Source {\n\n\t\tprivate final String declaringClassName;\n\n\t\tprivate final String methodName;\n\n\t\tprivate final String descriptor;\n\n\t\tprivate @Nullable String toStringValue;\n\n\t\tSource(String declaringClassName, String methodName, String descriptor) {\n\t\t\tthis.declaringClassName = declaringClassName;\n\t\t\tthis.methodName = methodName;\n\t\t\tthis.descriptor = descriptor;\n\t\t}\n\n\t\t@Override\n\t\tpublic int hashCode() {\n\t\t\tint result = 1;\n\t\t\tresult = 31 * result + this.declaringClassName.hashCode();\n\t\t\tresult = 31 * result + this.methodName.hashCode();\n\t\t\tresult = 31 * result + this.descriptor.hashCode();\n\t\t\treturn result;\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean equals(@Nullable Object other) {\n\t\t\tif (this == other) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (other == null || getClass() != other.getClass()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tSource otherSource = (Source) other;\n\t\t\treturn (this.declaringClassName.equals(otherSource.declaringClassName) &&\n\t\t\t\t\tthis.methodName.equals(otherSource.methodName) && this.descriptor.equals(otherSource.descriptor));\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\tString value = this.toStringValue;\n\t\t\tif (value == null) {\n\t\t\t\tStringBuilder builder = new StringBuilder();\n\t\t\t\tbuilder.append(this.declaringClassName);\n\t\t\t\tbuilder.append('.');\n\t\t\t\tbuilder.append(this.methodName);\n\t\t\t\tType[] argumentTypes = Type.getArgumentTypes(this.descriptor);\n\t\t\t\tbuilder.append('(');\n\t\t\t\tfor (int i = 0; i < argumentTypes.length; i++) {\n\t\t\t\t\tif (i != 0) {\n\t\t\t\t\t\tbuilder.append(',');\n\t\t\t\t\t}\n\t\t\t\t\tbuilder.append(argumentTypes[i].getClassName());\n\t\t\t\t}\n\t\t\t\tbuilder.append(')');\n\t\t\t\tvalue = builder.toString();\n\t\t\t\tthis.toStringValue = value;\n\t\t\t}\n\t\t\treturn value;\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleMethodMetadataReadingVisitor",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.type.classreading.SimpleMethodMetadataReadingVisitor#classLoader",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleMethodMetadataReadingVisitor#classLoader",
    "headType": "field",
    "relation": "haveType",
    "tail": "ClassLoader",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleMethodMetadataReadingVisitor",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.type.classreading.SimpleMethodMetadataReadingVisitor#declaringClassName",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleMethodMetadataReadingVisitor#declaringClassName",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleMethodMetadataReadingVisitor",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.type.classreading.SimpleMethodMetadataReadingVisitor#access",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleMethodMetadataReadingVisitor#access",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleMethodMetadataReadingVisitor",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.type.classreading.SimpleMethodMetadataReadingVisitor#methodName",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleMethodMetadataReadingVisitor#methodName",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleMethodMetadataReadingVisitor",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.type.classreading.SimpleMethodMetadataReadingVisitor#descriptor",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleMethodMetadataReadingVisitor#descriptor",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleMethodMetadataReadingVisitor",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.type.classreading.SimpleMethodMetadataReadingVisitor#annotations",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleMethodMetadataReadingVisitor#annotations",
    "headType": "field",
    "relation": "haveType",
    "tail": "List<MergedAnnotation<?>>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleMethodMetadataReadingVisitor",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.type.classreading.SimpleMethodMetadataReadingVisitor#consumer",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleMethodMetadataReadingVisitor#consumer",
    "headType": "field",
    "relation": "haveType",
    "tail": "Consumer<SimpleMethodMetadata>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleMethodMetadataReadingVisitor",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.type.classreading.SimpleMethodMetadataReadingVisitor#source",
    "tailType": "field"
  }
]