[
  {
    "head": "org.springframework.core.env.MutablePropertySources",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.MutablePropertySources#assertLegalRelativeAddition(String,PropertySource<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.MutablePropertySources#removeIfPresent(PropertySource<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Remove the given property source if it is present.\r\n */\r\nprotected void removeIfPresent(PropertySource<?> propertySource) {\r\n    this.propertySourceList.remove(propertySource);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.MutablePropertySources",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.MutablePropertySources#removeIfPresent(PropertySource<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.MutablePropertySources#addAtIndex(int,PropertySource<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Add the given property source at a particular index in the list.\r\n */\r\nprivate void addAtIndex(int index, PropertySource<?> propertySource) {\r\n    removeIfPresent(propertySource);\r\n    this.propertySourceList.add(index, propertySource);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.MutablePropertySources",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.MutablePropertySources#addAtIndex(int,PropertySource<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.MutablePropertySources#assertPresentAndGetIndex(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Assert that the named property source is present and return its index.\r\n * @param name {@linkplain PropertySource#getName() name of the property source} to find\r\n * @throws IllegalArgumentException if the named property source is not present\r\n */\r\nprivate int assertPresentAndGetIndex(String name) {\r\n    int index = this.propertySourceList.indexOf(PropertySource.named(name));\r\n    if (index == -1) {\r\n        throw new IllegalArgumentException(\"PropertySource named '\" + name + \"' does not exist\");\r\n    }\r\n    return index;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.MutablePropertySources",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.MutablePropertySources#assertPresentAndGetIndex(String)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.env",
    "tailType": "package"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.env",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.env",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.env.Profiles",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.env.Profiles",
    "headType": "class",
    "relation": "use",
    "tail": "@FunctionalInterface",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.Profiles",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.env;\n\nimport java.util.function.Predicate;\n\n/**\n * Profile predicate that may be {@linkplain Environment#acceptsProfiles(Profiles)\n * accepted} by an {@link Environment}.\n *\n * <p>May be implemented directly or, more usually, created using the\n * {@link #of(String...) of(...)} factory method.\n *\n * @author Phillip Webb\n * @author Sam Brannen\n * @since 5.1\n * @see Environment#acceptsProfiles(Profiles)\n * @see Environment#matchesProfiles(String...)\n */\n@FunctionalInterface\npublic interface Profiles {\n\n\t/**\n\t * Test if this {@code Profiles} instance <em>matches</em> against the given\n\t * predicate.\n\t * @param isProfileActive a predicate that tests whether a given profile is\n\t * currently active\n\t */\n\tboolean matches(Predicate<String> isProfileActive);\n\n\n\t/**\n\t * Create a new {@link Profiles} instance that checks for matches against\n\t * the given <em>profile expressions</em>.\n\t * <p>The returned instance will {@linkplain Profiles#matches(Predicate) match}\n\t * if any one of the given profile expressions matches.\n\t * <p>A profile expression may contain a simple profile name (for example\n\t * {@code \"production\"}) or a compound expression. A compound expression allows\n\t * for more complicated profile logic to be expressed, for example\n\t * {@code \"production & cloud\"}.\n\t * <p>The following operators are supported in profile expressions.\n\t * <ul>\n\t * <li>{@code !} - A logical <em>NOT</em> of the profile name or compound expression</li>\n\t * <li>{@code &} - A logical <em>AND</em> of the profile names or compound expressions</li>\n\t * <li>{@code |} - A logical <em>OR</em> of the profile names or compound expressions</li>\n\t * </ul>\n\t * <p>Please note that the {@code &} and {@code |} operators may not be mixed\n\t * without using parentheses. For example, {@code \"a & b | c\"} is not a valid\n\t * expression: it must be expressed as {@code \"(a & b) | c\"} or\n\t * {@code \"a & (b | c)\"}.\n\t * <p>Two {@code Profiles} instances returned by this method are considered\n\t * equivalent to each other (in terms of {@code equals()} and {@code hashCode()}\n\t * semantics) if they are created with identical <em>profile expressions</em>.\n\t * @param profileExpressions the <em>profile expressions</em> to include\n\t * @return a new {@link Profiles} instance\n\t */\n\tstatic Profiles of(String... profileExpressions) {\n\t\treturn ProfilesParser.parse(profileExpressions);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.env.Profiles#matches(Predicate<String>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Test if this {@code Profiles} instance <em>matches</em> against the given\r\n * predicate.\r\n * @param isProfileActive a predicate that tests whether a given profile is\r\n * currently active\r\n */\r\nboolean matches(Predicate<String> isProfileActive);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.Profiles",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.Profiles#matches(Predicate<String>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.Profiles#of(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a new {@link Profiles} instance that checks for matches against\r\n * the given <em>profile expressions</em>.\r\n * <p>The returned instance will {@linkplain Profiles#matches(Predicate) match}\r\n * if any one of the given profile expressions matches.\r\n * <p>A profile expression may contain a simple profile name (for example\r\n * {@code \"production\"}) or a compound expression. A compound expression allows\r\n * for more complicated profile logic to be expressed, for example\r\n * {@code \"production & cloud\"}.\r\n * <p>The following operators are supported in profile expressions.\r\n * <ul>\r\n * <li>{@code !} - A logical <em>NOT</em> of the profile name or compound expression</li>\r\n * <li>{@code &} - A logical <em>AND</em> of the profile names or compound expressions</li>\r\n * <li>{@code |} - A logical <em>OR</em> of the profile names or compound expressions</li>\r\n * </ul>\r\n * <p>Please note that the {@code &} and {@code |} operators may not be mixed\r\n * without using parentheses. For example, {@code \"a & b | c\"} is not a valid\r\n * expression: it must be expressed as {@code \"(a & b) | c\"} or\r\n * {@code \"a & (b | c)\"}.\r\n * <p>Two {@code Profiles} instances returned by this method are considered\r\n * equivalent to each other (in terms of {@code equals()} and {@code hashCode()}\r\n * semantics) if they are created with identical <em>profile expressions</em>.\r\n * @param profileExpressions the <em>profile expressions</em> to include\r\n * @return a new {@link Profiles} instance\r\n */\r\nstatic Profiles of(String... profileExpressions) {\r\n    return ProfilesParser.parse(profileExpressions);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.Profiles",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.Profiles#of(String)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.env",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.env",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.env.ProfilesParser",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.env.ProfilesParser",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.env;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport java.util.function.Predicate;\nimport java.util.stream.Collectors;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.util.Assert;\n\n/**\n * Internal parser used by {@link Profiles#of}.\n *\n * @author Phillip Webb\n * @author Sam Brannen\n * @since 5.1\n */\nfinal class ProfilesParser {\n\n\tprivate ProfilesParser() {\n\t}\n\n\n\tstatic Profiles parse(String... expressions) {\n\t\tAssert.notEmpty(expressions, \"Must specify at least one profile expression\");\n\t\tProfiles[] parsed = new Profiles[expressions.length];\n\t\tfor (int i = 0; i < expressions.length; i++) {\n\t\t\tparsed[i] = parseExpression(expressions[i]);\n\t\t}\n\t\treturn new ParsedProfiles(expressions, parsed);\n\t}\n\n\tprivate static Profiles parseExpression(String expression) {\n\t\tAssert.hasText(expression, () -> \"Invalid profile expression [\" + expression + \"]: must contain text\");\n\t\tStringTokenizer tokens = new StringTokenizer(expression, \"()&|!\", true);\n\t\treturn parseTokens(expression, tokens);\n\t}\n\n\tprivate static Profiles parseTokens(String expression, StringTokenizer tokens) {\n\t\treturn parseTokens(expression, tokens, Context.NONE);\n\t}\n\n\tprivate static Profiles parseTokens(String expression, StringTokenizer tokens, Context context) {\n\t\tList<Profiles> elements = new ArrayList<>();\n\t\tOperator operator = null;\n\t\twhile (tokens.hasMoreTokens()) {\n\t\t\tString token = tokens.nextToken().trim();\n\t\t\tif (token.isEmpty()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tswitch (token) {\n\t\t\t\tcase \"(\" -> {\n\t\t\t\t\tProfiles contents = parseTokens(expression, tokens, Context.PARENTHESIS);\n\t\t\t\t\tif (context == Context.NEGATE) {\n\t\t\t\t\t\treturn contents;\n\t\t\t\t\t}\n\t\t\t\t\telements.add(contents);\n\t\t\t\t}\n\t\t\t\tcase \"&\" -> {\n\t\t\t\t\tassertWellFormed(expression, operator == null || operator == Operator.AND);\n\t\t\t\t\toperator = Operator.AND;\n\t\t\t\t}\n\t\t\t\tcase \"|\" -> {\n\t\t\t\t\tassertWellFormed(expression, operator == null || operator == Operator.OR);\n\t\t\t\t\toperator = Operator.OR;\n\t\t\t\t}\n\t\t\t\tcase \"!\" -> elements.add(not(parseTokens(expression, tokens, Context.NEGATE)));\n\t\t\t\tcase \")\" -> {\n\t\t\t\t\tProfiles merged = merge(expression, elements, operator);\n\t\t\t\t\tif (context == Context.PARENTHESIS) {\n\t\t\t\t\t\treturn merged;\n\t\t\t\t\t}\n\t\t\t\t\telements.clear();\n\t\t\t\t\telements.add(merged);\n\t\t\t\t\toperator = null;\n\t\t\t\t}\n\t\t\t\tdefault -> {\n\t\t\t\t\tProfiles value = equals(token);\n\t\t\t\t\tif (context == Context.NEGATE) {\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}\n\t\t\t\t\telements.add(value);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn merge(expression, elements, operator);\n\t}\n\n\tprivate static Profiles merge(String expression, List<Profiles> elements, @Nullable Operator operator) {\n\t\tassertWellFormed(expression, !elements.isEmpty());\n\t\tif (elements.size() == 1) {\n\t\t\treturn elements.get(0);\n\t\t}\n\t\tProfiles[] profiles = elements.toArray(new Profiles[0]);\n\t\treturn (operator == Operator.AND ? and(profiles) : or(profiles));\n\t}\n\n\tprivate static void assertWellFormed(String expression, boolean wellFormed) {\n\t\tAssert.isTrue(wellFormed, () -> \"Malformed profile expression [\" + expression + \"]\");\n\t}\n\n\tprivate static Profiles or(Profiles... profiles) {\n\t\treturn activeProfile -> Arrays.stream(profiles).anyMatch(isMatch(activeProfile));\n\t}\n\n\tprivate static Profiles and(Profiles... profiles) {\n\t\treturn activeProfile -> Arrays.stream(profiles).allMatch(isMatch(activeProfile));\n\t}\n\n\tprivate static Profiles not(Profiles profiles) {\n\t\treturn activeProfile -> !profiles.matches(activeProfile);\n\t}\n\n\tprivate static Profiles equals(String profile) {\n\t\treturn activeProfile -> activeProfile.test(profile);\n\t}\n\n\tprivate static Predicate<Profiles> isMatch(Predicate<String> activeProfiles) {\n\t\treturn profiles -> profiles.matches(activeProfiles);\n\t}\n\n\n\tprivate enum Operator { AND, OR }\n\n\tprivate enum Context { NONE, NEGATE, PARENTHESIS }\n\n\n\tprivate static class ParsedProfiles implements Profiles {\n\n\t\tprivate final Set<String> expressions = new LinkedHashSet<>();\n\n\t\tprivate final Profiles[] parsed;\n\n\t\tParsedProfiles(String[] expressions, Profiles[] parsed) {\n\t\t\tCollections.addAll(this.expressions, expressions);\n\t\t\tthis.parsed = parsed;\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean matches(Predicate<String> activeProfiles) {\n\t\t\tfor (Profiles candidate : this.parsed) {\n\t\t\t\tif (candidate.matches(activeProfiles)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean equals(@Nullable Object other) {\n\t\t\treturn (this == other || (other instanceof ParsedProfiles that &&\n\t\t\t\t\tthis.expressions.equals(that.expressions)));\n\t\t}\n\n\t\t@Override\n\t\tpublic int hashCode() {\n\t\t\treturn this.expressions.hashCode();\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\tif (this.expressions.size() == 1) {\n\t\t\t\treturn this.expressions.iterator().next();\n\t\t\t}\n\t\t\treturn this.expressions.stream().map(this::wrap).collect(Collectors.joining(\" | \"));\n\t\t}\n\n\t\tprivate String wrap(String str) {\n\t\t\treturn \"(\" + str + \")\";\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.env.ProfilesParser#parse(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "static Profiles parse(String... expressions) {\r\n    Assert.notEmpty(expressions, \"Must specify at least one profile expression\");\r\n    Profiles[] parsed = new Profiles[expressions.length];\r\n    for (int i = 0; i < expressions.length; i++) {\r\n        parsed[i] = parseExpression(expressions[i]);\r\n    }\r\n    return new ParsedProfiles(expressions, parsed);\r\n}",
    "tailType": "method_code"
  }
]