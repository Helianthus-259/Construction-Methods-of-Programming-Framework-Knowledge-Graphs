[
  {
    "head": "org.springframework.util.xml.AbstractStaxHandlerTests#namespacePrefixes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid namespacePrefixes() throws Exception {\r\n    StringWriter stringWriter = new StringWriter();\r\n    AbstractStaxHandler handler = createStaxHandler(new StreamResult(stringWriter));\r\n    xmlReader.setContentHandler(handler);\r\n    xmlReader.setProperty(\"http://xml.org/sax/properties/lexical-handler\", handler);\r\n    xmlReader.setFeature(\"http://xml.org/sax/features/namespaces\", true);\r\n    xmlReader.setFeature(\"http://xml.org/sax/features/namespace-prefixes\", true);\r\n    xmlReader.parse(new InputSource(new StringReader(COMPLEX_XML)));\r\n    assertThat(XmlContent.from(stringWriter)).isSimilarTo(COMPLEX_XML, nodeFilter);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandlerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractStaxHandlerTests#namespacePrefixes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandlerTests#namespacePrefixes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandlerTests#noNamespacePrefixesDom()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid noNamespacePrefixesDom() throws Exception {\r\n    DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();\r\n    documentBuilderFactory.setNamespaceAware(true);\r\n    DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\r\n    Document expected = documentBuilder.parse(new InputSource(new StringReader(SIMPLE_XML)));\r\n    Document result = documentBuilder.newDocument();\r\n    AbstractStaxHandler handler = createStaxHandler(new DOMResult(result));\r\n    xmlReader.setContentHandler(handler);\r\n    xmlReader.setProperty(\"http://xml.org/sax/properties/lexical-handler\", handler);\r\n    xmlReader.setFeature(\"http://xml.org/sax/features/namespaces\", true);\r\n    xmlReader.setFeature(\"http://xml.org/sax/features/namespace-prefixes\", false);\r\n    xmlReader.parse(new InputSource(new StringReader(SIMPLE_XML)));\r\n    assertThat(XmlContent.of(result)).isSimilarTo(expected, nodeFilter);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandlerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractStaxHandlerTests#noNamespacePrefixesDom()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandlerTests#noNamespacePrefixesDom()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandlerTests#namespacePrefixesDom()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid namespacePrefixesDom() throws Exception {\r\n    DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();\r\n    documentBuilderFactory.setNamespaceAware(true);\r\n    DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\r\n    Document expected = documentBuilder.parse(new InputSource(new StringReader(SIMPLE_XML)));\r\n    Document result = documentBuilder.newDocument();\r\n    AbstractStaxHandler handler = createStaxHandler(new DOMResult(result));\r\n    xmlReader.setContentHandler(handler);\r\n    xmlReader.setProperty(\"http://xml.org/sax/properties/lexical-handler\", handler);\r\n    xmlReader.setFeature(\"http://xml.org/sax/features/namespaces\", true);\r\n    xmlReader.setFeature(\"http://xml.org/sax/features/namespace-prefixes\", true);\r\n    xmlReader.parse(new InputSource(new StringReader(SIMPLE_XML)));\r\n    assertThat(XmlContent.of(result)).isSimilarTo(expected, nodeFilter);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandlerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractStaxHandlerTests#namespacePrefixesDom()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandlerTests#namespacePrefixesDom()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandlerTests#createStaxHandler(Result)",
    "headType": "method",
    "relation": "provide",
    "tail": "protected abstract AbstractStaxHandler createStaxHandler(Result result) throws XMLStreamException;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandlerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractStaxHandlerTests#createStaxHandler(Result)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.asm",
    "tailType": "package"
  },
  {
    "head": "org.springframework.asm",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.asm.Constants",
    "tailType": "class"
  },
  {
    "head": "org.springframework.asm.Constants",
    "headType": "class",
    "relation": "provide",
    "tail": "// ASM: a very small and fast Java bytecode manipulation framework\n// Copyright (c) 2000-2011 INRIA, France Telecom\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions\n// are met:\n// 1. Redistributions of source code must retain the above copyright\n//    notice, this list of conditions and the following disclaimer.\n// 2. Redistributions in binary form must reproduce the above copyright\n//    notice, this list of conditions and the following disclaimer in the\n//    documentation and/or other materials provided with the distribution.\n// 3. Neither the name of the copyright holders nor the names of its\n//    contributors may be used to endorse or promote products derived from\n//    this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n// THE POSSIBILITY OF SUCH DAMAGE.\npackage org.springframework.asm;\n\n/**\n * Defines additional JVM opcodes, access flags and constants which are not part of the ASM public\n * API.\n *\n * @see <a href=\"https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-6.html\">JVMS 6</a>\n * @author Eric Bruneton\n */\nfinal class Constants {\n\n  // The ClassFile attribute names, in the order they are defined in\n  // https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-4.html#jvms-4.7-300.\n\n  static final String CONSTANT_VALUE = \"ConstantValue\";\n  static final String CODE = \"Code\";\n  static final String STACK_MAP_TABLE = \"StackMapTable\";\n  static final String EXCEPTIONS = \"Exceptions\";\n  static final String INNER_CLASSES = \"InnerClasses\";\n  static final String ENCLOSING_METHOD = \"EnclosingMethod\";\n  static final String SYNTHETIC = \"Synthetic\";\n  static final String SIGNATURE = \"Signature\";\n  static final String SOURCE_FILE = \"SourceFile\";\n  static final String SOURCE_DEBUG_EXTENSION = \"SourceDebugExtension\";\n  static final String LINE_NUMBER_TABLE = \"LineNumberTable\";\n  static final String LOCAL_VARIABLE_TABLE = \"LocalVariableTable\";\n  static final String LOCAL_VARIABLE_TYPE_TABLE = \"LocalVariableTypeTable\";\n  static final String DEPRECATED = \"Deprecated\";\n  static final String RUNTIME_VISIBLE_ANNOTATIONS = \"RuntimeVisibleAnnotations\";\n  static final String RUNTIME_INVISIBLE_ANNOTATIONS = \"RuntimeInvisibleAnnotations\";\n  static final String RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS = \"RuntimeVisibleParameterAnnotations\";\n  static final String RUNTIME_INVISIBLE_PARAMETER_ANNOTATIONS = \"RuntimeInvisibleParameterAnnotations\";\n  static final String RUNTIME_VISIBLE_TYPE_ANNOTATIONS = \"RuntimeVisibleTypeAnnotations\";\n  static final String RUNTIME_INVISIBLE_TYPE_ANNOTATIONS = \"RuntimeInvisibleTypeAnnotations\";\n  static final String ANNOTATION_DEFAULT = \"AnnotationDefault\";\n  static final String BOOTSTRAP_METHODS = \"BootstrapMethods\";\n  static final String METHOD_PARAMETERS = \"MethodParameters\";\n  static final String MODULE = \"Module\";\n  static final String MODULE_PACKAGES = \"ModulePackages\";\n  static final String MODULE_MAIN_CLASS = \"ModuleMainClass\";\n  static final String NEST_HOST = \"NestHost\";\n  static final String NEST_MEMBERS = \"NestMembers\";\n  static final String PERMITTED_SUBCLASSES = \"PermittedSubclasses\";\n  static final String RECORD = \"Record\";\n\n  // ASM specific access flags.\n  // WARNING: the 16 least significant bits must NOT be used, to avoid conflicts with standard\n  // access flags, and also to make sure that these flags are automatically filtered out when\n  // written in class files (because access flags are stored using 16 bits only).\n\n  static final int ACC_CONSTRUCTOR = 0x40000; // method access flag.\n\n  // ASM specific stack map frame types, used in {@link ClassVisitor#visitFrame}.\n\n  /**\n   * A frame inserted between already existing frames. This internal stack map frame type (in\n   * addition to the ones declared in {@link Opcodes}) can only be used if the frame content can be\n   * computed from the previous existing frame and from the instructions between this existing frame\n   * and the inserted one, without any knowledge of the type hierarchy. This kind of frame is only\n   * used when an unconditional jump is inserted in a method while expanding an ASM specific\n   * instruction. Keep in sync with Opcodes.java.\n   */\n  static final int F_INSERT = 256;\n\n  // The JVM opcode values which are not part of the ASM public API.\n  // See https://docs.oracle.com/javase/specs/jvms/se9/html/jvms-6.html.\n\n  static final int LDC_W = 19;\n  static final int LDC2_W = 20;\n  static final int ILOAD_0 = 26;\n  static final int ILOAD_1 = 27;\n  static final int ILOAD_2 = 28;\n  static final int ILOAD_3 = 29;\n  static final int LLOAD_0 = 30;\n  static final int LLOAD_1 = 31;\n  static final int LLOAD_2 = 32;\n  static final int LLOAD_3 = 33;\n  static final int FLOAD_0 = 34;\n  static final int FLOAD_1 = 35;\n  static final int FLOAD_2 = 36;\n  static final int FLOAD_3 = 37;\n  static final int DLOAD_0 = 38;\n  static final int DLOAD_1 = 39;\n  static final int DLOAD_2 = 40;\n  static final int DLOAD_3 = 41;\n  static final int ALOAD_0 = 42;\n  static final int ALOAD_1 = 43;\n  static final int ALOAD_2 = 44;\n  static final int ALOAD_3 = 45;\n  static final int ISTORE_0 = 59;\n  static final int ISTORE_1 = 60;\n  static final int ISTORE_2 = 61;\n  static final int ISTORE_3 = 62;\n  static final int LSTORE_0 = 63;\n  static final int LSTORE_1 = 64;\n  static final int LSTORE_2 = 65;\n  static final int LSTORE_3 = 66;\n  static final int FSTORE_0 = 67;\n  static final int FSTORE_1 = 68;\n  static final int FSTORE_2 = 69;\n  static final int FSTORE_3 = 70;\n  static final int DSTORE_0 = 71;\n  static final int DSTORE_1 = 72;\n  static final int DSTORE_2 = 73;\n  static final int DSTORE_3 = 74;\n  static final int ASTORE_0 = 75;\n  static final int ASTORE_1 = 76;\n  static final int ASTORE_2 = 77;\n  static final int ASTORE_3 = 78;\n  static final int WIDE = 196;\n  static final int GOTO_W = 200;\n  static final int JSR_W = 201;\n\n  // Constants to convert between normal and wide jump instructions.\n\n  // The delta between the GOTO_W and JSR_W opcodes and GOTO and JUMP.\n  static final int WIDE_JUMP_OPCODE_DELTA = GOTO_W - Opcodes.GOTO;\n\n  // Constants to convert JVM opcodes to the equivalent ASM specific opcodes, and vice versa.\n\n  // The delta between the ASM_IFEQ, ..., ASM_IF_ACMPNE, ASM_GOTO and ASM_JSR opcodes\n  // and IFEQ, ..., IF_ACMPNE, GOTO and JSR.\n  static final int ASM_OPCODE_DELTA = 49;\n\n  // The delta between the ASM_IFNULL and ASM_IFNONNULL opcodes and IFNULL and IFNONNULL.\n  static final int ASM_IFNULL_OPCODE_DELTA = 20;\n\n  // ASM specific opcodes, used for long forward jump instructions.\n\n  static final int ASM_IFEQ = Opcodes.IFEQ + ASM_OPCODE_DELTA;\n  static final int ASM_IFNE = Opcodes.IFNE + ASM_OPCODE_DELTA;\n  static final int ASM_IFLT = Opcodes.IFLT + ASM_OPCODE_DELTA;\n  static final int ASM_IFGE = Opcodes.IFGE + ASM_OPCODE_DELTA;\n  static final int ASM_IFGT = Opcodes.IFGT + ASM_OPCODE_DELTA;\n  static final int ASM_IFLE = Opcodes.IFLE + ASM_OPCODE_DELTA;\n  static final int ASM_IF_ICMPEQ = Opcodes.IF_ICMPEQ + ASM_OPCODE_DELTA;\n  static final int ASM_IF_ICMPNE = Opcodes.IF_ICMPNE + ASM_OPCODE_DELTA;\n  static final int ASM_IF_ICMPLT = Opcodes.IF_ICMPLT + ASM_OPCODE_DELTA;\n  static final int ASM_IF_ICMPGE = Opcodes.IF_ICMPGE + ASM_OPCODE_DELTA;\n  static final int ASM_IF_ICMPGT = Opcodes.IF_ICMPGT + ASM_OPCODE_DELTA;\n  static final int ASM_IF_ICMPLE = Opcodes.IF_ICMPLE + ASM_OPCODE_DELTA;\n  static final int ASM_IF_ACMPEQ = Opcodes.IF_ACMPEQ + ASM_OPCODE_DELTA;\n  static final int ASM_IF_ACMPNE = Opcodes.IF_ACMPNE + ASM_OPCODE_DELTA;\n  static final int ASM_GOTO = Opcodes.GOTO + ASM_OPCODE_DELTA;\n  static final int ASM_JSR = Opcodes.JSR + ASM_OPCODE_DELTA;\n  static final int ASM_IFNULL = Opcodes.IFNULL + ASM_IFNULL_OPCODE_DELTA;\n  static final int ASM_IFNONNULL = Opcodes.IFNONNULL + ASM_IFNULL_OPCODE_DELTA;\n  static final int ASM_GOTO_W = 220;\n\n  private Constants() {}\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.asm.Constants",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.Constants#CONSTANT_VALUE",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.Constants#CONSTANT_VALUE",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.Constants",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.Constants#CODE",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.Constants#CODE",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.Constants",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.Constants#STACK_MAP_TABLE",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.Constants#STACK_MAP_TABLE",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  }
]