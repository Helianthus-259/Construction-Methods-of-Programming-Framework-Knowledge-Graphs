[
  {
    "head": "org.springframework.asm.TypePath",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.TypePath#ARRAY_ELEMENT",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.TypePath#ARRAY_ELEMENT",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.TypePath",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.TypePath#INNER_TYPE",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.TypePath#INNER_TYPE",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.TypePath",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.TypePath#WILDCARD_BOUND",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.TypePath#WILDCARD_BOUND",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.TypePath",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.TypePath#TYPE_ARGUMENT",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.TypePath#TYPE_ARGUMENT",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.TypePath",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.TypePath#typePathContainer",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.TypePath#typePathContainer",
    "headType": "field",
    "relation": "haveType",
    "tail": "byte",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.TypePath",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.TypePath#typePathOffset",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.TypePath#typePathOffset",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.TypePath#getLength()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the length of this path, i.e. its number of steps.\r\n *\r\n * @return the length of this path.\r\n */\r\npublic int getLength() {\r\n    // path_length is stored in the first byte of a type_path.\r\n    return typePathContainer[typePathOffset];\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.TypePath",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.TypePath#getLength()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.TypePath#getStep(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the value of the given step of this path.\r\n *\r\n * @param index an index between 0 and {@link #getLength()}, exclusive.\r\n * @return one of {@link #ARRAY_ELEMENT}, {@link #INNER_TYPE}, {@link #WILDCARD_BOUND}, or {@link\r\n *     #TYPE_ARGUMENT}.\r\n */\r\npublic int getStep(final int index) {\r\n    // Returns the type_path_kind of the path element of the given index.\r\n    return typePathContainer[typePathOffset + 2 * index + 1];\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.TypePath",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.TypePath#getStep(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.TypePath#getStepArgument(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the index of the type argument that the given step is stepping into. This method should\r\n * only be used for steps whose value is {@link #TYPE_ARGUMENT}.\r\n *\r\n * @param index an index between 0 and {@link #getLength()}, exclusive.\r\n * @return the index of the type argument that the given step is stepping into.\r\n */\r\npublic int getStepArgument(final int index) {\r\n    // Returns the type_argument_index of the path element of the given index.\r\n    return typePathContainer[typePathOffset + 2 * index + 2];\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.TypePath",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.TypePath#getStepArgument(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.TypePath#fromString(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Converts a type path in string form, in the format used by {@link #toString()}, into a TypePath\r\n * object.\r\n *\r\n * @param typePath a type path in string form, in the format used by {@link #toString()}. May be\r\n *     {@literal null} or empty.\r\n * @return the corresponding TypePath object, or {@literal null} if the path is empty.\r\n */\r\npublic static TypePath fromString(final String typePath) {\r\n    if (typePath == null || typePath.length() == 0) {\r\n        return null;\r\n    }\r\n    int typePathLength = typePath.length();\r\n    ByteVector output = new ByteVector(typePathLength);\r\n    output.putByte(0);\r\n    int typePathIndex = 0;\r\n    while (typePathIndex < typePathLength) {\r\n        char c = typePath.charAt(typePathIndex++);\r\n        if (c == '[') {\r\n            output.put11(ARRAY_ELEMENT, 0);\r\n        } else if (c == '.') {\r\n            output.put11(INNER_TYPE, 0);\r\n        } else if (c == '*') {\r\n            output.put11(WILDCARD_BOUND, 0);\r\n        } else if (c >= '0' && c <= '9') {\r\n            int typeArg = c - '0';\r\n            while (typePathIndex < typePathLength) {\r\n                c = typePath.charAt(typePathIndex++);\r\n                if (c >= '0' && c <= '9') {\r\n                    typeArg = typeArg * 10 + c - '0';\r\n                } else if (c == ';') {\r\n                    break;\r\n                } else {\r\n                    throw new IllegalArgumentException();\r\n                }\r\n            }\r\n            output.put11(TYPE_ARGUMENT, typeArg);\r\n        } else {\r\n            throw new IllegalArgumentException();\r\n        }\r\n    }\r\n    output.data[0] = (byte) (output.length / 2);\r\n    return new TypePath(output.data, 0);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.TypePath",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.TypePath#fromString(String)",
    "tailType": "method"
  }
]