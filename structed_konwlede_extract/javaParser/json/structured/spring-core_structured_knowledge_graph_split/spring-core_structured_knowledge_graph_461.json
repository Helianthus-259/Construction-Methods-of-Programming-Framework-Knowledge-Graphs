[
  {
    "head": "org.springframework.core.testfixture.codec.AbstractEncoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.codec.AbstractEncoderTests#expectBytes(byte[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractEncoderTests#expectString(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a result consumer that expects the given string, using the UTF-8 encoding.\r\n * @param expected the expected string\r\n * @return a consumer that expects the given data buffer to be equal to {@code expected}\r\n */\r\nprotected Consumer<DataBuffer> expectString(String expected) {\r\n    return dataBuffer -> {\r\n        String actual = dataBuffer.toString(UTF_8);\r\n        release(dataBuffer);\r\n        assertThat(actual).isEqualToNormalizingNewlines(expected);\r\n    };\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractEncoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.codec.AbstractEncoderTests#expectString(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractEncoderTests#encoder()",
    "headType": "method",
    "relation": "provide",
    "tail": "@SuppressWarnings(\"unchecked\")\r\nprivate <T> Encoder<T> encoder() {\r\n    return (Encoder<T>) this.encoder;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractEncoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.codec.AbstractEncoderTests#encoder()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractEncoderTests#encoder()",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractEncoderTests",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractLeakCheckingTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.testfixture.codec",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.testfixture.codec.InputException",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.testfixture.codec.InputException",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.testfixture.codec.InputException",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.testfixture.codec;\n\nimport java.util.Map;\nimport java.util.function.Consumer;\n\nimport org.jspecify.annotations.Nullable;\nimport org.junit.jupiter.api.Test;\nimport org.reactivestreams.Publisher;\nimport reactor.core.publisher.Flux;\nimport reactor.test.StepVerifier;\n\nimport org.springframework.core.ResolvableType;\nimport org.springframework.core.codec.Encoder;\nimport org.springframework.core.io.buffer.DataBuffer;\nimport org.springframework.core.io.buffer.DataBufferUtils;\nimport org.springframework.core.testfixture.io.buffer.AbstractLeakCheckingTests;\nimport org.springframework.util.Assert;\nimport org.springframework.util.MimeType;\n\nimport static java.nio.charset.StandardCharsets.UTF_8;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.springframework.core.io.buffer.DataBufferUtils.release;\n\n/**\n * Abstract base class for {@link Encoder} unit tests. Subclasses need to implement\n * {@link #canEncode()} and {@link #encode()}, possibly using the wide variety of\n * helper methods like {@link #testEncodeAll}.\n *\n * @author Arjen Poutsma\n * @since 5.1.3\n */\npublic abstract class AbstractEncoderTests<E extends Encoder<?>> extends AbstractLeakCheckingTests {\n\n\t/**\n\t * The encoder to test.\n\t */\n\tprotected final E encoder;\n\n\n\t/**\n\t * Construct a new {@code AbstractEncoderTestCase} for the given parameters.\n\t * @param encoder the encoder\n\t */\n\tprotected AbstractEncoderTests(E encoder) {\n\t\tAssert.notNull(encoder, \"Encoder must not be null\");\n\t\tthis.encoder = encoder;\n\t}\n\n\n\t/**\n\t * Subclasses should implement this method to test {@link Encoder#canEncode}.\n\t */\n\t@Test\n\tprotected abstract void canEncode() throws Exception;\n\n\t/**\n\t * Subclasses should implement this method to test {@link Encoder#encode}, possibly using\n\t * {@link #testEncodeAll} or other helper methods.\n\t */\n\t@Test\n\tprotected abstract void encode() throws Exception;\n\n\n\t/**\n\t * Helper method that tests for a variety of encoding scenarios. This method\n\t * invokes:\n\t * <ul>\n\t *     <li>{@link #testEncode(Publisher, ResolvableType, MimeType, Map, Consumer)}</li>\n\t *     <li>{@link #testEncodeError(Publisher, ResolvableType, MimeType, Map)}</li>\n\t *     <li>{@link #testEncodeCancel(Publisher, ResolvableType, MimeType, Map)}</li>\n\t *     <li>{@link #testEncodeEmpty(ResolvableType, MimeType, Map)}</li>\n\t * </ul>\n\t *\n\t * @param input the input to be provided to the encoder\n\t * @param inputClass the input class\n\t * @param stepConsumer a consumer to {@linkplain StepVerifier verify} the output\n\t * @param <T> the output type\n\t */\n\tprotected <T> void testEncodeAll(Publisher<? extends T> input, Class<? extends T> inputClass,\n\t\t\tConsumer<StepVerifier.FirstStep<DataBuffer>> stepConsumer) {\n\n\t\ttestEncodeAll(input, ResolvableType.forClass(inputClass), null, null, stepConsumer);\n\t}\n\n\t/**\n\t * Helper method that tests for a variety of decoding scenarios. This method\n\t * invokes:\n\t * <ul>\n\t *     <li>{@link #testEncode(Publisher, ResolvableType, MimeType, Map, Consumer)}</li>\n\t *     <li>{@link #testEncodeError(Publisher, ResolvableType, MimeType, Map)}</li>\n\t *     <li>{@link #testEncodeCancel(Publisher, ResolvableType, MimeType, Map)}</li>\n\t *     <li>{@link #testEncodeEmpty(ResolvableType, MimeType, Map)}</li>\n\t * </ul>\n\t *\n\t * @param <T> the output type\n\t * @param input the input to be provided to the encoder\n\t * @param inputType the input type\n\t * @param mimeType the mime type to use for decoding. May be {@code null}.\n\t * @param hints the hints used for decoding. May be {@code null}.\n\t * @param stepConsumer a consumer to {@linkplain StepVerifier verify} the output\n\t */\n\tprotected <T> void testEncodeAll(Publisher<? extends T> input, ResolvableType inputType,\n\t\t\t@Nullable MimeType mimeType, @Nullable Map<String, Object> hints,\n\t\t\tConsumer<StepVerifier.FirstStep<DataBuffer>> stepConsumer) {\n\n\t\ttestEncode(input, inputType, mimeType, hints, stepConsumer);\n\t\ttestEncodeError(input, inputType, mimeType, hints);\n\t\ttestEncodeCancel(input, inputType, mimeType, hints);\n\t\ttestEncodeEmpty(inputType, mimeType, hints);\n\t}\n\n\t/**\n\t * Test a standard {@link Encoder#encode encode} scenario.\n\t *\n\t * @param input the input to be provided to the encoder\n\t * @param inputClass the input class\n\t * @param stepConsumer a consumer to {@linkplain StepVerifier verify} the output\n\t * @param <T> the output type\n\t */\n\tprotected <T> void testEncode(Publisher<? extends T> input, Class<? extends T> inputClass,\n\t\t\tConsumer<StepVerifier.FirstStep<DataBuffer>> stepConsumer) {\n\n\t\ttestEncode(input, ResolvableType.forClass(inputClass), null, null, stepConsumer);\n\t}\n\n\t/**\n\t * Test a standard {@link Encoder#encode encode} scenario.\n\t *\n\t * @param <T> the output type\n\t * @param input the input to be provided to the encoder\n\t * @param inputType the input type\n\t * @param mimeType the mime type to use for decoding. May be {@code null}.\n\t * @param hints the hints used for decoding. May be {@code null}.\n\t * @param stepConsumer a consumer to {@linkplain StepVerifier verify} the output\n\t */\n\tprotected <T> void testEncode(Publisher<? extends T> input, ResolvableType inputType,\n\t\t\t@Nullable MimeType mimeType, @Nullable Map<String, Object> hints,\n\t\t\tConsumer<StepVerifier.FirstStep<DataBuffer>> stepConsumer) {\n\n\t\tFlux<DataBuffer> result = encoder().encode(input, this.bufferFactory, inputType, mimeType, hints);\n\t\tStepVerifier.FirstStep<DataBuffer> step = StepVerifier.create(result);\n\t\tstepConsumer.accept(step);\n\t}\n\n\t/**\n\t * Test a {@link Encoder#encode encode} scenario where the input stream contains an error.\n\t * This test method will feed the first element of the {@code input} stream to the encoder,\n\t * followed by an {@link InputException}.\n\t * The result is expected to contain one \"normal\" element, followed by the error.\n\t *\n\t * @param input the input to be provided to the encoder\n\t * @param inputType the input type\n\t * @param mimeType the mime type to use for decoding. May be {@code null}.\n\t * @param hints the hints used for decoding. May be {@code null}.\n\t * @see InputException\n\t */\n\tprotected void testEncodeError(Publisher<?> input, ResolvableType inputType,\n\t\t\t@Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\n\n\t\tinput = Flux.concat(\n\t\t\t\tFlux.from(input).take(1),\n\t\t\t\tFlux.error(new InputException()));\n\n\t\tFlux<DataBuffer> result = encoder().encode(input, this.bufferFactory, inputType,\n\t\t\t\tmimeType, hints);\n\n\t\tStepVerifier.create(result)\n\t\t\t\t.consumeNextWith(DataBufferUtils::release)\n\t\t\t\t.expectError(InputException.class)\n\t\t\t\t.verify();\n\t}\n\n\t/**\n\t * Test a {@link Encoder#encode encode} scenario where the input stream is canceled.\n\t * This test method will feed the first element of the {@code input} stream to the decoder,\n\t * followed by a cancel signal.\n\t * The result is expected to contain one \"normal\" element.\n\t *\n\t * @param input the input to be provided to the encoder\n\t * @param inputType the input type\n\t * @param mimeType the mime type to use for decoding. May be {@code null}.\n\t * @param hints the hints used for decoding. May be {@code null}.\n\t */\n\tprotected void testEncodeCancel(Publisher<?> input, ResolvableType inputType,\n\t\t\t@Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\n\n\t\tFlux<DataBuffer> result = encoder().encode(input, this.bufferFactory, inputType, mimeType,\n\t\t\t\thints);\n\n\t\tStepVerifier.create(result)\n\t\t\t\t.consumeNextWith(DataBufferUtils::release)\n\t\t\t\t.thenCancel()\n\t\t\t\t.verify();\n\t}\n\n\t/**\n\t * Test a {@link Encoder#encode encode} scenario where the input stream is empty.\n\t * The output is expected to be empty as well.\n\t *\n\t * @param inputType the input type\n\t * @param mimeType the mime type to use for decoding. May be {@code null}.\n\t * @param hints the hints used for decoding. May be {@code null}.\n\t */\n\tprotected void testEncodeEmpty(ResolvableType inputType, @Nullable MimeType mimeType,\n\t\t\t@Nullable Map<String, Object> hints) {\n\n\t\tFlux<?> input = Flux.empty();\n\t\tFlux<DataBuffer> result = encoder().encode(input, this.bufferFactory, inputType,\n\t\t\t\tmimeType, hints);\n\n\t\tStepVerifier.create(result)\n\t\t\t\t.verifyComplete();\n\t}\n\n\t/**\n\t * Create a result consumer that expects the given bytes.\n\t * @param expected the expected bytes\n\t * @return a consumer that expects the given data buffer to be equal to {@code expected}\n\t */\n\tprotected final Consumer<DataBuffer> expectBytes(byte[] expected) {\n\t\treturn dataBuffer -> {\n\t\t\tbyte[] resultBytes = new byte[dataBuffer.readableByteCount()];\n\t\t\tdataBuffer.read(resultBytes);\n\t\t\trelease(dataBuffer);\n\t\t\tassertThat(resultBytes).isEqualTo(expected);\n\t\t};\n\t}\n\n\t/**\n\t * Create a result consumer that expects the given string, using the UTF-8 encoding.\n\t * @param expected the expected string\n\t * @return a consumer that expects the given data buffer to be equal to {@code expected}\n\t */\n\tprotected Consumer<DataBuffer> expectString(String expected) {\n\t\treturn dataBuffer -> {\n\t\t\tString actual = dataBuffer.toString(UTF_8);\n\t\t\trelease(dataBuffer);\n\t\t\tassertThat(actual).isEqualToNormalizingNewlines(expected);\n\t\t};\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tprivate <T> Encoder<T> encoder() {\n\t\treturn (Encoder<T>) this.encoder;\n\t}\n\n\t/**\n\t * Exception used in {@link #testEncodeError}.\n\t */\n\t@SuppressWarnings(\"serial\")\n\tpublic static class InputException extends RuntimeException {\n\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.testfixture.codec.InputException",
    "headType": "class",
    "relation": "extend",
    "tail": "RuntimeException",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.asm",
    "tailType": "package"
  },
  {
    "head": "org.springframework.asm",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.asm.ModuleWriter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.asm.ModuleWriter",
    "headType": "class",
    "relation": "provide",
    "tail": "// ASM: a very small and fast Java bytecode manipulation framework\n// Copyright (c) 2000-2011 INRIA, France Telecom\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions\n// are met:\n// 1. Redistributions of source code must retain the above copyright\n//    notice, this list of conditions and the following disclaimer.\n// 2. Redistributions in binary form must reproduce the above copyright\n//    notice, this list of conditions and the following disclaimer in the\n//    documentation and/or other materials provided with the distribution.\n// 3. Neither the name of the copyright holders nor the names of its\n//    contributors may be used to endorse or promote products derived from\n//    this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n// THE POSSIBILITY OF SUCH DAMAGE.\npackage org.springframework.asm;\n\n/**\n * A {@link ModuleVisitor} that generates the corresponding Module, ModulePackages and\n * ModuleMainClass attributes, as defined in the Java Virtual Machine Specification (JVMS).\n *\n * @see <a href=\"https://docs.oracle.com/javase/specs/jvms/se9/html/jvms-4.html#jvms-4.7.25\">JVMS\n *     4.7.25</a>\n * @see <a href=\"https://docs.oracle.com/javase/specs/jvms/se9/html/jvms-4.html#jvms-4.7.26\">JVMS\n *     4.7.26</a>\n * @see <a href=\"https://docs.oracle.com/javase/specs/jvms/se9/html/jvms-4.html#jvms-4.7.27\">JVMS\n *     4.7.27</a>\n * @author Remi Forax\n * @author Eric Bruneton\n */\nfinal class ModuleWriter extends ModuleVisitor {\n\n  /** Where the constants used in this AnnotationWriter must be stored. */\n  private final SymbolTable symbolTable;\n\n  /** The module_name_index field of the JVMS Module attribute. */\n  private final int moduleNameIndex;\n\n  /** The module_flags field of the JVMS Module attribute. */\n  private final int moduleFlags;\n\n  /** The module_version_index field of the JVMS Module attribute. */\n  private final int moduleVersionIndex;\n\n  /** The requires_count field of the JVMS Module attribute. */\n  private int requiresCount;\n\n  /** The binary content of the 'requires' array of the JVMS Module attribute. */\n  private final ByteVector requires;\n\n  /** The exports_count field of the JVMS Module attribute. */\n  private int exportsCount;\n\n  /** The binary content of the 'exports' array of the JVMS Module attribute. */\n  private final ByteVector exports;\n\n  /** The opens_count field of the JVMS Module attribute. */\n  private int opensCount;\n\n  /** The binary content of the 'opens' array of the JVMS Module attribute. */\n  private final ByteVector opens;\n\n  /** The uses_count field of the JVMS Module attribute. */\n  private int usesCount;\n\n  /** The binary content of the 'uses_index' array of the JVMS Module attribute. */\n  private final ByteVector usesIndex;\n\n  /** The provides_count field of the JVMS Module attribute. */\n  private int providesCount;\n\n  /** The binary content of the 'provides' array of the JVMS Module attribute. */\n  private final ByteVector provides;\n\n  /** The provides_count field of the JVMS ModulePackages attribute. */\n  private int packageCount;\n\n  /** The binary content of the 'package_index' array of the JVMS ModulePackages attribute. */\n  private final ByteVector packageIndex;\n\n  /** The main_class_index field of the JVMS ModuleMainClass attribute, or 0. */\n  private int mainClassIndex;\n\n  ModuleWriter(final SymbolTable symbolTable, final int name, final int access, final int version) {\n    super(/* latest api = */ Opcodes.ASM9);\n    this.symbolTable = symbolTable;\n    this.moduleNameIndex = name;\n    this.moduleFlags = access;\n    this.moduleVersionIndex = version;\n    this.requires = new ByteVector();\n    this.exports = new ByteVector();\n    this.opens = new ByteVector();\n    this.usesIndex = new ByteVector();\n    this.provides = new ByteVector();\n    this.packageIndex = new ByteVector();\n  }\n\n  @Override\n  public void visitMainClass(final String mainClass) {\n    this.mainClassIndex = symbolTable.addConstantClass(mainClass).index;\n  }\n\n  @Override\n  public void visitPackage(final String packaze) {\n    packageIndex.putShort(symbolTable.addConstantPackage(packaze).index);\n    packageCount++;\n  }\n\n  @Override\n  public void visitRequire(final String module, final int access, final String version) {\n    requires\n        .putShort(symbolTable.addConstantModule(module).index)\n        .putShort(access)\n        .putShort(version == null ? 0 : symbolTable.addConstantUtf8(version));\n    requiresCount++;\n  }\n\n  @Override\n  public void visitExport(final String packaze, final int access, final String... modules) {\n    exports.putShort(symbolTable.addConstantPackage(packaze).index).putShort(access);\n    if (modules == null) {\n      exports.putShort(0);\n    } else {\n      exports.putShort(modules.length);\n      for (String module : modules) {\n        exports.putShort(symbolTable.addConstantModule(module).index);\n      }\n    }\n    exportsCount++;\n  }\n\n  @Override\n  public void visitOpen(final String packaze, final int access, final String... modules) {\n    opens.putShort(symbolTable.addConstantPackage(packaze).index).putShort(access);\n    if (modules == null) {\n      opens.putShort(0);\n    } else {\n      opens.putShort(modules.length);\n      for (String module : modules) {\n        opens.putShort(symbolTable.addConstantModule(module).index);\n      }\n    }\n    opensCount++;\n  }\n\n  @Override\n  public void visitUse(final String service) {\n    usesIndex.putShort(symbolTable.addConstantClass(service).index);\n    usesCount++;\n  }\n\n  @Override\n  public void visitProvide(final String service, final String... providers) {\n    provides.putShort(symbolTable.addConstantClass(service).index);\n    provides.putShort(providers.length);\n    for (String provider : providers) {\n      provides.putShort(symbolTable.addConstantClass(provider).index);\n    }\n    providesCount++;\n  }\n\n  @Override\n  public void visitEnd() {\n    // Nothing to do.\n  }\n\n  /**\n   * Returns the number of Module, ModulePackages and ModuleMainClass attributes generated by this\n   * ModuleWriter.\n   *\n   * @return the number of Module, ModulePackages and ModuleMainClass attributes (between 1 and 3).\n   */\n  int getAttributeCount() {\n    return 1 + (packageCount > 0 ? 1 : 0) + (mainClassIndex > 0 ? 1 : 0);\n  }\n\n  /**\n   * Returns the size of the Module, ModulePackages and ModuleMainClass attributes generated by this\n   * ModuleWriter. Also add the names of these attributes in the constant pool.\n   *\n   * @return the size in bytes of the Module, ModulePackages and ModuleMainClass attributes.\n   */\n  int computeAttributesSize() {\n    symbolTable.addConstantUtf8(Constants.MODULE);\n    // 6 attribute header bytes, 6 bytes for name, flags and version, and 5 * 2 bytes for counts.\n    int size =\n        22 + requires.length + exports.length + opens.length + usesIndex.length + provides.length;\n    if (packageCount > 0) {\n      symbolTable.addConstantUtf8(Constants.MODULE_PACKAGES);\n      // 6 attribute header bytes, and 2 bytes for package_count.\n      size += 8 + packageIndex.length;\n    }\n    if (mainClassIndex > 0) {\n      symbolTable.addConstantUtf8(Constants.MODULE_MAIN_CLASS);\n      // 6 attribute header bytes, and 2 bytes for main_class_index.\n      size += 8;\n    }\n    return size;\n  }\n\n  /**\n   * Puts the Module, ModulePackages and ModuleMainClass attributes generated by this ModuleWriter\n   * in the given ByteVector.\n   *\n   * @param output where the attributes must be put.\n   */\n  void putAttributes(final ByteVector output) {\n    // 6 bytes for name, flags and version, and 5 * 2 bytes for counts.\n    int moduleAttributeLength =\n        16 + requires.length + exports.length + opens.length + usesIndex.length + provides.length;\n    output\n        .putShort(symbolTable.addConstantUtf8(Constants.MODULE))\n        .putInt(moduleAttributeLength)\n        .putShort(moduleNameIndex)\n        .putShort(moduleFlags)\n        .putShort(moduleVersionIndex)\n        .putShort(requiresCount)\n        .putByteArray(requires.data, 0, requires.length)\n        .putShort(exportsCount)\n        .putByteArray(exports.data, 0, exports.length)\n        .putShort(opensCount)\n        .putByteArray(opens.data, 0, opens.length)\n        .putShort(usesCount)\n        .putByteArray(usesIndex.data, 0, usesIndex.length)\n        .putShort(providesCount)\n        .putByteArray(provides.data, 0, provides.length);\n    if (packageCount > 0) {\n      output\n          .putShort(symbolTable.addConstantUtf8(Constants.MODULE_PACKAGES))\n          .putInt(2 + packageIndex.length)\n          .putShort(packageCount)\n          .putByteArray(packageIndex.data, 0, packageIndex.length);\n    }\n    if (mainClassIndex > 0) {\n      output\n          .putShort(symbolTable.addConstantUtf8(Constants.MODULE_MAIN_CLASS))\n          .putInt(2)\n          .putShort(mainClassIndex);\n    }\n  }\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.asm.ModuleWriter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.ModuleWriter#symbolTable",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.ModuleWriter#symbolTable",
    "headType": "field",
    "relation": "haveType",
    "tail": "SymbolTable",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.ModuleWriter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.ModuleWriter#moduleNameIndex",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.ModuleWriter#moduleNameIndex",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.ModuleWriter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.ModuleWriter#moduleFlags",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.ModuleWriter#moduleFlags",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  }
]