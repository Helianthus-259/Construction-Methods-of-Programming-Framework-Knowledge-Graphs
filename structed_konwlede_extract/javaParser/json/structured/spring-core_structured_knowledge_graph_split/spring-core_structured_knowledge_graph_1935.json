[
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#getAnnotationOnMethodThatIsMetaMetaAnnotated()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#assertAnnotationFoundOnMethod(Class<? extends Annotation>,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void assertAnnotationFoundOnMethod(Class<? extends Annotation> annotationType, String methodName) throws Exception {\r\n    TypeDescriptor typeDescriptor = new TypeDescriptor(new MethodParameter(getClass().getMethod(methodName), -1));\r\n    assertThat(typeDescriptor.getAnnotation(annotationType)).as(\"Should have found @\" + annotationType.getSimpleName() + \" on \" + methodName + \".\").isNotNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#assertAnnotationFoundOnMethod(Class<? extends Annotation>,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#fieldScalar()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid fieldScalar() throws Exception {\r\n    TypeDescriptor typeDescriptor = new TypeDescriptor(getClass().getField(\"fieldScalar\"));\r\n    assertThat(typeDescriptor.isPrimitive()).isFalse();\r\n    assertThat(typeDescriptor.isArray()).isFalse();\r\n    assertThat(typeDescriptor.isCollection()).isFalse();\r\n    assertThat(typeDescriptor.isMap()).isFalse();\r\n    assertThat(typeDescriptor.getType()).isEqualTo(Integer.class);\r\n    assertThat(typeDescriptor.getObjectType()).isEqualTo(Integer.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#fieldScalar()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#fieldScalar()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#fieldList()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid fieldList() throws Exception {\r\n    TypeDescriptor typeDescriptor = new TypeDescriptor(TypeDescriptorTests.class.getDeclaredField(\"listOfString\"));\r\n    assertThat(typeDescriptor.isArray()).isFalse();\r\n    assertThat(typeDescriptor.getType()).isEqualTo(List.class);\r\n    assertThat(typeDescriptor.getElementTypeDescriptor().getType()).isEqualTo(String.class);\r\n    assertThat(typeDescriptor.toString()).isEqualTo(\"java.util.List<java.lang.String>\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#fieldList()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#fieldList()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#fieldListOfListOfString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid fieldListOfListOfString() throws Exception {\r\n    TypeDescriptor typeDescriptor = new TypeDescriptor(TypeDescriptorTests.class.getDeclaredField(\"listOfListOfString\"));\r\n    assertThat(typeDescriptor.isArray()).isFalse();\r\n    assertThat(typeDescriptor.getType()).isEqualTo(List.class);\r\n    assertThat(typeDescriptor.getElementTypeDescriptor().getType()).isEqualTo(List.class);\r\n    assertThat(typeDescriptor.getElementTypeDescriptor().getElementTypeDescriptor().getType()).isEqualTo(String.class);\r\n    assertThat(typeDescriptor.toString()).isEqualTo(\"java.util.List<java.util.List<java.lang.String>>\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#fieldListOfListOfString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#fieldListOfListOfString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#fieldListOfListUnknown()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid fieldListOfListUnknown() throws Exception {\r\n    TypeDescriptor typeDescriptor = new TypeDescriptor(TypeDescriptorTests.class.getDeclaredField(\"listOfListOfUnknown\"));\r\n    assertThat(typeDescriptor.isArray()).isFalse();\r\n    assertThat(typeDescriptor.getType()).isEqualTo(List.class);\r\n    assertThat(typeDescriptor.getElementTypeDescriptor().getType()).isEqualTo(List.class);\r\n    assertThat(typeDescriptor.getElementTypeDescriptor().getElementTypeDescriptor()).isNull();\r\n    assertThat(typeDescriptor.toString()).isEqualTo(\"java.util.List<java.util.List<?>>\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#fieldListOfListUnknown()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#fieldListOfListUnknown()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#fieldArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid fieldArray() throws Exception {\r\n    TypeDescriptor typeDescriptor = new TypeDescriptor(TypeDescriptorTests.class.getDeclaredField(\"intArray\"));\r\n    assertThat(typeDescriptor.isArray()).isTrue();\r\n    assertThat(typeDescriptor.getElementTypeDescriptor().getType()).isEqualTo(int.class);\r\n    assertThat(typeDescriptor.toString()).isEqualTo(\"int[]\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#fieldArray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#fieldArray()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#fieldComplexTypeDescriptor()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid fieldComplexTypeDescriptor() throws Exception {\r\n    TypeDescriptor typeDescriptor = new TypeDescriptor(TypeDescriptorTests.class.getDeclaredField(\"arrayOfListOfString\"));\r\n    assertThat(typeDescriptor.isArray()).isTrue();\r\n    assertThat(typeDescriptor.getElementTypeDescriptor().getType()).isEqualTo(List.class);\r\n    assertThat(typeDescriptor.getElementTypeDescriptor().getElementTypeDescriptor().getType()).isEqualTo(String.class);\r\n    assertThat(typeDescriptor.toString()).isEqualTo(\"java.util.List<java.lang.String>[]\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#fieldComplexTypeDescriptor()",
    "tailType": "method"
  }
]