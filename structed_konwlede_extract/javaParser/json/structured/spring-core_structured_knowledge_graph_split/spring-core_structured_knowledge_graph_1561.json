[
  {
    "head": "org.springframework.aot.hint.ProxyHintsTests#toTypeReferences(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static TypeReference[] toTypeReferences(String... proxiedInterfaces) {\r\n    return Arrays.stream(proxiedInterfaces).map(TypeReference::of).toArray(TypeReference[]::new);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ProxyHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ProxyHintsTests#toTypeReferences(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.SealedInterface",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.hint.SealedInterface",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint;\n\nimport java.util.Arrays;\nimport java.util.function.Consumer;\nimport java.util.function.Function;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n\n/**\n * Tests for {@link ProxyHints}.\n *\n * @author Stephane Nicoll\n * @author Sam Brannen\n */\nclass ProxyHintsTests {\n\n\tprivate final ProxyHints proxyHints = new ProxyHints();\n\n\n\t@Test\n\tvoid registerJdkProxyWithSealedInterface() {\n\t\tassertThatIllegalArgumentException()\n\t\t\t\t.isThrownBy(() -> this.proxyHints.registerJdkProxy(SealedInterface.class))\n\t\t\t\t.withMessageContaining(SealedInterface.class.getName());\n\t}\n\n\t@Test\n\tvoid registerJdkProxyWithConcreteClass() {\n\t\tassertThatIllegalArgumentException()\n\t\t\t\t.isThrownBy(() -> this.proxyHints.registerJdkProxy(String.class))\n\t\t\t\t.withMessageContaining(String.class.getName());\n\t}\n\n\t@Test\n\tvoid registerJdkProxyWithInterface() {\n\t\tthis.proxyHints.registerJdkProxy(Function.class);\n\t\tassertThat(this.proxyHints.jdkProxyHints()).singleElement().satisfies(proxiedInterfaces(Function.class));\n\t}\n\n\t@Test\n\tvoid registerJdkProxyWithTypeReferences() {\n\t\tthis.proxyHints.registerJdkProxy(TypeReference.of(Function.class), TypeReference.of(\"com.example.Advised\"));\n\t\tassertThat(this.proxyHints.jdkProxyHints()).singleElement()\n\t\t\t\t.satisfies(proxiedInterfaces(Function.class.getName(), \"com.example.Advised\"));\n\t}\n\n\t@Test\n\tvoid registerJdkProxyWithConsumer() {\n\t\tthis.proxyHints.registerJdkProxy(springProxy(\"com.example.Test\"));\n\t\tassertThat(this.proxyHints.jdkProxyHints()).singleElement().satisfies(proxiedInterfaces(\n\t\t\t\t\"com.example.Test\",\n\t\t\t\t\"org.springframework.aop.SpringProxy\",\n\t\t\t\t\"org.springframework.aop.framework.Advised\",\n\t\t\t\t\"org.springframework.core.DecoratingProxy\"));\n\t}\n\n\t@Test\n\tvoid registerJdkProxyTwiceExposesOneHint() {\n\t\tthis.proxyHints.registerJdkProxy(Function.class);\n\t\tthis.proxyHints.registerJdkProxy(TypeReference.of(Function.class.getName()));\n\t\tassertThat(this.proxyHints.jdkProxyHints()).singleElement().satisfies(proxiedInterfaces(Function.class));\n\t}\n\n\n\tprivate static Consumer<JdkProxyHint.Builder> springProxy(String proxiedInterface) {\n\t\treturn builder -> builder.proxiedInterfaces(toTypeReferences(\n\t\t\t\tproxiedInterface,\n\t\t\t\t\"org.springframework.aop.SpringProxy\",\n\t\t\t\t\"org.springframework.aop.framework.Advised\",\n\t\t\t\t\"org.springframework.core.DecoratingProxy\"));\n\t}\n\n\tprivate static Consumer<JdkProxyHint> proxiedInterfaces(String... proxiedInterfaces) {\n\t\treturn jdkProxyHint -> assertThat(jdkProxyHint.getProxiedInterfaces())\n\t\t\t\t.containsExactly(toTypeReferences(proxiedInterfaces));\n\t}\n\n\tprivate static Consumer<JdkProxyHint> proxiedInterfaces(Class<?>... proxiedInterfaces) {\n\t\treturn jdkProxyHint -> assertThat(jdkProxyHint.getProxiedInterfaces())\n\t\t\t\t.containsExactlyElementsOf(TypeReference.listOf(proxiedInterfaces));\n\t}\n\n\tprivate static TypeReference[] toTypeReferences(String... proxiedInterfaces) {\n\t\treturn Arrays.stream(proxiedInterfaces).map(TypeReference::of).toArray(TypeReference[]::new);\n\t}\n\n\n\tsealed interface SealedInterface {\n\t}\n\n\t@SuppressWarnings(\"unused\")\n\tstatic final class SealedClass implements SealedInterface {\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.hint",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.SealedClass",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.hint.SealedClass",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.SealedClass",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint;\n\nimport java.util.Arrays;\nimport java.util.function.Consumer;\nimport java.util.function.Function;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n\n/**\n * Tests for {@link ProxyHints}.\n *\n * @author Stephane Nicoll\n * @author Sam Brannen\n */\nclass ProxyHintsTests {\n\n\tprivate final ProxyHints proxyHints = new ProxyHints();\n\n\n\t@Test\n\tvoid registerJdkProxyWithSealedInterface() {\n\t\tassertThatIllegalArgumentException()\n\t\t\t\t.isThrownBy(() -> this.proxyHints.registerJdkProxy(SealedInterface.class))\n\t\t\t\t.withMessageContaining(SealedInterface.class.getName());\n\t}\n\n\t@Test\n\tvoid registerJdkProxyWithConcreteClass() {\n\t\tassertThatIllegalArgumentException()\n\t\t\t\t.isThrownBy(() -> this.proxyHints.registerJdkProxy(String.class))\n\t\t\t\t.withMessageContaining(String.class.getName());\n\t}\n\n\t@Test\n\tvoid registerJdkProxyWithInterface() {\n\t\tthis.proxyHints.registerJdkProxy(Function.class);\n\t\tassertThat(this.proxyHints.jdkProxyHints()).singleElement().satisfies(proxiedInterfaces(Function.class));\n\t}\n\n\t@Test\n\tvoid registerJdkProxyWithTypeReferences() {\n\t\tthis.proxyHints.registerJdkProxy(TypeReference.of(Function.class), TypeReference.of(\"com.example.Advised\"));\n\t\tassertThat(this.proxyHints.jdkProxyHints()).singleElement()\n\t\t\t\t.satisfies(proxiedInterfaces(Function.class.getName(), \"com.example.Advised\"));\n\t}\n\n\t@Test\n\tvoid registerJdkProxyWithConsumer() {\n\t\tthis.proxyHints.registerJdkProxy(springProxy(\"com.example.Test\"));\n\t\tassertThat(this.proxyHints.jdkProxyHints()).singleElement().satisfies(proxiedInterfaces(\n\t\t\t\t\"com.example.Test\",\n\t\t\t\t\"org.springframework.aop.SpringProxy\",\n\t\t\t\t\"org.springframework.aop.framework.Advised\",\n\t\t\t\t\"org.springframework.core.DecoratingProxy\"));\n\t}\n\n\t@Test\n\tvoid registerJdkProxyTwiceExposesOneHint() {\n\t\tthis.proxyHints.registerJdkProxy(Function.class);\n\t\tthis.proxyHints.registerJdkProxy(TypeReference.of(Function.class.getName()));\n\t\tassertThat(this.proxyHints.jdkProxyHints()).singleElement().satisfies(proxiedInterfaces(Function.class));\n\t}\n\n\n\tprivate static Consumer<JdkProxyHint.Builder> springProxy(String proxiedInterface) {\n\t\treturn builder -> builder.proxiedInterfaces(toTypeReferences(\n\t\t\t\tproxiedInterface,\n\t\t\t\t\"org.springframework.aop.SpringProxy\",\n\t\t\t\t\"org.springframework.aop.framework.Advised\",\n\t\t\t\t\"org.springframework.core.DecoratingProxy\"));\n\t}\n\n\tprivate static Consumer<JdkProxyHint> proxiedInterfaces(String... proxiedInterfaces) {\n\t\treturn jdkProxyHint -> assertThat(jdkProxyHint.getProxiedInterfaces())\n\t\t\t\t.containsExactly(toTypeReferences(proxiedInterfaces));\n\t}\n\n\tprivate static Consumer<JdkProxyHint> proxiedInterfaces(Class<?>... proxiedInterfaces) {\n\t\treturn jdkProxyHint -> assertThat(jdkProxyHint.getProxiedInterfaces())\n\t\t\t\t.containsExactlyElementsOf(TypeReference.listOf(proxiedInterfaces));\n\t}\n\n\tprivate static TypeReference[] toTypeReferences(String... proxiedInterfaces) {\n\t\treturn Arrays.stream(proxiedInterfaces).map(TypeReference::of).toArray(TypeReference[]::new);\n\t}\n\n\n\tsealed interface SealedInterface {\n\t}\n\n\t@SuppressWarnings(\"unused\")\n\tstatic final class SealedClass implements SealedInterface {\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.hint",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.hint",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.ReflectionHintsTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHintsTests",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHintsTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint;\n\nimport java.io.Serializable;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport java.util.function.Consumer;\n\nimport org.jspecify.annotations.Nullable;\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.util.ReflectionUtils;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.verifyNoInteractions;\n\n/**\n * Tests for {@link ReflectionHints}.\n *\n * @author Stephane Nicoll\n * @author Sebastien Deleuze\n */\n@SuppressWarnings(\"removal\")\nclass ReflectionHintsTests {\n\n\tprivate final ReflectionHints reflectionHints = new ReflectionHints();\n\n\t@Test\n\tvoid registerType() {\n\t\tthis.reflectionHints.registerType(TypeReference.of(String.class),\n\t\t\t\thint -> hint.withMembers(MemberCategory.DECLARED_FIELDS));\n\t\tassertThat(this.reflectionHints.typeHints()).singleElement().satisfies(\n\t\t\t\ttypeWithMemberCategories(String.class, MemberCategory.DECLARED_FIELDS));\n\t}\n\n\t@Test\n\tvoid registerTypeIfPresentRegistersExistingClass() {\n\t\tthis.reflectionHints.registerTypeIfPresent(null, String.class.getName(), MemberCategory.DECLARED_FIELDS);\n\t\tassertThat(this.reflectionHints.typeHints()).singleElement().satisfies(\n\t\t\t\ttypeWithMemberCategories(String.class, MemberCategory.DECLARED_FIELDS));\n\t}\n\n\t@Test\n\tvoid registerTypeIfPresentIgnoresMissingClass() {\n\t\tConsumer<TypeHint.Builder> hintBuilder = mock();\n\t\tthis.reflectionHints.registerTypeIfPresent(null, \"com.example.DoesNotExist\", hintBuilder);\n\t\tassertThat(this.reflectionHints.typeHints()).isEmpty();\n\t\tverifyNoInteractions(hintBuilder);\n\t}\n\n\t@Test\n\tvoid getTypeUsingType() {\n\t\tthis.reflectionHints.registerType(TypeReference.of(String.class),\n\t\t\t\thint -> hint.withMembers(MemberCategory.DECLARED_FIELDS));\n\t\tassertThat(this.reflectionHints.getTypeHint(String.class)).satisfies(\n\t\t\t\ttypeWithMemberCategories(String.class, MemberCategory.DECLARED_FIELDS));\n\t}\n\n\t@Test\n\tvoid getTypeUsingTypeReference() {\n\t\tthis.reflectionHints.registerType(String.class, MemberCategory.DECLARED_FIELDS);\n\t\tassertThat(this.reflectionHints.getTypeHint(TypeReference.of(String.class))).satisfies(\n\t\t\t\ttypeWithMemberCategories(String.class, MemberCategory.DECLARED_FIELDS));\n\t}\n\n\t@Test\n\tvoid getTypeForNonExistingType() {\n\t\tassertThat(this.reflectionHints.getTypeHint(String.class)).isNull();\n\t}\n\n\t@Test\n\tvoid registerTypeReusesBuilder() {\n\t\tthis.reflectionHints.registerType(TypeReference.of(String.class),\n\t\t\t\tMemberCategory.INVOKE_DECLARED_CONSTRUCTORS);\n\t\tField field = ReflectionUtils.findField(String.class, \"value\");\n\t\tassertThat(field).isNotNull();\n\t\tthis.reflectionHints.registerField(field);\n\t\tassertThat(this.reflectionHints.typeHints()).singleElement().satisfies(typeHint -> {\n\t\t\tassertThat(typeHint.getType().getCanonicalName()).isEqualTo(String.class.getCanonicalName());\n\t\t\tassertThat(typeHint.fields()).singleElement().satisfies(fieldHint -> assertThat(fieldHint.getName()).isEqualTo(\"value\"));\n\t\t\tassertThat(typeHint.getMemberCategories()).containsOnly(MemberCategory.INVOKE_DECLARED_CONSTRUCTORS);\n\t\t});\n\t}\n\n\t@Test\n\tvoid registerClass() {\n\t\tthis.reflectionHints.registerType(Integer.class, MemberCategory.INVOKE_PUBLIC_CONSTRUCTORS);\n\t\tassertThat(this.reflectionHints.typeHints()).singleElement().satisfies(\n\t\t\t\ttypeWithMemberCategories(Integer.class, MemberCategory.INVOKE_PUBLIC_CONSTRUCTORS));\n\t}\n\n\t@Test\n\tvoid registerClassWithCustomizer() {\n\t\tthis.reflectionHints.registerType(Integer.class,\n\t\t\t\ttypeHint -> typeHint.withMembers(MemberCategory.INVOKE_PUBLIC_CONSTRUCTORS));\n\t\tassertThat(this.reflectionHints.typeHints()).singleElement().satisfies(\n\t\t\t\ttypeWithMemberCategories(Integer.class, MemberCategory.INVOKE_PUBLIC_CONSTRUCTORS));\n\t}\n\n\t@Test\n\tvoid registerTypesAppliesTheSameHints() {\n\t\tthis.reflectionHints.registerTypes(TypeReference.listOf(Integer.class, String.class, Double.class),\n\t\t\t\tTypeHint.builtWith(MemberCategory.INVOKE_PUBLIC_CONSTRUCTORS));\n\t\tassertThat(this.reflectionHints.typeHints())\n\t\t\t\t.anySatisfy(typeWithMemberCategories(Integer.class, MemberCategory.INVOKE_PUBLIC_CONSTRUCTORS))\n\t\t\t\t.anySatisfy(typeWithMemberCategories(String.class, MemberCategory.INVOKE_PUBLIC_CONSTRUCTORS))\n\t\t\t\t.anySatisfy(typeWithMemberCategories(Double.class, MemberCategory.INVOKE_PUBLIC_CONSTRUCTORS))\n\t\t\t\t.hasSize(3);\n\t}\n\n\t@Test\n\tvoid registerField() {\n\t\tField field = ReflectionUtils.findField(TestType.class, \"field\");\n\t\tassertThat(field).isNotNull();\n\t\tthis.reflectionHints.registerField(field);\n\t\tassertTestTypeFieldHint(fieldHint ->\n\t\t\t\tassertThat(fieldHint.getName()).isEqualTo(\"field\"));\n\t}\n\n\t@Test\n\tvoid registerTypeIgnoresLambda() {\n\t\tRunnable lambda = () -> { };\n\t\tConsumer<TypeHint.Builder> hintBuilder = mock();\n\t\tthis.reflectionHints.registerType(lambda.getClass());\n\t\tthis.reflectionHints.registerType(lambda.getClass(), hintBuilder);\n\t\tassertThat(this.reflectionHints.typeHints()).isEmpty();\n\t\tverifyNoInteractions(hintBuilder);\n\t}\n\n\tprivate void assertTestTypeFieldHint(Consumer<FieldHint> fieldHint) {\n\t\tassertThat(this.reflectionHints.typeHints()).singleElement().satisfies(typeHint -> {\n\t\t\tassertThat(typeHint.getType().getCanonicalName()).isEqualTo(TestType.class.getCanonicalName());\n\t\t\tassertThat(typeHint.fields()).singleElement().satisfies(fieldHint);\n\t\t\tassertThat(typeHint.constructors()).isEmpty();\n\t\t\tassertThat(typeHint.methods()).isEmpty();\n\t\t\tassertThat(typeHint.getMemberCategories()).isEmpty();\n\t\t});\n\t}\n\n\t@Test\n\tvoid registerConstructor() {\n\t\tthis.reflectionHints.registerConstructor(\n\t\t\t\tTestType.class.getDeclaredConstructors()[0], ExecutableMode.INTROSPECT);\n\t\tassertTestTypeConstructorHint(constructorHint -> {\n\t\t\tassertThat(constructorHint.getParameterTypes()).isEmpty();\n\t\t\tassertThat(constructorHint.getMode()).isEqualTo(ExecutableMode.INTROSPECT);\n\t\t});\n\t}\n\n\t@Test\n\tvoid registerConstructorTwiceUpdatesExistingEntry() {\n\t\tConstructor<?> constructor = TestType.class.getDeclaredConstructors()[0];\n\t\tthis.reflectionHints.registerConstructor(constructor, ExecutableMode.INTROSPECT);\n\t\tthis.reflectionHints.registerConstructor(constructor, ExecutableMode.INVOKE);\n\t\tassertTestTypeConstructorHint(constructorHint -> {\n\t\t\tassertThat(constructorHint.getParameterTypes()).isEmpty();\n\t\t\tassertThat(constructorHint.getMode()).isEqualTo(ExecutableMode.INVOKE);\n\t\t});\n\t}\n\n\tprivate void assertTestTypeConstructorHint(Consumer<ExecutableHint> constructorHint) {\n\t\tassertThat(this.reflectionHints.typeHints()).singleElement().satisfies(typeHint -> {\n\t\t\tassertThat(typeHint.getMemberCategories()).isEmpty();\n\t\t\tassertThat(typeHint.getType().getCanonicalName()).isEqualTo(TestType.class.getCanonicalName());\n\t\t\tassertThat(typeHint.fields()).isEmpty();\n\t\t\tassertThat(typeHint.constructors()).singleElement().satisfies(constructorHint);\n\t\t\tassertThat(typeHint.methods()).isEmpty();\n\t\t\tassertThat(typeHint.getMemberCategories()).isEmpty();\n\t\t});\n\t}\n\n\t@Test\n\tvoid registerMethod() {\n\t\tMethod method = ReflectionUtils.findMethod(TestType.class, \"setName\", String.class);\n\t\tassertThat(method).isNotNull();\n\t\tthis.reflectionHints.registerMethod(method, ExecutableMode.INTROSPECT);\n\t\tassertTestTypeMethodHints(methodHint -> {\n\t\t\tassertThat(methodHint.getName()).isEqualTo(\"setName\");\n\t\t\tassertThat(methodHint.getParameterTypes()).containsOnly(TypeReference.of(String.class));\n\t\t\tassertThat(methodHint.getMode()).isEqualTo(ExecutableMode.INTROSPECT);\n\t\t});\n\t}\n\n\t@Test\n\tvoid registerMethodTwiceUpdatesExistingEntry() {\n\t\tMethod method = ReflectionUtils.findMethod(TestType.class, \"setName\", String.class);\n\t\tassertThat(method).isNotNull();\n\t\tthis.reflectionHints.registerMethod(method, ExecutableMode.INTROSPECT);\n\t\tthis.reflectionHints.registerMethod(method, ExecutableMode.INVOKE);\n\t\tassertTestTypeMethodHints(methodHint -> {\n\t\t\tassertThat(methodHint.getName()).isEqualTo(\"setName\");\n\t\t\tassertThat(methodHint.getParameterTypes()).containsOnly(TypeReference.of(String.class));\n\t\t\tassertThat(methodHint.getMode()).isEqualTo(ExecutableMode.INVOKE);\n\t\t});\n\t}\n\n\t@Test\n\tvoid registerOnInterfaces() {\n\t\tthis.reflectionHints.registerForInterfaces(ChildType.class,\n\t\t\t\ttypeHint -> typeHint.withMembers(MemberCategory.INTROSPECT_PUBLIC_METHODS));\n\t\tassertThat(this.reflectionHints.typeHints()).hasSize(2)\n\t\t\t\t.noneMatch(typeHint -> typeHint.getType().getCanonicalName().equals(Serializable.class.getCanonicalName()))\n\t\t\t\t.anyMatch(typeHint -> typeHint.getType().getCanonicalName().equals(SecondInterface.class.getCanonicalName())\n\t\t\t\t\t\t&& typeHint.getMemberCategories().contains(MemberCategory.INTROSPECT_PUBLIC_METHODS))\n\t\t\t\t.anyMatch(typeHint -> typeHint.getType().getCanonicalName().equals(FirstInterface.class.getCanonicalName())\n\t\t\t\t\t\t&& typeHint.getMemberCategories().contains(MemberCategory.INTROSPECT_PUBLIC_METHODS));\n\t}\n\n\tprivate void assertTestTypeMethodHints(Consumer<ExecutableHint> methodHint) {\n\t\tassertThat(this.reflectionHints.typeHints()).singleElement().satisfies(typeHint -> {\n\t\t\tassertThat(typeHint.getType().getCanonicalName()).isEqualTo(TestType.class.getCanonicalName());\n\t\t\tassertThat(typeHint.fields()).isEmpty();\n\t\t\tassertThat(typeHint.constructors()).isEmpty();\n\t\t\tassertThat(typeHint.methods()).singleElement().satisfies(methodHint);\n\t\t});\n\t}\n\n\tprivate Consumer<TypeHint> typeWithMemberCategories(Class<?> type, MemberCategory... memberCategories) {\n\t\treturn typeHint -> {\n\t\t\tassertThat(typeHint.getType().getCanonicalName()).isEqualTo(type.getCanonicalName());\n\t\t\tassertThat(typeHint.fields()).isEmpty();\n\t\t\tassertThat(typeHint.constructors()).isEmpty();\n\t\t\tassertThat(typeHint.methods()).isEmpty();\n\t\t\tassertThat(typeHint.getMemberCategories()).containsExactly(memberCategories);\n\t\t};\n\t}\n\n\n\t@SuppressWarnings(\"unused\")\n\tstatic class TestType {\n\n\t\tprivate @Nullable String field;\n\n\t\tvoid setName(String name) {\n\n\t\t}\n\n\t}\n\n\tinterface FirstInterface {\n\t\tvoid first();\n\t}\n\n\tinterface SecondInterface {\n\t\tvoid second();\n\t}\n\n\t@SuppressWarnings(\"serial\")\n\tstatic class ParentType implements Serializable, FirstInterface {\n\t\t@Override\n\t\tpublic void first() {\n\n\t\t}\n\t}\n\n\t@SuppressWarnings(\"serial\")\n\tstatic class ChildType extends ParentType implements SecondInterface {\n\t\t@Override\n\t\tpublic void second() {\n\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHintsTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.hint.ReflectionHintsTests#reflectionHints",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHintsTests#reflectionHints",
    "headType": "field",
    "relation": "haveType",
    "tail": "ReflectionHints",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHintsTests#registerType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid registerType() {\r\n    this.reflectionHints.registerType(TypeReference.of(String.class), hint -> hint.withMembers(MemberCategory.DECLARED_FIELDS));\r\n    assertThat(this.reflectionHints.typeHints()).singleElement().satisfies(typeWithMemberCategories(String.class, MemberCategory.DECLARED_FIELDS));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ReflectionHintsTests#registerType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHintsTests#registerType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHintsTests#registerTypeIfPresentRegistersExistingClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid registerTypeIfPresentRegistersExistingClass() {\r\n    this.reflectionHints.registerTypeIfPresent(null, String.class.getName(), MemberCategory.DECLARED_FIELDS);\r\n    assertThat(this.reflectionHints.typeHints()).singleElement().satisfies(typeWithMemberCategories(String.class, MemberCategory.DECLARED_FIELDS));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ReflectionHintsTests#registerTypeIfPresentRegistersExistingClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHintsTests#registerTypeIfPresentRegistersExistingClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHintsTests#registerTypeIfPresentIgnoresMissingClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid registerTypeIfPresentIgnoresMissingClass() {\r\n    Consumer<TypeHint.Builder> hintBuilder = mock();\r\n    this.reflectionHints.registerTypeIfPresent(null, \"com.example.DoesNotExist\", hintBuilder);\r\n    assertThat(this.reflectionHints.typeHints()).isEmpty();\r\n    verifyNoInteractions(hintBuilder);\r\n}",
    "tailType": "method_code"
  }
]