[
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMappingsTests#resolveMirrorsWhenHasSameValuesUsesFirst()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#resolveMirrorsWhenHasSameValuesUsesFirst()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#resolveMirrorsWhenOnlyHasDefaultValuesUsesFirst()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveMirrorsWhenOnlyHasDefaultValuesUsesFirst() {\r\n    AnnotationTypeMapping mapping = AnnotationTypeMappings.forAnnotationType(AliasPair.class).get(0);\r\n    Method[] resolved = resolveMirrorSets(mapping, WithDefaultValueAliasPair.class, AliasPair.class);\r\n    assertThat(resolved[0].getName()).isEqualTo(\"a\");\r\n    assertThat(resolved[1].getName()).isEqualTo(\"a\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMappingsTests#resolveMirrorsWhenOnlyHasDefaultValuesUsesFirst()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#resolveMirrorsWhenOnlyHasDefaultValuesUsesFirst()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#resolveMirrorsWhenHasDifferentValuesThrowsException()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveMirrorsWhenHasDifferentValuesThrowsException() {\r\n    AnnotationTypeMapping mapping = AnnotationTypeMappings.forAnnotationType(AliasPair.class).get(0);\r\n    assertThatExceptionOfType(AnnotationConfigurationException.class).isThrownBy(() -> resolveMirrorSets(mapping, WithDifferentValueAliasPair.class, AliasPair.class)).withMessage(\"Different @AliasFor mirror values for annotation [\" + AliasPair.class.getName() + \"] declared on \" + WithDifferentValueAliasPair.class.getName() + \"; attribute 'a' and its alias 'b' are declared with values of [test1] and [test2].\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMappingsTests#resolveMirrorsWhenHasDifferentValuesThrowsException()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#resolveMirrorsWhenHasDifferentValuesThrowsException()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#resolveMirrorsWhenHasWithMultipleRoutesToAliasReturnsMirrors()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveMirrorsWhenHasWithMultipleRoutesToAliasReturnsMirrors() {\r\n    AnnotationTypeMappings mappings = AnnotationTypeMappings.forAnnotationType(MultipleRoutesToAliasA.class);\r\n    AnnotationTypeMapping mappingsA = getMapping(mappings, MultipleRoutesToAliasA.class);\r\n    assertThat(mappingsA.getMirrorSets().size()).isZero();\r\n    AnnotationTypeMapping mappingsB = getMapping(mappings, MultipleRoutesToAliasB.class);\r\n    assertThat(getNames(mappingsB.getMirrorSets().get(0))).containsExactly(\"b1\", \"b2\", \"b3\");\r\n    AnnotationTypeMapping mappingsC = getMapping(mappings, MultipleRoutesToAliasC.class);\r\n    assertThat(getNames(mappingsC.getMirrorSets().get(0))).containsExactly(\"c1\", \"c2\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMappingsTests#resolveMirrorsWhenHasWithMultipleRoutesToAliasReturnsMirrors()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#resolveMirrorsWhenHasWithMultipleRoutesToAliasReturnsMirrors()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getAliasMappingWhenHasWithMultipleRoutesToAliasReturnsMappedAttributes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getAliasMappingWhenHasWithMultipleRoutesToAliasReturnsMappedAttributes() {\r\n    AnnotationTypeMappings mappings = AnnotationTypeMappings.forAnnotationType(MultipleRoutesToAliasA.class);\r\n    AnnotationTypeMapping mappingsA = getMapping(mappings, MultipleRoutesToAliasA.class);\r\n    assertThat(getAliasMapping(mappingsA, 0)).isNull();\r\n    AnnotationTypeMapping mappingsB = getMapping(mappings, MultipleRoutesToAliasB.class);\r\n    assertThat(getAliasMapping(mappingsB, 0).getName()).isEqualTo(\"a1\");\r\n    assertThat(getAliasMapping(mappingsB, 1).getName()).isEqualTo(\"a1\");\r\n    assertThat(getAliasMapping(mappingsB, 2).getName()).isEqualTo(\"a1\");\r\n    AnnotationTypeMapping mappingsC = getMapping(mappings, MultipleRoutesToAliasC.class);\r\n    assertThat(getAliasMapping(mappingsC, 0).getName()).isEqualTo(\"a1\");\r\n    assertThat(getAliasMapping(mappingsC, 1).getName()).isEqualTo(\"a1\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getAliasMappingWhenHasWithMultipleRoutesToAliasReturnsMappedAttributes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getAliasMappingWhenHasWithMultipleRoutesToAliasReturnsMappedAttributes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getConventionMappingWhenConventionToExplicitAliasesReturnsMappedAttributes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getConventionMappingWhenConventionToExplicitAliasesReturnsMappedAttributes() {\r\n    AnnotationTypeMappings mappings = AnnotationTypeMappings.forAnnotationType(ConventionToExplicitAliases.class);\r\n    AnnotationTypeMapping mapping = getMapping(mappings, ConventionToExplicitAliasesTarget.class);\r\n    assertThat(mapping.getConventionMapping(0)).isEqualTo(0);\r\n    assertThat(mapping.getConventionMapping(1)).isEqualTo(0);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getConventionMappingWhenConventionToExplicitAliasesReturnsMappedAttributes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getConventionMappingWhenConventionToExplicitAliasesReturnsMappedAttributes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenValueAndDefaultAreNullReturnsTrue()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isEquivalentToDefaultValueWhenValueAndDefaultAreNullReturnsTrue() {\r\n    AnnotationTypeMapping mapping = AnnotationTypeMappings.forAnnotationType(ClassValue.class).get(0);\r\n    assertThat(mapping.isEquivalentToDefaultValue(0, null, ReflectionUtils::invokeMethod)).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenValueAndDefaultAreNullReturnsTrue()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenValueAndDefaultAreNullReturnsTrue()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]