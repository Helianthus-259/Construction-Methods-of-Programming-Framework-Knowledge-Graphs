[
  {
    "head": "org.springframework.core.GenericTypeResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.GenericTypeResolverTests#simpleInterfaceType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.GenericTypeResolverTests#simpleInterfaceType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.GenericTypeResolverTests#simpleCollectionInterfaceType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid simpleCollectionInterfaceType() {\r\n    assertThat(resolveTypeArgument(MyCollectionInterfaceType.class, MyInterfaceType.class)).isEqualTo(Collection.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.GenericTypeResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.GenericTypeResolverTests#simpleCollectionInterfaceType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.GenericTypeResolverTests#simpleCollectionInterfaceType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.GenericTypeResolverTests#simpleSuperclassType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid simpleSuperclassType() {\r\n    assertThat(resolveTypeArgument(MySimpleSuperclassType.class, MySuperclassType.class)).isEqualTo(String.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.GenericTypeResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.GenericTypeResolverTests#simpleSuperclassType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.GenericTypeResolverTests#simpleSuperclassType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.GenericTypeResolverTests#simpleCollectionSuperclassType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid simpleCollectionSuperclassType() {\r\n    assertThat(resolveTypeArgument(MyCollectionSuperclassType.class, MySuperclassType.class)).isEqualTo(Collection.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.GenericTypeResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.GenericTypeResolverTests#simpleCollectionSuperclassType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.GenericTypeResolverTests#simpleCollectionSuperclassType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.GenericTypeResolverTests#nullIfNotResolvable()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nullIfNotResolvable() {\r\n    GenericClass<String> obj = new GenericClass<>();\r\n    assertThat(resolveTypeArgument(obj.getClass(), GenericClass.class)).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.GenericTypeResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.GenericTypeResolverTests#nullIfNotResolvable()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.GenericTypeResolverTests#nullIfNotResolvable()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.GenericTypeResolverTests#methodReturnTypes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid methodReturnTypes() {\r\n    assertThat(resolveReturnTypeArgument(method(MyTypeWithMethods.class, \"integer\"), MyInterfaceType.class)).isEqualTo(Integer.class);\r\n    assertThat(resolveReturnTypeArgument(method(MyTypeWithMethods.class, \"string\"), MyInterfaceType.class)).isEqualTo(String.class);\r\n    assertThat(resolveReturnTypeArgument(method(MyTypeWithMethods.class, \"character\"), MyAbstractType.class)).isEqualTo(Character.class);\r\n    assertThat(resolveReturnTypeArgument(method(MyTypeWithMethods.class, \"raw\"), MyInterfaceType.class)).isNull();\r\n    assertThat(resolveReturnTypeArgument(method(MyTypeWithMethods.class, \"object\"), MyInterfaceType.class)).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.GenericTypeResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.GenericTypeResolverTests#methodReturnTypes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.GenericTypeResolverTests#methodReturnTypes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.GenericTypeResolverTests#testResolveType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid testResolveType() {\r\n    Method intMessageMethod = method(MyTypeWithMethods.class, \"readIntegerInputMessage\", MyInterfaceType.class);\r\n    MethodParameter intMessageMethodParam = new MethodParameter(intMessageMethod, 0);\r\n    assertThat(resolveType(intMessageMethodParam.getGenericParameterType(), new HashMap<>())).isEqualTo(MyInterfaceType.class);\r\n    Method intArrMessageMethod = method(MyTypeWithMethods.class, \"readIntegerArrayInputMessage\", MyInterfaceType[].class);\r\n    MethodParameter intArrMessageMethodParam = new MethodParameter(intArrMessageMethod, 0);\r\n    assertThat(resolveType(intArrMessageMethodParam.getGenericParameterType(), new HashMap<>())).isEqualTo(MyInterfaceType[].class);\r\n    Method genericArrMessageMethod = method(MySimpleTypeWithMethods.class, \"readGenericArrayInputMessage\", Object[].class);\r\n    MethodParameter genericArrMessageMethodParam = new MethodParameter(genericArrMessageMethod, 0);\r\n    Map<TypeVariable, Type> varMap = getTypeVariableMap(MySimpleTypeWithMethods.class);\r\n    assertThat(resolveType(genericArrMessageMethodParam.getGenericParameterType(), varMap)).isEqualTo(Integer[].class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.GenericTypeResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.GenericTypeResolverTests#testResolveType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.GenericTypeResolverTests#testResolveType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]