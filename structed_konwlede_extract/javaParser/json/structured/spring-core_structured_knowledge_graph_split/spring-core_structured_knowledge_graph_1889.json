[
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#multidimensionalArrayToListConversionShouldConvertEntriesCorrectly()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\n@SuppressWarnings(\"unchecked\")\r\nvoid multidimensionalArrayToListConversionShouldConvertEntriesCorrectly() {\r\n    String[][] grid = new String[][] { { \"1\", \"2\", \"3\", \"4\" }, { \"5\", \"6\", \"7\", \"8\" }, { \"9\", \"10\", \"11\", \"12\" } };\r\n    List<String[]> converted = conversionService.convert(grid, List.class);\r\n    String[][] convertedBack = conversionService.convert(converted, String[][].class);\r\n    assertThat(convertedBack).isEqualTo(grid);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.DefaultConversionServiceTests#multidimensionalArrayToListConversionShouldConvertEntriesCorrectly()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#multidimensionalArrayToListConversionShouldConvertEntriesCorrectly()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#multidimensionalArrayToListConversionShouldConvertEntriesCorrectly()",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertCannotOptimizeArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid convertCannotOptimizeArray() {\r\n    conversionService.addConverter(Byte.class, Byte.class, source -> (byte) (source + 1));\r\n    byte[] byteArray = { 1, 2, 3 };\r\n    byte[] converted = conversionService.convert(byteArray, byte[].class);\r\n    assertThat(converted).isNotSameAs(byteArray);\r\n    assertThat(converted).containsExactly(2, 3, 4);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertCannotOptimizeArray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertCannotOptimizeArray()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertObjectToOptional()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\n@SuppressWarnings(\"unchecked\")\r\nvoid convertObjectToOptional() {\r\n    Method method = ClassUtils.getMethod(TestEntity.class, \"handleOptionalValue\", Optional.class);\r\n    MethodParameter parameter = new MethodParameter(method, 0);\r\n    TypeDescriptor descriptor = new TypeDescriptor(parameter);\r\n    Object actual = conversionService.convert(\"1,2,3\", TypeDescriptor.valueOf(String.class), descriptor);\r\n    assertThat(actual.getClass()).isEqualTo(Optional.class);\r\n    assertThat(((Optional<List<Integer>>) actual)).contains(List.of(1, 2, 3));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertObjectToOptional()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertObjectToOptional()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertObjectToOptional()",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertObjectToOptionalNull()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid convertObjectToOptionalNull() {\r\n    assertThat(conversionService.convert(null, TypeDescriptor.valueOf(Object.class), TypeDescriptor.valueOf(Optional.class))).isSameAs(Optional.empty());\r\n    assertThat((Object) conversionService.convert(null, Optional.class)).isSameAs(Optional.empty());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertObjectToOptionalNull()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertObjectToOptionalNull()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertExistingOptional()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid convertExistingOptional() {\r\n    assertThat(conversionService.convert(Optional.empty(), TypeDescriptor.valueOf(Object.class), TypeDescriptor.valueOf(Optional.class))).isSameAs(Optional.empty());\r\n    assertThat((Object) conversionService.convert(Optional.empty(), Optional.class)).isSameAs(Optional.empty());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertExistingOptional()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertExistingOptional()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#handlerMethod(List<Color>)",
    "headType": "method",
    "relation": "provide",
    "tail": "public void handlerMethod(List<Color> color) ;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.DefaultConversionServiceTests#handlerMethod(List<Color>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.converter.ColorConverter",
    "tailType": "class"
  }
]