[
  {
    "head": "org.springframework.core.type.AnnotationTypeFilterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AnnotationTypeFilterTests#nonAnnotatedClassDoesntMatch()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AnnotationTypeFilterTests#nonAnnotatedClassDoesntMatch()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.AnnotationTypeFilterTests#matchesInterfacesIfConfigured()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid matchesInterfacesIfConfigured() throws Exception {\r\n    MetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory();\r\n    String classUnderTest = \"example.type.AnnotationTypeFilterTestsTypes$SomeClassWithSomeComponentInterface\";\r\n    MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(classUnderTest);\r\n    AnnotationTypeFilter filter = new AnnotationTypeFilter(InheritedAnnotation.class, false, true);\r\n    assertThat(filter.match(metadataReader, metadataReaderFactory)).isTrue();\r\n    ClassloadingAssertions.assertClassNotLoaded(classUnderTest);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AnnotationTypeFilterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AnnotationTypeFilterTests#matchesInterfacesIfConfigured()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AnnotationTypeFilterTests#matchesInterfacesIfConfigured()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.generate",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.generate",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.generate.GeneratedTypeReference",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedTypeReference",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.generate;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.aot.hint.AbstractTypeReference;\nimport org.springframework.aot.hint.TypeReference;\nimport org.springframework.javapoet.ClassName;\nimport org.springframework.util.Assert;\n\n/**\n * A {@link TypeReference} for a generated {@linkplain ClassName type}.\n *\n * @author Stephane Nicoll\n * @since 6.0\n */\npublic final class GeneratedTypeReference extends AbstractTypeReference {\n\n\tprivate final ClassName className;\n\n\tprivate GeneratedTypeReference(ClassName className) {\n\t\tsuper(className.packageName(), className.simpleName(), safeCreate(className.enclosingClassName()));\n\t\tthis.className = className;\n\t}\n\n\tprivate static @Nullable GeneratedTypeReference safeCreate(@Nullable ClassName className) {\n\t\treturn (className != null ? new GeneratedTypeReference(className) : null);\n\t}\n\n\tpublic static GeneratedTypeReference of(ClassName className) {\n\t\tAssert.notNull(className, \"ClassName must not be null\");\n\t\treturn new GeneratedTypeReference(className);\n\t}\n\n\t@Override\n\tpublic String getCanonicalName() {\n\t\treturn this.className.canonicalName();\n\t}\n\n\t@Override\n\tprotected boolean isPrimitive() {\n\t\treturn this.className.isPrimitive();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedTypeReference",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.generate.GeneratedTypeReference#className",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedTypeReference#className",
    "headType": "field",
    "relation": "haveType",
    "tail": "ClassName",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedTypeReference#safeCreate(ClassName)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprivate static GeneratedTypeReference safeCreate(@Nullable ClassName className) {\r\n    return (className != null ? new GeneratedTypeReference(className) : null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedTypeReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedTypeReference#safeCreate(ClassName)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedTypeReference#safeCreate(ClassName)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedTypeReference#of(ClassName)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static GeneratedTypeReference of(ClassName className) {\r\n    Assert.notNull(className, \"ClassName must not be null\");\r\n    return new GeneratedTypeReference(className);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedTypeReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedTypeReference#of(ClassName)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedTypeReference#getCanonicalName()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String getCanonicalName() {\r\n    return this.className.canonicalName();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedTypeReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedTypeReference#getCanonicalName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedTypeReference#getCanonicalName()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedTypeReference#isPrimitive()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected boolean isPrimitive() {\r\n    return this.className.isPrimitive();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedTypeReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedTypeReference#isPrimitive()",
    "tailType": "method"
  }
]