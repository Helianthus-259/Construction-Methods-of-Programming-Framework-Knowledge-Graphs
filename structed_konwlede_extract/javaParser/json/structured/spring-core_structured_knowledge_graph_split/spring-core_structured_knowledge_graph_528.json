[
  {
    "head": "org.springframework.asm.TypeReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.TypeReference#getTypeParameterBoundIndex()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.TypeReference#getSuperTypeIndex()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the index of the \"super type\" of a class that is referenced by this type reference.\r\n * This method must only be used for type references whose sort is {@link #CLASS_EXTENDS}.\r\n *\r\n * @return the index of an interface in the 'implements' clause of a class, or -1 if this type\r\n *     reference references the type of the super class.\r\n */\r\npublic int getSuperTypeIndex() {\r\n    return (short) ((targetTypeAndInfo & 0x00FFFF00) >> 8);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.TypeReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.TypeReference#getSuperTypeIndex()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.TypeReference#getFormalParameterIndex()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the index of the formal parameter whose type is referenced by this type reference. This\r\n * method must only be used for type references whose sort is {@link #METHOD_FORMAL_PARAMETER}.\r\n *\r\n * @return a formal parameter index.\r\n */\r\npublic int getFormalParameterIndex() {\r\n    return (targetTypeAndInfo & 0x00FF0000) >> 16;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.TypeReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.TypeReference#getFormalParameterIndex()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.TypeReference#getExceptionIndex()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the index of the exception, in a 'throws' clause of a method, whose type is referenced\r\n * by this type reference. This method must only be used for type references whose sort is {@link\r\n * #THROWS}.\r\n *\r\n * @return the index of an exception in the 'throws' clause of a method.\r\n */\r\npublic int getExceptionIndex() {\r\n    return (targetTypeAndInfo & 0x00FFFF00) >> 8;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.TypeReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.TypeReference#getExceptionIndex()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.TypeReference#getTryCatchBlockIndex()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the index of the try catch block (using the order in which they are visited with\r\n * visitTryCatchBlock), whose 'catch' type is referenced by this type reference. This method must\r\n * only be used for type references whose sort is {@link #EXCEPTION_PARAMETER} .\r\n *\r\n * @return the index of an exception in the 'throws' clause of a method.\r\n */\r\npublic int getTryCatchBlockIndex() {\r\n    return (targetTypeAndInfo & 0x00FFFF00) >> 8;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.TypeReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.TypeReference#getTryCatchBlockIndex()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.TypeReference#getTypeArgumentIndex()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the index of the type argument referenced by this type reference. This method must only\r\n * be used for type references whose sort is {@link #CAST}, {@link\r\n * #CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT}, {@link #METHOD_INVOCATION_TYPE_ARGUMENT}, {@link\r\n * #CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT}, or {@link #METHOD_REFERENCE_TYPE_ARGUMENT}.\r\n *\r\n * @return a type parameter index.\r\n */\r\npublic int getTypeArgumentIndex() {\r\n    return targetTypeAndInfo & 0xFF;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.TypeReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.TypeReference#getTypeArgumentIndex()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.TypeReference#getValue()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the int encoded value of this type reference, suitable for use in visit methods related\r\n * to type annotations, like visitTypeAnnotation.\r\n *\r\n * @return the int encoded value of this type reference.\r\n */\r\npublic int getValue() {\r\n    return targetTypeAndInfo;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.TypeReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.TypeReference#getValue()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.TypeReference#putTarget(int,ByteVector)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Puts the given target_type and target_info JVMS structures into the given ByteVector.\r\n *\r\n * @param targetTypeAndInfo a target_type and a target_info structures encoded as in {@link\r\n *     #targetTypeAndInfo}. LOCAL_VARIABLE and RESOURCE_VARIABLE target types are not supported.\r\n * @param output where the type reference must be put.\r\n */\r\nstatic void putTarget(final int targetTypeAndInfo, final ByteVector output) {\r\n    switch(targetTypeAndInfo >>> 24) {\r\n        case CLASS_TYPE_PARAMETER:\r\n        case METHOD_TYPE_PARAMETER:\r\n        case METHOD_FORMAL_PARAMETER:\r\n            output.putShort(targetTypeAndInfo >>> 16);\r\n            break;\r\n        case FIELD:\r\n        case METHOD_RETURN:\r\n        case METHOD_RECEIVER:\r\n            output.putByte(targetTypeAndInfo >>> 24);\r\n            break;\r\n        case CAST:\r\n        case CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT:\r\n        case METHOD_INVOCATION_TYPE_ARGUMENT:\r\n        case CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT:\r\n        case METHOD_REFERENCE_TYPE_ARGUMENT:\r\n            output.putInt(targetTypeAndInfo);\r\n            break;\r\n        case CLASS_EXTENDS:\r\n        case CLASS_TYPE_PARAMETER_BOUND:\r\n        case METHOD_TYPE_PARAMETER_BOUND:\r\n        case THROWS:\r\n        case EXCEPTION_PARAMETER:\r\n        case INSTANCEOF:\r\n        case NEW:\r\n        case CONSTRUCTOR_REFERENCE:\r\n        case METHOD_REFERENCE:\r\n            output.put12(targetTypeAndInfo >>> 24, (targetTypeAndInfo & 0xFFFF00) >> 8);\r\n            break;\r\n        default:\r\n            throw new IllegalArgumentException();\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.TypeReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.TypeReference#putTarget(int,ByteVector)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.testfixture.nullness.marked",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.testfixture.nullness.marked",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.testfixture.nullness.marked.PackageMarkedJSpecifyProcessor",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.testfixture.nullness.marked.PackageMarkedJSpecifyProcessor",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.testfixture.nullness.marked;\n\nimport org.jspecify.annotations.NonNull;\nimport org.jspecify.annotations.Nullable;\n\npublic interface PackageMarkedJSpecifyProcessor {\n\n\tString process(String unspecified, @Nullable String nullable, @NonNull String nonNull);\n\n\t@Nullable String nullableProcess();\n\n\t@NonNull String nonNullProcess();\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.testfixture.nullness.marked.PackageMarkedJSpecifyProcessor#process(String,String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "String process(String unspecified, @Nullable String nullable, @NonNull String nonNull);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.nullness.marked.PackageMarkedJSpecifyProcessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.nullness.marked.PackageMarkedJSpecifyProcessor#process(String,String,String)",
    "tailType": "method"
  }
]