[
  {
    "head": "org.springframework.aot.hint.TypeReferenceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.TypeReferenceTests#equalsWithNonTypeReferenceIsFalse()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.TypeReferenceTests#equalsWithNonTypeReferenceIsFalse()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.TypeReferenceTests#toStringUsesCanonicalName()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid toStringUsesCanonicalName() {\r\n    assertThat(TypeReference.of(String.class)).hasToString(\"java.lang.String\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.TypeReferenceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.TypeReferenceTests#toStringUsesCanonicalName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.TypeReferenceTests#toStringUsesCanonicalName()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.nativex",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.nativex",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.nativex.BasicJsonWriterTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.nativex.BasicJsonWriterTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.nativex;\n\nimport java.io.StringWriter;\nimport java.util.Collections;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.aot.hint.TypeReference;\nimport org.springframework.aot.nativex.BasicJsonWriterTests.Nested.Inner;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link BasicJsonWriter}.\n *\n * @author Stephane Nicoll\n */\nclass BasicJsonWriterTests {\n\n\tprivate final StringWriter out = new StringWriter();\n\n\tprivate final BasicJsonWriter json = new BasicJsonWriter(out, \"\\t\");\n\n\t@Test\n\tvoid writeObject() {\n\t\tMap<String, Object> attributes = orderedMap(\"test\", \"value\");\n\t\tattributes.put(\"another\", true);\n\t\tthis.json.writeObject(attributes);\n\t\tassertThat(out.toString()).isEqualToNormalizingNewlines(\"\"\"\n\t\t\t\t{\n\t\t\t\t\t\"test\": \"value\",\n\t\t\t\t\t\"another\": true\n\t\t\t\t}\n\t\t\t\t\"\"\");\n\t}\n\n\t@Test\n\tvoid writeObjectWithNestedObject() {\n\t\tMap<String, Object> attributes = orderedMap(\"test\", \"value\");\n\t\tattributes.put(\"nested\", orderedMap(\"enabled\", false));\n\t\tthis.json.writeObject(attributes);\n\t\tassertThat(out.toString()).isEqualToNormalizingNewlines(\"\"\"\n\t\t\t\t{\n\t\t\t\t\t\"test\": \"value\",\n\t\t\t\t\t\"nested\": {\n\t\t\t\t\t\t\"enabled\": false\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\"\"\");\n\t}\n\n\t@Test\n\tvoid writeObjectWithNestedArrayOfString() {\n\t\tMap<String, Object> attributes = orderedMap(\"test\", \"value\");\n\t\tattributes.put(\"nested\", List.of(\"test\", \"value\", \"another\"));\n\t\tthis.json.writeObject(attributes);\n\t\tassertThat(out.toString()).isEqualToNormalizingNewlines(\"\"\"\n\t\t\t\t{\n\t\t\t\t\t\"test\": \"value\",\n\t\t\t\t\t\"nested\": [\n\t\t\t\t\t\t\"test\",\n\t\t\t\t\t\t\"value\",\n\t\t\t\t\t\t\"another\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t\t\"\"\");\n\t}\n\n\t@Test\n\tvoid writeObjectWithNestedArrayOfObject() {\n\t\tMap<String, Object> attributes = orderedMap(\"test\", \"value\");\n\t\tLinkedHashMap<String, Object> secondNested = orderedMap(\"name\", \"second\");\n\t\tsecondNested.put(\"enabled\", false);\n\t\tattributes.put(\"nested\", List.of(orderedMap(\"name\", \"first\"), secondNested, orderedMap(\"name\", \"third\")));\n\t\tthis.json.writeObject(attributes);\n\t\tassertThat(out.toString()).isEqualToNormalizingNewlines(\"\"\"\n\t\t\t\t{\n\t\t\t\t\t\"test\": \"value\",\n\t\t\t\t\t\"nested\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"first\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"second\",\n\t\t\t\t\t\t\t\"enabled\": false\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"third\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t\t\"\"\");\n\t}\n\n\t@Test\n\tvoid writeObjectWithNestedEmptyArray() {\n\t\tMap<String, Object> attributes = orderedMap(\"test\", \"value\");\n\t\tattributes.put(\"nested\", Collections.emptyList());\n\t\tthis.json.writeObject(attributes);\n\t\tassertThat(out.toString()).isEqualToNormalizingNewlines(\"\"\"\n\t\t\t\t{\n\t\t\t\t\t\"test\": \"value\",\n\t\t\t\t\t\"nested\": [ ]\n\t\t\t\t}\n\t\t\t\t\"\"\");\n\t}\n\n\t@Test\n\tvoid writeObjectWithNestedEmptyObject() {\n\t\tMap<String, Object> attributes = orderedMap(\"test\", \"value\");\n\t\tattributes.put(\"nested\", Collections.emptyMap());\n\t\tthis.json.writeObject(attributes);\n\t\tassertThat(out.toString()).isEqualToNormalizingNewlines(\"\"\"\n\t\t\t\t{\n\t\t\t\t\t\"test\": \"value\",\n\t\t\t\t\t\"nested\": { }\n\t\t\t\t}\n\t\t\t\t\"\"\");\n\t}\n\n\t@Test\n\tvoid writeWithEscapeDoubleQuote() {\n\t\tassertStringAttribute(\"foo\\\"bar\", \"foo\\\\\\\"bar\");\n\t}\n\n\t@Test\n\tvoid writeWithEscapeBackslash() {\n\t\tassertStringAttribute(\"foo\\\"bar\", \"foo\\\\\\\"bar\");\n\t}\n\n\t@Test\n\tvoid writeWithEscapeBackspace() {\n\t\tassertStringAttribute(\"foo\\bbar\", \"foo\\\\bbar\");\n\t}\n\n\t@Test\n\tvoid writeWithEscapeFormFeed() {\n\t\tassertStringAttribute(\"foo\\fbar\", \"foo\\\\fbar\");\n\t}\n\n\t@Test\n\tvoid writeWithEscapeNewline() {\n\t\tassertStringAttribute(\"foo\\nbar\", \"foo\\\\nbar\");\n\t}\n\n\t@Test\n\tvoid writeWithEscapeCarriageReturn() {\n\t\tassertStringAttribute(\"foo\\rbar\", \"foo\\\\rbar\");\n\t}\n\n\t@Test\n\tvoid writeWithEscapeTab() {\n\t\tassertStringAttribute(\"foo\\tbar\", \"foo\\\\tbar\");\n\t}\n\n\t@Test\n\tvoid writeWithEscapeUnicode() {\n\t\tassertStringAttribute(\"foo\\u001Fbar\", \"foo\\\\u001fbar\");\n\t}\n\n\t@Test\n\tvoid writeWithTypeReferenceForSimpleClass() {\n\t\tassertStringAttribute(TypeReference.of(String.class), \"java.lang.String\");\n\t}\n\n\t@Test\n\tvoid writeWithTypeReferenceForInnerClass() {\n\t\tassertStringAttribute(TypeReference.of(Nested.class),\n\t\t\t\t\"org.springframework.aot.nativex.BasicJsonWriterTests$Nested\");\n\t}\n\n\t@Test\n\tvoid writeWithTypeReferenceForDoubleInnerClass() {\n\t\tassertStringAttribute(TypeReference.of(Inner.class),\n\t\t\t\t\"org.springframework.aot.nativex.BasicJsonWriterTests$Nested$Inner\");\n\t}\n\n\tvoid assertStringAttribute(Object value, String expectedValue) {\n\t\tMap<String, Object> attributes = new LinkedHashMap<>();\n\t\tattributes.put(\"test\", value);\n\t\tthis.json.writeObject(attributes);\n\t\tassertThat(out.toString()).contains(\"\\\"test\\\": \\\"\" + expectedValue + \"\\\"\");\n\t}\n\n\tprivate static LinkedHashMap<String, Object> orderedMap(String key, Object value) {\n\t\tLinkedHashMap<String, Object> map = new LinkedHashMap<>();\n\t\tmap.put(key, value);\n\t\treturn map;\n\t}\n\n\n\tstatic class Nested {\n\n\t\tstatic class Inner {\n\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.nativex.BasicJsonWriterTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.nativex.BasicJsonWriterTests#out",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.nativex.BasicJsonWriterTests#out",
    "headType": "field",
    "relation": "haveType",
    "tail": "StringWriter",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.nativex.BasicJsonWriterTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.nativex.BasicJsonWriterTests#json",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.nativex.BasicJsonWriterTests#json",
    "headType": "field",
    "relation": "haveType",
    "tail": "BasicJsonWriter",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.nativex.BasicJsonWriterTests#writeObject()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid writeObject() {\r\n    Map<String, Object> attributes = orderedMap(\"test\", \"value\");\r\n    attributes.put(\"another\", true);\r\n    this.json.writeObject(attributes);\r\n    assertThat(out.toString()).isEqualToNormalizingNewlines(\"\"\"\r\n        {\r\n        \t\"test\": \"value\",\r\n        \t\"another\": true\r\n        }\r\n        \"\"\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.nativex.BasicJsonWriterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.nativex.BasicJsonWriterTests#writeObject()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.nativex.BasicJsonWriterTests#writeObject()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.nativex.BasicJsonWriterTests#writeObjectWithNestedObject()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid writeObjectWithNestedObject() {\r\n    Map<String, Object> attributes = orderedMap(\"test\", \"value\");\r\n    attributes.put(\"nested\", orderedMap(\"enabled\", false));\r\n    this.json.writeObject(attributes);\r\n    assertThat(out.toString()).isEqualToNormalizingNewlines(\"\"\"\r\n        {\r\n        \t\"test\": \"value\",\r\n        \t\"nested\": {\r\n        \t\t\"enabled\": false\r\n        \t}\r\n        }\r\n        \"\"\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.nativex.BasicJsonWriterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.nativex.BasicJsonWriterTests#writeObjectWithNestedObject()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.nativex.BasicJsonWriterTests#writeObjectWithNestedObject()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.nativex.BasicJsonWriterTests#writeObjectWithNestedArrayOfString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid writeObjectWithNestedArrayOfString() {\r\n    Map<String, Object> attributes = orderedMap(\"test\", \"value\");\r\n    attributes.put(\"nested\", List.of(\"test\", \"value\", \"another\"));\r\n    this.json.writeObject(attributes);\r\n    assertThat(out.toString()).isEqualToNormalizingNewlines(\"\"\"\r\n        {\r\n        \t\"test\": \"value\",\r\n        \t\"nested\": [\r\n        \t\t\"test\",\r\n        \t\t\"value\",\r\n        \t\t\"another\"\r\n        \t]\r\n        }\r\n        \"\"\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.nativex.BasicJsonWriterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.nativex.BasicJsonWriterTests#writeObjectWithNestedArrayOfString()",
    "tailType": "method"
  }
]