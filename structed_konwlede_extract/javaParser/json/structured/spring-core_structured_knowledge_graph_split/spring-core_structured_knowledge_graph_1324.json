[
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMap#putIfAbsent(String,V)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMap#computeIfAbsent(String,Function<? super String,? extends V>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic V computeIfAbsent(String key, Function<? super String, ? extends V> mappingFunction) {\r\n    String oldKey = this.caseInsensitiveKeys.putIfAbsent(convertKey(key), key);\r\n    if (oldKey != null) {\r\n        V oldKeyValue = this.targetMap.get(oldKey);\r\n        if (oldKeyValue != null) {\r\n            return oldKeyValue;\r\n        } else {\r\n            key = oldKey;\r\n        }\r\n    }\r\n    return this.targetMap.computeIfAbsent(key, mappingFunction);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMap",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.LinkedCaseInsensitiveMap#computeIfAbsent(String,Function<? super String,? extends V>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMap#computeIfAbsent(String,Function<? super String,? extends V>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMap#computeIfAbsent(String,Function<? super String,? extends V>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMap#remove(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic V remove(Object key) {\r\n    if (key instanceof String string) {\r\n        String caseInsensitiveKey = removeCaseInsensitiveKey(string);\r\n        if (caseInsensitiveKey != null) {\r\n            return this.targetMap.remove(caseInsensitiveKey);\r\n        }\r\n    }\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMap",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.LinkedCaseInsensitiveMap#remove(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMap#remove(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMap#remove(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMap#clear()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void clear() {\r\n    this.caseInsensitiveKeys.clear();\r\n    this.targetMap.clear();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMap",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.LinkedCaseInsensitiveMap#clear()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMap#clear()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMap#keySet()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Set<String> keySet() {\r\n    Set<String> keySet = this.keySet;\r\n    if (keySet == null) {\r\n        keySet = new KeySet(this.targetMap.keySet());\r\n        this.keySet = keySet;\r\n    }\r\n    return keySet;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMap",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.LinkedCaseInsensitiveMap#keySet()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMap#keySet()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMap#values()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Collection<V> values() {\r\n    Collection<V> values = this.values;\r\n    if (values == null) {\r\n        values = new Values(this.targetMap.values());\r\n        this.values = values;\r\n    }\r\n    return values;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMap",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.LinkedCaseInsensitiveMap#values()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMap#values()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMap#entrySet()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Set<Entry<String, V>> entrySet() {\r\n    Set<Entry<String, V>> entrySet = this.entrySet;\r\n    if (entrySet == null) {\r\n        entrySet = new EntrySet(this.targetMap.entrySet());\r\n        this.entrySet = entrySet;\r\n    }\r\n    return entrySet;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMap",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.LinkedCaseInsensitiveMap#entrySet()",
    "tailType": "method"
  }
]