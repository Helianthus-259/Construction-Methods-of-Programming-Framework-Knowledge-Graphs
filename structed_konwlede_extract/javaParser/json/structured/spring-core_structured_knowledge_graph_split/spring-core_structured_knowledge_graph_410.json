[
  {
    "head": "org.springframework.util.xml.StaxResultTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.xml.StaxResultTests#inputFactory",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.xml.StaxResultTests#inputFactory",
    "headType": "field",
    "relation": "haveType",
    "tail": "XMLOutputFactory",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.xml.StaxResultTests#setUp()",
    "headType": "method",
    "relation": "provide",
    "tail": "@BeforeEach\r\nvoid setUp() throws Exception {\r\n    TransformerFactory transformerFactory = TransformerFactory.newInstance();\r\n    transformer = transformerFactory.newTransformer();\r\n    inputFactory = XMLOutputFactory.newInstance();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.StaxResultTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxResultTests#setUp()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.StaxResultTests#setUp()",
    "headType": "method",
    "relation": "use",
    "tail": "@BeforeEach",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.StaxResultTests#streamWriterSource()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid streamWriterSource() throws Exception {\r\n    StringWriter stringWriter = new StringWriter();\r\n    XMLStreamWriter streamWriter = inputFactory.createXMLStreamWriter(stringWriter);\r\n    Reader reader = new StringReader(XML);\r\n    Source source = new StreamSource(reader);\r\n    StaxResult result = new StaxResult(streamWriter);\r\n    assertThat(result.getXMLStreamWriter()).as(\"Invalid streamWriter returned\").isEqualTo(streamWriter);\r\n    assertThat(result.getXMLEventWriter()).as(\"EventWriter returned\").isNull();\r\n    transformer.transform(source, result);\r\n    assertThat(XmlContent.from(stringWriter)).as(\"Invalid result\").isSimilarTo(XML);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.StaxResultTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxResultTests#streamWriterSource()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.StaxResultTests#streamWriterSource()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.StaxResultTests#eventWriterSource()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid eventWriterSource() throws Exception {\r\n    StringWriter stringWriter = new StringWriter();\r\n    XMLEventWriter eventWriter = inputFactory.createXMLEventWriter(stringWriter);\r\n    Reader reader = new StringReader(XML);\r\n    Source source = new StreamSource(reader);\r\n    StaxResult result = new StaxResult(eventWriter);\r\n    assertThat(result.getXMLEventWriter()).as(\"Invalid eventWriter returned\").isEqualTo(eventWriter);\r\n    assertThat(result.getXMLStreamWriter()).as(\"StreamWriter returned\").isNull();\r\n    transformer.transform(source, result);\r\n    assertThat(XmlContent.from(stringWriter)).as(\"Invalid result\").isSimilarTo(XML);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.StaxResultTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxResultTests#eventWriterSource()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.StaxResultTests#eventWriterSource()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.asm",
    "tailType": "package"
  },
  {
    "head": "org.springframework.asm",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.asm.Frame",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util.xml",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util.xml",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.xml.StaxSourceTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.xml.StaxSourceTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util.xml;\n\nimport java.io.StringReader;\nimport java.io.StringWriter;\n\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.stream.XMLEventReader;\nimport javax.xml.stream.XMLInputFactory;\nimport javax.xml.stream.XMLStreamReader;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.dom.DOMResult;\nimport javax.xml.transform.stream.StreamResult;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.w3c.dom.Document;\nimport org.xml.sax.InputSource;\n\nimport org.springframework.core.testfixture.xml.XmlContent;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * @author Arjen Poutsma\n */\nclass StaxSourceTests {\n\n\tprivate static final String XML = \"<root xmlns='namespace'><child/></root>\";\n\n\tprivate Transformer transformer;\n\n\tprivate XMLInputFactory inputFactory;\n\n\tprivate DocumentBuilder documentBuilder;\n\n\t@BeforeEach\n\tvoid setUp() throws Exception {\n\t\tTransformerFactory transformerFactory = TransformerFactory.newInstance();\n\t\ttransformer = transformerFactory.newTransformer();\n\t\tinputFactory = XMLInputFactory.newInstance();\n\t\tDocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();\n\t\tdocumentBuilderFactory.setNamespaceAware(true);\n\t\tdocumentBuilder = documentBuilderFactory.newDocumentBuilder();\n\t}\n\n\t@Test\n\tvoid streamReaderSourceToStreamResult() throws Exception {\n\t\tXMLStreamReader streamReader = inputFactory.createXMLStreamReader(new StringReader(XML));\n\t\tStaxSource source = new StaxSource(streamReader);\n\t\tassertThat(source.getXMLStreamReader()).as(\"Invalid streamReader returned\").isEqualTo(streamReader);\n\t\tassertThat(source.getXMLEventReader()).as(\"EventReader returned\").isNull();\n\t\tStringWriter writer = new StringWriter();\n\t\ttransformer.transform(source, new StreamResult(writer));\n\t\tassertThat(XmlContent.from(writer)).as(\"Invalid result\").isSimilarTo(XML);\n\t}\n\n\t@Test\n\tvoid streamReaderSourceToDOMResult() throws Exception {\n\t\tXMLStreamReader streamReader = inputFactory.createXMLStreamReader(new StringReader(XML));\n\t\tStaxSource source = new StaxSource(streamReader);\n\t\tassertThat(source.getXMLStreamReader()).as(\"Invalid streamReader returned\").isEqualTo(streamReader);\n\t\tassertThat(source.getXMLEventReader()).as(\"EventReader returned\").isNull();\n\n\t\tDocument expected = documentBuilder.parse(new InputSource(new StringReader(XML)));\n\t\tDocument result = documentBuilder.newDocument();\n\t\ttransformer.transform(source, new DOMResult(result));\n\t\tassertThat(XmlContent.of(result)).as(\"Invalid result\").isSimilarTo(expected);\n\t}\n\n\t@Test\n\tvoid eventReaderSourceToStreamResult() throws Exception {\n\t\tXMLEventReader eventReader = inputFactory.createXMLEventReader(new StringReader(XML));\n\t\tStaxSource source = new StaxSource(eventReader);\n\t\tassertThat(source.getXMLEventReader()).as(\"Invalid eventReader returned\").isEqualTo(eventReader);\n\t\tassertThat(source.getXMLStreamReader()).as(\"StreamReader returned\").isNull();\n\t\tStringWriter writer = new StringWriter();\n\t\ttransformer.transform(source, new StreamResult(writer));\n\t\tassertThat(XmlContent.from(writer)).as(\"Invalid result\").isSimilarTo(XML);\n\t}\n\n\t@Test\n\tvoid eventReaderSourceToDOMResult() throws Exception {\n\t\tXMLEventReader eventReader = inputFactory.createXMLEventReader(new StringReader(XML));\n\t\tStaxSource source = new StaxSource(eventReader);\n\t\tassertThat(source.getXMLEventReader()).as(\"Invalid eventReader returned\").isEqualTo(eventReader);\n\t\tassertThat(source.getXMLStreamReader()).as(\"StreamReader returned\").isNull();\n\n\t\tDocument expected = documentBuilder.parse(new InputSource(new StringReader(XML)));\n\t\tDocument result = documentBuilder.newDocument();\n\t\ttransformer.transform(source, new DOMResult(result));\n\t\tassertThat(XmlContent.of(result)).as(\"Invalid result\").isSimilarTo(expected);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.xml.StaxSourceTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.xml.StaxSourceTests#XML",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.xml.StaxSourceTests#XML",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.xml.StaxSourceTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.xml.StaxSourceTests#transformer",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.xml.StaxSourceTests#transformer",
    "headType": "field",
    "relation": "haveType",
    "tail": "Transformer",
    "tailType": "type"
  }
]