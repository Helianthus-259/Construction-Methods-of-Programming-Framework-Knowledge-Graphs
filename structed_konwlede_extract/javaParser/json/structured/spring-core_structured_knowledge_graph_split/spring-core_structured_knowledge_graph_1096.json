[
  {
    "head": "org.springframework.core.log.LogMessage#length()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.log.LogMessage#charAt(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic char charAt(int index) {\r\n    return toString().charAt(index);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.log.LogMessage",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.LogMessage#charAt(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.log.LogMessage#charAt(int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.log.LogMessage#subSequence(int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic CharSequence subSequence(int start, int end) {\r\n    return toString().subSequence(start, end);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.log.LogMessage",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.LogMessage#subSequence(int,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.log.LogMessage#subSequence(int,int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.log.LogMessage#toString()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This will be called by the logging provider, potentially once\r\n * per log target (therefore locally caching the result here).\r\n */\r\n@Override\r\npublic String toString() {\r\n    if (this.result == null) {\r\n        this.result = buildString();\r\n    }\r\n    return this.result;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.log.LogMessage",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.LogMessage#toString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.log.LogMessage#toString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.log.LogMessage#buildString()",
    "headType": "method",
    "relation": "provide",
    "tail": "abstract String buildString();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.log.LogMessage",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.LogMessage#buildString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.log.LogMessage#of(Supplier<? extends CharSequence>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Build a lazily resolving message from the given supplier.\r\n * @param supplier the supplier (typically bound to a lambda expression)\r\n * @see #toString()\r\n */\r\npublic static LogMessage of(Supplier<? extends CharSequence> supplier) {\r\n    return new SupplierMessage(supplier);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.log.LogMessage",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.LogMessage#of(Supplier<? extends CharSequence>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.log.LogMessage#format(String,Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Build a lazily formatted message from the given format string and argument.\r\n * @param format the format string (following {@link String#format} rules)\r\n * @param arg1 the argument (can be {@code null})\r\n * @see String#format(String, Object...)\r\n */\r\npublic static LogMessage format(String format, @Nullable Object arg1) {\r\n    return new FormatMessage1(format, arg1);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.log.LogMessage",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.LogMessage#format(String,Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.log.LogMessage#format(String,Object,Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Build a lazily formatted message from the given format string and arguments.\r\n * @param format the format string (following {@link String#format} rules)\r\n * @param arg1 the first argument (can be {@code null})\r\n * @param arg2 the second argument (can be {@code null})\r\n * @see String#format(String, Object...)\r\n */\r\npublic static LogMessage format(String format, @Nullable Object arg1, @Nullable Object arg2) {\r\n    return new FormatMessage2(format, arg1, arg2);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.log.LogMessage",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.LogMessage#format(String,Object,Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.log.LogMessage#format(String,Object,Object,Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Build a lazily formatted message from the given format string and arguments.\r\n * @param format the format string (following {@link String#format} rules)\r\n * @param arg1 the first argument (can be {@code null})\r\n * @param arg2 the second argument (can be {@code null})\r\n * @param arg3 the third argument (can be {@code null})\r\n * @see String#format(String, Object...)\r\n */\r\npublic static LogMessage format(String format, @Nullable Object arg1, @Nullable Object arg2, @Nullable Object arg3) {\r\n    return new FormatMessage3(format, arg1, arg2, arg3);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.log.LogMessage",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.LogMessage#format(String,Object,Object,Object)",
    "tailType": "method"
  }
]