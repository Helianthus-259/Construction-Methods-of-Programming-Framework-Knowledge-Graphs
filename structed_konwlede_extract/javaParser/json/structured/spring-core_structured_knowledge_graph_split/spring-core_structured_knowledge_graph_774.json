[
  {
    "head": "org.springframework.core.annotation.MergedAnnotation#VALUE",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotation#getType()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the {@code Class} reference for the actual annotation type.\r\n * @return the annotation type\r\n */\r\nClass<A> getType();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotation#getType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotation#isPresent()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine if the annotation is present on the source. Considers\r\n * {@linkplain #isDirectlyPresent() directly present} and\r\n * {@linkplain #isMetaPresent() meta-present} annotations within the context\r\n * of the {@link SearchStrategy} used.\r\n * @return {@code true} if the annotation is present\r\n */\r\nboolean isPresent();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotation#isPresent()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotation#isDirectlyPresent()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine if the annotation is directly present on the source.\r\n * <p>A directly present annotation is one that the user has explicitly\r\n * declared and not one that is {@linkplain #isMetaPresent() meta-present}\r\n * or {@link Inherited @Inherited}.\r\n * @return {@code true} if the annotation is directly present\r\n */\r\nboolean isDirectlyPresent();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotation#isDirectlyPresent()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotation#isMetaPresent()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine if the annotation is meta-present on the source.\r\n * <p>A meta-present annotation is an annotation that the user hasn't\r\n * explicitly declared, but has been used as a meta-annotation somewhere in\r\n * the annotation hierarchy.\r\n * @return {@code true} if the annotation is meta-present\r\n */\r\nboolean isMetaPresent();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotation#isMetaPresent()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotation#getDistance()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the distance of this annotation related to its use as a\r\n * meta-annotation.\r\n * <p>A directly declared annotation has a distance of {@code 0}, a\r\n * meta-annotation has a distance of {@code 1}, a meta-annotation on a\r\n * meta-annotation has a distance of {@code 2}, etc. A {@linkplain #missing()\r\n * missing} annotation will always return a distance of {@code -1}.\r\n * @return the annotation distance or {@code -1} if the annotation is missing\r\n */\r\nint getDistance();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotation#getDistance()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotation#getAggregateIndex()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the index of the aggregate collection containing this annotation.\r\n * <p>Can be used to reorder a stream of annotations, for example, to give a\r\n * higher priority to annotations declared on a superclass or interface. A\r\n * {@linkplain #missing() missing} annotation will always return an aggregate\r\n * index of {@code -1}.\r\n * @return the aggregate index (starting at {@code 0}) or {@code -1} if the\r\n * annotation is missing\r\n */\r\nint getAggregateIndex();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotation#getAggregateIndex()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotation#getSource()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the source that ultimately declared the root annotation, or\r\n * {@code null} if the source is not known.\r\n * <p>If this merged annotation was created\r\n * {@link MergedAnnotations#from(AnnotatedElement) from} an\r\n * {@link AnnotatedElement} then this source will be an element of the same\r\n * type. If the annotation was loaded without using reflection, the source\r\n * can be of any type, but should have a sensible {@code toString()}.\r\n * Meta-annotations will always return the same source as the\r\n * {@link #getRoot() root}.\r\n * @return the source, or {@code null}\r\n */\r\n@Nullable\r\nObject getSource();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotation#getSource()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotation#getSource()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotation#getMetaSource()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the source of the meta-annotation, or {@code null} if the\r\n * annotation is not {@linkplain #isMetaPresent() meta-present}.\r\n * <p>The meta-source is the annotation that was meta-annotated with this\r\n * annotation.\r\n * @return the meta-annotation source or {@code null}\r\n * @see #getRoot()\r\n */\r\n@Nullable\r\nMergedAnnotation<?> getMetaSource();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotation#getMetaSource()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotation#getMetaSource()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotation#getRoot()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the root annotation, i.e. the {@link #getDistance() distance} {@code 0}\r\n * annotation as directly declared on the source.\r\n * @return the root annotation\r\n * @see #getMetaSource()\r\n */\r\nMergedAnnotation<?> getRoot();",
    "tailType": "method_code"
  }
]