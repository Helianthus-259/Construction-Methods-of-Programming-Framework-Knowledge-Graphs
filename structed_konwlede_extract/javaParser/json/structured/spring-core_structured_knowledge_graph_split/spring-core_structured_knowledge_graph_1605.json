[
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationOnMethodWithComposedMetaTransactionalAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationOnMethodWithComposedMetaTransactionalAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnClassWithComposedMetaTransactionalAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * @since 5.2.1\r\n * @see <a href=\"https://github.com/spring-projects/spring-framework/issues/23767\">#23767</a>\r\n */\r\n@Test\r\nvoid findMergedAnnotationAttributesOnClassWithComposedMetaTransactionalAnnotation() {\r\n    Class<?> clazz = ComposedTransactionalClass.class;\r\n    AnnotationAttributes attributes = findMergedAnnotationAttributes(clazz, AliasedTransactional.class);\r\n    assertThat(attributes).as(\"Should find @AliasedTransactional on \" + clazz).isNotNull();\r\n    assertThat(attributes.getString(\"value\")).as(\"TX qualifier for \" + clazz).isEqualTo(\"anotherTransactionManager\");\r\n    assertThat(attributes.getString(\"qualifier\")).as(\"TX qualifier for \" + clazz).isEqualTo(\"anotherTransactionManager\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnClassWithComposedMetaTransactionalAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnClassWithComposedMetaTransactionalAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationOnClassWithComposedMetaTransactionalAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * @since 5.2.1\r\n * @see <a href=\"https://github.com/spring-projects/spring-framework/issues/23767\">#23767</a>\r\n */\r\n@Test\r\nvoid findMergedAnnotationOnClassWithComposedMetaTransactionalAnnotation() {\r\n    Class<?> clazz = ComposedTransactionalClass.class;\r\n    AliasedTransactional annotation = findMergedAnnotation(clazz, AliasedTransactional.class);\r\n    assertThat(annotation).as(\"Should find @AliasedTransactional on \" + clazz).isNotNull();\r\n    assertThat(annotation.value()).as(\"TX qualifier for \" + clazz).isEqualTo(\"anotherTransactionManager\");\r\n    assertThat(annotation.qualifier()).as(\"TX qualifier for \" + clazz).isEqualTo(\"anotherTransactionManager\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationOnClassWithComposedMetaTransactionalAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationOnClassWithComposedMetaTransactionalAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesWithSingleElementOverridingAnArrayViaAliasFor()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid findMergedAnnotationAttributesWithSingleElementOverridingAnArrayViaAliasFor() {\r\n    assertComponentScanAttributes(AliasForBasedSinglePackageComponentScanClass.class, \"com.example.app.test\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesWithSingleElementOverridingAnArrayViaAliasFor()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesWithSingleElementOverridingAnArrayViaAliasFor()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#assertComponentScanAttributes(Class<?>,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private AnnotationAttributes assertComponentScanAttributes(Class<?> element, String... expected) {\r\n    AnnotationAttributes attributes = findMergedAnnotationAttributes(element, ComponentScan.class);\r\n    assertThat(attributes).as(\"Should find @ComponentScan on \" + element).isNotNull();\r\n    assertThat(attributes.getStringArray(\"value\")).as(\"value: \").isEqualTo(expected);\r\n    assertThat(attributes.getStringArray(\"basePackages\")).as(\"basePackages: \").isEqualTo(expected);\r\n    return attributes;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#assertComponentScanAttributes(Class<?>,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributes(AnnotatedElement,Class<? extends Annotation>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private AnnotationAttributes findMergedAnnotationAttributes(AnnotatedElement element, Class<? extends Annotation> annotationType) {\r\n    return AnnotatedElementUtils.findMergedAnnotationAttributes(element, annotationType.getName(), false, false);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributes(AnnotatedElement,Class<? extends Annotation>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationWithAttributeAliasesInTargetAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid findMergedAnnotationWithAttributeAliasesInTargetAnnotation() {\r\n    Class<?> element = AliasedTransactionalComponentClass.class;\r\n    AliasedTransactional annotation = findMergedAnnotation(element, AliasedTransactional.class);\r\n    assertThat(annotation).as(\"@AliasedTransactional on \" + element).isNotNull();\r\n    assertThat(annotation.value()).as(\"TX value via synthesized annotation.\").isEqualTo(\"aliasForQualifier\");\r\n    assertThat(annotation.qualifier()).as(\"TX qualifier via synthesized annotation.\").isEqualTo(\"aliasForQualifier\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationWithAttributeAliasesInTargetAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationWithAttributeAliasesInTargetAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationForMultipleMetaAnnotationsWithClashingAttributeNames()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid findMergedAnnotationForMultipleMetaAnnotationsWithClashingAttributeNames() {\r\n    String[] xmlLocations = asArray(\"test.xml\");\r\n    String[] propFiles = asArray(\"test.properties\");\r\n    Class<?> element = AliasedComposedContextConfigAndTestPropSourceClass.class;\r\n    ContextConfig contextConfig = findMergedAnnotation(element, ContextConfig.class);\r\n    assertThat(contextConfig).as(\"@ContextConfig on \" + element).isNotNull();\r\n    assertThat(contextConfig.locations()).as(\"locations\").isEqualTo(xmlLocations);\r\n    assertThat(contextConfig.value()).as(\"value\").isEqualTo(xmlLocations);\r\n    // Synthesized annotation\r\n    TestPropSource testPropSource = AnnotationUtils.findAnnotation(element, TestPropSource.class);\r\n    assertThat(testPropSource.locations()).as(\"locations\").isEqualTo(propFiles);\r\n    assertThat(testPropSource.value()).as(\"value\").isEqualTo(propFiles);\r\n    // Merged annotation\r\n    testPropSource = findMergedAnnotation(element, TestPropSource.class);\r\n    assertThat(testPropSource).as(\"@TestPropSource on \" + element).isNotNull();\r\n    assertThat(testPropSource.locations()).as(\"locations\").isEqualTo(propFiles);\r\n    assertThat(testPropSource.value()).as(\"value\").isEqualTo(propFiles);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationForMultipleMetaAnnotationsWithClashingAttributeNames()",
    "tailType": "method"
  }
]