[
  {
    "head": "org.springframework.util.AssertTests#isInstanceOfWithNullInstanceAndMessageSupplier()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isInstanceOfWithNullInstanceAndMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.isInstanceOf(String.class, null, () -> \"enigma\")).withMessageContaining(\"enigma: null\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AssertTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AssertTests#isInstanceOfWithNullInstanceAndMessageSupplier()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AssertTests#isInstanceOfWithNullInstanceAndMessageSupplier()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AssertTests#isInstanceOfWithTypeMismatchAndNullMessageSupplier()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isInstanceOfWithTypeMismatchAndNullMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.isInstanceOf(String.class, 42L, (Supplier<String>) null)).withMessageContaining(\"Object of class [java.lang.Long] must be an instance of class java.lang.String\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AssertTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AssertTests#isInstanceOfWithTypeMismatchAndNullMessageSupplier()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AssertTests#isInstanceOfWithTypeMismatchAndNullMessageSupplier()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AssertTests#isInstanceOfWithTypeMismatchAndMessageSupplier()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isInstanceOfWithTypeMismatchAndMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.isInstanceOf(String.class, 42L, () -> \"enigma\")).withMessageContaining(\"enigma: java.lang.Long\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AssertTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AssertTests#isInstanceOfWithTypeMismatchAndMessageSupplier()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AssertTests#isInstanceOfWithTypeMismatchAndMessageSupplier()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AssertTests#isAssignable()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isAssignable() {\r\n    Assert.isAssignable(Number.class, Integer.class, \"enigma\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AssertTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AssertTests#isAssignable()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AssertTests#isAssignable()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AssertTests#isAssignableWithNullSupertype()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isAssignableWithNullSupertype() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.isAssignable(null, Integer.class, \"enigma\")).withMessageContaining(\"Supertype to check against must not be null\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AssertTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AssertTests#isAssignableWithNullSupertype()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AssertTests#isAssignableWithNullSupertype()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AssertTests#isAssignableWithNullSubtype()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isAssignableWithNullSubtype() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.isAssignable(Integer.class, null, \"enigma\")).withMessageContaining(\"enigma: null\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AssertTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AssertTests#isAssignableWithNullSubtype()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AssertTests#isAssignableWithNullSubtype()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AssertTests#isAssignableWithTypeMismatchAndNullMessage()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isAssignableWithTypeMismatchAndNullMessage() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.isAssignable(String.class, Integer.class, (String) null)).withMessageContaining(\"class java.lang.Integer is not assignable to class java.lang.String\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AssertTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AssertTests#isAssignableWithTypeMismatchAndNullMessage()",
    "tailType": "method"
  }
]