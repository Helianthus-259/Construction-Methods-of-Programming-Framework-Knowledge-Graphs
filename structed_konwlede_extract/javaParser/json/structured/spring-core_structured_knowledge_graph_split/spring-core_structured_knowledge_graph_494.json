[
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.testfixture.io.buffer",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.testfixture.io.buffer.AbstractLeakCheckingTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.AbstractLeakCheckingTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.testfixture.io.buffer;\n\nimport java.time.Duration;\n\nimport org.junit.jupiter.api.AfterEach;\n\nimport org.springframework.core.io.buffer.DataBufferFactory;\n\n/**\n * Abstract base class for unit tests that allocate data buffers via a {@link DataBufferFactory}.\n * After each unit test, this base class checks whether all created buffers have been released,\n * throwing an {@link AssertionError} if not.\n *\n * @author Arjen Poutsma\n * @since 5.1.3\n * @see LeakAwareDataBufferFactory\n */\npublic abstract class AbstractLeakCheckingTests {\n\n\t/**\n\t * The data buffer factory.\n\t */\n\tprotected final LeakAwareDataBufferFactory bufferFactory = new LeakAwareDataBufferFactory();\n\n\t/**\n\t * Checks whether any of the data buffers created by {@link #bufferFactory} have not been\n\t * released, throwing an assertion error if so.\n\t */\n\t@AfterEach\n\tfinal void checkForLeaks() {\n\t\tthis.bufferFactory.checkForLeaks(Duration.ofSeconds(1));\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.AbstractLeakCheckingTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.testfixture.io.buffer.AbstractLeakCheckingTests#bufferFactory",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.AbstractLeakCheckingTests#bufferFactory",
    "headType": "field",
    "relation": "haveType",
    "tail": "LeakAwareDataBufferFactory",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.AbstractLeakCheckingTests#checkForLeaks()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Checks whether any of the data buffers created by {@link #bufferFactory} have not been\r\n * released, throwing an assertion error if so.\r\n */\r\n@AfterEach\r\nfinal void checkForLeaks() {\r\n    this.bufferFactory.checkForLeaks(Duration.ofSeconds(1));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.AbstractLeakCheckingTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.io.buffer.AbstractLeakCheckingTests#checkForLeaks()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.AbstractLeakCheckingTests#checkForLeaks()",
    "headType": "method",
    "relation": "use",
    "tail": "@AfterEach",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.asm",
    "tailType": "package"
  },
  {
    "head": "org.springframework.asm",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.asm.RecordComponentWriter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.asm.RecordComponentWriter",
    "headType": "class",
    "relation": "provide",
    "tail": "// ASM: a very small and fast Java bytecode manipulation framework\n// Copyright (c) 2000-2011 INRIA, France Telecom\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions\n// are met:\n// 1. Redistributions of source code must retain the above copyright\n//    notice, this list of conditions and the following disclaimer.\n// 2. Redistributions in binary form must reproduce the above copyright\n//    notice, this list of conditions and the following disclaimer in the\n//    documentation and/or other materials provided with the distribution.\n// 3. Neither the name of the copyright holders nor the names of its\n//    contributors may be used to endorse or promote products derived from\n//    this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n// THE POSSIBILITY OF SUCH DAMAGE.\npackage org.springframework.asm;\n\nfinal class RecordComponentWriter extends RecordComponentVisitor {\n  /** Where the constants used in this RecordComponentWriter must be stored. */\n  private final SymbolTable symbolTable;\n\n  // Note: fields are ordered as in the record_component_info structure, and those related to\n  // attributes are ordered as in Section 4.7 of the JVMS.\n\n  /** The name_index field of the Record attribute. */\n  private final int nameIndex;\n\n  /** The descriptor_index field of the Record attribute. */\n  private final int descriptorIndex;\n\n  /**\n   * The signature_index field of the Signature attribute of this record component, or 0 if there is\n   * no Signature attribute.\n   */\n  private int signatureIndex;\n\n  /**\n   * The last runtime visible annotation of this record component. The previous ones can be accessed\n   * with the {@link AnnotationWriter#previousAnnotation} field. May be {@literal null}.\n   */\n  private AnnotationWriter lastRuntimeVisibleAnnotation;\n\n  /**\n   * The last runtime invisible annotation of this record component. The previous ones can be\n   * accessed with the {@link AnnotationWriter#previousAnnotation} field. May be {@literal null}.\n   */\n  private AnnotationWriter lastRuntimeInvisibleAnnotation;\n\n  /**\n   * The last runtime visible type annotation of this record component. The previous ones can be\n   * accessed with the {@link AnnotationWriter#previousAnnotation} field. May be {@literal null}.\n   */\n  private AnnotationWriter lastRuntimeVisibleTypeAnnotation;\n\n  /**\n   * The last runtime invisible type annotation of this record component. The previous ones can be\n   * accessed with the {@link AnnotationWriter#previousAnnotation} field. May be {@literal null}.\n   */\n  private AnnotationWriter lastRuntimeInvisibleTypeAnnotation;\n\n  /**\n   * The first non standard attribute of this record component. The next ones can be accessed with\n   * the {@link Attribute#nextAttribute} field. May be {@literal null}.\n   *\n   * <p><b>WARNING</b>: this list stores the attributes in the <i>reverse</i> order of their visit.\n   * firstAttribute is actually the last attribute visited in {@link #visitAttribute(Attribute)}.\n   * The {@link #putRecordComponentInfo(ByteVector)} method writes the attributes in the order\n   * defined by this list, i.e. in the reverse order specified by the user.\n   */\n  private Attribute firstAttribute;\n\n  /**\n   * Constructs a new {@link RecordComponentWriter}.\n   *\n   * @param symbolTable where the constants used in this RecordComponentWriter must be stored.\n   * @param name the record component name.\n   * @param descriptor the record component descriptor (see {@link Type}).\n   * @param signature the record component signature. May be {@literal null}.\n   */\n  RecordComponentWriter(\n      final SymbolTable symbolTable,\n      final String name,\n      final String descriptor,\n      final String signature) {\n    super(/* latest api = */ Opcodes.ASM9);\n    this.symbolTable = symbolTable;\n    this.nameIndex = symbolTable.addConstantUtf8(name);\n    this.descriptorIndex = symbolTable.addConstantUtf8(descriptor);\n    if (signature != null) {\n      this.signatureIndex = symbolTable.addConstantUtf8(signature);\n    }\n  }\n\n  // -----------------------------------------------------------------------------------------------\n  // Implementation of the FieldVisitor abstract class\n  // -----------------------------------------------------------------------------------------------\n\n  @Override\n  public AnnotationVisitor visitAnnotation(final String descriptor, final boolean visible) {\n    if (visible) {\n      return lastRuntimeVisibleAnnotation =\n          AnnotationWriter.create(symbolTable, descriptor, lastRuntimeVisibleAnnotation);\n    } else {\n      return lastRuntimeInvisibleAnnotation =\n          AnnotationWriter.create(symbolTable, descriptor, lastRuntimeInvisibleAnnotation);\n    }\n  }\n\n  @Override\n  public AnnotationVisitor visitTypeAnnotation(\n      final int typeRef, final TypePath typePath, final String descriptor, final boolean visible) {\n    if (visible) {\n      return lastRuntimeVisibleTypeAnnotation =\n          AnnotationWriter.create(\n              symbolTable, typeRef, typePath, descriptor, lastRuntimeVisibleTypeAnnotation);\n    } else {\n      return lastRuntimeInvisibleTypeAnnotation =\n          AnnotationWriter.create(\n              symbolTable, typeRef, typePath, descriptor, lastRuntimeInvisibleTypeAnnotation);\n    }\n  }\n\n  @Override\n  public void visitAttribute(final Attribute attribute) {\n    // Store the attributes in the <i>reverse</i> order of their visit by this method.\n    attribute.nextAttribute = firstAttribute;\n    firstAttribute = attribute;\n  }\n\n  @Override\n  public void visitEnd() {\n    // Nothing to do.\n  }\n\n  // -----------------------------------------------------------------------------------------------\n  // Utility methods\n  // -----------------------------------------------------------------------------------------------\n\n  /**\n   * Returns the size of the record component JVMS structure generated by this\n   * RecordComponentWriter. Also adds the names of the attributes of this record component in the\n   * constant pool.\n   *\n   * @return the size in bytes of the record_component_info of the Record attribute.\n   */\n  int computeRecordComponentInfoSize() {\n    // name_index, descriptor_index and attributes_count fields use 6 bytes.\n    int size = 6;\n    size += Attribute.computeAttributesSize(symbolTable, 0, signatureIndex);\n    size +=\n        AnnotationWriter.computeAnnotationsSize(\n            lastRuntimeVisibleAnnotation,\n            lastRuntimeInvisibleAnnotation,\n            lastRuntimeVisibleTypeAnnotation,\n            lastRuntimeInvisibleTypeAnnotation);\n    if (firstAttribute != null) {\n      size += firstAttribute.computeAttributesSize(symbolTable);\n    }\n    return size;\n  }\n\n  /**\n   * Puts the content of the record component generated by this RecordComponentWriter into the given\n   * ByteVector.\n   *\n   * @param output where the record_component_info structure must be put.\n   */\n  void putRecordComponentInfo(final ByteVector output) {\n    output.putShort(nameIndex).putShort(descriptorIndex);\n    // Compute and put the attributes_count field.\n    // For ease of reference, we use here the same attribute order as in Section 4.7 of the JVMS.\n    int attributesCount = 0;\n    if (signatureIndex != 0) {\n      ++attributesCount;\n    }\n    if (lastRuntimeVisibleAnnotation != null) {\n      ++attributesCount;\n    }\n    if (lastRuntimeInvisibleAnnotation != null) {\n      ++attributesCount;\n    }\n    if (lastRuntimeVisibleTypeAnnotation != null) {\n      ++attributesCount;\n    }\n    if (lastRuntimeInvisibleTypeAnnotation != null) {\n      ++attributesCount;\n    }\n    if (firstAttribute != null) {\n      attributesCount += firstAttribute.getAttributeCount();\n    }\n    output.putShort(attributesCount);\n    Attribute.putAttributes(symbolTable, 0, signatureIndex, output);\n    AnnotationWriter.putAnnotations(\n        symbolTable,\n        lastRuntimeVisibleAnnotation,\n        lastRuntimeInvisibleAnnotation,\n        lastRuntimeVisibleTypeAnnotation,\n        lastRuntimeInvisibleTypeAnnotation,\n        output);\n    if (firstAttribute != null) {\n      firstAttribute.putAttributes(symbolTable, output);\n    }\n  }\n\n  /**\n   * Collects the attributes of this record component into the given set of attribute prototypes.\n   *\n   * @param attributePrototypes a set of attribute prototypes.\n   */\n  final void collectAttributePrototypes(final Attribute.Set attributePrototypes) {\n    attributePrototypes.addAttributes(firstAttribute);\n  }\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.asm.RecordComponentWriter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.RecordComponentWriter#symbolTable",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.RecordComponentWriter#symbolTable",
    "headType": "field",
    "relation": "haveType",
    "tail": "SymbolTable",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.RecordComponentWriter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.RecordComponentWriter#nameIndex",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.RecordComponentWriter#nameIndex",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.RecordComponentWriter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.RecordComponentWriter#descriptorIndex",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.RecordComponentWriter#descriptorIndex",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.RecordComponentWriter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.RecordComponentWriter#signatureIndex",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.RecordComponentWriter#signatureIndex",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.RecordComponentWriter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.RecordComponentWriter#lastRuntimeVisibleAnnotation",
    "tailType": "field"
  }
]