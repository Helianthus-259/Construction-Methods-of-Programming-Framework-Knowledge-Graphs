[
  {
    "head": "org.springframework.aot.generate.ValueCodeGenerationException",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.generate.ValueCodeGenerationException#value",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.generate.ValueCodeGenerationException#value",
    "headType": "field",
    "relation": "haveType",
    "tail": "Object",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.generate.ValueCodeGenerationException#buildErrorMessage(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static String buildErrorMessage(@Nullable Object value) {\r\n    StringBuilder message = new StringBuilder(\"Failed to generate code for '\");\r\n    message.append(value).append(\"'\");\r\n    if (value != null) {\r\n        message.append(\" with type \").append(value.getClass());\r\n    }\r\n    return message.toString();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.ValueCodeGenerationException",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.ValueCodeGenerationException#buildErrorMessage(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.ValueCodeGenerationException#getValue()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the value that failed to be generated.\r\n */\r\n@Nullable\r\npublic Object getValue() {\r\n    return this.value;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.ValueCodeGenerationException",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.ValueCodeGenerationException#getValue()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.ValueCodeGenerationException#getValue()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.ValueCodeGenerationException",
    "headType": "class",
    "relation": "extend",
    "tail": "RuntimeException",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.type.classreading",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.type.classreading",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.type.classreading.SimpleAnnotationMetadataTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleAnnotationMetadataTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.type.classreading;\n\nimport org.springframework.core.type.AbstractAnnotationMetadataTests;\nimport org.springframework.core.type.AnnotationMetadata;\n\n/**\n * Tests for {@link SimpleAnnotationMetadata} and\n * {@link SimpleAnnotationMetadataReadingVisitor}.\n *\n * @author Phillip Webb\n */\nclass SimpleAnnotationMetadataTests extends AbstractAnnotationMetadataTests {\n\n\t@Override\n\tprotected AnnotationMetadata get(Class<?> source) {\n\t\ttry {\n\t\t\treturn new SimpleMetadataReaderFactory(\n\t\t\t\t\tsource.getClassLoader()).getMetadataReader(\n\t\t\t\t\t\t\tsource.getName()).getAnnotationMetadata();\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tthrow new IllegalStateException(ex);\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleAnnotationMetadataTests#get(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected AnnotationMetadata get(Class<?> source) {\r\n    try {\r\n        return new SimpleMetadataReaderFactory(source.getClassLoader()).getMetadataReader(source.getName()).getAnnotationMetadata();\r\n    } catch (Exception ex) {\r\n        throw new IllegalStateException(ex);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleAnnotationMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.classreading.SimpleAnnotationMetadataTests#get(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleAnnotationMetadataTests#get(Class<?>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleAnnotationMetadataTests",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractAnnotationMetadataTests",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.type.classreading",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.type.classreading",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.type.classreading.SimpleMethodMetadataTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleMethodMetadataTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.type.classreading;\n\nimport org.springframework.core.type.AbstractMethodMetadataTests;\nimport org.springframework.core.type.AnnotationMetadata;\n\n/**\n * Tests for {@link SimpleMethodMetadata} and\n * {@link SimpleMethodMetadataReadingVisitor}.\n *\n * @author Phillip Webb\n */\nclass SimpleMethodMetadataTests extends AbstractMethodMetadataTests {\n\n\t@Override\n\tprotected AnnotationMetadata get(Class<?> source) {\n\t\ttry {\n\t\t\treturn new SimpleMetadataReaderFactory(\n\t\t\t\t\tsource.getClassLoader()).getMetadataReader(\n\t\t\t\t\t\t\tsource.getName()).getAnnotationMetadata();\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tthrow new IllegalStateException(ex);\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleMethodMetadataTests#get(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected AnnotationMetadata get(Class<?> source) {\r\n    try {\r\n        return new SimpleMetadataReaderFactory(source.getClassLoader()).getMetadataReader(source.getName()).getAnnotationMetadata();\r\n    } catch (Exception ex) {\r\n        throw new IllegalStateException(ex);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleMethodMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.classreading.SimpleMethodMetadataTests#get(Class<?>)",
    "tailType": "method"
  }
]