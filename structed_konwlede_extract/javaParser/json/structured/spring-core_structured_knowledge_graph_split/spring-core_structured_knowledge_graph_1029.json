[
  {
    "head": "org.springframework.core.io.buffer.SubscriberInputStream",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.SubscriberInputStream#onNext(DataBuffer)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.SubscriberInputStream#onNext(DataBuffer)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.SubscriberInputStream#onError(Throwable)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void onError(Throwable throwable) {\r\n    if (this.done) {\r\n        return;\r\n    }\r\n    this.error = throwable;\r\n    this.done = true;\r\n    if (addWork() == 0) {\r\n        resume();\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.SubscriberInputStream",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.SubscriberInputStream#onError(Throwable)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.SubscriberInputStream#onError(Throwable)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.SubscriberInputStream#onComplete()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void onComplete() {\r\n    if (this.done) {\r\n        return;\r\n    }\r\n    this.done = true;\r\n    if (addWork() == 0) {\r\n        resume();\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.SubscriberInputStream",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.SubscriberInputStream#onComplete()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.SubscriberInputStream#onComplete()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.SubscriberInputStream#addWork()",
    "headType": "method",
    "relation": "provide",
    "tail": "int addWork() {\r\n    for (; ; ) {\r\n        int produced = this.workAmount.getPlain();\r\n        if (produced == Integer.MIN_VALUE) {\r\n            return Integer.MIN_VALUE;\r\n        }\r\n        int nextProduced = (produced == Integer.MAX_VALUE ? 1 : produced + 1);\r\n        if (this.workAmount.weakCompareAndSetRelease(produced, nextProduced)) {\r\n            return produced;\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.SubscriberInputStream",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.SubscriberInputStream#addWork()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.SubscriberInputStream#resume()",
    "headType": "method",
    "relation": "provide",
    "tail": "private void resume() {\r\n    if (this.parkedThread != READY) {\r\n        Object old = this.parkedThread.getAndSet(READY);\r\n        if (old != READY) {\r\n            LockSupport.unpark((Thread) old);\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.SubscriberInputStream",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.SubscriberInputStream#resume()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.SubscriberInputStream#read()",
    "headType": "method",
    "relation": "provide",
    "tail": "/* InputStream implementation */\r\n@Override\r\npublic int read() throws IOException {\r\n    if (!this.lock.tryLock()) {\r\n        if (this.closed) {\r\n            return -1;\r\n        }\r\n        throw new ConcurrentModificationException(\"Concurrent access is not allowed\");\r\n    }\r\n    try {\r\n        DataBuffer next = getNextOrAwait();\r\n        if (next == DONE) {\r\n            this.closed = true;\r\n            cleanAndFinalize();\r\n            if (this.error == null) {\r\n                return -1;\r\n            } else {\r\n                throw Exceptions.propagate(this.error);\r\n            }\r\n        } else if (next == CLOSED) {\r\n            cleanAndFinalize();\r\n            return -1;\r\n        }\r\n        return next.read() & 0xFF;\r\n    } catch (Throwable ex) {\r\n        this.closed = true;\r\n        requiredSubscriber().cancel();\r\n        cleanAndFinalize();\r\n        throw Exceptions.propagate(ex);\r\n    } finally {\r\n        this.lock.unlock();\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.SubscriberInputStream",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.SubscriberInputStream#read()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.SubscriberInputStream#read()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.SubscriberInputStream#read(byte[],int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int read(byte[] b, int off, int len) throws IOException {\r\n    Objects.checkFromIndexSize(off, len, b.length);\r\n    if (len == 0) {\r\n        return 0;\r\n    }\r\n    if (!this.lock.tryLock()) {\r\n        if (this.closed) {\r\n            return -1;\r\n        }\r\n        throw new ConcurrentModificationException(\"concurrent access is disallowed\");\r\n    }\r\n    try {\r\n        for (int j = 0; j < len; ) {\r\n            DataBuffer next = getNextOrAwait();\r\n            if (next == DONE) {\r\n                cleanAndFinalize();\r\n                if (this.error == null) {\r\n                    this.closed = true;\r\n                    return j == 0 ? -1 : j;\r\n                } else {\r\n                    if (j == 0) {\r\n                        this.closed = true;\r\n                        throw Exceptions.propagate(this.error);\r\n                    }\r\n                    return j;\r\n                }\r\n            } else if (next == CLOSED) {\r\n                requiredSubscriber().cancel();\r\n                cleanAndFinalize();\r\n                return -1;\r\n            }\r\n            int initialReadPosition = next.readPosition();\r\n            next.read(b, off + j, Math.min(len - j, next.readableByteCount()));\r\n            j += next.readPosition() - initialReadPosition;\r\n        }\r\n        return len;\r\n    } catch (Throwable ex) {\r\n        this.closed = true;\r\n        requiredSubscriber().cancel();\r\n        cleanAndFinalize();\r\n        throw Exceptions.propagate(ex);\r\n    } finally {\r\n        this.lock.unlock();\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.SubscriberInputStream",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.SubscriberInputStream#read(byte[],int,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.SubscriberInputStream#read(byte[],int,int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.SubscriberInputStream#getNextOrAwait()",
    "headType": "method",
    "relation": "provide",
    "tail": "private DataBuffer getNextOrAwait() {\r\n    if (this.available == null || this.available.readableByteCount() == 0) {\r\n        discard(this.available);\r\n        this.available = null;\r\n        int actualWorkAmount = this.workAmount.getAcquire();\r\n        for (; ; ) {\r\n            if (this.closed) {\r\n                return CLOSED;\r\n            }\r\n            boolean done = this.done;\r\n            DataBuffer buffer = this.queue.poll();\r\n            if (buffer != null) {\r\n                int consumed = ++this.consumed;\r\n                this.available = buffer;\r\n                if (consumed == this.limit) {\r\n                    this.consumed = 0;\r\n                    requiredSubscriber().request(this.limit);\r\n                }\r\n                break;\r\n            }\r\n            if (done) {\r\n                return DONE;\r\n            }\r\n            actualWorkAmount = this.workAmount.addAndGet(-actualWorkAmount);\r\n            if (actualWorkAmount == 0) {\r\n                await();\r\n            }\r\n        }\r\n    }\r\n    return this.available;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.SubscriberInputStream",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.SubscriberInputStream#getNextOrAwait()",
    "tailType": "method"
  }
]