[
  {
    "head": "org.springframework.util.RouteMatcher#isPattern(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Whether the given {@code route} contains pattern syntax which requires\r\n * the {@link #match(String, Route)} method, or if it is a regular String\r\n * that could be compared directly to others.\r\n * @param route the route to check\r\n * @return {@code true} if the given {@code route} represents a pattern\r\n */\r\nboolean isPattern(String route);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.RouteMatcher",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.RouteMatcher#isPattern(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.RouteMatcher#combine(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Combines two patterns into a single pattern.\r\n * @param pattern1 the first pattern\r\n * @param pattern2 the second pattern\r\n * @return the combination of the two patterns\r\n * @throws IllegalArgumentException when the two patterns cannot be combined\r\n */\r\nString combine(String pattern1, String pattern2);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.RouteMatcher",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.RouteMatcher#combine(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.RouteMatcher#match(String,Route)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Match the given route against the given pattern.\r\n * @param pattern the pattern to try to match\r\n * @param route the route to test against\r\n * @return {@code true} if there is a match, {@code false} otherwise\r\n */\r\nboolean match(String pattern, Route route);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.RouteMatcher",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.RouteMatcher#match(String,Route)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.RouteMatcher#matchAndExtract(String,Route)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Match the pattern to the route and extract template variables.\r\n * @param pattern the pattern, possibly containing templates variables\r\n * @param route the route to extract template variables from\r\n * @return a map with template variables and values\r\n */\r\n@Nullable\r\nMap<String, String> matchAndExtract(String pattern, Route route);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.RouteMatcher",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.RouteMatcher#matchAndExtract(String,Route)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.RouteMatcher#matchAndExtract(String,Route)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.RouteMatcher#getPatternComparator(Route)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Given a route, return a {@link Comparator} suitable for sorting patterns\r\n * in order of explicitness for that route, so that more specific patterns\r\n * come before more generic ones.\r\n * @param route the full path to use for comparison\r\n * @return a comparator capable of sorting patterns in order of explicitness\r\n */\r\nComparator<String> getPatternComparator(Route route);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.RouteMatcher",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.RouteMatcher#getPatternComparator(Route)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.Route",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.Route",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.util.Comparator;\nimport java.util.Map;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * Contract for matching routes to patterns.\n *\n * <p>Equivalent to {@link PathMatcher}, but enables use of parsed representations\n * of routes and patterns for efficiency reasons in scenarios where routes from\n * incoming messages are continuously matched against a large number of message\n * handler patterns.\n *\n * @author Rossen Stoyanchev\n * @since 5.2\n * @see PathMatcher\n */\npublic interface RouteMatcher {\n\n\t/**\n\t * Return a parsed representation of the given route.\n\t * @param routeValue the route to parse\n\t * @return the parsed representation of the route\n\t */\n\tRoute parseRoute(String routeValue);\n\n\t/**\n\t * Whether the given {@code route} contains pattern syntax which requires\n\t * the {@link #match(String, Route)} method, or if it is a regular String\n\t * that could be compared directly to others.\n\t * @param route the route to check\n\t * @return {@code true} if the given {@code route} represents a pattern\n\t */\n\tboolean isPattern(String route);\n\n\t/**\n\t * Combines two patterns into a single pattern.\n\t * @param pattern1 the first pattern\n\t * @param pattern2 the second pattern\n\t * @return the combination of the two patterns\n\t * @throws IllegalArgumentException when the two patterns cannot be combined\n\t */\n\tString combine(String pattern1, String pattern2);\n\n\t/**\n\t * Match the given route against the given pattern.\n\t * @param pattern the pattern to try to match\n\t * @param route the route to test against\n\t * @return {@code true} if there is a match, {@code false} otherwise\n\t */\n\tboolean match(String pattern, Route route);\n\n\t/**\n\t * Match the pattern to the route and extract template variables.\n\t * @param pattern the pattern, possibly containing templates variables\n\t * @param route the route to extract template variables from\n\t * @return a map with template variables and values\n\t */\n\t@Nullable Map<String, String> matchAndExtract(String pattern, Route route);\n\n\t/**\n\t * Given a route, return a {@link Comparator} suitable for sorting patterns\n\t * in order of explicitness for that route, so that more specific patterns\n\t * come before more generic ones.\n\t * @param route the full path to use for comparison\n\t * @return a comparator capable of sorting patterns in order of explicitness\n\t */\n\tComparator<String> getPatternComparator(Route route);\n\n\n\t/**\n\t * A parsed representation of a route.\n \t */\n\tinterface Route {\n\n\t\t/**\n\t\t * The original route value.\n\t\t */\n\t\tString value();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.Route#value()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * The original route value.\r\n */\r\nString value();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.Route",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.Route#value()",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.SerializationUtils",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.SerializationUtils",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.Serializable;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * Static utilities for serialization and deserialization using\n * <a href=\"https://docs.oracle.com/en/java/javase/17/docs/specs/serialization/\"\n * target=\"_blank\">Java Object Serialization</a>.\n *\n * <p><strong>WARNING</strong>: These utilities should be used with caution. See\n * <a href=\"https://www.oracle.com/java/technologies/javase/seccodeguide.html#8\"\n * target=\"_blank\">Secure Coding Guidelines for the Java Programming Language</a>\n * for details.\n *\n * @author Dave Syer\n * @author Lo√Øc Ledoyen\n * @author Sam Brannen\n * @since 3.0.5\n */\npublic abstract class SerializationUtils {\n\n\t/**\n\t * Serialize the given object to a byte array.\n\t * @param object the object to serialize\n\t * @return an array of bytes representing the object in a portable fashion\n\t */\n\tpublic static byte @Nullable [] serialize(@Nullable Object object) {\n\t\tif (object == null) {\n\t\t\treturn null;\n\t\t}\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream(1024);\n\t\ttry (ObjectOutputStream oos = new ObjectOutputStream(baos)) {\n\t\t\toos.writeObject(object);\n\t\t\toos.flush();\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\tthrow new IllegalArgumentException(\"Failed to serialize object of type: \" + object.getClass(), ex);\n\t\t}\n\t\treturn baos.toByteArray();\n\t}\n\n\t/**\n\t * Deserialize the byte array into an object.\n\t * @param bytes a serialized object\n\t * @return the result of deserializing the bytes\n\t * @deprecated This utility uses Java Object Serialization, which allows\n\t * arbitrary code to be run and is known for being the source of many Remote\n\t * Code Execution (RCE) vulnerabilities.\n\t * <p>Prefer the use of an external tool (that serializes to JSON, XML, or\n\t * any other format) which is regularly checked and updated for not allowing RCE.\n\t */\n\t@Deprecated\n\tpublic static @Nullable Object deserialize(byte @Nullable [] bytes) {\n\t\tif (bytes == null) {\n\t\t\treturn null;\n\t\t}\n\t\ttry (ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(bytes))) {\n\t\t\treturn ois.readObject();\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\tthrow new IllegalArgumentException(\"Failed to deserialize object\", ex);\n\t\t}\n\t\tcatch (ClassNotFoundException ex) {\n\t\t\tthrow new IllegalStateException(\"Failed to deserialize object type\", ex);\n\t\t}\n\t}\n\n\t/**\n\t * Clone the given object using Java Object Serialization.\n\t * @param object the object to clone\n\t * @param <T> the type of the object to clone\n\t * @return a clone (deep-copy) of the given object\n\t * @since 6.0\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tpublic static <T extends Serializable> T clone(T object) {\n\t\tObject result = SerializationUtils.deserialize(SerializationUtils.serialize(object));\n\t\tAssert.state(result != null, \"Deserialized object must not be null\");\n\t\treturn (T) result;\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.SerializationUtils#serialize(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Serialize the given object to a byte array.\r\n * @param object the object to serialize\r\n * @return an array of bytes representing the object in a portable fashion\r\n */\r\npublic static byte @Nullable [] serialize(@Nullable Object object) {\r\n    if (object == null) {\r\n        return null;\r\n    }\r\n    ByteArrayOutputStream baos = new ByteArrayOutputStream(1024);\r\n    try (ObjectOutputStream oos = new ObjectOutputStream(baos)) {\r\n        oos.writeObject(object);\r\n        oos.flush();\r\n    } catch (IOException ex) {\r\n        throw new IllegalArgumentException(\"Failed to serialize object of type: \" + object.getClass(), ex);\r\n    }\r\n    return baos.toByteArray();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.SerializationUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.SerializationUtils#serialize(Object)",
    "tailType": "method"
  }
]