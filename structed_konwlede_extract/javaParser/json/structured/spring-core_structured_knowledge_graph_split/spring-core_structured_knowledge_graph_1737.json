[
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeFromMapWithNestedMap()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeFromMapWithNestedMap()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeFromMapWithNestedMap()",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeFromMapWithNestedArrayOfMaps()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\n@SuppressWarnings(\"unchecked\")\r\nvoid synthesizeFromMapWithNestedArrayOfMaps() {\r\n    ComponentScan componentScan = ComponentScanClass.class.getAnnotation(ComponentScan.class);\r\n    assertThat(componentScan).isNotNull();\r\n    Map<String, Object> map = MergedAnnotation.from(componentScan).asMap(annotation -> new LinkedHashMap<>(), Adapt.ANNOTATION_TO_MAP);\r\n    Map<String, Object>[] filters = (Map[]) map.get(\"excludeFilters\");\r\n    List<String> patterns = Arrays.stream(filters).map(m -> (String) m.get(\"pattern\")).toList();\r\n    assertThat(patterns).containsExactly(\"*Foo\", \"*Bar\");\r\n    filters[0].put(\"pattern\", \"newFoo\");\r\n    filters[0].put(\"enigma\", 42);\r\n    filters[1].put(\"pattern\", \"newBar\");\r\n    filters[1].put(\"enigma\", 42);\r\n    MergedAnnotation<ComponentScan> annotation = MergedAnnotation.of(ComponentScan.class, map);\r\n    ComponentScan synthesizedComponentScan = annotation.synthesize();\r\n    assertSynthesized(synthesizedComponentScan);\r\n    assertThat(Arrays.stream(synthesizedComponentScan.excludeFilters()).map(Filter::pattern)).containsExactly(\"newFoo\", \"newBar\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeFromMapWithNestedArrayOfMaps()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeFromMapWithNestedArrayOfMaps()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeFromMapWithNestedArrayOfMaps()",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeFromDefaultsWithoutAttributeAliases()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid synthesizeFromDefaultsWithoutAttributeAliases() {\r\n    MergedAnnotation<AnnotationWithDefaults> annotation = MergedAnnotation.of(AnnotationWithDefaults.class);\r\n    AnnotationWithDefaults synthesized = annotation.synthesize();\r\n    assertThat(synthesized.text()).isEqualTo(\"enigma\");\r\n    assertThat(synthesized.predicate()).isTrue();\r\n    assertThat(synthesized.characters()).containsExactly('a', 'b', 'c');\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeFromDefaultsWithoutAttributeAliases()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeFromDefaultsWithoutAttributeAliases()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeFromDefaultsWithAttributeAliases()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid synthesizeFromDefaultsWithAttributeAliases() {\r\n    MergedAnnotation<TestConfiguration> annotation = MergedAnnotation.of(TestConfiguration.class);\r\n    TestConfiguration synthesized = annotation.synthesize();\r\n    assertThat(synthesized.value()).isEmpty();\r\n    assertThat(synthesized.location()).isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeFromDefaultsWithAttributeAliases()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeFromDefaultsWithAttributeAliases()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWhenAttributeAliasesWithDifferentValues()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid synthesizeWhenAttributeAliasesWithDifferentValues() {\r\n    assertThatExceptionOfType(AnnotationConfigurationException.class).isThrownBy(() -> MergedAnnotation.from(TestConfigurationMismatch.class.getAnnotation(TestConfiguration.class)).synthesize());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWhenAttributeAliasesWithDifferentValues()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWhenAttributeAliasesWithDifferentValues()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeFromMapWithMinimalAttributesWithAttributeAliases()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid synthesizeFromMapWithMinimalAttributesWithAttributeAliases() {\r\n    Map<String, Object> map = Collections.singletonMap(\"location\", \"test.xml\");\r\n    MergedAnnotation<TestConfiguration> annotation = MergedAnnotation.of(TestConfiguration.class, map);\r\n    TestConfiguration synthesized = annotation.synthesize();\r\n    assertThat(synthesized.value()).isEqualTo(\"test.xml\");\r\n    assertThat(synthesized.location()).isEqualTo(\"test.xml\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeFromMapWithMinimalAttributesWithAttributeAliases()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeFromMapWithMinimalAttributesWithAttributeAliases()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeFromMapWithAttributeAliasesThatOverrideArraysWithSingleElements()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid synthesizeFromMapWithAttributeAliasesThatOverrideArraysWithSingleElements() {\r\n    synthesizeFromMapWithAttributeAliasesThatOverrideArraysWithSingleElements(Collections.singletonMap(\"value\", \"/foo\"));\r\n    synthesizeFromMapWithAttributeAliasesThatOverrideArraysWithSingleElements(Collections.singletonMap(\"path\", \"/foo\"));\r\n}",
    "tailType": "method_code"
  }
]