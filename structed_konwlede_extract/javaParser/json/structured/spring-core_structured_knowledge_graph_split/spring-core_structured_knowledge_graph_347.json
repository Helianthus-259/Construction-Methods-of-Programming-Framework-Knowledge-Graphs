[
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#trimAllWhitespace()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#trimAllWhitespace()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#trimLeadingWhitespace()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\n@SuppressWarnings(\"deprecation\")\r\nvoid trimLeadingWhitespace() {\r\n    assertThat(StringUtils.trimLeadingWhitespace(null)).isNull();\r\n    assertThat(StringUtils.trimLeadingWhitespace(\"\")).isEmpty();\r\n    assertThat(StringUtils.trimLeadingWhitespace(\" \")).isEmpty();\r\n    assertThat(StringUtils.trimLeadingWhitespace(\"\\t\")).isEmpty();\r\n    assertThat(StringUtils.trimLeadingWhitespace(\"\\n\")).isEmpty();\r\n    assertThat(StringUtils.trimLeadingWhitespace(\" \\t\\n\")).isEmpty();\r\n    assertThat(StringUtils.trimLeadingWhitespace(\" a\")).isEqualTo(\"a\");\r\n    assertThat(StringUtils.trimLeadingWhitespace(\"a \")).isEqualTo(\"a \");\r\n    assertThat(StringUtils.trimLeadingWhitespace(\" a \")).isEqualTo(\"a \");\r\n    assertThat(StringUtils.trimLeadingWhitespace(\" a b \")).isEqualTo(\"a b \");\r\n    assertThat(StringUtils.trimLeadingWhitespace(\" a b  c \")).isEqualTo(\"a b  c \");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#trimLeadingWhitespace()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#trimLeadingWhitespace()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#trimLeadingWhitespace()",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#trimTrailingWhitespace()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\n@SuppressWarnings(\"deprecation\")\r\nvoid trimTrailingWhitespace() {\r\n    assertThat(StringUtils.trimTrailingWhitespace(null)).isNull();\r\n    assertThat(StringUtils.trimTrailingWhitespace(\"\")).isEmpty();\r\n    assertThat(StringUtils.trimTrailingWhitespace(\" \")).isEmpty();\r\n    assertThat(StringUtils.trimTrailingWhitespace(\"\\t\")).isEmpty();\r\n    assertThat(StringUtils.trimTrailingWhitespace(\"\\n\")).isEmpty();\r\n    assertThat(StringUtils.trimTrailingWhitespace(\" \\t\\n\")).isEmpty();\r\n    assertThat(StringUtils.trimTrailingWhitespace(\"a \")).isEqualTo(\"a\");\r\n    assertThat(StringUtils.trimTrailingWhitespace(\" a\")).isEqualTo(\" a\");\r\n    assertThat(StringUtils.trimTrailingWhitespace(\" a \")).isEqualTo(\" a\");\r\n    assertThat(StringUtils.trimTrailingWhitespace(\" a b \")).isEqualTo(\" a b\");\r\n    assertThat(StringUtils.trimTrailingWhitespace(\" a b  c \")).isEqualTo(\" a b  c\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#trimTrailingWhitespace()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#trimTrailingWhitespace()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#trimTrailingWhitespace()",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#trimLeadingCharacter()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid trimLeadingCharacter() {\r\n    assertThat(StringUtils.trimLeadingCharacter(null, ' ')).isNull();\r\n    assertThat(StringUtils.trimLeadingCharacter(\"\", ' ')).isEmpty();\r\n    assertThat(StringUtils.trimLeadingCharacter(\" \", ' ')).isEmpty();\r\n    assertThat(StringUtils.trimLeadingCharacter(\"\\t\", ' ')).isEqualTo(\"\\t\");\r\n    assertThat(StringUtils.trimLeadingCharacter(\" a\", ' ')).isEqualTo(\"a\");\r\n    assertThat(StringUtils.trimLeadingCharacter(\"a \", ' ')).isEqualTo(\"a \");\r\n    assertThat(StringUtils.trimLeadingCharacter(\" a \", ' ')).isEqualTo(\"a \");\r\n    assertThat(StringUtils.trimLeadingCharacter(\" a b \", ' ')).isEqualTo(\"a b \");\r\n    assertThat(StringUtils.trimLeadingCharacter(\" a b  c \", ' ')).isEqualTo(\"a b  c \");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#trimLeadingCharacter()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#trimLeadingCharacter()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#trimTrailingCharacter()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid trimTrailingCharacter() {\r\n    assertThat(StringUtils.trimTrailingCharacter(null, ' ')).isNull();\r\n    assertThat(StringUtils.trimTrailingCharacter(\"\", ' ')).isEmpty();\r\n    assertThat(StringUtils.trimTrailingCharacter(\" \", ' ')).isEmpty();\r\n    assertThat(StringUtils.trimTrailingCharacter(\"\\t\", ' ')).isEqualTo(\"\\t\");\r\n    assertThat(StringUtils.trimTrailingCharacter(\"a \", ' ')).isEqualTo(\"a\");\r\n    assertThat(StringUtils.trimTrailingCharacter(\" a\", ' ')).isEqualTo(\" a\");\r\n    assertThat(StringUtils.trimTrailingCharacter(\" a \", ' ')).isEqualTo(\" a\");\r\n    assertThat(StringUtils.trimTrailingCharacter(\" a b \", ' ')).isEqualTo(\" a b\");\r\n    assertThat(StringUtils.trimTrailingCharacter(\" a b  c \", ' ')).isEqualTo(\" a b  c\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#trimTrailingCharacter()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#trimTrailingCharacter()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.asm",
    "tailType": "package"
  },
  {
    "head": "org.springframework.asm",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.asm.ClassTooLargeException",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#matchesCharacter()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid matchesCharacter() {\r\n    assertThat(StringUtils.matchesCharacter(null, '/')).isFalse();\r\n    assertThat(StringUtils.matchesCharacter(\"/a\", '/')).isFalse();\r\n    assertThat(StringUtils.matchesCharacter(\"a\", '/')).isFalse();\r\n    assertThat(StringUtils.matchesCharacter(\"/\", '/')).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#matchesCharacter()",
    "tailType": "method"
  }
]