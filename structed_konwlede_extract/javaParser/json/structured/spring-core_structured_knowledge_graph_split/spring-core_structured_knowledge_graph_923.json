[
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver#createPlaceholderHelper(boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "private PropertyPlaceholderHelper createPlaceholderHelper(boolean ignoreUnresolvablePlaceholders) {\r\n    return new PropertyPlaceholderHelper(this.placeholderPrefix, this.placeholderSuffix, this.valueSeparator, this.escapeCharacter, ignoreUnresolvablePlaceholders);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.AbstractPropertyResolver#createPlaceholderHelper(boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver#doResolvePlaceholders(String,PropertyPlaceholderHelper)",
    "headType": "method",
    "relation": "provide",
    "tail": "private String doResolvePlaceholders(String text, PropertyPlaceholderHelper helper) {\r\n    return helper.replacePlaceholders(text, this::getPropertyAsRawString);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.AbstractPropertyResolver#doResolvePlaceholders(String,PropertyPlaceholderHelper)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver#convertValueIfNecessary(Object,Class<T>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Convert the given value to the specified target type, if necessary.\r\n * @param value the original property value\r\n * @param targetType the specified target type for property retrieval\r\n * @return the converted value, or the original value if no conversion\r\n * is necessary\r\n * @since 4.3.5\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\n@Nullable\r\nprotected <T> T convertValueIfNecessary(Object value, @Nullable Class<T> targetType) {\r\n    if (targetType == null) {\r\n        return (T) value;\r\n    }\r\n    ConversionService conversionServiceToUse = this.conversionService;\r\n    if (conversionServiceToUse == null) {\r\n        // Avoid initialization of shared DefaultConversionService if\r\n        // no standard type conversion is needed in the first place...\r\n        if (ClassUtils.isAssignableValue(targetType, value)) {\r\n            return (T) value;\r\n        }\r\n        conversionServiceToUse = DefaultConversionService.getSharedInstance();\r\n    }\r\n    return conversionServiceToUse.convert(value, targetType);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.AbstractPropertyResolver#convertValueIfNecessary(Object,Class<T>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver#convertValueIfNecessary(Object,Class<T>)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver#convertValueIfNecessary(Object,Class<T>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver#getPropertyAsRawString(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Retrieve the specified property as a raw String,\r\n * i.e. without resolution of nested placeholders.\r\n * @param key the property name to resolve\r\n * @return the property value or {@code null} if none found\r\n */\r\n@Nullable\r\nprotected abstract String getPropertyAsRawString(String key);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.AbstractPropertyResolver#getPropertyAsRawString(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver#getPropertyAsRawString(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.env",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.env",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.env.CommandLineArgs",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.env.CommandLineArgs",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.env;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * A simple representation of command line arguments, broken into\n * {@linkplain #addOptionArg(String, String) option arguments} and\n * {@linkplain #addNonOptionArg(String) non-option arguments}.\n *\n * @author Chris Beams\n * @since 3.1\n * @see SimpleCommandLineArgsParser\n */\nclass CommandLineArgs {\n\n\tprivate final Map<String, List<String>> optionArgs = new HashMap<>();\n\tprivate final List<String> nonOptionArgs = new ArrayList<>();\n\n\t/**\n\t * Add an option argument for the given option name, and add the given value to the\n\t * list of values associated with this option (of which there may be zero or more).\n\t * <p>The given value may be {@code null}, indicating that the option was specified\n\t * without an associated value &mdash; for example, \"--foo\" vs. \"--foo=bar\".\n\t */\n\tpublic void addOptionArg(String optionName, @Nullable String optionValue) {\n\t\tif (!this.optionArgs.containsKey(optionName)) {\n\t\t\tthis.optionArgs.put(optionName, new ArrayList<>());\n\t\t}\n\t\tif (optionValue != null) {\n\t\t\tthis.optionArgs.get(optionName).add(optionValue);\n\t\t}\n\t}\n\n\t/**\n\t * Return the set of the names of all option arguments present on the command line.\n\t */\n\tpublic Set<String> getOptionNames() {\n\t\treturn Collections.unmodifiableSet(this.optionArgs.keySet());\n\t}\n\n\t/**\n\t * Return whether the option with the given name was present on the command line.\n\t */\n\tpublic boolean containsOption(String optionName) {\n\t\treturn this.optionArgs.containsKey(optionName);\n\t}\n\n\t/**\n\t * Return the list of values associated with the given option.\n\t * <p>{@code null} signifies that the option was not present on the command\n\t * line. An empty list signifies that no values were associated with this option.\n\t */\n\tpublic @Nullable List<String> getOptionValues(String optionName) {\n\t\treturn this.optionArgs.get(optionName);\n\t}\n\n\t/**\n\t * Add the given value to the list of non-option arguments.\n\t */\n\tpublic void addNonOptionArg(String value) {\n\t\tthis.nonOptionArgs.add(value);\n\t}\n\n\t/**\n\t * Return the list of non-option arguments specified on the command line.\n\t */\n\tpublic List<String> getNonOptionArgs() {\n\t\treturn Collections.unmodifiableList(this.nonOptionArgs);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.env.CommandLineArgs",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.env.CommandLineArgs#optionArgs",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.env.CommandLineArgs#optionArgs",
    "headType": "field",
    "relation": "haveType",
    "tail": "Map<String, List<String>>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.env.CommandLineArgs",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.env.CommandLineArgs#nonOptionArgs",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.env.CommandLineArgs#nonOptionArgs",
    "headType": "field",
    "relation": "haveType",
    "tail": "List<String>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.env.CommandLineArgs#addOptionArg(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Add an option argument for the given option name, and add the given value to the\r\n * list of values associated with this option (of which there may be zero or more).\r\n * <p>The given value may be {@code null}, indicating that the option was specified\r\n * without an associated value &mdash; for example, \"--foo\" vs. \"--foo=bar\".\r\n */\r\npublic void addOptionArg(String optionName, @Nullable String optionValue) {\r\n    if (!this.optionArgs.containsKey(optionName)) {\r\n        this.optionArgs.put(optionName, new ArrayList<>());\r\n    }\r\n    if (optionValue != null) {\r\n        this.optionArgs.get(optionName).add(optionValue);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.CommandLineArgs",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.CommandLineArgs#addOptionArg(String,String)",
    "tailType": "method"
  }
]