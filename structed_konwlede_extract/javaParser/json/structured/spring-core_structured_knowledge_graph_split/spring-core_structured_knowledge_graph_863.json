[
  {
    "head": "org.springframework.core.convert.Property",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.Property#hashCode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.Property#hashCode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.convert.support",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.convert.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.support.AbstractConditionalEnumConverter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.support.AbstractConditionalEnumConverter",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert.support;\n\nimport org.springframework.core.convert.ConversionService;\nimport org.springframework.core.convert.TypeDescriptor;\nimport org.springframework.core.convert.converter.ConditionalConverter;\nimport org.springframework.util.ClassUtils;\n\n/**\n * A {@link ConditionalConverter} base implementation for enum-based converters.\n *\n * @author Stephane Nicoll\n * @since 4.3\n */\nabstract class AbstractConditionalEnumConverter implements ConditionalConverter {\n\n\tprivate final ConversionService conversionService;\n\n\n\tprotected AbstractConditionalEnumConverter(ConversionService conversionService) {\n\t\tthis.conversionService = conversionService;\n\t}\n\n\n\t@Override\n\tpublic boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {\n\t\tfor (Class<?> interfaceType : ClassUtils.getAllInterfacesForClassAsSet(sourceType.getType())) {\n\t\t\tif (this.conversionService.canConvert(TypeDescriptor.valueOf(interfaceType), targetType)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.convert.support.AbstractConditionalEnumConverter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.support.AbstractConditionalEnumConverter#conversionService",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.support.AbstractConditionalEnumConverter#conversionService",
    "headType": "field",
    "relation": "haveType",
    "tail": "ConversionService",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.support.AbstractConditionalEnumConverter#matches(TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {\r\n    for (Class<?> interfaceType : ClassUtils.getAllInterfacesForClassAsSet(sourceType.getType())) {\r\n        if (this.conversionService.canConvert(TypeDescriptor.valueOf(interfaceType), targetType)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.AbstractConditionalEnumConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.AbstractConditionalEnumConverter#matches(TypeDescriptor,TypeDescriptor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.AbstractConditionalEnumConverter#matches(TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.convert.support",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.convert.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.support.ArrayToArrayConverter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.support.ArrayToArrayConverter",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert.support;\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.convert.ConversionService;\nimport org.springframework.core.convert.TypeDescriptor;\nimport org.springframework.core.convert.converter.ConditionalGenericConverter;\nimport org.springframework.util.ObjectUtils;\n\n/**\n * Converts an array to another array. First adapts the source array to a List,\n * then delegates to {@link CollectionToArrayConverter} to perform the target\n * array conversion.\n *\n * @author Keith Donald\n * @author Phillip Webb\n * @author Sam Brannen\n * @since 3.0\n */\nfinal class ArrayToArrayConverter implements ConditionalGenericConverter {\n\n\tprivate final CollectionToArrayConverter helperConverter;\n\n\tprivate final ConversionService conversionService;\n\n\n\tpublic ArrayToArrayConverter(ConversionService conversionService) {\n\t\tthis.helperConverter = new CollectionToArrayConverter(conversionService);\n\t\tthis.conversionService = conversionService;\n\t}\n\n\n\t@Override\n\tpublic Set<ConvertiblePair> getConvertibleTypes() {\n\t\treturn Collections.singleton(new ConvertiblePair(Object[].class, Object[].class));\n\t}\n\n\t@Override\n\tpublic boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {\n\t\treturn this.helperConverter.matches(sourceType, targetType);\n\t}\n\n\t@Override\n\tpublic @Nullable Object convert(@Nullable Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {\n\t\tif (this.conversionService instanceof GenericConversionService genericConversionService) {\n\t\t\tTypeDescriptor targetElement = targetType.getElementTypeDescriptor();\n\t\t\tif (targetElement != null && targetType.getType().isInstance(source) &&\n\t\t\t\t\tgenericConversionService.canBypassConvert(sourceType.getElementTypeDescriptor(), targetElement)) {\n\t\t\t\treturn source;\n\t\t\t}\n\t\t}\n\t\tList<Object> sourceList = Arrays.asList(ObjectUtils.toObjectArray(source));\n\t\treturn this.helperConverter.convert(sourceList, sourceType, targetType);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.convert.support.ArrayToArrayConverter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.support.ArrayToArrayConverter#helperConverter",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.support.ArrayToArrayConverter#helperConverter",
    "headType": "field",
    "relation": "haveType",
    "tail": "CollectionToArrayConverter",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.support.ArrayToArrayConverter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.support.ArrayToArrayConverter#conversionService",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.support.ArrayToArrayConverter#conversionService",
    "headType": "field",
    "relation": "haveType",
    "tail": "ConversionService",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.support.ArrayToArrayConverter#getConvertibleTypes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Set<ConvertiblePair> getConvertibleTypes() {\r\n    return Collections.singleton(new ConvertiblePair(Object[].class, Object[].class));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.ArrayToArrayConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.ArrayToArrayConverter#getConvertibleTypes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.ArrayToArrayConverter#getConvertibleTypes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  }
]