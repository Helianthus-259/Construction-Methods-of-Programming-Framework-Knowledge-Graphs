[
  {
    "head": "org.springframework.cglib.core.CodeEmitter#monitorenter()",
    "headType": "method",
    "relation": "provide",
    "tail": "public void monitorenter() {\r\n    mv.visitInsn(Constants.MONITORENTER);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.CodeEmitter#monitorenter()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter#monitorexit()",
    "headType": "method",
    "relation": "provide",
    "tail": "public void monitorexit() {\r\n    mv.visitInsn(Constants.MONITOREXIT);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.CodeEmitter#monitorexit()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter#math(int,Type)",
    "headType": "method",
    "relation": "provide",
    "tail": "public void math(int op, Type type) {\r\n    mv.visitInsn(type.getOpcode(op));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.CodeEmitter#math(int,Type)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter#array_load(Type)",
    "headType": "method",
    "relation": "provide",
    "tail": "public void array_load(Type type) {\r\n    mv.visitInsn(type.getOpcode(Constants.IALOAD));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.CodeEmitter#array_load(Type)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter#array_store(Type)",
    "headType": "method",
    "relation": "provide",
    "tail": "public void array_store(Type type) {\r\n    mv.visitInsn(type.getOpcode(Constants.IASTORE));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.CodeEmitter#array_store(Type)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter#cast_numeric(Type,Type)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Casts from one primitive numeric type to another\r\n */\r\npublic void cast_numeric(Type from, Type to) {\r\n    if (from != to) {\r\n        if (from == Type.DOUBLE_TYPE) {\r\n            if (to == Type.FLOAT_TYPE) {\r\n                mv.visitInsn(Constants.D2F);\r\n            } else if (to == Type.LONG_TYPE) {\r\n                mv.visitInsn(Constants.D2L);\r\n            } else {\r\n                mv.visitInsn(Constants.D2I);\r\n                cast_numeric(Type.INT_TYPE, to);\r\n            }\r\n        } else if (from == Type.FLOAT_TYPE) {\r\n            if (to == Type.DOUBLE_TYPE) {\r\n                mv.visitInsn(Constants.F2D);\r\n            } else if (to == Type.LONG_TYPE) {\r\n                mv.visitInsn(Constants.F2L);\r\n            } else {\r\n                mv.visitInsn(Constants.F2I);\r\n                cast_numeric(Type.INT_TYPE, to);\r\n            }\r\n        } else if (from == Type.LONG_TYPE) {\r\n            if (to == Type.DOUBLE_TYPE) {\r\n                mv.visitInsn(Constants.L2D);\r\n            } else if (to == Type.FLOAT_TYPE) {\r\n                mv.visitInsn(Constants.L2F);\r\n            } else {\r\n                mv.visitInsn(Constants.L2I);\r\n                cast_numeric(Type.INT_TYPE, to);\r\n            }\r\n        } else {\r\n            if (to == Type.BYTE_TYPE) {\r\n                mv.visitInsn(Constants.I2B);\r\n            } else if (to == Type.CHAR_TYPE) {\r\n                mv.visitInsn(Constants.I2C);\r\n            } else if (to == Type.DOUBLE_TYPE) {\r\n                mv.visitInsn(Constants.I2D);\r\n            } else if (to == Type.FLOAT_TYPE) {\r\n                mv.visitInsn(Constants.I2F);\r\n            } else if (to == Type.LONG_TYPE) {\r\n                mv.visitInsn(Constants.I2L);\r\n            } else if (to == Type.SHORT_TYPE) {\r\n                mv.visitInsn(Constants.I2S);\r\n            }\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.CodeEmitter#cast_numeric(Type,Type)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter#push(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "public void push(int i) {\r\n    if (i < -1) {\r\n        mv.visitLdcInsn(i);\r\n    } else if (i <= 5) {\r\n        mv.visitInsn(TypeUtils.ICONST(i));\r\n    } else if (i <= Byte.MAX_VALUE) {\r\n        mv.visitIntInsn(Constants.BIPUSH, i);\r\n    } else if (i <= Short.MAX_VALUE) {\r\n        mv.visitIntInsn(Constants.SIPUSH, i);\r\n    } else {\r\n        mv.visitLdcInsn(i);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.CodeEmitter#push(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter#push(long)",
    "headType": "method",
    "relation": "provide",
    "tail": "public void push(long value) {\r\n    if (value == 0L || value == 1L) {\r\n        mv.visitInsn(TypeUtils.LCONST(value));\r\n    } else {\r\n        mv.visitLdcInsn(value);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.CodeEmitter#push(long)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter#push(float)",
    "headType": "method",
    "relation": "provide",
    "tail": "public void push(float value) {\r\n    if (value == 0f || value == 1f || value == 2f) {\r\n        mv.visitInsn(TypeUtils.FCONST(value));\r\n    } else {\r\n        mv.visitLdcInsn(value);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.CodeEmitter#push(float)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter#push(double)",
    "headType": "method",
    "relation": "provide",
    "tail": "public void push(double value) {\r\n    if (value == 0d || value == 1d) {\r\n        mv.visitInsn(TypeUtils.DCONST(value));\r\n    } else {\r\n        mv.visitLdcInsn(value);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.CodeEmitter#push(double)",
    "tailType": "method"
  }
]