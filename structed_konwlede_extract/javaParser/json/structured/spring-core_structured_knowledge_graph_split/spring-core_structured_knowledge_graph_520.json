[
  {
    "head": "org.springframework.asm.Type#getMethodDescriptor(Method)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the descriptor corresponding to the given method.\r\n *\r\n * @param method a {@link Method} object.\r\n * @return the descriptor of the given method.\r\n */\r\npublic static String getMethodDescriptor(final Method method) {\r\n    StringBuilder stringBuilder = new StringBuilder();\r\n    stringBuilder.append('(');\r\n    Class<?>[] parameters = method.getParameterTypes();\r\n    for (Class<?> parameter : parameters) {\r\n        appendDescriptor(parameter, stringBuilder);\r\n    }\r\n    stringBuilder.append(')');\r\n    appendDescriptor(method.getReturnType(), stringBuilder);\r\n    return stringBuilder.toString();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Type",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Type#getMethodDescriptor(Method)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Type#appendDescriptor(StringBuilder)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Appends the descriptor corresponding to this type to the given string buffer.\r\n *\r\n * @param stringBuilder the string builder to which the descriptor must be appended.\r\n */\r\nprivate void appendDescriptor(final StringBuilder stringBuilder) {\r\n    if (sort == OBJECT) {\r\n        stringBuilder.append(valueBuffer, valueBegin - 1, valueEnd + 1);\r\n    } else if (sort == INTERNAL) {\r\n        stringBuilder.append('L').append(valueBuffer, valueBegin, valueEnd).append(';');\r\n    } else {\r\n        stringBuilder.append(valueBuffer, valueBegin, valueEnd);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Type",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Type#appendDescriptor(StringBuilder)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Type#appendDescriptor(Class<?>,StringBuilder)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Appends the descriptor of the given class to the given string builder.\r\n *\r\n * @param clazz the class whose descriptor must be computed.\r\n * @param stringBuilder the string builder to which the descriptor must be appended.\r\n */\r\nprivate static void appendDescriptor(final Class<?> clazz, final StringBuilder stringBuilder) {\r\n    Class<?> currentClass = clazz;\r\n    while (currentClass.isArray()) {\r\n        stringBuilder.append('[');\r\n        currentClass = currentClass.componentType();\r\n    }\r\n    if (currentClass.isPrimitive()) {\r\n        char descriptor;\r\n        if (currentClass == Integer.TYPE) {\r\n            descriptor = 'I';\r\n        } else if (currentClass == Void.TYPE) {\r\n            descriptor = 'V';\r\n        } else if (currentClass == Boolean.TYPE) {\r\n            descriptor = 'Z';\r\n        } else if (currentClass == Byte.TYPE) {\r\n            descriptor = 'B';\r\n        } else if (currentClass == Character.TYPE) {\r\n            descriptor = 'C';\r\n        } else if (currentClass == Short.TYPE) {\r\n            descriptor = 'S';\r\n        } else if (currentClass == Double.TYPE) {\r\n            descriptor = 'D';\r\n        } else if (currentClass == Float.TYPE) {\r\n            descriptor = 'F';\r\n        } else if (currentClass == Long.TYPE) {\r\n            descriptor = 'J';\r\n        } else {\r\n            throw new AssertionError();\r\n        }\r\n        stringBuilder.append(descriptor);\r\n    } else {\r\n        stringBuilder.append('L').append(getInternalName(currentClass)).append(';');\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Type",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Type#appendDescriptor(Class<?>,StringBuilder)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Type#getSort()",
    "headType": "method",
    "relation": "provide",
    "tail": "// -----------------------------------------------------------------------------------------------\r\n// Methods to get the sort, dimension, size, and opcodes corresponding to a Type or descriptor.\r\n// -----------------------------------------------------------------------------------------------\r\n/**\r\n * Returns the sort of this type.\r\n *\r\n * @return {@link #VOID}, {@link #BOOLEAN}, {@link #CHAR}, {@link #BYTE}, {@link #SHORT}, {@link\r\n *     #INT}, {@link #FLOAT}, {@link #LONG}, {@link #DOUBLE}, {@link #ARRAY}, {@link #OBJECT} or\r\n *     {@link #METHOD}.\r\n */\r\npublic int getSort() {\r\n    return sort == INTERNAL ? OBJECT : sort;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Type",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Type#getSort()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Type#getDimensions()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the number of dimensions of this array type. This method should only be used for an\r\n * array type.\r\n *\r\n * @return the number of dimensions of this array type.\r\n */\r\npublic int getDimensions() {\r\n    int numDimensions = 1;\r\n    while (valueBuffer.charAt(valueBegin + numDimensions) == '[') {\r\n        numDimensions++;\r\n    }\r\n    return numDimensions;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Type",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Type#getDimensions()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Type#getSize()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the size of values of this type. This method must not be used for method types.\r\n *\r\n * @return the size of values of this type, i.e., 2 for {@code long} and {@code double}, 0 for\r\n *     {@code void} and 1 otherwise.\r\n */\r\npublic int getSize() {\r\n    switch(sort) {\r\n        case VOID:\r\n            return 0;\r\n        case BOOLEAN:\r\n        case CHAR:\r\n        case BYTE:\r\n        case SHORT:\r\n        case INT:\r\n        case FLOAT:\r\n        case ARRAY:\r\n        case OBJECT:\r\n        case INTERNAL:\r\n            return 1;\r\n        case LONG:\r\n        case DOUBLE:\r\n            return 2;\r\n        default:\r\n            throw new AssertionError();\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Type",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Type#getSize()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Type#getArgumentCount()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the number of arguments of this method type. This method should only be used for method\r\n * types.\r\n *\r\n * @return the number of arguments of this method type. Each argument counts for 1, even long and\r\n *     double ones. The implicit @literal{this} argument is not counted.\r\n */\r\npublic int getArgumentCount() {\r\n    return getArgumentCount(getDescriptor());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Type",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Type#getArgumentCount()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Type#getArgumentCount(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the number of arguments in the given method descriptor.\r\n *\r\n * @param methodDescriptor a method descriptor.\r\n * @return the number of arguments in the given method descriptor. Each argument counts for 1,\r\n *     even long and double ones. The implicit @literal{this} argument is not counted.\r\n */\r\npublic static int getArgumentCount(final String methodDescriptor) {\r\n    int argumentCount = 0;\r\n    // Skip the first character, which is always a '('.\r\n    int currentOffset = 1;\r\n    // Parse the argument types, one at a each loop iteration.\r\n    while (methodDescriptor.charAt(currentOffset) != ')') {\r\n        while (methodDescriptor.charAt(currentOffset) == '[') {\r\n            currentOffset++;\r\n        }\r\n        if (methodDescriptor.charAt(currentOffset++) == 'L') {\r\n            // Skip the argument descriptor content.\r\n            int semiColumnOffset = methodDescriptor.indexOf(';', currentOffset);\r\n            currentOffset = Math.max(currentOffset, semiColumnOffset + 1);\r\n        }\r\n        ++argumentCount;\r\n    }\r\n    return argumentCount;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Type",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Type#getArgumentCount(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Type#getArgumentsAndReturnSizes()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the size of the arguments and of the return value of methods of this type. This method\r\n * should only be used for method types.\r\n *\r\n * @return the size of the arguments of the method (plus one for the implicit this argument),\r\n *     argumentsSize, and the size of its return value, returnSize, packed into a single int i =\r\n *     {@code (argumentsSize &lt;&lt; 2) | returnSize} (argumentsSize is therefore equal to {@code\r\n *     i &gt;&gt; 2}, and returnSize to {@code i &amp; 0x03}). Long and double values have size 2,\r\n *     the others have size 1.\r\n */\r\npublic int getArgumentsAndReturnSizes() {\r\n    return getArgumentsAndReturnSizes(getDescriptor());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Type",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Type#getArgumentsAndReturnSizes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Type#getArgumentsAndReturnSizes(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Computes the size of the arguments and of the return value of a method.\r\n *\r\n * @param methodDescriptor a method descriptor.\r\n * @return the size of the arguments of the method (plus one for the implicit this argument),\r\n *     argumentsSize, and the size of its return value, returnSize, packed into a single int i =\r\n *     {@code (argumentsSize &lt;&lt; 2) | returnSize} (argumentsSize is therefore equal to {@code\r\n *     i &gt;&gt; 2}, and returnSize to {@code i &amp; 0x03}). Long and double values have size 2,\r\n *     the others have size 1.\r\n */\r\npublic static int getArgumentsAndReturnSizes(final String methodDescriptor) {\r\n    int argumentsSize = 1;\r\n    // Skip the first character, which is always a '('.\r\n    int currentOffset = 1;\r\n    int currentChar = methodDescriptor.charAt(currentOffset);\r\n    // Parse the argument types and compute their size, one at a each loop iteration.\r\n    while (currentChar != ')') {\r\n        if (currentChar == 'J' || currentChar == 'D') {\r\n            currentOffset++;\r\n            argumentsSize += 2;\r\n        } else {\r\n            while (methodDescriptor.charAt(currentOffset) == '[') {\r\n                currentOffset++;\r\n            }\r\n            if (methodDescriptor.charAt(currentOffset++) == 'L') {\r\n                // Skip the argument descriptor content.\r\n                int semiColumnOffset = methodDescriptor.indexOf(';', currentOffset);\r\n                currentOffset = Math.max(currentOffset, semiColumnOffset + 1);\r\n            }\r\n            argumentsSize += 1;\r\n        }\r\n        currentChar = methodDescriptor.charAt(currentOffset);\r\n    }\r\n    currentChar = methodDescriptor.charAt(currentOffset + 1);\r\n    if (currentChar == 'V') {\r\n        return argumentsSize << 2;\r\n    } else {\r\n        int returnSize = (currentChar == 'J' || currentChar == 'D') ? 2 : 1;\r\n        return argumentsSize << 2 | returnSize;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Type",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Type#getArgumentsAndReturnSizes(String)",
    "tailType": "method"
  }
]