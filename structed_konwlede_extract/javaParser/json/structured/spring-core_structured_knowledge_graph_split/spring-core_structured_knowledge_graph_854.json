[
  {
    "head": "org.springframework.core.convert.ConversionFailedException#getValue()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.ConversionFailedException",
    "headType": "class",
    "relation": "extend",
    "tail": "ConversionException",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.convert",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.convert",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.ConversionService",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.ConversionService",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * A service interface for type conversion. This is the entry point into the convert system.\n * Call {@link #convert(Object, Class)} to perform a thread-safe type conversion using this system.\n *\n * @author Keith Donald\n * @author Phillip Webb\n * @since 3.0\n */\npublic interface ConversionService {\n\n\t/**\n\t * Return {@code true} if objects of {@code sourceType} can be converted to the {@code targetType}.\n\t * <p>If this method returns {@code true}, it means {@link #convert(Object, Class)} is capable\n\t * of converting an instance of {@code sourceType} to {@code targetType}.\n\t * <p>Special note on collections, arrays, and maps types:\n\t * For conversion between collection, array, and map types, this method will return {@code true}\n\t * even though a convert invocation may still generate a {@link ConversionException} if the\n\t * underlying elements are not convertible. Callers are expected to handle this exceptional case\n\t * when working with collections and maps.\n\t * @param sourceType the source type to convert from (may be {@code null} if source is {@code null})\n\t * @param targetType the target type to convert to (required)\n\t * @return {@code true} if a conversion can be performed, {@code false} if not\n\t * @throws IllegalArgumentException if {@code targetType} is {@code null}\n\t */\n\tboolean canConvert(@Nullable Class<?> sourceType, Class<?> targetType);\n\n\t/**\n\t * Return {@code true} if objects of {@code sourceType} can be converted to the {@code targetType}.\n\t * The TypeDescriptors provide additional context about the source and target locations\n\t * where conversion would occur, often object fields or property locations.\n\t * <p>If this method returns {@code true}, it means {@link #convert(Object, TypeDescriptor, TypeDescriptor)}\n\t * is capable of converting an instance of {@code sourceType} to {@code targetType}.\n\t * <p>Special note on collections, arrays, and maps types:\n\t * For conversion between collection, array, and map types, this method will return {@code true}\n\t * even though a convert invocation may still generate a {@link ConversionException} if the\n\t * underlying elements are not convertible. Callers are expected to handle this exceptional case\n\t * when working with collections and maps.\n\t * @param sourceType context about the source type to convert from\n\t * (may be {@code null} if source is {@code null})\n\t * @param targetType context about the target type to convert to (required)\n\t * @return {@code true} if a conversion can be performed between the source and target types,\n\t * {@code false} if not\n\t * @throws IllegalArgumentException if {@code targetType} is {@code null}\n\t */\n\tboolean canConvert(@Nullable TypeDescriptor sourceType, TypeDescriptor targetType);\n\n\t/**\n\t * Convert the given {@code source} to the specified {@code targetType}.\n\t * @param source the source object to convert (may be {@code null})\n\t * @param targetType the target type to convert to (required)\n\t * @return the converted object, an instance of targetType\n\t * @throws ConversionException if a conversion exception occurred\n\t * @throws IllegalArgumentException if targetType is {@code null}\n\t */\n\t<T> @Nullable T convert(@Nullable Object source, Class<T> targetType);\n\n\t/**\n\t * Convert the given {@code source} to the specified {@code targetType}.\n\t * <p>Delegates to {@link #convert(Object, TypeDescriptor, TypeDescriptor)}\n\t * and encapsulates the construction of the source type descriptor using\n\t * {@link TypeDescriptor#forObject(Object)}.\n\t * @param source the source object\n\t * @param targetType the target type\n\t * @return the converted value\n\t * @throws ConversionException if a conversion exception occurred\n\t * @throws IllegalArgumentException if targetType is {@code null}\n\t * @since 6.1\n\t */\n\tdefault @Nullable Object convert(@Nullable Object source, TypeDescriptor targetType) {\n\t\treturn convert(source, TypeDescriptor.forObject(source), targetType);\n\t}\n\n\t/**\n\t * Convert the given {@code source} to the specified {@code targetType}.\n\t * The TypeDescriptors provide additional context about the source and target locations\n\t * where conversion will occur, often object fields or property locations.\n\t * @param source the source object to convert (may be {@code null})\n\t * @param sourceType context about the source type to convert from\n\t * (may be {@code null} if source is {@code null})\n\t * @param targetType context about the target type to convert to (required)\n\t * @return the converted object, an instance of {@link TypeDescriptor#getObjectType() targetType}\n\t * @throws ConversionException if a conversion exception occurred\n\t * @throws IllegalArgumentException if targetType is {@code null},\n\t * or {@code sourceType} is {@code null} but source is not {@code null}\n\t */\n\t@Nullable Object convert(@Nullable Object source, @Nullable TypeDescriptor sourceType, TypeDescriptor targetType);\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.convert.ConversionService#canConvert(Class<?>,Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return {@code true} if objects of {@code sourceType} can be converted to the {@code targetType}.\r\n * <p>If this method returns {@code true}, it means {@link #convert(Object, Class)} is capable\r\n * of converting an instance of {@code sourceType} to {@code targetType}.\r\n * <p>Special note on collections, arrays, and maps types:\r\n * For conversion between collection, array, and map types, this method will return {@code true}\r\n * even though a convert invocation may still generate a {@link ConversionException} if the\r\n * underlying elements are not convertible. Callers are expected to handle this exceptional case\r\n * when working with collections and maps.\r\n * @param sourceType the source type to convert from (may be {@code null} if source is {@code null})\r\n * @param targetType the target type to convert to (required)\r\n * @return {@code true} if a conversion can be performed, {@code false} if not\r\n * @throws IllegalArgumentException if {@code targetType} is {@code null}\r\n */\r\nboolean canConvert(@Nullable Class<?> sourceType, Class<?> targetType);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.ConversionService",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.ConversionService#canConvert(Class<?>,Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.ConversionService#canConvert(TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return {@code true} if objects of {@code sourceType} can be converted to the {@code targetType}.\r\n * The TypeDescriptors provide additional context about the source and target locations\r\n * where conversion would occur, often object fields or property locations.\r\n * <p>If this method returns {@code true}, it means {@link #convert(Object, TypeDescriptor, TypeDescriptor)}\r\n * is capable of converting an instance of {@code sourceType} to {@code targetType}.\r\n * <p>Special note on collections, arrays, and maps types:\r\n * For conversion between collection, array, and map types, this method will return {@code true}\r\n * even though a convert invocation may still generate a {@link ConversionException} if the\r\n * underlying elements are not convertible. Callers are expected to handle this exceptional case\r\n * when working with collections and maps.\r\n * @param sourceType context about the source type to convert from\r\n * (may be {@code null} if source is {@code null})\r\n * @param targetType context about the target type to convert to (required)\r\n * @return {@code true} if a conversion can be performed between the source and target types,\r\n * {@code false} if not\r\n * @throws IllegalArgumentException if {@code targetType} is {@code null}\r\n */\r\nboolean canConvert(@Nullable TypeDescriptor sourceType, TypeDescriptor targetType);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.ConversionService",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.ConversionService#canConvert(TypeDescriptor,TypeDescriptor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.ConversionService#convert(Object,Class<T>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Convert the given {@code source} to the specified {@code targetType}.\r\n * @param source the source object to convert (may be {@code null})\r\n * @param targetType the target type to convert to (required)\r\n * @return the converted object, an instance of targetType\r\n * @throws ConversionException if a conversion exception occurred\r\n * @throws IllegalArgumentException if targetType is {@code null}\r\n */\r\n@Nullable\r\n<T> T convert(@Nullable Object source, Class<T> targetType);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.ConversionService",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.ConversionService#convert(Object,Class<T>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.ConversionService#convert(Object,Class<T>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.ConversionService#convert(Object,TypeDescriptor)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Convert the given {@code source} to the specified {@code targetType}.\r\n * <p>Delegates to {@link #convert(Object, TypeDescriptor, TypeDescriptor)}\r\n * and encapsulates the construction of the source type descriptor using\r\n * {@link TypeDescriptor#forObject(Object)}.\r\n * @param source the source object\r\n * @param targetType the target type\r\n * @return the converted value\r\n * @throws ConversionException if a conversion exception occurred\r\n * @throws IllegalArgumentException if targetType is {@code null}\r\n * @since 6.1\r\n */\r\n@Nullable\r\ndefault Object convert(@Nullable Object source, TypeDescriptor targetType) {\r\n    return convert(source, TypeDescriptor.forObject(source), targetType);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.ConversionService",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.ConversionService#convert(Object,TypeDescriptor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.ConversionService#convert(Object,TypeDescriptor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.ConversionService#convert(Object,TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Convert the given {@code source} to the specified {@code targetType}.\r\n * The TypeDescriptors provide additional context about the source and target locations\r\n * where conversion will occur, often object fields or property locations.\r\n * @param source the source object to convert (may be {@code null})\r\n * @param sourceType context about the source type to convert from\r\n * (may be {@code null} if source is {@code null})\r\n * @param targetType context about the target type to convert to (required)\r\n * @return the converted object, an instance of {@link TypeDescriptor#getObjectType() targetType}\r\n * @throws ConversionException if a conversion exception occurred\r\n * @throws IllegalArgumentException if targetType is {@code null},\r\n * or {@code sourceType} is {@code null} but source is not {@code null}\r\n */\r\n@Nullable\r\nObject convert(@Nullable Object source, @Nullable TypeDescriptor sourceType, TypeDescriptor targetType);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.ConversionService",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.ConversionService#convert(Object,TypeDescriptor,TypeDescriptor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.ConversionService#convert(Object,TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.convert.converter",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.convert.converter",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.converter.ConditionalConverter",
    "tailType": "class"
  }
]