[
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#readMethodSig(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static Signature readMethodSig(String name, String desc) {\r\n    return new Signature(\"$cglib_read_\" + name, \"()\" + desc);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#readMethodSig(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#writeMethodSig(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static Signature writeMethodSig(String name, String desc) {\r\n    return new Signature(\"$cglib_write_\" + name, \"(\" + desc + \")V\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#writeMethodSig(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#readCallbackSig(Type)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static Signature readCallbackSig(Type type) {\r\n    Type remap = remap(type);\r\n    return new Signature(\"read\" + callbackName(remap), remap, new Type[] { Constants.TYPE_OBJECT, Constants.TYPE_STRING, remap });\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#readCallbackSig(Type)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#writeCallbackSig(Type)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static Signature writeCallbackSig(Type type) {\r\n    Type remap = remap(type);\r\n    return new Signature(\"write\" + callbackName(remap), remap, new Type[] { Constants.TYPE_OBJECT, Constants.TYPE_STRING, remap, remap });\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#writeCallbackSig(Type)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#remap(Type)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static Type remap(Type type) {\r\n    switch(type.getSort()) {\r\n        case Type.OBJECT:\r\n        case Type.ARRAY:\r\n            return Constants.TYPE_OBJECT;\r\n        default:\r\n            return type;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#remap(Type)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#callbackName(Type)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static String callbackName(Type type) {\r\n    return (type == Constants.TYPE_OBJECT) ? \"Object\" : TypeUtils.upperFirst(TypeUtils.getClassName(type));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#callbackName(Type)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer",
    "headType": "class",
    "relation": "extend",
    "tail": "ClassEmitterTransformer",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.transform.impl",
    "tailType": "package"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.transform.impl",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.transform.impl",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.transform.impl.UndeclaredThrowableStrategy",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.transform.impl.UndeclaredThrowableStrategy",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.impl.UndeclaredThrowableStrategy",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2003 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.cglib.transform.impl;\n\nimport org.springframework.cglib.core.ClassGenerator;\nimport org.springframework.cglib.core.ClassTransformer;\nimport org.springframework.cglib.core.DefaultGeneratorStrategy;\nimport org.springframework.cglib.core.GeneratorStrategy;\nimport org.springframework.cglib.core.TypeUtils;\nimport org.springframework.cglib.transform.MethodFilter;\nimport org.springframework.cglib.transform.MethodFilterTransformer;\nimport org.springframework.cglib.transform.TransformingClassGenerator;\n\n/**\n * A {@link GeneratorStrategy} suitable for use with {@link org.springframework.cglib.proxy.Enhancer} which\n * causes all undeclared exceptions thrown from within a proxied method to be wrapped\n * in an alternative exception of your choice.\n */\n@SuppressWarnings({\"rawtypes\", \"unchecked\"})\npublic class UndeclaredThrowableStrategy extends DefaultGeneratorStrategy {\n\n    private Class wrapper;\n\n\t/**\n     * Create a new instance of this strategy.\n     * @param wrapper a class which extends either directly or\n     * indirectly from <code>Throwable</code> and which has at least one\n     * constructor that takes a single argument of type\n     * <code>Throwable</code>, for example\n     * <code>java.lang.reflect.UndeclaredThrowableException.class</code>\n     */\n    public UndeclaredThrowableStrategy(Class wrapper) {\n       this.wrapper = wrapper;\n    }\n\n    private static final MethodFilter TRANSFORM_FILTER = (access, name, desc, signature, exceptions) -> !TypeUtils.isPrivate(access) && name.indexOf('$') < 0;\n\n    @Override\n\tprotected ClassGenerator transform(ClassGenerator cg) throws Exception {\n    \t ClassTransformer   tr = new UndeclaredThrowableTransformer(wrapper);\n         tr = new MethodFilterTransformer(TRANSFORM_FILTER, tr);\n        return new TransformingClassGenerator(cg, tr);\n    }\n}\n\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.UndeclaredThrowableStrategy",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.transform.impl.UndeclaredThrowableStrategy#wrapper",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.transform.impl.UndeclaredThrowableStrategy#wrapper",
    "headType": "field",
    "relation": "haveType",
    "tail": "Class",
    "tailType": "type"
  }
]