[
  {
    "head": "org.springframework.asm.Label#frame",
    "headType": "field",
    "relation": "haveType",
    "tail": "Frame",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.Label",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.Label#nextBasicBlock",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.Label#nextBasicBlock",
    "headType": "field",
    "relation": "haveType",
    "tail": "Label",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.Label",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.Label#outgoingEdges",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.Label#outgoingEdges",
    "headType": "field",
    "relation": "haveType",
    "tail": "Edge",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.Label",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.Label#nextListElement",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.Label#nextListElement",
    "headType": "field",
    "relation": "haveType",
    "tail": "Label",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.Label#getOffset()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the bytecode offset corresponding to this label. This offset is computed from the start\r\n * of the method's bytecode. <i>This method is intended for {@link Attribute} sub classes, and is\r\n * normally not needed by class generators or adapters.</i>\r\n *\r\n * @return the bytecode offset corresponding to this label.\r\n * @throws IllegalStateException if this label is not resolved yet.\r\n */\r\npublic int getOffset() {\r\n    if ((flags & FLAG_RESOLVED) == 0) {\r\n        throw new IllegalStateException(\"Label offset position has not been resolved yet\");\r\n    }\r\n    return bytecodeOffset;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Label",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Label#getOffset()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Label#getCanonicalInstance()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the \"canonical\" {@link Label} instance corresponding to this label's bytecode offset,\r\n * if known, otherwise the label itself. The canonical instance is the first label (in the order\r\n * of their visit by {@link MethodVisitor#visitLabel}) corresponding to this bytecode offset. It\r\n * cannot be known for labels which have not been visited yet.\r\n *\r\n * <p><i>This method should only be used when the {@link MethodWriter#COMPUTE_ALL_FRAMES} option\r\n * is used.</i>\r\n *\r\n * @return the label itself if {@link #frame} is null, otherwise the Label's frame owner. This\r\n *     corresponds to the \"canonical\" label instance described above thanks to the way the label\r\n *     frame is set in {@link MethodWriter#visitLabel}.\r\n */\r\nfinal Label getCanonicalInstance() {\r\n    return frame == null ? this : frame.owner;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Label",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Label#getCanonicalInstance()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Label#addLineNumber(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "// -----------------------------------------------------------------------------------------------\r\n// Methods to manage line numbers\r\n// -----------------------------------------------------------------------------------------------\r\n/**\r\n * Adds a source line number corresponding to this label.\r\n *\r\n * @param lineNumber a source line number (which should be strictly positive).\r\n */\r\nfinal void addLineNumber(final int lineNumber) {\r\n    if ((flags & FLAG_LINE_NUMBER) == 0) {\r\n        flags |= FLAG_LINE_NUMBER;\r\n        this.lineNumber = (short) lineNumber;\r\n    } else {\r\n        if (otherLineNumbers == null) {\r\n            otherLineNumbers = new int[LINE_NUMBERS_CAPACITY_INCREMENT];\r\n        }\r\n        int otherLineNumberIndex = ++otherLineNumbers[0];\r\n        if (otherLineNumberIndex >= otherLineNumbers.length) {\r\n            int[] newLineNumbers = new int[otherLineNumbers.length + LINE_NUMBERS_CAPACITY_INCREMENT];\r\n            System.arraycopy(otherLineNumbers, 0, newLineNumbers, 0, otherLineNumbers.length);\r\n            otherLineNumbers = newLineNumbers;\r\n        }\r\n        otherLineNumbers[otherLineNumberIndex] = lineNumber;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Label",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Label#addLineNumber(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Label#accept(MethodVisitor,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Makes the given visitor visit this label and its source line numbers, if applicable.\r\n *\r\n * @param methodVisitor a method visitor.\r\n * @param visitLineNumbers whether to visit of the label's source line numbers, if any.\r\n */\r\nfinal void accept(final MethodVisitor methodVisitor, final boolean visitLineNumbers) {\r\n    methodVisitor.visitLabel(this);\r\n    if (visitLineNumbers && (flags & FLAG_LINE_NUMBER) != 0) {\r\n        methodVisitor.visitLineNumber(lineNumber & 0xFFFF, this);\r\n        if (otherLineNumbers != null) {\r\n            for (int i = 1; i <= otherLineNumbers[0]; ++i) {\r\n                methodVisitor.visitLineNumber(otherLineNumbers[i], this);\r\n            }\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Label",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Label#accept(MethodVisitor,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Label#put(ByteVector,int,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "// -----------------------------------------------------------------------------------------------\r\n// Methods to compute offsets and to manage forward references\r\n// -----------------------------------------------------------------------------------------------\r\n/**\r\n * Puts a reference to this label in the bytecode of a method. If the bytecode offset of the label\r\n * is known, the relative bytecode offset between the label and the instruction referencing it is\r\n * computed and written directly. Otherwise, a null relative offset is written and a new forward\r\n * reference is declared for this label.\r\n *\r\n * @param code the bytecode of the method. This is where the reference is appended.\r\n * @param sourceInsnBytecodeOffset the bytecode offset of the instruction that contains the\r\n *     reference to be appended.\r\n * @param wideReference whether the reference must be stored in 4 bytes (instead of 2 bytes).\r\n */\r\nfinal void put(final ByteVector code, final int sourceInsnBytecodeOffset, final boolean wideReference) {\r\n    if ((flags & FLAG_RESOLVED) == 0) {\r\n        if (wideReference) {\r\n            addForwardReference(sourceInsnBytecodeOffset, FORWARD_REFERENCE_TYPE_WIDE, code.length);\r\n            code.putInt(-1);\r\n        } else {\r\n            addForwardReference(sourceInsnBytecodeOffset, FORWARD_REFERENCE_TYPE_SHORT, code.length);\r\n            code.putShort(-1);\r\n        }\r\n    } else {\r\n        if (wideReference) {\r\n            code.putInt(bytecodeOffset - sourceInsnBytecodeOffset);\r\n        } else {\r\n            code.putShort(bytecodeOffset - sourceInsnBytecodeOffset);\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Label",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Label#put(ByteVector,int,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Label#put(ByteVector)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Puts a reference to this label in the <i>stack map table</i> of a method. If the bytecode\r\n * offset of the label is known, it is written directly. Otherwise, a null relative offset is\r\n * written and a new forward reference is declared for this label.\r\n *\r\n * @param stackMapTableEntries the stack map table where the label offset must be added.\r\n */\r\nfinal void put(final ByteVector stackMapTableEntries) {\r\n    if ((flags & FLAG_RESOLVED) == 0) {\r\n        addForwardReference(0, FORWARD_REFERENCE_TYPE_STACK_MAP, stackMapTableEntries.length);\r\n    }\r\n    stackMapTableEntries.putShort(bytecodeOffset);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Label",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Label#put(ByteVector)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Label#addForwardReference(int,int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Adds a forward reference to this label. This method must be called only for a true forward\r\n * reference, i.e. only if this label is not resolved yet. For backward references, the relative\r\n * bytecode offset of the reference can be, and must be, computed and stored directly.\r\n *\r\n * @param sourceInsnBytecodeOffset the bytecode offset of the instruction that contains the\r\n *     reference stored at referenceHandle.\r\n * @param referenceType either {@link #FORWARD_REFERENCE_TYPE_SHORT} or {@link\r\n *     #FORWARD_REFERENCE_TYPE_WIDE}.\r\n * @param referenceHandle the offset in the bytecode where the forward reference value must be\r\n *     stored.\r\n */\r\nprivate void addForwardReference(final int sourceInsnBytecodeOffset, final int referenceType, final int referenceHandle) {\r\n    if (forwardReferences == null) {\r\n        forwardReferences = new int[FORWARD_REFERENCES_CAPACITY_INCREMENT];\r\n    }\r\n    int lastElementIndex = forwardReferences[0];\r\n    if (lastElementIndex + 2 >= forwardReferences.length) {\r\n        int[] newValues = new int[forwardReferences.length + FORWARD_REFERENCES_CAPACITY_INCREMENT];\r\n        System.arraycopy(forwardReferences, 0, newValues, 0, forwardReferences.length);\r\n        forwardReferences = newValues;\r\n    }\r\n    forwardReferences[++lastElementIndex] = sourceInsnBytecodeOffset;\r\n    forwardReferences[++lastElementIndex] = referenceType | referenceHandle;\r\n    forwardReferences[0] = lastElementIndex;\r\n}",
    "tailType": "method_code"
  }
]