[
  {
    "head": "org.springframework.core.io.AbstractResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.AbstractResource#readableChannel()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.AbstractResource#readableChannel()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.AbstractResource#contentLength()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This method reads the entire InputStream to determine the content length.\r\n * <p>For a custom subclass of {@code InputStreamResource}, we strongly\r\n * recommend overriding this method with a more optimal implementation, for example,\r\n * checking File length, or possibly simply returning -1 if the stream can\r\n * only be read once.\r\n * @see #getInputStream()\r\n */\r\n@Override\r\npublic long contentLength() throws IOException {\r\n    InputStream is = getInputStream();\r\n    try {\r\n        long size = 0;\r\n        byte[] buf = new byte[256];\r\n        int read;\r\n        while ((read = is.read(buf)) != -1) {\r\n            size += read;\r\n        }\r\n        return size;\r\n    } finally {\r\n        try {\r\n            is.close();\r\n        } catch (IOException ex) {\r\n            debug(() -> \"Could not close content-length InputStream for \" + getDescription(), ex);\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.AbstractResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.AbstractResource#contentLength()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.AbstractResource#contentLength()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.AbstractResource#lastModified()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation checks the timestamp of the underlying File,\r\n * if available.\r\n * @see #getFileForLastModifiedCheck()\r\n */\r\n@Override\r\npublic long lastModified() throws IOException {\r\n    File fileToCheck = getFileForLastModifiedCheck();\r\n    long lastModified = fileToCheck.lastModified();\r\n    if (lastModified == 0L && !fileToCheck.exists()) {\r\n        throw new FileNotFoundException(getDescription() + \" cannot be resolved in the file system for checking its last-modified timestamp\");\r\n    }\r\n    return lastModified;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.AbstractResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.AbstractResource#lastModified()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.AbstractResource#lastModified()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.AbstractResource#getFileForLastModifiedCheck()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine the File to use for timestamp checking.\r\n * <p>The default implementation delegates to {@link #getFile()}.\r\n * @return the File to use for timestamp checking (never {@code null})\r\n * @throws FileNotFoundException if the resource cannot be resolved as\r\n * an absolute file path, i.e. is not available in a file system\r\n * @throws IOException in case of general resolution/reading failures\r\n */\r\nprotected File getFileForLastModifiedCheck() throws IOException {\r\n    return getFile();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.AbstractResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.AbstractResource#getFileForLastModifiedCheck()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.AbstractResource#createRelative(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation throws a FileNotFoundException, assuming\r\n * that relative resources cannot be created for this resource.\r\n */\r\n@Override\r\npublic Resource createRelative(String relativePath) throws IOException {\r\n    throw new FileNotFoundException(\"Cannot create a relative resource for \" + getDescription());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.AbstractResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.AbstractResource#createRelative(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.AbstractResource#createRelative(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.AbstractResource#getFilename()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation always returns {@code null},\r\n * assuming that this resource type does not have a filename.\r\n */\r\n@Override\r\n@Nullable\r\npublic String getFilename() {\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.AbstractResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.AbstractResource#getFilename()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.AbstractResource#getFilename()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.AbstractResource#getFilename()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.AbstractResource#debug(Supplier<String>,Throwable)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Lazily access the logger for debug logging in case of an exception.\r\n */\r\nprivate void debug(Supplier<String> message, Throwable ex) {\r\n    Log logger = LogFactory.getLog(getClass());\r\n    if (logger.isDebugEnabled()) {\r\n        logger.debug(message.get(), ex);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.AbstractResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.AbstractResource#debug(Supplier<String>,Throwable)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.AbstractResource#equals(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation compares description strings.\r\n * @see #getDescription()\r\n */\r\n@Override\r\npublic boolean equals(@Nullable Object other) {\r\n    return (this == other || (other instanceof Resource that && getDescription().equals(that.getDescription())));\r\n}",
    "tailType": "method_code"
  }
]