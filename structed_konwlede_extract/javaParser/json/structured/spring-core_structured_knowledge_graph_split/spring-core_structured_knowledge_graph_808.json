[
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#getAnnotationArray(String,Class<T>)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#getDefaultValue(String,Class<T>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic <T> Optional<T> getDefaultValue(String attributeName, Class<T> type) {\r\n    int attributeIndex = getAttributeIndex(attributeName, false);\r\n    if (attributeIndex == -1) {\r\n        return Optional.empty();\r\n    }\r\n    Method attribute = this.mapping.getAttributes().get(attributeIndex);\r\n    return Optional.ofNullable(adapt(attribute, attribute.getDefaultValue(), type));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.TypeMappedAnnotation#getDefaultValue(String,Class<T>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#getDefaultValue(String,Class<T>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#filterAttributes(Predicate<String>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic MergedAnnotation<A> filterAttributes(Predicate<String> predicate) {\r\n    if (this.attributeFilter != null) {\r\n        predicate = this.attributeFilter.and(predicate);\r\n    }\r\n    return new TypeMappedAnnotation<>(this.mapping, this.classLoader, this.source, this.rootAttributes, this.valueExtractor, this.aggregateIndex, this.useMergedValues, predicate, this.resolvedRootMirrors, this.resolvedMirrors);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.TypeMappedAnnotation#filterAttributes(Predicate<String>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#filterAttributes(Predicate<String>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#withNonMergedAttributes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic MergedAnnotation<A> withNonMergedAttributes() {\r\n    return new TypeMappedAnnotation<>(this.mapping, this.classLoader, this.source, this.rootAttributes, this.valueExtractor, this.aggregateIndex, false, this.attributeFilter, this.resolvedRootMirrors, this.resolvedMirrors);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.TypeMappedAnnotation#withNonMergedAttributes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#withNonMergedAttributes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#asMap(Adapt)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Map<String, Object> asMap(Adapt... adaptations) {\r\n    return Collections.unmodifiableMap(asMap(mergedAnnotation -> new LinkedHashMap<>(), adaptations));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.TypeMappedAnnotation#asMap(Adapt)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#asMap(Adapt)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#asMap(Function<MergedAnnotation<?>,T>,Adapt)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic <T extends Map<String, Object>> T asMap(Function<MergedAnnotation<?>, T> factory, Adapt... adaptations) {\r\n    T map = factory.apply(this);\r\n    Assert.state(map != null, \"Factory used to create MergedAnnotation Map must not return null\");\r\n    AttributeMethods attributes = this.mapping.getAttributes();\r\n    for (int i = 0; i < attributes.size(); i++) {\r\n        Method attribute = attributes.get(i);\r\n        Object value = (isFiltered(attribute.getName()) ? null : getValue(i, getTypeForMapOptions(attribute, adaptations)));\r\n        if (value != null) {\r\n            map.put(attribute.getName(), adaptValueForMapOptions(attribute, value, map.getClass(), factory, adaptations));\r\n        }\r\n    }\r\n    return map;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.TypeMappedAnnotation#asMap(Function<MergedAnnotation<?>,T>,Adapt)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#asMap(Function<MergedAnnotation<?>,T>,Adapt)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#getTypeForMapOptions(Method,Adapt[])",
    "headType": "method",
    "relation": "provide",
    "tail": "private Class<?> getTypeForMapOptions(Method attribute, Adapt[] adaptations) {\r\n    Class<?> attributeType = attribute.getReturnType();\r\n    Class<?> componentType = (attributeType.isArray() ? attributeType.componentType() : attributeType);\r\n    if (Adapt.CLASS_TO_STRING.isIn(adaptations) && componentType == Class.class) {\r\n        return (attributeType.isArray() ? String[].class : String.class);\r\n    }\r\n    return Object.class;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.TypeMappedAnnotation#getTypeForMapOptions(Method,Adapt[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#adaptValueForMapOptions(Method,Object,Class<?>,Function<MergedAnnotation<?>,T>,Adapt[])",
    "headType": "method",
    "relation": "provide",
    "tail": "private <T extends Map<String, Object>> Object adaptValueForMapOptions(Method attribute, Object value, Class<?> mapType, Function<MergedAnnotation<?>, T> factory, Adapt[] adaptations) {\r\n    if (value instanceof MergedAnnotation<?> annotation) {\r\n        return (Adapt.ANNOTATION_TO_MAP.isIn(adaptations) ? annotation.asMap(factory, adaptations) : annotation.synthesize());\r\n    }\r\n    if (value instanceof MergedAnnotation<?>[] annotations) {\r\n        if (Adapt.ANNOTATION_TO_MAP.isIn(adaptations)) {\r\n            Object result = Array.newInstance(mapType, annotations.length);\r\n            for (int i = 0; i < annotations.length; i++) {\r\n                Array.set(result, i, annotations[i].asMap(factory, adaptations));\r\n            }\r\n            return result;\r\n        }\r\n        Object result = Array.newInstance(attribute.getReturnType().componentType(), annotations.length);\r\n        for (int i = 0; i < annotations.length; i++) {\r\n            Array.set(result, i, annotations[i].synthesize());\r\n        }\r\n        return result;\r\n    }\r\n    return value;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.TypeMappedAnnotation#adaptValueForMapOptions(Method,Object,Class<?>,Function<MergedAnnotation<?>,T>,Adapt[])",
    "tailType": "method"
  }
]