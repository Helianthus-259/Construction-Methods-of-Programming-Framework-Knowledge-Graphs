[
  {
    "head": "org.springframework.util.CollectionUtilsTests#containsInstanceWithInstancesThatAreEqualButDistinct()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid containsInstanceWithInstancesThatAreEqualButDistinct() {\r\n    List<Instance> list = new ArrayList<>();\r\n    list.add(new Instance(\"fiona\"));\r\n    assertThat(CollectionUtils.containsInstance(list, new Instance(\"fiona\"))).as(\"Must return false if instance is not in the supplied Collection argument\").isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CollectionUtilsTests#containsInstanceWithInstancesThatAreEqualButDistinct()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests#containsInstanceWithInstancesThatAreEqualButDistinct()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests#containsInstanceWithSameInstance()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid containsInstanceWithSameInstance() {\r\n    List<Instance> list = new ArrayList<>();\r\n    list.add(new Instance(\"apple\"));\r\n    Instance instance = new Instance(\"fiona\");\r\n    list.add(instance);\r\n    assertThat(CollectionUtils.containsInstance(list, instance)).as(\"Must return true if instance is in the supplied Collection argument\").isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CollectionUtilsTests#containsInstanceWithSameInstance()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests#containsInstanceWithSameInstance()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests#containsInstanceWithNullInstance()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid containsInstanceWithNullInstance() {\r\n    List<Instance> list = new ArrayList<>();\r\n    list.add(new Instance(\"apple\"));\r\n    list.add(new Instance(\"fiona\"));\r\n    assertThat(CollectionUtils.containsInstance(list, null)).as(\"Must return false if null instance is supplied\").isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CollectionUtilsTests#containsInstanceWithNullInstance()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests#containsInstanceWithNullInstance()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests#findFirstMatch()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid findFirstMatch() {\r\n    List<String> source = new ArrayList<>();\r\n    source.add(\"abc\");\r\n    source.add(\"def\");\r\n    source.add(\"ghi\");\r\n    List<String> candidates = new ArrayList<>();\r\n    candidates.add(\"xyz\");\r\n    candidates.add(\"def\");\r\n    candidates.add(\"abc\");\r\n    assertThat(CollectionUtils.findFirstMatch(source, candidates)).isEqualTo(\"def\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CollectionUtilsTests#findFirstMatch()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests#findFirstMatch()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests#findValueOfType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid findValueOfType() {\r\n    List<Integer> integerList = new ArrayList<>();\r\n    integerList.add(1);\r\n    assertThat(CollectionUtils.findValueOfType(integerList, Integer.class)).isEqualTo(1);\r\n    Set<Integer> integerSet = new HashSet<>();\r\n    integerSet.add(2);\r\n    assertThat(CollectionUtils.findValueOfType(integerSet, Integer.class)).isEqualTo(2);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CollectionUtilsTests#findValueOfType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests#findValueOfType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests#findValueOfTypeWithEmptyCollection()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid findValueOfTypeWithEmptyCollection() {\r\n    List<Integer> emptyList = new ArrayList<>();\r\n    assertThat(CollectionUtils.findValueOfType(emptyList, Integer.class)).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CollectionUtilsTests#findValueOfTypeWithEmptyCollection()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests#findValueOfTypeWithEmptyCollection()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests#findValueOfTypeWithMoreThanOneValue()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid findValueOfTypeWithMoreThanOneValue() {\r\n    List<Integer> integerList = new ArrayList<>();\r\n    integerList.add(1);\r\n    integerList.add(2);\r\n    assertThat(CollectionUtils.findValueOfType(integerList, Integer.class)).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CollectionUtilsTests#findValueOfTypeWithMoreThanOneValue()",
    "tailType": "method"
  }
]