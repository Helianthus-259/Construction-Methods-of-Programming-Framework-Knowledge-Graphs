[
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.generate.DefaultMethodReferenceTests#TEST_CLASS_NAME",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests#TEST_CLASS_NAME",
    "headType": "field",
    "relation": "haveType",
    "tail": "ClassName",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.generate.DefaultMethodReferenceTests#INITIALIZER_CLASS_NAME",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests#INITIALIZER_CLASS_NAME",
    "headType": "field",
    "relation": "haveType",
    "tail": "ClassName",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests#createWithStringCreatesMethodReference()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid createWithStringCreatesMethodReference() {\r\n    MethodSpec method = createTestMethod(\"someMethod\", new TypeName[0]);\r\n    MethodReference reference = new DefaultMethodReference(method, null);\r\n    assertThat(reference).hasToString(EXPECTED_ANONYMOUS_INSTANCE);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.DefaultMethodReferenceTests#createWithStringCreatesMethodReference()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests#createWithStringCreatesMethodReference()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests#createWithClassNameAndStringCreateMethodReference()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid createWithClassNameAndStringCreateMethodReference() {\r\n    ClassName declaringClass = ClassName.get(DefaultMethodReferenceTests.class);\r\n    MethodReference reference = createMethodReference(\"someMethod\", new TypeName[0], declaringClass);\r\n    assertThat(reference).hasToString(EXPECTED_DECLARED_INSTANCE);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.DefaultMethodReferenceTests#createWithClassNameAndStringCreateMethodReference()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests#createWithClassNameAndStringCreateMethodReference()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests#createWithStaticAndClassAndStringCreatesMethodReference()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid createWithStaticAndClassAndStringCreatesMethodReference() {\r\n    ClassName declaringClass = ClassName.get(DefaultMethodReferenceTests.class);\r\n    MethodReference reference = createStaticMethodReference(\"someMethod\", declaringClass);\r\n    assertThat(reference).hasToString(EXPECTED_STATIC);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.DefaultMethodReferenceTests#createWithStaticAndClassAndStringCreatesMethodReference()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests#createWithStaticAndClassAndStringCreatesMethodReference()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests#toCodeBlock()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid toCodeBlock() {\r\n    assertThat(createLocalMethodReference(\"methodName\").toCodeBlock()).isEqualTo(CodeBlock.of(\"this::methodName\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.DefaultMethodReferenceTests#toCodeBlock()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests#toCodeBlock()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests#toCodeBlockWithStaticMethod()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid toCodeBlockWithStaticMethod() {\r\n    assertThat(createStaticMethodReference(\"methodName\", TEST_CLASS_NAME).toCodeBlock()).isEqualTo(CodeBlock.of(\"com.example.Test::methodName\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.DefaultMethodReferenceTests#toCodeBlockWithStaticMethod()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests#toCodeBlockWithStaticMethod()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests#toCodeBlockWithStaticMethodRequiresDeclaringClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid toCodeBlockWithStaticMethodRequiresDeclaringClass() {\r\n    MethodSpec method = createTestMethod(\"methodName\", new TypeName[0], Modifier.STATIC);\r\n    MethodReference methodReference = new DefaultMethodReference(method, null);\r\n    assertThatIllegalStateException().isThrownBy(methodReference::toCodeBlock).withMessage(\"Static method reference must define a declaring class\");\r\n}",
    "tailType": "method_code"
  }
]