[
  {
    "head": "org.springframework.aot.hint.ReflectionHints",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ReflectionHints#registerMethod(Method,ExecutableMode)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHints#mapParameters(Executable)",
    "headType": "method",
    "relation": "provide",
    "tail": "private List<TypeReference> mapParameters(Executable executable) {\r\n    return TypeReference.listOf(executable.getParameterTypes());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHints",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ReflectionHints#mapParameters(Executable)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.CompositeIteratorTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.CompositeIteratorTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.util.Arrays;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.NoSuchElementException;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatExceptionOfType;\nimport static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\nimport static org.assertj.core.api.Assertions.assertThatIllegalStateException;\n\n/**\n * Test case for {@link CompositeIterator}.\n *\n * @author Erwin Vervaet\n * @author Juergen Hoeller\n */\nclass CompositeIteratorTests {\n\n\t@Test\n\tvoid noIterators() {\n\t\tCompositeIterator<String> it = new CompositeIterator<>();\n\t\tassertThat(it.hasNext()).isFalse();\n\t\tassertThatExceptionOfType(NoSuchElementException.class).isThrownBy(\n\t\t\t\tit::next);\n\t}\n\n\t@Test\n\tvoid singleIterator() {\n\t\tCompositeIterator<String> it = new CompositeIterator<>();\n\t\tit.add(Arrays.asList(\"0\", \"1\").iterator());\n\t\tfor (int i = 0; i < 2; i++) {\n\t\t\tassertThat(it.hasNext()).isTrue();\n\t\t\tassertThat(it.next()).isEqualTo(String.valueOf(i));\n\t\t}\n\t\tassertThat(it.hasNext()).isFalse();\n\t\tassertThatExceptionOfType(NoSuchElementException.class).isThrownBy(\n\t\t\t\tit::next);\n\t}\n\n\t@Test\n\tvoid multipleIterators() {\n\t\tCompositeIterator<String> it = new CompositeIterator<>();\n\t\tit.add(Arrays.asList(\"0\", \"1\").iterator());\n\t\tit.add(List.of(\"2\").iterator());\n\t\tit.add(Arrays.asList(\"3\", \"4\").iterator());\n\t\tfor (int i = 0; i < 5; i++) {\n\t\t\tassertThat(it.hasNext()).isTrue();\n\t\t\tassertThat(it.next()).isEqualTo(String.valueOf(i));\n\t\t}\n\t\tassertThat(it.hasNext()).isFalse();\n\n\t\tassertThatExceptionOfType(NoSuchElementException.class).isThrownBy(\n\t\t\t\tit::next);\n\t}\n\n\t@Test\n\tvoid inUse() {\n\t\tList<String> list = Arrays.asList(\"0\", \"1\");\n\t\tCompositeIterator<String> it = new CompositeIterator<>();\n\t\tit.add(list.iterator());\n\t\tit.hasNext();\n\t\tassertThatIllegalStateException().isThrownBy(() ->\n\t\t\t\tit.add(list.iterator()));\n\t\tCompositeIterator<String> it2 = new CompositeIterator<>();\n\t\tit2.add(list.iterator());\n\t\tit2.next();\n\t\tassertThatIllegalStateException().isThrownBy(() ->\n\t\t\t\tit2.add(list.iterator()));\n\t}\n\n\t@Test\n\tvoid duplicateIterators() {\n\t\tList<String> list = Arrays.asList(\"0\", \"1\");\n\t\tIterator<String> iterator = list.iterator();\n\t\tCompositeIterator<String> it = new CompositeIterator<>();\n\t\tit.add(iterator);\n\t\tit.add(list.iterator());\n\t\tassertThatIllegalArgumentException().isThrownBy(() ->\n\t\t\t\tit.add(iterator));\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.CompositeIteratorTests#noIterators()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid noIterators() {\r\n    CompositeIterator<String> it = new CompositeIterator<>();\r\n    assertThat(it.hasNext()).isFalse();\r\n    assertThatExceptionOfType(NoSuchElementException.class).isThrownBy(it::next);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CompositeIteratorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CompositeIteratorTests#noIterators()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CompositeIteratorTests#noIterators()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CompositeIteratorTests#singleIterator()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid singleIterator() {\r\n    CompositeIterator<String> it = new CompositeIterator<>();\r\n    it.add(Arrays.asList(\"0\", \"1\").iterator());\r\n    for (int i = 0; i < 2; i++) {\r\n        assertThat(it.hasNext()).isTrue();\r\n        assertThat(it.next()).isEqualTo(String.valueOf(i));\r\n    }\r\n    assertThat(it.hasNext()).isFalse();\r\n    assertThatExceptionOfType(NoSuchElementException.class).isThrownBy(it::next);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CompositeIteratorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CompositeIteratorTests#singleIterator()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CompositeIteratorTests#singleIterator()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CompositeIteratorTests#multipleIterators()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid multipleIterators() {\r\n    CompositeIterator<String> it = new CompositeIterator<>();\r\n    it.add(Arrays.asList(\"0\", \"1\").iterator());\r\n    it.add(List.of(\"2\").iterator());\r\n    it.add(Arrays.asList(\"3\", \"4\").iterator());\r\n    for (int i = 0; i < 5; i++) {\r\n        assertThat(it.hasNext()).isTrue();\r\n        assertThat(it.next()).isEqualTo(String.valueOf(i));\r\n    }\r\n    assertThat(it.hasNext()).isFalse();\r\n    assertThatExceptionOfType(NoSuchElementException.class).isThrownBy(it::next);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CompositeIteratorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CompositeIteratorTests#multipleIterators()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CompositeIteratorTests#multipleIterators()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CompositeIteratorTests#inUse()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid inUse() {\r\n    List<String> list = Arrays.asList(\"0\", \"1\");\r\n    CompositeIterator<String> it = new CompositeIterator<>();\r\n    it.add(list.iterator());\r\n    it.hasNext();\r\n    assertThatIllegalStateException().isThrownBy(() -> it.add(list.iterator()));\r\n    CompositeIterator<String> it2 = new CompositeIterator<>();\r\n    it2.add(list.iterator());\r\n    it2.next();\r\n    assertThatIllegalStateException().isThrownBy(() -> it2.add(list.iterator()));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CompositeIteratorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CompositeIteratorTests#inUse()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CompositeIteratorTests#inUse()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CompositeIteratorTests#duplicateIterators()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid duplicateIterators() {\r\n    List<String> list = Arrays.asList(\"0\", \"1\");\r\n    Iterator<String> iterator = list.iterator();\r\n    CompositeIterator<String> it = new CompositeIterator<>();\r\n    it.add(iterator);\r\n    it.add(list.iterator());\r\n    assertThatIllegalArgumentException().isThrownBy(() -> it.add(iterator));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CompositeIteratorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CompositeIteratorTests#duplicateIterators()",
    "tailType": "method"
  }
]