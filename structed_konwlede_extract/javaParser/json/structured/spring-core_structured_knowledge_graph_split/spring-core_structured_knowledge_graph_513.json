[
  {
    "head": "org.springframework.asm.LabelEntry",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.LabelEntry#label",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.LabelEntry#label",
    "headType": "field",
    "relation": "haveType",
    "tail": "Label",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.LabelEntry",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.LabelEntry#next",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.LabelEntry#next",
    "headType": "field",
    "relation": "haveType",
    "tail": "LabelEntry",
    "tailType": "type"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.testfixture.net",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.testfixture.net",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.testfixture.net.TestSocketUtils",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.testfixture.net.TestSocketUtils",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.testfixture.net;\n\nimport java.net.InetAddress;\nimport java.net.ServerSocket;\nimport java.util.Random;\n\nimport javax.net.ServerSocketFactory;\n\n/**\n * Simple utility for finding available TCP ports on {@code localhost} for use in\n * integration testing scenarios.\n *\n * <p>{@code SocketUtils} was removed from the public API in {@code spring-core}\n * in Spring Framework 6.0 and reintroduced as {@code TestSocketUtils}, which is\n * made available to all tests in Spring Framework's test suite as a Gradle\n * <em>test fixture</em>.\n *\n * <p>{@code SocketUtils} was introduced in Spring Framework 4.0, primarily to\n * assist in writing integration tests which start an external server on an\n * available random port. However, these utilities make no guarantee about the\n * subsequent availability of a given port and are therefore unreliable. Instead\n * of using {@code TestSocketUtils} to find an available local port for a server,\n * it is recommended that you rely on a server's ability to start on a random port\n * that it selects or is assigned by the operating system. To interact with that\n * server, you should query the server for the port it is currently using.\n *\n * @author Sam Brannen\n * @author Ben Hale\n * @author Arjen Poutsma\n * @author Gunnar Hillert\n * @author Gary Russell\n * @since 6.0\n */\npublic abstract class TestSocketUtils {\n\n\t/**\n\t * The minimum value for port ranges used when finding an available TCP port.\n\t */\n\tprivate static final int PORT_RANGE_MIN = 1024;\n\n\t/**\n\t * The maximum value for port ranges used when finding an available TCP port.\n\t */\n\tprivate static final int PORT_RANGE_MAX = 65535;\n\n\tprivate static final int PORT_RANGE = PORT_RANGE_MAX - PORT_RANGE_MIN;\n\n\tprivate static final int MAX_ATTEMPTS = 1_000;\n\n\tprivate static final Random random = new Random(System.nanoTime());\n\n\n\t/**\n\t * Find an available TCP port randomly selected from the range [1024, 65535].\n\t * @return an available TCP port number\n\t * @throws IllegalStateException if no available port could be found\n\t */\n\tpublic static int findAvailableTcpPort() {\n\t\tint candidatePort;\n\t\tint searchCounter = 0;\n\t\tdo {\n\t\t\tif (searchCounter > MAX_ATTEMPTS) {\n\t\t\t\tthrow new IllegalStateException(String.format(\n\t\t\t\t\t\t\"Could not find an available TCP port in the range [%d, %d] after %d attempts\",\n\t\t\t\t\t\tPORT_RANGE_MIN, PORT_RANGE_MAX, MAX_ATTEMPTS));\n\t\t\t}\n\t\t\tcandidatePort = PORT_RANGE_MIN + random.nextInt(PORT_RANGE + 1);\n\t\t\tsearchCounter++;\n\t\t}\n\t\twhile (!isPortAvailable(candidatePort));\n\n\t\treturn candidatePort;\n\t}\n\n\t/**\n\t * Determine if the specified TCP port is currently available on {@code localhost}.\n\t */\n\tprivate static boolean isPortAvailable(int port) {\n\t\ttry {\n\t\t\tServerSocket serverSocket = ServerSocketFactory.getDefault().createServerSocket(\n\t\t\t\t\tport, 1, InetAddress.getByName(\"localhost\"));\n\t\t\tserverSocket.close();\n\t\t\treturn true;\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.testfixture.net.TestSocketUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.testfixture.net.TestSocketUtils#PORT_RANGE_MIN",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.testfixture.net.TestSocketUtils#PORT_RANGE_MIN",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.testfixture.net.TestSocketUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.testfixture.net.TestSocketUtils#PORT_RANGE_MAX",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.testfixture.net.TestSocketUtils#PORT_RANGE_MAX",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.testfixture.net.TestSocketUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.testfixture.net.TestSocketUtils#PORT_RANGE",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.testfixture.net.TestSocketUtils#PORT_RANGE",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.testfixture.net.TestSocketUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.testfixture.net.TestSocketUtils#MAX_ATTEMPTS",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.testfixture.net.TestSocketUtils#MAX_ATTEMPTS",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.testfixture.net.TestSocketUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.testfixture.net.TestSocketUtils#random",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.testfixture.net.TestSocketUtils#random",
    "headType": "field",
    "relation": "haveType",
    "tail": "Random",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.testfixture.net.TestSocketUtils#findAvailableTcpPort()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Find an available TCP port randomly selected from the range [1024, 65535].\r\n * @return an available TCP port number\r\n * @throws IllegalStateException if no available port could be found\r\n */\r\npublic static int findAvailableTcpPort() {\r\n    int candidatePort;\r\n    int searchCounter = 0;\r\n    do {\r\n        if (searchCounter > MAX_ATTEMPTS) {\r\n            throw new IllegalStateException(String.format(\"Could not find an available TCP port in the range [%d, %d] after %d attempts\", PORT_RANGE_MIN, PORT_RANGE_MAX, MAX_ATTEMPTS));\r\n        }\r\n        candidatePort = PORT_RANGE_MIN + random.nextInt(PORT_RANGE + 1);\r\n        searchCounter++;\r\n    } while (!isPortAvailable(candidatePort));\r\n    return candidatePort;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.net.TestSocketUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.net.TestSocketUtils#findAvailableTcpPort()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.net.TestSocketUtils#isPortAvailable(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine if the specified TCP port is currently available on {@code localhost}.\r\n */\r\nprivate static boolean isPortAvailable(int port) {\r\n    try {\r\n        ServerSocket serverSocket = ServerSocketFactory.getDefault().createServerSocket(port, 1, InetAddress.getByName(\"localhost\"));\r\n        serverSocket.close();\r\n        return true;\r\n    } catch (Exception ex) {\r\n        return false;\r\n    }\r\n}",
    "tailType": "method_code"
  }
]