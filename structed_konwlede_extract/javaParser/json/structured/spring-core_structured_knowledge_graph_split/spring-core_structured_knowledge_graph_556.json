[
  {
    "head": "org.springframework.cglib.core.AbstractClassGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.AbstractClassGenerator#getClassName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.AbstractClassGenerator#setClassName(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void setClassName(String className) {\r\n    this.className = className;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.AbstractClassGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.AbstractClassGenerator#setClassName(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.AbstractClassGenerator#generateClassName(Predicate)",
    "headType": "method",
    "relation": "provide",
    "tail": "private String generateClassName(Predicate nameTestPredicate) {\r\n    return namingPolicy.getClassName(namePrefix, source.name, key, nameTestPredicate);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.AbstractClassGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.AbstractClassGenerator#generateClassName(Predicate)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.AbstractClassGenerator#setClassLoader(ClassLoader)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Set the <code>ClassLoader</code> in which the class will be generated.\r\n * Concrete subclasses of <code>AbstractClassGenerator</code> (such as <code>Enhancer</code>)\r\n * will try to choose an appropriate default if this is unset.\r\n * <p>\r\n * Classes are cached per-<code>ClassLoader</code> using a <code>WeakHashMap</code>, to allow\r\n * the generated classes to be removed when the associated loader is garbage collected.\r\n * @param classLoader the loader to generate the new class with, or null to use the default\r\n */\r\npublic void setClassLoader(ClassLoader classLoader) {\r\n    this.classLoader = classLoader;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.AbstractClassGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.AbstractClassGenerator#setClassLoader(ClassLoader)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.AbstractClassGenerator#setContextClass(Class)",
    "headType": "method",
    "relation": "provide",
    "tail": "// SPRING PATCH BEGIN\r\npublic void setContextClass(Class contextClass) {\r\n    this.contextClass = contextClass;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.AbstractClassGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.AbstractClassGenerator#setContextClass(Class)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.AbstractClassGenerator#setNamingPolicy(NamingPolicy)",
    "headType": "method",
    "relation": "provide",
    "tail": "// SPRING PATCH END\r\n/**\r\n * Override the default naming policy.\r\n * @param namingPolicy the custom policy, or null to use the default\r\n * @see DefaultNamingPolicy\r\n */\r\npublic void setNamingPolicy(NamingPolicy namingPolicy) {\r\n    if (namingPolicy == null) {\r\n        namingPolicy = DefaultNamingPolicy.INSTANCE;\r\n    }\r\n    this.namingPolicy = namingPolicy;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.AbstractClassGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.AbstractClassGenerator#setNamingPolicy(NamingPolicy)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.AbstractClassGenerator#getNamingPolicy()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * @see #setNamingPolicy\r\n */\r\npublic NamingPolicy getNamingPolicy() {\r\n    return namingPolicy;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.AbstractClassGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.AbstractClassGenerator#getNamingPolicy()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.AbstractClassGenerator#setUseCache(boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Whether use and update the static cache of generated classes\r\n * for a class with the same properties. Default is <code>true</code>.\r\n */\r\npublic void setUseCache(boolean useCache) {\r\n    this.useCache = useCache;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.AbstractClassGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.AbstractClassGenerator#setUseCache(boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.AbstractClassGenerator#getUseCache()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * @see #setUseCache\r\n */\r\npublic boolean getUseCache() {\r\n    return useCache;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.AbstractClassGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.AbstractClassGenerator#getUseCache()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.AbstractClassGenerator#setAttemptLoad(boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * If set, CGLIB will attempt to load classes from the specified\r\n * <code>ClassLoader</code> before generating them. Because generated\r\n * class names are not guaranteed to be unique, the default is <code>false</code>.\r\n */\r\npublic void setAttemptLoad(boolean attemptLoad) {\r\n    this.attemptLoad = attemptLoad;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.AbstractClassGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.AbstractClassGenerator#setAttemptLoad(boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.AbstractClassGenerator#getAttemptLoad()",
    "headType": "method",
    "relation": "provide",
    "tail": "public boolean getAttemptLoad() {\r\n    return attemptLoad;\r\n}",
    "tailType": "method_code"
  }
]