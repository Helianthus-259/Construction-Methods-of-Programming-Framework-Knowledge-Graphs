[
  {
    "head": "org.springframework.core.convert.support.StreamConverter#matchesToStream(TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Validate that the specified {@code sourceType} can be converted to a {@link Collection} of\r\n * the type of the stream elements.\r\n * @param elementType the type of the stream elements\r\n * @param sourceType the type to convert from\r\n */\r\npublic boolean matchesToStream(@Nullable TypeDescriptor elementType, TypeDescriptor sourceType) {\r\n    TypeDescriptor collectionOfElement = TypeDescriptor.collection(Collection.class, elementType);\r\n    return this.conversionService.canConvert(sourceType, collectionOfElement);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.StreamConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.StreamConverter#matchesToStream(TypeDescriptor,TypeDescriptor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.StreamConverter#convert(Object,TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic Object convert(@Nullable Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {\r\n    if (sourceType.isAssignableTo(STREAM_TYPE)) {\r\n        return convertFromStream((Stream<?>) source, sourceType, targetType);\r\n    }\r\n    if (targetType.isAssignableTo(STREAM_TYPE)) {\r\n        return convertToStream(source, sourceType, targetType);\r\n    }\r\n    // Should not happen\r\n    throw new IllegalStateException(\"Unexpected source/target types\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.StreamConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.StreamConverter#convert(Object,TypeDescriptor,TypeDescriptor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.StreamConverter#convert(Object,TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.StreamConverter#convert(Object,TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.StreamConverter#convertFromStream(Stream<?>,TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprivate Object convertFromStream(@Nullable Stream<?> source, TypeDescriptor streamType, TypeDescriptor targetType) {\r\n    List<Object> content = (source != null ? source.collect(Collectors.<Object>toList()) : Collections.emptyList());\r\n    TypeDescriptor listType = TypeDescriptor.collection(List.class, streamType.getElementTypeDescriptor());\r\n    return this.conversionService.convert(content, listType, targetType);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.StreamConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.StreamConverter#convertFromStream(Stream<?>,TypeDescriptor,TypeDescriptor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.StreamConverter#convertFromStream(Stream<?>,TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.StreamConverter#convertToStream(Object,TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "provide",
    "tail": "private Object convertToStream(@Nullable Object source, TypeDescriptor sourceType, TypeDescriptor streamType) {\r\n    TypeDescriptor targetCollection = TypeDescriptor.collection(List.class, streamType.getElementTypeDescriptor());\r\n    List<?> target = (List<?>) this.conversionService.convert(source, sourceType, targetCollection);\r\n    if (target == null) {\r\n        target = Collections.emptyList();\r\n    }\r\n    return target.stream();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.StreamConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.StreamConverter#convertToStream(Object,TypeDescriptor,TypeDescriptor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.StreamConverter#createConvertibleTypes()",
    "headType": "method",
    "relation": "provide",
    "tail": "private static Set<ConvertiblePair> createConvertibleTypes() {\r\n    Set<ConvertiblePair> convertiblePairs = new HashSet<>();\r\n    convertiblePairs.add(new ConvertiblePair(Stream.class, Collection.class));\r\n    convertiblePairs.add(new ConvertiblePair(Stream.class, Object[].class));\r\n    convertiblePairs.add(new ConvertiblePair(Collection.class, Stream.class));\r\n    convertiblePairs.add(new ConvertiblePair(Object[].class, Stream.class));\r\n    return convertiblePairs;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.StreamConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.StreamConverter#createConvertibleTypes()",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.convert.support",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.convert.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.support.StringToArrayConverter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.support.StringToArrayConverter",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert.support;\n\nimport java.lang.reflect.Array;\nimport java.util.Collections;\nimport java.util.Set;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.convert.ConversionService;\nimport org.springframework.core.convert.TypeDescriptor;\nimport org.springframework.core.convert.converter.ConditionalGenericConverter;\nimport org.springframework.util.Assert;\nimport org.springframework.util.StringUtils;\n\n/**\n * Converts a comma-delimited String to an Array.\n * Only matches if {@code String.class} can be converted to the target array element type.\n *\n * @author Keith Donald\n * @author Juergen Hoeller\n * @since 3.0\n */\nfinal class StringToArrayConverter implements ConditionalGenericConverter {\n\n\tprivate final ConversionService conversionService;\n\n\n\tpublic StringToArrayConverter(ConversionService conversionService) {\n\t\tthis.conversionService = conversionService;\n\t}\n\n\n\t@Override\n\tpublic Set<ConvertiblePair> getConvertibleTypes() {\n\t\treturn Collections.singleton(new ConvertiblePair(String.class, Object[].class));\n\t}\n\n\t@Override\n\tpublic boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {\n\t\treturn ConversionUtils.canConvertElements(sourceType, targetType.getElementTypeDescriptor(),\n\t\t\t\tthis.conversionService);\n\t}\n\n\t@Override\n\tpublic @Nullable Object convert(@Nullable Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {\n\t\tif (source == null) {\n\t\t\treturn null;\n\t\t}\n\t\tString string = (String) source;\n\t\tString[] fields = StringUtils.commaDelimitedListToStringArray(string);\n\t\tTypeDescriptor targetElementType = targetType.getElementTypeDescriptor();\n\t\tAssert.state(targetElementType != null, \"No target element type\");\n\t\tObject target = Array.newInstance(targetElementType.getType(), fields.length);\n\t\tfor (int i = 0; i < fields.length; i++) {\n\t\t\tString sourceElement = fields[i];\n\t\t\tObject targetElement = this.conversionService.convert(sourceElement.trim(), sourceType, targetElementType);\n\t\t\tArray.set(target, i, targetElement);\n\t\t}\n\t\treturn target;\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.convert.support.StringToArrayConverter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.support.StringToArrayConverter#conversionService",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.support.StringToArrayConverter#conversionService",
    "headType": "field",
    "relation": "haveType",
    "tail": "ConversionService",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.support.StringToArrayConverter#getConvertibleTypes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Set<ConvertiblePair> getConvertibleTypes() {\r\n    return Collections.singleton(new ConvertiblePair(String.class, Object[].class));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.StringToArrayConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.StringToArrayConverter#getConvertibleTypes()",
    "tailType": "method"
  }
]