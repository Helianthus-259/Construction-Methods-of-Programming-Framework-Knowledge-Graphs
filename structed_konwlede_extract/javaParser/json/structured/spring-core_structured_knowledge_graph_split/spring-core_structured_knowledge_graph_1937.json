[
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#valueOfCollection()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#valueOfCollection()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#forObject()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid forObject() {\r\n    TypeDescriptor desc = TypeDescriptor.forObject(\"3\");\r\n    assertThat(desc.getType()).isEqualTo(String.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#forObject()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#forObject()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#forObjectNullTypeDescriptor()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid forObjectNullTypeDescriptor() {\r\n    TypeDescriptor desc = TypeDescriptor.forObject(null);\r\n    assertThat((Object) desc).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#forObjectNullTypeDescriptor()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#forObjectNullTypeDescriptor()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#nestedMethodParameterType2Levels()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nestedMethodParameterType2Levels() throws Exception {\r\n    TypeDescriptor t1 = TypeDescriptor.nested(new MethodParameter(getClass().getMethod(\"test2\", List.class), 0), 2);\r\n    assertThat(t1.getType()).isEqualTo(String.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#nestedMethodParameterType2Levels()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#nestedMethodParameterType2Levels()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#nestedMethodParameterTypeMap()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nestedMethodParameterTypeMap() throws Exception {\r\n    TypeDescriptor t1 = TypeDescriptor.nested(new MethodParameter(getClass().getMethod(\"test3\", Map.class), 0), 1);\r\n    assertThat(t1.getType()).isEqualTo(String.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#nestedMethodParameterTypeMap()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#nestedMethodParameterTypeMap()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#nestedMethodParameterTypeMapTwoLevels()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nestedMethodParameterTypeMapTwoLevels() throws Exception {\r\n    TypeDescriptor t1 = TypeDescriptor.nested(new MethodParameter(getClass().getMethod(\"test4\", List.class), 0), 2);\r\n    assertThat(t1.getType()).isEqualTo(String.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#nestedMethodParameterTypeMapTwoLevels()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#nestedMethodParameterTypeMapTwoLevels()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#nestedMethodParameterNot1NestedLevel()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nestedMethodParameterNot1NestedLevel() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> TypeDescriptor.nested(new MethodParameter(getClass().getMethod(\"test4\", List.class), 0, 2), 2));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#nestedMethodParameterNot1NestedLevel()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#nestedMethodParameterNot1NestedLevel()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]