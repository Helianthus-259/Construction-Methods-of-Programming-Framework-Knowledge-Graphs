[
  {
    "head": "org.springframework.core.io.support.ResourceRegionTests#shouldThrowExceptionWithNullResource()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.support.ResourceRegionTests#shouldThrowExceptionForNegativePosition()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldThrowExceptionForNegativePosition() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> new ResourceRegion(mock(), -1, 1));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.ResourceRegionTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.ResourceRegionTests#shouldThrowExceptionForNegativePosition()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.ResourceRegionTests#shouldThrowExceptionForNegativePosition()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.support.ResourceRegionTests#shouldThrowExceptionForNegativeCount()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldThrowExceptionForNegativeCount() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> new ResourceRegion(mock(), 0, -1));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.ResourceRegionTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.ResourceRegionTests#shouldThrowExceptionForNegativeCount()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.ResourceRegionTests#shouldThrowExceptionForNegativeCount()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.io.support",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.io.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.support.SpringFactoriesLoaderTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoaderTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io.support;\n\nimport java.io.File;\nimport java.lang.reflect.Modifier;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.net.URLClassLoader;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.apache.commons.logging.Log;\nimport org.junit.jupiter.api.AfterAll;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.Nested;\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.core.io.support.SpringFactoriesLoader.ArgumentResolver;\nimport org.springframework.core.io.support.SpringFactoriesLoader.FactoryInstantiator;\nimport org.springframework.core.io.support.SpringFactoriesLoader.FailureHandler;\nimport org.springframework.core.log.LogMessage;\nimport org.springframework.util.ClassUtils;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\nimport static org.assertj.core.api.Assertions.assertThatIllegalStateException;\nimport static org.mockito.ArgumentMatchers.eq;\nimport static org.mockito.ArgumentMatchers.isA;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.verify;\n\n/**\n * Tests for {@link SpringFactoriesLoader}.\n *\n * @author Arjen Poutsma\n * @author Phillip Webb\n * @author Sam Brannen\n * @author Andy Wilkinson\n * @author Madhura Bhave\n */\nclass SpringFactoriesLoaderTests {\n\n\t@BeforeAll\n\tstatic void clearCache() {\n\t\tSpringFactoriesLoader.cache.clear();\n\t\tassertThat(SpringFactoriesLoader.cache).isEmpty();\n\t}\n\n\t@AfterAll\n\tstatic void checkCache() {\n\t\tassertThat(SpringFactoriesLoader.cache).hasSize(3);\n\t\tSpringFactoriesLoader.cache.clear();\n\t}\n\n\n\t@Test\n\t@Deprecated\n\tvoid loadFactoryNames() {\n\t\tList<String> factoryNames = SpringFactoriesLoader.loadFactoryNames(DummyFactory.class, null);\n\t\tassertThat(factoryNames).containsExactlyInAnyOrder(MyDummyFactory1.class.getName(), MyDummyFactory2.class.getName());\n\t}\n\n\t@Test\n\tvoid loadWhenNoRegisteredImplementationsReturnsEmptyList() {\n\t\tList<Integer> factories = SpringFactoriesLoader.forDefaultResourceLocation().load(Integer.class);\n\t\tassertThat(factories).isEmpty();\n\t}\n\n\t@Test\n\tvoid loadWhenDuplicateRegistrationsPresentReturnsListInCorrectOrder() {\n\t\tList<DummyFactory> factories = SpringFactoriesLoader.forDefaultResourceLocation().load(DummyFactory.class);\n\t\tassertThat(factories).hasExactlyElementsOfTypes(MyDummyFactory1.class, MyDummyFactory2.class);\n\t}\n\n\t@Test\n\tvoid loadWhenPackagePrivateFactory() {\n\t\tList<DummyPackagePrivateFactory> factories =\n\t\t\t\tSpringFactoriesLoader.forDefaultResourceLocation().load(DummyPackagePrivateFactory.class);\n\t\tassertThat(factories).hasSize(1);\n\t\tassertThat(Modifier.isPublic(factories.get(0).getClass().getModifiers())).isFalse();\n\t}\n\n\t@Test\n\tvoid loadWhenIncompatibleTypeThrowsException() {\n\t\tassertThatIllegalArgumentException()\n\t\t\t.isThrownBy(() -> SpringFactoriesLoader.forDefaultResourceLocation().load(String.class))\n\t\t\t.withMessageContaining(\"Unable to instantiate factory class \"\n\t\t\t\t\t+ \"[org.springframework.core.io.support.MyDummyFactory1] for factory type [java.lang.String]\");\n\t}\n\n\t@Test\n\tvoid loadWithLoggingFailureHandlerWhenIncompatibleTypeReturnsEmptyList() {\n\t\tLog logger = mock();\n\t\tFailureHandler failureHandler = FailureHandler.logging(logger);\n\t\tList<String> factories = SpringFactoriesLoader.forDefaultResourceLocation().load(String.class, failureHandler);\n\t\tassertThat(factories).isEmpty();\n\t}\n\n\t@Test\n\tvoid loadWithArgumentResolverWhenNoDefaultConstructor() {\n\t\tArgumentResolver resolver = ArgumentResolver.of(String.class, \"injected\");\n\t\tList<DummyFactory> factories = SpringFactoriesLoader.forDefaultResourceLocation(LimitedClassLoader.constructorArgumentFactories)\n\t\t\t\t\t.load(DummyFactory.class, resolver);\n\t\tassertThat(factories).hasExactlyElementsOfTypes(MyDummyFactory1.class, MyDummyFactory2.class,\n\t\t\t\tConstructorArgsDummyFactory.class);\n\t\tassertThat(factories).extracting(DummyFactory::getString).containsExactly(\"Foo\", \"Bar\", \"injected\");\n\t}\n\n\t@Test\n\tvoid loadWhenMultipleConstructorsThrowsException() {\n\t\tArgumentResolver resolver = ArgumentResolver.of(String.class, \"injected\");\n\t\tassertThatIllegalArgumentException()\n\t\t\t\t.isThrownBy(() -> SpringFactoriesLoader.forDefaultResourceLocation(LimitedClassLoader.multipleArgumentFactories)\n\t\t\t\t\t\t\t.load(DummyFactory.class, resolver))\n\t\t\t\t.withMessageContaining(\"Unable to instantiate factory class \"\n\t\t\t\t\t\t+ \"[org.springframework.core.io.support.MultipleConstructorArgsDummyFactory] for factory type [org.springframework.core.io.support.DummyFactory]\")\n\t\t\t\t.havingRootCause().withMessageContaining(\"Class [org.springframework.core.io.support.MultipleConstructorArgsDummyFactory] has no suitable constructor\");\n\t}\n\n\t@Test\n\tvoid loadWithLoggingFailureHandlerWhenMissingArgumentDropsItem() {\n\t\tLog logger = mock();\n\t\tFailureHandler failureHandler = FailureHandler.logging(logger);\n\t\tList<DummyFactory> factories = SpringFactoriesLoader.forDefaultResourceLocation(LimitedClassLoader.multipleArgumentFactories)\n\t\t\t\t\t.load(DummyFactory.class, failureHandler);\n\t\tassertThat(factories).hasExactlyElementsOfTypes(MyDummyFactory1.class, MyDummyFactory2.class);\n\t}\n\n\t@Test\n\tvoid loadFactoriesLoadsFromDefaultLocation() {\n\t\tList<DummyFactory> factories = SpringFactoriesLoader.loadFactories(\n\t\t\t\tDummyFactory.class, null);\n\t\tassertThat(factories).hasExactlyElementsOfTypes(MyDummyFactory1.class, MyDummyFactory2.class);\n\t}\n\n\t@Test\n\tvoid loadForResourceLocationWhenLocationDoesNotExistReturnsEmptyList() {\n\t\tList<DummyFactory> factories = SpringFactoriesLoader.forResourceLocation(\n\t\t\t\t\"META-INF/missing/missing-spring.factories\").load(DummyFactory.class);\n\t\tassertThat(factories).isEmpty();\n\t}\n\n\t@Test\n\tvoid loadForResourceLocationLoadsFactories() {\n\t\tList<DummyFactory> factories = SpringFactoriesLoader.forResourceLocation(\n\t\t\t\t\"META-INF/custom/custom-spring.factories\").load(DummyFactory.class);\n\t\tassertThat(factories).hasExactlyElementsOfTypes(MyDummyFactory1.class);\n\t}\n\n\t@Test\n\tvoid sameCachedResultIsUsedForDefaultClassLoaderAndNullClassLoader() {\n\t\tSpringFactoriesLoader forNull = SpringFactoriesLoader.forDefaultResourceLocation(null);\n\t\tSpringFactoriesLoader forDefault = SpringFactoriesLoader.forDefaultResourceLocation(ClassUtils.getDefaultClassLoader());\n\t\tassertThat(forNull).isSameAs(forDefault);\n\t}\n\n\n\t@Nested\n\tclass FailureHandlerTests {\n\n\t\t@Test\n\t\tvoid throwingReturnsHandlerThatThrowsIllegalArgumentException() {\n\t\t\tFailureHandler handler = FailureHandler.throwing();\n\t\t\tRuntimeException cause = new RuntimeException();\n\t\t\tassertThatIllegalArgumentException().isThrownBy(() -> handler.handleFailure(\n\t\t\t\t\tDummyFactory.class, MyDummyFactory1.class.getName(),\n\t\t\t\t\tcause)).withMessageStartingWith(\"Unable to instantiate factory class\").withCause(cause);\n\t\t}\n\n\t\t@Test\n\t\tvoid throwingWithFactoryReturnsHandlerThatThrows() {\n\t\t\tFailureHandler handler = FailureHandler.throwing(IllegalStateException::new);\n\t\t\tRuntimeException cause = new RuntimeException();\n\t\t\tassertThatIllegalStateException().isThrownBy(() -> handler.handleFailure(\n\t\t\t\t\tDummyFactory.class, MyDummyFactory1.class.getName(),\n\t\t\t\t\tcause)).withMessageStartingWith(\"Unable to instantiate factory class\").withCause(cause);\n\t\t}\n\n\t\t@Test\n\t\tvoid loggingReturnsHandlerThatLogs() {\n\t\t\tLog logger = mock();\n\t\t\tFailureHandler handler = FailureHandler.logging(logger);\n\t\t\tRuntimeException cause = new RuntimeException();\n\t\t\thandler.handleFailure(DummyFactory.class, MyDummyFactory1.class.getName(), cause);\n\t\t\tverify(logger).trace(isA(LogMessage.class), eq(cause));\n\t\t}\n\n\t\t@Test\n\t\tvoid handleMessageReturnsHandlerThatAcceptsMessage() {\n\t\t\tList<Throwable> failures = new ArrayList<>();\n\t\t\tList<String> messages = new ArrayList<>();\n\t\t\tFailureHandler handler = FailureHandler.handleMessage((message, failure) -> {\n\t\t\t\tfailures.add(failure);\n\t\t\t\tmessages.add(message.get());\n\t\t\t});\n\t\t\tRuntimeException cause = new RuntimeException();\n\t\t\thandler.handleFailure(DummyFactory.class, MyDummyFactory1.class.getName(), cause);\n\t\t\tassertThat(failures).containsExactly(cause);\n\t\t\tassertThat(messages).singleElement().asString().startsWith(\"Unable to instantiate factory class\");\n\t\t}\n\t}\n\n\n\t@Nested\n\tclass ArgumentResolverTests {\n\n\t\t@Test\n\t\tvoid ofValueResolvesValue() {\n\t\t\tArgumentResolver resolver = ArgumentResolver.of(CharSequence.class, \"test\");\n\t\t\tassertThat(resolver.resolve(CharSequence.class)).isEqualTo(\"test\");\n\t\t\tassertThat(resolver.resolve(String.class)).isNull();\n\t\t\tassertThat(resolver.resolve(Integer.class)).isNull();\n\t\t}\n\n\t\t@Test\n\t\tvoid ofValueSupplierResolvesValue() {\n\t\t\tArgumentResolver resolver = ArgumentResolver.ofSupplied(CharSequence.class, () -> \"test\");\n\t\t\tassertThat(resolver.resolve(CharSequence.class)).isEqualTo(\"test\");\n\t\t\tassertThat(resolver.resolve(String.class)).isNull();\n\t\t\tassertThat(resolver.resolve(Integer.class)).isNull();\n\t\t}\n\n\t\t@Test\n\t\tvoid fromAdaptsFunction() {\n\t\t\tArgumentResolver resolver = ArgumentResolver.from(\n\t\t\t\t\ttype -> CharSequence.class.equals(type) ? \"test\" : null);\n\t\t\tassertThat(resolver.resolve(CharSequence.class)).isEqualTo(\"test\");\n\t\t\tassertThat(resolver.resolve(String.class)).isNull();\n\t\t\tassertThat(resolver.resolve(Integer.class)).isNull();\n\t\t}\n\n\t\t@Test\n\t\tvoid andValueReturnsComposite() {\n\t\t\tArgumentResolver resolver = ArgumentResolver.of(CharSequence.class, \"test\").and(Integer.class, 123);\n\t\t\tassertThat(resolver.resolve(CharSequence.class)).isEqualTo(\"test\");\n\t\t\tassertThat(resolver.resolve(String.class)).isNull();\n\t\t\tassertThat(resolver.resolve(Integer.class)).isEqualTo(123);\n\t\t}\n\n\t\t@Test\n\t\tvoid andValueWhenSameTypeReturnsCompositeResolvingFirst() {\n\t\t\tArgumentResolver resolver = ArgumentResolver.of(CharSequence.class, \"test\").and(CharSequence.class, \"ignore\");\n\t\t\tassertThat(resolver.resolve(CharSequence.class)).isEqualTo(\"test\");\n\t\t}\n\n\t\t@Test\n\t\tvoid andValueSupplierReturnsComposite() {\n\t\t\tArgumentResolver resolver = ArgumentResolver.of(CharSequence.class, \"test\").andSupplied(Integer.class, () -> 123);\n\t\t\tassertThat(resolver.resolve(CharSequence.class)).isEqualTo(\"test\");\n\t\t\tassertThat(resolver.resolve(String.class)).isNull();\n\t\t\tassertThat(resolver.resolve(Integer.class)).isEqualTo(123);\n\t\t}\n\n\t\t@Test\n\t\tvoid andValueSupplierWhenSameTypeReturnsCompositeResolvingFirst() {\n\t\t\tArgumentResolver resolver = ArgumentResolver.of(CharSequence.class, \"test\").andSupplied(CharSequence.class, () -> \"ignore\");\n\t\t\tassertThat(resolver.resolve(CharSequence.class)).isEqualTo(\"test\");\n\t\t}\n\n\t\t@Test\n\t\tvoid andResolverReturnsComposite() {\n\t\t\tArgumentResolver resolver = ArgumentResolver.of(CharSequence.class, \"test\").and(Integer.class, 123);\n\t\t\tresolver = resolver.and(ArgumentResolver.of(CharSequence.class, \"ignore\").and(Long.class, 234L));\n\t\t\tassertThat(resolver.resolve(CharSequence.class)).isEqualTo(\"test\");\n\t\t\tassertThat(resolver.resolve(String.class)).isNull();\n\t\t\tassertThat(resolver.resolve(Integer.class)).isEqualTo(123);\n\t\t\tassertThat(resolver.resolve(Long.class)).isEqualTo(234L);\n\t\t}\n\t}\n\n\n\t@Nested\n\tclass FactoryInstantiatorTests {\n\n\t\tprivate final ArgumentResolver resolver = ArgumentResolver.of(String.class, \"test\");\n\n\t\t@Test\n\t\tvoid defaultConstructorCreatesInstance() throws Exception {\n\t\t\tObject instance = FactoryInstantiator.forClass(\n\t\t\t\t\tDefaultConstructor.class).instantiate(this.resolver);\n\t\t\tassertThat(instance).isNotNull();\n\t\t}\n\n\t\t@Test\n\t\tvoid singleConstructorWithArgumentsCreatesInstance() throws Exception {\n\t\t\tObject instance = FactoryInstantiator.forClass(\n\t\t\t\t\tSingleConstructor.class).instantiate(this.resolver);\n\t\t\tassertThat(instance).isNotNull();\n\t\t}\n\n\t\t@Test\n\t\tvoid multiplePrivateAndSinglePublicConstructorCreatesInstance() throws Exception {\n\t\t\tObject instance = FactoryInstantiator.forClass(\n\t\t\t\t\tMultiplePrivateAndSinglePublicConstructor.class).instantiate(this.resolver);\n\t\t\tassertThat(instance).isNotNull();\n\t\t}\n\n\t\t@Test\n\t\tvoid multiplePackagePrivateAndSinglePublicConstructorCreatesInstance() throws Exception {\n\t\t\tObject instance = FactoryInstantiator.forClass(\n\t\t\t\t\tMultiplePackagePrivateAndSinglePublicConstructor.class).instantiate(this.resolver);\n\t\t\tassertThat(instance).isNotNull();\n\t\t}\n\n\t\t@Test\n\t\tvoid singlePackagePrivateConstructorCreatesInstance() throws Exception {\n\t\t\tObject instance = FactoryInstantiator.forClass(\n\t\t\t\t\tSinglePackagePrivateConstructor.class).instantiate(this.resolver);\n\t\t\tassertThat(instance).isNotNull();\n\t\t}\n\n\t\t@Test\n\t\tvoid singlePrivateConstructorCreatesInstance() throws Exception {\n\t\t\tObject instance = FactoryInstantiator.forClass(\n\t\t\t\t\tSinglePrivateConstructor.class).instantiate(this.resolver);\n\t\t\tassertThat(instance).isNotNull();\n\t\t}\n\n\t\t@Test\n\t\tvoid multiplePackagePrivateConstructorsThrowsException() {\n\t\t\tassertThatIllegalStateException().isThrownBy(\n\t\t\t\t\t() -> FactoryInstantiator.forClass(MultiplePackagePrivateConstructors.class))\n\t\t\t\t.withMessageContaining(\"has no suitable constructor\");\n\t\t}\n\n\t\tstatic class DefaultConstructor {\n\t\t}\n\n\t\tstatic class SingleConstructor {\n\n\t\t\tSingleConstructor(String arg) {\n\t\t\t}\n\t\t}\n\n\t\tstatic class MultiplePrivateAndSinglePublicConstructor {\n\n\t\t\tpublic MultiplePrivateAndSinglePublicConstructor(String arg) {\n\t\t\t\tthis(arg, false);\n\t\t\t}\n\n\t\t\tprivate MultiplePrivateAndSinglePublicConstructor(String arg, boolean extra) {\n\t\t\t}\n\t\t}\n\n\t\tstatic class MultiplePackagePrivateAndSinglePublicConstructor {\n\n\t\t\tpublic MultiplePackagePrivateAndSinglePublicConstructor(String arg) {\n\t\t\t\tthis(arg, false);\n\t\t\t}\n\n\t\t\tMultiplePackagePrivateAndSinglePublicConstructor(String arg, boolean extra) {\n\t\t\t}\n\t\t}\n\n\t\tstatic class SinglePackagePrivateConstructor {\n\n\t\t\tSinglePackagePrivateConstructor(String arg) {\n\t\t\t}\n\t\t}\n\n\t\tstatic class SinglePrivateConstructor {\n\n\t\t\tprivate SinglePrivateConstructor(String arg) {\n\t\t\t}\n\t\t}\n\n\t\tstatic class MultiplePackagePrivateConstructors {\n\n\t\t\tMultiplePackagePrivateConstructors(String arg) {\n\t\t\t\tthis(arg, false);\n\t\t\t}\n\n\t\t\tMultiplePackagePrivateConstructors(String arg, boolean extra) {\n\t\t\t}\n\t\t}\n\t}\n\n\n\tprivate static class LimitedClassLoader extends URLClassLoader {\n\n\t\tprivate static final ClassLoader constructorArgumentFactories = new LimitedClassLoader(\"constructor-argument-factories\");\n\n\t\tprivate static final ClassLoader multipleArgumentFactories = new LimitedClassLoader(\"multiple-arguments-factories\");\n\n\t\tLimitedClassLoader(String location) {\n\t\t\tsuper(new URL[] { toUrl(location) });\n\t\t}\n\n\t\tprivate static URL toUrl(String location) {\n\t\t\ttry {\n\t\t\t\treturn new File(\"src/test/resources/org/springframework/core/io/support/\" + location + \"/\").toURI().toURL();\n\t\t\t}\n\t\t\tcatch (MalformedURLException ex) {\n\t\t\t\tthrow new IllegalStateException(ex);\n\t\t\t}\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoaderTests#clearCache()",
    "headType": "method",
    "relation": "provide",
    "tail": "@BeforeAll\r\nstatic void clearCache() {\r\n    SpringFactoriesLoader.cache.clear();\r\n    assertThat(SpringFactoriesLoader.cache).isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoaderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.SpringFactoriesLoaderTests#clearCache()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoaderTests#clearCache()",
    "headType": "method",
    "relation": "use",
    "tail": "@BeforeAll",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoaderTests#checkCache()",
    "headType": "method",
    "relation": "provide",
    "tail": "@AfterAll\r\nstatic void checkCache() {\r\n    assertThat(SpringFactoriesLoader.cache).hasSize(3);\r\n    SpringFactoriesLoader.cache.clear();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoaderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.SpringFactoriesLoaderTests#checkCache()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoaderTests#checkCache()",
    "headType": "method",
    "relation": "use",
    "tail": "@AfterAll",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoaderTests#loadFactoryNames()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\n@Deprecated\r\nvoid loadFactoryNames() {\r\n    List<String> factoryNames = SpringFactoriesLoader.loadFactoryNames(DummyFactory.class, null);\r\n    assertThat(factoryNames).containsExactlyInAnyOrder(MyDummyFactory1.class.getName(), MyDummyFactory2.class.getName());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoaderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.SpringFactoriesLoaderTests#loadFactoryNames()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoaderTests#loadFactoryNames()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoaderTests#loadFactoryNames()",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  }
]