[
  {
    "head": "org.springframework.cglib.core.TypeUtils#map(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static String map(String type) {\r\n    if (type.isEmpty()) {\r\n        return type;\r\n    }\r\n    String t = (String) transforms.get(type);\r\n    if (t != null) {\r\n        return t;\r\n    } else if (type.indexOf('.') < 0) {\r\n        return map(\"java.lang.\" + type);\r\n    } else {\r\n        StringBuilder sb = new StringBuilder();\r\n        int index = 0;\r\n        while ((index = type.indexOf(\"[]\", index) + 1) > 0) {\r\n            sb.append('[');\r\n        }\r\n        type = type.substring(0, type.length() - sb.length() * 2);\r\n        sb.append('L').append(type.replace('.', '/')).append(';');\r\n        return sb.toString();\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.TypeUtils#map(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils#getBoxedType(Type)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static Type getBoxedType(Type type) {\r\n    return switch(type.getSort()) {\r\n        case Type.CHAR ->\r\n            Constants.TYPE_CHARACTER;\r\n        case Type.BOOLEAN ->\r\n            Constants.TYPE_BOOLEAN;\r\n        case Type.DOUBLE ->\r\n            Constants.TYPE_DOUBLE;\r\n        case Type.FLOAT ->\r\n            Constants.TYPE_FLOAT;\r\n        case Type.LONG ->\r\n            Constants.TYPE_LONG;\r\n        case Type.INT ->\r\n            Constants.TYPE_INTEGER;\r\n        case Type.SHORT ->\r\n            Constants.TYPE_SHORT;\r\n        case Type.BYTE ->\r\n            Constants.TYPE_BYTE;\r\n        default ->\r\n            type;\r\n    };\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.TypeUtils#getBoxedType(Type)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils#getUnboxedType(Type)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static Type getUnboxedType(Type type) {\r\n    if (Constants.TYPE_INTEGER.equals(type)) {\r\n        return Type.INT_TYPE;\r\n    } else if (Constants.TYPE_BOOLEAN.equals(type)) {\r\n        return Type.BOOLEAN_TYPE;\r\n    } else if (Constants.TYPE_DOUBLE.equals(type)) {\r\n        return Type.DOUBLE_TYPE;\r\n    } else if (Constants.TYPE_LONG.equals(type)) {\r\n        return Type.LONG_TYPE;\r\n    } else if (Constants.TYPE_CHARACTER.equals(type)) {\r\n        return Type.CHAR_TYPE;\r\n    } else if (Constants.TYPE_BYTE.equals(type)) {\r\n        return Type.BYTE_TYPE;\r\n    } else if (Constants.TYPE_FLOAT.equals(type)) {\r\n        return Type.FLOAT_TYPE;\r\n    } else if (Constants.TYPE_SHORT.equals(type)) {\r\n        return Type.SHORT_TYPE;\r\n    } else {\r\n        return type;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.TypeUtils#getUnboxedType(Type)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils#isArray(Type)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static boolean isArray(Type type) {\r\n    return type.getSort() == Type.ARRAY;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.TypeUtils#isArray(Type)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils#getComponentType(Type)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static Type getComponentType(Type type) {\r\n    if (!isArray(type)) {\r\n        throw new IllegalArgumentException(\"Type \" + type + \" is not an array\");\r\n    }\r\n    return Type.getType(type.getDescriptor().substring(1));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.TypeUtils#getComponentType(Type)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils#isPrimitive(Type)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static boolean isPrimitive(Type type) {\r\n    return switch(type.getSort()) {\r\n        case Type.ARRAY, Type.OBJECT ->\r\n            false;\r\n        default ->\r\n            true;\r\n    };\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.TypeUtils#isPrimitive(Type)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils#emulateClassGetName(Type)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static String emulateClassGetName(Type type) {\r\n    if (isArray(type)) {\r\n        return type.getDescriptor().replace('/', '.');\r\n    } else {\r\n        return getClassName(type);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.TypeUtils#emulateClassGetName(Type)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils#isConstructor(MethodInfo)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static boolean isConstructor(MethodInfo method) {\r\n    return method.getSignature().getName().equals(Constants.CONSTRUCTOR_NAME);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.TypeUtils#isConstructor(MethodInfo)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils#getTypes(Class[])",
    "headType": "method",
    "relation": "provide",
    "tail": "public static Type[] getTypes(Class[] classes) {\r\n    if (classes == null) {\r\n        return null;\r\n    }\r\n    Type[] types = new Type[classes.length];\r\n    for (int i = 0; i < classes.length; i++) {\r\n        types[i] = Type.getType(classes[i]);\r\n    }\r\n    return types;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.TypeUtils#getTypes(Class[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils#ICONST(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static int ICONST(int value) {\r\n    return switch(value) {\r\n        case -1 ->\r\n            Constants.ICONST_M1;\r\n        case 0 ->\r\n            Constants.ICONST_0;\r\n        case 1 ->\r\n            Constants.ICONST_1;\r\n        case 2 ->\r\n            Constants.ICONST_2;\r\n        case 3 ->\r\n            Constants.ICONST_3;\r\n        case 4 ->\r\n            Constants.ICONST_4;\r\n        case 5 ->\r\n            Constants.ICONST_5;\r\n        // error\r\n        default ->\r\n            -1;\r\n    };\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.TypeUtils#ICONST(int)",
    "tailType": "method"
  }
]