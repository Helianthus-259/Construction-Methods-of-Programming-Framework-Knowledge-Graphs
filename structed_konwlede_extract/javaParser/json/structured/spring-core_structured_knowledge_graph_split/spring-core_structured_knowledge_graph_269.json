[
  {
    "head": "org.springframework.util.MultiValueMapTests#toSingleValueMapWithEmptyList(MultiValueMap<String,String>)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedMultiValueMapTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MultiValueMapTests#equalsOnExistingValues(MultiValueMap<String,String>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedMultiValueMapTest\r\nvoid equalsOnExistingValues(MultiValueMap<String, String> map) {\r\n    map.clear();\r\n    map.set(\"key1\", \"value1\");\r\n    assertThat(map).isEqualTo(map);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MultiValueMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MultiValueMapTests#equalsOnExistingValues(MultiValueMap<String,String>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MultiValueMapTests#equalsOnExistingValues(MultiValueMap<String,String>)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedMultiValueMapTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MultiValueMapTests#equalsOnEmpty(MultiValueMap<String,String>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedMultiValueMapTest\r\nvoid equalsOnEmpty(MultiValueMap<String, String> map) {\r\n    map.clear();\r\n    map.set(\"key1\", \"value1\");\r\n    MultiValueMap<String, String> map1 = new LinkedMultiValueMap<>();\r\n    map1.set(\"key1\", \"value1\");\r\n    assertThat(map1).isEqualTo(map);\r\n    assertThat(map).isEqualTo(map1);\r\n    Map<String, List<String>> map2 = Map.of(\"key1\", List.of(\"value1\"));\r\n    assertThat(map2).isEqualTo(map);\r\n    assertThat(map).isEqualTo(map2);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MultiValueMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MultiValueMapTests#equalsOnEmpty(MultiValueMap<String,String>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MultiValueMapTests#equalsOnEmpty(MultiValueMap<String,String>)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedMultiValueMapTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MultiValueMapTests#canNotChangeAnUnmodifiableMultiValueMap()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid canNotChangeAnUnmodifiableMultiValueMap() {\r\n    MultiValueMap<String, String> map = new LinkedMultiValueMap<>();\r\n    MultiValueMap<String, String> unmodifiableMap = CollectionUtils.unmodifiableMultiValueMap(map);\r\n    assertSoftly(softly -> {\r\n        softly.assertThatExceptionOfType(UnsupportedOperationException.class).isThrownBy(() -> unmodifiableMap.add(\"key\", \"value\"));\r\n        softly.assertThatExceptionOfType(UnsupportedOperationException.class).isThrownBy(() -> unmodifiableMap.addIfAbsent(\"key\", \"value\"));\r\n        softly.assertThatExceptionOfType(UnsupportedOperationException.class).isThrownBy(() -> unmodifiableMap.addAll(\"key\", exampleListOfValues()));\r\n        softly.assertThatExceptionOfType(UnsupportedOperationException.class).isThrownBy(() -> unmodifiableMap.addAll(exampleMultiValueMap()));\r\n        softly.assertThatExceptionOfType(UnsupportedOperationException.class).isThrownBy(() -> unmodifiableMap.set(\"key\", \"value\"));\r\n        softly.assertThatExceptionOfType(UnsupportedOperationException.class).isThrownBy(() -> unmodifiableMap.setAll(exampleHashMap()));\r\n        softly.assertThatExceptionOfType(UnsupportedOperationException.class).isThrownBy(() -> unmodifiableMap.put(\"key\", exampleListOfValues()));\r\n        softly.assertThatExceptionOfType(UnsupportedOperationException.class).isThrownBy(() -> unmodifiableMap.putIfAbsent(\"key\", exampleListOfValues()));\r\n        softly.assertThatExceptionOfType(UnsupportedOperationException.class).isThrownBy(() -> unmodifiableMap.putAll(exampleMultiValueMap()));\r\n        softly.assertThatExceptionOfType(UnsupportedOperationException.class).isThrownBy(() -> unmodifiableMap.remove(\"key1\"));\r\n    });\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MultiValueMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MultiValueMapTests#canNotChangeAnUnmodifiableMultiValueMap()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MultiValueMapTests#canNotChangeAnUnmodifiableMultiValueMap()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MultiValueMapTests#exampleListOfValues()",
    "headType": "method",
    "relation": "provide",
    "tail": "private static List<String> exampleListOfValues() {\r\n    return List.of(\"value1\", \"value2\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MultiValueMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MultiValueMapTests#exampleListOfValues()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MultiValueMapTests#exampleHashMap()",
    "headType": "method",
    "relation": "provide",
    "tail": "private static Map<String, String> exampleHashMap() {\r\n    return Map.of(\"key2\", \"key2.value1\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MultiValueMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MultiValueMapTests#exampleHashMap()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MultiValueMapTests#exampleMultiValueMap()",
    "headType": "method",
    "relation": "provide",
    "tail": "private static MultiValueMap<String, String> exampleMultiValueMap() {\r\n    LinkedMultiValueMap<String, String> map = new LinkedMultiValueMap<>();\r\n    map.put(\"key1\", Arrays.asList(\"key1.value1\", \"key1.value2\"));\r\n    return map;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MultiValueMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MultiValueMapTests#exampleMultiValueMap()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MultiValueMapTests#mapsUnderTest()",
    "headType": "method",
    "relation": "provide",
    "tail": "static Stream<Arguments> mapsUnderTest() {\r\n    return Stream.of(argumentSet(\"new LinkedMultiValueMap<>()\", new LinkedMultiValueMap<>()), argumentSet(\"new LinkedMultiValueMap<>(new HashMap<>())\", new LinkedMultiValueMap<>(new HashMap<>())), argumentSet(\"new LinkedMultiValueMap<>(new LinkedHashMap<>())\", new LinkedMultiValueMap<>(new LinkedHashMap<>())), argumentSet(\"new LinkedMultiValueMap<>(Map.of(...))\", new LinkedMultiValueMap<>(Map.of(\"existingkey\", List.of(\"existingvalue1\", \"existingvalue2\")))), argumentSet(\"CollectionUtils.toMultiValueMap\", CollectionUtils.toMultiValueMap(new HashMap<>())));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MultiValueMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MultiValueMapTests#mapsUnderTest()",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.nativex",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.nativex",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.nativex.RuntimeHintsWriter",
    "tailType": "class"
  }
]