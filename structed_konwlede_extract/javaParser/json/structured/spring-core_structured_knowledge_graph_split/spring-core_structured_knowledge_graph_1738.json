[
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeFromMapWithAttributeAliasesThatOverrideArraysWithSingleElements()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeFromMapWithAttributeAliasesThatOverrideArraysWithSingleElements()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeFromMapWithAttributeAliasesThatOverrideArraysWithSingleElements(Map<String,Object>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void synthesizeFromMapWithAttributeAliasesThatOverrideArraysWithSingleElements(Map<String, Object> map) {\r\n    MergedAnnotation<GetMapping> annotation = MergedAnnotation.of(GetMapping.class, map);\r\n    GetMapping synthesized = annotation.synthesize();\r\n    assertThat(synthesized.value()).isEqualTo(\"/foo\");\r\n    assertThat(synthesized.path()).isEqualTo(\"/foo\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeFromMapWithAttributeAliasesThatOverrideArraysWithSingleElements(Map<String,Object>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeFromMapWithImplicitAttributeAliases()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid synthesizeFromMapWithImplicitAttributeAliases() {\r\n    testSynthesisFromMapWithImplicitAliases(\"value\");\r\n    testSynthesisFromMapWithImplicitAliases(\"location1\");\r\n    testSynthesisFromMapWithImplicitAliases(\"location2\");\r\n    testSynthesisFromMapWithImplicitAliases(\"location3\");\r\n    testSynthesisFromMapWithImplicitAliases(\"xmlFile\");\r\n    testSynthesisFromMapWithImplicitAliases(\"groovyScript\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeFromMapWithImplicitAttributeAliases()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeFromMapWithImplicitAttributeAliases()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#testSynthesisFromMapWithImplicitAliases(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void testSynthesisFromMapWithImplicitAliases(String attributeNameAndValue) {\r\n    Map<String, Object> map = Collections.singletonMap(attributeNameAndValue, attributeNameAndValue);\r\n    MergedAnnotation<ImplicitAliasesTestConfiguration> annotation = MergedAnnotation.of(ImplicitAliasesTestConfiguration.class, map);\r\n    ImplicitAliasesTestConfiguration synthesized = annotation.synthesize();\r\n    assertThat(synthesized.value()).isEqualTo(attributeNameAndValue);\r\n    assertThat(synthesized.location1()).isEqualTo(attributeNameAndValue);\r\n    assertThat(synthesized.location2()).isEqualTo(attributeNameAndValue);\r\n    assertThat(synthesized.location2()).isEqualTo(attributeNameAndValue);\r\n    assertThat(synthesized.xmlFile()).isEqualTo(attributeNameAndValue);\r\n    assertThat(synthesized.groovyScript()).isEqualTo(attributeNameAndValue);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#testSynthesisFromMapWithImplicitAliases(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeFromMapWithMissingAttributeValue()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid synthesizeFromMapWithMissingAttributeValue() {\r\n    testMissingTextAttribute(Collections.emptyMap());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeFromMapWithMissingAttributeValue()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeFromMapWithMissingAttributeValue()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeFromMapWithNullAttributeValue()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid synthesizeFromMapWithNullAttributeValue() {\r\n    Map<String, Object> map = Collections.singletonMap(\"text\", null);\r\n    assertThat(map).containsKey(\"text\");\r\n    testMissingTextAttribute(map);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeFromMapWithNullAttributeValue()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeFromMapWithNullAttributeValue()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#testMissingTextAttribute(Map<String,Object>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void testMissingTextAttribute(Map<String, Object> attributes) {\r\n    assertThatExceptionOfType(NoSuchElementException.class).isThrownBy(() -> MergedAnnotation.of(AnnotationWithoutDefaults.class, attributes).synthesize().text()).withMessage(\"No value found for attribute named 'text' in merged annotation \" + AnnotationWithoutDefaults.class.getCanonicalName());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#testMissingTextAttribute(Map<String,Object>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeFromMapWithAttributeOfIncorrectType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid synthesizeFromMapWithAttributeOfIncorrectType() {\r\n    Map<String, Object> map = Collections.singletonMap(\"value\", 42L);\r\n    MergedAnnotation<Component> annotation = MergedAnnotation.of(Component.class, map);\r\n    assertThatIllegalStateException().isThrownBy(() -> annotation.synthesize().value()).withMessage(\"Attribute 'value' in annotation \" + \"org.springframework.core.testfixture.stereotype.Component should be \" + \"compatible with java.lang.String but a java.lang.Long value was returned\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeFromMapWithAttributeOfIncorrectType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeFromMapWithAttributeOfIncorrectType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]