[
  {
    "head": "org.springframework.util.xml.XMLEventStreamReader#getProperty(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamReader#isStandalone()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean isStandalone() {\r\n    if (this.event.isStartDocument()) {\r\n        return ((StartDocument) this.event).isStandalone();\r\n    } else {\r\n        throw new IllegalStateException();\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.XMLEventStreamReader#isStandalone()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamReader#isStandalone()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamReader#standaloneSet()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean standaloneSet() {\r\n    if (this.event.isStartDocument()) {\r\n        return ((StartDocument) this.event).standaloneSet();\r\n    } else {\r\n        throw new IllegalStateException();\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.XMLEventStreamReader#standaloneSet()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamReader#standaloneSet()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamReader#getEncoding()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic String getEncoding() {\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.XMLEventStreamReader#getEncoding()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamReader#getEncoding()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamReader#getEncoding()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamReader#getCharacterEncodingScheme()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic String getCharacterEncodingScheme() {\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.XMLEventStreamReader#getCharacterEncodingScheme()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamReader#getCharacterEncodingScheme()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamReader#getCharacterEncodingScheme()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamReader#getPITarget()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String getPITarget() {\r\n    if (this.event.isProcessingInstruction()) {\r\n        return ((ProcessingInstruction) this.event).getTarget();\r\n    } else {\r\n        throw new IllegalStateException();\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.XMLEventStreamReader#getPITarget()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamReader#getPITarget()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamReader#getPIData()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String getPIData() {\r\n    if (this.event.isProcessingInstruction()) {\r\n        return ((ProcessingInstruction) this.event).getData();\r\n    } else {\r\n        throw new IllegalStateException();\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.XMLEventStreamReader#getPIData()",
    "tailType": "method"
  }
]