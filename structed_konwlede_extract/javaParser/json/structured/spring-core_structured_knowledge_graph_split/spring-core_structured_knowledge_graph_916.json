[
  {
    "head": "org.springframework.core.env.AbstractEnvironment",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.AbstractEnvironment#suppressGetenvAccess()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment#merge(ConfigurableEnvironment)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void merge(ConfigurableEnvironment parent) {\r\n    for (PropertySource<?> ps : parent.getPropertySources()) {\r\n        if (!this.propertySources.contains(ps.getName())) {\r\n            this.propertySources.addLast(ps);\r\n        }\r\n    }\r\n    String[] parentActiveProfiles = parent.getActiveProfiles();\r\n    if (!ObjectUtils.isEmpty(parentActiveProfiles)) {\r\n        synchronized (this.activeProfiles) {\r\n            Collections.addAll(this.activeProfiles, parentActiveProfiles);\r\n        }\r\n    }\r\n    String[] parentDefaultProfiles = parent.getDefaultProfiles();\r\n    if (!ObjectUtils.isEmpty(parentDefaultProfiles)) {\r\n        synchronized (this.defaultProfiles) {\r\n            this.defaultProfiles.remove(RESERVED_DEFAULT_PROFILE_NAME);\r\n            Collections.addAll(this.defaultProfiles, parentDefaultProfiles);\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.AbstractEnvironment#merge(ConfigurableEnvironment)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment#merge(ConfigurableEnvironment)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment#getConversionService()",
    "headType": "method",
    "relation": "provide",
    "tail": "//---------------------------------------------------------------------\r\n// Implementation of ConfigurablePropertyResolver interface\r\n//---------------------------------------------------------------------\r\n@Override\r\npublic ConfigurableConversionService getConversionService() {\r\n    return this.propertyResolver.getConversionService();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.AbstractEnvironment#getConversionService()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment#getConversionService()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment#setConversionService(ConfigurableConversionService)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void setConversionService(ConfigurableConversionService conversionService) {\r\n    this.propertyResolver.setConversionService(conversionService);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.AbstractEnvironment#setConversionService(ConfigurableConversionService)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment#setConversionService(ConfigurableConversionService)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment#setPlaceholderPrefix(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void setPlaceholderPrefix(String placeholderPrefix) {\r\n    this.propertyResolver.setPlaceholderPrefix(placeholderPrefix);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.AbstractEnvironment#setPlaceholderPrefix(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment#setPlaceholderPrefix(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment#setPlaceholderSuffix(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void setPlaceholderSuffix(String placeholderSuffix) {\r\n    this.propertyResolver.setPlaceholderSuffix(placeholderSuffix);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.AbstractEnvironment#setPlaceholderSuffix(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment#setPlaceholderSuffix(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment#setValueSeparator(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void setValueSeparator(@Nullable String valueSeparator) {\r\n    this.propertyResolver.setValueSeparator(valueSeparator);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.AbstractEnvironment#setValueSeparator(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment#setValueSeparator(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment#setEscapeCharacter(Character)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void setEscapeCharacter(@Nullable Character escapeCharacter) {\r\n    this.propertyResolver.setEscapeCharacter(escapeCharacter);\r\n}",
    "tailType": "method_code"
  }
]