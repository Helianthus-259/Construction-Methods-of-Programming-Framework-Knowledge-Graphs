[
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#inheritedAnnotationsWhenNoninheritedComposedRepeatableOnClassReturnsAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#inheritedAnnotationsWhenNoninheritedComposedRepeatableOnSuperclassReturnsAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid inheritedAnnotationsWhenNoninheritedComposedRepeatableOnSuperclassReturnsAnnotations() {\r\n    Set<Noninherited> annotations = getAnnotations(null, Noninherited.class, INHERITED_ANNOTATIONS, SubNoninheritedRepeatableClass.class);\r\n    assertThat(annotations).isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#inheritedAnnotationsWhenNoninheritedComposedRepeatableOnSuperclassReturnsAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#inheritedAnnotationsWhenNoninheritedComposedRepeatableOnSuperclassReturnsAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#typeHierarchyWhenNonRepeatableThrowsException()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid typeHierarchyWhenNonRepeatableThrowsException() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> getAnnotations(null, NonRepeatable.class, TYPE_HIERARCHY, getClass())).satisfies(this::nonRepeatableRequirements);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#typeHierarchyWhenNonRepeatableThrowsException()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#typeHierarchyWhenNonRepeatableThrowsException()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#typeHierarchyWhenContainerMissingValueAttributeThrowsException()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid typeHierarchyWhenContainerMissingValueAttributeThrowsException() {\r\n    assertThatAnnotationConfigurationException().isThrownBy(() -> getAnnotations(ContainerMissingValueAttribute.class, InvalidRepeatable.class, TYPE_HIERARCHY, getClass())).satisfies(this::missingValueAttributeRequirements);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#typeHierarchyWhenContainerMissingValueAttributeThrowsException()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#typeHierarchyWhenContainerMissingValueAttributeThrowsException()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#typeHierarchyWhenWhenNonArrayValueAttributeThrowsException()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid typeHierarchyWhenWhenNonArrayValueAttributeThrowsException() {\r\n    assertThatAnnotationConfigurationException().isThrownBy(() -> getAnnotations(ContainerWithNonArrayValueAttribute.class, InvalidRepeatable.class, TYPE_HIERARCHY, getClass())).satisfies(this::nonArrayValueAttributeRequirements);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#typeHierarchyWhenWhenNonArrayValueAttributeThrowsException()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#typeHierarchyWhenWhenNonArrayValueAttributeThrowsException()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#typeHierarchyWhenWrongComponentTypeThrowsException()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid typeHierarchyWhenWrongComponentTypeThrowsException() {\r\n    assertThatAnnotationConfigurationException().isThrownBy(() -> getAnnotations(ContainerWithArrayValueAttributeButWrongComponentType.class, InvalidRepeatable.class, TYPE_HIERARCHY, getClass())).satisfies(this::wrongComponentTypeRequirements);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#typeHierarchyWhenWrongComponentTypeThrowsException()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#typeHierarchyWhenWrongComponentTypeThrowsException()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#typeHierarchyWhenOnClassReturnsAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid typeHierarchyWhenOnClassReturnsAnnotations() {\r\n    Set<PeteRepeat> annotations = getAnnotations(null, PeteRepeat.class, TYPE_HIERARCHY, RepeatableClass.class);\r\n    assertThat(annotations.stream().map(PeteRepeat::value)).containsExactly(\"A\", \"B\", \"C\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#typeHierarchyWhenOnClassReturnsAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#typeHierarchyWhenOnClassReturnsAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#typeHierarchyWhenOnSuperclassReturnsAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid typeHierarchyWhenOnSuperclassReturnsAnnotations() {\r\n    Set<PeteRepeat> annotations = getAnnotations(null, PeteRepeat.class, TYPE_HIERARCHY, SubRepeatableClass.class);\r\n    assertThat(annotations.stream().map(PeteRepeat::value)).containsExactly(\"A\", \"B\", \"C\");\r\n}",
    "tailType": "method_code"
  }
]