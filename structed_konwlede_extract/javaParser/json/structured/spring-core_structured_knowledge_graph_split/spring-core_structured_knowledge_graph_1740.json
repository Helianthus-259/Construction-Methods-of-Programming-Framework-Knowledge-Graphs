[
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWithArrayOfAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWithArrayOfChars()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid synthesizeWithArrayOfChars() {\r\n    CharsContainer charsContainer = GroupOfCharsClass.class.getAnnotation(CharsContainer.class);\r\n    assertThat(charsContainer).isNotNull();\r\n    CharsContainer synthesizedCharsContainer = MergedAnnotation.from(charsContainer).synthesize();\r\n    assertSynthesized(synthesizedCharsContainer);\r\n    char[] chars = synthesizedCharsContainer.chars();\r\n    assertThat(chars).containsExactly('x', 'y', 'z');\r\n    // Alter array returned from synthesized annotation\r\n    chars[0] = '?';\r\n    // Re-retrieve the array from the synthesized annotation\r\n    chars = synthesizedCharsContainer.chars();\r\n    assertThat(chars).containsExactly('x', 'y', 'z');\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWithArrayOfChars()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWithArrayOfChars()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getValueWhenHasDefaultOverride()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getValueWhenHasDefaultOverride() {\r\n    MergedAnnotation<?> annotation = MergedAnnotations.from(DefaultOverrideClass.class).get(DefaultOverrideRoot.class);\r\n    assertThat(annotation.getString(\"text\")).isEqualTo(\"metameta\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getValueWhenHasDefaultOverride()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getValueWhenHasDefaultOverride()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getValueWhenHasDefaultOverrideWithImplicitAlias()",
    "headType": "method",
    "relation": "provide",
    "tail": "// gh-22654\r\n@Test\r\nvoid getValueWhenHasDefaultOverrideWithImplicitAlias() {\r\n    MergedAnnotation<?> annotation1 = MergedAnnotations.from(DefaultOverrideImplicitAliasMetaClass1.class).get(DefaultOverrideRoot.class);\r\n    assertThat(annotation1.getString(\"text\")).isEqualTo(\"alias-meta-1\");\r\n    MergedAnnotation<?> annotation2 = MergedAnnotations.from(DefaultOverrideImplicitAliasMetaClass2.class).get(DefaultOverrideRoot.class);\r\n    assertThat(annotation2.getString(\"text\")).isEqualTo(\"alias-meta-2\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getValueWhenHasDefaultOverrideWithImplicitAlias()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getValueWhenHasDefaultOverrideWithImplicitAlias()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getValueWhenHasDefaultOverrideWithExplicitAlias()",
    "headType": "method",
    "relation": "provide",
    "tail": "// gh-22654\r\n@Test\r\nvoid getValueWhenHasDefaultOverrideWithExplicitAlias() {\r\n    MergedAnnotation<?> annotation = MergedAnnotations.from(DefaultOverrideExplicitAliasRootMetaMetaClass.class).get(DefaultOverrideExplicitAliasRoot.class);\r\n    assertThat(annotation.getString(\"text\")).isEqualTo(\"meta\");\r\n    assertThat(annotation.getString(\"value\")).isEqualTo(\"meta\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getValueWhenHasDefaultOverrideWithExplicitAlias()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getValueWhenHasDefaultOverrideWithExplicitAlias()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getValueWhenThreeDeepMetaWithValue()",
    "headType": "method",
    "relation": "provide",
    "tail": "// gh-22703\r\n@Test\r\nvoid getValueWhenThreeDeepMetaWithValue() {\r\n    MergedAnnotation<?> annotation = MergedAnnotations.from(ValueAttributeMetaMetaClass.class).get(ValueAttribute.class);\r\n    assertThat(annotation.getStringArray(MergedAnnotation.VALUE)).containsExactly(\"FromValueAttributeMeta\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getValueWhenThreeDeepMetaWithValue()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getValueWhenThreeDeepMetaWithValue()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#asAnnotationAttributesReturnsPopulatedAnnotationAttributes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid asAnnotationAttributesReturnsPopulatedAnnotationAttributes() {\r\n    MergedAnnotation<?> annotation = MergedAnnotations.from(SpringApplicationConfigurationClass.class).get(SpringApplicationConfiguration.class);\r\n    AnnotationAttributes attributes = annotation.asAnnotationAttributes(Adapt.CLASS_TO_STRING);\r\n    assertThat(attributes).containsEntry(\"classes\", new String[] { Number.class.getName() });\r\n    assertThat(attributes.annotationType()).isEqualTo(SpringApplicationConfiguration.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#asAnnotationAttributesReturnsPopulatedAnnotationAttributes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#asAnnotationAttributesReturnsPopulatedAnnotationAttributes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getId()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Id\r\n@GeneratedValue(strategy = \"AUTO\")\r\nprivate Long getId() {\r\n    return 42L;\r\n}",
    "tailType": "method_code"
  }
]