[
  {
    "head": "org.springframework.core.codec",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.codec.ByteArrayEncoderTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.codec.ByteArrayEncoderTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.codec;\n\nimport java.nio.charset.StandardCharsets;\n\nimport org.junit.jupiter.api.Test;\nimport reactor.core.publisher.Flux;\n\nimport org.springframework.core.ResolvableType;\nimport org.springframework.core.testfixture.codec.AbstractEncoderTests;\nimport org.springframework.util.MimeTypeUtils;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * @author Arjen Poutsma\n */\nclass ByteArrayEncoderTests extends AbstractEncoderTests<ByteArrayEncoder> {\n\n\tprivate final byte[] fooBytes = \"foo\".getBytes(StandardCharsets.UTF_8);\n\n\tprivate final byte[] barBytes = \"bar\".getBytes(StandardCharsets.UTF_8);\n\n\tByteArrayEncoderTests() {\n\t\tsuper(new ByteArrayEncoder());\n\t}\n\n\n\t@Override\n\t@Test\n\tprotected void canEncode() {\n\t\tassertThat(this.encoder.canEncode(ResolvableType.forClass(byte[].class),\n\t\t\t\tMimeTypeUtils.TEXT_PLAIN)).isTrue();\n\t\tassertThat(this.encoder.canEncode(ResolvableType.forClass(Integer.class),\n\t\t\t\tMimeTypeUtils.TEXT_PLAIN)).isFalse();\n\t\tassertThat(this.encoder.canEncode(ResolvableType.forClass(byte[].class),\n\t\t\t\tMimeTypeUtils.APPLICATION_JSON)).isTrue();\n\n\t\t// SPR-15464\n\t\tassertThat(this.encoder.canEncode(ResolvableType.NONE, null)).isFalse();\n\t}\n\n\t@Override\n\t@Test\n\tprotected void encode() {\n\t\tFlux<byte[]> input = Flux.just(this.fooBytes, this.barBytes);\n\n\t\ttestEncodeAll(input, byte[].class, step -> step\n\t\t\t\t.consumeNextWith(expectBytes(this.fooBytes))\n\t\t\t\t.consumeNextWith(expectBytes(this.barBytes))\n\t\t\t\t.verifyComplete());\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.codec.ByteArrayEncoderTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.codec.ByteArrayEncoderTests#fooBytes",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.codec.ByteArrayEncoderTests#fooBytes",
    "headType": "field",
    "relation": "haveType",
    "tail": "byte",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.codec.ByteArrayEncoderTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.codec.ByteArrayEncoderTests#barBytes",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.codec.ByteArrayEncoderTests#barBytes",
    "headType": "field",
    "relation": "haveType",
    "tail": "byte",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.codec.ByteArrayEncoderTests#canEncode()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Test\r\nprotected void canEncode() {\r\n    assertThat(this.encoder.canEncode(ResolvableType.forClass(byte[].class), MimeTypeUtils.TEXT_PLAIN)).isTrue();\r\n    assertThat(this.encoder.canEncode(ResolvableType.forClass(Integer.class), MimeTypeUtils.TEXT_PLAIN)).isFalse();\r\n    assertThat(this.encoder.canEncode(ResolvableType.forClass(byte[].class), MimeTypeUtils.APPLICATION_JSON)).isTrue();\r\n    // SPR-15464\r\n    assertThat(this.encoder.canEncode(ResolvableType.NONE, null)).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.ByteArrayEncoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.ByteArrayEncoderTests#canEncode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.ByteArrayEncoderTests#canEncode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.ByteArrayEncoderTests#canEncode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.ByteArrayEncoderTests#encode()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Test\r\nprotected void encode() {\r\n    Flux<byte[]> input = Flux.just(this.fooBytes, this.barBytes);\r\n    testEncodeAll(input, byte[].class, step -> step.consumeNextWith(expectBytes(this.fooBytes)).consumeNextWith(expectBytes(this.barBytes)).verifyComplete());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.ByteArrayEncoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.ByteArrayEncoderTests#encode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.ByteArrayEncoderTests#encode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.ByteArrayEncoderTests#encode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.ByteArrayEncoderTests",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractEncoderTests",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.codec",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.codec",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.codec.ByteBufferDecoderTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.codec.ByteBufferDecoderTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.codec;\n\nimport java.nio.ByteBuffer;\nimport java.nio.charset.StandardCharsets;\nimport java.util.function.Consumer;\n\nimport org.junit.jupiter.api.Test;\nimport reactor.core.publisher.Flux;\n\nimport org.springframework.core.ResolvableType;\nimport org.springframework.core.io.buffer.DataBuffer;\nimport org.springframework.core.testfixture.codec.AbstractDecoderTests;\nimport org.springframework.util.MimeTypeUtils;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * @author Sebastien Deleuze\n */\nclass ByteBufferDecoderTests extends AbstractDecoderTests<ByteBufferDecoder> {\n\n\tprivate final byte[] fooBytes = \"foo\".getBytes(StandardCharsets.UTF_8);\n\n\tprivate final byte[] barBytes = \"bar\".getBytes(StandardCharsets.UTF_8);\n\n\n\tByteBufferDecoderTests() {\n\t\tsuper(new ByteBufferDecoder());\n\t}\n\n\t@Override\n\t@Test\n\tprotected void canDecode() {\n\t\tassertThat(this.decoder.canDecode(ResolvableType.forClass(ByteBuffer.class),\n\t\t\t\tMimeTypeUtils.TEXT_PLAIN)).isTrue();\n\t\tassertThat(this.decoder.canDecode(ResolvableType.forClass(Integer.class),\n\t\t\t\tMimeTypeUtils.TEXT_PLAIN)).isFalse();\n\t\tassertThat(this.decoder.canDecode(ResolvableType.forClass(ByteBuffer.class),\n\t\t\t\tMimeTypeUtils.APPLICATION_JSON)).isTrue();\n\t}\n\n\t@Override\n\t@Test\n\tprotected void decode() {\n\t\tFlux<DataBuffer> input = Flux.concat(\n\t\t\t\tdataBuffer(this.fooBytes),\n\t\t\t\tdataBuffer(this.barBytes));\n\n\t\ttestDecodeAll(input, ByteBuffer.class, step -> step\n\t\t\t\t.consumeNextWith(expectByteBuffer(ByteBuffer.wrap(this.fooBytes)))\n\t\t\t\t.consumeNextWith(expectByteBuffer(ByteBuffer.wrap(this.barBytes)))\n\t\t\t\t.verifyComplete());\n\n\n\t}\n\n\t@Override\n\t@Test\n\tprotected void decodeToMono() {\n\t\tFlux<DataBuffer> input = Flux.concat(\n\t\t\t\tdataBuffer(this.fooBytes),\n\t\t\t\tdataBuffer(this.barBytes));\n\t\tByteBuffer expected = ByteBuffer.allocate(this.fooBytes.length + this.barBytes.length);\n\t\texpected.put(this.fooBytes).put(this.barBytes).flip();\n\n\t\ttestDecodeToMonoAll(input, ByteBuffer.class, step -> step\n\t\t\t\t.consumeNextWith(expectByteBuffer(expected))\n\t\t\t\t.verifyComplete());\n\n\t}\n\n\tprivate Consumer<ByteBuffer> expectByteBuffer(ByteBuffer expected) {\n\t\treturn actual -> assertThat(actual).isEqualTo(expected);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.codec.ByteBufferDecoderTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.codec.ByteBufferDecoderTests#fooBytes",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.codec.ByteBufferDecoderTests#fooBytes",
    "headType": "field",
    "relation": "haveType",
    "tail": "byte",
    "tailType": "type"
  }
]