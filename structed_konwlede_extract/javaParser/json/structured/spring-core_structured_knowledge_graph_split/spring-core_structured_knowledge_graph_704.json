[
  {
    "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.impl.FieldProviderTransformer#end_class()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#end_class()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#generate()",
    "headType": "method",
    "relation": "provide",
    "tail": "private void generate() throws Exception {\r\n    final String[] names = (String[]) fields.keySet().toArray(new String[fields.size()]);\r\n    int[] indexes = new int[names.length];\r\n    for (int i = 0; i < indexes.length; i++) {\r\n        indexes[i] = i;\r\n    }\r\n    super.declare_field(Constants.PRIVATE_FINAL_STATIC, FIELD_NAMES, Constants.TYPE_STRING_ARRAY, null);\r\n    super.declare_field(Constants.PRIVATE_FINAL_STATIC, FIELD_TYPES, Constants.TYPE_CLASS_ARRAY, null);\r\n    // use separate methods here because each process switch inner class needs a final CodeEmitter\r\n    initFieldProvider(names);\r\n    getNames();\r\n    getTypes();\r\n    getField(names);\r\n    setField(names);\r\n    setByIndex(names, indexes);\r\n    getByIndex(names, indexes);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.impl.FieldProviderTransformer#generate()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#initFieldProvider(String[])",
    "headType": "method",
    "relation": "provide",
    "tail": "private void initFieldProvider(String[] names) {\r\n    CodeEmitter e = getStaticHook();\r\n    EmitUtils.push_object(e, names);\r\n    e.putstatic(getClassType(), FIELD_NAMES, Constants.TYPE_STRING_ARRAY);\r\n    e.push(names.length);\r\n    e.newarray(Constants.TYPE_CLASS);\r\n    e.dup();\r\n    for (int i = 0; i < names.length; i++) {\r\n        e.dup();\r\n        e.push(i);\r\n        Type type = (Type) fields.get(names[i]);\r\n        EmitUtils.load_class(e, type);\r\n        e.aastore();\r\n    }\r\n    e.putstatic(getClassType(), FIELD_TYPES, Constants.TYPE_CLASS_ARRAY);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.impl.FieldProviderTransformer#initFieldProvider(String[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#getNames()",
    "headType": "method",
    "relation": "provide",
    "tail": "private void getNames() {\r\n    CodeEmitter e = super.begin_method(Constants.ACC_PUBLIC, PROVIDER_GET_NAMES, null);\r\n    e.getstatic(getClassType(), FIELD_NAMES, Constants.TYPE_STRING_ARRAY);\r\n    e.return_value();\r\n    e.end_method();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.impl.FieldProviderTransformer#getNames()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#getTypes()",
    "headType": "method",
    "relation": "provide",
    "tail": "private void getTypes() {\r\n    CodeEmitter e = super.begin_method(Constants.ACC_PUBLIC, PROVIDER_GET_TYPES, null);\r\n    e.getstatic(getClassType(), FIELD_TYPES, Constants.TYPE_CLASS_ARRAY);\r\n    e.return_value();\r\n    e.end_method();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.impl.FieldProviderTransformer#getTypes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#setByIndex(String[],int[])",
    "headType": "method",
    "relation": "provide",
    "tail": "private void setByIndex(final String[] names, final int[] indexes) throws Exception {\r\n    final CodeEmitter e = super.begin_method(Constants.ACC_PUBLIC, PROVIDER_SET_BY_INDEX, null);\r\n    e.load_this();\r\n    e.load_arg(1);\r\n    e.load_arg(0);\r\n    e.process_switch(indexes, new ProcessSwitchCallback() {\r\n\r\n        @Override\r\n        public void processCase(int key, Label end) throws Exception {\r\n            Type type = (Type) fields.get(names[key]);\r\n            e.unbox(type);\r\n            e.putfield(names[key]);\r\n            e.return_value();\r\n        }\r\n\r\n        @Override\r\n        public void processDefault() throws Exception {\r\n            e.throw_exception(ILLEGAL_ARGUMENT_EXCEPTION, \"Unknown field index\");\r\n        }\r\n    });\r\n    e.end_method();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.impl.FieldProviderTransformer#setByIndex(String[],int[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#getByIndex(String[],int[])",
    "headType": "method",
    "relation": "provide",
    "tail": "private void getByIndex(final String[] names, final int[] indexes) throws Exception {\r\n    final CodeEmitter e = super.begin_method(Constants.ACC_PUBLIC, PROVIDER_GET_BY_INDEX, null);\r\n    e.load_this();\r\n    e.load_arg(0);\r\n    e.process_switch(indexes, new ProcessSwitchCallback() {\r\n\r\n        @Override\r\n        public void processCase(int key, Label end) throws Exception {\r\n            Type type = (Type) fields.get(names[key]);\r\n            e.getfield(names[key]);\r\n            e.box(type);\r\n            e.return_value();\r\n        }\r\n\r\n        @Override\r\n        public void processDefault() throws Exception {\r\n            e.throw_exception(ILLEGAL_ARGUMENT_EXCEPTION, \"Unknown field index\");\r\n        }\r\n    });\r\n    e.end_method();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.impl.FieldProviderTransformer#getByIndex(String[],int[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#getField(String[])",
    "headType": "method",
    "relation": "provide",
    "tail": "// TODO: if this is used to enhance class files SWITCH_STYLE_TRIE should be used\r\n// to avoid JVM hashcode implementation incompatibilities\r\nprivate void getField(String[] names) throws Exception {\r\n    final CodeEmitter e = begin_method(Constants.ACC_PUBLIC, PROVIDER_GET, null);\r\n    e.load_this();\r\n    e.load_arg(0);\r\n    EmitUtils.string_switch(e, names, Constants.SWITCH_STYLE_HASH, new ObjectSwitchCallback() {\r\n\r\n        @Override\r\n        public void processCase(Object key, Label end) {\r\n            Type type = (Type) fields.get(key);\r\n            e.getfield((String) key);\r\n            e.box(type);\r\n            e.return_value();\r\n        }\r\n\r\n        @Override\r\n        public void processDefault() {\r\n            e.throw_exception(ILLEGAL_ARGUMENT_EXCEPTION, \"Unknown field name\");\r\n        }\r\n    });\r\n    e.end_method();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.impl.FieldProviderTransformer#getField(String[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#setField(String[])",
    "headType": "method",
    "relation": "provide",
    "tail": "private void setField(String[] names) throws Exception {\r\n    final CodeEmitter e = begin_method(Constants.ACC_PUBLIC, PROVIDER_SET, null);\r\n    e.load_this();\r\n    e.load_arg(1);\r\n    e.load_arg(0);\r\n    EmitUtils.string_switch(e, names, Constants.SWITCH_STYLE_HASH, new ObjectSwitchCallback() {\r\n\r\n        @Override\r\n        public void processCase(Object key, Label end) {\r\n            Type type = (Type) fields.get(key);\r\n            e.unbox(type);\r\n            e.putfield((String) key);\r\n            e.return_value();\r\n        }\r\n\r\n        @Override\r\n        public void processDefault() {\r\n            e.throw_exception(ILLEGAL_ARGUMENT_EXCEPTION, \"Unknown field name\");\r\n        }\r\n    });\r\n    e.end_method();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.impl.FieldProviderTransformer#setField(String[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
    "headType": "class",
    "relation": "extend",
    "tail": "ClassEmitterTransformer",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.transform.impl",
    "tailType": "package"
  }
]