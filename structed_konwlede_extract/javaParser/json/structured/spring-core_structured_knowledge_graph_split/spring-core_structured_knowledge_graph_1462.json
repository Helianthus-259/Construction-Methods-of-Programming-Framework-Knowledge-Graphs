[
  {
    "head": "org.springframework.util.xml.StaxUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxUtils#createCustomStaxResult(XMLStreamWriter)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.StaxUtils#createCustomStaxResult(XMLEventWriter)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a custom, non-JAXP 1.4 StAX {@link Result} for the given {@link XMLEventWriter}.\r\n * @param eventWriter the StAX event writer\r\n * @return a source wrapping the {@code eventWriter}\r\n */\r\npublic static Result createCustomStaxResult(XMLEventWriter eventWriter) {\r\n    return new StaxResult(eventWriter);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.StaxUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxUtils#createCustomStaxResult(XMLEventWriter)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.StaxUtils#isStaxResult(Result)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Indicate whether the given {@link Result} is a JAXP 1.4 StAX Result or\r\n * custom StAX Result.\r\n * @return {@code true} if {@code result} is a JAXP 1.4 {@link StAXResult} or\r\n * custom StAX Result; {@code false} otherwise\r\n */\r\npublic static boolean isStaxResult(Result result) {\r\n    return (result instanceof StAXResult || result instanceof StaxResult);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.StaxUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxUtils#isStaxResult(Result)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.StaxUtils#getXMLStreamWriter(Result)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the {@link XMLStreamWriter} for the given StAX Result.\r\n * @param result a JAXP 1.4 {@link StAXResult}\r\n * @return the {@link XMLStreamReader}\r\n * @throws IllegalArgumentException if {@code source} isn't a JAXP 1.4 {@link StAXResult}\r\n * or custom StAX Result\r\n */\r\n@Nullable\r\npublic static XMLStreamWriter getXMLStreamWriter(Result result) {\r\n    if (result instanceof StAXResult stAXResult) {\r\n        return stAXResult.getXMLStreamWriter();\r\n    } else if (result instanceof StaxResult staxResult) {\r\n        return staxResult.getXMLStreamWriter();\r\n    } else {\r\n        throw new IllegalArgumentException(\"Result '\" + result + \"' is neither StaxResult nor StAXResult\");\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.StaxUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxUtils#getXMLStreamWriter(Result)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.StaxUtils#getXMLStreamWriter(Result)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.StaxUtils#getXMLEventWriter(Result)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the {@link XMLEventWriter} for the given StAX Result.\r\n * @param result a JAXP 1.4 {@link StAXResult}\r\n * @return the {@link XMLStreamReader}\r\n * @throws IllegalArgumentException if {@code source} isn't a JAXP 1.4 {@link StAXResult}\r\n * or custom StAX Result\r\n */\r\n@Nullable\r\npublic static XMLEventWriter getXMLEventWriter(Result result) {\r\n    if (result instanceof StAXResult stAXResult) {\r\n        return stAXResult.getXMLEventWriter();\r\n    } else if (result instanceof StaxResult staxResult) {\r\n        return staxResult.getXMLEventWriter();\r\n    } else {\r\n        throw new IllegalArgumentException(\"Result '\" + result + \"' is neither StaxResult nor StAXResult\");\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.StaxUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxUtils#getXMLEventWriter(Result)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.StaxUtils#getXMLEventWriter(Result)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.StaxUtils#createXMLEventReader(List<XMLEvent>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a {@link XMLEventReader} from the given list of {@link XMLEvent}.\r\n * @param events the list of {@link XMLEvent XMLEvents}.\r\n * @return an {@code XMLEventReader} that reads from the given events\r\n * @since 5.0\r\n */\r\npublic static XMLEventReader createXMLEventReader(List<XMLEvent> events) {\r\n    return new ListBasedXMLEventReader(events);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.StaxUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxUtils#createXMLEventReader(List<XMLEvent>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.StaxUtils#createContentHandler(XMLStreamWriter)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a SAX {@link ContentHandler} that writes to the given StAX {@link XMLStreamWriter}.\r\n * @param streamWriter the StAX stream writer\r\n * @return a content handler writing to the {@code streamWriter}\r\n */\r\npublic static ContentHandler createContentHandler(XMLStreamWriter streamWriter) {\r\n    return new StaxStreamHandler(streamWriter);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.StaxUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxUtils#createContentHandler(XMLStreamWriter)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.StaxUtils#createContentHandler(XMLEventWriter)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a SAX {@link ContentHandler} that writes events to the given StAX {@link XMLEventWriter}.\r\n * @param eventWriter the StAX event writer\r\n * @return a content handler writing to the {@code eventWriter}\r\n */\r\npublic static ContentHandler createContentHandler(XMLEventWriter eventWriter) {\r\n    return new StaxEventHandler(eventWriter);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.StaxUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxUtils#createContentHandler(XMLEventWriter)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.StaxUtils#createXMLReader(XMLStreamReader)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a SAX {@link XMLReader} that reads from the given StAX {@link XMLStreamReader}.\r\n * @param streamReader the StAX stream reader\r\n * @return a XMLReader reading from the {@code streamWriter}\r\n */\r\npublic static XMLReader createXMLReader(XMLStreamReader streamReader) {\r\n    return new StaxStreamXMLReader(streamReader);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.StaxUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxUtils#createXMLReader(XMLStreamReader)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.StaxUtils#createXMLReader(XMLEventReader)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a SAX {@link XMLReader} that reads from the given StAX {@link XMLEventReader}.\r\n * @param eventReader the StAX event reader\r\n * @return a XMLReader reading from the {@code eventWriter}\r\n */\r\npublic static XMLReader createXMLReader(XMLEventReader eventReader) {\r\n    return new StaxEventXMLReader(eventReader);\r\n}",
    "tailType": "method_code"
  }
]