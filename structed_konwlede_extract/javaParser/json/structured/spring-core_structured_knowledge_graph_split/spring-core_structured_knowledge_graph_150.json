[
  {
    "head": "org.springframework.util.ClassUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtilsTests#getShortNameForPrimitiveArrayClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#getShortNameForPrimitiveArrayClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#getShortNameForMultiDimensionalPrimitiveArrayClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getShortNameForMultiDimensionalPrimitiveArrayClass() {\r\n    String className = ClassUtils.getShortName(byte[][][].class);\r\n    assertThat(className).as(\"Class name did not match\").isEqualTo(\"byte[][][]\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtilsTests#getShortNameForMultiDimensionalPrimitiveArrayClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#getShortNameForMultiDimensionalPrimitiveArrayClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#getShortNameForNestedClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getShortNameForNestedClass() {\r\n    String className = ClassUtils.getShortName(NestedClass.class);\r\n    assertThat(className).as(\"Class name did not match\").isEqualTo(\"ClassUtilsTests.NestedClass\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtilsTests#getShortNameForNestedClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#getShortNameForNestedClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#getShortNameAsProperty()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getShortNameAsProperty() {\r\n    String shortName = ClassUtils.getShortNameAsProperty(this.getClass());\r\n    assertThat(shortName).as(\"Class name did not match\").isEqualTo(\"classUtilsTests\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtilsTests#getShortNameAsProperty()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#getShortNameAsProperty()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#getClassFileName()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getClassFileName() {\r\n    assertThat(ClassUtils.getClassFileName(String.class)).isEqualTo(\"String.class\");\r\n    assertThat(ClassUtils.getClassFileName(getClass())).isEqualTo(\"ClassUtilsTests.class\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtilsTests#getClassFileName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#getClassFileName()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#getPackageName()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getPackageName() {\r\n    assertThat(ClassUtils.getPackageName(String.class)).isEqualTo(\"java.lang\");\r\n    assertThat(ClassUtils.getPackageName(getClass())).isEqualTo(getClass().getPackage().getName());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtilsTests#getPackageName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#getPackageName()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#getQualifiedName()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getQualifiedName() {\r\n    String className = ClassUtils.getQualifiedName(getClass());\r\n    assertThat(className).as(\"Class name did not match\").isEqualTo(\"org.springframework.util.ClassUtilsTests\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtilsTests#getQualifiedName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#getQualifiedName()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]