[
  {
    "head": "org.springframework.core.ResolvableTypeTests#isAssignableFromForClassAndSimpleVariable()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#isAssignableFromForSameClassNonExtendsGenerics()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isAssignableFromForSameClassNonExtendsGenerics() throws Exception {\r\n    ResolvableType objectList = ResolvableType.forField(AssignmentBase.class.getField(\"listo\"), Assignment.class);\r\n    ResolvableType stringList = ResolvableType.forField(AssignmentBase.class.getField(\"lists\"), Assignment.class);\r\n    assertThatResolvableType(stringList).isNotAssignableFrom(objectList);\r\n    assertThatResolvableType(objectList).isNotAssignableFrom(stringList);\r\n    assertThatResolvableType(stringList).isAssignableFrom(stringList);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#isAssignableFromForSameClassNonExtendsGenerics()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#isAssignableFromForSameClassNonExtendsGenerics()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#isAssignableFromForSameClassExtendsGenerics()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isAssignableFromForSameClassExtendsGenerics() throws Exception {\r\n    // Generic assignment can be a little confusing, given:\r\n    //\r\n    // List<CharSequence> c1, List<? extends CharSequence> c2, List<String> s;\r\n    //\r\n    // c2 = s; is allowed and is often used for argument input, for example\r\n    // see List.addAll(). You can get items from c2 but you cannot add items without\r\n    // getting a generic type 'is not applicable for the arguments' error. This makes\r\n    // sense since if you added a StringBuffer to c2 it would break the rules on s.\r\n    //\r\n    // c1 = s; not allowed. Since there is no '? extends' to cause the generic\r\n    // 'is not applicable for the arguments' error when adding (which would pollute\r\n    // s).\r\n    ResolvableType objectList = ResolvableType.forField(AssignmentBase.class.getField(\"listo\"), Assignment.class);\r\n    ResolvableType charSequenceList = ResolvableType.forField(AssignmentBase.class.getField(\"listc\"), Assignment.class);\r\n    ResolvableType stringList = ResolvableType.forField(AssignmentBase.class.getField(\"lists\"), Assignment.class);\r\n    ResolvableType extendsObjectList = ResolvableType.forField(AssignmentBase.class.getField(\"listxo\"), Assignment.class);\r\n    ResolvableType extendsCharSequenceList = ResolvableType.forField(AssignmentBase.class.getField(\"listxc\"), Assignment.class);\r\n    ResolvableType extendsStringList = ResolvableType.forField(AssignmentBase.class.getField(\"listxs\"), Assignment.class);\r\n    assertThatResolvableType(objectList).isNotAssignableFrom(extendsObjectList, extendsCharSequenceList, extendsStringList);\r\n    assertThatResolvableType(charSequenceList).isNotAssignableFrom(extendsObjectList, extendsCharSequenceList, extendsStringList);\r\n    assertThatResolvableType(stringList).isNotAssignableFrom(extendsObjectList, extendsCharSequenceList, extendsStringList);\r\n    assertThatResolvableType(extendsObjectList).isAssignableFrom(objectList, charSequenceList, stringList);\r\n    assertThatResolvableType(extendsObjectList).isAssignableFrom(extendsObjectList, extendsCharSequenceList, extendsStringList);\r\n    assertThatResolvableType(extendsCharSequenceList).isAssignableFrom(extendsCharSequenceList, extendsStringList).isNotAssignableFrom(extendsObjectList);\r\n    assertThatResolvableType(extendsCharSequenceList).isAssignableFrom(charSequenceList, stringList).isNotAssignableFrom(objectList);\r\n    assertThatResolvableType(extendsStringList).isAssignableFrom(extendsStringList).isNotAssignableFrom(extendsObjectList, extendsCharSequenceList);\r\n    assertThatResolvableType(extendsStringList).isAssignableFrom(stringList).isNotAssignableFrom(objectList, charSequenceList);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#isAssignableFromForSameClassExtendsGenerics()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#isAssignableFromForSameClassExtendsGenerics()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#isAssignableFromForDifferentClassesWithGenerics()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isAssignableFromForDifferentClassesWithGenerics() throws Exception {\r\n    ResolvableType extendsCharSequenceCollection = ResolvableType.forField(AssignmentBase.class.getField(\"collectionxc\"), Assignment.class);\r\n    ResolvableType charSequenceCollection = ResolvableType.forField(AssignmentBase.class.getField(\"collectionc\"), Assignment.class);\r\n    ResolvableType charSequenceList = ResolvableType.forField(AssignmentBase.class.getField(\"listc\"), Assignment.class);\r\n    ResolvableType extendsCharSequenceList = ResolvableType.forField(AssignmentBase.class.getField(\"listxc\"), Assignment.class);\r\n    ResolvableType extendsStringList = ResolvableType.forField(AssignmentBase.class.getField(\"listxs\"), Assignment.class);\r\n    assertThatResolvableType(extendsCharSequenceCollection).isAssignableFrom(charSequenceCollection, charSequenceList, extendsCharSequenceList, extendsStringList);\r\n    assertThatResolvableType(charSequenceCollection).isAssignableFrom(charSequenceList).isNotAssignableFrom(extendsCharSequenceList, extendsStringList);\r\n    assertThatResolvableType(charSequenceList).isNotAssignableFrom(extendsCharSequenceCollection, charSequenceCollection);\r\n    assertThatResolvableType(extendsCharSequenceList).isNotAssignableFrom(extendsCharSequenceCollection, charSequenceCollection);\r\n    assertThatResolvableType(extendsStringList).isNotAssignableFrom(charSequenceCollection, charSequenceList, extendsCharSequenceList);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#isAssignableFromForDifferentClassesWithGenerics()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#isAssignableFromForDifferentClassesWithGenerics()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#isAssignableFromForArrays()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isAssignableFromForArrays() throws Exception {\r\n    ResolvableType object = ResolvableType.forField(AssignmentBase.class.getField(\"o\"), Assignment.class);\r\n    ResolvableType objectArray = ResolvableType.forField(AssignmentBase.class.getField(\"oarray\"), Assignment.class);\r\n    ResolvableType charSequenceArray = ResolvableType.forField(AssignmentBase.class.getField(\"carray\"), Assignment.class);\r\n    ResolvableType stringArray = ResolvableType.forField(AssignmentBase.class.getField(\"sarray\"), Assignment.class);\r\n    assertThatResolvableType(object).isAssignableFrom(objectArray, charSequenceArray, stringArray);\r\n    assertThatResolvableType(objectArray).isAssignableFrom(objectArray, charSequenceArray, stringArray).isNotAssignableFrom(object);\r\n    assertThatResolvableType(charSequenceArray).isAssignableFrom(charSequenceArray, stringArray).isNotAssignableFrom(object, objectArray);\r\n    assertThatResolvableType(stringArray).isAssignableFrom(stringArray).isNotAssignableFrom(object, objectArray, charSequenceArray);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#isAssignableFromForArrays()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#isAssignableFromForArrays()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#isAssignableFromForWildcards()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isAssignableFromForWildcards() throws Exception {\r\n    ResolvableType object = ResolvableType.forClass(Object.class);\r\n    ResolvableType charSequence = ResolvableType.forClass(CharSequence.class);\r\n    ResolvableType string = ResolvableType.forClass(String.class);\r\n    ResolvableType extendsAnon = ResolvableType.forField(AssignmentBase.class.getField(\"listAnon\"), Assignment.class).getGeneric();\r\n    ResolvableType extendsObject = ResolvableType.forField(AssignmentBase.class.getField(\"listxo\"), Assignment.class).getGeneric();\r\n    ResolvableType extendsCharSequence = ResolvableType.forField(AssignmentBase.class.getField(\"listxc\"), Assignment.class).getGeneric();\r\n    ResolvableType extendsString = ResolvableType.forField(AssignmentBase.class.getField(\"listxs\"), Assignment.class).getGeneric();\r\n    ResolvableType superObject = ResolvableType.forField(AssignmentBase.class.getField(\"listso\"), Assignment.class).getGeneric();\r\n    ResolvableType superCharSequence = ResolvableType.forField(AssignmentBase.class.getField(\"listsc\"), Assignment.class).getGeneric();\r\n    ResolvableType superString = ResolvableType.forField(AssignmentBase.class.getField(\"listss\"), Assignment.class).getGeneric();\r\n    // Language Spec 4.5.1. Type Arguments and Wildcards\r\n    // ? extends T <= ? extends S if T <: S\r\n    assertThatResolvableType(extendsCharSequence).isAssignableFrom(extendsCharSequence, extendsString).isNotAssignableFrom(extendsObject);\r\n    assertThatResolvableType(extendsCharSequence).isAssignableFrom(charSequence, string).isNotAssignableFrom(object);\r\n    // ? super T <= ? super S if S <: T\r\n    assertThatResolvableType(superCharSequence).isAssignableFrom(superObject, superCharSequence).isNotAssignableFrom(superString);\r\n    assertThatResolvableType(superCharSequence).isAssignableFrom(object, charSequence).isNotAssignableFrom(string);\r\n    // [Implied] super / extends cannot be mixed\r\n    assertThatResolvableType(superCharSequence).isNotAssignableFrom(extendsObject, extendsCharSequence, extendsString);\r\n    assertThatResolvableType(extendsCharSequence).isNotAssignableFrom(superObject, superCharSequence, superString);\r\n    // T <= T\r\n    assertThatResolvableType(charSequence).isAssignableFrom(charSequence, string).isNotAssignableFrom(object);\r\n    // T <= ? extends T\r\n    assertThatResolvableType(extendsCharSequence).isAssignableFrom(charSequence, string).isNotAssignableFrom(object);\r\n    assertThatResolvableType(charSequence).isAssignableFrom(extendsCharSequence, extendsString).isNotAssignableFrom(extendsObject);\r\n    assertThatResolvableType(extendsAnon).isAssignableFrom(object, charSequence, string);\r\n    // T <= ? super T\r\n    assertThatResolvableType(superCharSequence).isAssignableFrom(object, charSequence).isNotAssignableFrom(string);\r\n    assertThatResolvableType(charSequence).isNotAssignableFrom(superObject, superCharSequence, superString);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#isAssignableFromForWildcards()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#isAssignableFromForWildcards()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#isAssignableFromForComplexWildcards()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isAssignableFromForComplexWildcards() throws Exception {\r\n    ResolvableType complex1 = ResolvableType.forField(AssignmentBase.class.getField(\"complexWildcard1\"));\r\n    ResolvableType complex2 = ResolvableType.forField(AssignmentBase.class.getField(\"complexWildcard2\"));\r\n    ResolvableType complex3 = ResolvableType.forField(AssignmentBase.class.getField(\"complexWildcard3\"));\r\n    ResolvableType complex4 = ResolvableType.forField(AssignmentBase.class.getField(\"complexWildcard4\"));\r\n    assertThatResolvableType(complex1).isAssignableFrom(complex2);\r\n    assertThatResolvableType(complex2).isNotAssignableFrom(complex1);\r\n    assertThatResolvableType(complex3).isAssignableFrom(complex4);\r\n    assertThatResolvableType(complex4).isNotAssignableFrom(complex3);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#isAssignableFromForComplexWildcards()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#isAssignableFromForComplexWildcards()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#isAssignableFromForUnresolvedWildcard()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isAssignableFromForUnresolvedWildcard() {\r\n    ResolvableType wildcard = ResolvableType.forInstance(new Wildcard<>());\r\n    ResolvableType wildcardFixed = ResolvableType.forInstance(new WildcardFixed());\r\n    ResolvableType wildcardConcrete = ResolvableType.forClassWithGenerics(Wildcard.class, CharSequence.class);\r\n    ResolvableType wildcardConsumer = ResolvableType.forInstance(new WildcardConsumer<>());\r\n    assertThat(wildcard.isAssignableFrom(wildcardFixed)).isTrue();\r\n    assertThat(wildcard.isAssignableFromResolvedPart(wildcardFixed)).isTrue();\r\n    assertThat(wildcard.isAssignableFrom(wildcardConcrete)).isTrue();\r\n    assertThat(wildcard.isAssignableFromResolvedPart(wildcardConcrete)).isTrue();\r\n    assertThat(wildcardFixed.isAssignableFrom(wildcard)).isFalse();\r\n    assertThat(wildcardFixed.isAssignableFromResolvedPart(wildcard)).isFalse();\r\n    assertThat(wildcardFixed.isAssignableFrom(wildcardConcrete)).isFalse();\r\n    assertThat(wildcardFixed.isAssignableFromResolvedPart(wildcardConcrete)).isFalse();\r\n    assertThat(wildcardConcrete.isAssignableFrom(wildcard)).isTrue();\r\n    assertThat(wildcardConcrete.isAssignableFromResolvedPart(wildcard)).isTrue();\r\n    assertThat(wildcardConcrete.isAssignableFrom(wildcardFixed)).isFalse();\r\n    assertThat(wildcardConcrete.isAssignableFromResolvedPart(wildcardFixed)).isFalse();\r\n    assertThat(wildcardConsumer.as(Consumer.class).getGeneric().isAssignableFrom(wildcard)).isFalse();\r\n    assertThat(wildcardConsumer.as(Consumer.class).getGeneric().isAssignableFromResolvedPart(wildcard)).isTrue();\r\n}",
    "tailType": "method_code"
  }
]