[
  {
    "head": "org.springframework.core.convert.support.StringToArrayConverter#getConvertibleTypes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.StringToArrayConverter#matches(TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {\r\n    return ConversionUtils.canConvertElements(sourceType, targetType.getElementTypeDescriptor(), this.conversionService);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.StringToArrayConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.StringToArrayConverter#matches(TypeDescriptor,TypeDescriptor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.StringToArrayConverter#matches(TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.StringToArrayConverter#convert(Object,TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic Object convert(@Nullable Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {\r\n    if (source == null) {\r\n        return null;\r\n    }\r\n    String string = (String) source;\r\n    String[] fields = StringUtils.commaDelimitedListToStringArray(string);\r\n    TypeDescriptor targetElementType = targetType.getElementTypeDescriptor();\r\n    Assert.state(targetElementType != null, \"No target element type\");\r\n    Object target = Array.newInstance(targetElementType.getType(), fields.length);\r\n    for (int i = 0; i < fields.length; i++) {\r\n        String sourceElement = fields[i];\r\n        Object targetElement = this.conversionService.convert(sourceElement.trim(), sourceType, targetElementType);\r\n        Array.set(target, i, targetElement);\r\n    }\r\n    return target;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.StringToArrayConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.StringToArrayConverter#convert(Object,TypeDescriptor,TypeDescriptor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.StringToArrayConverter#convert(Object,TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.StringToArrayConverter#convert(Object,TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.convert.support",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.convert.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.support.StringToBooleanConverter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.support.StringToBooleanConverter",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert.support;\n\nimport java.util.Locale;\nimport java.util.Set;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.convert.converter.Converter;\n\n/**\n * Converts a String to a Boolean.\n *\n * @author Keith Donald\n * @author Juergen Hoeller\n * @author Sam Brannen\n * @since 3.0\n */\nfinal class StringToBooleanConverter implements Converter<String, Boolean> {\n\n\tprivate static final Set<String> trueValues = Set.of(\"true\", \"on\", \"yes\", \"1\");\n\n\tprivate static final Set<String> falseValues = Set.of(\"false\", \"off\", \"no\", \"0\");\n\n\n\t@Override\n\tpublic @Nullable Boolean convert(String source) {\n\t\tString value = source.trim();\n\t\tif (value.isEmpty()) {\n\t\t\treturn null;\n\t\t}\n\t\tvalue = value.toLowerCase(Locale.ROOT);\n\t\tif (trueValues.contains(value)) {\n\t\t\treturn Boolean.TRUE;\n\t\t}\n\t\telse if (falseValues.contains(value)) {\n\t\t\treturn Boolean.FALSE;\n\t\t}\n\t\telse {\n\t\t\tthrow new IllegalArgumentException(\"Invalid boolean value '\" + source + \"'\");\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.convert.support.StringToBooleanConverter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.support.StringToBooleanConverter#trueValues",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.support.StringToBooleanConverter#trueValues",
    "headType": "field",
    "relation": "haveType",
    "tail": "Set<String>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.support.StringToBooleanConverter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.support.StringToBooleanConverter#falseValues",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.support.StringToBooleanConverter#falseValues",
    "headType": "field",
    "relation": "haveType",
    "tail": "Set<String>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.support.StringToBooleanConverter#convert(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic Boolean convert(String source) {\r\n    String value = source.trim();\r\n    if (value.isEmpty()) {\r\n        return null;\r\n    }\r\n    value = value.toLowerCase(Locale.ROOT);\r\n    if (trueValues.contains(value)) {\r\n        return Boolean.TRUE;\r\n    } else if (falseValues.contains(value)) {\r\n        return Boolean.FALSE;\r\n    } else {\r\n        throw new IllegalArgumentException(\"Invalid boolean value '\" + source + \"'\");\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.StringToBooleanConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.StringToBooleanConverter#convert(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.StringToBooleanConverter#convert(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.StringToBooleanConverter#convert(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.convert.support",
    "tailType": "package"
  }
]