[
  {
    "head": "org.springframework.core.annotation.AnnotationAttributes",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.annotation.AnnotationAttributes#annotationType",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributes#annotationType",
    "headType": "field",
    "relation": "haveType",
    "tail": "Class<? extends Annotation>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributes",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.annotation.AnnotationAttributes#displayName",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributes#displayName",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributes",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.annotation.AnnotationAttributes#validated",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributes#validated",
    "headType": "field",
    "relation": "haveType",
    "tail": "boolean",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributes#getAnnotationType(String,ClassLoader)",
    "headType": "method",
    "relation": "provide",
    "tail": "@SuppressWarnings(\"unchecked\")\r\n@Nullable\r\nprivate static Class<? extends Annotation> getAnnotationType(String annotationType, @Nullable ClassLoader classLoader) {\r\n    if (classLoader != null) {\r\n        try {\r\n            return (Class<? extends Annotation>) classLoader.loadClass(annotationType);\r\n        } catch (ClassNotFoundException ex) {\r\n            // Annotation Class not resolvable\r\n        }\r\n    }\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributes",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationAttributes#getAnnotationType(String,ClassLoader)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributes#getAnnotationType(String,ClassLoader)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributes#getAnnotationType(String,ClassLoader)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributes#annotationType()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the type of annotation represented by this {@code AnnotationAttributes}.\r\n * @return the annotation type, or {@code null} if unknown\r\n * @since 4.2\r\n */\r\n@Nullable\r\npublic Class<? extends Annotation> annotationType() {\r\n    return this.annotationType;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributes",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationAttributes#annotationType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributes#annotationType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributes#getString(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the value stored under the specified {@code attributeName} as a string.\r\n * @param attributeName the name of the attribute to get;\r\n * never {@code null} or empty\r\n * @return the value\r\n * @throws IllegalArgumentException if the attribute does not exist or\r\n * if it is not of the expected type\r\n */\r\npublic String getString(String attributeName) {\r\n    return getRequiredAttribute(attributeName, String.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributes",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationAttributes#getString(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributes#getStringArray(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the value stored under the specified {@code attributeName} as an\r\n * array of strings.\r\n * <p>If the value stored under the specified {@code attributeName} is\r\n * a string, it will be wrapped in a single-element array before\r\n * returning it.\r\n * @param attributeName the name of the attribute to get;\r\n * never {@code null} or empty\r\n * @return the value\r\n * @throws IllegalArgumentException if the attribute does not exist or\r\n * if it is not of the expected type\r\n */\r\npublic String[] getStringArray(String attributeName) {\r\n    return getRequiredAttribute(attributeName, String[].class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributes",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationAttributes#getStringArray(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributes#getBoolean(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the value stored under the specified {@code attributeName} as a boolean.\r\n * @param attributeName the name of the attribute to get;\r\n * never {@code null} or empty\r\n * @return the value\r\n * @throws IllegalArgumentException if the attribute does not exist or\r\n * if it is not of the expected type\r\n */\r\npublic boolean getBoolean(String attributeName) {\r\n    return getRequiredAttribute(attributeName, Boolean.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributes",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationAttributes#getBoolean(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributes#getNumber(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the value stored under the specified {@code attributeName} as a number.\r\n * @param attributeName the name of the attribute to get;\r\n * never {@code null} or empty\r\n * @return the value\r\n * @throws IllegalArgumentException if the attribute does not exist or\r\n * if it is not of the expected type\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\npublic <N extends Number> N getNumber(String attributeName) {\r\n    return (N) getRequiredAttribute(attributeName, Number.class);\r\n}",
    "tailType": "method_code"
  }
]