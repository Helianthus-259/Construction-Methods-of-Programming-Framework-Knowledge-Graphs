[
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.io.buffer",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.io.buffer",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.buffer.JettyDataBuffer",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBuffer",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io.buffer;\n\nimport java.nio.ByteBuffer;\nimport java.nio.charset.Charset;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport java.util.function.IntPredicate;\n\nimport org.eclipse.jetty.io.Content;\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.util.Assert;\n\n/**\n * Implementation of the {@code DataBuffer} interface that can wrap a Jetty\n * {@link Content.Chunk}. Typically constructed with {@link JettyDataBufferFactory}.\n *\n * @author Greg Wilkins\n * @author Lachlan Roberts\n * @author Arjen Poutsma\n * @since 6.2\n */\npublic final class JettyDataBuffer implements PooledDataBuffer {\n\n\tprivate final DefaultDataBuffer delegate;\n\n\tprivate final Content.@Nullable Chunk chunk;\n\n\tprivate final JettyDataBufferFactory bufferFactory;\n\n\tprivate final AtomicInteger refCount = new AtomicInteger(1);\n\n\n\tJettyDataBuffer(JettyDataBufferFactory bufferFactory, DefaultDataBuffer delegate, Content.Chunk chunk) {\n\t\tAssert.notNull(bufferFactory, \"BufferFactory must not be null\");\n\t\tAssert.notNull(delegate, \"Delegate must not be null\");\n\t\tAssert.notNull(chunk, \"Chunk must not be null\");\n\n\t\tthis.bufferFactory = bufferFactory;\n\t\tthis.delegate = delegate;\n\t\tthis.chunk = chunk;\n\t\tthis.chunk.retain();\n\t}\n\n\tJettyDataBuffer(JettyDataBufferFactory bufferFactory, DefaultDataBuffer delegate) {\n\t\tAssert.notNull(bufferFactory, \"BufferFactory must not be null\");\n\t\tAssert.notNull(delegate, \"Delegate must not be null\");\n\n\t\tthis.bufferFactory = bufferFactory;\n\t\tthis.delegate = delegate;\n\t\tthis.chunk = null;\n\t}\n\n\n\t@Override\n\tpublic boolean isAllocated() {\n\t\treturn this.refCount.get() > 0;\n\t}\n\n\t@Override\n\tpublic PooledDataBuffer retain() {\n\t\tint result = this.refCount.updateAndGet(c -> (c != 0 ? c + 1 : 0));\n\t\tif (result != 0 && this.chunk != null) {\n\t\t\tthis.chunk.retain();\n\t\t}\n\t\treturn this;\n\t}\n\n\t@Override\n\tpublic PooledDataBuffer touch(Object hint) {\n\t\treturn this;\n\t}\n\n\t@Override\n\tpublic boolean release() {\n\t\tint result = this.refCount.updateAndGet(c -> {\n\t\t\tif (c != 0) {\n\t\t\t\treturn c - 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new IllegalStateException(\"JettyDataBuffer already released: \" + this);\n\t\t\t}\n\t\t});\n\t\tif (this.chunk != null) {\n\t\t\treturn this.chunk.release();\n\t\t}\n\t\telse {\n\t\t\treturn (result == 0);\n\t\t}\n\t}\n\n\t@Override\n\tpublic DataBufferFactory factory() {\n\t\treturn this.bufferFactory;\n\t}\n\n\n\t// delegation\n\n\t@Override\n\tpublic int indexOf(IntPredicate predicate, int fromIndex) {\n\t\treturn this.delegate.indexOf(predicate, fromIndex);\n\t}\n\n\t@Override\n\tpublic int lastIndexOf(IntPredicate predicate, int fromIndex) {\n\t\treturn this.delegate.lastIndexOf(predicate, fromIndex);\n\t}\n\n\t@Override\n\tpublic int readableByteCount() {\n\t\treturn this.delegate.readableByteCount();\n\t}\n\n\t@Override\n\tpublic int writableByteCount() {\n\t\treturn this.delegate.writableByteCount();\n\t}\n\n\t@Override\n\tpublic int capacity() {\n\t\treturn this.delegate.capacity();\n\t}\n\n\t@Override\n\t@Deprecated\n\tpublic DataBuffer capacity(int capacity) {\n\t\tthis.delegate.capacity(capacity);\n\t\treturn this;\n\t}\n\n\t@Override\n\tpublic DataBuffer ensureWritable(int capacity) {\n\t\tthis.delegate.ensureWritable(capacity);\n\t\treturn this;\n\t}\n\n\t@Override\n\tpublic int readPosition() {\n\t\treturn this.delegate.readPosition();\n\t}\n\n\t@Override\n\tpublic DataBuffer readPosition(int readPosition) {\n\t\tthis.delegate.readPosition(readPosition);\n\t\treturn this;\n\t}\n\n\t@Override\n\tpublic int writePosition() {\n\t\treturn this.delegate.writePosition();\n\t}\n\n\t@Override\n\tpublic DataBuffer writePosition(int writePosition) {\n\t\tthis.delegate.writePosition(writePosition);\n\t\treturn this;\n\t}\n\n\t@Override\n\tpublic byte getByte(int index) {\n\t\treturn this.delegate.getByte(index);\n\t}\n\n\t@Override\n\tpublic byte read() {\n\t\treturn this.delegate.read();\n\t}\n\n\t@Override\n\tpublic DataBuffer read(byte[] destination) {\n\t\tthis.delegate.read(destination);\n\t\treturn this;\n\t}\n\n\t@Override\n\tpublic DataBuffer read(byte[] destination, int offset, int length) {\n\t\tthis.delegate.read(destination, offset, length);\n\t\treturn this;\n\t}\n\n\t@Override\n\tpublic DataBuffer write(byte b) {\n\t\tthis.delegate.write(b);\n\t\treturn this;\n\t}\n\n\t@Override\n\tpublic DataBuffer write(byte[] source) {\n\t\tthis.delegate.write(source);\n\t\treturn this;\n\t}\n\n\t@Override\n\tpublic DataBuffer write(byte[] source, int offset, int length) {\n\t\tthis.delegate.write(source, offset, length);\n\t\treturn this;\n\t}\n\n\t@Override\n\tpublic DataBuffer write(DataBuffer... buffers) {\n\t\tthis.delegate.write(buffers);\n\t\treturn this;\n\t}\n\n\t@Override\n\tpublic DataBuffer write(ByteBuffer... buffers) {\n\t\tthis.delegate.write(buffers);\n\t\treturn this;\n\t}\n\n\t@Override\n\t@Deprecated\n\tpublic DataBuffer slice(int index, int length) {\n\t\tDefaultDataBuffer delegateSlice = this.delegate.slice(index, length);\n\t\tif (this.chunk != null) {\n\t\t\tthis.chunk.retain();\n\t\t\treturn new JettyDataBuffer(this.bufferFactory, delegateSlice, this.chunk);\n\t\t}\n\t\telse {\n\t\t\treturn new JettyDataBuffer(this.bufferFactory, delegateSlice);\n\t\t}\n\t}\n\n\t@Override\n\tpublic DataBuffer split(int index) {\n\t\tDefaultDataBuffer delegateSplit = this.delegate.split(index);\n\t\tif (this.chunk != null) {\n\t\t\tthis.chunk.retain();\n\t\t\treturn new JettyDataBuffer(this.bufferFactory, delegateSplit, this.chunk);\n\t\t}\n\t\telse {\n\t\t\treturn new JettyDataBuffer(this.bufferFactory, delegateSplit);\n\t\t}\n\t}\n\n\t@Override\n\t@Deprecated\n\tpublic ByteBuffer asByteBuffer() {\n\t\treturn this.delegate.asByteBuffer();\n\t}\n\n\t@Override\n\t@Deprecated\n\tpublic ByteBuffer asByteBuffer(int index, int length) {\n\t\treturn this.delegate.asByteBuffer(index, length);\n\t}\n\n\t@Override\n\t@Deprecated\n\tpublic ByteBuffer toByteBuffer(int index, int length) {\n\t\treturn this.delegate.toByteBuffer(index, length);\n\t}\n\n\t@Override\n\tpublic void toByteBuffer(int srcPos, ByteBuffer dest, int destPos, int length) {\n\t\tthis.delegate.toByteBuffer(srcPos, dest, destPos, length);\n\t}\n\n\t@Override\n\tpublic ByteBufferIterator readableByteBuffers() {\n\t\tByteBufferIterator delegateIterator = this.delegate.readableByteBuffers();\n\t\tif (this.chunk != null) {\n\t\t\treturn new JettyByteBufferIterator(delegateIterator, this.chunk);\n\t\t}\n\t\telse {\n\t\t\treturn delegateIterator;\n\t\t}\n\t}\n\n\t@Override\n\tpublic ByteBufferIterator writableByteBuffers() {\n\t\tByteBufferIterator delegateIterator = this.delegate.writableByteBuffers();\n\t\tif (this.chunk != null) {\n\t\t\treturn new JettyByteBufferIterator(delegateIterator, this.chunk);\n\t\t}\n\t\telse {\n\t\t\treturn delegateIterator;\n\t\t}\n\t}\n\n\t@Override\n\tpublic String toString(int index, int length, Charset charset) {\n\t\treturn this.delegate.toString(index, length, charset);\n\t}\n\n\n\t@Override\n\tpublic boolean equals(Object other) {\n\t\treturn (this == other || (other instanceof JettyDataBuffer otherBuffer &&\n\t\t\t\tthis.delegate.equals(otherBuffer.delegate)));\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\treturn this.delegate.hashCode();\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn String.format(\"JettyDataBuffer (r: %d, w: %d, c: %d)\",\n\t\t\t\treadPosition(), writePosition(), capacity());\n\t}\n\n\n\tprivate static final class JettyByteBufferIterator implements ByteBufferIterator {\n\n\t\tprivate final ByteBufferIterator delegate;\n\n\t\tprivate final Content.Chunk chunk;\n\n\t\tpublic JettyByteBufferIterator(ByteBufferIterator delegate, Content.Chunk chunk) {\n\t\t\tAssert.notNull(delegate, \"Delegate must not be null\");\n\t\t\tAssert.notNull(chunk, \"Chunk must not be null\");\n\n\t\t\tthis.delegate = delegate;\n\t\t\tthis.chunk = chunk;\n\t\t\tthis.chunk.retain();\n\t\t}\n\n\t\t@Override\n\t\tpublic void close() {\n\t\t\tthis.delegate.close();\n\t\t\tthis.chunk.release();\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean hasNext() {\n\t\t\treturn this.delegate.hasNext();\n\t\t}\n\n\t\t@Override\n\t\tpublic ByteBuffer next() {\n\t\t\treturn this.delegate.next();\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBuffer",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.buffer.JettyDataBuffer#delegate",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBuffer#delegate",
    "headType": "field",
    "relation": "haveType",
    "tail": "DefaultDataBuffer",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBuffer",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.buffer.JettyDataBuffer#chunk",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBuffer#chunk",
    "headType": "field",
    "relation": "haveType",
    "tail": "Content.@Nullable Chunk",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBuffer",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.buffer.JettyDataBuffer#bufferFactory",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBuffer#bufferFactory",
    "headType": "field",
    "relation": "haveType",
    "tail": "JettyDataBufferFactory",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBuffer",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.buffer.JettyDataBuffer#refCount",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBuffer#refCount",
    "headType": "field",
    "relation": "haveType",
    "tail": "AtomicInteger",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBuffer#isAllocated()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean isAllocated() {\r\n    return this.refCount.get() > 0;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.JettyDataBuffer#isAllocated()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBuffer#isAllocated()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBuffer#retain()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic PooledDataBuffer retain() {\r\n    int result = this.refCount.updateAndGet(c -> (c != 0 ? c + 1 : 0));\r\n    if (result != 0 && this.chunk != null) {\r\n        this.chunk.retain();\r\n    }\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.JettyDataBuffer#retain()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBuffer#retain()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBuffer#touch(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic PooledDataBuffer touch(Object hint) {\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.JettyDataBuffer#touch(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBuffer#touch(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  }
]