[
  {
    "head": "org.springframework.core.type.AnnotationMetadata#getDeclaredMethods()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Retrieve the method metadata for all user-declared methods on the\r\n * underlying class, preserving declaration order as far as possible.\r\n * @return a set of {@link MethodMetadata}\r\n * @since 6.0\r\n */\r\nSet<MethodMetadata> getDeclaredMethods();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadata",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AnnotationMetadata#getDeclaredMethods()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadata#introspect(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Factory method to create a new {@link AnnotationMetadata} instance\r\n * for the given class using standard reflection.\r\n * @param type the class to introspect\r\n * @return a new {@link AnnotationMetadata} instance\r\n * @since 5.2\r\n */\r\nstatic AnnotationMetadata introspect(Class<?> type) {\r\n    return StandardAnnotationMetadata.from(type);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadata",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AnnotationMetadata#introspect(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadata",
    "headType": "class",
    "relation": "extend",
    "tail": "ClassMetadata",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadata",
    "headType": "class",
    "relation": "extend",
    "tail": "AnnotatedTypeMetadata",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.type",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.type",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.type.ClassMetadata",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.type.ClassMetadata",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.type;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * Interface that defines abstract metadata of a specific class,\n * in a form that does not require that class to be loaded yet.\n *\n * @author Juergen Hoeller\n * @since 2.5\n * @see StandardClassMetadata\n * @see org.springframework.core.type.classreading.MetadataReader#getClassMetadata()\n * @see AnnotationMetadata\n */\npublic interface ClassMetadata {\n\n\t/**\n\t * Return the name of the underlying class.\n\t */\n\tString getClassName();\n\n\t/**\n\t * Return whether the underlying class represents an interface.\n\t */\n\tboolean isInterface();\n\n\t/**\n\t * Return whether the underlying class represents an annotation.\n\t * @since 4.1\n\t */\n\tboolean isAnnotation();\n\n\t/**\n\t * Return whether the underlying class is marked as abstract.\n\t */\n\tboolean isAbstract();\n\n\t/**\n\t * Return whether the underlying class represents a concrete class,\n\t * i.e. neither an interface nor an abstract class.\n\t */\n\tdefault boolean isConcrete() {\n\t\treturn !(isInterface() || isAbstract());\n\t}\n\n\t/**\n\t * Return whether the underlying class is marked as 'final'.\n\t */\n\tboolean isFinal();\n\n\t/**\n\t * Determine whether the underlying class is independent, i.e. whether\n\t * it is a top-level class or a nested class (static inner class) that\n\t * can be constructed independently of an enclosing class.\n\t */\n\tboolean isIndependent();\n\n\t/**\n\t * Return whether the underlying class is declared within an enclosing\n\t * class (i.e. the underlying class is an inner/nested class or a\n\t * local class within a method).\n\t * <p>If this method returns {@code false}, then the underlying\n\t * class is a top-level class.\n\t */\n\tdefault boolean hasEnclosingClass() {\n\t\treturn (getEnclosingClassName() != null);\n\t}\n\n\t/**\n\t * Return the name of the enclosing class of the underlying class,\n\t * or {@code null} if the underlying class is a top-level class.\n\t */\n\t@Nullable String getEnclosingClassName();\n\n\t/**\n\t * Return whether the underlying class has a superclass.\n\t */\n\tdefault boolean hasSuperClass() {\n\t\treturn (getSuperClassName() != null);\n\t}\n\n\t/**\n\t * Return the name of the superclass of the underlying class,\n\t * or {@code null} if there is no superclass defined.\n\t */\n\t@Nullable String getSuperClassName();\n\n\t/**\n\t * Return the names of all interfaces that the underlying class\n\t * implements, or an empty array if there are none.\n\t */\n\tString[] getInterfaceNames();\n\n\t/**\n\t * Return the names of all classes declared as members of the class represented by\n\t * this ClassMetadata object. This includes public, protected, default (package)\n\t * access, and private classes and interfaces declared by the class, but excludes\n\t * inherited classes and interfaces. An empty array is returned if no member classes\n\t * or interfaces exist.\n\t * @since 3.1\n\t */\n\tString[] getMemberClassNames();\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.type.ClassMetadata#getClassName()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the name of the underlying class.\r\n */\r\nString getClassName();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.ClassMetadata",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.ClassMetadata#getClassName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.ClassMetadata#isInterface()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return whether the underlying class represents an interface.\r\n */\r\nboolean isInterface();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.ClassMetadata",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.ClassMetadata#isInterface()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.ClassMetadata#isAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return whether the underlying class represents an annotation.\r\n * @since 4.1\r\n */\r\nboolean isAnnotation();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.ClassMetadata",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.ClassMetadata#isAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.ClassMetadata#isAbstract()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return whether the underlying class is marked as abstract.\r\n */\r\nboolean isAbstract();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.ClassMetadata",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.ClassMetadata#isAbstract()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.ClassMetadata#isConcrete()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return whether the underlying class represents a concrete class,\r\n * i.e. neither an interface nor an abstract class.\r\n */\r\ndefault boolean isConcrete() {\r\n    return !(isInterface() || isAbstract());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.ClassMetadata",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.ClassMetadata#isConcrete()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.ClassMetadata#isFinal()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return whether the underlying class is marked as 'final'.\r\n */\r\nboolean isFinal();",
    "tailType": "method_code"
  }
]