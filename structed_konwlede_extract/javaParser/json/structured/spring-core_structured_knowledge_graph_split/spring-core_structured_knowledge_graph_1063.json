[
  {
    "head": "org.springframework.core.io.support.PatternVirtualFileVisitor#getResources()",
    "headType": "method",
    "relation": "provide",
    "tail": "public Set<Resource> getResources() {\r\n    return this.resources;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.PatternVirtualFileVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.PatternVirtualFileVisitor#getResources()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.PatternVirtualFileVisitor#size()",
    "headType": "method",
    "relation": "provide",
    "tail": "public int size() {\r\n    return this.resources.size();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.PatternVirtualFileVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.PatternVirtualFileVisitor#size()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.PatternVirtualFileVisitor#toString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String toString() {\r\n    return \"sub-pattern: \" + this.subPattern + \", resources: \" + this.resources;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.PatternVirtualFileVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.PatternVirtualFileVisitor#toString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.PatternVirtualFileVisitor#toString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.io.support",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.io.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.support.PropertiesLoaderSupport",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.support.PropertiesLoaderSupport",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io.support;\n\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.net.SocketException;\nimport java.net.UnknownHostException;\nimport java.util.Properties;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.io.Resource;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.util.DefaultPropertiesPersister;\nimport org.springframework.util.PropertiesPersister;\n\n/**\n * Base class for JavaBean-style components that need to load properties\n * from one or more resources. Supports local properties as well, with\n * configurable overriding.\n *\n * @author Juergen Hoeller\n * @since 1.2.2\n */\npublic abstract class PropertiesLoaderSupport {\n\n\t/** Logger available to subclasses. */\n\tprotected final Log logger = LogFactory.getLog(getClass());\n\n\tprotected Properties @Nullable [] localProperties;\n\n\tprotected boolean localOverride = false;\n\n\tprivate Resource @Nullable [] locations;\n\n\tprivate boolean ignoreResourceNotFound = false;\n\n\tprivate @Nullable String fileEncoding;\n\n\tprivate PropertiesPersister propertiesPersister = DefaultPropertiesPersister.INSTANCE;\n\n\n\t/**\n\t * Set local properties, for example, via the \"props\" tag in XML bean definitions.\n\t * These can be considered defaults, to be overridden by properties\n\t * loaded from files.\n\t */\n\tpublic void setProperties(Properties properties) {\n\t\tthis.localProperties = new Properties[] {properties};\n\t}\n\n\t/**\n\t * Set local properties, for example, via the \"props\" tag in XML bean definitions,\n\t * allowing for merging multiple properties sets into one.\n\t */\n\tpublic void setPropertiesArray(Properties... propertiesArray) {\n\t\tthis.localProperties = propertiesArray;\n\t}\n\n\t/**\n\t * Set a location of a properties file to be loaded.\n\t * <p>Can point to a classic properties file or to an XML file\n\t * that follows Java's properties XML format.\n\t */\n\tpublic void setLocation(Resource location) {\n\t\tthis.locations = new Resource[] {location};\n\t}\n\n\t/**\n\t * Set locations of properties files to be loaded.\n\t * <p>Can point to classic properties files or to XML files\n\t * that follow Java's properties XML format.\n\t * <p>Note: Properties defined in later files will override\n\t * properties defined earlier files, in case of overlapping keys.\n\t * Hence, make sure that the most specific files are the last\n\t * ones in the given list of locations.\n\t */\n\tpublic void setLocations(Resource... locations) {\n\t\tthis.locations = locations;\n\t}\n\n\t/**\n\t * Set whether local properties override properties from files.\n\t * <p>Default is \"false\": Properties from files override local defaults.\n\t * Can be switched to \"true\" to let local properties override defaults\n\t * from files.\n\t */\n\tpublic void setLocalOverride(boolean localOverride) {\n\t\tthis.localOverride = localOverride;\n\t}\n\n\t/**\n\t * Set if failure to find the property resource should be ignored.\n\t * <p>\"true\" is appropriate if the properties file is completely optional.\n\t * Default is \"false\".\n\t */\n\tpublic void setIgnoreResourceNotFound(boolean ignoreResourceNotFound) {\n\t\tthis.ignoreResourceNotFound = ignoreResourceNotFound;\n\t}\n\n\t/**\n\t * Set the encoding to use for parsing properties files.\n\t * <p>Default is none, using the {@code java.util.Properties}\n\t * default encoding.\n\t * <p>Only applies to classic properties files, not to XML files.\n\t * @see org.springframework.util.PropertiesPersister#load\n\t */\n\tpublic void setFileEncoding(String encoding) {\n\t\tthis.fileEncoding = encoding;\n\t}\n\n\t/**\n\t * Set the PropertiesPersister to use for parsing properties files.\n\t * The default is {@code DefaultPropertiesPersister}.\n\t * @see DefaultPropertiesPersister#INSTANCE\n\t */\n\tpublic void setPropertiesPersister(@Nullable PropertiesPersister propertiesPersister) {\n\t\tthis.propertiesPersister =\n\t\t\t\t(propertiesPersister != null ? propertiesPersister : DefaultPropertiesPersister.INSTANCE);\n\t}\n\n\n\t/**\n\t * Return a merged Properties instance containing both the\n\t * loaded properties and properties set on this FactoryBean.\n\t */\n\tprotected Properties mergeProperties() throws IOException {\n\t\tProperties result = new Properties();\n\n\t\tif (this.localOverride) {\n\t\t\t// Load properties from file upfront, to let local properties override.\n\t\t\tloadProperties(result);\n\t\t}\n\n\t\tif (this.localProperties != null) {\n\t\t\tfor (Properties localProp : this.localProperties) {\n\t\t\t\tCollectionUtils.mergePropertiesIntoMap(localProp, result);\n\t\t\t}\n\t\t}\n\n\t\tif (!this.localOverride) {\n\t\t\t// Load properties from file afterwards, to let those properties override.\n\t\t\tloadProperties(result);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Load properties into the given instance.\n\t * @param props the Properties instance to load into\n\t * @throws IOException in case of I/O errors\n\t * @see #setLocations\n\t */\n\tprotected void loadProperties(Properties props) throws IOException {\n\t\tif (this.locations != null) {\n\t\t\tfor (Resource location : this.locations) {\n\t\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\t\tlogger.trace(\"Loading properties file from \" + location);\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\tPropertiesLoaderUtils.fillProperties(\n\t\t\t\t\t\t\tprops, new EncodedResource(location, this.fileEncoding), this.propertiesPersister);\n\t\t\t\t}\n\t\t\t\tcatch (FileNotFoundException | UnknownHostException | SocketException ex) {\n\t\t\t\t\tif (this.ignoreResourceNotFound) {\n\t\t\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\t\t\tlogger.debug(\"Properties resource not found: \" + ex.getMessage());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthrow ex;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.support.PropertiesLoaderSupport",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.support.PropertiesLoaderSupport#logger",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.support.PropertiesLoaderSupport#logger",
    "headType": "field",
    "relation": "haveType",
    "tail": "Log",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.support.PropertiesLoaderSupport",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.support.PropertiesLoaderSupport#localProperties",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.support.PropertiesLoaderSupport#localProperties",
    "headType": "field",
    "relation": "haveType",
    "tail": "Properties",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.support.PropertiesLoaderSupport",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.support.PropertiesLoaderSupport#localOverride",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.support.PropertiesLoaderSupport#localOverride",
    "headType": "field",
    "relation": "haveType",
    "tail": "boolean",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.support.PropertiesLoaderSupport",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.support.PropertiesLoaderSupport#locations",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.support.PropertiesLoaderSupport#locations",
    "headType": "field",
    "relation": "haveType",
    "tail": "Resource",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.support.PropertiesLoaderSupport",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.support.PropertiesLoaderSupport#ignoreResourceNotFound",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.support.PropertiesLoaderSupport#ignoreResourceNotFound",
    "headType": "field",
    "relation": "haveType",
    "tail": "boolean",
    "tailType": "type"
  }
]