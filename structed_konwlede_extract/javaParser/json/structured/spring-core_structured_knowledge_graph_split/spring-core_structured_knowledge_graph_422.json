[
  {
    "head": "org.springframework.asm.Handle",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Handle#hashCode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Handle#hashCode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.Handle#toString()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the textual representation of this handle. The textual representation is:\r\n *\r\n * <ul>\r\n *   <li>for a reference to a class: owner \".\" name descriptor \" (\" tag \")\",\r\n *   <li>for a reference to an interface: owner \".\" name descriptor \" (\" tag \" itf)\".\r\n * </ul>\r\n */\r\n@Override\r\npublic String toString() {\r\n    return owner + '.' + name + descriptor + \" (\" + tag + (isInterface ? \" itf\" : \"\") + ')';\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Handle",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Handle#toString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Handle#toString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.StaxStreamXMLReaderTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util.xml;\n\nimport java.io.InputStream;\nimport java.io.StringReader;\n\nimport javax.xml.namespace.QName;\nimport javax.xml.stream.XMLInputFactory;\nimport javax.xml.stream.XMLStreamException;\nimport javax.xml.stream.XMLStreamReader;\n\nimport org.junit.jupiter.api.Test;\nimport org.xml.sax.Attributes;\nimport org.xml.sax.ContentHandler;\nimport org.xml.sax.InputSource;\nimport org.xml.sax.Locator;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.ArgumentMatchers.eq;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.verify;\n\nclass StaxStreamXMLReaderTests extends AbstractStaxXMLReaderTests {\n\n\tpublic static final String CONTENT = \"<root xmlns='http://springframework.org/spring-ws'><child/></root>\";\n\n\t@Override\n\tprotected AbstractStaxXMLReader createStaxXmlReader(InputStream inputStream) throws XMLStreamException {\n\t\treturn new StaxStreamXMLReader(inputFactory.createXMLStreamReader(inputStream));\n\t}\n\n\t@Test\n\tvoid partial() throws Exception {\n\t\tXMLInputFactory inputFactory = XMLInputFactory.newInstance();\n\t\tXMLStreamReader streamReader = inputFactory.createXMLStreamReader(new StringReader(CONTENT));\n\t\tstreamReader.nextTag();  // skip to root\n\t\tassertThat(streamReader.getName()).as(\"Invalid element\").isEqualTo(new QName(\"http://springframework.org/spring-ws\", \"root\"));\n\t\tstreamReader.nextTag();  // skip to child\n\t\tassertThat(streamReader.getName()).as(\"Invalid element\").isEqualTo(new QName(\"http://springframework.org/spring-ws\", \"child\"));\n\t\tStaxStreamXMLReader xmlReader = new StaxStreamXMLReader(streamReader);\n\n\t\tContentHandler contentHandler = mock();\n\t\txmlReader.setContentHandler(contentHandler);\n\t\txmlReader.parse(new InputSource());\n\n\t\tverify(contentHandler).setDocumentLocator(any(Locator.class));\n\t\tverify(contentHandler).startDocument();\n\t\tverify(contentHandler).startElement(eq(\"http://springframework.org/spring-ws\"), eq(\"child\"), eq(\"child\"), any(Attributes.class));\n\t\tverify(contentHandler).endElement(\"http://springframework.org/spring-ws\", \"child\", \"child\");\n\t\tverify(contentHandler).endDocument();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.xml.StaxStreamXMLReaderTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.xml.StaxStreamXMLReaderTests#CONTENT",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.xml.StaxStreamXMLReaderTests#CONTENT",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.xml.StaxStreamXMLReaderTests#createStaxXmlReader(InputStream)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected AbstractStaxXMLReader createStaxXmlReader(InputStream inputStream) throws XMLStreamException {\r\n    return new StaxStreamXMLReader(inputFactory.createXMLStreamReader(inputStream));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.StaxStreamXMLReaderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxStreamXMLReaderTests#createStaxXmlReader(InputStream)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.StaxStreamXMLReaderTests#createStaxXmlReader(InputStream)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.StaxStreamXMLReaderTests#partial()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid partial() throws Exception {\r\n    XMLInputFactory inputFactory = XMLInputFactory.newInstance();\r\n    XMLStreamReader streamReader = inputFactory.createXMLStreamReader(new StringReader(CONTENT));\r\n    // skip to root\r\n    streamReader.nextTag();\r\n    assertThat(streamReader.getName()).as(\"Invalid element\").isEqualTo(new QName(\"http://springframework.org/spring-ws\", \"root\"));\r\n    // skip to child\r\n    streamReader.nextTag();\r\n    assertThat(streamReader.getName()).as(\"Invalid element\").isEqualTo(new QName(\"http://springframework.org/spring-ws\", \"child\"));\r\n    StaxStreamXMLReader xmlReader = new StaxStreamXMLReader(streamReader);\r\n    ContentHandler contentHandler = mock();\r\n    xmlReader.setContentHandler(contentHandler);\r\n    xmlReader.parse(new InputSource());\r\n    verify(contentHandler).setDocumentLocator(any(Locator.class));\r\n    verify(contentHandler).startDocument();\r\n    verify(contentHandler).startElement(eq(\"http://springframework.org/spring-ws\"), eq(\"child\"), eq(\"child\"), any(Attributes.class));\r\n    verify(contentHandler).endElement(\"http://springframework.org/spring-ws\", \"child\", \"child\");\r\n    verify(contentHandler).endDocument();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.StaxStreamXMLReaderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxStreamXMLReaderTests#partial()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.StaxStreamXMLReaderTests#partial()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.StaxStreamXMLReaderTests",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractStaxXMLReaderTests",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util.xml",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util.xml",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.xml.StaxUtilsTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.xml.StaxUtilsTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util.xml;\n\nimport java.io.StringReader;\nimport java.io.StringWriter;\n\nimport javax.xml.stream.XMLInputFactory;\nimport javax.xml.stream.XMLOutputFactory;\nimport javax.xml.stream.XMLStreamReader;\nimport javax.xml.stream.XMLStreamWriter;\nimport javax.xml.transform.Result;\nimport javax.xml.transform.Source;\nimport javax.xml.transform.dom.DOMResult;\nimport javax.xml.transform.dom.DOMSource;\nimport javax.xml.transform.sax.SAXResult;\nimport javax.xml.transform.sax.SAXSource;\nimport javax.xml.transform.stax.StAXResult;\nimport javax.xml.transform.stax.StAXSource;\nimport javax.xml.transform.stream.StreamResult;\nimport javax.xml.transform.stream.StreamSource;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * @author Arjen Poutsma\n */\nclass StaxUtilsTests {\n\n\t@Test\n\tvoid isStaxSourceInvalid() {\n\t\tassertThat(StaxUtils.isStaxSource(new DOMSource())).as(\"A StAX Source\").isFalse();\n\t\tassertThat(StaxUtils.isStaxSource(new SAXSource())).as(\"A StAX Source\").isFalse();\n\t\tassertThat(StaxUtils.isStaxSource(new StreamSource())).as(\"A StAX Source\").isFalse();\n\t}\n\n\t@Test\n\tvoid isStaxSource() throws Exception {\n\t\tXMLInputFactory inputFactory = XMLInputFactory.newInstance();\n\t\tString expected = \"<element/>\";\n\t\tXMLStreamReader streamReader = inputFactory.createXMLStreamReader(new StringReader(expected));\n\t\tSource source = StaxUtils.createCustomStaxSource(streamReader);\n\n\t\tassertThat(StaxUtils.isStaxSource(source)).as(\"Not a StAX Source\").isTrue();\n\t}\n\n\t@Test\n\tvoid isStaxSourceJaxp14() throws Exception {\n\t\tXMLInputFactory inputFactory = XMLInputFactory.newInstance();\n\t\tString expected = \"<element/>\";\n\t\tXMLStreamReader streamReader = inputFactory.createXMLStreamReader(new StringReader(expected));\n\t\tStAXSource source = new StAXSource(streamReader);\n\n\t\tassertThat(StaxUtils.isStaxSource(source)).as(\"Not a StAX Source\").isTrue();\n\t}\n\n\t@Test\n\tvoid isStaxResultInvalid() {\n\t\tassertThat(StaxUtils.isStaxResult(new DOMResult())).as(\"A StAX Result\").isFalse();\n\t\tassertThat(StaxUtils.isStaxResult(new SAXResult())).as(\"A StAX Result\").isFalse();\n\t\tassertThat(StaxUtils.isStaxResult(new StreamResult())).as(\"A StAX Result\").isFalse();\n\t}\n\n\t@Test\n\tvoid isStaxResult() throws Exception {\n\t\tXMLOutputFactory outputFactory = XMLOutputFactory.newInstance();\n\t\tXMLStreamWriter streamWriter = outputFactory.createXMLStreamWriter(new StringWriter());\n\t\tResult result = StaxUtils.createCustomStaxResult(streamWriter);\n\n\t\tassertThat(StaxUtils.isStaxResult(result)).as(\"Not a StAX Result\").isTrue();\n\t}\n\n\t@Test\n\tvoid isStaxResultJaxp14() throws Exception {\n\t\tXMLOutputFactory outputFactory = XMLOutputFactory.newInstance();\n\t\tXMLStreamWriter streamWriter = outputFactory.createXMLStreamWriter(new StringWriter());\n\t\tStAXResult result = new StAXResult(streamWriter);\n\n\t\tassertThat(StaxUtils.isStaxResult(result)).as(\"Not a StAX Result\").isTrue();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.xml.StaxUtilsTests#isStaxSourceInvalid()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isStaxSourceInvalid() {\r\n    assertThat(StaxUtils.isStaxSource(new DOMSource())).as(\"A StAX Source\").isFalse();\r\n    assertThat(StaxUtils.isStaxSource(new SAXSource())).as(\"A StAX Source\").isFalse();\r\n    assertThat(StaxUtils.isStaxSource(new StreamSource())).as(\"A StAX Source\").isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.StaxUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxUtilsTests#isStaxSourceInvalid()",
    "tailType": "method"
  }
]