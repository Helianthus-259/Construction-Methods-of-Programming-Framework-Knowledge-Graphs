[
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.io",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.io",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.FileSystemResourceLoader",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.FileSystemResourceLoader",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io;\n\n/**\n * {@link ResourceLoader} implementation that resolves plain paths as\n * file system resources rather than as class path resources\n * (the latter is {@link DefaultResourceLoader}'s default strategy).\n *\n * <p><b>NOTE:</b> Plain paths will always be interpreted as relative\n * to the current VM working directory, even if they start with a slash.\n * (This is consistent with the semantics in a Servlet container.)\n * <b>Use an explicit \"file:\" prefix to enforce an absolute file path.</b>\n *\n * <p>{@link org.springframework.context.support.FileSystemXmlApplicationContext}\n * is a full-fledged ApplicationContext implementation that provides\n * the same resource path resolution strategy.\n *\n * @author Juergen Hoeller\n * @since 1.1.3\n * @see DefaultResourceLoader\n * @see org.springframework.context.support.FileSystemXmlApplicationContext\n */\npublic class FileSystemResourceLoader extends DefaultResourceLoader {\n\n\t/**\n\t * Resolve resource paths as file system paths.\n\t * <p>Note: Even if a given path starts with a slash, it will get\n\t * interpreted as relative to the current VM working directory.\n\t * @param path the path to the resource\n\t * @return the corresponding Resource handle\n\t * @see FileSystemResource\n\t * @see org.springframework.web.context.support.ServletContextResourceLoader#getResourceByPath\n\t */\n\t@Override\n\tprotected Resource getResourceByPath(String path) {\n\t\tif (path.startsWith(\"/\")) {\n\t\t\tpath = path.substring(1);\n\t\t}\n\t\treturn new FileSystemContextResource(path);\n\t}\n\n\n\t/**\n\t * FileSystemResource that explicitly expresses a context-relative path\n\t * through implementing the ContextResource interface.\n\t */\n\tprivate static class FileSystemContextResource extends FileSystemResource implements ContextResource {\n\n\t\tpublic FileSystemContextResource(String path) {\n\t\t\tsuper(path);\n\t\t}\n\n\t\t@Override\n\t\tpublic String getPathWithinContext() {\n\t\t\treturn getPath();\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.FileSystemResourceLoader#getResourceByPath(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Resolve resource paths as file system paths.\r\n * <p>Note: Even if a given path starts with a slash, it will get\r\n * interpreted as relative to the current VM working directory.\r\n * @param path the path to the resource\r\n * @return the corresponding Resource handle\r\n * @see FileSystemResource\r\n * @see org.springframework.web.context.support.ServletContextResourceLoader#getResourceByPath\r\n */\r\n@Override\r\nprotected Resource getResourceByPath(String path) {\r\n    if (path.startsWith(\"/\")) {\r\n        path = path.substring(1);\r\n    }\r\n    return new FileSystemContextResource(path);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.FileSystemResourceLoader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.FileSystemResourceLoader#getResourceByPath(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.FileSystemResourceLoader#getResourceByPath(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.FileSystemResourceLoader",
    "headType": "class",
    "relation": "extend",
    "tail": "DefaultResourceLoader",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.FileSystemContextResource",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.FileSystemContextResource",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io;\n\n/**\n * {@link ResourceLoader} implementation that resolves plain paths as\n * file system resources rather than as class path resources\n * (the latter is {@link DefaultResourceLoader}'s default strategy).\n *\n * <p><b>NOTE:</b> Plain paths will always be interpreted as relative\n * to the current VM working directory, even if they start with a slash.\n * (This is consistent with the semantics in a Servlet container.)\n * <b>Use an explicit \"file:\" prefix to enforce an absolute file path.</b>\n *\n * <p>{@link org.springframework.context.support.FileSystemXmlApplicationContext}\n * is a full-fledged ApplicationContext implementation that provides\n * the same resource path resolution strategy.\n *\n * @author Juergen Hoeller\n * @since 1.1.3\n * @see DefaultResourceLoader\n * @see org.springframework.context.support.FileSystemXmlApplicationContext\n */\npublic class FileSystemResourceLoader extends DefaultResourceLoader {\n\n\t/**\n\t * Resolve resource paths as file system paths.\n\t * <p>Note: Even if a given path starts with a slash, it will get\n\t * interpreted as relative to the current VM working directory.\n\t * @param path the path to the resource\n\t * @return the corresponding Resource handle\n\t * @see FileSystemResource\n\t * @see org.springframework.web.context.support.ServletContextResourceLoader#getResourceByPath\n\t */\n\t@Override\n\tprotected Resource getResourceByPath(String path) {\n\t\tif (path.startsWith(\"/\")) {\n\t\t\tpath = path.substring(1);\n\t\t}\n\t\treturn new FileSystemContextResource(path);\n\t}\n\n\n\t/**\n\t * FileSystemResource that explicitly expresses a context-relative path\n\t * through implementing the ContextResource interface.\n\t */\n\tprivate static class FileSystemContextResource extends FileSystemResource implements ContextResource {\n\n\t\tpublic FileSystemContextResource(String path) {\n\t\t\tsuper(path);\n\t\t}\n\n\t\t@Override\n\t\tpublic String getPathWithinContext() {\n\t\t\treturn getPath();\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.FileSystemContextResource#getPathWithinContext()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String getPathWithinContext() {\r\n    return getPath();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.FileSystemContextResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.FileSystemContextResource#getPathWithinContext()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.FileSystemContextResource#getPathWithinContext()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.FileSystemContextResource",
    "headType": "class",
    "relation": "extend",
    "tail": "FileSystemResource",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.io",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.io",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.FileUrlResource",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.FileUrlResource",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2020 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.nio.channels.FileChannel;\nimport java.nio.channels.WritableByteChannel;\nimport java.nio.file.Files;\nimport java.nio.file.StandardOpenOption;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.util.ResourceUtils;\n\n/**\n * Subclass of {@link UrlResource} which assumes file resolution, to the degree\n * of implementing the {@link WritableResource} interface for it. This resource\n * variant also caches resolved {@link File} handles from {@link #getFile()}.\n *\n * <p>This is the class resolved by {@link DefaultResourceLoader} for a \"file:...\"\n * URL location, allowing a downcast to {@link WritableResource} for it.\n *\n * <p>Alternatively, for direct construction from a {@link java.io.File} handle\n * or NIO {@link java.nio.file.Path}, consider using {@link FileSystemResource}.\n *\n * @author Juergen Hoeller\n * @since 5.0.2\n */\npublic class FileUrlResource extends UrlResource implements WritableResource {\n\n\tprivate volatile @Nullable File file;\n\n\n\t/**\n\t * Create a new {@code FileUrlResource} based on the given URL object.\n\t * <p>Note that this does not enforce \"file\" as URL protocol. If a protocol\n\t * is known to be resolvable to a file, it is acceptable for this purpose.\n\t * @param url a URL\n\t * @see ResourceUtils#isFileURL(URL)\n\t * @see #getFile()\n\t */\n\tpublic FileUrlResource(URL url) {\n\t\tsuper(url);\n\t}\n\n\t/**\n\t * Create a new {@code FileUrlResource} based on the given file location,\n\t * using the URL protocol \"file\".\n\t * <p>The given parts will automatically get encoded if necessary.\n\t * @param location the location (i.e. the file path within that protocol)\n\t * @throws MalformedURLException if the given URL specification is not valid\n\t * @see UrlResource#UrlResource(String, String)\n\t * @see ResourceUtils#URL_PROTOCOL_FILE\n\t */\n\tpublic FileUrlResource(String location) throws MalformedURLException {\n\t\tsuper(ResourceUtils.URL_PROTOCOL_FILE, location);\n\t}\n\n\n\t@Override\n\tpublic File getFile() throws IOException {\n\t\tFile file = this.file;\n\t\tif (file != null) {\n\t\t\treturn file;\n\t\t}\n\t\tfile = super.getFile();\n\t\tthis.file = file;\n\t\treturn file;\n\t}\n\n\t@Override\n\tpublic boolean isWritable() {\n\t\ttry {\n\t\t\tFile file = getFile();\n\t\t\treturn (file.canWrite() && !file.isDirectory());\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t@Override\n\tpublic OutputStream getOutputStream() throws IOException {\n\t\treturn Files.newOutputStream(getFile().toPath());\n\t}\n\n\t@Override\n\tpublic WritableByteChannel writableChannel() throws IOException {\n\t\treturn FileChannel.open(getFile().toPath(), StandardOpenOption.WRITE);\n\t}\n\n\t@Override\n\tpublic Resource createRelative(String relativePath) throws MalformedURLException {\n\t\treturn new FileUrlResource(createRelativeURL(relativePath));\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.FileUrlResource",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.FileUrlResource#file",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.FileUrlResource#file",
    "headType": "field",
    "relation": "haveType",
    "tail": "File",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.FileUrlResource#getFile()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic File getFile() throws IOException {\r\n    File file = this.file;\r\n    if (file != null) {\r\n        return file;\r\n    }\r\n    file = super.getFile();\r\n    this.file = file;\r\n    return file;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.FileUrlResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.FileUrlResource#getFile()",
    "tailType": "method"
  }
]