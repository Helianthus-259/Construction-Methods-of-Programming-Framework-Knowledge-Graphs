[
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferTests#asByteBuffer(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#asByteBuffer(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#asByteBuffer(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#asByteBufferIndexLength(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid asByteBufferIndexLength(DataBufferFactory bufferFactory) {\r\n    super.bufferFactory = bufferFactory;\r\n    DataBuffer buffer = createDataBuffer(3);\r\n    buffer.write(new byte[] { 'a', 'b' });\r\n    @SuppressWarnings(\"deprecation\")\r\n    ByteBuffer result = buffer.asByteBuffer(1, 2);\r\n    assertThat(result.capacity()).isEqualTo(2);\r\n    assumeFalse(bufferFactory instanceof Netty5DataBufferFactory, () -> {\r\n        DataBufferUtils.release(buffer);\r\n        return \"Netty 5 does share the internal buffer\";\r\n    });\r\n    buffer.write((byte) 'c');\r\n    assertThat(result.remaining()).isEqualTo(2);\r\n    byte[] resultBytes = new byte[2];\r\n    result.get(resultBytes);\r\n    assertThat(resultBytes).isEqualTo(new byte[] { 'b', 'c' });\r\n    release(buffer);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferTests#asByteBufferIndexLength(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#asByteBufferIndexLength(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#byteBufferContainsDataBufferChanges(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\n@SuppressWarnings(\"deprecation\")\r\nvoid byteBufferContainsDataBufferChanges(DataBufferFactory bufferFactory) {\r\n    assumeFalse(bufferFactory instanceof Netty5DataBufferFactory, \"Netty 5 does not support sharing data between buffers\");\r\n    super.bufferFactory = bufferFactory;\r\n    DataBuffer dataBuffer = createDataBuffer(1);\r\n    ByteBuffer byteBuffer = dataBuffer.asByteBuffer(0, 1);\r\n    dataBuffer.write((byte) 'a');\r\n    assertThat(byteBuffer.limit()).isEqualTo(1);\r\n    byte b = byteBuffer.get();\r\n    assertThat(b).isEqualTo((byte) 'a');\r\n    release(dataBuffer);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferTests#byteBufferContainsDataBufferChanges(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#byteBufferContainsDataBufferChanges(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#byteBufferContainsDataBufferChanges(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#dataBufferContainsByteBufferChanges(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\n@SuppressWarnings(\"deprecation\")\r\nvoid dataBufferContainsByteBufferChanges(DataBufferFactory bufferFactory) {\r\n    assumeFalse(bufferFactory instanceof Netty5DataBufferFactory, \"Netty 5 does not support sharing data between buffers\");\r\n    super.bufferFactory = bufferFactory;\r\n    DataBuffer dataBuffer = createDataBuffer(1);\r\n    ByteBuffer byteBuffer = dataBuffer.asByteBuffer(0, 1);\r\n    byteBuffer.put((byte) 'a');\r\n    dataBuffer.writePosition(1);\r\n    byte b = dataBuffer.read();\r\n    assertThat(b).isEqualTo((byte) 'a');\r\n    release(dataBuffer);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferTests#dataBufferContainsByteBufferChanges(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#dataBufferContainsByteBufferChanges(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#dataBufferContainsByteBufferChanges(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#emptyAsByteBuffer(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\n@SuppressWarnings(\"deprecation\")\r\nvoid emptyAsByteBuffer(DataBufferFactory bufferFactory) {\r\n    super.bufferFactory = bufferFactory;\r\n    DataBuffer buffer = createDataBuffer(1);\r\n    ByteBuffer result = buffer.asByteBuffer();\r\n    assertThat(result.capacity()).isEqualTo(0);\r\n    release(buffer);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferTests#emptyAsByteBuffer(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#emptyAsByteBuffer(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#emptyAsByteBuffer(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#toByteBuffer(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid toByteBuffer(DataBufferFactory bufferFactory) {\r\n    super.bufferFactory = bufferFactory;\r\n    DataBuffer buffer = createDataBuffer(4);\r\n    buffer.write(new byte[] { 'a', 'b', 'c' });\r\n    // skip a\r\n    buffer.read();\r\n    @SuppressWarnings(\"deprecation\")\r\n    ByteBuffer result = buffer.toByteBuffer();\r\n    assertThat(result.capacity()).isEqualTo(2);\r\n    assertThat(result.remaining()).isEqualTo(2);\r\n    byte[] resultBytes = new byte[2];\r\n    result.get(resultBytes);\r\n    assertThat(resultBytes).isEqualTo(new byte[] { 'b', 'c' });\r\n    release(buffer);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferTests#toByteBuffer(DataBufferFactory)",
    "tailType": "method"
  }
]