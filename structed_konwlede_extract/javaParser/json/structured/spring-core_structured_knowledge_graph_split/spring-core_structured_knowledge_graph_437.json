[
  {
    "head": "org.springframework.asm.MethodVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.MethodVisitor#visitAnnotableParameterCount(int,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.MethodVisitor#visitParameterAnnotation(int,String,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Visits an annotation of a parameter this method.\r\n *\r\n * @param parameter the parameter index. This index must be strictly smaller than the number of\r\n *     parameters in the method descriptor, and strictly smaller than the parameter count\r\n *     specified in {@link #visitAnnotableParameterCount}. Important note: <i>a parameter index i\r\n *     is not required to correspond to the i'th parameter descriptor in the method\r\n *     descriptor</i>, in particular in case of synthetic parameters (see\r\n *     https://docs.oracle.com/javase/specs/jvms/se9/html/jvms-4.html#jvms-4.7.18).\r\n * @param descriptor the class descriptor of the annotation class.\r\n * @param visible {@literal true} if the annotation is visible at runtime.\r\n * @return a visitor to visit the annotation values, or {@literal null} if this visitor is not\r\n *     interested in visiting this annotation.\r\n */\r\npublic AnnotationVisitor visitParameterAnnotation(final int parameter, final String descriptor, final boolean visible) {\r\n    if (mv != null) {\r\n        return mv.visitParameterAnnotation(parameter, descriptor, visible);\r\n    }\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.MethodVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.MethodVisitor#visitParameterAnnotation(int,String,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.MethodVisitor#visitAttribute(Attribute)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Visits a non standard attribute of this method.\r\n *\r\n * @param attribute an attribute.\r\n */\r\npublic void visitAttribute(final Attribute attribute) {\r\n    if (mv != null) {\r\n        mv.visitAttribute(attribute);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.MethodVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.MethodVisitor#visitAttribute(Attribute)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.MethodVisitor#visitCode()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Starts the visit of the method's code, if any (i.e. non abstract method).\r\n */\r\npublic void visitCode() {\r\n    if (mv != null) {\r\n        mv.visitCode();\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.MethodVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.MethodVisitor#visitCode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.MethodVisitor#visitFrame(int,int,Object[],int,Object[])",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Visits the current state of the local variables and operand stack elements. This method must(*)\r\n * be called <i>just before</i> any instruction <b>i</b> that follows an unconditional branch\r\n * instruction such as GOTO or THROW, that is the target of a jump instruction, or that starts an\r\n * exception handler block. The visited types must describe the values of the local variables and\r\n * of the operand stack elements <i>just before</i> <b>i</b> is executed.<br>\r\n * <br>\r\n * (*) this is mandatory only for classes whose version is greater than or equal to {@link\r\n * Opcodes#V1_6}. <br>\r\n * <br>\r\n * The frames of a method must be given either in expanded form, or in compressed form (all frames\r\n * must use the same format, i.e. you must not mix expanded and compressed frames within a single\r\n * method):\r\n *\r\n * <ul>\r\n *   <li>In expanded form, all frames must have the F_NEW type.\r\n *   <li>In compressed form, frames are basically \"deltas\" from the state of the previous frame:\r\n *       <ul>\r\n *         <li>{@link Opcodes#F_SAME} representing frame with exactly the same locals as the\r\n *             previous frame and with the empty stack.\r\n *         <li>{@link Opcodes#F_SAME1} representing frame with exactly the same locals as the\r\n *             previous frame and with single value on the stack ( <code>numStack</code> is 1 and\r\n *             <code>stack[0]</code> contains value for the type of the stack item).\r\n *         <li>{@link Opcodes#F_APPEND} representing frame with current locals are the same as the\r\n *             locals in the previous frame, except that additional locals are defined (<code>\r\n *             numLocal</code> is 1, 2 or 3 and <code>local</code> elements contains values\r\n *             representing added types).\r\n *         <li>{@link Opcodes#F_CHOP} representing frame with current locals are the same as the\r\n *             locals in the previous frame, except that the last 1-3 locals are absent and with\r\n *             the empty stack (<code>numLocal</code> is 1, 2 or 3).\r\n *         <li>{@link Opcodes#F_FULL} representing complete frame data.\r\n *       </ul>\r\n * </ul>\r\n *\r\n * <br>\r\n * In both cases the first frame, corresponding to the method's parameters and access flags, is\r\n * implicit and must not be visited. Also, it is illegal to visit two or more frames for the same\r\n * code location (i.e., at least one instruction must be visited between two calls to visitFrame).\r\n *\r\n * @param type the type of this stack map frame. Must be {@link Opcodes#F_NEW} for expanded\r\n *     frames, or {@link Opcodes#F_FULL}, {@link Opcodes#F_APPEND}, {@link Opcodes#F_CHOP}, {@link\r\n *     Opcodes#F_SAME} or {@link Opcodes#F_APPEND}, {@link Opcodes#F_SAME1} for compressed frames.\r\n * @param numLocal the number of local variables in the visited frame. Long and double values\r\n *     count for one variable.\r\n * @param local the local variable types in this frame. This array must not be modified. Primitive\r\n *     types are represented by {@link Opcodes#TOP}, {@link Opcodes#INTEGER}, {@link\r\n *     Opcodes#FLOAT}, {@link Opcodes#LONG}, {@link Opcodes#DOUBLE}, {@link Opcodes#NULL} or\r\n *     {@link Opcodes#UNINITIALIZED_THIS} (long and double are represented by a single element).\r\n *     Reference types are represented by String objects (representing internal names, see {@link\r\n *     Type#getInternalName()}), and uninitialized types by Label objects (this label designates\r\n *     the NEW instruction that created this uninitialized value).\r\n * @param numStack the number of operand stack elements in the visited frame. Long and double\r\n *     values count for one stack element.\r\n * @param stack the operand stack types in this frame. This array must not be modified. Its\r\n *     content has the same format as the \"local\" array.\r\n * @throws IllegalStateException if a frame is visited just after another one, without any\r\n *     instruction between the two (unless this frame is a Opcodes#F_SAME frame, in which case it\r\n *     is silently ignored).\r\n */\r\npublic void visitFrame(final int type, final int numLocal, final Object[] local, final int numStack, final Object[] stack) {\r\n    if (mv != null) {\r\n        mv.visitFrame(type, numLocal, local, numStack, stack);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.MethodVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.MethodVisitor#visitFrame(int,int,Object[],int,Object[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.MethodVisitor#visitInsn(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "// -----------------------------------------------------------------------------------------------\r\n// Normal instructions\r\n// -----------------------------------------------------------------------------------------------\r\n/**\r\n * Visits a zero operand instruction.\r\n *\r\n * @param opcode the opcode of the instruction to be visited. This opcode is either NOP,\r\n *     ACONST_NULL, ICONST_M1, ICONST_0, ICONST_1, ICONST_2, ICONST_3, ICONST_4, ICONST_5,\r\n *     LCONST_0, LCONST_1, FCONST_0, FCONST_1, FCONST_2, DCONST_0, DCONST_1, IALOAD, LALOAD,\r\n *     FALOAD, DALOAD, AALOAD, BALOAD, CALOAD, SALOAD, IASTORE, LASTORE, FASTORE, DASTORE,\r\n *     AASTORE, BASTORE, CASTORE, SASTORE, POP, POP2, DUP, DUP_X1, DUP_X2, DUP2, DUP2_X1, DUP2_X2,\r\n *     SWAP, IADD, LADD, FADD, DADD, ISUB, LSUB, FSUB, DSUB, IMUL, LMUL, FMUL, DMUL, IDIV, LDIV,\r\n *     FDIV, DDIV, IREM, LREM, FREM, DREM, INEG, LNEG, FNEG, DNEG, ISHL, LSHL, ISHR, LSHR, IUSHR,\r\n *     LUSHR, IAND, LAND, IOR, LOR, IXOR, LXOR, I2L, I2F, I2D, L2I, L2F, L2D, F2I, F2L, F2D, D2I,\r\n *     D2L, D2F, I2B, I2C, I2S, LCMP, FCMPL, FCMPG, DCMPL, DCMPG, IRETURN, LRETURN, FRETURN,\r\n *     DRETURN, ARETURN, RETURN, ARRAYLENGTH, ATHROW, MONITORENTER, or MONITOREXIT.\r\n */\r\npublic void visitInsn(final int opcode) {\r\n    if (mv != null) {\r\n        mv.visitInsn(opcode);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.MethodVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.MethodVisitor#visitInsn(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.MethodVisitor#visitIntInsn(int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Visits an instruction with a single int operand.\r\n *\r\n * @param opcode the opcode of the instruction to be visited. This opcode is either BIPUSH, SIPUSH\r\n *     or NEWARRAY.\r\n * @param operand the operand of the instruction to be visited.<br>\r\n *     When opcode is BIPUSH, operand value should be between Byte.MIN_VALUE and Byte.MAX_VALUE.\r\n *     <br>\r\n *     When opcode is SIPUSH, operand value should be between Short.MIN_VALUE and Short.MAX_VALUE.\r\n *     <br>\r\n *     When opcode is NEWARRAY, operand value should be one of {@link Opcodes#T_BOOLEAN}, {@link\r\n *     Opcodes#T_CHAR}, {@link Opcodes#T_FLOAT}, {@link Opcodes#T_DOUBLE}, {@link Opcodes#T_BYTE},\r\n *     {@link Opcodes#T_SHORT}, {@link Opcodes#T_INT} or {@link Opcodes#T_LONG}.\r\n */\r\npublic void visitIntInsn(final int opcode, final int operand) {\r\n    if (mv != null) {\r\n        mv.visitIntInsn(opcode, operand);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.MethodVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.MethodVisitor#visitIntInsn(int,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.MethodVisitor#visitVarInsn(int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Visits a local variable instruction. A local variable instruction is an instruction that loads\r\n * or stores the value of a local variable.\r\n *\r\n * @param opcode the opcode of the local variable instruction to be visited. This opcode is either\r\n *     ILOAD, LLOAD, FLOAD, DLOAD, ALOAD, ISTORE, LSTORE, FSTORE, DSTORE, ASTORE or RET.\r\n * @param varIndex the operand of the instruction to be visited. This operand is the index of a\r\n *     local variable.\r\n */\r\npublic void visitVarInsn(final int opcode, final int varIndex) {\r\n    if (mv != null) {\r\n        mv.visitVarInsn(opcode, varIndex);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.MethodVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.MethodVisitor#visitVarInsn(int,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.MethodVisitor#visitTypeInsn(int,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Visits a type instruction. A type instruction is an instruction that takes the internal name of\r\n * a class as parameter (see {@link Type#getInternalName()}).\r\n *\r\n * @param opcode the opcode of the type instruction to be visited. This opcode is either NEW,\r\n *     ANEWARRAY, CHECKCAST or INSTANCEOF.\r\n * @param type the operand of the instruction to be visited. This operand must be the internal\r\n *     name of an object or array class (see {@link Type#getInternalName()}).\r\n */\r\npublic void visitTypeInsn(final int opcode, final String type) {\r\n    if (mv != null) {\r\n        mv.visitTypeInsn(opcode, type);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.MethodVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.MethodVisitor#visitTypeInsn(int,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.MethodVisitor#visitFieldInsn(int,String,String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Visits a field instruction. A field instruction is an instruction that loads or stores the\r\n * value of a field of an object.\r\n *\r\n * @param opcode the opcode of the type instruction to be visited. This opcode is either\r\n *     GETSTATIC, PUTSTATIC, GETFIELD or PUTFIELD.\r\n * @param owner the internal name of the field's owner class (see {@link Type#getInternalName()}).\r\n * @param name the field's name.\r\n * @param descriptor the field's descriptor (see {@link Type}).\r\n */\r\npublic void visitFieldInsn(final int opcode, final String owner, final String name, final String descriptor) {\r\n    if (mv != null) {\r\n        mv.visitFieldInsn(opcode, owner, name, descriptor);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.MethodVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.MethodVisitor#visitFieldInsn(int,String,String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.MethodVisitor#visitMethodInsn(int,String,String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Visits a method instruction. A method instruction is an instruction that invokes a method.\r\n *\r\n * @param opcode the opcode of the type instruction to be visited. This opcode is either\r\n *     INVOKEVIRTUAL, INVOKESPECIAL, INVOKESTATIC or INVOKEINTERFACE.\r\n * @param owner the internal name of the method's owner class (see {@link\r\n *     Type#getInternalName()}).\r\n * @param name the method's name.\r\n * @param descriptor the method's descriptor (see {@link Type}).\r\n * @deprecated use {@link #visitMethodInsn(int, String, String, String, boolean)} instead.\r\n */\r\n@Deprecated\r\npublic void visitMethodInsn(final int opcode, final String owner, final String name, final String descriptor) {\r\n    int opcodeAndSource = opcode | (api < Opcodes.ASM5 ? Opcodes.SOURCE_DEPRECATED : 0);\r\n    visitMethodInsn(opcodeAndSource, owner, name, descriptor, opcode == Opcodes.INVOKEINTERFACE);\r\n}",
    "tailType": "method_code"
  }
]