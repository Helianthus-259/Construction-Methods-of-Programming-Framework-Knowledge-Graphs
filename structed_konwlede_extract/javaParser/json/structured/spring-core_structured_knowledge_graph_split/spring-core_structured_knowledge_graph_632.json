[
  {
    "head": "org.springframework.cglib.proxy.CallbackHelper",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.CallbackHelper#equals(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.CallbackHelper#equals(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.proxy",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.proxy",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.proxy.CallbackInfo",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.proxy.CallbackInfo",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.proxy.CallbackInfo",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2004 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.cglib.proxy;\n\nimport org.springframework.asm.Type;\n\n@SuppressWarnings({\"rawtypes\", \"unchecked\"})\nclass CallbackInfo\n{\n    public static Type[] determineTypes(Class[] callbackTypes) {\n        return determineTypes(callbackTypes, true);\n    }\n\n    public static Type[] determineTypes(Class[] callbackTypes, boolean checkAll) {\n        Type[] types = new Type[callbackTypes.length];\n        for (int i = 0; i < types.length; i++) {\n            types[i] = determineType(callbackTypes[i], checkAll);\n        }\n        return types;\n    }\n\n    public static Type[] determineTypes(Callback[] callbacks) {\n        return determineTypes(callbacks, true);\n    }\n\n    public static Type[] determineTypes(Callback[] callbacks, boolean checkAll) {\n        Type[] types = new Type[callbacks.length];\n        for (int i = 0; i < types.length; i++) {\n            types[i] = determineType(callbacks[i], checkAll);\n        }\n        return types;\n    }\n\n    public static CallbackGenerator[] getGenerators(Type[] callbackTypes) {\n        CallbackGenerator[] generators = new CallbackGenerator[callbackTypes.length];\n        for (int i = 0; i < generators.length; i++) {\n            generators[i] = getGenerator(callbackTypes[i]);\n        }\n        return generators;\n    }\n\n    //////////////////// PRIVATE ////////////////////\n\n    private Class cls;\n    private CallbackGenerator generator;\n    private Type type;\n\n    private static final CallbackInfo[] CALLBACKS = {\n        new CallbackInfo(NoOp.class, NoOpGenerator.INSTANCE),\n        new CallbackInfo(MethodInterceptor.class, MethodInterceptorGenerator.INSTANCE),\n        new CallbackInfo(InvocationHandler.class, InvocationHandlerGenerator.INSTANCE),\n        new CallbackInfo(LazyLoader.class, LazyLoaderGenerator.INSTANCE),\n        new CallbackInfo(Dispatcher.class, DispatcherGenerator.INSTANCE),\n        new CallbackInfo(FixedValue.class, FixedValueGenerator.INSTANCE),\n        new CallbackInfo(ProxyRefDispatcher.class, DispatcherGenerator.PROXY_REF_INSTANCE),\n    };\n\n    private CallbackInfo(Class cls, CallbackGenerator generator) {\n        this.cls = cls;\n        this.generator = generator;\n        type = Type.getType(cls);\n    }\n\n    private static Type determineType(Callback callback, boolean checkAll) {\n        if (callback == null) {\n            throw new IllegalStateException(\"Callback is null\");\n        }\n        return determineType(callback.getClass(), checkAll);\n    }\n\n    private static Type determineType(Class callbackType, boolean checkAll) {\n        Class cur = null;\n        Type type = null;\n        for (CallbackInfo info : CALLBACKS) {\n            if (info.cls.isAssignableFrom(callbackType)) {\n                if (cur != null) {\n                    throw new IllegalStateException(\"Callback implements both \" + cur + \" and \" + info.cls);\n                }\n                cur = info.cls;\n                type = info.type;\n                if (!checkAll) {\n                    break;\n                }\n            }\n        }\n        if (cur == null) {\n            throw new IllegalStateException(\"Unknown callback type \" + callbackType);\n        }\n        return type;\n    }\n\n    private static CallbackGenerator getGenerator(Type callbackType) {\n        for (CallbackInfo info : CALLBACKS) {\n            if (info.type.equals(callbackType)) {\n                return info.generator;\n            }\n        }\n        throw new IllegalStateException(\"Unknown callback type \" + callbackType);\n    }\n}\n\n\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.proxy.CallbackInfo",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.proxy.CallbackInfo#cls",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.proxy.CallbackInfo#cls",
    "headType": "field",
    "relation": "haveType",
    "tail": "Class",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.proxy.CallbackInfo",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.proxy.CallbackInfo#generator",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.proxy.CallbackInfo#generator",
    "headType": "field",
    "relation": "haveType",
    "tail": "CallbackGenerator",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.proxy.CallbackInfo",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.proxy.CallbackInfo#type",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.proxy.CallbackInfo#type",
    "headType": "field",
    "relation": "haveType",
    "tail": "Type",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.proxy.CallbackInfo",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.proxy.CallbackInfo#CALLBACKS",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.proxy.CallbackInfo#CALLBACKS",
    "headType": "field",
    "relation": "haveType",
    "tail": "CallbackInfo",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.proxy.CallbackInfo#determineTypes(Class[])",
    "headType": "method",
    "relation": "provide",
    "tail": "public static Type[] determineTypes(Class[] callbackTypes) {\r\n    return determineTypes(callbackTypes, true);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.CallbackInfo",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.CallbackInfo#determineTypes(Class[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.CallbackInfo#determineTypes(Class[],boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static Type[] determineTypes(Class[] callbackTypes, boolean checkAll) {\r\n    Type[] types = new Type[callbackTypes.length];\r\n    for (int i = 0; i < types.length; i++) {\r\n        types[i] = determineType(callbackTypes[i], checkAll);\r\n    }\r\n    return types;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.CallbackInfo",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.CallbackInfo#determineTypes(Class[],boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.CallbackInfo#determineTypes(Callback[])",
    "headType": "method",
    "relation": "provide",
    "tail": "public static Type[] determineTypes(Callback[] callbacks) {\r\n    return determineTypes(callbacks, true);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.CallbackInfo",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.CallbackInfo#determineTypes(Callback[])",
    "tailType": "method"
  }
]