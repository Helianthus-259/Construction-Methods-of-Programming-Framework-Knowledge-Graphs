[
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#getValueFromMetaAnnotation(int,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprivate Object getValueFromMetaAnnotation(int attributeIndex, boolean forMirrorResolution) {\r\n    Object value = null;\r\n    if (this.useMergedValues || forMirrorResolution) {\r\n        value = this.mapping.getMappedAnnotationValue(attributeIndex, forMirrorResolution);\r\n    }\r\n    if (value == null) {\r\n        Method attribute = this.mapping.getAttributes().get(attributeIndex);\r\n        value = AnnotationUtils.invokeAnnotationMethod(attribute, this.mapping.getAnnotation());\r\n    }\r\n    return value;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.TypeMappedAnnotation#getValueFromMetaAnnotation(int,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#getValueFromMetaAnnotation(int,boolean)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#getValueForMirrorResolution(Method,Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprivate Object getValueForMirrorResolution(Method attribute, @Nullable Object annotation) {\r\n    int attributeIndex = this.mapping.getAttributes().indexOf(attribute);\r\n    boolean valueAttribute = VALUE.equals(attribute.getName());\r\n    return getValue(attributeIndex, !valueAttribute, true);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.TypeMappedAnnotation#getValueForMirrorResolution(Method,Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#getValueForMirrorResolution(Method,Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#adapt(Method,Object,Class<T>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@SuppressWarnings(\"unchecked\")\r\n@Nullable\r\nprivate <T> T adapt(Method attribute, @Nullable Object value, Class<T> type) {\r\n    if (value == null) {\r\n        return null;\r\n    }\r\n    value = adaptForAttribute(attribute, value);\r\n    type = getAdaptType(attribute, type);\r\n    if (value instanceof Class<?> clazz && type == String.class) {\r\n        value = clazz.getName();\r\n    } else if (value instanceof String str && type == Class.class) {\r\n        value = ClassUtils.resolveClassName(str, getClassLoader());\r\n    } else if (value instanceof Class<?>[] classes && type == String[].class) {\r\n        String[] names = new String[classes.length];\r\n        for (int i = 0; i < classes.length; i++) {\r\n            names[i] = classes[i].getName();\r\n        }\r\n        value = names;\r\n    } else if (value instanceof String[] names && type == Class[].class) {\r\n        Class<?>[] classes = new Class<?>[names.length];\r\n        for (int i = 0; i < names.length; i++) {\r\n            classes[i] = ClassUtils.resolveClassName(names[i], getClassLoader());\r\n        }\r\n        value = classes;\r\n    } else if (value instanceof MergedAnnotation<?> annotation && type.isAnnotation()) {\r\n        value = annotation.synthesize();\r\n    } else if (value instanceof MergedAnnotation<?>[] annotations && type.isArray() && type.componentType().isAnnotation()) {\r\n        Object array = Array.newInstance(type.componentType(), annotations.length);\r\n        for (int i = 0; i < annotations.length; i++) {\r\n            Array.set(array, i, annotations[i].synthesize());\r\n        }\r\n        value = array;\r\n    }\r\n    if (!type.isInstance(value)) {\r\n        throw new IllegalArgumentException(\"Unable to adapt value of type \" + value.getClass().getName() + \" to \" + type.getName());\r\n    }\r\n    return (T) value;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.TypeMappedAnnotation#adapt(Method,Object,Class<T>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#adapt(Method,Object,Class<T>)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#adapt(Method,Object,Class<T>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#adaptForAttribute(Method,Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@SuppressWarnings(\"unchecked\")\r\nprivate Object adaptForAttribute(Method attribute, Object value) {\r\n    Class<?> attributeType = ClassUtils.resolvePrimitiveIfNecessary(attribute.getReturnType());\r\n    if (attributeType.isArray() && !value.getClass().isArray()) {\r\n        Object array = Array.newInstance(value.getClass(), 1);\r\n        Array.set(array, 0, value);\r\n        return adaptForAttribute(attribute, array);\r\n    }\r\n    if (attributeType.isAnnotation()) {\r\n        return adaptToMergedAnnotation(value, (Class<? extends Annotation>) attributeType);\r\n    }\r\n    if (attributeType.isArray() && attributeType.componentType().isAnnotation()) {\r\n        MergedAnnotation<?>[] result = new MergedAnnotation<?>[Array.getLength(value)];\r\n        for (int i = 0; i < result.length; i++) {\r\n            result[i] = adaptToMergedAnnotation(Array.get(value, i), (Class<? extends Annotation>) attributeType.componentType());\r\n        }\r\n        return result;\r\n    }\r\n    if ((attributeType == Class.class && value instanceof String) || (attributeType == Class[].class && value instanceof String[]) || (attributeType == String.class && value instanceof Class) || (attributeType == String[].class && value instanceof Class[])) {\r\n        return value;\r\n    }\r\n    if (attributeType.isArray() && isEmptyObjectArray(value)) {\r\n        return emptyArray(attributeType.componentType());\r\n    }\r\n    if (!attributeType.isInstance(value)) {\r\n        throw new IllegalStateException(\"Attribute '\" + attribute.getName() + \"' in annotation \" + getType().getName() + \" should be compatible with \" + attributeType.getName() + \" but a \" + value.getClass().getName() + \" value was returned\");\r\n    }\r\n    return value;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.TypeMappedAnnotation#adaptForAttribute(Method,Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#adaptForAttribute(Method,Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#isEmptyObjectArray(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "private boolean isEmptyObjectArray(Object value) {\r\n    return (value instanceof Object[] objects && objects.length == 0);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.TypeMappedAnnotation#isEmptyObjectArray(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#emptyArray(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private Object emptyArray(Class<?> componentType) {\r\n    Object result = EMPTY_ARRAYS.get(componentType);\r\n    if (result == null) {\r\n        result = Array.newInstance(componentType, 0);\r\n    }\r\n    return result;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.TypeMappedAnnotation#emptyArray(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#adaptToMergedAnnotation(Object,Class<? extends Annotation>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private MergedAnnotation<?> adaptToMergedAnnotation(Object value, Class<? extends Annotation> annotationType) {\r\n    if (value instanceof MergedAnnotation<?> mergedAnnotation) {\r\n        return mergedAnnotation;\r\n    }\r\n    AnnotationTypeMapping mapping = AnnotationTypeMappings.forAnnotationType(annotationType).get(0);\r\n    return new TypeMappedAnnotation<>(mapping, null, this.source, value, getValueExtractor(value), this.aggregateIndex);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.TypeMappedAnnotation#adaptToMergedAnnotation(Object,Class<? extends Annotation>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#getValueExtractor(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "private ValueExtractor getValueExtractor(Object value) {\r\n    if (value instanceof Annotation) {\r\n        return AnnotationUtils::invokeAnnotationMethod;\r\n    }\r\n    if (value instanceof Map) {\r\n        return TypeMappedAnnotation::extractFromMap;\r\n    }\r\n    return this.valueExtractor;\r\n}",
    "tailType": "method_code"
  }
]