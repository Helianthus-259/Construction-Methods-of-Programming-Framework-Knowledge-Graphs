[
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoader#THROWING_FAILURE_HANDLER",
    "headType": "field",
    "relation": "haveType",
    "tail": "FailureHandler",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoader",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.support.SpringFactoriesLoader#logger",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoader#logger",
    "headType": "field",
    "relation": "haveType",
    "tail": "Log",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoader",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.support.SpringFactoriesLoader#cache",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoader#cache",
    "headType": "field",
    "relation": "haveType",
    "tail": "Map<ClassLoader, Map<String, SpringFactoriesLoader>>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoader",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.support.SpringFactoriesLoader#classLoader",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoader#classLoader",
    "headType": "field",
    "relation": "haveType",
    "tail": "ClassLoader",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoader",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.support.SpringFactoriesLoader#factories",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoader#factories",
    "headType": "field",
    "relation": "haveType",
    "tail": "Map<String, List<String>>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoader#load(Class<T>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Load and instantiate the factory implementations of the given type from\r\n * {@value #FACTORIES_RESOURCE_LOCATION}, using the configured class loader\r\n * and a default argument resolver that expects a no-arg constructor.\r\n * <p>The returned factories are sorted through {@link AnnotationAwareOrderComparator}.\r\n * <p>If a custom instantiation strategy is required, use {@code load(...)}\r\n * with a custom {@link ArgumentResolver ArgumentResolver} and/or\r\n * {@link FailureHandler FailureHandler}.\r\n * <p>As of Spring Framework 5.3, if duplicate implementation class names are\r\n * discovered for a given factory type, only one instance of the duplicated\r\n * implementation type will be instantiated.\r\n * @param factoryType the interface or abstract class representing the factory\r\n * @throws IllegalArgumentException if any factory implementation class cannot\r\n * be loaded or if an error occurs while instantiating any factory\r\n * @since 6.0\r\n */\r\npublic <T> List<T> load(Class<T> factoryType) {\r\n    return load(factoryType, null, null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.SpringFactoriesLoader#load(Class<T>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoader#load(Class<T>,ArgumentResolver)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Load and instantiate the factory implementations of the given type from\r\n * {@value #FACTORIES_RESOURCE_LOCATION}, using the configured class loader\r\n * and the given argument resolver.\r\n * <p>The returned factories are sorted through {@link AnnotationAwareOrderComparator}.\r\n * <p>As of Spring Framework 5.3, if duplicate implementation class names are\r\n * discovered for a given factory type, only one instance of the duplicated\r\n * implementation type will be instantiated.\r\n * @param factoryType the interface or abstract class representing the factory\r\n * @param argumentResolver strategy used to resolve constructor arguments by their type\r\n * @throws IllegalArgumentException if any factory implementation class cannot\r\n * be loaded or if an error occurs while instantiating any factory\r\n * @since 6.0\r\n */\r\npublic <T> List<T> load(Class<T> factoryType, @Nullable ArgumentResolver argumentResolver) {\r\n    return load(factoryType, argumentResolver, null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.SpringFactoriesLoader#load(Class<T>,ArgumentResolver)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoader#load(Class<T>,FailureHandler)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Load and instantiate the factory implementations of the given type from\r\n * {@value #FACTORIES_RESOURCE_LOCATION}, using the configured class loader\r\n * with custom failure handling provided by the given failure handler.\r\n * <p>The returned factories are sorted through {@link AnnotationAwareOrderComparator}.\r\n * <p>As of Spring Framework 5.3, if duplicate implementation class names are\r\n * discovered for a given factory type, only one instance of the duplicated\r\n * implementation type will be instantiated.\r\n * <p>For any factory implementation class that cannot be loaded or error that\r\n * occurs while instantiating it, the given failure handler is called.\r\n * @param factoryType the interface or abstract class representing the factory\r\n * @param failureHandler strategy used to handle factory instantiation failures\r\n * @since 6.0\r\n */\r\npublic <T> List<T> load(Class<T> factoryType, @Nullable FailureHandler failureHandler) {\r\n    return load(factoryType, null, failureHandler);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.SpringFactoriesLoader#load(Class<T>,FailureHandler)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoader#load(Class<T>,ArgumentResolver,FailureHandler)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Load and instantiate the factory implementations of the given type from\r\n * {@value #FACTORIES_RESOURCE_LOCATION}, using the configured class loader,\r\n * the given argument resolver, and custom failure handling provided by the given\r\n * failure handler.\r\n * <p>The returned factories are sorted through {@link AnnotationAwareOrderComparator}.\r\n * <p>As of Spring Framework 5.3, if duplicate implementation class names are\r\n * discovered for a given factory type, only one instance of the duplicated\r\n * implementation type will be instantiated.\r\n * <p>For any factory implementation class that cannot be loaded or error that\r\n * occurs while instantiating it, the given failure handler is called.\r\n * @param factoryType the interface or abstract class representing the factory\r\n * @param argumentResolver strategy used to resolve constructor arguments by their type\r\n * @param failureHandler strategy used to handle factory instantiation failures\r\n * @since 6.0\r\n */\r\npublic <T> List<T> load(Class<T> factoryType, @Nullable ArgumentResolver argumentResolver, @Nullable FailureHandler failureHandler) {\r\n    Assert.notNull(factoryType, \"'factoryType' must not be null\");\r\n    List<String> implementationNames = loadFactoryNames(factoryType);\r\n    logger.trace(LogMessage.format(\"Loaded [%s] names: %s\", factoryType.getName(), implementationNames));\r\n    List<T> result = new ArrayList<>(implementationNames.size());\r\n    FailureHandler failureHandlerToUse = (failureHandler != null) ? failureHandler : THROWING_FAILURE_HANDLER;\r\n    for (String implementationName : implementationNames) {\r\n        T factory = instantiateFactory(implementationName, factoryType, argumentResolver, failureHandlerToUse);\r\n        if (factory != null) {\r\n            result.add(factory);\r\n        }\r\n    }\r\n    AnnotationAwareOrderComparator.sort(result);\r\n    return result;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.SpringFactoriesLoader#load(Class<T>,ArgumentResolver,FailureHandler)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoader#loadFactoryNames(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private List<String> loadFactoryNames(Class<?> factoryType) {\r\n    return this.factories.getOrDefault(factoryType.getName(), Collections.emptyList());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.SpringFactoriesLoader#loadFactoryNames(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoader#instantiateFactory(String,Class<T>,ArgumentResolver,FailureHandler)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprotected <T> T instantiateFactory(String implementationName, Class<T> type, @Nullable ArgumentResolver argumentResolver, FailureHandler failureHandler) {\r\n    try {\r\n        Class<?> factoryImplementationClass = ClassUtils.forName(implementationName, this.classLoader);\r\n        Assert.isTrue(type.isAssignableFrom(factoryImplementationClass), () -> \"Class [%s] is not assignable to factory type [%s]\".formatted(implementationName, type.getName()));\r\n        FactoryInstantiator<T> factoryInstantiator = FactoryInstantiator.forClass(factoryImplementationClass);\r\n        return factoryInstantiator.instantiate(argumentResolver);\r\n    } catch (Throwable ex) {\r\n        failureHandler.handleFailure(type, implementationName, ex);\r\n        return null;\r\n    }\r\n}",
    "tailType": "method_code"
  }
]