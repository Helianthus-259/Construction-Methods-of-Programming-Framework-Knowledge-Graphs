[
  {
    "head": "org.springframework.aot.generate.AccessControlTests#forMemberWhenPublicClassWithPackagePrivateMethodReturnType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.AccessControlTests#forMemberWhenPublicClassWithPackagePrivateMethodParameter()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid forMemberWhenPublicClassWithPackagePrivateMethodParameter() {\r\n    Member member = method(ProtectedAccessor.class, \"methodWithProtectedParameter\", PackagePrivateClass.class);\r\n    AccessControl accessControl = AccessControl.forMember(member);\r\n    assertThat(accessControl.getVisibility()).isEqualTo(Visibility.PACKAGE_PRIVATE);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.AccessControlTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.AccessControlTests#forMemberWhenPublicClassWithPackagePrivateMethodParameter()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.AccessControlTests#forMemberWhenPublicClassWithPackagePrivateMethodParameter()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.AccessControlTests#forMemberWhenPublicClassWithPackagePrivateField()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid forMemberWhenPublicClassWithPackagePrivateField() {\r\n    Field member = field(PublicClass.class, \"protectedField\");\r\n    AccessControl accessControl = AccessControl.forMember(member);\r\n    assertThat(accessControl.getVisibility()).isEqualTo(Visibility.PACKAGE_PRIVATE);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.AccessControlTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.AccessControlTests#forMemberWhenPublicClassWithPackagePrivateField()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.AccessControlTests#forMemberWhenPublicClassWithPackagePrivateField()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.AccessControlTests#forMemberWhenPublicClassWithPublicFieldAndPackagePrivateFieldType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid forMemberWhenPublicClassWithPublicFieldAndPackagePrivateFieldType() {\r\n    Member member = field(PublicClass.class, \"protectedClassField\");\r\n    AccessControl accessControl = AccessControl.forMember(member);\r\n    assertThat(accessControl.getVisibility()).isEqualTo(Visibility.PACKAGE_PRIVATE);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.AccessControlTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.AccessControlTests#forMemberWhenPublicClassWithPublicFieldAndPackagePrivateFieldType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.AccessControlTests#forMemberWhenPublicClassWithPublicFieldAndPackagePrivateFieldType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.AccessControlTests#forMemberWhenPublicClassWithPrivateField()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid forMemberWhenPublicClassWithPrivateField() {\r\n    Member member = field(PublicClass.class, \"privateField\");\r\n    AccessControl accessControl = AccessControl.forMember(member);\r\n    assertThat(accessControl.getVisibility()).isEqualTo(Visibility.PRIVATE);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.AccessControlTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.AccessControlTests#forMemberWhenPublicClassWithPrivateField()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.AccessControlTests#forMemberWhenPublicClassWithPrivateField()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.AccessControlTests#forMemberWhenPublicClassWithPublicMethodAndPackagePrivateGenericOnReturnType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid forMemberWhenPublicClassWithPublicMethodAndPackagePrivateGenericOnReturnType() {\r\n    Member member = method(PublicFactoryBean.class, \"protectedTypeFactoryBean\");\r\n    AccessControl accessControl = AccessControl.forMember(member);\r\n    assertThat(accessControl.getVisibility()).isEqualTo(Visibility.PACKAGE_PRIVATE);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.AccessControlTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.AccessControlTests#forMemberWhenPublicClassWithPublicMethodAndPackagePrivateGenericOnReturnType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.AccessControlTests#forMemberWhenPublicClassWithPublicMethodAndPackagePrivateGenericOnReturnType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.AccessControlTests#forMemberWhenPublicClassWithPackagePrivateArrayComponent()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid forMemberWhenPublicClassWithPackagePrivateArrayComponent() {\r\n    Member member = field(PublicClass.class, \"packagePrivateClasses\");\r\n    AccessControl accessControl = AccessControl.forMember(member);\r\n    assertThat(accessControl.getVisibility()).isEqualTo(Visibility.PACKAGE_PRIVATE);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.AccessControlTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.AccessControlTests#forMemberWhenPublicClassWithPackagePrivateArrayComponent()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.AccessControlTests#forMemberWhenPublicClassWithPackagePrivateArrayComponent()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.AccessControlTests#forResolvableTypeWhenPackagePrivateGeneric()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid forResolvableTypeWhenPackagePrivateGeneric() {\r\n    ResolvableType resolvableType = PublicFactoryBean.resolveToProtectedGenericParameter();\r\n    AccessControl accessControl = AccessControl.forResolvableType(resolvableType);\r\n    assertThat(accessControl.getVisibility()).isEqualTo(Visibility.PACKAGE_PRIVATE);\r\n}",
    "tailType": "method_code"
  }
]