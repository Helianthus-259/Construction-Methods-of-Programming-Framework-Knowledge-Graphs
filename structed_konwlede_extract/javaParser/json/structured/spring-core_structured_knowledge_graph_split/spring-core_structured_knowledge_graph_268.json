[
  {
    "head": "org.springframework.util.MultiValueMapTests#addIfAbsentWhenPresent(MultiValueMap<String,String>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedMultiValueMapTest\r\nvoid addIfAbsentWhenPresent(MultiValueMap<String, String> map) {\r\n    map.add(\"key\", \"value1\");\r\n    map.addIfAbsent(\"key\", \"value2\");\r\n    assertThat(map.get(\"key\")).containsExactly(\"value1\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MultiValueMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MultiValueMapTests#addIfAbsentWhenPresent(MultiValueMap<String,String>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MultiValueMapTests#addIfAbsentWhenPresent(MultiValueMap<String,String>)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedMultiValueMapTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MultiValueMapTests#set(MultiValueMap<String,String>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedMultiValueMapTest\r\nvoid set(MultiValueMap<String, String> map) {\r\n    map.set(\"key\", \"value1\");\r\n    map.set(\"key\", \"value2\");\r\n    assertThat(map.get(\"key\")).containsExactly(\"value2\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MultiValueMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MultiValueMapTests#set(MultiValueMap<String,String>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MultiValueMapTests#set(MultiValueMap<String,String>)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedMultiValueMapTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MultiValueMapTests#addAll(MultiValueMap<String,String>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedMultiValueMapTest\r\nvoid addAll(MultiValueMap<String, String> map) {\r\n    int initialSize = map.size();\r\n    map.add(\"key\", \"value1\");\r\n    map.addAll(\"key\", Arrays.asList(\"value2\", \"value3\"));\r\n    assertThat(map).hasSize(initialSize + 1);\r\n    assertThat(map.get(\"key\")).containsExactly(\"value1\", \"value2\", \"value3\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MultiValueMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MultiValueMapTests#addAll(MultiValueMap<String,String>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MultiValueMapTests#addAll(MultiValueMap<String,String>)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedMultiValueMapTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MultiValueMapTests#addAllWithEmptyList(MultiValueMap<String,String>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedMultiValueMapTest\r\nvoid addAllWithEmptyList(MultiValueMap<String, String> map) {\r\n    int initialSize = map.size();\r\n    map.addAll(\"key\", List.of());\r\n    assertThat(map).hasSize(initialSize + 1);\r\n    assertThat(map.get(\"key\")).isEmpty();\r\n    assertThat(map.getFirst(\"key\")).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MultiValueMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MultiValueMapTests#addAllWithEmptyList(MultiValueMap<String,String>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MultiValueMapTests#addAllWithEmptyList(MultiValueMap<String,String>)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedMultiValueMapTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MultiValueMapTests#getFirst(MultiValueMap<String,String>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedMultiValueMapTest\r\nvoid getFirst(MultiValueMap<String, String> map) {\r\n    List<String> values = List.of(\"value1\", \"value2\");\r\n    map.put(\"key\", values);\r\n    assertThat(map.getFirst(\"key\")).isEqualTo(\"value1\");\r\n    assertThat(map.getFirst(\"other\")).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MultiValueMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MultiValueMapTests#getFirst(MultiValueMap<String,String>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MultiValueMapTests#getFirst(MultiValueMap<String,String>)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedMultiValueMapTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MultiValueMapTests#toSingleValueMap(MultiValueMap<String,String>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedMultiValueMapTest\r\nvoid toSingleValueMap(MultiValueMap<String, String> map) {\r\n    int initialSize = map.size();\r\n    List<String> values = List.of(\"value1\", \"value2\");\r\n    map.put(\"key\", values);\r\n    Map<String, String> singleValueMap = map.toSingleValueMap();\r\n    assertThat(singleValueMap).hasSize(initialSize + 1);\r\n    assertThat(singleValueMap.get(\"key\")).isEqualTo(\"value1\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MultiValueMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MultiValueMapTests#toSingleValueMap(MultiValueMap<String,String>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MultiValueMapTests#toSingleValueMap(MultiValueMap<String,String>)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedMultiValueMapTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MultiValueMapTests#toSingleValueMapWithEmptyList(MultiValueMap<String,String>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedMultiValueMapTest\r\nvoid toSingleValueMapWithEmptyList(MultiValueMap<String, String> map) {\r\n    int initialSize = map.size();\r\n    map.put(\"key\", List.of());\r\n    Map<String, String> singleValueMap = map.toSingleValueMap();\r\n    assertThat(singleValueMap).hasSize(initialSize);\r\n    assertThat(singleValueMap.get(\"key\")).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MultiValueMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MultiValueMapTests#toSingleValueMapWithEmptyList(MultiValueMap<String,String>)",
    "tailType": "method"
  }
]