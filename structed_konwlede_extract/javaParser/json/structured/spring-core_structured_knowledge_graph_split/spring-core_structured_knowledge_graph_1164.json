[
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.StandardReflectionParameterNameDiscoverer",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.StandardReflectionParameterNameDiscoverer",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core;\n\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Parameter;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * {@link ParameterNameDiscoverer} implementation which uses JDK 8's reflection facilities\n * for introspecting parameter names (based on the \"-parameters\" compiler flag).\n *\n * <p>This is a key element of {@link DefaultParameterNameDiscoverer} where it is being\n * combined with {@link KotlinReflectionParameterNameDiscoverer} if Kotlin is present.\n *\n * @author Juergen Hoeller\n * @since 4.0\n * @see java.lang.reflect.Method#getParameters()\n * @see java.lang.reflect.Parameter#getName()\n * @see KotlinReflectionParameterNameDiscoverer\n * @see DefaultParameterNameDiscoverer\n */\npublic class StandardReflectionParameterNameDiscoverer implements ParameterNameDiscoverer {\n\n\t@Override\n\tpublic @Nullable String @Nullable [] getParameterNames(Method method) {\n\t\treturn getParameterNames(method.getParameters());\n\t}\n\n\t@Override\n\tpublic @Nullable String @Nullable [] getParameterNames(Constructor<?> ctor) {\n\t\treturn getParameterNames(ctor.getParameters());\n\t}\n\n\tprivate String @Nullable [] getParameterNames(Parameter[] parameters) {\n\t\tString[] parameterNames = new String[parameters.length];\n\t\tfor (int i = 0; i < parameters.length; i++) {\n\t\t\tParameter param = parameters[i];\n\t\t\tif (!param.isNamePresent()) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tparameterNames[i] = param.getName();\n\t\t}\n\t\treturn parameterNames;\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.StandardReflectionParameterNameDiscoverer#getParameterNames(Method)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic String @Nullable [] getParameterNames(Method method) {\r\n    return getParameterNames(method.getParameters());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.StandardReflectionParameterNameDiscoverer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.StandardReflectionParameterNameDiscoverer#getParameterNames(Method)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.StandardReflectionParameterNameDiscoverer#getParameterNames(Method)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.StandardReflectionParameterNameDiscoverer#getParameterNames(Method)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.StandardReflectionParameterNameDiscoverer#getParameterNames(Constructor<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic String @Nullable [] getParameterNames(Constructor<?> ctor) {\r\n    return getParameterNames(ctor.getParameters());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.StandardReflectionParameterNameDiscoverer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.StandardReflectionParameterNameDiscoverer#getParameterNames(Constructor<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.StandardReflectionParameterNameDiscoverer#getParameterNames(Constructor<?>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.StandardReflectionParameterNameDiscoverer#getParameterNames(Constructor<?>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.StandardReflectionParameterNameDiscoverer#getParameterNames(Parameter[])",
    "headType": "method",
    "relation": "provide",
    "tail": "private String @Nullable [] getParameterNames(Parameter[] parameters) {\r\n    String[] parameterNames = new String[parameters.length];\r\n    for (int i = 0; i < parameters.length; i++) {\r\n        Parameter param = parameters[i];\r\n        if (!param.isNamePresent()) {\r\n            return null;\r\n        }\r\n        parameterNames[i] = param.getName();\r\n    }\r\n    return parameterNames;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.StandardReflectionParameterNameDiscoverer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.StandardReflectionParameterNameDiscoverer#getParameterNames(Parameter[])",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.style",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.style",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.style.DefaultToStringStyler",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.style.DefaultToStringStyler",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.style;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.util.Assert;\nimport org.springframework.util.ClassUtils;\nimport org.springframework.util.ObjectUtils;\n\n/**\n * Spring's default {@code toString()} styler.\n *\n * <p>This class is used by {@link ToStringCreator} to style {@code toString()}\n * output in a consistent manner according to Spring conventions.\n *\n * @author Keith Donald\n * @author Juergen Hoeller\n * @since 1.2.2\n */\npublic class DefaultToStringStyler implements ToStringStyler {\n\n\tprivate final ValueStyler valueStyler;\n\n\n\t/**\n\t * Create a new DefaultToStringStyler.\n\t * @param valueStyler the ValueStyler to use\n\t */\n\tpublic DefaultToStringStyler(ValueStyler valueStyler) {\n\t\tAssert.notNull(valueStyler, \"ValueStyler must not be null\");\n\t\tthis.valueStyler = valueStyler;\n\t}\n\n\t/**\n\t * Return the ValueStyler used by this ToStringStyler.\n\t */\n\tprotected final ValueStyler getValueStyler() {\n\t\treturn this.valueStyler;\n\t}\n\n\n\t@Override\n\tpublic void styleStart(StringBuilder buffer, Object obj) {\n\t\tif (!obj.getClass().isArray()) {\n\t\t\tbuffer.append('[').append(ClassUtils.getShortName(obj.getClass()));\n\t\t\tstyleIdentityHashCode(buffer, obj);\n\t\t}\n\t\telse {\n\t\t\tbuffer.append('[');\n\t\t\tstyleIdentityHashCode(buffer, obj);\n\t\t\tbuffer.append(' ');\n\t\t\tstyleValue(buffer, obj);\n\t\t}\n\t}\n\n\tprivate void styleIdentityHashCode(StringBuilder buffer, Object obj) {\n\t\tbuffer.append('@');\n\t\tbuffer.append(ObjectUtils.getIdentityHexString(obj));\n\t}\n\n\t@Override\n\tpublic void styleEnd(StringBuilder buffer, Object o) {\n\t\tbuffer.append(']');\n\t}\n\n\t@Override\n\tpublic void styleField(StringBuilder buffer, String fieldName, @Nullable Object value) {\n\t\tstyleFieldStart(buffer, fieldName);\n\t\tstyleValue(buffer, value);\n\t\tstyleFieldEnd(buffer, fieldName);\n\t}\n\n\tprotected void styleFieldStart(StringBuilder buffer, String fieldName) {\n\t\tbuffer.append(' ').append(fieldName).append(\" = \");\n\t}\n\n\tprotected void styleFieldEnd(StringBuilder buffer, String fieldName) {\n\t}\n\n\t@Override\n\tpublic void styleValue(StringBuilder buffer, @Nullable Object value) {\n\t\tbuffer.append(this.valueStyler.style(value));\n\t}\n\n\t@Override\n\tpublic void styleFieldSeparator(StringBuilder buffer) {\n\t\tbuffer.append(',');\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.style.DefaultToStringStyler",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.style.DefaultToStringStyler#valueStyler",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.style.DefaultToStringStyler#valueStyler",
    "headType": "field",
    "relation": "haveType",
    "tail": "ValueStyler",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.style.DefaultToStringStyler#getValueStyler()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the ValueStyler used by this ToStringStyler.\r\n */\r\nprotected final ValueStyler getValueStyler() {\r\n    return this.valueStyler;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.style.DefaultToStringStyler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.style.DefaultToStringStyler#getValueStyler()",
    "tailType": "method"
  }
]