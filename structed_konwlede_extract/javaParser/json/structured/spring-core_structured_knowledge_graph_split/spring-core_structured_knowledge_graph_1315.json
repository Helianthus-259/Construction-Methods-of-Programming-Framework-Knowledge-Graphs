[
  {
    "head": "org.springframework.util.function.SingletonSupplier#get()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.function.SingletonSupplier#obtain()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Obtain the shared singleton instance for this supplier.\r\n * @return the singleton instance (never {@code null})\r\n * @throws IllegalStateException in case of no instance\r\n */\r\npublic T obtain() {\r\n    T instance = get();\r\n    Assert.state(instance != null, \"No instance from Supplier\");\r\n    return instance;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.function.SingletonSupplier",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.function.SingletonSupplier#obtain()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.function.SingletonSupplier#of(T)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Build a {@code SingletonSupplier} with the given singleton instance.\r\n * @param instance the singleton instance (never {@code null})\r\n * @return the singleton supplier (never {@code null})\r\n */\r\npublic static <T> SingletonSupplier<T> of(T instance) {\r\n    return new SingletonSupplier<>(instance);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.function.SingletonSupplier",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.function.SingletonSupplier#of(T)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.function.SingletonSupplier#ofNullable(T)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Build a {@code SingletonSupplier} with the given singleton instance.\r\n * @param instance the singleton instance (potentially {@code null})\r\n * @return the singleton supplier, or {@code null} if the instance was {@code null}\r\n */\r\n@Contract(\"null -> null; !null -> !null\")\r\n@Nullable\r\npublic static <T> SingletonSupplier<T> ofNullable(@Nullable T instance) {\r\n    return (instance != null ? new SingletonSupplier<>(instance) : null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.function.SingletonSupplier",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.function.SingletonSupplier#ofNullable(T)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.function.SingletonSupplier#ofNullable(T)",
    "headType": "method",
    "relation": "use",
    "tail": "@Contract",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.function.SingletonSupplier#ofNullable(T)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.function.SingletonSupplier#of(Supplier<T>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Build a {@code SingletonSupplier} with the given supplier.\r\n * @param supplier the instance supplier (never {@code null})\r\n * @return the singleton supplier (never {@code null})\r\n */\r\npublic static <T> SingletonSupplier<T> of(Supplier<T> supplier) {\r\n    return new SingletonSupplier<>(supplier);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.function.SingletonSupplier",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.function.SingletonSupplier#of(Supplier<T>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.function.SingletonSupplier#ofNullable(Supplier<? extends T>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Build a {@code SingletonSupplier} with the given supplier.\r\n * @param supplier the instance supplier (potentially {@code null})\r\n * @return the singleton supplier, or {@code null} if the instance supplier was {@code null}\r\n */\r\n@Contract(\"null -> null; !null -> !null\")\r\n@Nullable\r\npublic static <T> SingletonSupplier<T> ofNullable(@Nullable Supplier<? extends @Nullable T> supplier) {\r\n    return (supplier != null ? new SingletonSupplier<>(supplier) : null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.function.SingletonSupplier",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.function.SingletonSupplier#ofNullable(Supplier<? extends T>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.function.SingletonSupplier#ofNullable(Supplier<? extends T>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Contract",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.function.SingletonSupplier#ofNullable(Supplier<? extends T>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util.function",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util.function",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.function.SupplierUtils",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.function.SupplierUtils",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util.function;\n\nimport java.util.function.Supplier;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.lang.Contract;\n\n/**\n * Convenience utilities for {@link java.util.function.Supplier} handling.\n *\n * @author Juergen Hoeller\n * @since 5.1\n * @see SingletonSupplier\n */\npublic abstract class SupplierUtils {\n\n\t/**\n\t * Resolve the given {@code Supplier}, getting its result or immediately\n\t * returning {@code null} if the supplier itself was {@code null}.\n\t * @param supplier the supplier to resolve\n\t * @return the supplier's result, or {@code null} if none\n\t */\n\t@Contract(\"null -> null; !null -> !null\")\n\tpublic static <T> @Nullable T resolve(@Nullable Supplier<T> supplier) {\n\t\treturn (supplier != null ? supplier.get() : null);\n\t}\n\n\t/**\n\t * Resolve a given {@code Supplier}, getting its result or immediately\n\t * returning the given Object as-is if not a {@code Supplier}.\n\t * @param candidate the candidate to resolve (potentially a {@code Supplier})\n\t * @return a supplier's result or the given Object as-is\n\t * @since 6.1.4\n\t */\n\tpublic static @Nullable Object resolve(@Nullable Object candidate) {\n\t\treturn (candidate instanceof Supplier<?> supplier ? supplier.get() : candidate);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.function.SupplierUtils#resolve(Supplier<T>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Resolve the given {@code Supplier}, getting its result or immediately\r\n * returning {@code null} if the supplier itself was {@code null}.\r\n * @param supplier the supplier to resolve\r\n * @return the supplier's result, or {@code null} if none\r\n */\r\n@Contract(\"null -> null; !null -> !null\")\r\n@Nullable\r\npublic static <T> T resolve(@Nullable Supplier<T> supplier) {\r\n    return (supplier != null ? supplier.get() : null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.function.SupplierUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.function.SupplierUtils#resolve(Supplier<T>)",
    "tailType": "method"
  }
]