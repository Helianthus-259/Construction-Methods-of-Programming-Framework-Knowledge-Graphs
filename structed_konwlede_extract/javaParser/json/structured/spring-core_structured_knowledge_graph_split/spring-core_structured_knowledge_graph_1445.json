[
  {
    "head": "org.springframework.util.xml.ListBasedXMLEventReader#nextEvent()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic XMLEvent nextEvent() {\r\n    if (hasNext()) {\r\n        this.currentEvent = this.events.get(this.cursor);\r\n        this.cursor++;\r\n        return this.currentEvent;\r\n    } else {\r\n        throw new NoSuchElementException();\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.ListBasedXMLEventReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.ListBasedXMLEventReader#nextEvent()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.ListBasedXMLEventReader#nextEvent()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.ListBasedXMLEventReader#peek()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic XMLEvent peek() {\r\n    if (hasNext()) {\r\n        return this.events.get(this.cursor);\r\n    } else {\r\n        return null;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.ListBasedXMLEventReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.ListBasedXMLEventReader#peek()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.ListBasedXMLEventReader#peek()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.ListBasedXMLEventReader#peek()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.ListBasedXMLEventReader#getElementText()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String getElementText() throws XMLStreamException {\r\n    checkIfClosed();\r\n    if (this.currentEvent == null || !this.currentEvent.isStartElement()) {\r\n        throw new XMLStreamException(\"Not at START_ELEMENT: \" + this.currentEvent);\r\n    }\r\n    StringBuilder builder = new StringBuilder();\r\n    while (true) {\r\n        XMLEvent event = nextEvent();\r\n        if (event.isEndElement()) {\r\n            break;\r\n        } else if (!event.isCharacters()) {\r\n            throw new XMLStreamException(\"Unexpected non-text event: \" + event);\r\n        }\r\n        Characters characters = event.asCharacters();\r\n        if (!characters.isIgnorableWhiteSpace()) {\r\n            builder.append(event.asCharacters().getData());\r\n        }\r\n    }\r\n    return builder.toString();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.ListBasedXMLEventReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.ListBasedXMLEventReader#getElementText()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.ListBasedXMLEventReader#getElementText()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.ListBasedXMLEventReader#nextTag()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic XMLEvent nextTag() throws XMLStreamException {\r\n    checkIfClosed();\r\n    while (true) {\r\n        XMLEvent event = nextEvent();\r\n        switch(event.getEventType()) {\r\n            case XMLStreamConstants.START_ELEMENT, XMLStreamConstants.END_ELEMENT ->\r\n                {\r\n                    return event;\r\n                }\r\n            case XMLStreamConstants.END_DOCUMENT ->\r\n                {\r\n                    return null;\r\n                }\r\n            case XMLStreamConstants.SPACE, XMLStreamConstants.COMMENT, XMLStreamConstants.PROCESSING_INSTRUCTION ->\r\n                {\r\n                    continue;\r\n                }\r\n            case XMLStreamConstants.CDATA, XMLStreamConstants.CHARACTERS ->\r\n                {\r\n                    if (!event.asCharacters().isWhiteSpace()) {\r\n                        throw new XMLStreamException(\"Non-ignorable whitespace CDATA or CHARACTERS event: \" + event);\r\n                    }\r\n                }\r\n            default ->\r\n                throw new XMLStreamException(\"Expected START_ELEMENT or END_ELEMENT: \" + event);\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.ListBasedXMLEventReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.ListBasedXMLEventReader#nextTag()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.ListBasedXMLEventReader#nextTag()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.ListBasedXMLEventReader#nextTag()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.ListBasedXMLEventReader#close()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void close() {\r\n    super.close();\r\n    this.events.clear();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.ListBasedXMLEventReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.ListBasedXMLEventReader#close()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.ListBasedXMLEventReader#close()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.ListBasedXMLEventReader",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractXMLEventReader",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util.xml",
    "tailType": "package"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util.xml",
    "tailType": "package"
  }
]