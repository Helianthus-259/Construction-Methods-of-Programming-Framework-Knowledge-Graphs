[
  {
    "head": "org.springframework.cglib.transform.AbstractClassTransformer#setTarget(ClassVisitor)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void setTarget(ClassVisitor target) {\r\n    cv = target;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassTransformer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.AbstractClassTransformer#setTarget(ClassVisitor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassTransformer#setTarget(ClassVisitor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassTransformer",
    "headType": "class",
    "relation": "extend",
    "tail": "ClassTransformer",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.transform",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.transform",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.transform.AnnotationVisitorTee",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.transform.AnnotationVisitorTee",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2003 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.cglib.transform;\n\nimport org.springframework.asm.AnnotationVisitor;\nimport org.springframework.cglib.core.Constants;\n\npublic class AnnotationVisitorTee extends AnnotationVisitor {\n    private AnnotationVisitor av1, av2;\n\n    public static AnnotationVisitor getInstance(AnnotationVisitor av1, AnnotationVisitor av2) {\n        if (av1 == null) {\n\t\t\treturn av2;\n\t\t}\n        if (av2 == null) {\n\t\t\treturn av1;\n\t\t}\n        return new AnnotationVisitorTee(av1, av2);\n    }\n\n    public AnnotationVisitorTee(AnnotationVisitor av1, AnnotationVisitor av2) {\n\tsuper(Constants.ASM_API);\n        this.av1 = av1;\n        this.av2 = av2;\n    }\n\n    @Override\n\tpublic void visit(String name, Object value) {\n        av2.visit(name, value);\n        av2.visit(name, value);\n    }\n\n    @Override\n\tpublic void visitEnum(String name, String desc, String value) {\n        av1.visitEnum(name, desc, value);\n        av2.visitEnum(name, desc, value);\n    }\n\n    @Override\n\tpublic AnnotationVisitor visitAnnotation(String name, String desc) {\n        return getInstance(av1.visitAnnotation(name, desc),\n                           av2.visitAnnotation(name, desc));\n    }\n\n    @Override\n\tpublic AnnotationVisitor visitArray(String name) {\n        return getInstance(av1.visitArray(name), av2.visitArray(name));\n    }\n\n    @Override\n\tpublic void visitEnd() {\n        av1.visitEnd();\n        av2.visitEnd();\n    }\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.transform.AnnotationVisitorTee",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.transform.AnnotationVisitorTee#av1",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.transform.AnnotationVisitorTee#av1",
    "headType": "field",
    "relation": "haveType",
    "tail": "AnnotationVisitor",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.transform.AnnotationVisitorTee",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.transform.AnnotationVisitorTee#av2",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.transform.AnnotationVisitorTee#av2",
    "headType": "field",
    "relation": "haveType",
    "tail": "AnnotationVisitor",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.transform.AnnotationVisitorTee#getInstance(AnnotationVisitor,AnnotationVisitor)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static AnnotationVisitor getInstance(AnnotationVisitor av1, AnnotationVisitor av2) {\r\n    if (av1 == null) {\r\n        return av2;\r\n    }\r\n    if (av2 == null) {\r\n        return av1;\r\n    }\r\n    return new AnnotationVisitorTee(av1, av2);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.AnnotationVisitorTee",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.AnnotationVisitorTee#getInstance(AnnotationVisitor,AnnotationVisitor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.AnnotationVisitorTee#visit(String,Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void visit(String name, Object value) {\r\n    av2.visit(name, value);\r\n    av2.visit(name, value);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.AnnotationVisitorTee",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.AnnotationVisitorTee#visit(String,Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.AnnotationVisitorTee#visit(String,Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.AnnotationVisitorTee#visitEnum(String,String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void visitEnum(String name, String desc, String value) {\r\n    av1.visitEnum(name, desc, value);\r\n    av2.visitEnum(name, desc, value);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.AnnotationVisitorTee",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.AnnotationVisitorTee#visitEnum(String,String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.AnnotationVisitorTee#visitEnum(String,String,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.AnnotationVisitorTee#visitAnnotation(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic AnnotationVisitor visitAnnotation(String name, String desc) {\r\n    return getInstance(av1.visitAnnotation(name, desc), av2.visitAnnotation(name, desc));\r\n}",
    "tailType": "method_code"
  }
]