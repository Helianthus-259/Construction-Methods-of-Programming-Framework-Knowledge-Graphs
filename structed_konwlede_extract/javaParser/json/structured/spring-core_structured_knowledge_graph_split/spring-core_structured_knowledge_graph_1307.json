[
  {
    "head": "org.springframework.util.FastByteArrayInputStream",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FastByteArrayInputStream#skip(long)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FastByteArrayInputStream#skip(long)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.FastByteArrayInputStream#available()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int available() {\r\n    return (this.fastByteArrayOutputStream.size() - this.totalBytesRead);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FastByteArrayInputStream",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FastByteArrayInputStream#available()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FastByteArrayInputStream#available()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.FastByteArrayInputStream#updateMessageDigest(MessageDigest)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Update the message digest with the remaining bytes in this stream.\r\n * @param messageDigest the message digest to update\r\n */\r\n@Override\r\npublic void updateMessageDigest(MessageDigest messageDigest) {\r\n    updateMessageDigest(messageDigest, available());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FastByteArrayInputStream",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FastByteArrayInputStream#updateMessageDigest(MessageDigest)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FastByteArrayInputStream#updateMessageDigest(MessageDigest)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.FastByteArrayInputStream#updateMessageDigest(MessageDigest,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Update the message digest with the next len bytes in this stream.\r\n * Avoids creating new byte arrays and use internal buffers for performance.\r\n * @param messageDigest the message digest to update\r\n * @param len how many bytes to read from this stream and use to update the message digest\r\n */\r\n@Override\r\npublic void updateMessageDigest(MessageDigest messageDigest, int len) {\r\n    if (this.currentBuffer == null) {\r\n        // This stream doesn't have any data in it...\r\n        return;\r\n    } else if (len == 0) {\r\n        return;\r\n    } else if (len < 0) {\r\n        throw new IllegalArgumentException(\"len must be 0 or greater: \" + len);\r\n    } else {\r\n        if (this.nextIndexInCurrentBuffer < this.currentBufferLength) {\r\n            int bytesToCopy = Math.min(len, this.currentBufferLength - this.nextIndexInCurrentBuffer);\r\n            messageDigest.update(this.currentBuffer, this.nextIndexInCurrentBuffer, bytesToCopy);\r\n            this.nextIndexInCurrentBuffer += bytesToCopy;\r\n            updateMessageDigest(messageDigest, len - bytesToCopy);\r\n        } else {\r\n            if (this.buffersIterator.hasNext()) {\r\n                this.currentBuffer = this.buffersIterator.next();\r\n                updateCurrentBufferLength();\r\n                this.nextIndexInCurrentBuffer = 0;\r\n            } else {\r\n                this.currentBuffer = null;\r\n            }\r\n            updateMessageDigest(messageDigest, len);\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FastByteArrayInputStream",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FastByteArrayInputStream#updateMessageDigest(MessageDigest,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FastByteArrayInputStream#updateMessageDigest(MessageDigest,int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.FastByteArrayInputStream#updateCurrentBufferLength()",
    "headType": "method",
    "relation": "provide",
    "tail": "private void updateCurrentBufferLength() {\r\n    if (this.currentBuffer == this.fastByteArrayOutputStream.buffers.getLast()) {\r\n        this.currentBufferLength = this.fastByteArrayOutputStream.index;\r\n    } else {\r\n        this.currentBufferLength = (this.currentBuffer != null ? this.currentBuffer.length : 0);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FastByteArrayInputStream",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FastByteArrayInputStream#updateCurrentBufferLength()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FastByteArrayInputStream",
    "headType": "class",
    "relation": "extend",
    "tail": "UpdateMessageDigestInputStream",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.FileCopyUtils",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.FileCopyUtils",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.Closeable;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.Reader;\nimport java.io.StringWriter;\nimport java.io.Writer;\nimport java.nio.file.Files;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * Simple utility methods for file and stream copying. All copy methods use a block size\n * of 4096 bytes, and close all affected streams when done. A variation of the copy\n * methods from this class that leave streams open can be found in {@link StreamUtils}.\n *\n * <p>Mainly for use within the framework, but also useful for application code.\n *\n * @author Juergen Hoeller\n * @author Hyunjin Choi\n * @since 06.10.2003\n * @see StreamUtils\n * @see FileSystemUtils\n */\npublic abstract class FileCopyUtils {\n\n\t/**\n\t * The default buffer size used when copying bytes.\n\t */\n\tpublic static final int BUFFER_SIZE = StreamUtils.BUFFER_SIZE;\n\n\n\t//---------------------------------------------------------------------\n\t// Copy methods for java.io.File\n\t//---------------------------------------------------------------------\n\n\t/**\n\t * Copy the contents of the given input File to the given output File.\n\t * @param in the file to copy from\n\t * @param out the file to copy to\n\t * @return the number of bytes copied\n\t * @throws IOException in case of I/O errors\n\t */\n\tpublic static int copy(File in, File out) throws IOException {\n\t\tAssert.notNull(in, \"No input File specified\");\n\t\tAssert.notNull(out, \"No output File specified\");\n\t\treturn copy(Files.newInputStream(in.toPath()), Files.newOutputStream(out.toPath()));\n\t}\n\n\t/**\n\t * Copy the contents of the given byte array to the given output File.\n\t * @param in the byte array to copy from\n\t * @param out the file to copy to\n\t * @throws IOException in case of I/O errors\n\t */\n\tpublic static void copy(byte[] in, File out) throws IOException {\n\t\tAssert.notNull(in, \"No input byte array specified\");\n\t\tAssert.notNull(out, \"No output File specified\");\n\t\tcopy(new ByteArrayInputStream(in), Files.newOutputStream(out.toPath()));\n\t}\n\n\t/**\n\t * Copy the contents of the given input File into a new byte array.\n\t * @param in the file to copy from\n\t * @return the new byte array that has been copied to\n\t * @throws IOException in case of I/O errors\n\t */\n\tpublic static byte[] copyToByteArray(File in) throws IOException {\n\t\tAssert.notNull(in, \"No input File specified\");\n\t\treturn copyToByteArray(Files.newInputStream(in.toPath()));\n\t}\n\n\n\t//---------------------------------------------------------------------\n\t// Copy methods for java.io.InputStream / java.io.OutputStream\n\t//---------------------------------------------------------------------\n\n\t/**\n\t * Copy the contents of the given InputStream to the given OutputStream.\n\t * Closes both streams when done.\n\t * @param in the stream to copy from\n\t * @param out the stream to copy to\n\t * @return the number of bytes copied\n\t * @throws IOException in case of I/O errors\n\t */\n\tpublic static int copy(InputStream in, OutputStream out) throws IOException {\n\t\tAssert.notNull(in, \"No InputStream specified\");\n\t\tAssert.notNull(out, \"No OutputStream specified\");\n\n\t\ttry (in; out) {\n\t\t\tint count = (int) in.transferTo(out);\n\t\t\tout.flush();\n\t\t\treturn count;\n\t\t}\n\t}\n\n\t/**\n\t * Copy the contents of the given byte array to the given OutputStream.\n\t * Closes the stream when done.\n\t * @param in the byte array to copy from\n\t * @param out the OutputStream to copy to\n\t * @throws IOException in case of I/O errors\n\t */\n\tpublic static void copy(byte[] in, OutputStream out) throws IOException {\n\t\tAssert.notNull(in, \"No input byte array specified\");\n\t\tAssert.notNull(out, \"No OutputStream specified\");\n\n\t\ttry {\n\t\t\tout.write(in);\n\t\t}\n\t\tfinally {\n\t\t\tclose(out);\n\t\t}\n\t}\n\n\t/**\n\t * Copy the contents of the given InputStream into a new byte array.\n\t * Closes the stream when done.\n\t * @param in the stream to copy from (may be {@code null} or empty)\n\t * @return the new byte array that has been copied to (possibly empty)\n\t * @throws IOException in case of I/O errors\n\t */\n\tpublic static byte[] copyToByteArray(@Nullable InputStream in) throws IOException {\n\t\tif (in == null) {\n\t\t\treturn new byte[0];\n\t\t}\n\n\t\ttry (in) {\n\t\t\treturn in.readAllBytes();\n\t\t}\n\t}\n\n\n\t//---------------------------------------------------------------------\n\t// Copy methods for java.io.Reader / java.io.Writer\n\t//---------------------------------------------------------------------\n\n\t/**\n\t * Copy the contents of the given Reader to the given Writer.\n\t * Closes both when done.\n\t * @param in the Reader to copy from\n\t * @param out the Writer to copy to\n\t * @return the number of characters copied\n\t * @throws IOException in case of I/O errors\n\t */\n\tpublic static int copy(Reader in, Writer out) throws IOException {\n\t\tAssert.notNull(in, \"No Reader specified\");\n\t\tAssert.notNull(out, \"No Writer specified\");\n\n\t\ttry {\n\t\t\tint charCount = 0;\n\t\t\tchar[] buffer = new char[BUFFER_SIZE];\n\t\t\tint charsRead;\n\t\t\twhile ((charsRead = in.read(buffer)) != -1) {\n\t\t\t\tout.write(buffer, 0, charsRead);\n\t\t\t\tcharCount += charsRead;\n\t\t\t}\n\t\t\tout.flush();\n\t\t\treturn charCount;\n\t\t}\n\t\tfinally {\n\t\t\tclose(in);\n\t\t\tclose(out);\n\t\t}\n\t}\n\n\t/**\n\t * Copy the contents of the given String to the given Writer.\n\t * Closes the writer when done.\n\t * @param in the String to copy from\n\t * @param out the Writer to copy to\n\t * @throws IOException in case of I/O errors\n\t */\n\tpublic static void copy(String in, Writer out) throws IOException {\n\t\tAssert.notNull(in, \"No input String specified\");\n\t\tAssert.notNull(out, \"No Writer specified\");\n\n\t\ttry {\n\t\t\tout.write(in);\n\t\t}\n\t\tfinally {\n\t\t\tclose(out);\n\t\t}\n\t}\n\n\t/**\n\t * Copy the contents of the given Reader into a String.\n\t * Closes the reader when done.\n\t * @param in the reader to copy from (may be {@code null} or empty)\n\t * @return the String that has been copied to (possibly empty)\n\t * @throws IOException in case of I/O errors\n\t */\n\tpublic static String copyToString(@Nullable Reader in) throws IOException {\n\t\tif (in == null) {\n\t\t\treturn \"\";\n\t\t}\n\n\t\tStringWriter out = new StringWriter(BUFFER_SIZE);\n\t\tcopy(in, out);\n\t\treturn out.toString();\n\t}\n\n\t/**\n\t * Attempt to close the supplied {@link Closeable}, silently swallowing any\n\t * exceptions.\n\t * @param closeable the {@code Closeable} to close\n\t */\n\tprivate static void close(Closeable closeable) {\n\t\ttry {\n\t\t\tcloseable.close();\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\t// ignore\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.FileCopyUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.FileCopyUtils#BUFFER_SIZE",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.FileCopyUtils#BUFFER_SIZE",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.FileCopyUtils#copy(File,File)",
    "headType": "method",
    "relation": "provide",
    "tail": "//---------------------------------------------------------------------\r\n// Copy methods for java.io.File\r\n//---------------------------------------------------------------------\r\n/**\r\n * Copy the contents of the given input File to the given output File.\r\n * @param in the file to copy from\r\n * @param out the file to copy to\r\n * @return the number of bytes copied\r\n * @throws IOException in case of I/O errors\r\n */\r\npublic static int copy(File in, File out) throws IOException {\r\n    Assert.notNull(in, \"No input File specified\");\r\n    Assert.notNull(out, \"No output File specified\");\r\n    return copy(Files.newInputStream(in.toPath()), Files.newOutputStream(out.toPath()));\r\n}",
    "tailType": "method_code"
  }
]