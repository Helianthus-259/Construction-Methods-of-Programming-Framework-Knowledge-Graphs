[
  {
    "head": "org.springframework.util.CustomizableThreadCreator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CustomizableThreadCreator#getThreadGroup()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CustomizableThreadCreator#getThreadGroup()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CustomizableThreadCreator#createThread(Runnable)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Template method for the creation of a new {@link Thread}.\r\n * <p>The default implementation creates a new Thread for the given\r\n * {@link Runnable}, applying an appropriate thread name.\r\n * @param runnable the Runnable to execute\r\n * @see #nextThreadName()\r\n */\r\npublic Thread createThread(Runnable runnable) {\r\n    Thread thread = new Thread(getThreadGroup(), runnable, nextThreadName());\r\n    thread.setPriority(getThreadPriority());\r\n    thread.setDaemon(isDaemon());\r\n    return thread;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CustomizableThreadCreator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CustomizableThreadCreator#createThread(Runnable)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CustomizableThreadCreator#nextThreadName()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the thread name to use for a newly created {@link Thread}.\r\n * <p>The default implementation returns the specified thread name prefix\r\n * with an increasing thread count appended: for example, \"SimpleAsyncTaskExecutor-0\".\r\n * @see #getThreadNamePrefix()\r\n */\r\nprotected String nextThreadName() {\r\n    return getThreadNamePrefix() + this.threadCount.incrementAndGet();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CustomizableThreadCreator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CustomizableThreadCreator#nextThreadName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CustomizableThreadCreator#getDefaultThreadNamePrefix()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Build the default thread name prefix for this factory.\r\n * @return the default thread name prefix (never {@code null})\r\n */\r\nprotected String getDefaultThreadNamePrefix() {\r\n    return ClassUtils.getShortName(getClass()) + \"-\";\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CustomizableThreadCreator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CustomizableThreadCreator#getDefaultThreadNamePrefix()",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.DefaultPropertiesPersister",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.DefaultPropertiesPersister",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.Reader;\nimport java.io.Writer;\nimport java.util.Properties;\n\n/**\n * Default implementation of the {@link PropertiesPersister} interface.\n * Follows the native parsing of {@code java.util.Properties}.\n *\n * <p>Allows for reading from any Reader and writing to any Writer, for example\n * to specify a charset for a properties file. This is a capability that standard\n * {@code java.util.Properties} unfortunately lacked up until JDK 5:\n * You were only able to load files using the ISO-8859-1 charset there.\n *\n * <p>Loading from and storing to a stream delegates to {@code Properties.load}\n * and {@code Properties.store}, respectively, to be fully compatible with\n * the Unicode conversion as implemented by the JDK Properties class. As of JDK 6,\n * {@code Properties.load/store} is also used for readers/writers, effectively\n * turning this class into a plain backwards compatibility adapter.\n *\n * <p>The persistence code that works with Reader/Writer follows the JDK's parsing\n * strategy but does not implement Unicode conversion, because the Reader/Writer\n * should already apply proper decoding/encoding of characters. If you prefer\n * to escape unicode characters in your properties files, do <i>not</i> specify\n * an encoding for a Reader/Writer (like ReloadableResourceBundleMessageSource's\n * \"defaultEncoding\" and \"fileEncodings\" properties).\n *\n * @author Juergen Hoeller\n * @author Sebastien Deleuze\n * @since 10.03.2004\n * @see java.util.Properties\n * @see java.util.Properties#load\n * @see java.util.Properties#store\n */\npublic class DefaultPropertiesPersister implements PropertiesPersister {\n\n\t/**\n\t * A convenient constant for a default {@code DefaultPropertiesPersister} instance,\n\t * as used in Spring's common resource support.\n\t * @since 6.0\n\t */\n\tpublic static final DefaultPropertiesPersister INSTANCE = new DefaultPropertiesPersister();\n\n\n\t@Override\n\tpublic void load(Properties props, InputStream is) throws IOException {\n\t\tprops.load(is);\n\t}\n\n\t@Override\n\tpublic void load(Properties props, Reader reader) throws IOException {\n\t\tprops.load(reader);\n\t}\n\n\t@Override\n\tpublic void store(Properties props, OutputStream os, String header) throws IOException {\n\t\tprops.store(os, header);\n\t}\n\n\t@Override\n\tpublic void store(Properties props, Writer writer, String header) throws IOException {\n\t\tprops.store(writer, header);\n\t}\n\n\t@Override\n\tpublic void loadFromXml(Properties props, InputStream is) throws IOException {\n\t\tprops.loadFromXML(is);\n\t}\n\n\t@Override\n\tpublic void storeToXml(Properties props, OutputStream os, String header) throws IOException {\n\t\tprops.storeToXML(os, header);\n\t}\n\n\t@Override\n\tpublic void storeToXml(Properties props, OutputStream os, String header, String encoding) throws IOException {\n\t\tprops.storeToXML(os, header, encoding);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.DefaultPropertiesPersister",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.DefaultPropertiesPersister#INSTANCE",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.DefaultPropertiesPersister#INSTANCE",
    "headType": "field",
    "relation": "haveType",
    "tail": "DefaultPropertiesPersister",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.DefaultPropertiesPersister#load(Properties,InputStream)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void load(Properties props, InputStream is) throws IOException {\r\n    props.load(is);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.DefaultPropertiesPersister",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.DefaultPropertiesPersister#load(Properties,InputStream)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.DefaultPropertiesPersister#load(Properties,InputStream)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.DefaultPropertiesPersister#load(Properties,Reader)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void load(Properties props, Reader reader) throws IOException {\r\n    props.load(reader);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.DefaultPropertiesPersister",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.DefaultPropertiesPersister#load(Properties,Reader)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.DefaultPropertiesPersister#load(Properties,Reader)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.DefaultPropertiesPersister#store(Properties,OutputStream,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void store(Properties props, OutputStream os, String header) throws IOException {\r\n    props.store(os, header);\r\n}",
    "tailType": "method_code"
  }
]