[
  {
    "head": "org.springframework.core.codec.SseLinesState#decoder",
    "headType": "field",
    "relation": "haveType",
    "tail": "StringDecoder",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.codec.SseLinesState",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.codec.SseLinesState#mimeType",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.codec.SseLinesState#mimeType",
    "headType": "field",
    "relation": "haveType",
    "tail": "MimeType",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.SimpleAliasRegistryTests#resolveAliasesWithPlaceholderReplacement()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveAliasesWithPlaceholderReplacement() {\r\n    StringValueResolver valueResolver = new StubStringValueResolver(Map.of(NAME1, NAME2, ALIAS1, ALIAS2));\r\n    registerAlias(NAME1, ALIAS1);\r\n    assertThat(registry.getAliases(NAME1)).containsExactly(ALIAS1);\r\n    registry.resolveAliases(valueResolver);\r\n    assertThat(registry.getAliases(NAME1)).isEmpty();\r\n    assertThat(registry.getAliases(NAME2)).containsExactly(ALIAS2);\r\n    registry.removeAlias(ALIAS2);\r\n    assertThat(registry.getAliases(NAME1)).isEmpty();\r\n    assertThat(registry.getAliases(NAME2)).isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.SimpleAliasRegistryTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.SimpleAliasRegistryTests#resolveAliasesWithPlaceholderReplacement()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.SimpleAliasRegistryTests#resolveAliasesWithPlaceholderReplacement()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.SimpleAliasRegistryTests#resolveAliasesWithPlaceholderReplacementConflict()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveAliasesWithPlaceholderReplacementConflict() {\r\n    StringValueResolver valueResolver = new StubStringValueResolver(Map.of(ALIAS1, ALIAS2));\r\n    registerAlias(NAME1, ALIAS1);\r\n    registerAlias(NAME2, ALIAS2);\r\n    // Original state:\r\n    // ALIAS1 -> NAME1\r\n    // ALIAS2 -> NAME2\r\n    // State after processing original entry (ALIAS1 -> NAME1):\r\n    // ALIAS2 -> NAME1 --> Conflict: entry for ALIAS2 already exists\r\n    // ALIAS2 -> NAME2\r\n    assertThatIllegalStateException().isThrownBy(() -> registry.resolveAliases(valueResolver)).withMessage(\"Cannot register resolved alias '%s' (original: '%s') for name '%s': \" + \"It is already registered for name '%s'.\", ALIAS2, ALIAS1, NAME1, NAME2);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.SimpleAliasRegistryTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.SimpleAliasRegistryTests#resolveAliasesWithPlaceholderReplacementConflict()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.SimpleAliasRegistryTests#resolveAliasesWithPlaceholderReplacementConflict()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.SseLinesState#setup()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Setup(Level.Trial)\r\npublic void setup() {\r\n    String eventTemplate = \"\"\"\r\n        id:$1\r\n        event:some-event\r\n        :some-comment-$1-aa\r\n        :some-comment-$1-bb\r\n        data:abcdefg-$1-hijklmnop-$1-qrstuvw-$1-xyz-$1\r\n        \r\n        \"\"\";\r\n    int eventLength = String.format(eventTemplate, String.format(\"%05d\", 1)).length();\r\n    int eventCount = this.totalSize / eventLength;\r\n    DataBufferFactory bufferFactory = new DefaultDataBufferFactory();\r\n    this.chunks = Flux.range(1, eventCount).map(index -> String.format(eventTemplate, String.format(\"%05d\", index))).buffer(this.chunkSize > eventLength ? this.chunkSize / eventLength : 1).map(strings -> String.join(\"\", strings)).map(chunk -> {\r\n        byte[] bytes = chunk.getBytes(CHARSET);\r\n        DataBuffer buffer = bufferFactory.allocateBuffer(bytes.length);\r\n        buffer.write(bytes);\r\n        return buffer;\r\n    }).collectList().block();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.SseLinesState",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.SseLinesState#setup()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.SseLinesState#setup()",
    "headType": "method",
    "relation": "use",
    "tail": "@Setup",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.SimpleAliasRegistryTests#resolveAliasesWithComplexPlaceholderReplacementWithAliasSwitching(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedTest\r\n@ValueSource(strings = { \"alias4\", \"test\", \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" })\r\nvoid resolveAliasesWithComplexPlaceholderReplacementWithAliasSwitching(String aliasX) {\r\n    StringValueResolver valueResolver = new StubStringValueResolver(Map.of(ALIAS3, ALIAS1, aliasX, ALIAS5, ALIAS5, ALIAS2));\r\n    // Since SimpleAliasRegistry ensures that aliases are processed in declaration\r\n    // order, we need to register ALIAS5 *before* aliasX to support our use case.\r\n    registerAlias(NAME3, ALIAS3);\r\n    registerAlias(NAME5, ALIAS5);\r\n    registerAlias(NAME4, aliasX);\r\n    // Original state:\r\n    // ALIAS3 -> NAME3\r\n    // ALIAS5 -> NAME5\r\n    // aliasX -> NAME4\r\n    // State after processing original entry (ALIAS3 -> NAME3):\r\n    // ALIAS1 -> NAME3\r\n    // ALIAS5 -> NAME5\r\n    // aliasX -> NAME4\r\n    // State after processing original entry (ALIAS5 -> NAME5):\r\n    // ALIAS1 -> NAME3\r\n    // ALIAS2 -> NAME5\r\n    // aliasX -> NAME4\r\n    // State after processing original entry (aliasX -> NAME4):\r\n    // ALIAS1 -> NAME3\r\n    // ALIAS2 -> NAME5\r\n    // ALIAS5 -> NAME4\r\n    registry.resolveAliases(valueResolver);\r\n    assertThat(registry.getAliases(NAME3)).containsExactly(ALIAS1);\r\n    assertThat(registry.getAliases(NAME4)).containsExactly(ALIAS5);\r\n    assertThat(registry.getAliases(NAME5)).containsExactly(ALIAS2);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.SimpleAliasRegistryTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.SimpleAliasRegistryTests#resolveAliasesWithComplexPlaceholderReplacementWithAliasSwitching(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.SimpleAliasRegistryTests#resolveAliasesWithComplexPlaceholderReplacementWithAliasSwitching(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.SimpleAliasRegistryTests#resolveAliasesWithComplexPlaceholderReplacementWithAliasSwitching(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@ValueSource",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.SseLinesState#parseLines()",
    "headType": "method",
    "relation": "provide",
    "tail": "public Flux<String> parseLines() {\r\n    Flux<DataBuffer> input = Flux.fromIterable(this.chunks).doOnNext(DataBufferUtils::retain);\r\n    return this.decoder.decode(input, ELEMENT_TYPE, this.mimeType, Collections.emptyMap());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.SseLinesState",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.SseLinesState#parseLines()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.SimpleAliasRegistryTests#resolveAliasesWithComplexPlaceholderReplacementWithAliasAndNameSwitching(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "// gh-32024\r\n@ParameterizedTest\r\n@ValueSource(strings = { \"alias4\", \"test\", \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" })\r\nvoid resolveAliasesWithComplexPlaceholderReplacementWithAliasAndNameSwitching(String aliasX) {\r\n    StringValueResolver valueResolver = new StubStringValueResolver(Map.of(ALIAS3, ALIAS1, aliasX, ALIAS5, ALIAS5, ALIAS2, NAME3, NAME4, NAME4, NAME3));\r\n    // Since SimpleAliasRegistry ensures that aliases are processed in declaration\r\n    // order, we need to register ALIAS5 *before* aliasX to support our use case.\r\n    registerAlias(NAME3, ALIAS3);\r\n    registerAlias(NAME5, ALIAS5);\r\n    registerAlias(NAME4, aliasX);\r\n    // Original state:\r\n    // ALIAS3 -> NAME3\r\n    // ALIAS5 -> NAME5\r\n    // aliasX -> NAME4\r\n    // State after processing original entry (ALIAS3 -> NAME3):\r\n    // ALIAS5 -> NAME5\r\n    // aliasX -> NAME4\r\n    // ALIAS1 -> NAME4\r\n    // State after processing original entry (ALIAS5 -> NAME5):\r\n    // aliasX -> NAME4\r\n    // ALIAS1 -> NAME4\r\n    // ALIAS2 -> NAME5\r\n    // State after processing original entry (aliasX -> NAME4):\r\n    // ALIAS1 -> NAME4\r\n    // ALIAS2 -> NAME5\r\n    // alias5 -> NAME3\r\n    registry.resolveAliases(valueResolver);\r\n    assertThat(registry.getAliases(NAME3)).containsExactly(ALIAS5);\r\n    assertThat(registry.getAliases(NAME4)).containsExactly(ALIAS1);\r\n    assertThat(registry.getAliases(NAME5)).containsExactly(ALIAS2);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.SimpleAliasRegistryTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.SimpleAliasRegistryTests#resolveAliasesWithComplexPlaceholderReplacementWithAliasAndNameSwitching(String)",
    "tailType": "method"
  }
]