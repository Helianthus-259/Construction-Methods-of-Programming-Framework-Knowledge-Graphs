[
  {
    "head": "org.springframework.util.IdGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.IdGenerator#generateId()",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.InstanceFilter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.InstanceFilter",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.util.Collection;\nimport java.util.Collections;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * A simple instance filter that checks if a given instance match based on\n * a collection of includes and excludes element.\n *\n * <p>Subclasses may want to override {@link #match(Object, Object)} to provide\n * a custom matching algorithm.\n *\n * @author Stephane Nicoll\n * @since 4.1\n * @param <T> the instance type\n */\npublic class InstanceFilter<T> {\n\n\tprivate final Collection<? extends T> includes;\n\n\tprivate final Collection<? extends T> excludes;\n\n\tprivate final boolean matchIfEmpty;\n\n\n\t/**\n\t * Create a new instance based on includes/excludes collections.\n\t * <p>A particular element will match if it \"matches\" the one of the element in the\n\t * includes list and  does not match one of the element in the excludes list.\n\t * <p>Subclasses may redefine what matching means. By default, an element match with\n\t * another if it is equals according to {@link Object#equals(Object)}\n\t * <p>If both collections are empty, {@code matchIfEmpty} defines if\n\t * an element matches or not.\n\t * @param includes the collection of includes\n\t * @param excludes the collection of excludes\n\t * @param matchIfEmpty the matching result if both the includes and the excludes\n\t * collections are empty\n\t */\n\tpublic InstanceFilter(@Nullable Collection<? extends T> includes,\n\t\t\t@Nullable Collection<? extends T> excludes, boolean matchIfEmpty) {\n\n\t\tthis.includes = (includes != null ? includes : Collections.emptyList());\n\t\tthis.excludes = (excludes != null ? excludes : Collections.emptyList());\n\t\tthis.matchIfEmpty = matchIfEmpty;\n\t}\n\n\n\t/**\n\t * Determine if the specified {@code instance} matches this filter.\n\t */\n\tpublic boolean match(T instance) {\n\t\tAssert.notNull(instance, \"Instance to match must not be null\");\n\n\t\tboolean includesSet = !this.includes.isEmpty();\n\t\tboolean excludesSet = !this.excludes.isEmpty();\n\t\tif (!includesSet && !excludesSet) {\n\t\t\treturn this.matchIfEmpty;\n\t\t}\n\n\t\tboolean matchIncludes = match(instance, this.includes);\n\t\tboolean matchExcludes = match(instance, this.excludes);\n\t\tif (!includesSet) {\n\t\t\treturn !matchExcludes;\n\t\t}\n\t\tif (!excludesSet) {\n\t\t\treturn matchIncludes;\n\t\t}\n\t\treturn matchIncludes && !matchExcludes;\n\t}\n\n\t/**\n\t * Determine if the specified {@code instance} is equal to the\n\t * specified {@code candidate}.\n\t * @param instance the instance to handle\n\t * @param candidate a candidate defined by this filter\n\t * @return {@code true} if the instance matches the candidate\n\t */\n\tprotected boolean match(T instance, T candidate) {\n\t\treturn instance.equals(candidate);\n\t}\n\n\t/**\n\t * Determine if the specified {@code instance} matches one of the candidates.\n\t * <p>If the candidates collection is {@code null}, returns {@code false}.\n\t * @param instance the instance to check\n\t * @param candidates a list of candidates\n\t * @return {@code true} if the instance match or the candidates collection is null\n\t */\n\tprotected boolean match(T instance, Collection<? extends T> candidates) {\n\t\tfor (T candidate : candidates) {\n\t\t\tif (match(instance, candidate)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\tStringBuilder sb = new StringBuilder(getClass().getSimpleName());\n\t\tsb.append(\": includes=\").append(this.includes);\n\t\tsb.append(\", excludes=\").append(this.excludes);\n\t\tsb.append(\", matchIfEmpty=\").append(this.matchIfEmpty);\n\t\treturn sb.toString();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.InstanceFilter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.InstanceFilter#includes",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.InstanceFilter#includes",
    "headType": "field",
    "relation": "haveType",
    "tail": "Collection<? extends T>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.InstanceFilter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.InstanceFilter#excludes",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.InstanceFilter#excludes",
    "headType": "field",
    "relation": "haveType",
    "tail": "Collection<? extends T>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.InstanceFilter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.InstanceFilter#matchIfEmpty",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.InstanceFilter#matchIfEmpty",
    "headType": "field",
    "relation": "haveType",
    "tail": "boolean",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.InstanceFilter#match(T)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine if the specified {@code instance} matches this filter.\r\n */\r\npublic boolean match(T instance) {\r\n    Assert.notNull(instance, \"Instance to match must not be null\");\r\n    boolean includesSet = !this.includes.isEmpty();\r\n    boolean excludesSet = !this.excludes.isEmpty();\r\n    if (!includesSet && !excludesSet) {\r\n        return this.matchIfEmpty;\r\n    }\r\n    boolean matchIncludes = match(instance, this.includes);\r\n    boolean matchExcludes = match(instance, this.excludes);\r\n    if (!includesSet) {\r\n        return !matchExcludes;\r\n    }\r\n    if (!excludesSet) {\r\n        return matchIncludes;\r\n    }\r\n    return matchIncludes && !matchExcludes;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.InstanceFilter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.InstanceFilter#match(T)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.InstanceFilter#match(T,T)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine if the specified {@code instance} is equal to the\r\n * specified {@code candidate}.\r\n * @param instance the instance to handle\r\n * @param candidate a candidate defined by this filter\r\n * @return {@code true} if the instance matches the candidate\r\n */\r\nprotected boolean match(T instance, T candidate) {\r\n    return instance.equals(candidate);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.InstanceFilter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.InstanceFilter#match(T,T)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.InstanceFilter#match(T,Collection<? extends T>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine if the specified {@code instance} matches one of the candidates.\r\n * <p>If the candidates collection is {@code null}, returns {@code false}.\r\n * @param instance the instance to check\r\n * @param candidates a list of candidates\r\n * @return {@code true} if the instance match or the candidates collection is null\r\n */\r\nprotected boolean match(T instance, Collection<? extends T> candidates) {\r\n    for (T candidate : candidates) {\r\n        if (match(instance, candidate)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.InstanceFilter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.InstanceFilter#match(T,Collection<? extends T>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.InstanceFilter#toString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String toString() {\r\n    StringBuilder sb = new StringBuilder(getClass().getSimpleName());\r\n    sb.append(\": includes=\").append(this.includes);\r\n    sb.append(\", excludes=\").append(this.excludes);\r\n    sb.append(\", matchIfEmpty=\").append(this.matchIfEmpty);\r\n    return sb.toString();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.InstanceFilter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.InstanceFilter#toString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.InstanceFilter#toString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  }
]