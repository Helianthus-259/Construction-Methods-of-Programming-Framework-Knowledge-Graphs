[
  {
    "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#wrap(byte[])",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#join(List<? extends DataBuffer>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic DataBuffer join(List<? extends DataBuffer> dataBuffers) {\r\n    // Remove LeakAwareDataBuffer wrapper so delegate can find native buffers\r\n    dataBuffers = dataBuffers.stream().map(o -> o instanceof LeakAwareDataBuffer ? ((LeakAwareDataBuffer) o).dataBuffer() : o).toList();\r\n    return new LeakAwareDataBuffer(this.delegate.join(dataBuffers), this);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#join(List<? extends DataBuffer>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#join(List<? extends DataBuffer>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#isDirect()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean isDirect() {\r\n    return this.delegate.isDirect();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#isDirect()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#isDirect()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.testfixture.io",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.testfixture.io",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.testfixture.io.ResourceTestUtils",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.testfixture.io.ResourceTestUtils",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.testfixture.io;\n\nimport org.springframework.core.io.ClassPathResource;\n\n/**\n * Convenience utilities for common operations with test resources.\n *\n * @author Chris Beams\n */\npublic abstract class ResourceTestUtils {\n\n\t/**\n\t * Load a {@link ClassPathResource} qualified by the simple name of clazz,\n\t * and relative to the package for clazz.\n\t * <p>Example: given a clazz 'com.foo.BarTests' and a resourceSuffix of 'context.xml',\n\t * this method will return a ClassPathResource representing com/foo/BarTests-context.xml\n\t * <p>Intended for use loading context configuration XML files within JUnit tests.\n\t */\n\tpublic static ClassPathResource qualifiedResource(Class<?> clazz, String resourceSuffix) {\n\t\treturn new ClassPathResource(String.format(\"%s-%s\", clazz.getSimpleName(), resourceSuffix), clazz);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.testfixture.io.ResourceTestUtils#qualifiedResource(Class<?>,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Load a {@link ClassPathResource} qualified by the simple name of clazz,\r\n * and relative to the package for clazz.\r\n * <p>Example: given a clazz 'com.foo.BarTests' and a resourceSuffix of 'context.xml',\r\n * this method will return a ClassPathResource representing com/foo/BarTests-context.xml\r\n * <p>Intended for use loading context configuration XML files within JUnit tests.\r\n */\r\npublic static ClassPathResource qualifiedResource(Class<?> clazz, String resourceSuffix) {\r\n    return new ClassPathResource(String.format(\"%s-%s\", clazz.getSimpleName(), resourceSuffix), clazz);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.io.ResourceTestUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.io.ResourceTestUtils#qualifiedResource(Class<?>,String)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.testfixture.io",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.testfixture.io",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.testfixture.io.SerializationTestUtils",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.testfixture.io.SerializationTestUtils",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2020 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.testfixture.io;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.NotSerializableException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.OutputStream;\n\n/**\n * Utilities for testing serializability of objects.\n *\n * <p>Exposes static methods for use in other test cases.\n *\n * @author Rod Johnson\n * @author Sam Brannen\n */\npublic class SerializationTestUtils {\n\n\tpublic static void testSerialization(Object o) throws IOException {\n\t\tOutputStream baos = new ByteArrayOutputStream();\n\t\ttry (ObjectOutputStream oos = new ObjectOutputStream(baos)) {\n\t\t\toos.writeObject(o);\n\t\t}\n\t}\n\n\tpublic static boolean isSerializable(Object o) throws IOException {\n\t\ttry {\n\t\t\ttestSerialization(o);\n\t\t\treturn true;\n\t\t}\n\t\tcatch (NotSerializableException ex) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic static <T> T serializeAndDeserialize(T o) throws IOException, ClassNotFoundException {\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\ttry (ObjectOutputStream oos = new ObjectOutputStream(baos)) {\n\t\t\toos.writeObject(o);\n\t\t\toos.flush();\n\t\t}\n\t\tbyte[] bytes = baos.toByteArray();\n\n\t\tByteArrayInputStream is = new ByteArrayInputStream(bytes);\n\t\ttry (ObjectInputStream ois = new ObjectInputStream(is)) {\n\t\t\treturn (T) ois.readObject();\n\t\t}\n\t}\n\n\tpublic static <T> T serializeAndDeserialize(Object o, Class<T> expectedType) throws IOException, ClassNotFoundException {\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\ttry (ObjectOutputStream oos = new ObjectOutputStream(baos)) {\n\t\t\toos.writeObject(o);\n\t\t\toos.flush();\n\t\t}\n\t\tbyte[] bytes = baos.toByteArray();\n\n\t\tByteArrayInputStream is = new ByteArrayInputStream(bytes);\n\t\ttry (ObjectInputStream ois = new ObjectInputStream(is)) {\n\t\t\treturn expectedType.cast(ois.readObject());\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.testfixture.io.SerializationTestUtils#testSerialization(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static void testSerialization(Object o) throws IOException {\r\n    OutputStream baos = new ByteArrayOutputStream();\r\n    try (ObjectOutputStream oos = new ObjectOutputStream(baos)) {\r\n        oos.writeObject(o);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.io.SerializationTestUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.io.SerializationTestUtils#testSerialization(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.io.SerializationTestUtils#isSerializable(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static boolean isSerializable(Object o) throws IOException {\r\n    try {\r\n        testSerialization(o);\r\n        return true;\r\n    } catch (NotSerializableException ex) {\r\n        return false;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.io.SerializationTestUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.io.SerializationTestUtils#isSerializable(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.io.SerializationTestUtils#serializeAndDeserialize(T)",
    "headType": "method",
    "relation": "provide",
    "tail": "@SuppressWarnings(\"unchecked\")\r\npublic static <T> T serializeAndDeserialize(T o) throws IOException, ClassNotFoundException {\r\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n    try (ObjectOutputStream oos = new ObjectOutputStream(baos)) {\r\n        oos.writeObject(o);\r\n        oos.flush();\r\n    }\r\n    byte[] bytes = baos.toByteArray();\r\n    ByteArrayInputStream is = new ByteArrayInputStream(bytes);\r\n    try (ObjectInputStream ois = new ObjectInputStream(is)) {\r\n        return (T) ois.readObject();\r\n    }\r\n}",
    "tailType": "method_code"
  }
]