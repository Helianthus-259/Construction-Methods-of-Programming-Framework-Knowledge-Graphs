[
  {
    "head": "org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.type.filter;\n\nimport java.io.IOException;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.type.ClassMetadata;\nimport org.springframework.core.type.classreading.MetadataReader;\nimport org.springframework.core.type.classreading.MetadataReaderFactory;\n\n/**\n * Type filter that is aware of traversing over hierarchy.\n *\n * <p>This filter is useful when matching needs to be made based on potentially the\n * whole class/interface hierarchy. The algorithm employed uses a succeed-fast\n * strategy: if at any time a match is declared, no further processing is\n * carried out.\n *\n * @author Ramnivas Laddad\n * @author Mark Fisher\n * @since 2.5\n */\npublic abstract class AbstractTypeHierarchyTraversingFilter implements TypeFilter {\n\n\tprotected final Log logger = LogFactory.getLog(getClass());\n\n\tprivate final boolean considerInherited;\n\n\tprivate final boolean considerInterfaces;\n\n\n\tprotected AbstractTypeHierarchyTraversingFilter(boolean considerInherited, boolean considerInterfaces) {\n\t\tthis.considerInherited = considerInherited;\n\t\tthis.considerInterfaces = considerInterfaces;\n\t}\n\n\n\t@Override\n\tpublic boolean match(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory)\n\t\t\tthrows IOException {\n\n\t\t// This method optimizes avoiding unnecessary creation of ClassReaders\n\t\t// as well as visiting over those readers.\n\t\tif (matchSelf(metadataReader)) {\n\t\t\treturn true;\n\t\t}\n\t\tClassMetadata metadata = metadataReader.getClassMetadata();\n\t\tif (matchClassName(metadata.getClassName())) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (this.considerInherited) {\n\t\t\tString superClassName = metadata.getSuperClassName();\n\t\t\tif (superClassName != null) {\n\t\t\t\t// Optimization to avoid creating ClassReader for superclass.\n\t\t\t\tBoolean superClassMatch = matchSuperClass(superClassName);\n\t\t\t\tif (superClassMatch != null) {\n\t\t\t\t\tif (superClassMatch) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// Need to read superclass to determine a match...\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (match(superClassName, metadataReaderFactory)) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (IOException ex) {\n\t\t\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\t\t\tlogger.debug(\"Could not read superclass [\" + superClassName +\n\t\t\t\t\t\t\t\t\t\"] of type-filtered class [\" + metadata.getClassName() + \"]\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this.considerInterfaces) {\n\t\t\tfor (String ifc : metadata.getInterfaceNames()) {\n\t\t\t\t// Optimization to avoid creating ClassReader for superclass\n\t\t\t\tBoolean interfaceMatch = matchInterface(ifc);\n\t\t\t\tif (interfaceMatch != null) {\n\t\t\t\t\tif (interfaceMatch) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// Need to read interface to determine a match...\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (match(ifc, metadataReaderFactory)) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (IOException ex) {\n\t\t\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\t\t\tlogger.debug(\"Could not read interface [\" + ifc + \"] for type-filtered class [\" +\n\t\t\t\t\t\t\t\t\tmetadata.getClassName() + \"]\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tprivate boolean match(String className, MetadataReaderFactory metadataReaderFactory) throws IOException {\n\t\treturn match(metadataReaderFactory.getMetadataReader(className), metadataReaderFactory);\n\t}\n\n\t/**\n\t * Override this to match self characteristics alone. Typically,\n\t * the implementation will use a visitor to extract information\n\t * to perform matching.\n\t */\n\tprotected boolean matchSelf(MetadataReader metadataReader) {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Override this to match on type name.\n\t */\n\tprotected boolean matchClassName(String className) {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Override this to match on supertype name.\n\t */\n\tprotected @Nullable Boolean matchSuperClass(String superClassName) {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Override this to match on interface type name.\n\t */\n\tprotected @Nullable Boolean matchInterface(String interfaceName) {\n\t\treturn null;\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter#logger",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter#logger",
    "headType": "field",
    "relation": "haveType",
    "tail": "Log",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter#considerInherited",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter#considerInherited",
    "headType": "field",
    "relation": "haveType",
    "tail": "boolean",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter#considerInterfaces",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter#considerInterfaces",
    "headType": "field",
    "relation": "haveType",
    "tail": "boolean",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter#match(MetadataReader,MetadataReaderFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean match(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory) throws IOException {\r\n    // This method optimizes avoiding unnecessary creation of ClassReaders\r\n    // as well as visiting over those readers.\r\n    if (matchSelf(metadataReader)) {\r\n        return true;\r\n    }\r\n    ClassMetadata metadata = metadataReader.getClassMetadata();\r\n    if (matchClassName(metadata.getClassName())) {\r\n        return true;\r\n    }\r\n    if (this.considerInherited) {\r\n        String superClassName = metadata.getSuperClassName();\r\n        if (superClassName != null) {\r\n            // Optimization to avoid creating ClassReader for superclass.\r\n            Boolean superClassMatch = matchSuperClass(superClassName);\r\n            if (superClassMatch != null) {\r\n                if (superClassMatch) {\r\n                    return true;\r\n                }\r\n            } else {\r\n                // Need to read superclass to determine a match...\r\n                try {\r\n                    if (match(superClassName, metadataReaderFactory)) {\r\n                        return true;\r\n                    }\r\n                } catch (IOException ex) {\r\n                    if (logger.isDebugEnabled()) {\r\n                        logger.debug(\"Could not read superclass [\" + superClassName + \"] of type-filtered class [\" + metadata.getClassName() + \"]\");\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (this.considerInterfaces) {\r\n        for (String ifc : metadata.getInterfaceNames()) {\r\n            // Optimization to avoid creating ClassReader for superclass\r\n            Boolean interfaceMatch = matchInterface(ifc);\r\n            if (interfaceMatch != null) {\r\n                if (interfaceMatch) {\r\n                    return true;\r\n                }\r\n            } else {\r\n                // Need to read interface to determine a match...\r\n                try {\r\n                    if (match(ifc, metadataReaderFactory)) {\r\n                        return true;\r\n                    }\r\n                } catch (IOException ex) {\r\n                    if (logger.isDebugEnabled()) {\r\n                        logger.debug(\"Could not read interface [\" + ifc + \"] for type-filtered class [\" + metadata.getClassName() + \"]\");\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter#match(MetadataReader,MetadataReaderFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter#match(MetadataReader,MetadataReaderFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter#match(String,MetadataReaderFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "private boolean match(String className, MetadataReaderFactory metadataReaderFactory) throws IOException {\r\n    return match(metadataReaderFactory.getMetadataReader(className), metadataReaderFactory);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter#match(String,MetadataReaderFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter#matchSelf(MetadataReader)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Override this to match self characteristics alone. Typically,\r\n * the implementation will use a visitor to extract information\r\n * to perform matching.\r\n */\r\nprotected boolean matchSelf(MetadataReader metadataReader) {\r\n    return false;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter#matchSelf(MetadataReader)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter#matchClassName(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Override this to match on type name.\r\n */\r\nprotected boolean matchClassName(String className) {\r\n    return false;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter#matchClassName(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter#matchSuperClass(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Override this to match on supertype name.\r\n */\r\n@Nullable\r\nprotected Boolean matchSuperClass(String superClassName) {\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter#matchSuperClass(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter#matchSuperClass(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter#matchInterface(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Override this to match on interface type name.\r\n */\r\n@Nullable\r\nprotected Boolean matchInterface(String interfaceName) {\r\n    return null;\r\n}",
    "tailType": "method_code"
  }
]