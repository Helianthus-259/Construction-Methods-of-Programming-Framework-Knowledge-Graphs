[
  {
    "head": "org.springframework.util.ReflectionUtilsTests#rejectsNullSrc()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid rejectsNullSrc() {\r\n    TestObject src = null;\r\n    String dest = new String();\r\n    assertThatIllegalArgumentException().isThrownBy(() -> ReflectionUtils.shallowCopyFieldState(src, dest));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ReflectionUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ReflectionUtilsTests#rejectsNullSrc()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ReflectionUtilsTests#rejectsNullSrc()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ReflectionUtilsTests#rejectsNullDest()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid rejectsNullDest() {\r\n    TestObject src = new TestObject();\r\n    String dest = null;\r\n    assertThatIllegalArgumentException().isThrownBy(() -> ReflectionUtils.shallowCopyFieldState(src, dest));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ReflectionUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ReflectionUtilsTests#rejectsNullDest()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ReflectionUtilsTests#rejectsNullDest()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ReflectionUtilsTests#validCopy()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid validCopy() {\r\n    TestObject src = new TestObject();\r\n    TestObject dest = new TestObject();\r\n    testValidCopy(src, dest);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ReflectionUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ReflectionUtilsTests#validCopy()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ReflectionUtilsTests#validCopy()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ReflectionUtilsTests#validCopyOnSubTypeWithNewField()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid validCopyOnSubTypeWithNewField() {\r\n    TestObjectSubclassWithNewField src = new TestObjectSubclassWithNewField();\r\n    TestObjectSubclassWithNewField dest = new TestObjectSubclassWithNewField();\r\n    src.magic = 11;\r\n    // Will check inherited fields are copied\r\n    testValidCopy(src, dest);\r\n    // Check subclass fields were copied\r\n    assertThat(dest.magic).isEqualTo(src.magic);\r\n    assertThat(dest.prot).isEqualTo(src.prot);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ReflectionUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ReflectionUtilsTests#validCopyOnSubTypeWithNewField()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ReflectionUtilsTests#validCopyOnSubTypeWithNewField()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ReflectionUtilsTests#validCopyToSubType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid validCopyToSubType() {\r\n    TestObject src = new TestObject();\r\n    TestObjectSubclassWithNewField dest = new TestObjectSubclassWithNewField();\r\n    dest.magic = 11;\r\n    testValidCopy(src, dest);\r\n    // Should have left this one alone\r\n    assertThat(dest.magic).isEqualTo(11);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ReflectionUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ReflectionUtilsTests#validCopyToSubType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ReflectionUtilsTests#validCopyToSubType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ReflectionUtilsTests#validCopyToSubTypeWithFinalField()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid validCopyToSubTypeWithFinalField() {\r\n    TestObjectSubclassWithFinalField src = new TestObjectSubclassWithFinalField();\r\n    TestObjectSubclassWithFinalField dest = new TestObjectSubclassWithFinalField();\r\n    // Check that this doesn't fail due to attempt to assign final\r\n    testValidCopy(src, dest);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ReflectionUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ReflectionUtilsTests#validCopyToSubTypeWithFinalField()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ReflectionUtilsTests#validCopyToSubTypeWithFinalField()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ReflectionUtilsTests#testValidCopy(TestObject,TestObject)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void testValidCopy(TestObject src, TestObject dest) {\r\n    src.setName(\"freddie\");\r\n    src.setAge(15);\r\n    src.setSpouse(new TestObject());\r\n    assertThat(src.getAge()).isNotEqualTo(dest.getAge());\r\n    ReflectionUtils.shallowCopyFieldState(src, dest);\r\n    assertThat(dest.getAge()).isEqualTo(src.getAge());\r\n    assertThat(dest.getSpouse()).isEqualTo(src.getSpouse());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ReflectionUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ReflectionUtilsTests#testValidCopy(TestObject,TestObject)",
    "tailType": "method"
  }
]