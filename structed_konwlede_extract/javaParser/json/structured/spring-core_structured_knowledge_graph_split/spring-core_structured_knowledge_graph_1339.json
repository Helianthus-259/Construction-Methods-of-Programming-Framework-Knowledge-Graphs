[
  {
    "head": "org.springframework.util.MimeType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeType#readObject(ObjectInputStream)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MimeType#valueOf(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Parse the given String value into a {@code MimeType} object,\r\n * with this method name following the 'valueOf' naming convention\r\n * (as supported by {@link org.springframework.core.convert.ConversionService}).\r\n * @see MimeTypeUtils#parseMimeType(String)\r\n */\r\npublic static MimeType valueOf(String value) {\r\n    return MimeTypeUtils.parseMimeType(value);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeType#valueOf(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MimeType#addCharsetParameter(Charset,Map<String,String>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static Map<String, String> addCharsetParameter(Charset charset, Map<String, String> parameters) {\r\n    Map<String, String> map = new LinkedHashMap<>(parameters);\r\n    map.put(PARAM_CHARSET, charset.name());\r\n    return map;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeType#addCharsetParameter(Charset,Map<String,String>)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.MimeTypeUtils",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.MimeTypeUtils",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.nio.charset.StandardCharsets;\nimport java.nio.charset.UnsupportedCharsetException;\nimport java.security.SecureRandom;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Random;\nimport java.util.function.BiPredicate;\nimport java.util.stream.Collectors;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * Miscellaneous {@link MimeType} utility methods.\n *\n * @author Arjen Poutsma\n * @author Rossen Stoyanchev\n * @author Dimitrios Liapis\n * @author Brian Clozel\n * @author Sam Brannen\n * @since 4.0\n */\npublic abstract class MimeTypeUtils {\n\n\tprivate static final byte[] BOUNDARY_CHARS =\n\t\t\tnew byte[] {'-', '_', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', 'a', 'b', 'c', 'd', 'e', 'f', 'g',\n\t\t\t\t\t'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A',\n\t\t\t\t\t'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U',\n\t\t\t\t\t'V', 'W', 'X', 'Y', 'Z'};\n\n\t/**\n\t * Public constant mime type that includes all media ranges (i.e. \"&#42;/&#42;\").\n\t */\n\tpublic static final MimeType ALL;\n\n\t/**\n\t * A String equivalent of {@link MimeTypeUtils#ALL}.\n\t */\n\tpublic static final String ALL_VALUE = \"*/*\";\n\n\t/**\n\t * Public constant mime type for {@code application/graphql+json}.\n\t * @since 5.3.19\n\t * @see <a href=\"https://github.com/graphql/graphql-over-http\">GraphQL over HTTP spec</a>\n\t */\n\tpublic static final MimeType APPLICATION_GRAPHQL;\n\n\t/**\n\t * A String equivalent of {@link MimeTypeUtils#APPLICATION_GRAPHQL}.\n\t * @since 5.3.19\n\t */\n\tpublic static final String APPLICATION_GRAPHQL_VALUE = \"application/graphql+json\";\n\n\t/**\n\t * Public constant mime type for {@code application/json}.\n\t */\n\tpublic static final MimeType APPLICATION_JSON;\n\n\t/**\n\t * A String equivalent of {@link MimeTypeUtils#APPLICATION_JSON}.\n\t */\n\tpublic static final String APPLICATION_JSON_VALUE = \"application/json\";\n\n\t/**\n\t * Public constant mime type for {@code application/octet-stream}.\n\t *  */\n\tpublic static final MimeType APPLICATION_OCTET_STREAM;\n\n\t/**\n\t * A String equivalent of {@link MimeTypeUtils#APPLICATION_OCTET_STREAM}.\n\t */\n\tpublic static final String APPLICATION_OCTET_STREAM_VALUE = \"application/octet-stream\";\n\n\t/**\n\t * Public constant mime type for {@code application/xml}.\n\t */\n\tpublic static final MimeType APPLICATION_XML;\n\n\t/**\n\t * A String equivalent of {@link MimeTypeUtils#APPLICATION_XML}.\n\t */\n\tpublic static final String APPLICATION_XML_VALUE = \"application/xml\";\n\n\t/**\n\t * Public constant mime type for {@code image/gif}.\n\t */\n\tpublic static final MimeType IMAGE_GIF;\n\n\t/**\n\t * A String equivalent of {@link MimeTypeUtils#IMAGE_GIF}.\n\t */\n\tpublic static final String IMAGE_GIF_VALUE = \"image/gif\";\n\n\t/**\n\t * Public constant mime type for {@code image/jpeg}.\n\t */\n\tpublic static final MimeType IMAGE_JPEG;\n\n\t/**\n\t * A String equivalent of {@link MimeTypeUtils#IMAGE_JPEG}.\n\t */\n\tpublic static final String IMAGE_JPEG_VALUE = \"image/jpeg\";\n\n\t/**\n\t * Public constant mime type for {@code image/png}.\n\t */\n\tpublic static final MimeType IMAGE_PNG;\n\n\t/**\n\t * A String equivalent of {@link MimeTypeUtils#IMAGE_PNG}.\n\t */\n\tpublic static final String IMAGE_PNG_VALUE = \"image/png\";\n\n\t/**\n\t * Public constant mime type for {@code text/html}.\n\t *  */\n\tpublic static final MimeType TEXT_HTML;\n\n\t/**\n\t * A String equivalent of {@link MimeTypeUtils#TEXT_HTML}.\n\t */\n\tpublic static final String TEXT_HTML_VALUE = \"text/html\";\n\n\t/**\n\t * Public constant mime type for {@code text/plain}.\n\t *  */\n\tpublic static final MimeType TEXT_PLAIN;\n\n\t/**\n\t * A String equivalent of {@link MimeTypeUtils#TEXT_PLAIN}.\n\t */\n\tpublic static final String TEXT_PLAIN_VALUE = \"text/plain\";\n\n\t/**\n\t * Public constant mime type for {@code text/xml}.\n\t *  */\n\tpublic static final MimeType TEXT_XML;\n\n\t/**\n\t * A String equivalent of {@link MimeTypeUtils#TEXT_XML}.\n\t */\n\tpublic static final String TEXT_XML_VALUE = \"text/xml\";\n\n\n\tprivate static final ConcurrentLruCache<String, MimeType> cachedMimeTypes =\n\t\t\tnew ConcurrentLruCache<>(64, MimeTypeUtils::parseMimeTypeInternal);\n\n\tprivate static volatile @Nullable Random random;\n\n\tstatic {\n\t\t// Not using \"parseMimeType\" to avoid static init cost\n\t\tALL = new MimeType(MimeType.WILDCARD_TYPE, MimeType.WILDCARD_TYPE);\n\t\tAPPLICATION_GRAPHQL = new MimeType(\"application\", \"graphql+json\");\n\t\tAPPLICATION_JSON = new MimeType(\"application\", \"json\");\n\t\tAPPLICATION_OCTET_STREAM = new MimeType(\"application\", \"octet-stream\");\n\t\tAPPLICATION_XML = new MimeType(\"application\", \"xml\");\n\t\tIMAGE_GIF = new MimeType(\"image\", \"gif\");\n\t\tIMAGE_JPEG = new MimeType(\"image\", \"jpeg\");\n\t\tIMAGE_PNG = new MimeType(\"image\", \"png\");\n\t\tTEXT_HTML = new MimeType(\"text\", \"html\");\n\t\tTEXT_PLAIN = new MimeType(\"text\", \"plain\");\n\t\tTEXT_XML = new MimeType(\"text\", \"xml\");\n\t}\n\n\n\t/**\n\t * Parse the given String into a single {@code MimeType}.\n\t * Recently parsed {@code MimeType} are cached for further retrieval.\n\t * @param mimeType the string to parse\n\t * @return the mime type\n\t * @throws InvalidMimeTypeException if the string cannot be parsed\n\t */\n\tpublic static MimeType parseMimeType(String mimeType) {\n\t\tif (!StringUtils.hasLength(mimeType)) {\n\t\t\tthrow new InvalidMimeTypeException(mimeType, \"'mimeType' must not be empty\");\n\t\t}\n\t\t// do not cache multipart mime types with random boundaries\n\t\tif (mimeType.startsWith(\"multipart\")) {\n\t\t\treturn parseMimeTypeInternal(mimeType);\n\t\t}\n\t\treturn cachedMimeTypes.get(mimeType);\n\t}\n\n\tprivate static MimeType parseMimeTypeInternal(String mimeType) {\n\t\tint index = mimeType.indexOf(';');\n\t\tString fullType = (index >= 0 ? mimeType.substring(0, index) : mimeType).trim();\n\t\tif (fullType.isEmpty()) {\n\t\t\tthrow new InvalidMimeTypeException(mimeType, \"'mimeType' must not be empty\");\n\t\t}\n\n\t\t// java.net.HttpURLConnection returns a *; q=.2 Accept header\n\t\tif (MimeType.WILDCARD_TYPE.equals(fullType)) {\n\t\t\tfullType = \"*/*\";\n\t\t}\n\t\tint subIndex = fullType.indexOf('/');\n\t\tif (subIndex == -1) {\n\t\t\tthrow new InvalidMimeTypeException(mimeType, \"does not contain '/'\");\n\t\t}\n\t\tif (subIndex == fullType.length() - 1) {\n\t\t\tthrow new InvalidMimeTypeException(mimeType, \"does not contain subtype after '/'\");\n\t\t}\n\t\tString type = fullType.substring(0, subIndex);\n\t\tString subtype = fullType.substring(subIndex + 1);\n\t\tif (MimeType.WILDCARD_TYPE.equals(type) && !MimeType.WILDCARD_TYPE.equals(subtype)) {\n\t\t\tthrow new InvalidMimeTypeException(mimeType, \"wildcard type is legal only in '*/*' (all mime types)\");\n\t\t}\n\n\t\tMap<String, String> parameters = null;\n\t\tdo {\n\t\t\tint nextIndex = index + 1;\n\t\t\tboolean quoted = false;\n\t\t\twhile (nextIndex < mimeType.length()) {\n\t\t\t\tchar ch = mimeType.charAt(nextIndex);\n\t\t\t\tif (ch == ';') {\n\t\t\t\t\tif (!quoted) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (ch == '\"') {\n\t\t\t\t\tquoted = !quoted;\n\t\t\t\t}\n\t\t\t\tnextIndex++;\n\t\t\t}\n\t\t\tString parameter = mimeType.substring(index + 1, nextIndex).trim();\n\t\t\tif (parameter.length() > 0) {\n\t\t\t\tif (parameters == null) {\n\t\t\t\t\tparameters = new LinkedHashMap<>(4);\n\t\t\t\t}\n\t\t\t\tint eqIndex = parameter.indexOf('=');\n\t\t\t\tif (eqIndex >= 0) {\n\t\t\t\t\tString attribute = parameter.substring(0, eqIndex).trim();\n\t\t\t\t\tString value = parameter.substring(eqIndex + 1).trim();\n\t\t\t\t\tparameters.put(attribute, value);\n\t\t\t\t}\n\t\t\t}\n\t\t\tindex = nextIndex;\n\t\t}\n\t\twhile (index < mimeType.length());\n\n\t\ttry {\n\t\t\treturn new MimeType(type, subtype, parameters);\n\t\t}\n\t\tcatch (UnsupportedCharsetException ex) {\n\t\t\tthrow new InvalidMimeTypeException(mimeType, \"unsupported charset '\" + ex.getCharsetName() + \"'\");\n\t\t}\n\t\tcatch (IllegalArgumentException ex) {\n\t\t\tthrow new InvalidMimeTypeException(mimeType, ex.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * Parse the comma-separated string into a mutable list of {@code MimeType} objects.\n\t * @param mimeTypes the string to parse\n\t * @return the list of mime types\n\t * @throws InvalidMimeTypeException if the string cannot be parsed\n\t */\n\tpublic static List<MimeType> parseMimeTypes(String mimeTypes) {\n\t\tif (!StringUtils.hasLength(mimeTypes)) {\n\t\t\treturn Collections.emptyList();\n\t\t}\n\t\treturn tokenize(mimeTypes).stream()\n\t\t\t\t.filter(StringUtils::hasText)\n\t\t\t\t.map(MimeTypeUtils::parseMimeType)\n\t\t\t\t.collect(Collectors.toList());\n\t}\n\n\t/**\n\t * Tokenize the given comma-separated string of {@code MimeType} objects\n\t * into a {@code List<String>}. Unlike simple tokenization by \",\", this\n\t * method takes into account quoted parameters.\n\t * @param mimeTypes the string to tokenize\n\t * @return the list of tokens\n\t * @since 5.1.3\n\t */\n\tpublic static List<String> tokenize(String mimeTypes) {\n\t\tif (!StringUtils.hasLength(mimeTypes)) {\n\t\t\treturn Collections.emptyList();\n\t\t}\n\t\tList<String> tokens = new ArrayList<>();\n\t\tboolean inQuotes = false;\n\t\tint startIndex = 0;\n\t\tint i = 0;\n\t\twhile (i < mimeTypes.length()) {\n\t\t\tswitch (mimeTypes.charAt(i)) {\n\t\t\t\tcase '\"' -> inQuotes = !inQuotes;\n\t\t\t\tcase ',' -> {\n\t\t\t\t\tif (!inQuotes) {\n\t\t\t\t\t\ttokens.add(mimeTypes.substring(startIndex, i));\n\t\t\t\t\t\tstartIndex = i + 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcase '\\\\' -> i++;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\ttokens.add(mimeTypes.substring(startIndex));\n\t\treturn tokens;\n\t}\n\n\t/**\n\t * Generate a string representation of the given collection of {@link MimeType}\n\t * objects.\n\t * @param mimeTypes the {@code MimeType} objects\n\t * @return a string representation of the {@code MimeType} objects\n\t */\n\tpublic static String toString(Collection<? extends MimeType> mimeTypes) {\n\t\tStringBuilder builder = new StringBuilder();\n\t\tfor (Iterator<? extends MimeType> iterator = mimeTypes.iterator(); iterator.hasNext();) {\n\t\t\tMimeType mimeType = iterator.next();\n\t\t\tmimeType.appendTo(builder);\n\t\t\tif (iterator.hasNext()) {\n\t\t\t\tbuilder.append(\", \");\n\t\t\t}\n\t\t}\n\t\treturn builder.toString();\n\t}\n\n\t/**\n\t * Sort the given list of {@code MimeType} objects by\n\t * {@linkplain MimeType#isMoreSpecific(MimeType) specificity}.\n\t * <p>Because of the computational cost, this method throws an exception if\n\t * the given list contains too many elements.\n\t * @param mimeTypes the list of mime types to be sorted\n\t * @throws InvalidMimeTypeException if {@code mimeTypes} contains more than 50 elements\n\t * @see <a href=\"https://tools.ietf.org/html/rfc7231#section-5.3.2\">HTTP 1.1: Semantics\n\t * and Content, section 5.3.2</a>\n\t * @see MimeType#isMoreSpecific(MimeType)\n\t */\n\tpublic static <T extends MimeType> void sortBySpecificity(List<T> mimeTypes) {\n\t\tAssert.notNull(mimeTypes, \"'mimeTypes' must not be null\");\n\t\tif (mimeTypes.size() > 50) {\n\t\t\tthrow new InvalidMimeTypeException(mimeTypes.toString(), \"Too many elements\");\n\t\t}\n\n\t\tbubbleSort(mimeTypes, MimeType::isLessSpecific);\n\t}\n\n\tstatic <T> void bubbleSort(List<T> list, BiPredicate<? super T, ? super T> swap) {\n\t\tint len = list.size();\n\t\tfor (int i = 0; i < len; i++) {\n\t\t\tfor (int j = 1; j < len - i ; j++) {\n\t\t\t\tT prev = list.get(j - 1);\n\t\t\t\tT cur = list.get(j);\n\t\t\t\tif (swap.test(prev, cur)) {\n\t\t\t\t\tlist.set(j, prev);\n\t\t\t\t\tlist.set(j - 1, cur);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/**\n\t * Generate a random MIME boundary as bytes, often used in multipart mime types.\n\t */\n\tpublic static byte[] generateMultipartBoundary() {\n\t\tRandom randomToUse = initRandom();\n\t\tbyte[] boundary = new byte[randomToUse.nextInt(11) + 30];\n\t\tfor (int i = 0; i < boundary.length; i++) {\n\t\t\tboundary[i] = BOUNDARY_CHARS[randomToUse.nextInt(BOUNDARY_CHARS.length)];\n\t\t}\n\t\treturn boundary;\n\t}\n\n\t/**\n\t * Lazily initialize the {@link SecureRandom} for {@link #generateMultipartBoundary()}.\n\t */\n\tprivate static Random initRandom() {\n\t\tRandom randomToUse = random;\n\t\tif (randomToUse == null) {\n\t\t\tsynchronized (MimeTypeUtils.class) {\n\t\t\t\trandomToUse = random;\n\t\t\t\tif (randomToUse == null) {\n\t\t\t\t\trandomToUse = new SecureRandom();\n\t\t\t\t\trandom = randomToUse;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn randomToUse;\n\t}\n\n\n\t/**\n\t * Generate a random MIME boundary as String, often used in multipart mime types.\n\t */\n\tpublic static String generateMultipartBoundaryString() {\n\t\treturn new String(generateMultipartBoundary(), StandardCharsets.US_ASCII);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.MimeTypeUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.MimeTypeUtils#BOUNDARY_CHARS",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.MimeTypeUtils#BOUNDARY_CHARS",
    "headType": "field",
    "relation": "haveType",
    "tail": "byte",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.MimeTypeUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.MimeTypeUtils#ALL",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.MimeTypeUtils#ALL",
    "headType": "field",
    "relation": "haveType",
    "tail": "MimeType",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.MimeTypeUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.MimeTypeUtils#ALL_VALUE",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.MimeTypeUtils#ALL_VALUE",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.MimeTypeUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.MimeTypeUtils#APPLICATION_GRAPHQL",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.MimeTypeUtils#APPLICATION_GRAPHQL",
    "headType": "field",
    "relation": "haveType",
    "tail": "MimeType",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.MimeTypeUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.MimeTypeUtils#APPLICATION_GRAPHQL_VALUE",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.MimeTypeUtils#APPLICATION_GRAPHQL_VALUE",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.MimeTypeUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.MimeTypeUtils#APPLICATION_JSON",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.MimeTypeUtils#APPLICATION_JSON",
    "headType": "field",
    "relation": "haveType",
    "tail": "MimeType",
    "tailType": "type"
  }
]