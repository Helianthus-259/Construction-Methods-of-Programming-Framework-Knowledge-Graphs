[
  {
    "head": "org.springframework.tests",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.tests.MockitoUtils",
    "tailType": "class"
  },
  {
    "head": "org.springframework.tests.MockitoUtils",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.tests;\n\nimport java.util.List;\n\nimport org.mockito.Mockito;\nimport org.mockito.internal.stubbing.InvocationContainerImpl;\nimport org.mockito.internal.util.MockUtil;\nimport org.mockito.invocation.Invocation;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * General test utilities for use with {@link Mockito}.\n *\n * @author Phillip Webb\n */\npublic abstract class MockitoUtils {\n\n\t/**\n\t * Verify the same invocations have been applied to two mocks. This is generally not\n\t * the preferred way test with mockito and should be avoided if possible.\n\t * @param expected the mock containing expected invocations\n\t * @param actual the mock containing actual invocations\n\t * @param argumentAdapters adapters that can be used to change argument values before they are compared\n\t */\n\tpublic static <T> void verifySameInvocations(T expected, T actual, InvocationArgumentsAdapter... argumentAdapters) {\n\t\tList<Invocation> expectedInvocations =\n\t\t\t\t((InvocationContainerImpl) MockUtil.getMockHandler(expected).getInvocationContainer()).getInvocations();\n\t\tList<Invocation> actualInvocations =\n\t\t\t\t((InvocationContainerImpl) MockUtil.getMockHandler(actual).getInvocationContainer()).getInvocations();\n\t\tverifySameInvocations(expectedInvocations, actualInvocations, argumentAdapters);\n\t}\n\n\tprivate static void verifySameInvocations(List<Invocation> expectedInvocations, List<Invocation> actualInvocations,\n\t\t\tInvocationArgumentsAdapter... argumentAdapters) {\n\n\t\tassertThat(expectedInvocations).hasSameSizeAs(actualInvocations);\n\t\tfor (int i = 0; i < expectedInvocations.size(); i++) {\n\t\t\tverifySameInvocation(expectedInvocations.get(i), actualInvocations.get(i), argumentAdapters);\n\t\t}\n\t}\n\n\tprivate static void verifySameInvocation(Invocation expectedInvocation, Invocation actualInvocation,\n\t\t\tInvocationArgumentsAdapter... argumentAdapters) {\n\n\t\tassertThat(expectedInvocation.getMethod()).isEqualTo(actualInvocation.getMethod());\n\t\tObject[] expectedArguments = getInvocationArguments(expectedInvocation, argumentAdapters);\n\t\tObject[] actualArguments = getInvocationArguments(actualInvocation, argumentAdapters);\n\t\tassertThat(expectedArguments).isEqualTo(actualArguments);\n\t}\n\n\tprivate static Object[] getInvocationArguments(Invocation invocation, InvocationArgumentsAdapter... argumentAdapters) {\n\t\tObject[] arguments = invocation.getArguments();\n\t\tfor (InvocationArgumentsAdapter adapter : argumentAdapters) {\n\t\t\targuments = adapter.adaptArguments(arguments);\n\t\t}\n\t\treturn arguments;\n\t}\n\n\n\t/**\n\t * Adapter strategy that can be used to change invocation arguments.\n\t */\n\tpublic interface InvocationArgumentsAdapter {\n\n\t\t/**\n\t\t * Change the arguments if required.\n\t\t * @param arguments the source arguments\n\t\t * @return updated or original arguments (never {@code null})\n\t\t */\n\t\tObject[] adaptArguments(Object[] arguments);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.tests.MockitoUtils#verifySameInvocations(T,T,InvocationArgumentsAdapter)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Verify the same invocations have been applied to two mocks. This is generally not\r\n * the preferred way test with mockito and should be avoided if possible.\r\n * @param expected the mock containing expected invocations\r\n * @param actual the mock containing actual invocations\r\n * @param argumentAdapters adapters that can be used to change argument values before they are compared\r\n */\r\npublic static <T> void verifySameInvocations(T expected, T actual, InvocationArgumentsAdapter... argumentAdapters) {\r\n    List<Invocation> expectedInvocations = ((InvocationContainerImpl) MockUtil.getMockHandler(expected).getInvocationContainer()).getInvocations();\r\n    List<Invocation> actualInvocations = ((InvocationContainerImpl) MockUtil.getMockHandler(actual).getInvocationContainer()).getInvocations();\r\n    verifySameInvocations(expectedInvocations, actualInvocations, argumentAdapters);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.tests.MockitoUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.tests.MockitoUtils#verifySameInvocations(T,T,InvocationArgumentsAdapter)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.tests.MockitoUtils#verifySameInvocations(List<Invocation>,List<Invocation>,InvocationArgumentsAdapter)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static void verifySameInvocations(List<Invocation> expectedInvocations, List<Invocation> actualInvocations, InvocationArgumentsAdapter... argumentAdapters) {\r\n    assertThat(expectedInvocations).hasSameSizeAs(actualInvocations);\r\n    for (int i = 0; i < expectedInvocations.size(); i++) {\r\n        verifySameInvocation(expectedInvocations.get(i), actualInvocations.get(i), argumentAdapters);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.tests.MockitoUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.tests.MockitoUtils#verifySameInvocations(List<Invocation>,List<Invocation>,InvocationArgumentsAdapter)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.tests.MockitoUtils#verifySameInvocation(Invocation,Invocation,InvocationArgumentsAdapter)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static void verifySameInvocation(Invocation expectedInvocation, Invocation actualInvocation, InvocationArgumentsAdapter... argumentAdapters) {\r\n    assertThat(expectedInvocation.getMethod()).isEqualTo(actualInvocation.getMethod());\r\n    Object[] expectedArguments = getInvocationArguments(expectedInvocation, argumentAdapters);\r\n    Object[] actualArguments = getInvocationArguments(actualInvocation, argumentAdapters);\r\n    assertThat(expectedArguments).isEqualTo(actualArguments);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.tests.MockitoUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.tests.MockitoUtils#verifySameInvocation(Invocation,Invocation,InvocationArgumentsAdapter)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.tests.MockitoUtils#getInvocationArguments(Invocation,InvocationArgumentsAdapter)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static Object[] getInvocationArguments(Invocation invocation, InvocationArgumentsAdapter... argumentAdapters) {\r\n    Object[] arguments = invocation.getArguments();\r\n    for (InvocationArgumentsAdapter adapter : argumentAdapters) {\r\n        arguments = adapter.adaptArguments(arguments);\r\n    }\r\n    return arguments;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.tests.MockitoUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.tests.MockitoUtils#getInvocationArguments(Invocation,InvocationArgumentsAdapter)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.tests",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.tests.InvocationArgumentsAdapter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.tests.InvocationArgumentsAdapter",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.tests;\n\nimport java.util.List;\n\nimport org.mockito.Mockito;\nimport org.mockito.internal.stubbing.InvocationContainerImpl;\nimport org.mockito.internal.util.MockUtil;\nimport org.mockito.invocation.Invocation;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * General test utilities for use with {@link Mockito}.\n *\n * @author Phillip Webb\n */\npublic abstract class MockitoUtils {\n\n\t/**\n\t * Verify the same invocations have been applied to two mocks. This is generally not\n\t * the preferred way test with mockito and should be avoided if possible.\n\t * @param expected the mock containing expected invocations\n\t * @param actual the mock containing actual invocations\n\t * @param argumentAdapters adapters that can be used to change argument values before they are compared\n\t */\n\tpublic static <T> void verifySameInvocations(T expected, T actual, InvocationArgumentsAdapter... argumentAdapters) {\n\t\tList<Invocation> expectedInvocations =\n\t\t\t\t((InvocationContainerImpl) MockUtil.getMockHandler(expected).getInvocationContainer()).getInvocations();\n\t\tList<Invocation> actualInvocations =\n\t\t\t\t((InvocationContainerImpl) MockUtil.getMockHandler(actual).getInvocationContainer()).getInvocations();\n\t\tverifySameInvocations(expectedInvocations, actualInvocations, argumentAdapters);\n\t}\n\n\tprivate static void verifySameInvocations(List<Invocation> expectedInvocations, List<Invocation> actualInvocations,\n\t\t\tInvocationArgumentsAdapter... argumentAdapters) {\n\n\t\tassertThat(expectedInvocations).hasSameSizeAs(actualInvocations);\n\t\tfor (int i = 0; i < expectedInvocations.size(); i++) {\n\t\t\tverifySameInvocation(expectedInvocations.get(i), actualInvocations.get(i), argumentAdapters);\n\t\t}\n\t}\n\n\tprivate static void verifySameInvocation(Invocation expectedInvocation, Invocation actualInvocation,\n\t\t\tInvocationArgumentsAdapter... argumentAdapters) {\n\n\t\tassertThat(expectedInvocation.getMethod()).isEqualTo(actualInvocation.getMethod());\n\t\tObject[] expectedArguments = getInvocationArguments(expectedInvocation, argumentAdapters);\n\t\tObject[] actualArguments = getInvocationArguments(actualInvocation, argumentAdapters);\n\t\tassertThat(expectedArguments).isEqualTo(actualArguments);\n\t}\n\n\tprivate static Object[] getInvocationArguments(Invocation invocation, InvocationArgumentsAdapter... argumentAdapters) {\n\t\tObject[] arguments = invocation.getArguments();\n\t\tfor (InvocationArgumentsAdapter adapter : argumentAdapters) {\n\t\t\targuments = adapter.adaptArguments(arguments);\n\t\t}\n\t\treturn arguments;\n\t}\n\n\n\t/**\n\t * Adapter strategy that can be used to change invocation arguments.\n\t */\n\tpublic interface InvocationArgumentsAdapter {\n\n\t\t/**\n\t\t * Change the arguments if required.\n\t\t * @param arguments the source arguments\n\t\t * @return updated or original arguments (never {@code null})\n\t\t */\n\t\tObject[] adaptArguments(Object[] arguments);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.tests.InvocationArgumentsAdapter#adaptArguments(Object[])",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Change the arguments if required.\r\n * @param arguments the source arguments\r\n * @return updated or original arguments (never {@code null})\r\n */\r\nObject[] adaptArguments(Object[] arguments);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.tests.InvocationArgumentsAdapter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.tests.InvocationArgumentsAdapter#adaptArguments(Object[])",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.hint.annotation",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.hint.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrar",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrar",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint.annotation;\n\nimport java.lang.reflect.AnnotatedElement;\nimport java.lang.reflect.Constructor;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.concurrent.atomic.AtomicBoolean;\nimport java.util.function.Consumer;\n\nimport org.springframework.aot.hint.ReflectionHints;\nimport org.springframework.aot.hint.RuntimeHints;\nimport org.springframework.core.annotation.MergedAnnotations;\nimport org.springframework.util.ClassUtils;\nimport org.springframework.util.ReflectionUtils;\n\nimport static org.springframework.core.annotation.MergedAnnotations.SearchStrategy.TYPE_HIERARCHY;\n\n/**\n * Process {@link Reflective @Reflective} annotated elements.\n *\n * @author Stephane Nicoll\n * @author Andy Wilkinson\n * @since 6.0\n */\npublic class ReflectiveRuntimeHintsRegistrar {\n\n\tprivate final Map<Class<? extends ReflectiveProcessor>, ReflectiveProcessor> processors = new HashMap<>();\n\n\n\t/**\n\t * Register the relevant runtime hints for elements that are annotated with\n\t * {@link Reflective}.\n\t * @param runtimeHints the runtime hints instance to use\n\t * @param types the types to process\n\t */\n\tpublic void registerRuntimeHints(RuntimeHints runtimeHints, Class<?>... types) {\n\t\tSet<Entry> entries = new HashSet<>();\n\t\tfor (Class<?> type : types) {\n\t\t\tprocessType(entries, type);\n\t\t\tfor (Class<?> implementedInterface : ClassUtils.getAllInterfacesForClass(type)) {\n\t\t\t\tprocessType(entries, implementedInterface);\n\t\t\t}\n\t\t}\n\t\tentries.forEach(entry -> {\n\t\t\tAnnotatedElement element = entry.element();\n\t\t\tentry.processor().registerReflectionHints(runtimeHints.reflection(), element);\n\t\t});\n\t}\n\n\t/**\n\t * Specify if the given {@code type} is a valid candidate.\n\t * @param type the type to inspect\n\t * @return {@code true} if the type uses {@link Reflective} in a way that\n\t * is supported by this registrar\n\t * @since 6.2\n\t */\n\tpublic boolean isCandidate(Class<?> type) {\n\t\tif (isReflective(type)) {\n\t\t\treturn true;\n\t\t}\n\t\tAtomicBoolean candidate = new AtomicBoolean(false);\n\t\tdoWithReflectiveConstructors(type, constructor -> candidate.set(true));\n\t\tif (!candidate.get()) {\n\t\t\tReflectionUtils.doWithFields(type, field -> candidate.set(true), this::isReflective);\n\t\t}\n\t\tif (!candidate.get()) {\n\t\t\tReflectionUtils.doWithMethods(type, method -> candidate.set(true), this::isReflective);\n\t\t}\n\t\treturn candidate.get();\n\t}\n\n\tprivate void processType(Set<Entry> entries, Class<?> typeToProcess) {\n\t\tif (isReflective(typeToProcess)) {\n\t\t\tentries.add(createEntry(typeToProcess));\n\t\t}\n\t\tdoWithReflectiveConstructors(typeToProcess, constructor ->\n\t\t\t\tentries.add(createEntry(constructor)));\n\t\tReflectionUtils.doWithFields(typeToProcess, field ->\n\t\t\t\tentries.add(createEntry(field)), this::isReflective);\n\t\tReflectionUtils.doWithMethods(typeToProcess, method ->\n\t\t\t\tentries.add(createEntry(method)), this::isReflective);\n\t}\n\n\tprivate void doWithReflectiveConstructors(Class<?> typeToProcess, Consumer<Constructor<?>> consumer) {\n\t\tfor (Constructor<?> constructor : typeToProcess.getDeclaredConstructors()) {\n\t\t\tif (isReflective(constructor)) {\n\t\t\t\tconsumer.accept(constructor);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate boolean isReflective(AnnotatedElement element) {\n\t\treturn MergedAnnotations.from(element, TYPE_HIERARCHY).isPresent(Reflective.class);\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tprivate Entry createEntry(AnnotatedElement element) {\n\t\tList<ReflectiveProcessor> processors = MergedAnnotations.from(element, TYPE_HIERARCHY)\n\t\t\t\t.stream(Reflective.class)\n\t\t\t\t.map(annotation -> annotation.getClassArray(\"value\"))\n\t\t\t\t.flatMap(Arrays::stream)\n\t\t\t\t.distinct()\n\t\t\t\t.map(type -> (Class<? extends ReflectiveProcessor>) type)\n\t\t\t\t.map(processorClass -> this.processors.computeIfAbsent(processorClass, this::instantiateClass))\n\t\t\t\t.toList();\n\t\tReflectiveProcessor processorToUse = (processors.size() == 1 ? processors.get(0) :\n\t\t\t\tnew DelegatingReflectiveProcessor(processors));\n\t\treturn new Entry(element, processorToUse);\n\t}\n\n\tprivate ReflectiveProcessor instantiateClass(Class<? extends ReflectiveProcessor> type) {\n\t\ttry {\n\t\t\tConstructor<? extends ReflectiveProcessor> constructor = type.getDeclaredConstructor();\n\t\t\tReflectionUtils.makeAccessible(constructor);\n\t\t\treturn constructor.newInstance();\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tthrow new IllegalStateException(\"Failed to instantiate \" + type, ex);\n\t\t}\n\t}\n\n\tprivate static class DelegatingReflectiveProcessor implements ReflectiveProcessor {\n\n\t\tprivate final Iterable<ReflectiveProcessor> processors;\n\n\t\tDelegatingReflectiveProcessor(Iterable<ReflectiveProcessor> processors) {\n\t\t\tthis.processors = processors;\n\t\t}\n\n\t\t@Override\n\t\tpublic void registerReflectionHints(ReflectionHints hints, AnnotatedElement element) {\n\t\t\tthis.processors.forEach(processor -> processor.registerReflectionHints(hints, element));\n\t\t}\n\n\t}\n\n\tprivate record Entry(AnnotatedElement element, ReflectiveProcessor processor) {}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrar",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrar#processors",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrar#processors",
    "headType": "field",
    "relation": "haveType",
    "tail": "Map<Class<? extends ReflectiveProcessor>, ReflectiveProcessor>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.hint.annotation.ReflectiveRuntimeHintsRegistrar#registerRuntimeHints(RuntimeHints,Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Register the relevant runtime hints for elements that are annotated with\r\n * {@link Reflective}.\r\n * @param runtimeHints the runtime hints instance to use\r\n * @param types the types to process\r\n */\r\npublic void registerRuntimeHints(RuntimeHints runtimeHints, Class<?>... types) {\r\n    Set<Entry> entries = new HashSet<>();\r\n    for (Class<?> type : types) {\r\n        processType(entries, type);\r\n        for (Class<?> implementedInterface : ClassUtils.getAllInterfacesForClass(type)) {\r\n            processType(entries, implementedInterface);\r\n        }\r\n    }\r\n    entries.forEach(entry -> {\r\n        AnnotatedElement element = entry.element();\r\n        entry.processor().registerReflectionHints(runtimeHints.reflection(), element);\r\n    });\r\n}",
    "tailType": "method_code"
  }
]