[
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotations",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.annotation.TypeMappedAnnotations#searchEnclosingClass",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotations#searchEnclosingClass",
    "headType": "field",
    "relation": "haveType",
    "tail": "Predicate<Class<?>>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotations",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.annotation.TypeMappedAnnotations#annotations",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotations#annotations",
    "headType": "field",
    "relation": "haveType",
    "tail": "Annotation",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotations",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.annotation.TypeMappedAnnotations#repeatableContainers",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotations#repeatableContainers",
    "headType": "field",
    "relation": "haveType",
    "tail": "RepeatableContainers",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotations",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.annotation.TypeMappedAnnotations#annotationFilter",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotations#annotationFilter",
    "headType": "field",
    "relation": "haveType",
    "tail": "AnnotationFilter",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotations",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.annotation.TypeMappedAnnotations#aggregates",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotations#aggregates",
    "headType": "field",
    "relation": "haveType",
    "tail": "List<Aggregate>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotations#isPresent(Class<A>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic <A extends Annotation> boolean isPresent(Class<A> annotationType) {\r\n    if (this.annotationFilter.matches(annotationType)) {\r\n        return false;\r\n    }\r\n    return Boolean.TRUE.equals(scan(annotationType, IsPresent.get(this.repeatableContainers, this.annotationFilter, false)));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotations",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.TypeMappedAnnotations#isPresent(Class<A>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotations#isPresent(Class<A>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotations#isPresent(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean isPresent(String annotationType) {\r\n    if (this.annotationFilter.matches(annotationType)) {\r\n        return false;\r\n    }\r\n    return Boolean.TRUE.equals(scan(annotationType, IsPresent.get(this.repeatableContainers, this.annotationFilter, false)));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotations",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.TypeMappedAnnotations#isPresent(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotations#isPresent(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotations#isDirectlyPresent(Class<A>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic <A extends Annotation> boolean isDirectlyPresent(Class<A> annotationType) {\r\n    if (this.annotationFilter.matches(annotationType)) {\r\n        return false;\r\n    }\r\n    return Boolean.TRUE.equals(scan(annotationType, IsPresent.get(this.repeatableContainers, this.annotationFilter, true)));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotations",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.TypeMappedAnnotations#isDirectlyPresent(Class<A>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotations#isDirectlyPresent(Class<A>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotations#isDirectlyPresent(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean isDirectlyPresent(String annotationType) {\r\n    if (this.annotationFilter.matches(annotationType)) {\r\n        return false;\r\n    }\r\n    return Boolean.TRUE.equals(scan(annotationType, IsPresent.get(this.repeatableContainers, this.annotationFilter, true)));\r\n}",
    "tailType": "method_code"
  }
]