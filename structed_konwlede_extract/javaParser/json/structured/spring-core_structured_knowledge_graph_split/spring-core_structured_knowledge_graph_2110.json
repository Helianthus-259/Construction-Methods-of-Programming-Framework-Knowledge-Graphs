[
  {
    "head": "org.springframework.core.ResolvableTypeTests#classWithGenericsAs()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid classWithGenericsAs() {\r\n    ResolvableType type = ResolvableType.forClassWithGenerics(MultiValueMap.class, Integer.class, String.class);\r\n    assertThat(type.asMap().toString()).isEqualTo(\"java.util.Map<java.lang.Integer, java.util.List<java.lang.String>>\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#classWithGenericsAs()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#classWithGenericsAs()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#forClassWithMismatchedGenerics()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid forClassWithMismatchedGenerics() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> ResolvableType.forClassWithGenerics(Map.class, Integer.class)).withMessageContaining(\"Mismatched number of generics specified for\").withMessageContaining(\"java.util.Map<K,V>\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#forClassWithMismatchedGenerics()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#forClassWithMismatchedGenerics()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#forArrayComponent()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid forArrayComponent() throws Exception {\r\n    ResolvableType elementType = ResolvableType.forField(Fields.class.getField(\"stringList\"));\r\n    ResolvableType type = ResolvableType.forArrayComponent(elementType);\r\n    assertThat(type.toString()).isEqualTo(\"java.util.List<java.lang.String>[]\");\r\n    assertThat(type.resolve()).isEqualTo(List[].class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#forArrayComponent()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#forArrayComponent()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#serialize()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid serialize() throws Exception {\r\n    testSerialization(ResolvableType.forClass(List.class));\r\n    testSerialization(ResolvableType.forField(Fields.class.getField(\"charSequenceList\")));\r\n    testSerialization(ResolvableType.forMethodParameter(Methods.class.getMethod(\"charSequenceParameter\", List.class), 0));\r\n    testSerialization(ResolvableType.forMethodReturnType(Methods.class.getMethod(\"charSequenceReturn\")));\r\n    testSerialization(ResolvableType.forConstructorParameter(Constructors.class.getConstructor(List.class), 0));\r\n    testSerialization(ResolvableType.forField(Fields.class.getField(\"charSequenceList\")).getGeneric());\r\n    ResolvableType deserializedNone = testSerialization(ResolvableType.NONE);\r\n    assertThat(deserializedNone).isSameAs(ResolvableType.NONE);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#serialize()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#serialize()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#canResolveVoid()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid canResolveVoid() {\r\n    ResolvableType type = ResolvableType.forClass(void.class);\r\n    assertThat(type.resolve()).isEqualTo(void.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#canResolveVoid()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#canResolveVoid()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#narrow()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid narrow() throws Exception {\r\n    ResolvableType type = ResolvableType.forField(Fields.class.getField(\"stringList\"));\r\n    ResolvableType narrow = ResolvableType.forType(ArrayList.class, type);\r\n    assertThat(narrow.getGeneric().resolve()).isEqualTo(String.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#narrow()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#narrow()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#hasResolvableGenerics()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid hasResolvableGenerics() throws Exception {\r\n    ResolvableType type = ResolvableType.forField(Fields.class.getField(\"stringList\"));\r\n    assertThat(type.hasResolvableGenerics()).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#hasResolvableGenerics()",
    "tailType": "method"
  }
]