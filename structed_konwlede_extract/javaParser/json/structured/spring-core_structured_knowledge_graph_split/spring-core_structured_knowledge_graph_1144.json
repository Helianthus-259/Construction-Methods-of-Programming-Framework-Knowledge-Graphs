[
  {
    "head": "org.springframework.core.ResolvableType#forMethodReturnType(Method)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a {@code ResolvableType} for the specified {@link Method} return type.\r\n * @param method the source for the method return type\r\n * @return a {@code ResolvableType} for the specified method return\r\n * @see #forMethodReturnType(Method, Class)\r\n */\r\npublic static ResolvableType forMethodReturnType(Method method) {\r\n    Assert.notNull(method, \"Method must not be null\");\r\n    return forMethodParameter(new MethodParameter(method, -1));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableType#forMethodReturnType(Method)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableType#forMethodReturnType(Method,Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a {@code ResolvableType} for the specified {@link Method} return type.\r\n * <p>Use this variant when the class that declares the method includes generic\r\n * parameter variables that are satisfied by the implementation class.\r\n * @param method the source for the method return type\r\n * @param implementationClass the implementation class\r\n * @return a {@code ResolvableType} for the specified method return\r\n * @see #forMethodReturnType(Method)\r\n */\r\npublic static ResolvableType forMethodReturnType(Method method, Class<?> implementationClass) {\r\n    Assert.notNull(method, \"Method must not be null\");\r\n    MethodParameter methodParameter = new MethodParameter(method, -1, implementationClass);\r\n    return forMethodParameter(methodParameter);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableType#forMethodReturnType(Method,Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableType#forMethodParameter(Method,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a {@code ResolvableType} for the specified {@link Method} parameter.\r\n * @param method the source method (must not be {@code null})\r\n * @param parameterIndex the parameter index\r\n * @return a {@code ResolvableType} for the specified method parameter\r\n * @see #forMethodParameter(Method, int, Class)\r\n * @see #forMethodParameter(MethodParameter)\r\n */\r\npublic static ResolvableType forMethodParameter(Method method, int parameterIndex) {\r\n    Assert.notNull(method, \"Method must not be null\");\r\n    return forMethodParameter(new MethodParameter(method, parameterIndex));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableType#forMethodParameter(Method,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableType#forMethodParameter(Method,int,Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a {@code ResolvableType} for the specified {@link Method} parameter with a\r\n * given implementation. Use this variant when the class that declares the method\r\n * includes generic parameter variables that are satisfied by the implementation class.\r\n * @param method the source method (must not be {@code null})\r\n * @param parameterIndex the parameter index\r\n * @param implementationClass the implementation class\r\n * @return a {@code ResolvableType} for the specified method parameter\r\n * @see #forMethodParameter(Method, int, Class)\r\n * @see #forMethodParameter(MethodParameter)\r\n */\r\npublic static ResolvableType forMethodParameter(Method method, int parameterIndex, Class<?> implementationClass) {\r\n    Assert.notNull(method, \"Method must not be null\");\r\n    MethodParameter methodParameter = new MethodParameter(method, parameterIndex, implementationClass);\r\n    return forMethodParameter(methodParameter);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableType#forMethodParameter(Method,int,Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableType#forMethodParameter(MethodParameter)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a {@code ResolvableType} for the specified {@link MethodParameter}.\r\n * @param methodParameter the source method parameter (must not be {@code null})\r\n * @return a {@code ResolvableType} for the specified method parameter\r\n * @see #forMethodParameter(Method, int)\r\n */\r\npublic static ResolvableType forMethodParameter(MethodParameter methodParameter) {\r\n    return forMethodParameter(methodParameter, (Type) null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableType#forMethodParameter(MethodParameter)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableType#forMethodParameter(MethodParameter,ResolvableType)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a {@code ResolvableType} for the specified {@link MethodParameter} with a\r\n * given implementation type. Use this variant when the class that declares the method\r\n * includes generic parameter variables that are satisfied by the implementation type.\r\n * @param methodParameter the source method parameter (must not be {@code null})\r\n * @param implementationType the implementation type\r\n * @return a {@code ResolvableType} for the specified method parameter\r\n * @see #forMethodParameter(MethodParameter)\r\n */\r\npublic static ResolvableType forMethodParameter(MethodParameter methodParameter, @Nullable ResolvableType implementationType) {\r\n    Assert.notNull(methodParameter, \"MethodParameter must not be null\");\r\n    implementationType = (implementationType != null ? implementationType : forType(methodParameter.getContainingClass()));\r\n    ResolvableType owner = implementationType.as(methodParameter.getDeclaringClass());\r\n    return forType(null, new MethodParameterTypeProvider(methodParameter), owner.asVariableResolver()).getNested(methodParameter.getNestingLevel(), methodParameter.typeIndexesPerLevel);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableType#forMethodParameter(MethodParameter,ResolvableType)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableType#forMethodParameter(MethodParameter,Type)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a {@code ResolvableType} for the specified {@link MethodParameter},\r\n * overriding the target type to resolve with a specific given type.\r\n * @param methodParameter the source method parameter (must not be {@code null})\r\n * @param targetType the type to resolve (a part of the method parameter's type)\r\n * @return a {@code ResolvableType} for the specified method parameter\r\n * @see #forMethodParameter(Method, int)\r\n */\r\npublic static ResolvableType forMethodParameter(MethodParameter methodParameter, @Nullable Type targetType) {\r\n    Assert.notNull(methodParameter, \"MethodParameter must not be null\");\r\n    return forMethodParameter(methodParameter, targetType, methodParameter.getNestingLevel());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableType#forMethodParameter(MethodParameter,Type)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableType#forMethodParameter(MethodParameter,Type,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a {@code ResolvableType} for the specified {@link MethodParameter} at\r\n * a specific nesting level, overriding the target type to resolve with a specific\r\n * given type.\r\n * @param methodParameter the source method parameter (must not be {@code null})\r\n * @param targetType the type to resolve (a part of the method parameter's type)\r\n * @param nestingLevel the nesting level to use\r\n * @return a {@code ResolvableType} for the specified method parameter\r\n * @since 5.2\r\n * @see #forMethodParameter(Method, int)\r\n */\r\nstatic ResolvableType forMethodParameter(MethodParameter methodParameter, @Nullable Type targetType, int nestingLevel) {\r\n    ResolvableType owner = forType(methodParameter.getContainingClass()).as(methodParameter.getDeclaringClass());\r\n    return forType(targetType, new MethodParameterTypeProvider(methodParameter), owner.asVariableResolver()).getNested(nestingLevel, methodParameter.typeIndexesPerLevel);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableType#forMethodParameter(MethodParameter,Type,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableType#forArrayComponent(ResolvableType)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a {@code ResolvableType} as an array of the specified {@code componentType}.\r\n * @param componentType the component type\r\n * @return a {@code ResolvableType} as an array of the specified component type\r\n */\r\npublic static ResolvableType forArrayComponent(ResolvableType componentType) {\r\n    Assert.notNull(componentType, \"Component type must not be null\");\r\n    Class<?> arrayType = componentType.toClass().arrayType();\r\n    return new ResolvableType(arrayType, componentType, null, null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableType#forArrayComponent(ResolvableType)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableType#forVariableBounds(TypeVariable<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a {@code ResolvableType} for the bounds of the specified {@link TypeVariable}.\r\n * @param typeVariable the type variable\r\n * @return a {@code ResolvableType} for the specified bounds\r\n * @since 6.2.3\r\n */\r\nstatic ResolvableType forVariableBounds(TypeVariable<?> typeVariable) {\r\n    return forType(resolveBounds(typeVariable.getBounds()));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableType#forVariableBounds(TypeVariable<?>)",
    "tailType": "method"
  }
]