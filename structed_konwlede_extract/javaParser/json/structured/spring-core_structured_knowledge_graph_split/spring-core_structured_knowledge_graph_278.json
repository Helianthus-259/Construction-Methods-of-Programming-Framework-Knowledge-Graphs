[
  {
    "head": "org.springframework.util.ObjectUtilsTests#toObjectArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid toObjectArray() {\r\n    int[] a = new int[] { 1, 2, 3, 4, 5 };\r\n    Integer[] wrapper = (Integer[]) ObjectUtils.toObjectArray(a);\r\n    assertThat(wrapper).hasSize(5);\r\n    for (int i = 0; i < wrapper.length; i++) {\r\n        assertThat(wrapper[i]).isEqualTo(a[i]);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ObjectUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ObjectUtilsTests#toObjectArray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ObjectUtilsTests#toObjectArray()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ObjectUtilsTests#toObjectArrayWithNull()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid toObjectArrayWithNull() {\r\n    Object[] objects = ObjectUtils.toObjectArray(null);\r\n    assertThat(objects).isNotNull();\r\n    assertThat(objects).isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ObjectUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ObjectUtilsTests#toObjectArrayWithNull()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ObjectUtilsTests#toObjectArrayWithNull()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ObjectUtilsTests#toObjectArrayWithEmptyPrimitiveArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid toObjectArrayWithEmptyPrimitiveArray() {\r\n    Object[] objects = ObjectUtils.toObjectArray(new byte[] ;);\r\n    assertThat(objects).isNotNull();\r\n    assertThat(objects).isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ObjectUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ObjectUtilsTests#toObjectArrayWithEmptyPrimitiveArray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ObjectUtilsTests#toObjectArrayWithEmptyPrimitiveArray()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ObjectUtilsTests#toObjectArrayWithNonArrayType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid toObjectArrayWithNonArrayType() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> ObjectUtils.toObjectArray(\"Not an []\")).withMessageStartingWith(\"Source is not an array\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ObjectUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ObjectUtilsTests#toObjectArrayWithNonArrayType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ObjectUtilsTests#toObjectArrayWithNonArrayType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ObjectUtilsTests#toObjectArrayWithNonPrimitiveArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid toObjectArrayWithNonPrimitiveArray() {\r\n    String[] source = { \"Bingo\" };\r\n    assertThat(ObjectUtils.toObjectArray(source)).isSameAs(source);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ObjectUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ObjectUtilsTests#toObjectArrayWithNonPrimitiveArray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ObjectUtilsTests#toObjectArrayWithNonPrimitiveArray()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ObjectUtilsTests#addObjectToArraySunnyDay()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid addObjectToArraySunnyDay() {\r\n    String[] array = { \"foo\", \"bar\" };\r\n    String newElement = \"baz\";\r\n    Object[] newArray = ObjectUtils.addObjectToArray(array, newElement);\r\n    assertThat(newArray).hasSize(3);\r\n    assertThat(newArray[2]).isEqualTo(newElement);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ObjectUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ObjectUtilsTests#addObjectToArraySunnyDay()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ObjectUtilsTests#addObjectToArraySunnyDay()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ObjectUtilsTests#addObjectToArraysAtPosition()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid addObjectToArraysAtPosition() {\r\n    String[] array = { \"foo\", \"bar\", \"baz\" };\r\n    assertThat(ObjectUtils.addObjectToArray(array, \"bat\", 3)).containsExactly(\"foo\", \"bar\", \"baz\", \"bat\");\r\n    assertThat(ObjectUtils.addObjectToArray(array, \"bat\", 2)).containsExactly(\"foo\", \"bar\", \"bat\", \"baz\");\r\n    assertThat(ObjectUtils.addObjectToArray(array, \"bat\", 1)).containsExactly(\"foo\", \"bat\", \"bar\", \"baz\");\r\n    assertThat(ObjectUtils.addObjectToArray(array, \"bat\", 0)).containsExactly(\"bat\", \"foo\", \"bar\", \"baz\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ObjectUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ObjectUtilsTests#addObjectToArraysAtPosition()",
    "tailType": "method"
  }
]