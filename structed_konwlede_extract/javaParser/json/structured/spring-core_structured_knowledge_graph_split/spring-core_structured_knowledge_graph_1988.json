[
  {
    "head": "org.springframework.core.GenericTypeResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.GenericTypeResolverTests#getGenericsOnArrayFromReturnCannotBeResolved()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.GenericTypeResolverTests#getGenericsOnArrayFromReturnCannotBeResolved()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.GenericTypeResolverTests#resolveIncompleteTypeVariables()",
    "headType": "method",
    "relation": "provide",
    "tail": "// SPR-11763\r\n@Test\r\nvoid resolveIncompleteTypeVariables() {\r\n    Class<?>[] resolved = GenericTypeResolver.resolveTypeArguments(IdFixingRepository.class, Repository.class);\r\n    assertThat(resolved).isNotNull();\r\n    assertThat(resolved).hasSize(2);\r\n    assertThat(resolved[0]).isEqualTo(Object.class);\r\n    assertThat(resolved[1]).isEqualTo(Long.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.GenericTypeResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.GenericTypeResolverTests#resolveIncompleteTypeVariables()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.GenericTypeResolverTests#resolveIncompleteTypeVariables()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.GenericTypeResolverTests#resolvePartiallySpecializedTypeVariables()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolvePartiallySpecializedTypeVariables() {\r\n    Type resolved = resolveType(BiGenericClass.class.getTypeParameters()[0], TypeFixedBiGenericClass.class);\r\n    assertThat(resolved).isEqualTo(D.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.GenericTypeResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.GenericTypeResolverTests#resolvePartiallySpecializedTypeVariables()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.GenericTypeResolverTests#resolvePartiallySpecializedTypeVariables()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.GenericTypeResolverTests#resolveTransitiveTypeVariableWithDifferentName()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveTransitiveTypeVariableWithDifferentName() {\r\n    Type resolved = resolveType(BiGenericClass.class.getTypeParameters()[1], TypeFixedBiGenericClass.class);\r\n    assertThat(resolved).isEqualTo(E.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.GenericTypeResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.GenericTypeResolverTests#resolveTransitiveTypeVariableWithDifferentName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.GenericTypeResolverTests#resolveTransitiveTypeVariableWithDifferentName()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.GenericTypeResolverTests#resolveMethodParameterWithNestedGenerics()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveMethodParameterWithNestedGenerics() {\r\n    Method method = method(WithMethodParameter.class, \"nestedGenerics\", List.class);\r\n    MethodParameter methodParameter = new MethodParameter(method, 0);\r\n    Type resolvedType = resolveType(methodParameter.getGenericParameterType(), WithMethodParameter.class);\r\n    ParameterizedTypeReference<List<Map<String, Integer>>> reference = new ParameterizedTypeReference<>() ;;\r\n    assertThat(resolvedType).isEqualTo(reference.getType());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.GenericTypeResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.GenericTypeResolverTests#resolveMethodParameterWithNestedGenerics()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.GenericTypeResolverTests#resolveMethodParameterWithNestedGenerics()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.GenericTypeResolverTests#resolveNestedTypeVariable()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveNestedTypeVariable() throws Exception {\r\n    Type resolved = resolveType(ListOfListSupplier.class.getMethod(\"get\").getGenericReturnType(), StringListOfListSupplier.class);\r\n    assertThat(ResolvableType.forType(resolved).getGeneric(0).getGeneric(0).resolve()).isEqualTo(String.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.GenericTypeResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.GenericTypeResolverTests#resolveNestedTypeVariable()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.GenericTypeResolverTests#resolveNestedTypeVariable()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.GenericTypeResolverTests#resolveTypeWithElementBounds()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveTypeWithElementBounds() {\r\n    Type type = method(WithElementBounds.class, \"get\").getGenericReturnType();\r\n    Type resolvedType = resolveType(type, WithElementBounds.class);\r\n    ParameterizedTypeReference<List<A>> reference = new ParameterizedTypeReference<>() ;;\r\n    assertThat(resolvedType).isEqualTo(reference.getType());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.GenericTypeResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.GenericTypeResolverTests#resolveTypeWithElementBounds()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.GenericTypeResolverTests#resolveTypeWithElementBounds()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]