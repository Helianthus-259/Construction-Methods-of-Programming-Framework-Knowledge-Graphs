[
  {
    "head": "org.springframework.core.env.CommandLinePropertySource#setNonOptionArgsPropertyName(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Specify the name of the special \"non-option arguments\" property.\r\n * The default is {@value #DEFAULT_NON_OPTION_ARGS_PROPERTY_NAME}.\r\n */\r\npublic void setNonOptionArgsPropertyName(String nonOptionArgsPropertyName) {\r\n    this.nonOptionArgsPropertyName = nonOptionArgsPropertyName;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.CommandLinePropertySource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.CommandLinePropertySource#setNonOptionArgsPropertyName(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.CommandLinePropertySource#containsProperty(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation first checks to see if the name specified is the special\r\n * {@linkplain #setNonOptionArgsPropertyName(String) \"non-option arguments\" property},\r\n * and if so delegates to the abstract {@link #getNonOptionArgs()} method\r\n * checking to see whether it returns an empty collection. Otherwise, delegates to and\r\n * returns the value of the abstract {@link #containsOption(String)} method.\r\n */\r\n@Override\r\npublic final boolean containsProperty(String name) {\r\n    if (this.nonOptionArgsPropertyName.equals(name)) {\r\n        return !getNonOptionArgs().isEmpty();\r\n    }\r\n    return this.containsOption(name);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.CommandLinePropertySource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.CommandLinePropertySource#containsProperty(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.CommandLinePropertySource#containsProperty(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.CommandLinePropertySource#getProperty(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation first checks to see if the name specified is the special\r\n * {@linkplain #setNonOptionArgsPropertyName(String) \"non-option arguments\" property},\r\n * and if so delegates to the abstract {@link #getNonOptionArgs()} method. If so\r\n * and the collection of non-option arguments is empty, this method returns\r\n * {@code null}. If not empty, it returns a comma-separated String of all non-option\r\n * arguments. Otherwise, this method delegates to and returns a comma-separated String\r\n * of the results of the abstract {@link #getOptionValues(String)} method or\r\n * {@code null} if there are no such option values.\r\n */\r\n@Override\r\n@Nullable\r\npublic final String getProperty(String name) {\r\n    if (this.nonOptionArgsPropertyName.equals(name)) {\r\n        Collection<String> nonOptionArguments = getNonOptionArgs();\r\n        if (nonOptionArguments.isEmpty()) {\r\n            return null;\r\n        } else {\r\n            return StringUtils.collectionToCommaDelimitedString(nonOptionArguments);\r\n        }\r\n    }\r\n    Collection<String> optionValues = getOptionValues(name);\r\n    if (optionValues == null) {\r\n        return null;\r\n    } else {\r\n        return StringUtils.collectionToCommaDelimitedString(optionValues);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.CommandLinePropertySource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.CommandLinePropertySource#getProperty(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.CommandLinePropertySource#getProperty(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.CommandLinePropertySource#getProperty(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.CommandLinePropertySource#containsOption(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return whether the set of option arguments parsed from the command line contains\r\n * an option with the given name.\r\n */\r\nprotected abstract boolean containsOption(String name);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.CommandLinePropertySource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.CommandLinePropertySource#containsOption(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.CommandLinePropertySource#getOptionValues(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the collection of values associated with the command line option having the\r\n * given name.\r\n * <ul>\r\n * <li>if the option is present and has no argument (for example: \"--foo\"), return an empty\r\n * collection ({@code []})</li>\r\n * <li>if the option is present and has a single value (for example, \"--foo=bar\"), return a\r\n * collection having one element ({@code [\"bar\"]})</li>\r\n * <li>if the option is present and the underlying command line parsing library\r\n * supports multiple arguments (for example, \"--foo=bar --foo=baz\"), return a collection\r\n * having elements for each value ({@code [\"bar\", \"baz\"]})</li>\r\n * <li>if the option is not present, return {@code null}</li>\r\n * </ul>\r\n */\r\n@Nullable\r\nprotected abstract List<String> getOptionValues(String name);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.CommandLinePropertySource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.CommandLinePropertySource#getOptionValues(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.CommandLinePropertySource#getOptionValues(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.CommandLinePropertySource#getNonOptionArgs()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the collection of non-option arguments parsed from the command line.\r\n * Never {@code null}.\r\n */\r\nprotected abstract List<String> getNonOptionArgs();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.CommandLinePropertySource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.CommandLinePropertySource#getNonOptionArgs()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.CommandLinePropertySource",
    "headType": "class",
    "relation": "extend",
    "tail": "EnumerablePropertySource",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.env",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.env",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.env.CompositePropertySource",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.env.CompositePropertySource",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.env;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.util.StringUtils;\n\n/**\n * Composite {@link PropertySource} implementation that iterates over a set of\n * {@link PropertySource} instances. Necessary in cases where multiple property sources\n * share the same name, for example, when multiple values are supplied to {@code @PropertySource}.\n *\n * <p>As of Spring 4.1.2, this class extends {@link EnumerablePropertySource} instead\n * of plain {@link PropertySource}, exposing {@link #getPropertyNames()} based on the\n * accumulated property names from all contained sources (as far as possible).\n *\n * @author Chris Beams\n * @author Juergen Hoeller\n * @author Phillip Webb\n * @since 3.1.1\n */\npublic class CompositePropertySource extends EnumerablePropertySource<Object> {\n\n\tprivate final Set<PropertySource<?>> propertySources = new LinkedHashSet<>();\n\n\n\t/**\n\t * Create a new {@code CompositePropertySource}.\n\t * @param name the name of the property source\n\t */\n\tpublic CompositePropertySource(String name) {\n\t\tsuper(name);\n\t}\n\n\n\t@Override\n\tpublic @Nullable Object getProperty(String name) {\n\t\tfor (PropertySource<?> propertySource : this.propertySources) {\n\t\t\tObject candidate = propertySource.getProperty(name);\n\t\t\tif (candidate != null) {\n\t\t\t\treturn candidate;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t@Override\n\tpublic boolean containsProperty(String name) {\n\t\tfor (PropertySource<?> propertySource : this.propertySources) {\n\t\t\tif (propertySource.containsProperty(name)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic String[] getPropertyNames() {\n\t\tList<String[]> namesList = new ArrayList<>(this.propertySources.size());\n\t\tint total = 0;\n\t\tfor (PropertySource<?> propertySource : this.propertySources) {\n\t\t\tif (!(propertySource instanceof EnumerablePropertySource<?> enumerablePropertySource)) {\n\t\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\t\"Failed to enumerate property names due to non-enumerable property source: \" + propertySource);\n\t\t\t}\n\t\t\tString[] names = enumerablePropertySource.getPropertyNames();\n\t\t\tnamesList.add(names);\n\t\t\ttotal += names.length;\n\t\t}\n\t\tSet<String> allNames = CollectionUtils.newLinkedHashSet(total);\n\t\tnamesList.forEach(names -> Collections.addAll(allNames, names));\n\t\treturn StringUtils.toStringArray(allNames);\n\t}\n\n\n\t/**\n\t * Add the given {@link PropertySource} to the end of the chain.\n\t * @param propertySource the PropertySource to add\n\t */\n\tpublic void addPropertySource(PropertySource<?> propertySource) {\n\t\tthis.propertySources.add(propertySource);\n\t}\n\n\t/**\n\t * Add the given {@link PropertySource} to the start of the chain.\n\t * @param propertySource the PropertySource to add\n\t * @since 4.1\n\t */\n\tpublic void addFirstPropertySource(PropertySource<?> propertySource) {\n\t\tList<PropertySource<?>> existing = new ArrayList<>(this.propertySources);\n\t\tthis.propertySources.clear();\n\t\tthis.propertySources.add(propertySource);\n\t\tthis.propertySources.addAll(existing);\n\t}\n\n\t/**\n\t * Return all property sources that this composite source holds.\n\t * @since 4.1.1\n\t */\n\tpublic Collection<PropertySource<?>> getPropertySources() {\n\t\treturn this.propertySources;\n\t}\n\n\n\t@Override\n\tpublic String toString() {\n\t\treturn getClass().getSimpleName() + \" {name='\" + this.name + \"', propertySources=\" + this.propertySources + \"}\";\n\t}\n\n}\n",
    "tailType": "class_code"
  }
]