[
  {
    "head": "org.springframework.util.CompositeIteratorTests#duplicateIterators()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.hint",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.hint",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.ReflectionTypeReference",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionTypeReference",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.util.Assert;\n\n/**\n * A {@link TypeReference} based on a {@link Class}.\n *\n * @author Stephane Nicoll\n * @author Sebastien Deleuze\n * @since 6.0\n */\nfinal class ReflectionTypeReference extends AbstractTypeReference {\n\n\tprivate final Class<?> type;\n\n\tprivate ReflectionTypeReference(Class<?> type) {\n\t\tsuper(type.getPackageName(), type.getSimpleName(), getEnclosingClass(type));\n\t\tthis.type = type;\n\t}\n\n\tprivate static @Nullable TypeReference getEnclosingClass(Class<?> type) {\n\t\tClass<?> candidate = (type.isArray() ? type.componentType().getEnclosingClass() :\n\t\t\t\ttype.getEnclosingClass());\n\t\treturn (candidate != null ? new ReflectionTypeReference(candidate) : null);\n\t}\n\n\tstatic ReflectionTypeReference of(Class<?> type) {\n\t\tAssert.notNull(type, \"'type' must not be null\");\n\t\tAssert.notNull(type.getCanonicalName(), \"'type.getCanonicalName()' must not be null\");\n\t\treturn new ReflectionTypeReference(type);\n\t}\n\n\t@Override\n\tpublic String getCanonicalName() {\n\t\treturn this.type.getCanonicalName();\n\t}\n\n\t@Override\n\tprotected boolean isPrimitive() {\n\t\treturn this.type.isPrimitive() ||\n\t\t\t\t(this.type.isArray() && this.type.componentType().isPrimitive());\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionTypeReference",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.hint.ReflectionTypeReference#type",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionTypeReference#type",
    "headType": "field",
    "relation": "haveType",
    "tail": "Class<?>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionTypeReference#getEnclosingClass(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprivate static TypeReference getEnclosingClass(Class<?> type) {\r\n    Class<?> candidate = (type.isArray() ? type.componentType().getEnclosingClass() : type.getEnclosingClass());\r\n    return (candidate != null ? new ReflectionTypeReference(candidate) : null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionTypeReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ReflectionTypeReference#getEnclosingClass(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionTypeReference#getEnclosingClass(Class<?>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionTypeReference#of(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "static ReflectionTypeReference of(Class<?> type) {\r\n    Assert.notNull(type, \"'type' must not be null\");\r\n    Assert.notNull(type.getCanonicalName(), \"'type.getCanonicalName()' must not be null\");\r\n    return new ReflectionTypeReference(type);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionTypeReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ReflectionTypeReference#of(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionTypeReference#getCanonicalName()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String getCanonicalName() {\r\n    return this.type.getCanonicalName();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionTypeReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ReflectionTypeReference#getCanonicalName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionTypeReference#getCanonicalName()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionTypeReference#isPrimitive()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected boolean isPrimitive() {\r\n    return this.type.isPrimitive() || (this.type.isArray() && this.type.componentType().isPrimitive());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionTypeReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ReflectionTypeReference#isPrimitive()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionTypeReference#isPrimitive()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionTypeReference",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractTypeReference",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.CompositeMapTests",
    "tailType": "class"
  }
]