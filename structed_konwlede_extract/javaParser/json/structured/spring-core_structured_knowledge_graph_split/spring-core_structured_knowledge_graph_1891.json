[
  {
    "head": "org.springframework.core.convert.converter",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.converter.TestEntity",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.converter.TestEntity",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert.converter;\n\nimport java.awt.Color;\nimport java.lang.reflect.Method;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport java.nio.charset.Charset;\nimport java.nio.charset.StandardCharsets;\nimport java.time.ZoneId;\nimport java.util.AbstractList;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Currency;\nimport java.util.EnumSet;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.TimeZone;\nimport java.util.UUID;\nimport java.util.regex.Pattern;\nimport java.util.stream.Stream;\n\nimport org.jspecify.annotations.Nullable;\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.core.MethodParameter;\nimport org.springframework.core.convert.ConversionFailedException;\nimport org.springframework.core.convert.ConverterNotFoundException;\nimport org.springframework.core.convert.TypeDescriptor;\nimport org.springframework.core.convert.support.DefaultConversionService;\nimport org.springframework.util.ClassUtils;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatExceptionOfType;\nimport static org.assertj.core.api.Assertions.entry;\n\n/**\n * Tests for {@link DefaultConversionService}.\n *\n * <p>In this package for enforcing accessibility checks to non-public classes outside\n * the {@code org.springframework.core.convert.support} implementation package.\n * Only in such a scenario, {@code setAccessible(true)} is actually necessary.\n *\n * @author Keith Donald\n * @author Juergen Hoeller\n * @author Stephane Nicoll\n * @author Sam Brannen\n */\nclass DefaultConversionServiceTests {\n\n\tprivate final DefaultConversionService conversionService = new DefaultConversionService();\n\n\n\t@Test\n\tvoid stringToCharacter() {\n\t\tassertThat(conversionService.convert(\"1\", Character.class)).isEqualTo(Character.valueOf('1'));\n\t}\n\n\t@Test\n\tvoid stringToCharacterEmptyString() {\n\t\tassertThat(conversionService.convert(\"\", Character.class)).isNull();\n\t}\n\n\t@Test\n\tvoid stringToCharacterInvalidString() {\n\t\tassertThatExceptionOfType(ConversionFailedException.class).isThrownBy(() ->\n\t\t\t\tconversionService.convert(\"invalid\", Character.class));\n\t}\n\n\t@Test\n\tvoid characterToString() {\n\t\tassertThat(conversionService.convert('3', String.class)).isEqualTo(\"3\");\n\t}\n\n\t@Test\n\tvoid stringToBooleanTrue() {\n\t\tassertThat(conversionService.convert(\"true\", Boolean.class)).isTrue();\n\t\tassertThat(conversionService.convert(\"on\", Boolean.class)).isTrue();\n\t\tassertThat(conversionService.convert(\"yes\", Boolean.class)).isTrue();\n\t\tassertThat(conversionService.convert(\"1\", Boolean.class)).isTrue();\n\t\tassertThat(conversionService.convert(\"TRUE\", Boolean.class)).isTrue();\n\t\tassertThat(conversionService.convert(\"ON\", Boolean.class)).isTrue();\n\t\tassertThat(conversionService.convert(\"YES\", Boolean.class)).isTrue();\n\t}\n\n\t@Test\n\tvoid stringToBooleanFalse() {\n\t\tassertThat(conversionService.convert(\"false\", Boolean.class)).isFalse();\n\t\tassertThat(conversionService.convert(\"off\", Boolean.class)).isFalse();\n\t\tassertThat(conversionService.convert(\"no\", Boolean.class)).isFalse();\n\t\tassertThat(conversionService.convert(\"0\", Boolean.class)).isFalse();\n\t\tassertThat(conversionService.convert(\"FALSE\", Boolean.class)).isFalse();\n\t\tassertThat(conversionService.convert(\"OFF\", Boolean.class)).isFalse();\n\t\tassertThat(conversionService.convert(\"NO\", Boolean.class)).isFalse();\n\t}\n\n\t@Test\n\tvoid stringToBooleanEmptyString() {\n\t\tassertThat(conversionService.convert(\"\", Boolean.class)).isNull();\n\t}\n\n\t@Test\n\tvoid stringToBooleanInvalidString() {\n\t\tassertThatExceptionOfType(ConversionFailedException.class).isThrownBy(() ->\n\t\t\t\tconversionService.convert(\"invalid\", Boolean.class));\n\t}\n\n\t@Test\n\tvoid booleanToString() {\n\t\tassertThat(conversionService.convert(true, String.class)).isEqualTo(\"true\");\n\t}\n\n\t@Test\n\tvoid stringToByte() {\n\t\tassertThat(conversionService.convert(\"1\", Byte.class)).isEqualTo((byte) 1);\n\t}\n\n\t@Test\n\tvoid byteToString() {\n\t\tassertThat(conversionService.convert(\"A\".getBytes()[0], String.class)).isEqualTo(\"65\");\n\t}\n\n\t@Test\n\tvoid stringToShort() {\n\t\tassertThat(conversionService.convert(\"1\", Short.class)).isEqualTo((short) 1);\n\t}\n\n\t@Test\n\tvoid shortToString() {\n\t\tshort three = 3;\n\t\tassertThat(conversionService.convert(three, String.class)).isEqualTo(\"3\");\n\t}\n\n\t@Test\n\tvoid stringToInteger() {\n\t\tassertThat(conversionService.convert(\"1\", Integer.class)).isEqualTo(1);\n\t}\n\n\t@Test\n\tvoid integerToString() {\n\t\tassertThat(conversionService.convert(3, String.class)).isEqualTo(\"3\");\n\t}\n\n\t@Test\n\tvoid stringToLong() {\n\t\tassertThat(conversionService.convert(\"1\", Long.class)).isEqualTo(Long.valueOf(1));\n\t}\n\n\t@Test\n\tvoid longToString() {\n\t\tassertThat(conversionService.convert(3L, String.class)).isEqualTo(\"3\");\n\t}\n\n\t@Test\n\tvoid stringToFloat() {\n\t\tassertThat(conversionService.convert(\"1.0\", Float.class)).isEqualTo(Float.valueOf(\"1.0\"));\n\t}\n\n\t@Test\n\tvoid floatToString() {\n\t\tassertThat(conversionService.convert(Float.valueOf(\"1.0\"), String.class)).isEqualTo(\"1.0\");\n\t}\n\n\t@Test\n\tvoid stringToDouble() {\n\t\tassertThat(conversionService.convert(\"1.0\", Double.class)).isEqualTo(Double.valueOf(\"1.0\"));\n\t}\n\n\t@Test\n\tvoid doubleToString() {\n\t\tassertThat(conversionService.convert(Double.valueOf(\"1.0\"), String.class)).isEqualTo(\"1.0\");\n\t}\n\n\t@Test\n\tvoid stringToBigInteger() {\n\t\tassertThat(conversionService.convert(\"1\", BigInteger.class)).isEqualTo(new BigInteger(\"1\"));\n\t}\n\n\t@Test\n\tvoid bigIntegerToString() {\n\t\tassertThat(conversionService.convert(new BigInteger(\"100\"), String.class)).isEqualTo(\"100\");\n\t}\n\n\t@Test\n\tvoid stringToBigDecimal() {\n\t\tassertThat(conversionService.convert(\"1.0\", BigDecimal.class)).isEqualTo(new BigDecimal(\"1.0\"));\n\t}\n\n\t@Test\n\tvoid bigDecimalToString() {\n\t\tassertThat(conversionService.convert(new BigDecimal(\"100.00\"), String.class)).isEqualTo(\"100.00\");\n\t}\n\n\t@Test\n\tvoid stringToNumber() {\n\t\tassertThat(conversionService.convert(\"1.0\", Number.class)).isEqualTo(new BigDecimal(\"1.0\"));\n\t}\n\n\t@Test\n\tvoid stringToNumberEmptyString() {\n\t\tassertThat(conversionService.convert(\"\", Number.class)).isNull();\n\t}\n\n\t@Test\n\tvoid stringToEnum() {\n\t\tassertThat(conversionService.convert(\"BAR\", Foo.class)).isEqualTo(Foo.BAR);\n\t}\n\n\t@Test\n\tvoid stringToEnumWithSubclass() {\n\t\tassertThat(conversionService.convert(\"BAZ\", SubFoo.BAR.getClass())).isEqualTo(SubFoo.BAZ);\n\t}\n\n\t@Test\n\tvoid stringToEnumEmptyString() {\n\t\tassertThat(conversionService.convert(\"\", Foo.class)).isNull();\n\t}\n\n\t@Test\n\tvoid enumToString() {\n\t\tassertThat(conversionService.convert(Foo.BAR, String.class)).isEqualTo(\"BAR\");\n\t}\n\n\t@Test\n\tvoid integerToEnum() {\n\t\tassertThat(conversionService.convert(0, Foo.class)).isEqualTo(Foo.BAR);\n\t}\n\n\t@Test\n\tvoid integerToEnumWithSubclass() {\n\t\tassertThat(conversionService.convert(1, SubFoo.BAR.getClass())).isEqualTo(SubFoo.BAZ);\n\t}\n\n\t@Test\n\tvoid integerToEnumNull() {\n\t\tassertThat(conversionService.convert(null, Foo.class)).isNull();\n\t}\n\n\t@Test\n\tvoid enumToInteger() {\n\t\tassertThat(conversionService.convert(Foo.BAR, Integer.class)).isEqualTo(0);\n\t}\n\n\t@Test\n\tvoid stringToEnumSet() throws Exception {\n\t\tassertThat(conversionService.convert(\"BAR\", TypeDescriptor.valueOf(String.class),\n\t\t\t\tnew TypeDescriptor(getClass().getField(\"enumSet\")))).isEqualTo(EnumSet.of(Foo.BAR));\n\t}\n\n\t@Test\n\tvoid stringToLocale() {\n\t\tassertThat(conversionService.convert(\"en\", Locale.class)).isEqualTo(Locale.ENGLISH);\n\t}\n\n\t@Test\n\tvoid stringToLocaleWithCountry() {\n\t\tassertThat(conversionService.convert(\"en_US\", Locale.class)).isEqualTo(Locale.US);\n\t}\n\n\t@Test\n\tvoid stringToLocaleWithLanguageTag() {\n\t\tassertThat(conversionService.convert(\"en-US\", Locale.class)).isEqualTo(Locale.US);\n\t}\n\n\t@Test\n\tvoid stringToCharset() {\n\t\tassertThat(conversionService.convert(\"UTF-8\", Charset.class)).isEqualTo(StandardCharsets.UTF_8);\n\t}\n\n\t@Test\n\tvoid charsetToString() {\n\t\tassertThat(conversionService.convert(StandardCharsets.UTF_8, String.class)).isEqualTo(\"UTF-8\");\n\t}\n\n\t@Test\n\tvoid stringToCurrency() {\n\t\tassertThat(conversionService.convert(\"EUR\", Currency.class)).isEqualTo(Currency.getInstance(\"EUR\"));\n\t}\n\n\t@Test\n\tvoid currencyToString() {\n\t\tassertThat(conversionService.convert(Currency.getInstance(\"USD\"), String.class)).isEqualTo(\"USD\");\n\t}\n\n\t@Test\n\tvoid stringToString() {\n\t\tString str = \"test\";\n\t\tassertThat(conversionService.convert(str, String.class)).isSameAs(str);\n\t}\n\n\t@Test\n\tvoid uuidToStringAndStringToUuid() {\n\t\tUUID uuid = UUID.randomUUID();\n\t\tString convertToString = conversionService.convert(uuid, String.class);\n\t\tUUID convertToUUID = conversionService.convert(convertToString, UUID.class);\n\t\tassertThat(convertToUUID).isEqualTo(uuid);\n\t}\n\n\t@Test\n\tvoid stringToPatternEmptyString() {\n\t\tassertThat(conversionService.convert(\"\", Pattern.class)).isNull();\n\t}\n\n\t@Test\n\tvoid stringToPattern() {\n\t\tString pattern = \"\\\\s\";\n\t\tassertThat(conversionService.convert(pattern, Pattern.class))\n\t\t\t\t.isInstanceOfSatisfying(Pattern.class, regex -> assertThat(regex.pattern()).isEqualTo(pattern));\n\t}\n\n\t@Test\n\tvoid patternToString() {\n\t\tString regex = \"\\\\d\";\n\t\tassertThat(conversionService.convert(Pattern.compile(regex), String.class)).isEqualTo(regex);\n\t}\n\n\t@Test\n\tvoid numberToNumber() {\n\t\tassertThat(conversionService.convert(1, Long.class)).isEqualTo(Long.valueOf(1));\n\t}\n\n\t@Test\n\tvoid numberToNumberNotSupportedNumber() {\n\t\tassertThatExceptionOfType(ConversionFailedException.class)\n\t\t\t\t.isThrownBy(() -> conversionService.convert(1, CustomNumber.class));\n\t}\n\n\t@Test\n\tvoid numberToCharacter() {\n\t\tassertThat(conversionService.convert(65, Character.class)).isEqualTo(Character.valueOf('A'));\n\t}\n\n\t@Test\n\tvoid characterToNumber() {\n\t\tassertThat(conversionService.convert('A', Integer.class)).isEqualTo(65);\n\t}\n\n\t// collection conversion\n\n\t@Test\n\tvoid convertArrayToCollectionInterface() {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tCollection<String> result = conversionService.convert(new String[] {\"1\", \"2\", \"3\"}, Collection.class);\n\t\tassertThat(result).isEqualTo(List.of(\"1\", \"2\", \"3\"));\n\t\tassertThat(result).isExactlyInstanceOf(ArrayList.class).containsExactly(\"1\", \"2\", \"3\");\n\t}\n\n\t@Test\n\tvoid convertArrayToSetInterface() {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tCollection<String> result = conversionService.convert(new String[] {\"1\", \"2\", \"3\"}, Set.class);\n\t\tassertThat(result).isExactlyInstanceOf(LinkedHashSet.class).containsExactly(\"1\", \"2\", \"3\");\n\t}\n\n\t@Test\n\tvoid convertArrayToListInterface() {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tList<String> result = conversionService.convert(new String[] {\"1\", \"2\", \"3\"}, List.class);\n\t\tassertThat(result).isExactlyInstanceOf(ArrayList.class).containsExactly(\"1\", \"2\", \"3\");\n\t}\n\n\t@Test\n\tvoid convertArrayToCollectionGenericTypeConversion() throws Exception {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tList<Integer> result = (List<Integer>) conversionService.convert(new String[] {\"1\", \"2\", \"3\"},\n\t\t\t\tTypeDescriptor.valueOf(String[].class), new TypeDescriptor(getClass().getDeclaredField(\"genericList\")));\n\t\tassertThat(result).isExactlyInstanceOf(ArrayList.class).containsExactly(1, 2, 3);\n\t}\n\n\t@Test\n\tvoid convertArrayToStream() throws Exception {\n\t\tString[] source = {\"1\", \"3\", \"4\"};\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tStream<Integer> result = (Stream<Integer>) this.conversionService.convert(source,\n\t\t\t\tTypeDescriptor.valueOf(String[].class), new TypeDescriptor(getClass().getDeclaredField(\"genericStream\")));\n\t\tassertThat(result).containsExactly(1, 3, 4);\n\t}\n\n\t@Test\n\tvoid spr7766() throws Exception {\n\t\tconversionService.addConverter(new ColorConverter());\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tList<Color> colors = (List<Color>) conversionService.convert(new String[] {\"ffffff\", \"#000000\"},\n\t\t\t\tTypeDescriptor.valueOf(String[].class),\n\t\t\t\tnew TypeDescriptor(new MethodParameter(getClass().getMethod(\"handlerMethod\", List.class), 0)));\n\t\tassertThat(colors).containsExactly(Color.WHITE, Color.BLACK);\n\t}\n\n\t@Test\n\tvoid convertArrayToCollectionImpl() {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tArrayList<String> result = conversionService.convert(new String[] {\"1\", \"2\", \"3\"}, ArrayList.class);\n\t\tassertThat(result).isExactlyInstanceOf(ArrayList.class).containsExactly(\"1\", \"2\", \"3\");\n\t}\n\n\t@Test\n\tvoid convertArrayToAbstractCollection() {\n\t\tassertThatExceptionOfType(ConversionFailedException.class)\n\t\t\t\t.isThrownBy(() -> conversionService.convert(new String[]{\"1\", \"2\", \"3\"}, AbstractList.class));\n\t}\n\n\t@Test\n\tvoid convertArrayToString() {\n\t\tString result = conversionService.convert(new String[] {\"1\", \"2\", \"3\"}, String.class);\n\t\tassertThat(result).isEqualTo(\"1,2,3\");\n\t}\n\n\t@Test\n\tvoid convertArrayToStringWithElementConversion() {\n\t\tString result = conversionService.convert(new Integer[] {1, 2, 3}, String.class);\n\t\tassertThat(result).isEqualTo(\"1,2,3\");\n\t}\n\n\t@Test\n\tvoid convertEmptyArrayToString() {\n\t\tString result = conversionService.convert(new String[0], String.class);\n\t\tassertThat(result).isEmpty();\n\t}\n\n\t@Test\n\tvoid convertStringToArray() {\n\t\tString[] result = conversionService.convert(\"1,2,3\", String[].class);\n\t\tassertThat(result).containsExactly(\"1\", \"2\", \"3\");\n\t}\n\n\t@Test\n\tvoid convertStringToArrayWithElementConversion() {\n\t\tInteger[] result = conversionService.convert(\"1,2,3\", Integer[].class);\n\t\tassertThat(result).containsExactly(1, 2, 3);\n\t}\n\n\t@Test\n\tvoid convertStringToPrimitiveArrayWithElementConversion() {\n\t\tint[] result = conversionService.convert(\"1,2,3\", int[].class);\n\t\tassertThat(result).containsExactly(1, 2, 3);\n\t}\n\n\t@Test\n\tvoid convertEmptyStringToArray() {\n\t\tString[] result = conversionService.convert(\"\", String[].class);\n\t\tassertThat(result).isEmpty();\n\t}\n\n\t@Test\n\tvoid convertArrayToObject() {\n\t\tObject[] array = new Object[] {3L};\n\t\tObject result = conversionService.convert(array, Long.class);\n\t\tassertThat(result).isEqualTo(3L);\n\t}\n\n\t@Test\n\tvoid convertArrayToObjectWithElementConversion() {\n\t\tString[] array = new String[] {\"3\"};\n\t\tInteger result = conversionService.convert(array, Integer.class);\n\t\tassertThat(result).isEqualTo(3);\n\t}\n\n\t@Test\n\tvoid convertArrayToObjectAssignableTargetType() {\n\t\tLong[] array = new Long[] {3L};\n\t\tLong[] result = (Long[]) conversionService.convert(array, Object.class);\n\t\tassertThat(result).isEqualTo(array);\n\t}\n\n\t@Test\n\tvoid convertObjectToArray() {\n\t\tObject[] result = conversionService.convert(3L, Object[].class);\n\t\tassertThat(result).containsExactly(3L);\n\t}\n\n\t@Test\n\tvoid convertObjectToArrayWithElementConversion() {\n\t\tInteger[] result = conversionService.convert(3L, Integer[].class);\n\t\tassertThat(result).containsExactly(3);\n\t}\n\n\t@Test\n\tvoid convertCollectionToArray() {\n\t\tList<String> list = List.of(\"1\", \"2\", \"3\");\n\t\tString[] result = conversionService.convert(list, String[].class);\n\t\tassertThat(result).containsExactly(\"1\", \"2\", \"3\");\n\t}\n\n\t@Test\n\tvoid convertCollectionToArrayWithElementConversion() {\n\t\tList<String> list = List.of(\"1\", \"2\", \"3\");\n\t\tInteger[] result = conversionService.convert(list, Integer[].class);\n\t\tassertThat(result).containsExactly(1, 2, 3);\n\t}\n\n\t@Test\n\tvoid convertCollectionToString() {\n\t\tList<String> list = List.of(\"foo\", \"bar\");\n\t\tString result = conversionService.convert(list, String.class);\n\t\tassertThat(result).isEqualTo(\"foo,bar\");\n\t}\n\n\t@Test\n\tvoid convertCollectionToStringWithElementConversion() throws Exception {\n\t\tList<Integer> list = List.of(3, 5);\n\t\tString result = (String) conversionService.convert(list,\n\t\t\t\tnew TypeDescriptor(getClass().getField(\"genericList\")), TypeDescriptor.valueOf(String.class));\n\t\tassertThat(result).isEqualTo(\"3,5\");\n\t}\n\n\t@Test\n\tvoid convertStringToCollection() {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tList<String> result = conversionService.convert(\"1,2,3\", List.class);\n\t\tassertThat(result).containsExactly(\"1\", \"2\", \"3\");\n\t}\n\n\t@Test\n\tvoid convertStringToCollectionWithElementConversion() throws Exception {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tList<Integer> result = (List<Integer>) conversionService.convert(\"1,2,3\", TypeDescriptor.valueOf(String.class),\n\t\t\t\tnew TypeDescriptor(getClass().getField(\"genericList\")));\n\t\tassertThat(result).containsExactly(1, 2, 3);\n\t}\n\n\t@Test\n\tvoid convertEmptyStringToCollection() {\n\t\tCollection<?> result = conversionService.convert(\"\", Collection.class);\n\t\tassertThat(result).isEmpty();\n\t}\n\n\t@Test\n\tvoid convertCollectionToObject() {\n\t\tList<Long> list = Collections.singletonList(3L);\n\t\tLong result = conversionService.convert(list, Long.class);\n\t\tassertThat(result).isEqualTo(3L);\n\t}\n\n\t@Test\n\tvoid convertCollectionToObjectWithElementConversion() {\n\t\tList<String> list = Collections.singletonList(\"3\");\n\t\tInteger result = conversionService.convert(list, Integer.class);\n\t\tassertThat(result).isEqualTo(3);\n\t}\n\n\t@Test\n\tvoid convertCollectionToObjectAssignableTarget() throws Exception {\n\t\tCollection<String> source = List.of(\"foo\");\n\t\tObject result = conversionService.convert(source, new TypeDescriptor(getClass().getField(\"assignableTarget\")));\n\t\tassertThat(result).isSameAs(source);\n\t}\n\n\t@Test\n\tvoid convertCollectionToObjectWithCustomConverter() {\n\t\tList<String> source = List.of(\"A\", \"B\");\n\t\tconversionService.addConverter(List.class, ListWrapper.class, ListWrapper::new);\n\t\tListWrapper result = conversionService.convert(source, ListWrapper.class);\n\t\tassertThat(result.getList()).isSameAs(source);\n\t}\n\n\t@Test\n\tvoid convertObjectToCollection() {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tList<Long> result = conversionService.convert(3L, List.class);\n\t\tassertThat(result).containsExactly(3L);\n\t}\n\n\t@Test\n\tvoid convertObjectToCollectionWithElementConversion() throws Exception {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tList<Integer> result = (List<Integer>) conversionService.convert(3L, TypeDescriptor.valueOf(Long.class),\n\t\t\t\tnew TypeDescriptor(getClass().getField(\"genericList\")));\n\t\tassertThat(result).containsExactly(3);\n\t}\n\n\t@Test\n\tvoid convertStringArrayToIntegerArray() {\n\t\tInteger[] result = conversionService.convert(new String[] {\"1\", \"2\", \"3\"}, Integer[].class);\n\t\tassertThat(result).containsExactly(1, 2, 3);\n\t}\n\n\t@Test\n\tvoid convertStringArrayToIntArray() {\n\t\tint[] result = conversionService.convert(new String[] {\"1\", \"2\", \"3\"}, int[].class);\n\t\tassertThat(result).containsExactly(1, 2, 3);\n\t}\n\n\t@Test\n\tvoid convertIntArrayToStringArray() {\n\t\tString[] result = conversionService.convert(new int[] {1, 2, 3}, String[].class);\n\t\tassertThat(result).containsExactly(\"1\", \"2\", \"3\");\n\t}\n\n\t@Test\n\tvoid convertIntegerArrayToIntegerArray() {\n\t\tInteger[] result = conversionService.convert(new Integer[] {1, 2, 3}, Integer[].class);\n\t\tassertThat(result).containsExactly(1, 2, 3);\n\t}\n\n\t@Test\n\tvoid convertIntegerArrayToIntArray() {\n\t\tint[] result = conversionService.convert(new Integer[] {1, 2, 3}, int[].class);\n\t\tassertThat(result).containsExactly(1, 2, 3);\n\t}\n\n\t@Test\n\tvoid convertIntArrayToIntegerArray() {\n\t\tInteger[] result = conversionService.convert(new int[] {1, 2}, Integer[].class);\n\t\tassertThat(result).containsExactly(1, 2);\n\t}\n\n\t@Test\n\tvoid convertObjectArrayToIntegerArray() {\n\t\tInteger[] result = conversionService.convert(new Object[] {1, 2, 3}, Integer[].class);\n\t\tassertThat(result).containsExactly(1, 2, 3);\n\t}\n\n\t@Test\n\tvoid convertObjectArrayToIntArray() {\n\t\tint[] result = conversionService.convert(new Object[] {1, 2, 3}, int[].class);\n\t\tassertThat(result).containsExactly(1, 2, 3);\n\t}\n\n\t@Test  // gh-33212\n\tvoid convertIntArrayToObjectArray() {\n\t\tObject[] result = conversionService.convert(new int[] {1, 2}, Object[].class);\n\t\tassertThat(result).containsExactly(1, 2);\n\t}\n\n\t@Test\n\tvoid convertIntArrayToFloatArray() {\n\t\tFloat[] result = conversionService.convert(new int[] {1, 2}, Float[].class);\n\t\tassertThat(result).containsExactly(1.0F, 2.0F);\n\t}\n\n\t@Test\n\tvoid convertIntArrayToPrimitiveFloatArray() {\n\t\tfloat[] result = conversionService.convert(new int[] {1, 2}, float[].class);\n\t\tassertThat(result).containsExactly(1.0F, 2.0F);\n\t}\n\n\t@Test\n\tvoid convertPrimitiveByteArrayToByteWrapperArray() {\n\t\tbyte[] byteArray = {1, 2, 3};\n\t\tByte[] converted = conversionService.convert(byteArray, Byte[].class);\n\t\tassertThat(converted).isEqualTo(new Byte[]{1, 2, 3});\n\t}\n\n\t@Test  // gh-14200, SPR-9566\n\tvoid convertPrimitiveByteArrayToPrimitiveByteArray() {\n\t\tbyte[] byteArray = new byte[] {1, 2, 3};\n\t\tbyte[] result = conversionService.convert(byteArray, byte[].class);\n\t\tassertThat(result).isSameAs(byteArray);\n\t\tassertThat(result).containsExactly(1, 2, 3);\n\t}\n\n\t@Test  // gh-14200, SPR-9566\n\tvoid convertIntArrayToIntArray() {\n\t\tint[] intArray = new int[] {1, 2, 3};\n\t\tint[] result = conversionService.convert(intArray, int[].class);\n\t\tassertThat(result).isSameAs(intArray);\n\t\tassertThat(result).containsExactly(1, 2, 3);\n\t}\n\n\t@Test\n\tvoid convertListOfNonStringifiable() {\n\t\tList<Object> list = List.of(new TestEntity(1L), new TestEntity(2L));\n\t\tassertThat(conversionService.canConvert(list.getClass(), String.class)).isTrue();\n\t\ttry {\n\t\t\tconversionService.convert(list, String.class);\n\t\t}\n\t\tcatch (ConversionFailedException ex) {\n\t\t\tassertThat(ex.getMessage()).contains(list.getClass().getName());\n\t\t\tassertThat(ex.getCause()).isInstanceOf(ConverterNotFoundException.class);\n\t\t\tassertThat(ex.getCause().getMessage()).contains(TestEntity.class.getName());\n\t\t}\n\t}\n\n\t@Test\n\tvoid convertListOfStringToString() {\n\t\tList<String> list = List.of(\"Foo\", \"Bar\");\n\t\tassertThat(conversionService.canConvert(list.getClass(), String.class)).isTrue();\n\t\tString result = conversionService.convert(list, String.class);\n\t\tassertThat(result).isEqualTo(\"Foo,Bar\");\n\t}\n\n\t@Test\n\tvoid convertListOfListToString() {\n\t\tList<String> list1 = List.of(\"Foo\", \"Bar\");\n\t\tList<String> list2 = List.of(\"Baz\", \"Boop\");\n\t\tList<List<String>> list = List.of(list1, list2);\n\t\tassertThat(conversionService.canConvert(list.getClass(), String.class)).isTrue();\n\t\tString result = conversionService.convert(list, String.class);\n\t\tassertThat(result).isEqualTo(\"Foo,Bar,Baz,Boop\");\n\t}\n\n\t@Test\n\tvoid convertCollectionToCollection() throws Exception {\n\t\tSet<String> foo = new LinkedHashSet<>();\n\t\tfoo.add(\"1\");\n\t\tfoo.add(\"2\");\n\t\tfoo.add(\"3\");\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tList<Integer> bar = (List<Integer>) conversionService.convert(foo,\n\t\t\t\tnew TypeDescriptor(getClass().getField(\"genericList\")));\n\t\tassertThat(bar).containsExactly(1, 2, 3);\n\t}\n\n\t@Test\n\tvoid convertCollectionToCollectionNull() throws Exception {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tList<Integer> bar = (List<Integer>) conversionService.convert(null,\n\t\t\t\tTypeDescriptor.valueOf(LinkedHashSet.class), new TypeDescriptor(getClass().getField(\"genericList\")));\n\t\tassertThat(bar).isNull();\n\t}\n\n\t@Test\n\t@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n\tvoid convertCollectionToCollectionNotGeneric() {\n\t\tSet<String> foo = new LinkedHashSet<>();\n\t\tfoo.add(\"1\");\n\t\tfoo.add(\"2\");\n\t\tfoo.add(\"3\");\n\t\tList bar = (List) conversionService.convert(foo, TypeDescriptor.valueOf(LinkedHashSet.class), TypeDescriptor.valueOf(List.class));\n\t\tassertThat(bar).containsExactly(\"1\", \"2\", \"3\");\n\t}\n\n\t@Test\n\t@SuppressWarnings({\"unchecked\", \"rawtypes\"})\n\tvoid convertCollectionToCollectionSpecialCaseSourceImpl() throws Exception {\n\t\tMap map = new LinkedHashMap();\n\t\tmap.put(\"1\", \"1\");\n\t\tmap.put(\"2\", \"2\");\n\t\tmap.put(\"3\", \"3\");\n\t\tCollection values = map.values();\n\t\tList<Integer> bar = (List<Integer>) conversionService.convert(values,\n\t\t\t\tTypeDescriptor.forObject(values), new TypeDescriptor(getClass().getField(\"genericList\")));\n\t\tassertThat(bar).containsExactly(1, 2, 3);\n\t}\n\n\t@Test\n\tvoid collection() {\n\t\tList<String> strings = List.of(\"3\", \"9\");\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tList<Integer> integers = (List<Integer>) conversionService.convert(strings,\n\t\t\t\tTypeDescriptor.collection(List.class, TypeDescriptor.valueOf(Integer.class)));\n\t\tassertThat(integers).containsExactly(3, 9);\n\t}\n\n\t@Test\n\tvoid convertMapToMap() throws Exception {\n\t\tMap<String, String> foo = Map.of(\"1\", \"BAR\", \"2\", \"BAZ\");\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tMap<Integer, Foo> map = (Map<Integer, Foo>) conversionService.convert(foo,\n\t\t\t\tTypeDescriptor.forObject(foo), new TypeDescriptor(getClass().getField(\"genericMap\")));\n\t\tassertThat(map).contains(entry(1, Foo.BAR), entry(2, Foo.BAZ));\n\t}\n\n\t@Test\n\tvoid convertHashMapValuesToList() {\n\t\tMap<String, Integer> hashMap = new LinkedHashMap<>();\n\t\thashMap.put(\"1\", 1);\n\t\thashMap.put(\"2\", 2);\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tList<Integer> converted = conversionService.convert(hashMap.values(), List.class);\n\t\tassertThat(converted).containsExactly(1, 2);\n\t}\n\n\t@Test\n\tvoid map() {\n\t\tMap<String, String> strings = new HashMap<>();\n\t\tstrings.put(\"3\", \"9\");\n\t\tstrings.put(\"6\", \"31\");\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tMap<Integer, Integer> integers = (Map<Integer, Integer>) conversionService.convert(strings,\n\t\t\t\tTypeDescriptor.map(Map.class, TypeDescriptor.valueOf(Integer.class), TypeDescriptor.valueOf(Integer.class)));\n\t\tassertThat(integers).contains(entry(3, 9), entry(6, 31));\n\t}\n\n\t@Test\n\tvoid convertPropertiesToString() {\n\t\tProperties foo = new Properties();\n\t\tfoo.setProperty(\"1\", \"BAR\");\n\t\tfoo.setProperty(\"2\", \"BAZ\");\n\t\tString result = conversionService.convert(foo, String.class);\n\t\tassertThat(result).contains(\"1=BAR\", \"2=BAZ\");\n\t}\n\n\t@Test\n\tvoid convertStringToProperties() {\n\t\tProperties result = conversionService.convert(\"\"\"\n\t\t\t\ta=b\n\t\t\t\tc=2\n\t\t\t\td=\"\"\", Properties.class);\n\t\tassertThat(result).contains(entry(\"a\", \"b\"), entry(\"c\", \"2\"), entry(\"d\", \"\"));\n\t}\n\n\t@Test\n\tvoid convertStringToPropertiesWithLeadingSpaces() {\n\t\tProperties result = conversionService.convert(\"\"\"\n\t\t\t\t\\s  foo=bar\n\t\t\t\t\\s   bar=baz\n\t\t\t\t\\s    baz=boo\"\"\", Properties.class);\n\t\tassertThat(result).contains(entry(\"foo\", \"bar\"), entry(\"bar\", \"baz\"), entry(\"baz\", \"boo\"));\n\t}\n\n\t// generic object conversion\n\n\t@Test\n\tvoid convertObjectToStringWithValueOfMethodPresentUsingToString() {\n\t\tISBN.reset();\n\t\tassertThat(conversionService.convert(new ISBN(\"123456789\"), String.class)).isEqualTo(\"123456789\");\n\n\t\tassertThat(ISBN.constructorCount).as(\"constructor invocations\").isEqualTo(1);\n\t\tassertThat(ISBN.valueOfCount).as(\"valueOf() invocations\").isEqualTo(0);\n\t\tassertThat(ISBN.toStringCount).as(\"toString() invocations\").isEqualTo(1);\n\t}\n\n\t/**\n\t * @see org.springframework.core.convert.support.ObjectToObjectConverterTests\n\t */\n\t@Test\n\tvoid convertObjectToObjectUsingValueOfMethod() {\n\t\tISBN.reset();\n\t\tassertThat(conversionService.convert(\"123456789\", ISBN.class)).isEqualTo(new ISBN(\"123456789\"));\n\n\t\tassertThat(ISBN.valueOfCount).as(\"valueOf() invocations\").isEqualTo(1);\n\t\t// valueOf() invokes the constructor\n\t\tassertThat(ISBN.constructorCount).as(\"constructor invocations\").isEqualTo(2);\n\t\tassertThat(ISBN.toStringCount).as(\"toString() invocations\").isEqualTo(0);\n\t}\n\n\t@Test\n\tvoid convertObjectToStringUsingToString() {\n\t\tSSN.reset();\n\t\tassertThat(conversionService.convert(new SSN(\"123456789\"), String.class)).isEqualTo(\"123456789\");\n\n\t\tassertThat(SSN.constructorCount).as(\"constructor invocations\").isEqualTo(1);\n\t\tassertThat(SSN.toStringCount).as(\"toString() invocations\").isEqualTo(1);\n\t}\n\n\t@Test\n\tvoid convertObjectToObjectUsingObjectConstructor() {\n\t\tSSN.reset();\n\t\tassertThat(conversionService.convert(\"123456789\", SSN.class)).isEqualTo(new SSN(\"123456789\"));\n\n\t\tassertThat(SSN.constructorCount).as(\"constructor invocations\").isEqualTo(2);\n\t\tassertThat(SSN.toStringCount).as(\"toString() invocations\").isEqualTo(0);\n\t}\n\n\t@Test\n\tvoid convertStringToTimezone() {\n\t\tassertThat(conversionService.convert(\"GMT+2\", TimeZone.class).getID()).isEqualTo(\"GMT+02:00\");\n\t}\n\n\t@Test\n\tvoid convertObjectToStringWithJavaTimeOfMethodPresent() {\n\t\tassertThat(conversionService.convert(ZoneId.of(\"GMT+1\"), String.class)).startsWith(\"GMT+\");\n\t}\n\n\t@Test\n\tvoid convertObjectToStringNotSupported() {\n\t\tassertThat(conversionService.canConvert(TestEntity.class, String.class)).isFalse();\n\t}\n\n\t@Test\n\tvoid convertObjectToObjectWithJavaTimeOfMethod() {\n\t\tassertThat(conversionService.convert(\"GMT+1\", ZoneId.class)).isEqualTo(ZoneId.of(\"GMT+1\"));\n\t}\n\n\t@Test\n\tvoid convertObjectToObjectNoValueOfMethodOrConstructor() {\n\t\tassertThatExceptionOfType(ConverterNotFoundException.class)\n\t\t\t\t.isThrownBy(() -> conversionService.convert(3L, SSN.class));\n\t}\n\n\t@Test\n\tvoid convertObjectToObjectFinderMethod() {\n\t\tTestEntity e = conversionService.convert(1L, TestEntity.class);\n\t\tassertThat(e.getId()).isEqualTo(Long.valueOf(1));\n\t}\n\n\t@Test\n\tvoid convertObjectToObjectFinderMethodWithNull() {\n\t\tTestEntity entity = (TestEntity) conversionService.convert(null,\n\t\t\t\tTypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(TestEntity.class));\n\t\tassertThat(entity).isNull();\n\t}\n\n\t@Test\n\tvoid convertObjectToObjectFinderMethodWithIdConversion() {\n\t\tTestEntity entity = conversionService.convert(\"1\", TestEntity.class);\n\t\tassertThat(entity.getId()).isEqualTo(Long.valueOf(1));\n\t}\n\n\t@Test\n\tvoid convertCharArrayToString() {\n\t\tString converted = conversionService.convert(new char[] {'a', 'b', 'c'}, String.class);\n\t\tassertThat(converted).isEqualTo(\"a,b,c\");\n\t}\n\n\t@Test\n\tvoid convertStringToCharArray() {\n\t\tchar[] converted = conversionService.convert(\"a,b,c\", char[].class);\n\t\tassertThat(converted).containsExactly('a', 'b', 'c');\n\t}\n\n\t@Test\n\tvoid convertStringToCustomCharArray() {\n\t\tconversionService.addConverter(String.class, char[].class, String::toCharArray);\n\t\tchar[] converted = conversionService.convert(\"abc\", char[].class);\n\t\tassertThat(converted).containsExactly('a', 'b', 'c');\n\t}\n\n\t@Test\n\t@SuppressWarnings(\"unchecked\")\n\tvoid multidimensionalArrayToListConversionShouldConvertEntriesCorrectly() {\n\t\tString[][] grid = new String[][] {{\"1\", \"2\", \"3\", \"4\"}, {\"5\", \"6\", \"7\", \"8\"}, {\"9\", \"10\", \"11\", \"12\"}};\n\t\tList<String[]> converted = conversionService.convert(grid, List.class);\n\t\tString[][] convertedBack = conversionService.convert(converted, String[][].class);\n\t\tassertThat(convertedBack).isEqualTo(grid);\n\t}\n\n\t@Test\n\tvoid convertCannotOptimizeArray() {\n\t\tconversionService.addConverter(Byte.class, Byte.class, source -> (byte) (source + 1));\n\t\tbyte[] byteArray = {1, 2, 3};\n\t\tbyte[] converted = conversionService.convert(byteArray, byte[].class);\n\t\tassertThat(converted).isNotSameAs(byteArray);\n\t\tassertThat(converted).containsExactly(2, 3, 4);\n\t}\n\n\t@Test\n\t@SuppressWarnings(\"unchecked\")\n\tvoid convertObjectToOptional() {\n\t\tMethod method = ClassUtils.getMethod(TestEntity.class, \"handleOptionalValue\", Optional.class);\n\t\tMethodParameter parameter = new MethodParameter(method, 0);\n\t\tTypeDescriptor descriptor = new TypeDescriptor(parameter);\n\t\tObject actual = conversionService.convert(\"1,2,3\", TypeDescriptor.valueOf(String.class), descriptor);\n\t\tassertThat(actual.getClass()).isEqualTo(Optional.class);\n\t\tassertThat(((Optional<List<Integer>>) actual)).contains(List.of(1, 2, 3));\n\t}\n\n\t@Test\n\tvoid convertObjectToOptionalNull() {\n\t\tassertThat(conversionService.convert(null, TypeDescriptor.valueOf(Object.class),\n\t\t\t\tTypeDescriptor.valueOf(Optional.class))).isSameAs(Optional.empty());\n\t\tassertThat((Object) conversionService.convert(null, Optional.class)).isSameAs(Optional.empty());\n\t}\n\n\t@Test\n\tvoid convertExistingOptional() {\n\t\tassertThat(conversionService.convert(Optional.empty(), TypeDescriptor.valueOf(Object.class),\n\t\t\t\tTypeDescriptor.valueOf(Optional.class))).isSameAs(Optional.empty());\n\t\tassertThat((Object) conversionService.convert(Optional.empty(), Optional.class)).isSameAs(Optional.empty());\n\t}\n\n\n\t// test fields and helpers\n\n\tpublic List<Integer> genericList = new ArrayList<>();\n\n\tpublic Stream<Integer> genericStream;\n\n\tpublic Map<Integer, Foo> genericMap = new HashMap<>();\n\n\tpublic EnumSet<Foo> enumSet;\n\n\tpublic Object assignableTarget;\n\n\n\tpublic void handlerMethod(List<Color> color) {\n\t}\n\n\n\tpublic enum Foo {\n\n\t\tBAR, BAZ\n\t}\n\n\n\tpublic enum SubFoo {\n\n\t\tBAR {\n\t\t\t@Override\n\t\t\tString s() {\n\t\t\t\treturn \"x\";\n\t\t\t}\n\t\t},\n\t\tBAZ {\n\t\t\t@Override\n\t\t\tString s() {\n\t\t\t\treturn \"y\";\n\t\t\t}\n\t\t};\n\n\t\tabstract String s();\n\t}\n\n\n\tpublic class ColorConverter implements Converter<String, Color> {\n\n\t\t@Override\n\t\tpublic Color convert(String source) {\n\t\t\tif (!source.startsWith(\"#\")) {\n\t\t\t\tsource = \"#\" + source;\n\t\t\t}\n\t\t\treturn Color.decode(source);\n\t\t}\n\t}\n\n\n\t@SuppressWarnings(\"serial\")\n\tpublic static class CustomNumber extends Number {\n\n\t\t@Override\n\t\tpublic double doubleValue() {\n\t\t\treturn 0;\n\t\t}\n\n\t\t@Override\n\t\tpublic float floatValue() {\n\t\t\treturn 0;\n\t\t}\n\n\t\t@Override\n\t\tpublic int intValue() {\n\t\t\treturn 0;\n\t\t}\n\n\t\t@Override\n\t\tpublic long longValue() {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\n\tpublic static class TestEntity {\n\n\t\tprivate Long id;\n\n\t\tpublic TestEntity(Long id) {\n\t\t\tthis.id = id;\n\t\t}\n\n\t\tpublic Long getId() {\n\t\t\treturn id;\n\t\t}\n\n\t\tpublic static TestEntity findTestEntity(Long id) {\n\t\t\treturn new TestEntity(id);\n\t\t}\n\n\t\tpublic void handleOptionalValue(Optional<List<Integer>> value) {\n\t\t}\n\t}\n\n\n\tprivate static class ListWrapper {\n\n\t\tprivate List<?> list;\n\n\t\tpublic ListWrapper(List<?> list) {\n\t\t\tthis.list = list;\n\t\t}\n\n\t\tpublic List<?> getList() {\n\t\t\treturn list;\n\t\t}\n\t}\n\n\n\tprivate static class SSN {\n\n\t\tstatic int constructorCount = 0;\n\n\t\tstatic int toStringCount = 0;\n\n\t\tstatic void reset() {\n\t\t\tconstructorCount = 0;\n\t\t\ttoStringCount = 0;\n\t\t}\n\n\t\tprivate final String value;\n\n\t\tpublic SSN(String value) {\n\t\t\tconstructorCount++;\n\t\t\tthis.value = value;\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean equals(@Nullable Object o) {\n\t\t\tif (!(o instanceof SSN ssn)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn this.value.equals(ssn.value);\n\t\t}\n\n\t\t@Override\n\t\tpublic int hashCode() {\n\t\t\treturn value.hashCode();\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\ttoStringCount++;\n\t\t\treturn value;\n\t\t}\n\t}\n\n\n\tprivate static class ISBN {\n\n\t\tstatic int constructorCount = 0;\n\t\tstatic int toStringCount = 0;\n\t\tstatic int valueOfCount = 0;\n\n\t\tstatic void reset() {\n\t\t\tconstructorCount = 0;\n\t\t\ttoStringCount = 0;\n\t\t\tvalueOfCount = 0;\n\t\t}\n\n\t\tprivate final String value;\n\n\t\tpublic ISBN(String value) {\n\t\t\tconstructorCount++;\n\t\t\tthis.value = value;\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean equals(@Nullable Object o) {\n\t\t\tif (!(o instanceof ISBN isbn)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn this.value.equals(isbn.value);\n\t\t}\n\n\t\t@Override\n\t\tpublic int hashCode() {\n\t\t\treturn value.hashCode();\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\ttoStringCount++;\n\t\t\treturn value;\n\t\t}\n\n\t\t@SuppressWarnings(\"unused\")\n\t\tpublic static ISBN valueOf(String value) {\n\t\t\tvalueOfCount++;\n\t\t\treturn new ISBN(value);\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.convert.converter.TestEntity",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.converter.TestEntity#id",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.converter.TestEntity#id",
    "headType": "field",
    "relation": "haveType",
    "tail": "Long",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.converter.TestEntity#getId()",
    "headType": "method",
    "relation": "provide",
    "tail": "public Long getId() {\r\n    return id;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.TestEntity",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.TestEntity#getId()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.TestEntity#findTestEntity(Long)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static TestEntity findTestEntity(Long id) {\r\n    return new TestEntity(id);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.TestEntity",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.TestEntity#findTestEntity(Long)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.TestEntity#handleOptionalValue(Optional<List<Integer>>)",
    "headType": "method",
    "relation": "provide",
    "tail": "public void handleOptionalValue(Optional<List<Integer>> value) ;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.TestEntity",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.TestEntity#handleOptionalValue(Optional<List<Integer>>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.converter.ListWrapper",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.converter.ListWrapper",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert.converter;\n\nimport java.awt.Color;\nimport java.lang.reflect.Method;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport java.nio.charset.Charset;\nimport java.nio.charset.StandardCharsets;\nimport java.time.ZoneId;\nimport java.util.AbstractList;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Currency;\nimport java.util.EnumSet;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.TimeZone;\nimport java.util.UUID;\nimport java.util.regex.Pattern;\nimport java.util.stream.Stream;\n\nimport org.jspecify.annotations.Nullable;\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.core.MethodParameter;\nimport org.springframework.core.convert.ConversionFailedException;\nimport org.springframework.core.convert.ConverterNotFoundException;\nimport org.springframework.core.convert.TypeDescriptor;\nimport org.springframework.core.convert.support.DefaultConversionService;\nimport org.springframework.util.ClassUtils;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatExceptionOfType;\nimport static org.assertj.core.api.Assertions.entry;\n\n/**\n * Tests for {@link DefaultConversionService}.\n *\n * <p>In this package for enforcing accessibility checks to non-public classes outside\n * the {@code org.springframework.core.convert.support} implementation package.\n * Only in such a scenario, {@code setAccessible(true)} is actually necessary.\n *\n * @author Keith Donald\n * @author Juergen Hoeller\n * @author Stephane Nicoll\n * @author Sam Brannen\n */\nclass DefaultConversionServiceTests {\n\n\tprivate final DefaultConversionService conversionService = new DefaultConversionService();\n\n\n\t@Test\n\tvoid stringToCharacter() {\n\t\tassertThat(conversionService.convert(\"1\", Character.class)).isEqualTo(Character.valueOf('1'));\n\t}\n\n\t@Test\n\tvoid stringToCharacterEmptyString() {\n\t\tassertThat(conversionService.convert(\"\", Character.class)).isNull();\n\t}\n\n\t@Test\n\tvoid stringToCharacterInvalidString() {\n\t\tassertThatExceptionOfType(ConversionFailedException.class).isThrownBy(() ->\n\t\t\t\tconversionService.convert(\"invalid\", Character.class));\n\t}\n\n\t@Test\n\tvoid characterToString() {\n\t\tassertThat(conversionService.convert('3', String.class)).isEqualTo(\"3\");\n\t}\n\n\t@Test\n\tvoid stringToBooleanTrue() {\n\t\tassertThat(conversionService.convert(\"true\", Boolean.class)).isTrue();\n\t\tassertThat(conversionService.convert(\"on\", Boolean.class)).isTrue();\n\t\tassertThat(conversionService.convert(\"yes\", Boolean.class)).isTrue();\n\t\tassertThat(conversionService.convert(\"1\", Boolean.class)).isTrue();\n\t\tassertThat(conversionService.convert(\"TRUE\", Boolean.class)).isTrue();\n\t\tassertThat(conversionService.convert(\"ON\", Boolean.class)).isTrue();\n\t\tassertThat(conversionService.convert(\"YES\", Boolean.class)).isTrue();\n\t}\n\n\t@Test\n\tvoid stringToBooleanFalse() {\n\t\tassertThat(conversionService.convert(\"false\", Boolean.class)).isFalse();\n\t\tassertThat(conversionService.convert(\"off\", Boolean.class)).isFalse();\n\t\tassertThat(conversionService.convert(\"no\", Boolean.class)).isFalse();\n\t\tassertThat(conversionService.convert(\"0\", Boolean.class)).isFalse();\n\t\tassertThat(conversionService.convert(\"FALSE\", Boolean.class)).isFalse();\n\t\tassertThat(conversionService.convert(\"OFF\", Boolean.class)).isFalse();\n\t\tassertThat(conversionService.convert(\"NO\", Boolean.class)).isFalse();\n\t}\n\n\t@Test\n\tvoid stringToBooleanEmptyString() {\n\t\tassertThat(conversionService.convert(\"\", Boolean.class)).isNull();\n\t}\n\n\t@Test\n\tvoid stringToBooleanInvalidString() {\n\t\tassertThatExceptionOfType(ConversionFailedException.class).isThrownBy(() ->\n\t\t\t\tconversionService.convert(\"invalid\", Boolean.class));\n\t}\n\n\t@Test\n\tvoid booleanToString() {\n\t\tassertThat(conversionService.convert(true, String.class)).isEqualTo(\"true\");\n\t}\n\n\t@Test\n\tvoid stringToByte() {\n\t\tassertThat(conversionService.convert(\"1\", Byte.class)).isEqualTo((byte) 1);\n\t}\n\n\t@Test\n\tvoid byteToString() {\n\t\tassertThat(conversionService.convert(\"A\".getBytes()[0], String.class)).isEqualTo(\"65\");\n\t}\n\n\t@Test\n\tvoid stringToShort() {\n\t\tassertThat(conversionService.convert(\"1\", Short.class)).isEqualTo((short) 1);\n\t}\n\n\t@Test\n\tvoid shortToString() {\n\t\tshort three = 3;\n\t\tassertThat(conversionService.convert(three, String.class)).isEqualTo(\"3\");\n\t}\n\n\t@Test\n\tvoid stringToInteger() {\n\t\tassertThat(conversionService.convert(\"1\", Integer.class)).isEqualTo(1);\n\t}\n\n\t@Test\n\tvoid integerToString() {\n\t\tassertThat(conversionService.convert(3, String.class)).isEqualTo(\"3\");\n\t}\n\n\t@Test\n\tvoid stringToLong() {\n\t\tassertThat(conversionService.convert(\"1\", Long.class)).isEqualTo(Long.valueOf(1));\n\t}\n\n\t@Test\n\tvoid longToString() {\n\t\tassertThat(conversionService.convert(3L, String.class)).isEqualTo(\"3\");\n\t}\n\n\t@Test\n\tvoid stringToFloat() {\n\t\tassertThat(conversionService.convert(\"1.0\", Float.class)).isEqualTo(Float.valueOf(\"1.0\"));\n\t}\n\n\t@Test\n\tvoid floatToString() {\n\t\tassertThat(conversionService.convert(Float.valueOf(\"1.0\"), String.class)).isEqualTo(\"1.0\");\n\t}\n\n\t@Test\n\tvoid stringToDouble() {\n\t\tassertThat(conversionService.convert(\"1.0\", Double.class)).isEqualTo(Double.valueOf(\"1.0\"));\n\t}\n\n\t@Test\n\tvoid doubleToString() {\n\t\tassertThat(conversionService.convert(Double.valueOf(\"1.0\"), String.class)).isEqualTo(\"1.0\");\n\t}\n\n\t@Test\n\tvoid stringToBigInteger() {\n\t\tassertThat(conversionService.convert(\"1\", BigInteger.class)).isEqualTo(new BigInteger(\"1\"));\n\t}\n\n\t@Test\n\tvoid bigIntegerToString() {\n\t\tassertThat(conversionService.convert(new BigInteger(\"100\"), String.class)).isEqualTo(\"100\");\n\t}\n\n\t@Test\n\tvoid stringToBigDecimal() {\n\t\tassertThat(conversionService.convert(\"1.0\", BigDecimal.class)).isEqualTo(new BigDecimal(\"1.0\"));\n\t}\n\n\t@Test\n\tvoid bigDecimalToString() {\n\t\tassertThat(conversionService.convert(new BigDecimal(\"100.00\"), String.class)).isEqualTo(\"100.00\");\n\t}\n\n\t@Test\n\tvoid stringToNumber() {\n\t\tassertThat(conversionService.convert(\"1.0\", Number.class)).isEqualTo(new BigDecimal(\"1.0\"));\n\t}\n\n\t@Test\n\tvoid stringToNumberEmptyString() {\n\t\tassertThat(conversionService.convert(\"\", Number.class)).isNull();\n\t}\n\n\t@Test\n\tvoid stringToEnum() {\n\t\tassertThat(conversionService.convert(\"BAR\", Foo.class)).isEqualTo(Foo.BAR);\n\t}\n\n\t@Test\n\tvoid stringToEnumWithSubclass() {\n\t\tassertThat(conversionService.convert(\"BAZ\", SubFoo.BAR.getClass())).isEqualTo(SubFoo.BAZ);\n\t}\n\n\t@Test\n\tvoid stringToEnumEmptyString() {\n\t\tassertThat(conversionService.convert(\"\", Foo.class)).isNull();\n\t}\n\n\t@Test\n\tvoid enumToString() {\n\t\tassertThat(conversionService.convert(Foo.BAR, String.class)).isEqualTo(\"BAR\");\n\t}\n\n\t@Test\n\tvoid integerToEnum() {\n\t\tassertThat(conversionService.convert(0, Foo.class)).isEqualTo(Foo.BAR);\n\t}\n\n\t@Test\n\tvoid integerToEnumWithSubclass() {\n\t\tassertThat(conversionService.convert(1, SubFoo.BAR.getClass())).isEqualTo(SubFoo.BAZ);\n\t}\n\n\t@Test\n\tvoid integerToEnumNull() {\n\t\tassertThat(conversionService.convert(null, Foo.class)).isNull();\n\t}\n\n\t@Test\n\tvoid enumToInteger() {\n\t\tassertThat(conversionService.convert(Foo.BAR, Integer.class)).isEqualTo(0);\n\t}\n\n\t@Test\n\tvoid stringToEnumSet() throws Exception {\n\t\tassertThat(conversionService.convert(\"BAR\", TypeDescriptor.valueOf(String.class),\n\t\t\t\tnew TypeDescriptor(getClass().getField(\"enumSet\")))).isEqualTo(EnumSet.of(Foo.BAR));\n\t}\n\n\t@Test\n\tvoid stringToLocale() {\n\t\tassertThat(conversionService.convert(\"en\", Locale.class)).isEqualTo(Locale.ENGLISH);\n\t}\n\n\t@Test\n\tvoid stringToLocaleWithCountry() {\n\t\tassertThat(conversionService.convert(\"en_US\", Locale.class)).isEqualTo(Locale.US);\n\t}\n\n\t@Test\n\tvoid stringToLocaleWithLanguageTag() {\n\t\tassertThat(conversionService.convert(\"en-US\", Locale.class)).isEqualTo(Locale.US);\n\t}\n\n\t@Test\n\tvoid stringToCharset() {\n\t\tassertThat(conversionService.convert(\"UTF-8\", Charset.class)).isEqualTo(StandardCharsets.UTF_8);\n\t}\n\n\t@Test\n\tvoid charsetToString() {\n\t\tassertThat(conversionService.convert(StandardCharsets.UTF_8, String.class)).isEqualTo(\"UTF-8\");\n\t}\n\n\t@Test\n\tvoid stringToCurrency() {\n\t\tassertThat(conversionService.convert(\"EUR\", Currency.class)).isEqualTo(Currency.getInstance(\"EUR\"));\n\t}\n\n\t@Test\n\tvoid currencyToString() {\n\t\tassertThat(conversionService.convert(Currency.getInstance(\"USD\"), String.class)).isEqualTo(\"USD\");\n\t}\n\n\t@Test\n\tvoid stringToString() {\n\t\tString str = \"test\";\n\t\tassertThat(conversionService.convert(str, String.class)).isSameAs(str);\n\t}\n\n\t@Test\n\tvoid uuidToStringAndStringToUuid() {\n\t\tUUID uuid = UUID.randomUUID();\n\t\tString convertToString = conversionService.convert(uuid, String.class);\n\t\tUUID convertToUUID = conversionService.convert(convertToString, UUID.class);\n\t\tassertThat(convertToUUID).isEqualTo(uuid);\n\t}\n\n\t@Test\n\tvoid stringToPatternEmptyString() {\n\t\tassertThat(conversionService.convert(\"\", Pattern.class)).isNull();\n\t}\n\n\t@Test\n\tvoid stringToPattern() {\n\t\tString pattern = \"\\\\s\";\n\t\tassertThat(conversionService.convert(pattern, Pattern.class))\n\t\t\t\t.isInstanceOfSatisfying(Pattern.class, regex -> assertThat(regex.pattern()).isEqualTo(pattern));\n\t}\n\n\t@Test\n\tvoid patternToString() {\n\t\tString regex = \"\\\\d\";\n\t\tassertThat(conversionService.convert(Pattern.compile(regex), String.class)).isEqualTo(regex);\n\t}\n\n\t@Test\n\tvoid numberToNumber() {\n\t\tassertThat(conversionService.convert(1, Long.class)).isEqualTo(Long.valueOf(1));\n\t}\n\n\t@Test\n\tvoid numberToNumberNotSupportedNumber() {\n\t\tassertThatExceptionOfType(ConversionFailedException.class)\n\t\t\t\t.isThrownBy(() -> conversionService.convert(1, CustomNumber.class));\n\t}\n\n\t@Test\n\tvoid numberToCharacter() {\n\t\tassertThat(conversionService.convert(65, Character.class)).isEqualTo(Character.valueOf('A'));\n\t}\n\n\t@Test\n\tvoid characterToNumber() {\n\t\tassertThat(conversionService.convert('A', Integer.class)).isEqualTo(65);\n\t}\n\n\t// collection conversion\n\n\t@Test\n\tvoid convertArrayToCollectionInterface() {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tCollection<String> result = conversionService.convert(new String[] {\"1\", \"2\", \"3\"}, Collection.class);\n\t\tassertThat(result).isEqualTo(List.of(\"1\", \"2\", \"3\"));\n\t\tassertThat(result).isExactlyInstanceOf(ArrayList.class).containsExactly(\"1\", \"2\", \"3\");\n\t}\n\n\t@Test\n\tvoid convertArrayToSetInterface() {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tCollection<String> result = conversionService.convert(new String[] {\"1\", \"2\", \"3\"}, Set.class);\n\t\tassertThat(result).isExactlyInstanceOf(LinkedHashSet.class).containsExactly(\"1\", \"2\", \"3\");\n\t}\n\n\t@Test\n\tvoid convertArrayToListInterface() {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tList<String> result = conversionService.convert(new String[] {\"1\", \"2\", \"3\"}, List.class);\n\t\tassertThat(result).isExactlyInstanceOf(ArrayList.class).containsExactly(\"1\", \"2\", \"3\");\n\t}\n\n\t@Test\n\tvoid convertArrayToCollectionGenericTypeConversion() throws Exception {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tList<Integer> result = (List<Integer>) conversionService.convert(new String[] {\"1\", \"2\", \"3\"},\n\t\t\t\tTypeDescriptor.valueOf(String[].class), new TypeDescriptor(getClass().getDeclaredField(\"genericList\")));\n\t\tassertThat(result).isExactlyInstanceOf(ArrayList.class).containsExactly(1, 2, 3);\n\t}\n\n\t@Test\n\tvoid convertArrayToStream() throws Exception {\n\t\tString[] source = {\"1\", \"3\", \"4\"};\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tStream<Integer> result = (Stream<Integer>) this.conversionService.convert(source,\n\t\t\t\tTypeDescriptor.valueOf(String[].class), new TypeDescriptor(getClass().getDeclaredField(\"genericStream\")));\n\t\tassertThat(result).containsExactly(1, 3, 4);\n\t}\n\n\t@Test\n\tvoid spr7766() throws Exception {\n\t\tconversionService.addConverter(new ColorConverter());\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tList<Color> colors = (List<Color>) conversionService.convert(new String[] {\"ffffff\", \"#000000\"},\n\t\t\t\tTypeDescriptor.valueOf(String[].class),\n\t\t\t\tnew TypeDescriptor(new MethodParameter(getClass().getMethod(\"handlerMethod\", List.class), 0)));\n\t\tassertThat(colors).containsExactly(Color.WHITE, Color.BLACK);\n\t}\n\n\t@Test\n\tvoid convertArrayToCollectionImpl() {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tArrayList<String> result = conversionService.convert(new String[] {\"1\", \"2\", \"3\"}, ArrayList.class);\n\t\tassertThat(result).isExactlyInstanceOf(ArrayList.class).containsExactly(\"1\", \"2\", \"3\");\n\t}\n\n\t@Test\n\tvoid convertArrayToAbstractCollection() {\n\t\tassertThatExceptionOfType(ConversionFailedException.class)\n\t\t\t\t.isThrownBy(() -> conversionService.convert(new String[]{\"1\", \"2\", \"3\"}, AbstractList.class));\n\t}\n\n\t@Test\n\tvoid convertArrayToString() {\n\t\tString result = conversionService.convert(new String[] {\"1\", \"2\", \"3\"}, String.class);\n\t\tassertThat(result).isEqualTo(\"1,2,3\");\n\t}\n\n\t@Test\n\tvoid convertArrayToStringWithElementConversion() {\n\t\tString result = conversionService.convert(new Integer[] {1, 2, 3}, String.class);\n\t\tassertThat(result).isEqualTo(\"1,2,3\");\n\t}\n\n\t@Test\n\tvoid convertEmptyArrayToString() {\n\t\tString result = conversionService.convert(new String[0], String.class);\n\t\tassertThat(result).isEmpty();\n\t}\n\n\t@Test\n\tvoid convertStringToArray() {\n\t\tString[] result = conversionService.convert(\"1,2,3\", String[].class);\n\t\tassertThat(result).containsExactly(\"1\", \"2\", \"3\");\n\t}\n\n\t@Test\n\tvoid convertStringToArrayWithElementConversion() {\n\t\tInteger[] result = conversionService.convert(\"1,2,3\", Integer[].class);\n\t\tassertThat(result).containsExactly(1, 2, 3);\n\t}\n\n\t@Test\n\tvoid convertStringToPrimitiveArrayWithElementConversion() {\n\t\tint[] result = conversionService.convert(\"1,2,3\", int[].class);\n\t\tassertThat(result).containsExactly(1, 2, 3);\n\t}\n\n\t@Test\n\tvoid convertEmptyStringToArray() {\n\t\tString[] result = conversionService.convert(\"\", String[].class);\n\t\tassertThat(result).isEmpty();\n\t}\n\n\t@Test\n\tvoid convertArrayToObject() {\n\t\tObject[] array = new Object[] {3L};\n\t\tObject result = conversionService.convert(array, Long.class);\n\t\tassertThat(result).isEqualTo(3L);\n\t}\n\n\t@Test\n\tvoid convertArrayToObjectWithElementConversion() {\n\t\tString[] array = new String[] {\"3\"};\n\t\tInteger result = conversionService.convert(array, Integer.class);\n\t\tassertThat(result).isEqualTo(3);\n\t}\n\n\t@Test\n\tvoid convertArrayToObjectAssignableTargetType() {\n\t\tLong[] array = new Long[] {3L};\n\t\tLong[] result = (Long[]) conversionService.convert(array, Object.class);\n\t\tassertThat(result).isEqualTo(array);\n\t}\n\n\t@Test\n\tvoid convertObjectToArray() {\n\t\tObject[] result = conversionService.convert(3L, Object[].class);\n\t\tassertThat(result).containsExactly(3L);\n\t}\n\n\t@Test\n\tvoid convertObjectToArrayWithElementConversion() {\n\t\tInteger[] result = conversionService.convert(3L, Integer[].class);\n\t\tassertThat(result).containsExactly(3);\n\t}\n\n\t@Test\n\tvoid convertCollectionToArray() {\n\t\tList<String> list = List.of(\"1\", \"2\", \"3\");\n\t\tString[] result = conversionService.convert(list, String[].class);\n\t\tassertThat(result).containsExactly(\"1\", \"2\", \"3\");\n\t}\n\n\t@Test\n\tvoid convertCollectionToArrayWithElementConversion() {\n\t\tList<String> list = List.of(\"1\", \"2\", \"3\");\n\t\tInteger[] result = conversionService.convert(list, Integer[].class);\n\t\tassertThat(result).containsExactly(1, 2, 3);\n\t}\n\n\t@Test\n\tvoid convertCollectionToString() {\n\t\tList<String> list = List.of(\"foo\", \"bar\");\n\t\tString result = conversionService.convert(list, String.class);\n\t\tassertThat(result).isEqualTo(\"foo,bar\");\n\t}\n\n\t@Test\n\tvoid convertCollectionToStringWithElementConversion() throws Exception {\n\t\tList<Integer> list = List.of(3, 5);\n\t\tString result = (String) conversionService.convert(list,\n\t\t\t\tnew TypeDescriptor(getClass().getField(\"genericList\")), TypeDescriptor.valueOf(String.class));\n\t\tassertThat(result).isEqualTo(\"3,5\");\n\t}\n\n\t@Test\n\tvoid convertStringToCollection() {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tList<String> result = conversionService.convert(\"1,2,3\", List.class);\n\t\tassertThat(result).containsExactly(\"1\", \"2\", \"3\");\n\t}\n\n\t@Test\n\tvoid convertStringToCollectionWithElementConversion() throws Exception {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tList<Integer> result = (List<Integer>) conversionService.convert(\"1,2,3\", TypeDescriptor.valueOf(String.class),\n\t\t\t\tnew TypeDescriptor(getClass().getField(\"genericList\")));\n\t\tassertThat(result).containsExactly(1, 2, 3);\n\t}\n\n\t@Test\n\tvoid convertEmptyStringToCollection() {\n\t\tCollection<?> result = conversionService.convert(\"\", Collection.class);\n\t\tassertThat(result).isEmpty();\n\t}\n\n\t@Test\n\tvoid convertCollectionToObject() {\n\t\tList<Long> list = Collections.singletonList(3L);\n\t\tLong result = conversionService.convert(list, Long.class);\n\t\tassertThat(result).isEqualTo(3L);\n\t}\n\n\t@Test\n\tvoid convertCollectionToObjectWithElementConversion() {\n\t\tList<String> list = Collections.singletonList(\"3\");\n\t\tInteger result = conversionService.convert(list, Integer.class);\n\t\tassertThat(result).isEqualTo(3);\n\t}\n\n\t@Test\n\tvoid convertCollectionToObjectAssignableTarget() throws Exception {\n\t\tCollection<String> source = List.of(\"foo\");\n\t\tObject result = conversionService.convert(source, new TypeDescriptor(getClass().getField(\"assignableTarget\")));\n\t\tassertThat(result).isSameAs(source);\n\t}\n\n\t@Test\n\tvoid convertCollectionToObjectWithCustomConverter() {\n\t\tList<String> source = List.of(\"A\", \"B\");\n\t\tconversionService.addConverter(List.class, ListWrapper.class, ListWrapper::new);\n\t\tListWrapper result = conversionService.convert(source, ListWrapper.class);\n\t\tassertThat(result.getList()).isSameAs(source);\n\t}\n\n\t@Test\n\tvoid convertObjectToCollection() {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tList<Long> result = conversionService.convert(3L, List.class);\n\t\tassertThat(result).containsExactly(3L);\n\t}\n\n\t@Test\n\tvoid convertObjectToCollectionWithElementConversion() throws Exception {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tList<Integer> result = (List<Integer>) conversionService.convert(3L, TypeDescriptor.valueOf(Long.class),\n\t\t\t\tnew TypeDescriptor(getClass().getField(\"genericList\")));\n\t\tassertThat(result).containsExactly(3);\n\t}\n\n\t@Test\n\tvoid convertStringArrayToIntegerArray() {\n\t\tInteger[] result = conversionService.convert(new String[] {\"1\", \"2\", \"3\"}, Integer[].class);\n\t\tassertThat(result).containsExactly(1, 2, 3);\n\t}\n\n\t@Test\n\tvoid convertStringArrayToIntArray() {\n\t\tint[] result = conversionService.convert(new String[] {\"1\", \"2\", \"3\"}, int[].class);\n\t\tassertThat(result).containsExactly(1, 2, 3);\n\t}\n\n\t@Test\n\tvoid convertIntArrayToStringArray() {\n\t\tString[] result = conversionService.convert(new int[] {1, 2, 3}, String[].class);\n\t\tassertThat(result).containsExactly(\"1\", \"2\", \"3\");\n\t}\n\n\t@Test\n\tvoid convertIntegerArrayToIntegerArray() {\n\t\tInteger[] result = conversionService.convert(new Integer[] {1, 2, 3}, Integer[].class);\n\t\tassertThat(result).containsExactly(1, 2, 3);\n\t}\n\n\t@Test\n\tvoid convertIntegerArrayToIntArray() {\n\t\tint[] result = conversionService.convert(new Integer[] {1, 2, 3}, int[].class);\n\t\tassertThat(result).containsExactly(1, 2, 3);\n\t}\n\n\t@Test\n\tvoid convertIntArrayToIntegerArray() {\n\t\tInteger[] result = conversionService.convert(new int[] {1, 2}, Integer[].class);\n\t\tassertThat(result).containsExactly(1, 2);\n\t}\n\n\t@Test\n\tvoid convertObjectArrayToIntegerArray() {\n\t\tInteger[] result = conversionService.convert(new Object[] {1, 2, 3}, Integer[].class);\n\t\tassertThat(result).containsExactly(1, 2, 3);\n\t}\n\n\t@Test\n\tvoid convertObjectArrayToIntArray() {\n\t\tint[] result = conversionService.convert(new Object[] {1, 2, 3}, int[].class);\n\t\tassertThat(result).containsExactly(1, 2, 3);\n\t}\n\n\t@Test  // gh-33212\n\tvoid convertIntArrayToObjectArray() {\n\t\tObject[] result = conversionService.convert(new int[] {1, 2}, Object[].class);\n\t\tassertThat(result).containsExactly(1, 2);\n\t}\n\n\t@Test\n\tvoid convertIntArrayToFloatArray() {\n\t\tFloat[] result = conversionService.convert(new int[] {1, 2}, Float[].class);\n\t\tassertThat(result).containsExactly(1.0F, 2.0F);\n\t}\n\n\t@Test\n\tvoid convertIntArrayToPrimitiveFloatArray() {\n\t\tfloat[] result = conversionService.convert(new int[] {1, 2}, float[].class);\n\t\tassertThat(result).containsExactly(1.0F, 2.0F);\n\t}\n\n\t@Test\n\tvoid convertPrimitiveByteArrayToByteWrapperArray() {\n\t\tbyte[] byteArray = {1, 2, 3};\n\t\tByte[] converted = conversionService.convert(byteArray, Byte[].class);\n\t\tassertThat(converted).isEqualTo(new Byte[]{1, 2, 3});\n\t}\n\n\t@Test  // gh-14200, SPR-9566\n\tvoid convertPrimitiveByteArrayToPrimitiveByteArray() {\n\t\tbyte[] byteArray = new byte[] {1, 2, 3};\n\t\tbyte[] result = conversionService.convert(byteArray, byte[].class);\n\t\tassertThat(result).isSameAs(byteArray);\n\t\tassertThat(result).containsExactly(1, 2, 3);\n\t}\n\n\t@Test  // gh-14200, SPR-9566\n\tvoid convertIntArrayToIntArray() {\n\t\tint[] intArray = new int[] {1, 2, 3};\n\t\tint[] result = conversionService.convert(intArray, int[].class);\n\t\tassertThat(result).isSameAs(intArray);\n\t\tassertThat(result).containsExactly(1, 2, 3);\n\t}\n\n\t@Test\n\tvoid convertListOfNonStringifiable() {\n\t\tList<Object> list = List.of(new TestEntity(1L), new TestEntity(2L));\n\t\tassertThat(conversionService.canConvert(list.getClass(), String.class)).isTrue();\n\t\ttry {\n\t\t\tconversionService.convert(list, String.class);\n\t\t}\n\t\tcatch (ConversionFailedException ex) {\n\t\t\tassertThat(ex.getMessage()).contains(list.getClass().getName());\n\t\t\tassertThat(ex.getCause()).isInstanceOf(ConverterNotFoundException.class);\n\t\t\tassertThat(ex.getCause().getMessage()).contains(TestEntity.class.getName());\n\t\t}\n\t}\n\n\t@Test\n\tvoid convertListOfStringToString() {\n\t\tList<String> list = List.of(\"Foo\", \"Bar\");\n\t\tassertThat(conversionService.canConvert(list.getClass(), String.class)).isTrue();\n\t\tString result = conversionService.convert(list, String.class);\n\t\tassertThat(result).isEqualTo(\"Foo,Bar\");\n\t}\n\n\t@Test\n\tvoid convertListOfListToString() {\n\t\tList<String> list1 = List.of(\"Foo\", \"Bar\");\n\t\tList<String> list2 = List.of(\"Baz\", \"Boop\");\n\t\tList<List<String>> list = List.of(list1, list2);\n\t\tassertThat(conversionService.canConvert(list.getClass(), String.class)).isTrue();\n\t\tString result = conversionService.convert(list, String.class);\n\t\tassertThat(result).isEqualTo(\"Foo,Bar,Baz,Boop\");\n\t}\n\n\t@Test\n\tvoid convertCollectionToCollection() throws Exception {\n\t\tSet<String> foo = new LinkedHashSet<>();\n\t\tfoo.add(\"1\");\n\t\tfoo.add(\"2\");\n\t\tfoo.add(\"3\");\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tList<Integer> bar = (List<Integer>) conversionService.convert(foo,\n\t\t\t\tnew TypeDescriptor(getClass().getField(\"genericList\")));\n\t\tassertThat(bar).containsExactly(1, 2, 3);\n\t}\n\n\t@Test\n\tvoid convertCollectionToCollectionNull() throws Exception {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tList<Integer> bar = (List<Integer>) conversionService.convert(null,\n\t\t\t\tTypeDescriptor.valueOf(LinkedHashSet.class), new TypeDescriptor(getClass().getField(\"genericList\")));\n\t\tassertThat(bar).isNull();\n\t}\n\n\t@Test\n\t@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n\tvoid convertCollectionToCollectionNotGeneric() {\n\t\tSet<String> foo = new LinkedHashSet<>();\n\t\tfoo.add(\"1\");\n\t\tfoo.add(\"2\");\n\t\tfoo.add(\"3\");\n\t\tList bar = (List) conversionService.convert(foo, TypeDescriptor.valueOf(LinkedHashSet.class), TypeDescriptor.valueOf(List.class));\n\t\tassertThat(bar).containsExactly(\"1\", \"2\", \"3\");\n\t}\n\n\t@Test\n\t@SuppressWarnings({\"unchecked\", \"rawtypes\"})\n\tvoid convertCollectionToCollectionSpecialCaseSourceImpl() throws Exception {\n\t\tMap map = new LinkedHashMap();\n\t\tmap.put(\"1\", \"1\");\n\t\tmap.put(\"2\", \"2\");\n\t\tmap.put(\"3\", \"3\");\n\t\tCollection values = map.values();\n\t\tList<Integer> bar = (List<Integer>) conversionService.convert(values,\n\t\t\t\tTypeDescriptor.forObject(values), new TypeDescriptor(getClass().getField(\"genericList\")));\n\t\tassertThat(bar).containsExactly(1, 2, 3);\n\t}\n\n\t@Test\n\tvoid collection() {\n\t\tList<String> strings = List.of(\"3\", \"9\");\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tList<Integer> integers = (List<Integer>) conversionService.convert(strings,\n\t\t\t\tTypeDescriptor.collection(List.class, TypeDescriptor.valueOf(Integer.class)));\n\t\tassertThat(integers).containsExactly(3, 9);\n\t}\n\n\t@Test\n\tvoid convertMapToMap() throws Exception {\n\t\tMap<String, String> foo = Map.of(\"1\", \"BAR\", \"2\", \"BAZ\");\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tMap<Integer, Foo> map = (Map<Integer, Foo>) conversionService.convert(foo,\n\t\t\t\tTypeDescriptor.forObject(foo), new TypeDescriptor(getClass().getField(\"genericMap\")));\n\t\tassertThat(map).contains(entry(1, Foo.BAR), entry(2, Foo.BAZ));\n\t}\n\n\t@Test\n\tvoid convertHashMapValuesToList() {\n\t\tMap<String, Integer> hashMap = new LinkedHashMap<>();\n\t\thashMap.put(\"1\", 1);\n\t\thashMap.put(\"2\", 2);\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tList<Integer> converted = conversionService.convert(hashMap.values(), List.class);\n\t\tassertThat(converted).containsExactly(1, 2);\n\t}\n\n\t@Test\n\tvoid map() {\n\t\tMap<String, String> strings = new HashMap<>();\n\t\tstrings.put(\"3\", \"9\");\n\t\tstrings.put(\"6\", \"31\");\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tMap<Integer, Integer> integers = (Map<Integer, Integer>) conversionService.convert(strings,\n\t\t\t\tTypeDescriptor.map(Map.class, TypeDescriptor.valueOf(Integer.class), TypeDescriptor.valueOf(Integer.class)));\n\t\tassertThat(integers).contains(entry(3, 9), entry(6, 31));\n\t}\n\n\t@Test\n\tvoid convertPropertiesToString() {\n\t\tProperties foo = new Properties();\n\t\tfoo.setProperty(\"1\", \"BAR\");\n\t\tfoo.setProperty(\"2\", \"BAZ\");\n\t\tString result = conversionService.convert(foo, String.class);\n\t\tassertThat(result).contains(\"1=BAR\", \"2=BAZ\");\n\t}\n\n\t@Test\n\tvoid convertStringToProperties() {\n\t\tProperties result = conversionService.convert(\"\"\"\n\t\t\t\ta=b\n\t\t\t\tc=2\n\t\t\t\td=\"\"\", Properties.class);\n\t\tassertThat(result).contains(entry(\"a\", \"b\"), entry(\"c\", \"2\"), entry(\"d\", \"\"));\n\t}\n\n\t@Test\n\tvoid convertStringToPropertiesWithLeadingSpaces() {\n\t\tProperties result = conversionService.convert(\"\"\"\n\t\t\t\t\\s  foo=bar\n\t\t\t\t\\s   bar=baz\n\t\t\t\t\\s    baz=boo\"\"\", Properties.class);\n\t\tassertThat(result).contains(entry(\"foo\", \"bar\"), entry(\"bar\", \"baz\"), entry(\"baz\", \"boo\"));\n\t}\n\n\t// generic object conversion\n\n\t@Test\n\tvoid convertObjectToStringWithValueOfMethodPresentUsingToString() {\n\t\tISBN.reset();\n\t\tassertThat(conversionService.convert(new ISBN(\"123456789\"), String.class)).isEqualTo(\"123456789\");\n\n\t\tassertThat(ISBN.constructorCount).as(\"constructor invocations\").isEqualTo(1);\n\t\tassertThat(ISBN.valueOfCount).as(\"valueOf() invocations\").isEqualTo(0);\n\t\tassertThat(ISBN.toStringCount).as(\"toString() invocations\").isEqualTo(1);\n\t}\n\n\t/**\n\t * @see org.springframework.core.convert.support.ObjectToObjectConverterTests\n\t */\n\t@Test\n\tvoid convertObjectToObjectUsingValueOfMethod() {\n\t\tISBN.reset();\n\t\tassertThat(conversionService.convert(\"123456789\", ISBN.class)).isEqualTo(new ISBN(\"123456789\"));\n\n\t\tassertThat(ISBN.valueOfCount).as(\"valueOf() invocations\").isEqualTo(1);\n\t\t// valueOf() invokes the constructor\n\t\tassertThat(ISBN.constructorCount).as(\"constructor invocations\").isEqualTo(2);\n\t\tassertThat(ISBN.toStringCount).as(\"toString() invocations\").isEqualTo(0);\n\t}\n\n\t@Test\n\tvoid convertObjectToStringUsingToString() {\n\t\tSSN.reset();\n\t\tassertThat(conversionService.convert(new SSN(\"123456789\"), String.class)).isEqualTo(\"123456789\");\n\n\t\tassertThat(SSN.constructorCount).as(\"constructor invocations\").isEqualTo(1);\n\t\tassertThat(SSN.toStringCount).as(\"toString() invocations\").isEqualTo(1);\n\t}\n\n\t@Test\n\tvoid convertObjectToObjectUsingObjectConstructor() {\n\t\tSSN.reset();\n\t\tassertThat(conversionService.convert(\"123456789\", SSN.class)).isEqualTo(new SSN(\"123456789\"));\n\n\t\tassertThat(SSN.constructorCount).as(\"constructor invocations\").isEqualTo(2);\n\t\tassertThat(SSN.toStringCount).as(\"toString() invocations\").isEqualTo(0);\n\t}\n\n\t@Test\n\tvoid convertStringToTimezone() {\n\t\tassertThat(conversionService.convert(\"GMT+2\", TimeZone.class).getID()).isEqualTo(\"GMT+02:00\");\n\t}\n\n\t@Test\n\tvoid convertObjectToStringWithJavaTimeOfMethodPresent() {\n\t\tassertThat(conversionService.convert(ZoneId.of(\"GMT+1\"), String.class)).startsWith(\"GMT+\");\n\t}\n\n\t@Test\n\tvoid convertObjectToStringNotSupported() {\n\t\tassertThat(conversionService.canConvert(TestEntity.class, String.class)).isFalse();\n\t}\n\n\t@Test\n\tvoid convertObjectToObjectWithJavaTimeOfMethod() {\n\t\tassertThat(conversionService.convert(\"GMT+1\", ZoneId.class)).isEqualTo(ZoneId.of(\"GMT+1\"));\n\t}\n\n\t@Test\n\tvoid convertObjectToObjectNoValueOfMethodOrConstructor() {\n\t\tassertThatExceptionOfType(ConverterNotFoundException.class)\n\t\t\t\t.isThrownBy(() -> conversionService.convert(3L, SSN.class));\n\t}\n\n\t@Test\n\tvoid convertObjectToObjectFinderMethod() {\n\t\tTestEntity e = conversionService.convert(1L, TestEntity.class);\n\t\tassertThat(e.getId()).isEqualTo(Long.valueOf(1));\n\t}\n\n\t@Test\n\tvoid convertObjectToObjectFinderMethodWithNull() {\n\t\tTestEntity entity = (TestEntity) conversionService.convert(null,\n\t\t\t\tTypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(TestEntity.class));\n\t\tassertThat(entity).isNull();\n\t}\n\n\t@Test\n\tvoid convertObjectToObjectFinderMethodWithIdConversion() {\n\t\tTestEntity entity = conversionService.convert(\"1\", TestEntity.class);\n\t\tassertThat(entity.getId()).isEqualTo(Long.valueOf(1));\n\t}\n\n\t@Test\n\tvoid convertCharArrayToString() {\n\t\tString converted = conversionService.convert(new char[] {'a', 'b', 'c'}, String.class);\n\t\tassertThat(converted).isEqualTo(\"a,b,c\");\n\t}\n\n\t@Test\n\tvoid convertStringToCharArray() {\n\t\tchar[] converted = conversionService.convert(\"a,b,c\", char[].class);\n\t\tassertThat(converted).containsExactly('a', 'b', 'c');\n\t}\n\n\t@Test\n\tvoid convertStringToCustomCharArray() {\n\t\tconversionService.addConverter(String.class, char[].class, String::toCharArray);\n\t\tchar[] converted = conversionService.convert(\"abc\", char[].class);\n\t\tassertThat(converted).containsExactly('a', 'b', 'c');\n\t}\n\n\t@Test\n\t@SuppressWarnings(\"unchecked\")\n\tvoid multidimensionalArrayToListConversionShouldConvertEntriesCorrectly() {\n\t\tString[][] grid = new String[][] {{\"1\", \"2\", \"3\", \"4\"}, {\"5\", \"6\", \"7\", \"8\"}, {\"9\", \"10\", \"11\", \"12\"}};\n\t\tList<String[]> converted = conversionService.convert(grid, List.class);\n\t\tString[][] convertedBack = conversionService.convert(converted, String[][].class);\n\t\tassertThat(convertedBack).isEqualTo(grid);\n\t}\n\n\t@Test\n\tvoid convertCannotOptimizeArray() {\n\t\tconversionService.addConverter(Byte.class, Byte.class, source -> (byte) (source + 1));\n\t\tbyte[] byteArray = {1, 2, 3};\n\t\tbyte[] converted = conversionService.convert(byteArray, byte[].class);\n\t\tassertThat(converted).isNotSameAs(byteArray);\n\t\tassertThat(converted).containsExactly(2, 3, 4);\n\t}\n\n\t@Test\n\t@SuppressWarnings(\"unchecked\")\n\tvoid convertObjectToOptional() {\n\t\tMethod method = ClassUtils.getMethod(TestEntity.class, \"handleOptionalValue\", Optional.class);\n\t\tMethodParameter parameter = new MethodParameter(method, 0);\n\t\tTypeDescriptor descriptor = new TypeDescriptor(parameter);\n\t\tObject actual = conversionService.convert(\"1,2,3\", TypeDescriptor.valueOf(String.class), descriptor);\n\t\tassertThat(actual.getClass()).isEqualTo(Optional.class);\n\t\tassertThat(((Optional<List<Integer>>) actual)).contains(List.of(1, 2, 3));\n\t}\n\n\t@Test\n\tvoid convertObjectToOptionalNull() {\n\t\tassertThat(conversionService.convert(null, TypeDescriptor.valueOf(Object.class),\n\t\t\t\tTypeDescriptor.valueOf(Optional.class))).isSameAs(Optional.empty());\n\t\tassertThat((Object) conversionService.convert(null, Optional.class)).isSameAs(Optional.empty());\n\t}\n\n\t@Test\n\tvoid convertExistingOptional() {\n\t\tassertThat(conversionService.convert(Optional.empty(), TypeDescriptor.valueOf(Object.class),\n\t\t\t\tTypeDescriptor.valueOf(Optional.class))).isSameAs(Optional.empty());\n\t\tassertThat((Object) conversionService.convert(Optional.empty(), Optional.class)).isSameAs(Optional.empty());\n\t}\n\n\n\t// test fields and helpers\n\n\tpublic List<Integer> genericList = new ArrayList<>();\n\n\tpublic Stream<Integer> genericStream;\n\n\tpublic Map<Integer, Foo> genericMap = new HashMap<>();\n\n\tpublic EnumSet<Foo> enumSet;\n\n\tpublic Object assignableTarget;\n\n\n\tpublic void handlerMethod(List<Color> color) {\n\t}\n\n\n\tpublic enum Foo {\n\n\t\tBAR, BAZ\n\t}\n\n\n\tpublic enum SubFoo {\n\n\t\tBAR {\n\t\t\t@Override\n\t\t\tString s() {\n\t\t\t\treturn \"x\";\n\t\t\t}\n\t\t},\n\t\tBAZ {\n\t\t\t@Override\n\t\t\tString s() {\n\t\t\t\treturn \"y\";\n\t\t\t}\n\t\t};\n\n\t\tabstract String s();\n\t}\n\n\n\tpublic class ColorConverter implements Converter<String, Color> {\n\n\t\t@Override\n\t\tpublic Color convert(String source) {\n\t\t\tif (!source.startsWith(\"#\")) {\n\t\t\t\tsource = \"#\" + source;\n\t\t\t}\n\t\t\treturn Color.decode(source);\n\t\t}\n\t}\n\n\n\t@SuppressWarnings(\"serial\")\n\tpublic static class CustomNumber extends Number {\n\n\t\t@Override\n\t\tpublic double doubleValue() {\n\t\t\treturn 0;\n\t\t}\n\n\t\t@Override\n\t\tpublic float floatValue() {\n\t\t\treturn 0;\n\t\t}\n\n\t\t@Override\n\t\tpublic int intValue() {\n\t\t\treturn 0;\n\t\t}\n\n\t\t@Override\n\t\tpublic long longValue() {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\n\tpublic static class TestEntity {\n\n\t\tprivate Long id;\n\n\t\tpublic TestEntity(Long id) {\n\t\t\tthis.id = id;\n\t\t}\n\n\t\tpublic Long getId() {\n\t\t\treturn id;\n\t\t}\n\n\t\tpublic static TestEntity findTestEntity(Long id) {\n\t\t\treturn new TestEntity(id);\n\t\t}\n\n\t\tpublic void handleOptionalValue(Optional<List<Integer>> value) {\n\t\t}\n\t}\n\n\n\tprivate static class ListWrapper {\n\n\t\tprivate List<?> list;\n\n\t\tpublic ListWrapper(List<?> list) {\n\t\t\tthis.list = list;\n\t\t}\n\n\t\tpublic List<?> getList() {\n\t\t\treturn list;\n\t\t}\n\t}\n\n\n\tprivate static class SSN {\n\n\t\tstatic int constructorCount = 0;\n\n\t\tstatic int toStringCount = 0;\n\n\t\tstatic void reset() {\n\t\t\tconstructorCount = 0;\n\t\t\ttoStringCount = 0;\n\t\t}\n\n\t\tprivate final String value;\n\n\t\tpublic SSN(String value) {\n\t\t\tconstructorCount++;\n\t\t\tthis.value = value;\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean equals(@Nullable Object o) {\n\t\t\tif (!(o instanceof SSN ssn)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn this.value.equals(ssn.value);\n\t\t}\n\n\t\t@Override\n\t\tpublic int hashCode() {\n\t\t\treturn value.hashCode();\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\ttoStringCount++;\n\t\t\treturn value;\n\t\t}\n\t}\n\n\n\tprivate static class ISBN {\n\n\t\tstatic int constructorCount = 0;\n\t\tstatic int toStringCount = 0;\n\t\tstatic int valueOfCount = 0;\n\n\t\tstatic void reset() {\n\t\t\tconstructorCount = 0;\n\t\t\ttoStringCount = 0;\n\t\t\tvalueOfCount = 0;\n\t\t}\n\n\t\tprivate final String value;\n\n\t\tpublic ISBN(String value) {\n\t\t\tconstructorCount++;\n\t\t\tthis.value = value;\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean equals(@Nullable Object o) {\n\t\t\tif (!(o instanceof ISBN isbn)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn this.value.equals(isbn.value);\n\t\t}\n\n\t\t@Override\n\t\tpublic int hashCode() {\n\t\t\treturn value.hashCode();\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\ttoStringCount++;\n\t\t\treturn value;\n\t\t}\n\n\t\t@SuppressWarnings(\"unused\")\n\t\tpublic static ISBN valueOf(String value) {\n\t\t\tvalueOfCount++;\n\t\t\treturn new ISBN(value);\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.convert.converter.ListWrapper",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.converter.ListWrapper#list",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.converter.ListWrapper#list",
    "headType": "field",
    "relation": "haveType",
    "tail": "List<?>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.converter.ListWrapper#getList()",
    "headType": "method",
    "relation": "provide",
    "tail": "public List<?> getList() {\r\n    return list;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.ListWrapper",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.ListWrapper#getList()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.converter.SSN",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.converter.SSN",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert.converter;\n\nimport java.awt.Color;\nimport java.lang.reflect.Method;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport java.nio.charset.Charset;\nimport java.nio.charset.StandardCharsets;\nimport java.time.ZoneId;\nimport java.util.AbstractList;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Currency;\nimport java.util.EnumSet;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.TimeZone;\nimport java.util.UUID;\nimport java.util.regex.Pattern;\nimport java.util.stream.Stream;\n\nimport org.jspecify.annotations.Nullable;\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.core.MethodParameter;\nimport org.springframework.core.convert.ConversionFailedException;\nimport org.springframework.core.convert.ConverterNotFoundException;\nimport org.springframework.core.convert.TypeDescriptor;\nimport org.springframework.core.convert.support.DefaultConversionService;\nimport org.springframework.util.ClassUtils;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatExceptionOfType;\nimport static org.assertj.core.api.Assertions.entry;\n\n/**\n * Tests for {@link DefaultConversionService}.\n *\n * <p>In this package for enforcing accessibility checks to non-public classes outside\n * the {@code org.springframework.core.convert.support} implementation package.\n * Only in such a scenario, {@code setAccessible(true)} is actually necessary.\n *\n * @author Keith Donald\n * @author Juergen Hoeller\n * @author Stephane Nicoll\n * @author Sam Brannen\n */\nclass DefaultConversionServiceTests {\n\n\tprivate final DefaultConversionService conversionService = new DefaultConversionService();\n\n\n\t@Test\n\tvoid stringToCharacter() {\n\t\tassertThat(conversionService.convert(\"1\", Character.class)).isEqualTo(Character.valueOf('1'));\n\t}\n\n\t@Test\n\tvoid stringToCharacterEmptyString() {\n\t\tassertThat(conversionService.convert(\"\", Character.class)).isNull();\n\t}\n\n\t@Test\n\tvoid stringToCharacterInvalidString() {\n\t\tassertThatExceptionOfType(ConversionFailedException.class).isThrownBy(() ->\n\t\t\t\tconversionService.convert(\"invalid\", Character.class));\n\t}\n\n\t@Test\n\tvoid characterToString() {\n\t\tassertThat(conversionService.convert('3', String.class)).isEqualTo(\"3\");\n\t}\n\n\t@Test\n\tvoid stringToBooleanTrue() {\n\t\tassertThat(conversionService.convert(\"true\", Boolean.class)).isTrue();\n\t\tassertThat(conversionService.convert(\"on\", Boolean.class)).isTrue();\n\t\tassertThat(conversionService.convert(\"yes\", Boolean.class)).isTrue();\n\t\tassertThat(conversionService.convert(\"1\", Boolean.class)).isTrue();\n\t\tassertThat(conversionService.convert(\"TRUE\", Boolean.class)).isTrue();\n\t\tassertThat(conversionService.convert(\"ON\", Boolean.class)).isTrue();\n\t\tassertThat(conversionService.convert(\"YES\", Boolean.class)).isTrue();\n\t}\n\n\t@Test\n\tvoid stringToBooleanFalse() {\n\t\tassertThat(conversionService.convert(\"false\", Boolean.class)).isFalse();\n\t\tassertThat(conversionService.convert(\"off\", Boolean.class)).isFalse();\n\t\tassertThat(conversionService.convert(\"no\", Boolean.class)).isFalse();\n\t\tassertThat(conversionService.convert(\"0\", Boolean.class)).isFalse();\n\t\tassertThat(conversionService.convert(\"FALSE\", Boolean.class)).isFalse();\n\t\tassertThat(conversionService.convert(\"OFF\", Boolean.class)).isFalse();\n\t\tassertThat(conversionService.convert(\"NO\", Boolean.class)).isFalse();\n\t}\n\n\t@Test\n\tvoid stringToBooleanEmptyString() {\n\t\tassertThat(conversionService.convert(\"\", Boolean.class)).isNull();\n\t}\n\n\t@Test\n\tvoid stringToBooleanInvalidString() {\n\t\tassertThatExceptionOfType(ConversionFailedException.class).isThrownBy(() ->\n\t\t\t\tconversionService.convert(\"invalid\", Boolean.class));\n\t}\n\n\t@Test\n\tvoid booleanToString() {\n\t\tassertThat(conversionService.convert(true, String.class)).isEqualTo(\"true\");\n\t}\n\n\t@Test\n\tvoid stringToByte() {\n\t\tassertThat(conversionService.convert(\"1\", Byte.class)).isEqualTo((byte) 1);\n\t}\n\n\t@Test\n\tvoid byteToString() {\n\t\tassertThat(conversionService.convert(\"A\".getBytes()[0], String.class)).isEqualTo(\"65\");\n\t}\n\n\t@Test\n\tvoid stringToShort() {\n\t\tassertThat(conversionService.convert(\"1\", Short.class)).isEqualTo((short) 1);\n\t}\n\n\t@Test\n\tvoid shortToString() {\n\t\tshort three = 3;\n\t\tassertThat(conversionService.convert(three, String.class)).isEqualTo(\"3\");\n\t}\n\n\t@Test\n\tvoid stringToInteger() {\n\t\tassertThat(conversionService.convert(\"1\", Integer.class)).isEqualTo(1);\n\t}\n\n\t@Test\n\tvoid integerToString() {\n\t\tassertThat(conversionService.convert(3, String.class)).isEqualTo(\"3\");\n\t}\n\n\t@Test\n\tvoid stringToLong() {\n\t\tassertThat(conversionService.convert(\"1\", Long.class)).isEqualTo(Long.valueOf(1));\n\t}\n\n\t@Test\n\tvoid longToString() {\n\t\tassertThat(conversionService.convert(3L, String.class)).isEqualTo(\"3\");\n\t}\n\n\t@Test\n\tvoid stringToFloat() {\n\t\tassertThat(conversionService.convert(\"1.0\", Float.class)).isEqualTo(Float.valueOf(\"1.0\"));\n\t}\n\n\t@Test\n\tvoid floatToString() {\n\t\tassertThat(conversionService.convert(Float.valueOf(\"1.0\"), String.class)).isEqualTo(\"1.0\");\n\t}\n\n\t@Test\n\tvoid stringToDouble() {\n\t\tassertThat(conversionService.convert(\"1.0\", Double.class)).isEqualTo(Double.valueOf(\"1.0\"));\n\t}\n\n\t@Test\n\tvoid doubleToString() {\n\t\tassertThat(conversionService.convert(Double.valueOf(\"1.0\"), String.class)).isEqualTo(\"1.0\");\n\t}\n\n\t@Test\n\tvoid stringToBigInteger() {\n\t\tassertThat(conversionService.convert(\"1\", BigInteger.class)).isEqualTo(new BigInteger(\"1\"));\n\t}\n\n\t@Test\n\tvoid bigIntegerToString() {\n\t\tassertThat(conversionService.convert(new BigInteger(\"100\"), String.class)).isEqualTo(\"100\");\n\t}\n\n\t@Test\n\tvoid stringToBigDecimal() {\n\t\tassertThat(conversionService.convert(\"1.0\", BigDecimal.class)).isEqualTo(new BigDecimal(\"1.0\"));\n\t}\n\n\t@Test\n\tvoid bigDecimalToString() {\n\t\tassertThat(conversionService.convert(new BigDecimal(\"100.00\"), String.class)).isEqualTo(\"100.00\");\n\t}\n\n\t@Test\n\tvoid stringToNumber() {\n\t\tassertThat(conversionService.convert(\"1.0\", Number.class)).isEqualTo(new BigDecimal(\"1.0\"));\n\t}\n\n\t@Test\n\tvoid stringToNumberEmptyString() {\n\t\tassertThat(conversionService.convert(\"\", Number.class)).isNull();\n\t}\n\n\t@Test\n\tvoid stringToEnum() {\n\t\tassertThat(conversionService.convert(\"BAR\", Foo.class)).isEqualTo(Foo.BAR);\n\t}\n\n\t@Test\n\tvoid stringToEnumWithSubclass() {\n\t\tassertThat(conversionService.convert(\"BAZ\", SubFoo.BAR.getClass())).isEqualTo(SubFoo.BAZ);\n\t}\n\n\t@Test\n\tvoid stringToEnumEmptyString() {\n\t\tassertThat(conversionService.convert(\"\", Foo.class)).isNull();\n\t}\n\n\t@Test\n\tvoid enumToString() {\n\t\tassertThat(conversionService.convert(Foo.BAR, String.class)).isEqualTo(\"BAR\");\n\t}\n\n\t@Test\n\tvoid integerToEnum() {\n\t\tassertThat(conversionService.convert(0, Foo.class)).isEqualTo(Foo.BAR);\n\t}\n\n\t@Test\n\tvoid integerToEnumWithSubclass() {\n\t\tassertThat(conversionService.convert(1, SubFoo.BAR.getClass())).isEqualTo(SubFoo.BAZ);\n\t}\n\n\t@Test\n\tvoid integerToEnumNull() {\n\t\tassertThat(conversionService.convert(null, Foo.class)).isNull();\n\t}\n\n\t@Test\n\tvoid enumToInteger() {\n\t\tassertThat(conversionService.convert(Foo.BAR, Integer.class)).isEqualTo(0);\n\t}\n\n\t@Test\n\tvoid stringToEnumSet() throws Exception {\n\t\tassertThat(conversionService.convert(\"BAR\", TypeDescriptor.valueOf(String.class),\n\t\t\t\tnew TypeDescriptor(getClass().getField(\"enumSet\")))).isEqualTo(EnumSet.of(Foo.BAR));\n\t}\n\n\t@Test\n\tvoid stringToLocale() {\n\t\tassertThat(conversionService.convert(\"en\", Locale.class)).isEqualTo(Locale.ENGLISH);\n\t}\n\n\t@Test\n\tvoid stringToLocaleWithCountry() {\n\t\tassertThat(conversionService.convert(\"en_US\", Locale.class)).isEqualTo(Locale.US);\n\t}\n\n\t@Test\n\tvoid stringToLocaleWithLanguageTag() {\n\t\tassertThat(conversionService.convert(\"en-US\", Locale.class)).isEqualTo(Locale.US);\n\t}\n\n\t@Test\n\tvoid stringToCharset() {\n\t\tassertThat(conversionService.convert(\"UTF-8\", Charset.class)).isEqualTo(StandardCharsets.UTF_8);\n\t}\n\n\t@Test\n\tvoid charsetToString() {\n\t\tassertThat(conversionService.convert(StandardCharsets.UTF_8, String.class)).isEqualTo(\"UTF-8\");\n\t}\n\n\t@Test\n\tvoid stringToCurrency() {\n\t\tassertThat(conversionService.convert(\"EUR\", Currency.class)).isEqualTo(Currency.getInstance(\"EUR\"));\n\t}\n\n\t@Test\n\tvoid currencyToString() {\n\t\tassertThat(conversionService.convert(Currency.getInstance(\"USD\"), String.class)).isEqualTo(\"USD\");\n\t}\n\n\t@Test\n\tvoid stringToString() {\n\t\tString str = \"test\";\n\t\tassertThat(conversionService.convert(str, String.class)).isSameAs(str);\n\t}\n\n\t@Test\n\tvoid uuidToStringAndStringToUuid() {\n\t\tUUID uuid = UUID.randomUUID();\n\t\tString convertToString = conversionService.convert(uuid, String.class);\n\t\tUUID convertToUUID = conversionService.convert(convertToString, UUID.class);\n\t\tassertThat(convertToUUID).isEqualTo(uuid);\n\t}\n\n\t@Test\n\tvoid stringToPatternEmptyString() {\n\t\tassertThat(conversionService.convert(\"\", Pattern.class)).isNull();\n\t}\n\n\t@Test\n\tvoid stringToPattern() {\n\t\tString pattern = \"\\\\s\";\n\t\tassertThat(conversionService.convert(pattern, Pattern.class))\n\t\t\t\t.isInstanceOfSatisfying(Pattern.class, regex -> assertThat(regex.pattern()).isEqualTo(pattern));\n\t}\n\n\t@Test\n\tvoid patternToString() {\n\t\tString regex = \"\\\\d\";\n\t\tassertThat(conversionService.convert(Pattern.compile(regex), String.class)).isEqualTo(regex);\n\t}\n\n\t@Test\n\tvoid numberToNumber() {\n\t\tassertThat(conversionService.convert(1, Long.class)).isEqualTo(Long.valueOf(1));\n\t}\n\n\t@Test\n\tvoid numberToNumberNotSupportedNumber() {\n\t\tassertThatExceptionOfType(ConversionFailedException.class)\n\t\t\t\t.isThrownBy(() -> conversionService.convert(1, CustomNumber.class));\n\t}\n\n\t@Test\n\tvoid numberToCharacter() {\n\t\tassertThat(conversionService.convert(65, Character.class)).isEqualTo(Character.valueOf('A'));\n\t}\n\n\t@Test\n\tvoid characterToNumber() {\n\t\tassertThat(conversionService.convert('A', Integer.class)).isEqualTo(65);\n\t}\n\n\t// collection conversion\n\n\t@Test\n\tvoid convertArrayToCollectionInterface() {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tCollection<String> result = conversionService.convert(new String[] {\"1\", \"2\", \"3\"}, Collection.class);\n\t\tassertThat(result).isEqualTo(List.of(\"1\", \"2\", \"3\"));\n\t\tassertThat(result).isExactlyInstanceOf(ArrayList.class).containsExactly(\"1\", \"2\", \"3\");\n\t}\n\n\t@Test\n\tvoid convertArrayToSetInterface() {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tCollection<String> result = conversionService.convert(new String[] {\"1\", \"2\", \"3\"}, Set.class);\n\t\tassertThat(result).isExactlyInstanceOf(LinkedHashSet.class).containsExactly(\"1\", \"2\", \"3\");\n\t}\n\n\t@Test\n\tvoid convertArrayToListInterface() {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tList<String> result = conversionService.convert(new String[] {\"1\", \"2\", \"3\"}, List.class);\n\t\tassertThat(result).isExactlyInstanceOf(ArrayList.class).containsExactly(\"1\", \"2\", \"3\");\n\t}\n\n\t@Test\n\tvoid convertArrayToCollectionGenericTypeConversion() throws Exception {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tList<Integer> result = (List<Integer>) conversionService.convert(new String[] {\"1\", \"2\", \"3\"},\n\t\t\t\tTypeDescriptor.valueOf(String[].class), new TypeDescriptor(getClass().getDeclaredField(\"genericList\")));\n\t\tassertThat(result).isExactlyInstanceOf(ArrayList.class).containsExactly(1, 2, 3);\n\t}\n\n\t@Test\n\tvoid convertArrayToStream() throws Exception {\n\t\tString[] source = {\"1\", \"3\", \"4\"};\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tStream<Integer> result = (Stream<Integer>) this.conversionService.convert(source,\n\t\t\t\tTypeDescriptor.valueOf(String[].class), new TypeDescriptor(getClass().getDeclaredField(\"genericStream\")));\n\t\tassertThat(result).containsExactly(1, 3, 4);\n\t}\n\n\t@Test\n\tvoid spr7766() throws Exception {\n\t\tconversionService.addConverter(new ColorConverter());\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tList<Color> colors = (List<Color>) conversionService.convert(new String[] {\"ffffff\", \"#000000\"},\n\t\t\t\tTypeDescriptor.valueOf(String[].class),\n\t\t\t\tnew TypeDescriptor(new MethodParameter(getClass().getMethod(\"handlerMethod\", List.class), 0)));\n\t\tassertThat(colors).containsExactly(Color.WHITE, Color.BLACK);\n\t}\n\n\t@Test\n\tvoid convertArrayToCollectionImpl() {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tArrayList<String> result = conversionService.convert(new String[] {\"1\", \"2\", \"3\"}, ArrayList.class);\n\t\tassertThat(result).isExactlyInstanceOf(ArrayList.class).containsExactly(\"1\", \"2\", \"3\");\n\t}\n\n\t@Test\n\tvoid convertArrayToAbstractCollection() {\n\t\tassertThatExceptionOfType(ConversionFailedException.class)\n\t\t\t\t.isThrownBy(() -> conversionService.convert(new String[]{\"1\", \"2\", \"3\"}, AbstractList.class));\n\t}\n\n\t@Test\n\tvoid convertArrayToString() {\n\t\tString result = conversionService.convert(new String[] {\"1\", \"2\", \"3\"}, String.class);\n\t\tassertThat(result).isEqualTo(\"1,2,3\");\n\t}\n\n\t@Test\n\tvoid convertArrayToStringWithElementConversion() {\n\t\tString result = conversionService.convert(new Integer[] {1, 2, 3}, String.class);\n\t\tassertThat(result).isEqualTo(\"1,2,3\");\n\t}\n\n\t@Test\n\tvoid convertEmptyArrayToString() {\n\t\tString result = conversionService.convert(new String[0], String.class);\n\t\tassertThat(result).isEmpty();\n\t}\n\n\t@Test\n\tvoid convertStringToArray() {\n\t\tString[] result = conversionService.convert(\"1,2,3\", String[].class);\n\t\tassertThat(result).containsExactly(\"1\", \"2\", \"3\");\n\t}\n\n\t@Test\n\tvoid convertStringToArrayWithElementConversion() {\n\t\tInteger[] result = conversionService.convert(\"1,2,3\", Integer[].class);\n\t\tassertThat(result).containsExactly(1, 2, 3);\n\t}\n\n\t@Test\n\tvoid convertStringToPrimitiveArrayWithElementConversion() {\n\t\tint[] result = conversionService.convert(\"1,2,3\", int[].class);\n\t\tassertThat(result).containsExactly(1, 2, 3);\n\t}\n\n\t@Test\n\tvoid convertEmptyStringToArray() {\n\t\tString[] result = conversionService.convert(\"\", String[].class);\n\t\tassertThat(result).isEmpty();\n\t}\n\n\t@Test\n\tvoid convertArrayToObject() {\n\t\tObject[] array = new Object[] {3L};\n\t\tObject result = conversionService.convert(array, Long.class);\n\t\tassertThat(result).isEqualTo(3L);\n\t}\n\n\t@Test\n\tvoid convertArrayToObjectWithElementConversion() {\n\t\tString[] array = new String[] {\"3\"};\n\t\tInteger result = conversionService.convert(array, Integer.class);\n\t\tassertThat(result).isEqualTo(3);\n\t}\n\n\t@Test\n\tvoid convertArrayToObjectAssignableTargetType() {\n\t\tLong[] array = new Long[] {3L};\n\t\tLong[] result = (Long[]) conversionService.convert(array, Object.class);\n\t\tassertThat(result).isEqualTo(array);\n\t}\n\n\t@Test\n\tvoid convertObjectToArray() {\n\t\tObject[] result = conversionService.convert(3L, Object[].class);\n\t\tassertThat(result).containsExactly(3L);\n\t}\n\n\t@Test\n\tvoid convertObjectToArrayWithElementConversion() {\n\t\tInteger[] result = conversionService.convert(3L, Integer[].class);\n\t\tassertThat(result).containsExactly(3);\n\t}\n\n\t@Test\n\tvoid convertCollectionToArray() {\n\t\tList<String> list = List.of(\"1\", \"2\", \"3\");\n\t\tString[] result = conversionService.convert(list, String[].class);\n\t\tassertThat(result).containsExactly(\"1\", \"2\", \"3\");\n\t}\n\n\t@Test\n\tvoid convertCollectionToArrayWithElementConversion() {\n\t\tList<String> list = List.of(\"1\", \"2\", \"3\");\n\t\tInteger[] result = conversionService.convert(list, Integer[].class);\n\t\tassertThat(result).containsExactly(1, 2, 3);\n\t}\n\n\t@Test\n\tvoid convertCollectionToString() {\n\t\tList<String> list = List.of(\"foo\", \"bar\");\n\t\tString result = conversionService.convert(list, String.class);\n\t\tassertThat(result).isEqualTo(\"foo,bar\");\n\t}\n\n\t@Test\n\tvoid convertCollectionToStringWithElementConversion() throws Exception {\n\t\tList<Integer> list = List.of(3, 5);\n\t\tString result = (String) conversionService.convert(list,\n\t\t\t\tnew TypeDescriptor(getClass().getField(\"genericList\")), TypeDescriptor.valueOf(String.class));\n\t\tassertThat(result).isEqualTo(\"3,5\");\n\t}\n\n\t@Test\n\tvoid convertStringToCollection() {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tList<String> result = conversionService.convert(\"1,2,3\", List.class);\n\t\tassertThat(result).containsExactly(\"1\", \"2\", \"3\");\n\t}\n\n\t@Test\n\tvoid convertStringToCollectionWithElementConversion() throws Exception {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tList<Integer> result = (List<Integer>) conversionService.convert(\"1,2,3\", TypeDescriptor.valueOf(String.class),\n\t\t\t\tnew TypeDescriptor(getClass().getField(\"genericList\")));\n\t\tassertThat(result).containsExactly(1, 2, 3);\n\t}\n\n\t@Test\n\tvoid convertEmptyStringToCollection() {\n\t\tCollection<?> result = conversionService.convert(\"\", Collection.class);\n\t\tassertThat(result).isEmpty();\n\t}\n\n\t@Test\n\tvoid convertCollectionToObject() {\n\t\tList<Long> list = Collections.singletonList(3L);\n\t\tLong result = conversionService.convert(list, Long.class);\n\t\tassertThat(result).isEqualTo(3L);\n\t}\n\n\t@Test\n\tvoid convertCollectionToObjectWithElementConversion() {\n\t\tList<String> list = Collections.singletonList(\"3\");\n\t\tInteger result = conversionService.convert(list, Integer.class);\n\t\tassertThat(result).isEqualTo(3);\n\t}\n\n\t@Test\n\tvoid convertCollectionToObjectAssignableTarget() throws Exception {\n\t\tCollection<String> source = List.of(\"foo\");\n\t\tObject result = conversionService.convert(source, new TypeDescriptor(getClass().getField(\"assignableTarget\")));\n\t\tassertThat(result).isSameAs(source);\n\t}\n\n\t@Test\n\tvoid convertCollectionToObjectWithCustomConverter() {\n\t\tList<String> source = List.of(\"A\", \"B\");\n\t\tconversionService.addConverter(List.class, ListWrapper.class, ListWrapper::new);\n\t\tListWrapper result = conversionService.convert(source, ListWrapper.class);\n\t\tassertThat(result.getList()).isSameAs(source);\n\t}\n\n\t@Test\n\tvoid convertObjectToCollection() {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tList<Long> result = conversionService.convert(3L, List.class);\n\t\tassertThat(result).containsExactly(3L);\n\t}\n\n\t@Test\n\tvoid convertObjectToCollectionWithElementConversion() throws Exception {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tList<Integer> result = (List<Integer>) conversionService.convert(3L, TypeDescriptor.valueOf(Long.class),\n\t\t\t\tnew TypeDescriptor(getClass().getField(\"genericList\")));\n\t\tassertThat(result).containsExactly(3);\n\t}\n\n\t@Test\n\tvoid convertStringArrayToIntegerArray() {\n\t\tInteger[] result = conversionService.convert(new String[] {\"1\", \"2\", \"3\"}, Integer[].class);\n\t\tassertThat(result).containsExactly(1, 2, 3);\n\t}\n\n\t@Test\n\tvoid convertStringArrayToIntArray() {\n\t\tint[] result = conversionService.convert(new String[] {\"1\", \"2\", \"3\"}, int[].class);\n\t\tassertThat(result).containsExactly(1, 2, 3);\n\t}\n\n\t@Test\n\tvoid convertIntArrayToStringArray() {\n\t\tString[] result = conversionService.convert(new int[] {1, 2, 3}, String[].class);\n\t\tassertThat(result).containsExactly(\"1\", \"2\", \"3\");\n\t}\n\n\t@Test\n\tvoid convertIntegerArrayToIntegerArray() {\n\t\tInteger[] result = conversionService.convert(new Integer[] {1, 2, 3}, Integer[].class);\n\t\tassertThat(result).containsExactly(1, 2, 3);\n\t}\n\n\t@Test\n\tvoid convertIntegerArrayToIntArray() {\n\t\tint[] result = conversionService.convert(new Integer[] {1, 2, 3}, int[].class);\n\t\tassertThat(result).containsExactly(1, 2, 3);\n\t}\n\n\t@Test\n\tvoid convertIntArrayToIntegerArray() {\n\t\tInteger[] result = conversionService.convert(new int[] {1, 2}, Integer[].class);\n\t\tassertThat(result).containsExactly(1, 2);\n\t}\n\n\t@Test\n\tvoid convertObjectArrayToIntegerArray() {\n\t\tInteger[] result = conversionService.convert(new Object[] {1, 2, 3}, Integer[].class);\n\t\tassertThat(result).containsExactly(1, 2, 3);\n\t}\n\n\t@Test\n\tvoid convertObjectArrayToIntArray() {\n\t\tint[] result = conversionService.convert(new Object[] {1, 2, 3}, int[].class);\n\t\tassertThat(result).containsExactly(1, 2, 3);\n\t}\n\n\t@Test  // gh-33212\n\tvoid convertIntArrayToObjectArray() {\n\t\tObject[] result = conversionService.convert(new int[] {1, 2}, Object[].class);\n\t\tassertThat(result).containsExactly(1, 2);\n\t}\n\n\t@Test\n\tvoid convertIntArrayToFloatArray() {\n\t\tFloat[] result = conversionService.convert(new int[] {1, 2}, Float[].class);\n\t\tassertThat(result).containsExactly(1.0F, 2.0F);\n\t}\n\n\t@Test\n\tvoid convertIntArrayToPrimitiveFloatArray() {\n\t\tfloat[] result = conversionService.convert(new int[] {1, 2}, float[].class);\n\t\tassertThat(result).containsExactly(1.0F, 2.0F);\n\t}\n\n\t@Test\n\tvoid convertPrimitiveByteArrayToByteWrapperArray() {\n\t\tbyte[] byteArray = {1, 2, 3};\n\t\tByte[] converted = conversionService.convert(byteArray, Byte[].class);\n\t\tassertThat(converted).isEqualTo(new Byte[]{1, 2, 3});\n\t}\n\n\t@Test  // gh-14200, SPR-9566\n\tvoid convertPrimitiveByteArrayToPrimitiveByteArray() {\n\t\tbyte[] byteArray = new byte[] {1, 2, 3};\n\t\tbyte[] result = conversionService.convert(byteArray, byte[].class);\n\t\tassertThat(result).isSameAs(byteArray);\n\t\tassertThat(result).containsExactly(1, 2, 3);\n\t}\n\n\t@Test  // gh-14200, SPR-9566\n\tvoid convertIntArrayToIntArray() {\n\t\tint[] intArray = new int[] {1, 2, 3};\n\t\tint[] result = conversionService.convert(intArray, int[].class);\n\t\tassertThat(result).isSameAs(intArray);\n\t\tassertThat(result).containsExactly(1, 2, 3);\n\t}\n\n\t@Test\n\tvoid convertListOfNonStringifiable() {\n\t\tList<Object> list = List.of(new TestEntity(1L), new TestEntity(2L));\n\t\tassertThat(conversionService.canConvert(list.getClass(), String.class)).isTrue();\n\t\ttry {\n\t\t\tconversionService.convert(list, String.class);\n\t\t}\n\t\tcatch (ConversionFailedException ex) {\n\t\t\tassertThat(ex.getMessage()).contains(list.getClass().getName());\n\t\t\tassertThat(ex.getCause()).isInstanceOf(ConverterNotFoundException.class);\n\t\t\tassertThat(ex.getCause().getMessage()).contains(TestEntity.class.getName());\n\t\t}\n\t}\n\n\t@Test\n\tvoid convertListOfStringToString() {\n\t\tList<String> list = List.of(\"Foo\", \"Bar\");\n\t\tassertThat(conversionService.canConvert(list.getClass(), String.class)).isTrue();\n\t\tString result = conversionService.convert(list, String.class);\n\t\tassertThat(result).isEqualTo(\"Foo,Bar\");\n\t}\n\n\t@Test\n\tvoid convertListOfListToString() {\n\t\tList<String> list1 = List.of(\"Foo\", \"Bar\");\n\t\tList<String> list2 = List.of(\"Baz\", \"Boop\");\n\t\tList<List<String>> list = List.of(list1, list2);\n\t\tassertThat(conversionService.canConvert(list.getClass(), String.class)).isTrue();\n\t\tString result = conversionService.convert(list, String.class);\n\t\tassertThat(result).isEqualTo(\"Foo,Bar,Baz,Boop\");\n\t}\n\n\t@Test\n\tvoid convertCollectionToCollection() throws Exception {\n\t\tSet<String> foo = new LinkedHashSet<>();\n\t\tfoo.add(\"1\");\n\t\tfoo.add(\"2\");\n\t\tfoo.add(\"3\");\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tList<Integer> bar = (List<Integer>) conversionService.convert(foo,\n\t\t\t\tnew TypeDescriptor(getClass().getField(\"genericList\")));\n\t\tassertThat(bar).containsExactly(1, 2, 3);\n\t}\n\n\t@Test\n\tvoid convertCollectionToCollectionNull() throws Exception {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tList<Integer> bar = (List<Integer>) conversionService.convert(null,\n\t\t\t\tTypeDescriptor.valueOf(LinkedHashSet.class), new TypeDescriptor(getClass().getField(\"genericList\")));\n\t\tassertThat(bar).isNull();\n\t}\n\n\t@Test\n\t@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n\tvoid convertCollectionToCollectionNotGeneric() {\n\t\tSet<String> foo = new LinkedHashSet<>();\n\t\tfoo.add(\"1\");\n\t\tfoo.add(\"2\");\n\t\tfoo.add(\"3\");\n\t\tList bar = (List) conversionService.convert(foo, TypeDescriptor.valueOf(LinkedHashSet.class), TypeDescriptor.valueOf(List.class));\n\t\tassertThat(bar).containsExactly(\"1\", \"2\", \"3\");\n\t}\n\n\t@Test\n\t@SuppressWarnings({\"unchecked\", \"rawtypes\"})\n\tvoid convertCollectionToCollectionSpecialCaseSourceImpl() throws Exception {\n\t\tMap map = new LinkedHashMap();\n\t\tmap.put(\"1\", \"1\");\n\t\tmap.put(\"2\", \"2\");\n\t\tmap.put(\"3\", \"3\");\n\t\tCollection values = map.values();\n\t\tList<Integer> bar = (List<Integer>) conversionService.convert(values,\n\t\t\t\tTypeDescriptor.forObject(values), new TypeDescriptor(getClass().getField(\"genericList\")));\n\t\tassertThat(bar).containsExactly(1, 2, 3);\n\t}\n\n\t@Test\n\tvoid collection() {\n\t\tList<String> strings = List.of(\"3\", \"9\");\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tList<Integer> integers = (List<Integer>) conversionService.convert(strings,\n\t\t\t\tTypeDescriptor.collection(List.class, TypeDescriptor.valueOf(Integer.class)));\n\t\tassertThat(integers).containsExactly(3, 9);\n\t}\n\n\t@Test\n\tvoid convertMapToMap() throws Exception {\n\t\tMap<String, String> foo = Map.of(\"1\", \"BAR\", \"2\", \"BAZ\");\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tMap<Integer, Foo> map = (Map<Integer, Foo>) conversionService.convert(foo,\n\t\t\t\tTypeDescriptor.forObject(foo), new TypeDescriptor(getClass().getField(\"genericMap\")));\n\t\tassertThat(map).contains(entry(1, Foo.BAR), entry(2, Foo.BAZ));\n\t}\n\n\t@Test\n\tvoid convertHashMapValuesToList() {\n\t\tMap<String, Integer> hashMap = new LinkedHashMap<>();\n\t\thashMap.put(\"1\", 1);\n\t\thashMap.put(\"2\", 2);\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tList<Integer> converted = conversionService.convert(hashMap.values(), List.class);\n\t\tassertThat(converted).containsExactly(1, 2);\n\t}\n\n\t@Test\n\tvoid map() {\n\t\tMap<String, String> strings = new HashMap<>();\n\t\tstrings.put(\"3\", \"9\");\n\t\tstrings.put(\"6\", \"31\");\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tMap<Integer, Integer> integers = (Map<Integer, Integer>) conversionService.convert(strings,\n\t\t\t\tTypeDescriptor.map(Map.class, TypeDescriptor.valueOf(Integer.class), TypeDescriptor.valueOf(Integer.class)));\n\t\tassertThat(integers).contains(entry(3, 9), entry(6, 31));\n\t}\n\n\t@Test\n\tvoid convertPropertiesToString() {\n\t\tProperties foo = new Properties();\n\t\tfoo.setProperty(\"1\", \"BAR\");\n\t\tfoo.setProperty(\"2\", \"BAZ\");\n\t\tString result = conversionService.convert(foo, String.class);\n\t\tassertThat(result).contains(\"1=BAR\", \"2=BAZ\");\n\t}\n\n\t@Test\n\tvoid convertStringToProperties() {\n\t\tProperties result = conversionService.convert(\"\"\"\n\t\t\t\ta=b\n\t\t\t\tc=2\n\t\t\t\td=\"\"\", Properties.class);\n\t\tassertThat(result).contains(entry(\"a\", \"b\"), entry(\"c\", \"2\"), entry(\"d\", \"\"));\n\t}\n\n\t@Test\n\tvoid convertStringToPropertiesWithLeadingSpaces() {\n\t\tProperties result = conversionService.convert(\"\"\"\n\t\t\t\t\\s  foo=bar\n\t\t\t\t\\s   bar=baz\n\t\t\t\t\\s    baz=boo\"\"\", Properties.class);\n\t\tassertThat(result).contains(entry(\"foo\", \"bar\"), entry(\"bar\", \"baz\"), entry(\"baz\", \"boo\"));\n\t}\n\n\t// generic object conversion\n\n\t@Test\n\tvoid convertObjectToStringWithValueOfMethodPresentUsingToString() {\n\t\tISBN.reset();\n\t\tassertThat(conversionService.convert(new ISBN(\"123456789\"), String.class)).isEqualTo(\"123456789\");\n\n\t\tassertThat(ISBN.constructorCount).as(\"constructor invocations\").isEqualTo(1);\n\t\tassertThat(ISBN.valueOfCount).as(\"valueOf() invocations\").isEqualTo(0);\n\t\tassertThat(ISBN.toStringCount).as(\"toString() invocations\").isEqualTo(1);\n\t}\n\n\t/**\n\t * @see org.springframework.core.convert.support.ObjectToObjectConverterTests\n\t */\n\t@Test\n\tvoid convertObjectToObjectUsingValueOfMethod() {\n\t\tISBN.reset();\n\t\tassertThat(conversionService.convert(\"123456789\", ISBN.class)).isEqualTo(new ISBN(\"123456789\"));\n\n\t\tassertThat(ISBN.valueOfCount).as(\"valueOf() invocations\").isEqualTo(1);\n\t\t// valueOf() invokes the constructor\n\t\tassertThat(ISBN.constructorCount).as(\"constructor invocations\").isEqualTo(2);\n\t\tassertThat(ISBN.toStringCount).as(\"toString() invocations\").isEqualTo(0);\n\t}\n\n\t@Test\n\tvoid convertObjectToStringUsingToString() {\n\t\tSSN.reset();\n\t\tassertThat(conversionService.convert(new SSN(\"123456789\"), String.class)).isEqualTo(\"123456789\");\n\n\t\tassertThat(SSN.constructorCount).as(\"constructor invocations\").isEqualTo(1);\n\t\tassertThat(SSN.toStringCount).as(\"toString() invocations\").isEqualTo(1);\n\t}\n\n\t@Test\n\tvoid convertObjectToObjectUsingObjectConstructor() {\n\t\tSSN.reset();\n\t\tassertThat(conversionService.convert(\"123456789\", SSN.class)).isEqualTo(new SSN(\"123456789\"));\n\n\t\tassertThat(SSN.constructorCount).as(\"constructor invocations\").isEqualTo(2);\n\t\tassertThat(SSN.toStringCount).as(\"toString() invocations\").isEqualTo(0);\n\t}\n\n\t@Test\n\tvoid convertStringToTimezone() {\n\t\tassertThat(conversionService.convert(\"GMT+2\", TimeZone.class).getID()).isEqualTo(\"GMT+02:00\");\n\t}\n\n\t@Test\n\tvoid convertObjectToStringWithJavaTimeOfMethodPresent() {\n\t\tassertThat(conversionService.convert(ZoneId.of(\"GMT+1\"), String.class)).startsWith(\"GMT+\");\n\t}\n\n\t@Test\n\tvoid convertObjectToStringNotSupported() {\n\t\tassertThat(conversionService.canConvert(TestEntity.class, String.class)).isFalse();\n\t}\n\n\t@Test\n\tvoid convertObjectToObjectWithJavaTimeOfMethod() {\n\t\tassertThat(conversionService.convert(\"GMT+1\", ZoneId.class)).isEqualTo(ZoneId.of(\"GMT+1\"));\n\t}\n\n\t@Test\n\tvoid convertObjectToObjectNoValueOfMethodOrConstructor() {\n\t\tassertThatExceptionOfType(ConverterNotFoundException.class)\n\t\t\t\t.isThrownBy(() -> conversionService.convert(3L, SSN.class));\n\t}\n\n\t@Test\n\tvoid convertObjectToObjectFinderMethod() {\n\t\tTestEntity e = conversionService.convert(1L, TestEntity.class);\n\t\tassertThat(e.getId()).isEqualTo(Long.valueOf(1));\n\t}\n\n\t@Test\n\tvoid convertObjectToObjectFinderMethodWithNull() {\n\t\tTestEntity entity = (TestEntity) conversionService.convert(null,\n\t\t\t\tTypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(TestEntity.class));\n\t\tassertThat(entity).isNull();\n\t}\n\n\t@Test\n\tvoid convertObjectToObjectFinderMethodWithIdConversion() {\n\t\tTestEntity entity = conversionService.convert(\"1\", TestEntity.class);\n\t\tassertThat(entity.getId()).isEqualTo(Long.valueOf(1));\n\t}\n\n\t@Test\n\tvoid convertCharArrayToString() {\n\t\tString converted = conversionService.convert(new char[] {'a', 'b', 'c'}, String.class);\n\t\tassertThat(converted).isEqualTo(\"a,b,c\");\n\t}\n\n\t@Test\n\tvoid convertStringToCharArray() {\n\t\tchar[] converted = conversionService.convert(\"a,b,c\", char[].class);\n\t\tassertThat(converted).containsExactly('a', 'b', 'c');\n\t}\n\n\t@Test\n\tvoid convertStringToCustomCharArray() {\n\t\tconversionService.addConverter(String.class, char[].class, String::toCharArray);\n\t\tchar[] converted = conversionService.convert(\"abc\", char[].class);\n\t\tassertThat(converted).containsExactly('a', 'b', 'c');\n\t}\n\n\t@Test\n\t@SuppressWarnings(\"unchecked\")\n\tvoid multidimensionalArrayToListConversionShouldConvertEntriesCorrectly() {\n\t\tString[][] grid = new String[][] {{\"1\", \"2\", \"3\", \"4\"}, {\"5\", \"6\", \"7\", \"8\"}, {\"9\", \"10\", \"11\", \"12\"}};\n\t\tList<String[]> converted = conversionService.convert(grid, List.class);\n\t\tString[][] convertedBack = conversionService.convert(converted, String[][].class);\n\t\tassertThat(convertedBack).isEqualTo(grid);\n\t}\n\n\t@Test\n\tvoid convertCannotOptimizeArray() {\n\t\tconversionService.addConverter(Byte.class, Byte.class, source -> (byte) (source + 1));\n\t\tbyte[] byteArray = {1, 2, 3};\n\t\tbyte[] converted = conversionService.convert(byteArray, byte[].class);\n\t\tassertThat(converted).isNotSameAs(byteArray);\n\t\tassertThat(converted).containsExactly(2, 3, 4);\n\t}\n\n\t@Test\n\t@SuppressWarnings(\"unchecked\")\n\tvoid convertObjectToOptional() {\n\t\tMethod method = ClassUtils.getMethod(TestEntity.class, \"handleOptionalValue\", Optional.class);\n\t\tMethodParameter parameter = new MethodParameter(method, 0);\n\t\tTypeDescriptor descriptor = new TypeDescriptor(parameter);\n\t\tObject actual = conversionService.convert(\"1,2,3\", TypeDescriptor.valueOf(String.class), descriptor);\n\t\tassertThat(actual.getClass()).isEqualTo(Optional.class);\n\t\tassertThat(((Optional<List<Integer>>) actual)).contains(List.of(1, 2, 3));\n\t}\n\n\t@Test\n\tvoid convertObjectToOptionalNull() {\n\t\tassertThat(conversionService.convert(null, TypeDescriptor.valueOf(Object.class),\n\t\t\t\tTypeDescriptor.valueOf(Optional.class))).isSameAs(Optional.empty());\n\t\tassertThat((Object) conversionService.convert(null, Optional.class)).isSameAs(Optional.empty());\n\t}\n\n\t@Test\n\tvoid convertExistingOptional() {\n\t\tassertThat(conversionService.convert(Optional.empty(), TypeDescriptor.valueOf(Object.class),\n\t\t\t\tTypeDescriptor.valueOf(Optional.class))).isSameAs(Optional.empty());\n\t\tassertThat((Object) conversionService.convert(Optional.empty(), Optional.class)).isSameAs(Optional.empty());\n\t}\n\n\n\t// test fields and helpers\n\n\tpublic List<Integer> genericList = new ArrayList<>();\n\n\tpublic Stream<Integer> genericStream;\n\n\tpublic Map<Integer, Foo> genericMap = new HashMap<>();\n\n\tpublic EnumSet<Foo> enumSet;\n\n\tpublic Object assignableTarget;\n\n\n\tpublic void handlerMethod(List<Color> color) {\n\t}\n\n\n\tpublic enum Foo {\n\n\t\tBAR, BAZ\n\t}\n\n\n\tpublic enum SubFoo {\n\n\t\tBAR {\n\t\t\t@Override\n\t\t\tString s() {\n\t\t\t\treturn \"x\";\n\t\t\t}\n\t\t},\n\t\tBAZ {\n\t\t\t@Override\n\t\t\tString s() {\n\t\t\t\treturn \"y\";\n\t\t\t}\n\t\t};\n\n\t\tabstract String s();\n\t}\n\n\n\tpublic class ColorConverter implements Converter<String, Color> {\n\n\t\t@Override\n\t\tpublic Color convert(String source) {\n\t\t\tif (!source.startsWith(\"#\")) {\n\t\t\t\tsource = \"#\" + source;\n\t\t\t}\n\t\t\treturn Color.decode(source);\n\t\t}\n\t}\n\n\n\t@SuppressWarnings(\"serial\")\n\tpublic static class CustomNumber extends Number {\n\n\t\t@Override\n\t\tpublic double doubleValue() {\n\t\t\treturn 0;\n\t\t}\n\n\t\t@Override\n\t\tpublic float floatValue() {\n\t\t\treturn 0;\n\t\t}\n\n\t\t@Override\n\t\tpublic int intValue() {\n\t\t\treturn 0;\n\t\t}\n\n\t\t@Override\n\t\tpublic long longValue() {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\n\tpublic static class TestEntity {\n\n\t\tprivate Long id;\n\n\t\tpublic TestEntity(Long id) {\n\t\t\tthis.id = id;\n\t\t}\n\n\t\tpublic Long getId() {\n\t\t\treturn id;\n\t\t}\n\n\t\tpublic static TestEntity findTestEntity(Long id) {\n\t\t\treturn new TestEntity(id);\n\t\t}\n\n\t\tpublic void handleOptionalValue(Optional<List<Integer>> value) {\n\t\t}\n\t}\n\n\n\tprivate static class ListWrapper {\n\n\t\tprivate List<?> list;\n\n\t\tpublic ListWrapper(List<?> list) {\n\t\t\tthis.list = list;\n\t\t}\n\n\t\tpublic List<?> getList() {\n\t\t\treturn list;\n\t\t}\n\t}\n\n\n\tprivate static class SSN {\n\n\t\tstatic int constructorCount = 0;\n\n\t\tstatic int toStringCount = 0;\n\n\t\tstatic void reset() {\n\t\t\tconstructorCount = 0;\n\t\t\ttoStringCount = 0;\n\t\t}\n\n\t\tprivate final String value;\n\n\t\tpublic SSN(String value) {\n\t\t\tconstructorCount++;\n\t\t\tthis.value = value;\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean equals(@Nullable Object o) {\n\t\t\tif (!(o instanceof SSN ssn)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn this.value.equals(ssn.value);\n\t\t}\n\n\t\t@Override\n\t\tpublic int hashCode() {\n\t\t\treturn value.hashCode();\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\ttoStringCount++;\n\t\t\treturn value;\n\t\t}\n\t}\n\n\n\tprivate static class ISBN {\n\n\t\tstatic int constructorCount = 0;\n\t\tstatic int toStringCount = 0;\n\t\tstatic int valueOfCount = 0;\n\n\t\tstatic void reset() {\n\t\t\tconstructorCount = 0;\n\t\t\ttoStringCount = 0;\n\t\t\tvalueOfCount = 0;\n\t\t}\n\n\t\tprivate final String value;\n\n\t\tpublic ISBN(String value) {\n\t\t\tconstructorCount++;\n\t\t\tthis.value = value;\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean equals(@Nullable Object o) {\n\t\t\tif (!(o instanceof ISBN isbn)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn this.value.equals(isbn.value);\n\t\t}\n\n\t\t@Override\n\t\tpublic int hashCode() {\n\t\t\treturn value.hashCode();\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\ttoStringCount++;\n\t\t\treturn value;\n\t\t}\n\n\t\t@SuppressWarnings(\"unused\")\n\t\tpublic static ISBN valueOf(String value) {\n\t\t\tvalueOfCount++;\n\t\t\treturn new ISBN(value);\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.convert.converter.SSN",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.converter.SSN#constructorCount",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.converter.SSN#constructorCount",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  }
]