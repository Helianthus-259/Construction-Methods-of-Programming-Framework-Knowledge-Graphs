[
  {
    "head": "org.springframework.core.annotation.OrderUtils#getOrder(Class<?>,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the order on the specified {@code type}, or the specified\r\n * default value if none can be found.\r\n * <p>Takes care of {@link Order @Order} and {@code @jakarta.annotation.Priority}.\r\n * @param type the type to handle\r\n * @return the priority value, or the specified default order if none can be found\r\n * @since 5.0\r\n * @see #getPriority(Class)\r\n */\r\npublic static int getOrder(Class<?> type, int defaultOrder) {\r\n    Integer order = getOrder(type);\r\n    return (order != null ? order : defaultOrder);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.OrderUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.OrderUtils#getOrder(Class<?>,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.OrderUtils#getOrder(Class<?>,Integer)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the order on the specified {@code type}, or the specified\r\n * default value if none can be found.\r\n * <p>Takes care of {@link Order @Order} and {@code @jakarta.annotation.Priority}.\r\n * @param type the type to handle\r\n * @return the priority value, or the specified default order if none can be found\r\n * @see #getPriority(Class)\r\n */\r\n@Nullable\r\npublic static Integer getOrder(Class<?> type, @Nullable Integer defaultOrder) {\r\n    Integer order = getOrder(type);\r\n    return (order != null ? order : defaultOrder);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.OrderUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.OrderUtils#getOrder(Class<?>,Integer)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.OrderUtils#getOrder(Class<?>,Integer)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.OrderUtils#getOrder(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the order on the specified {@code type}.\r\n * <p>Takes care of {@link Order @Order} and {@code @jakarta.annotation.Priority}.\r\n * @param type the type to handle\r\n * @return the order value, or {@code null} if none can be found\r\n * @see #getPriority(Class)\r\n */\r\n@Nullable\r\npublic static Integer getOrder(Class<?> type) {\r\n    return getOrder((AnnotatedElement) type);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.OrderUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.OrderUtils#getOrder(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.OrderUtils#getOrder(Class<?>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.OrderUtils#getOrder(AnnotatedElement)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the order declared on the specified {@code element}.\r\n * <p>Takes care of {@link Order @Order} and {@code @jakarta.annotation.Priority}.\r\n * @param element the annotated element (for example, type or method)\r\n * @return the order value, or {@code null} if none can be found\r\n * @since 5.3\r\n */\r\n@Nullable\r\npublic static Integer getOrder(AnnotatedElement element) {\r\n    return getOrderFromAnnotations(element, MergedAnnotations.from(element, SearchStrategy.TYPE_HIERARCHY));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.OrderUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.OrderUtils#getOrder(AnnotatedElement)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.OrderUtils#getOrder(AnnotatedElement)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.OrderUtils#getOrderFromAnnotations(AnnotatedElement,MergedAnnotations)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the order from the specified annotations collection.\r\n * <p>Takes care of {@link Order @Order} and\r\n * {@code @jakarta.annotation.Priority}.\r\n * @param element the source element\r\n * @param annotations the annotation to consider\r\n * @return the order value, or {@code null} if none can be found\r\n */\r\n@Nullable\r\nstatic Integer getOrderFromAnnotations(AnnotatedElement element, MergedAnnotations annotations) {\r\n    if (!(element instanceof Class)) {\r\n        return findOrder(annotations);\r\n    }\r\n    Object cached = orderCache.get(element);\r\n    if (cached != null) {\r\n        return (cached instanceof Integer integer ? integer : null);\r\n    }\r\n    Integer result = findOrder(annotations);\r\n    orderCache.put(element, result != null ? result : NOT_ANNOTATED);\r\n    return result;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.OrderUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.OrderUtils#getOrderFromAnnotations(AnnotatedElement,MergedAnnotations)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.OrderUtils#getOrderFromAnnotations(AnnotatedElement,MergedAnnotations)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.OrderUtils#findOrder(MergedAnnotations)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprivate static Integer findOrder(MergedAnnotations annotations) {\r\n    MergedAnnotation<Order> orderAnnotation = annotations.get(Order.class);\r\n    if (orderAnnotation.isPresent()) {\r\n        return orderAnnotation.getInt(MergedAnnotation.VALUE);\r\n    }\r\n    MergedAnnotation<?> priorityAnnotation = annotations.get(JAKARTA_PRIORITY_ANNOTATION);\r\n    if (priorityAnnotation.isPresent()) {\r\n        return priorityAnnotation.getInt(MergedAnnotation.VALUE);\r\n    }\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.OrderUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.OrderUtils#findOrder(MergedAnnotations)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.OrderUtils#findOrder(MergedAnnotations)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.OrderUtils#getPriority(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the value of the {@code jakarta.annotation.Priority} annotation\r\n * declared on the specified type, or {@code null} if none.\r\n * @param type the type to handle\r\n * @return the priority value if the annotation is declared, or {@code null} if none\r\n */\r\n@Nullable\r\npublic static Integer getPriority(Class<?> type) {\r\n    return MergedAnnotations.from(type, SearchStrategy.TYPE_HIERARCHY).get(JAKARTA_PRIORITY_ANNOTATION).getValue(MergedAnnotation.VALUE, Integer.class).orElse(null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.OrderUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.OrderUtils#getPriority(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.OrderUtils#getPriority(Class<?>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  }
]