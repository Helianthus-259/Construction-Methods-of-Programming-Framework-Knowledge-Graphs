[
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping#getAttributes()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the annotation attributes for the mapping annotation type.\r\n * @return the attribute methods\r\n */\r\nAttributeMethods getAttributes() {\r\n    return this.attributes;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMapping#getAttributes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping#getAliasMapping(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the related index of an alias mapped attribute, or {@code -1} if\r\n * there is no mapping. The resulting value is the index of the attribute on\r\n * the root annotation that can be invoked in order to obtain the actual\r\n * value.\r\n * @param attributeIndex the attribute index of the source attribute\r\n * @return the mapped attribute index or {@code -1}\r\n */\r\nint getAliasMapping(int attributeIndex) {\r\n    return this.aliasMappings[attributeIndex];\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMapping#getAliasMapping(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping#getConventionMapping(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the related index of a convention mapped attribute, or {@code -1}\r\n * if there is no mapping. The resulting value is the index of the attribute\r\n * on the root annotation that can be invoked in order to obtain the actual\r\n * value.\r\n * @param attributeIndex the attribute index of the source attribute\r\n * @return the mapped attribute index or {@code -1}\r\n */\r\nint getConventionMapping(int attributeIndex) {\r\n    return this.conventionMappings[attributeIndex];\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMapping#getConventionMapping(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping#getMappedAnnotationValue(int,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get a mapped attribute value from the most suitable\r\n * {@link #getAnnotation() meta-annotation}.\r\n * <p>The resulting value is obtained from the closest meta-annotation,\r\n * taking into consideration both convention and alias based mapping rules.\r\n * For root mappings, this method will always return {@code null}.\r\n * @param attributeIndex the attribute index of the source attribute\r\n * @param metaAnnotationsOnly if only meta annotations should be considered.\r\n * If this parameter is {@code false} then aliases within the annotation will\r\n * also be considered.\r\n * @return the mapped annotation value, or {@code null}\r\n */\r\n@Nullable\r\nObject getMappedAnnotationValue(int attributeIndex, boolean metaAnnotationsOnly) {\r\n    int mappedIndex = this.annotationValueMappings[attributeIndex];\r\n    if (mappedIndex == -1) {\r\n        return null;\r\n    }\r\n    AnnotationTypeMapping source = this.annotationValueSource[attributeIndex];\r\n    if (source == this && metaAnnotationsOnly) {\r\n        return null;\r\n    }\r\n    return AnnotationUtils.invokeAnnotationMethod(source.attributes.get(mappedIndex), source.annotation);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMapping#getMappedAnnotationValue(int,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping#getMappedAnnotationValue(int,boolean)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping#isEquivalentToDefaultValue(int,Object,ValueExtractor)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine if the specified value is equivalent to the default value of the\r\n * attribute at the given index.\r\n * @param attributeIndex the attribute index of the source attribute\r\n * @param value the value to check\r\n * @param valueExtractor the value extractor used to extract values from any\r\n * nested annotations\r\n * @return {@code true} if the value is equivalent to the default value\r\n */\r\nboolean isEquivalentToDefaultValue(int attributeIndex, Object value, ValueExtractor valueExtractor) {\r\n    Method attribute = this.attributes.get(attributeIndex);\r\n    return isEquivalentToDefaultValue(attribute, value, valueExtractor);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMapping#isEquivalentToDefaultValue(int,Object,ValueExtractor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping#getMirrorSets()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the mirror sets for this type mapping.\r\n * @return the attribute mirror sets\r\n */\r\nMirrorSets getMirrorSets() {\r\n    return this.mirrorSets;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMapping#getMirrorSets()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping#isSynthesizable()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine if the mapped annotation is <em>synthesizable</em>.\r\n * <p>Consult the documentation for {@link MergedAnnotation#synthesize()}\r\n * for an explanation of what is considered synthesizable.\r\n * @return {@code true} if the mapped annotation is synthesizable\r\n * @since 5.2.6\r\n */\r\nboolean isSynthesizable() {\r\n    return this.synthesizable;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMapping#isSynthesizable()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping#filledIntArray(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static int[] filledIntArray(int size) {\r\n    if (size == 0) {\r\n        return EMPTY_INT_ARRAY;\r\n    }\r\n    int[] array = new int[size];\r\n    Arrays.fill(array, -1);\r\n    return array;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMapping#filledIntArray(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping#isEquivalentToDefaultValue(Method,Object,ValueExtractor)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static boolean isEquivalentToDefaultValue(Method attribute, Object value, ValueExtractor valueExtractor) {\r\n    return areEquivalent(attribute.getDefaultValue(), value, valueExtractor);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMapping#isEquivalentToDefaultValue(Method,Object,ValueExtractor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping#areEquivalent(Object,Object,ValueExtractor)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static boolean areEquivalent(@Nullable Object value, @Nullable Object extractedValue, ValueExtractor valueExtractor) {\r\n    if (ObjectUtils.nullSafeEquals(value, extractedValue)) {\r\n        return true;\r\n    }\r\n    if (value instanceof Class<?> clazz && extractedValue instanceof String string) {\r\n        return areEquivalent(clazz, string);\r\n    }\r\n    if (value instanceof Class<?>[] classes && extractedValue instanceof String[] strings) {\r\n        return areEquivalent(classes, strings);\r\n    }\r\n    if (value instanceof Annotation annotation) {\r\n        return areEquivalent(annotation, extractedValue, valueExtractor);\r\n    }\r\n    return false;\r\n}",
    "tailType": "method_code"
  }
]