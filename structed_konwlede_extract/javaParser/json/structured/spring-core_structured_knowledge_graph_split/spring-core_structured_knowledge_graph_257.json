[
  {
    "head": "org.springframework.util.MimeTypeTests#valueOfIllegalSubtype()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid valueOfIllegalSubtype() {\r\n    assertThatExceptionOfType(InvalidMimeTypeException.class).isThrownBy(() -> MimeType.valueOf(\"audio/basic)\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeTypeTests#valueOfIllegalSubtype()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#valueOfIllegalSubtype()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#valueOfIllegalCharset()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid valueOfIllegalCharset() {\r\n    assertThatExceptionOfType(InvalidMimeTypeException.class).isThrownBy(() -> MimeType.valueOf(\"text/html; charset=foo-bar\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeTypeTests#valueOfIllegalCharset()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#valueOfIllegalCharset()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#parseCharset()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid parseCharset() {\r\n    String s = \"text/html; charset=iso-8859-1\";\r\n    MimeType mimeType = MimeType.valueOf(s);\r\n    assertThat(mimeType.getType()).as(\"Invalid type\").isEqualTo(\"text\");\r\n    assertThat(mimeType.getSubtype()).as(\"Invalid subtype\").isEqualTo(\"html\");\r\n    assertThat(mimeType.getCharset()).as(\"Invalid charset\").isEqualTo(StandardCharsets.ISO_8859_1);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeTypeTests#parseCharset()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#parseCharset()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#parseQuotedCharset()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid parseQuotedCharset() {\r\n    String s = \"application/xml;charset=\\\"utf-8\\\"\";\r\n    MimeType mimeType = MimeType.valueOf(s);\r\n    assertThat(mimeType.getType()).as(\"Invalid type\").isEqualTo(\"application\");\r\n    assertThat(mimeType.getSubtype()).as(\"Invalid subtype\").isEqualTo(\"xml\");\r\n    assertThat(mimeType.getCharset()).as(\"Invalid charset\").isEqualTo(StandardCharsets.UTF_8);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeTypeTests#parseQuotedCharset()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#parseQuotedCharset()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#parseQuotedSeparator()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid parseQuotedSeparator() {\r\n    String s = \"application/xop+xml;charset=utf-8;type=\\\"application/soap+xml;action=\\\\\\\"https://x.y.z\\\\\\\"\\\"\";\r\n    MimeType mimeType = MimeType.valueOf(s);\r\n    assertThat(mimeType.getType()).as(\"Invalid type\").isEqualTo(\"application\");\r\n    assertThat(mimeType.getSubtype()).as(\"Invalid subtype\").isEqualTo(\"xop+xml\");\r\n    assertThat(mimeType.getCharset()).as(\"Invalid charset\").isEqualTo(StandardCharsets.UTF_8);\r\n    assertThat(mimeType.getParameter(\"type\")).isEqualTo(\"\\\"application/soap+xml;action=\\\\\\\"https://x.y.z\\\\\\\"\\\"\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeTypeTests#parseQuotedSeparator()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#parseQuotedSeparator()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#withConversionService()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid withConversionService() {\r\n    ConversionService conversionService = new DefaultConversionService();\r\n    assertThat(conversionService.canConvert(String.class, MimeType.class)).isTrue();\r\n    MimeType mimeType = MimeType.valueOf(\"application/xml\");\r\n    assertThat(conversionService.convert(\"application/xml\", MimeType.class)).isEqualTo(mimeType);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeTypeTests#withConversionService()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#withConversionService()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#includes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid includes() {\r\n    MimeType textPlain = MimeTypeUtils.TEXT_PLAIN;\r\n    assertThat(textPlain.includes(textPlain)).as(\"Equal types is not inclusive\").isTrue();\r\n    MimeType allText = new MimeType(\"text\");\r\n    assertThat(allText.includes(textPlain)).as(\"All subtypes is not inclusive\").isTrue();\r\n    assertThat(textPlain.includes(allText)).as(\"All subtypes is inclusive\").isFalse();\r\n    assertThat(MimeTypeUtils.ALL.includes(textPlain)).as(\"All types is not inclusive\").isTrue();\r\n    assertThat(textPlain.includes(MimeTypeUtils.ALL)).as(\"All types is inclusive\").isFalse();\r\n    assertThat(MimeTypeUtils.ALL.includes(textPlain)).as(\"All types is not inclusive\").isTrue();\r\n    assertThat(textPlain.includes(MimeTypeUtils.ALL)).as(\"All types is inclusive\").isFalse();\r\n    MimeType applicationSoapXml = new MimeType(\"application\", \"soap+xml\");\r\n    MimeType applicationWildcardXml = new MimeType(\"application\", \"*+xml\");\r\n    // SPR-15795\r\n    MimeType suffixXml = new MimeType(\"application\", \"x.y+z+xml\");\r\n    assertThat(applicationSoapXml.includes(applicationSoapXml)).isTrue();\r\n    assertThat(applicationWildcardXml.includes(applicationWildcardXml)).isTrue();\r\n    assertThat(applicationWildcardXml.includes(suffixXml)).isTrue();\r\n    assertThat(applicationWildcardXml.includes(applicationSoapXml)).isTrue();\r\n    assertThat(applicationSoapXml.includes(applicationWildcardXml)).isFalse();\r\n    assertThat(suffixXml.includes(applicationWildcardXml)).isFalse();\r\n    assertThat(applicationWildcardXml.includes(MimeTypeUtils.APPLICATION_JSON)).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeTypeTests#includes()",
    "tailType": "method"
  }
]