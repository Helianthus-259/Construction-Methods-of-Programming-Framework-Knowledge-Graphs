[
  {
    "head": "org.springframework.asm.MethodTooLargeException#codeSize",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.MethodTooLargeException#getClassName()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the internal name of the owner class.\r\n *\r\n * @return the internal name of the owner class (see {@link Type#getInternalName()}).\r\n */\r\npublic String getClassName() {\r\n    return className;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.MethodTooLargeException",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.MethodTooLargeException#getClassName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.MethodTooLargeException#getMethodName()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the name of the method.\r\n *\r\n * @return the name of the method.\r\n */\r\npublic String getMethodName() {\r\n    return methodName;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.MethodTooLargeException",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.MethodTooLargeException#getMethodName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.MethodTooLargeException#getDescriptor()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the descriptor of the method.\r\n *\r\n * @return the descriptor of the method.\r\n */\r\npublic String getDescriptor() {\r\n    return descriptor;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.MethodTooLargeException",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.MethodTooLargeException#getDescriptor()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.MethodTooLargeException#getCodeSize()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the size of the method's Code attribute, in bytes.\r\n *\r\n * @return the size of the method's Code attribute, in bytes.\r\n */\r\npublic int getCodeSize() {\r\n    return codeSize;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.MethodTooLargeException",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.MethodTooLargeException#getCodeSize()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.MethodTooLargeException",
    "headType": "class",
    "relation": "extend",
    "tail": "IndexOutOfBoundsException",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util.xml",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util.xml",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.xml.XMLEventStreamWriterTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util.xml;\n\nimport java.io.StringWriter;\n\nimport javax.xml.stream.XMLEventFactory;\nimport javax.xml.stream.XMLEventWriter;\nimport javax.xml.stream.XMLOutputFactory;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.w3c.dom.Node;\nimport org.xmlunit.util.Predicate;\n\nimport org.springframework.core.testfixture.xml.XmlContent;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nclass XMLEventStreamWriterTests {\n\n\tprivate static final String XML =\n\t\t\t\"<?pi content?><root xmlns='namespace'><prefix:child xmlns:prefix='namespace2'><!--comment-->content</prefix:child></root>\";\n\n\tprivate XMLEventStreamWriter streamWriter;\n\n\tprivate StringWriter stringWriter;\n\n\t@BeforeEach\n\tvoid createStreamReader() throws Exception {\n\t\tstringWriter = new StringWriter();\n\t\tXMLOutputFactory outputFactory = XMLOutputFactory.newInstance();\n\t\tXMLEventWriter eventWriter = outputFactory.createXMLEventWriter(stringWriter);\n\t\tstreamWriter = new XMLEventStreamWriter(eventWriter, XMLEventFactory.newInstance());\n\t}\n\n\t@Test\n\tvoid write() throws Exception {\n\t\tstreamWriter.writeStartDocument();\n\t\tstreamWriter.writeProcessingInstruction(\"pi\", \"content\");\n\t\tstreamWriter.writeStartElement(\"namespace\", \"root\");\n\t\tstreamWriter.writeDefaultNamespace(\"namespace\");\n\t\tstreamWriter.writeStartElement(\"prefix\", \"child\", \"namespace2\");\n\t\tstreamWriter.writeNamespace(\"prefix\", \"namespace2\");\n\t\tstreamWriter.writeComment(\"comment\");\n\t\tstreamWriter.writeCharacters(\"content\");\n\t\tstreamWriter.writeEndElement();\n\t\tstreamWriter.writeEndElement();\n\t\tstreamWriter.writeEndDocument();\n\n\t\tPredicate<Node> nodeFilter = n -> n.getNodeType() != Node.DOCUMENT_TYPE_NODE && n.getNodeType() != Node.PROCESSING_INSTRUCTION_NODE;\n\t\tassertThat(XmlContent.from(stringWriter)).isSimilarTo(XML, nodeFilter);\n\t}\n\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.xml.XMLEventStreamWriterTests#XML",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamWriterTests#XML",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.xml.XMLEventStreamWriterTests#streamWriter",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamWriterTests#streamWriter",
    "headType": "field",
    "relation": "haveType",
    "tail": "XMLEventStreamWriter",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.xml.XMLEventStreamWriterTests#stringWriter",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamWriterTests#stringWriter",
    "headType": "field",
    "relation": "haveType",
    "tail": "StringWriter",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamWriterTests#createStreamReader()",
    "headType": "method",
    "relation": "provide",
    "tail": "@BeforeEach\r\nvoid createStreamReader() throws Exception {\r\n    stringWriter = new StringWriter();\r\n    XMLOutputFactory outputFactory = XMLOutputFactory.newInstance();\r\n    XMLEventWriter eventWriter = outputFactory.createXMLEventWriter(stringWriter);\r\n    streamWriter = new XMLEventStreamWriter(eventWriter, XMLEventFactory.newInstance());\r\n}",
    "tailType": "method_code"
  }
]