[
  {
    "head": "org.springframework.core.ResolvableType#getRawClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the underlying Java {@link Class} being managed, if available;\r\n * otherwise {@code null}.\r\n */\r\n@Nullable\r\npublic Class<?> getRawClass() {\r\n    if (this.type == this.resolved) {\r\n        return this.resolved;\r\n    }\r\n    Type rawType = this.type;\r\n    if (rawType instanceof ParameterizedType parameterizedType) {\r\n        rawType = parameterizedType.getRawType();\r\n    }\r\n    return (rawType instanceof Class<?> rawClass ? rawClass : null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableType#getRawClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableType#getRawClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableType#getSource()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the underlying source of the resolvable type. Will return a {@link Field},\r\n * {@link MethodParameter} or {@link Type} depending on how the {@code ResolvableType}\r\n * was constructed. This method is primarily to provide access to additional type\r\n * information or meta-data that alternative JVM languages may provide.\r\n */\r\npublic Object getSource() {\r\n    Object source = (this.typeProvider != null ? this.typeProvider.getSource() : null);\r\n    return (source != null ? source : this.type);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableType#getSource()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableType#toClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return this type as a resolved {@code Class}, falling back to\r\n * {@link java.lang.Object} if no specific class can be resolved.\r\n * @return the resolved {@link Class} or the {@code Object} fallback\r\n * @since 5.1\r\n * @see #getRawClass()\r\n * @see #resolve(Class)\r\n */\r\npublic Class<?> toClass() {\r\n    return resolve(Object.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableType#toClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableType#isInstance(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine whether the given object is an instance of this {@code ResolvableType}.\r\n * @param obj the object to check\r\n * @since 4.2\r\n * @see #isAssignableFrom(Class)\r\n */\r\npublic boolean isInstance(@Nullable Object obj) {\r\n    return (obj != null && isAssignableFrom(obj.getClass()));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableType#isInstance(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableType#isAssignableFrom(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine whether this {@code ResolvableType} is assignable from the\r\n * specified other type.\r\n * @param other the type to be checked against (as a {@code Class})\r\n * @since 4.2\r\n * @see #isAssignableFrom(ResolvableType)\r\n */\r\npublic boolean isAssignableFrom(Class<?> other) {\r\n    // As of 6.1: shortcut assignability check for top-level Class references\r\n    return (this.type instanceof Class<?> clazz ? ClassUtils.isAssignable(clazz, other) : isAssignableFrom(forClass(other), false, null, false));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableType#isAssignableFrom(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableType#isAssignableFrom(ResolvableType)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine whether this {@code ResolvableType} is assignable from the\r\n * specified other type.\r\n * <p>Attempts to follow the same rules as the Java compiler, considering\r\n * whether both the {@link #resolve() resolved} {@code Class} is\r\n * {@link Class#isAssignableFrom(Class) assignable from} the given type\r\n * as well as whether all {@link #getGenerics() generics} are assignable.\r\n * @param other the type to be checked against (as a {@code ResolvableType})\r\n * @return {@code true} if the specified other type can be assigned to this\r\n * {@code ResolvableType}; {@code false} otherwise\r\n */\r\npublic boolean isAssignableFrom(ResolvableType other) {\r\n    return isAssignableFrom(other, false, null, false);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableType#isAssignableFrom(ResolvableType)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableType#isAssignableFromResolvedPart(ResolvableType)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine whether this {@code ResolvableType} is assignable from the\r\n * specified other type, as far as the other type is actually resolvable.\r\n * @param other the type to be checked against (as a {@code ResolvableType})\r\n * @return {@code true} if the specified other type can be assigned to this\r\n * {@code ResolvableType} as far as it is resolvable; {@code false} otherwise\r\n * @since 6.2\r\n */\r\npublic boolean isAssignableFromResolvedPart(ResolvableType other) {\r\n    return isAssignableFrom(other, false, null, true);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableType#isAssignableFromResolvedPart(ResolvableType)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableType#isAssignableFrom(ResolvableType,boolean,Map<Type,Type>,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "private boolean isAssignableFrom(ResolvableType other, boolean strict, @Nullable Map<Type, Type> matchedBefore, boolean upUntilUnresolvable) {\r\n    Assert.notNull(other, \"ResolvableType must not be null\");\r\n    // If we cannot resolve types, we are not assignable\r\n    if (this == NONE || other == NONE) {\r\n        return false;\r\n    }\r\n    if (matchedBefore != null) {\r\n        if (matchedBefore.get(this.type) == other.type) {\r\n            return true;\r\n        }\r\n    } else {\r\n        // As of 6.1: shortcut assignability check for top-level Class references\r\n        if (this.type instanceof Class<?> clazz && other.type instanceof Class<?> otherClazz) {\r\n            return (strict ? clazz.isAssignableFrom(otherClazz) : ClassUtils.isAssignable(clazz, otherClazz));\r\n        }\r\n    }\r\n    if (upUntilUnresolvable && (other.isUnresolvableTypeVariable() || other.isWildcardWithoutBounds())) {\r\n        return true;\r\n    }\r\n    // Deal with array by delegating to the component type\r\n    if (isArray()) {\r\n        return (other.isArray() && getComponentType().isAssignableFrom(other.getComponentType(), true, matchedBefore, upUntilUnresolvable));\r\n    }\r\n    // Deal with wildcard bounds\r\n    WildcardBounds ourBounds = WildcardBounds.get(this);\r\n    WildcardBounds otherBounds = WildcardBounds.get(other);\r\n    // In the form X is assignable to <? extends Number>\r\n    if (otherBounds != null) {\r\n        if (ourBounds != null) {\r\n            return (ourBounds.isSameKind(otherBounds) && ourBounds.isAssignableFrom(otherBounds.getBounds(), matchedBefore));\r\n        } else if (upUntilUnresolvable) {\r\n            return otherBounds.isAssignableFrom(this, matchedBefore);\r\n        } else if (!strict) {\r\n            return (matchedBefore != null ? otherBounds.equalsType(this) : otherBounds.isAssignableTo(this, matchedBefore));\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    // In the form <? extends Number> is assignable to X...\r\n    if (ourBounds != null) {\r\n        return ourBounds.isAssignableFrom(other, matchedBefore);\r\n    }\r\n    // Main assignability check about to follow\r\n    boolean exactMatch = (strict && matchedBefore != null);\r\n    boolean checkGenerics = true;\r\n    Class<?> ourResolved = null;\r\n    if (this.type instanceof TypeVariable<?> variable) {\r\n        // Try default variable resolution\r\n        if (this.variableResolver != null) {\r\n            ResolvableType resolved = this.variableResolver.resolveVariable(variable);\r\n            if (resolved != null) {\r\n                ourResolved = resolved.resolve();\r\n            }\r\n        }\r\n        if (ourResolved == null) {\r\n            // Try variable resolution against target type\r\n            if (other.variableResolver != null) {\r\n                ResolvableType resolved = other.variableResolver.resolveVariable(variable);\r\n                if (resolved != null) {\r\n                    ourResolved = resolved.resolve();\r\n                    checkGenerics = false;\r\n                }\r\n            }\r\n        }\r\n        if (ourResolved == null) {\r\n            // Unresolved type variable, potentially nested -> never insist on exact match\r\n            exactMatch = false;\r\n        }\r\n    }\r\n    if (ourResolved == null) {\r\n        ourResolved = toClass();\r\n    }\r\n    Class<?> otherResolved = other.toClass();\r\n    // We need an exact type match for generics\r\n    // List<CharSequence> is not assignable from List<String>\r\n    if (exactMatch ? !ourResolved.equals(otherResolved) : (strict ? !ourResolved.isAssignableFrom(otherResolved) : !ClassUtils.isAssignable(ourResolved, otherResolved))) {\r\n        return false;\r\n    }\r\n    if (checkGenerics) {\r\n        // Recursively check each generic\r\n        ResolvableType[] ourGenerics = getGenerics();\r\n        ResolvableType[] otherGenerics = other.as(ourResolved).getGenerics();\r\n        if (ourGenerics.length != otherGenerics.length) {\r\n            return false;\r\n        }\r\n        if (ourGenerics.length > 0) {\r\n            if (matchedBefore == null) {\r\n                matchedBefore = new IdentityHashMap<>(1);\r\n            }\r\n            matchedBefore.put(this.type, other.type);\r\n            for (int i = 0; i < ourGenerics.length; i++) {\r\n                ResolvableType otherGeneric = otherGenerics[i];\r\n                if (!ourGenerics[i].isAssignableFrom(otherGeneric, !otherGeneric.isUnresolvableTypeVariable(), matchedBefore, upUntilUnresolvable)) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableType#isAssignableFrom(ResolvableType,boolean,Map<Type,Type>,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableType#isArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return {@code true} if this type resolves to a Class that represents an array.\r\n * @see #getComponentType()\r\n */\r\npublic boolean isArray() {\r\n    if (this == NONE) {\r\n        return false;\r\n    }\r\n    return ((this.type instanceof Class<?> clazz && clazz.isArray()) || this.type instanceof GenericArrayType || resolveType().isArray());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableType#isArray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableType#getComponentType()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the ResolvableType representing the component type of the array or\r\n * {@link #NONE} if this type does not represent an array.\r\n * @see #isArray()\r\n */\r\npublic ResolvableType getComponentType() {\r\n    if (this == NONE) {\r\n        return NONE;\r\n    }\r\n    if (this.componentType != null) {\r\n        return this.componentType;\r\n    }\r\n    if (this.type instanceof Class<?> clazz) {\r\n        Class<?> componentType = clazz.componentType();\r\n        return forType(componentType, this.variableResolver);\r\n    }\r\n    if (this.type instanceof GenericArrayType genericArrayType) {\r\n        return forType(genericArrayType.getGenericComponentType(), this.variableResolver);\r\n    }\r\n    return resolveType().getComponentType();\r\n}",
    "tailType": "method_code"
  }
]