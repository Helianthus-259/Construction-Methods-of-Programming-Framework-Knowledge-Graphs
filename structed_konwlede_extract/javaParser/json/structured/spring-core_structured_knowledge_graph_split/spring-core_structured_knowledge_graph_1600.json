[
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationAttributesFavorsLocalComposedAnnotationOverInheritedAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationAttributesFavorsInheritedAnnotationsOverMoreLocallyDeclaredComposedAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getMergedAnnotationAttributesFavorsInheritedAnnotationsOverMoreLocallyDeclaredComposedAnnotations() {\r\n    Class<?> element = SubSubClassWithInheritedAnnotation.class;\r\n    String name = TX_NAME;\r\n    AnnotationAttributes attributes = getMergedAnnotationAttributes(element, name);\r\n    assertThat(attributes).as(\"AnnotationAttributes for @Transactional on SubSubClassWithInheritedAnnotation\").isNotNull();\r\n    // Verify contracts between utility methods:\r\n    assertThat(isAnnotated(element, name)).isTrue();\r\n    assertThat(attributes.getBoolean(\"readOnly\")).as(\"readOnly flag for SubSubClassWithInheritedAnnotation.\").isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationAttributesFavorsInheritedAnnotationsOverMoreLocallyDeclaredComposedAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationAttributesFavorsInheritedAnnotationsOverMoreLocallyDeclaredComposedAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationAttributesFavorsInheritedComposedAnnotationsOverMoreLocallyDeclaredComposedAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getMergedAnnotationAttributesFavorsInheritedComposedAnnotationsOverMoreLocallyDeclaredComposedAnnotations() {\r\n    Class<?> element = SubSubClassWithInheritedComposedAnnotation.class;\r\n    String name = TX_NAME;\r\n    AnnotationAttributes attributes = getMergedAnnotationAttributes(element, name);\r\n    assertThat(attributes).as(\"AnnotationAttributes for @Transactional on SubSubClassWithInheritedComposedAnnotation.\").isNotNull();\r\n    // Verify contracts between utility methods:\r\n    assertThat(isAnnotated(element, name)).isTrue();\r\n    assertThat(attributes.getBoolean(\"readOnly\")).as(\"readOnly flag for SubSubClassWithInheritedComposedAnnotation.\").isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationAttributesFavorsInheritedComposedAnnotationsOverMoreLocallyDeclaredComposedAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationAttributesFavorsInheritedComposedAnnotationsOverMoreLocallyDeclaredComposedAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationAttributesFromInterfaceImplementedBySuperclass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getMergedAnnotationAttributesFromInterfaceImplementedBySuperclass() {\r\n    Class<?> element = ConcreteClassWithInheritedAnnotation.class;\r\n    String name = TX_NAME;\r\n    AnnotationAttributes attributes = getMergedAnnotationAttributes(element, name);\r\n    assertThat(attributes).as(\"Should not find @Transactional on ConcreteClassWithInheritedAnnotation\").isNull();\r\n    // Verify contracts between utility methods:\r\n    assertThat(isAnnotated(element, name)).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationAttributesFromInterfaceImplementedBySuperclass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationAttributesFromInterfaceImplementedBySuperclass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationAttributesOnInheritedAnnotationInterface()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getMergedAnnotationAttributesOnInheritedAnnotationInterface() {\r\n    Class<?> element = InheritedAnnotationInterface.class;\r\n    String name = TX_NAME;\r\n    AnnotationAttributes attributes = getMergedAnnotationAttributes(element, name);\r\n    assertThat(attributes).as(\"Should find @Transactional on InheritedAnnotationInterface\").isNotNull();\r\n    // Verify contracts between utility methods:\r\n    assertThat(isAnnotated(element, name)).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationAttributesOnInheritedAnnotationInterface()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationAttributesOnInheritedAnnotationInterface()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationAttributesOnNonInheritedAnnotationInterface()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getMergedAnnotationAttributesOnNonInheritedAnnotationInterface() {\r\n    Class<?> element = NonInheritedAnnotationInterface.class;\r\n    String name = Order.class.getName();\r\n    AnnotationAttributes attributes = getMergedAnnotationAttributes(element, name);\r\n    assertThat(attributes).as(\"Should find @Order on NonInheritedAnnotationInterface\").isNotNull();\r\n    // Verify contracts between utility methods:\r\n    assertThat(isAnnotated(element, name)).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationAttributesOnNonInheritedAnnotationInterface()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationAttributesOnNonInheritedAnnotationInterface()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationAttributesWithAliasedComposedAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getMergedAnnotationAttributesWithAliasedComposedAnnotation() {\r\n    Class<?> element = AliasedComposedContextConfigClass.class;\r\n    String name = ContextConfig.class.getName();\r\n    AnnotationAttributes attributes = getMergedAnnotationAttributes(element, name);\r\n    assertThat(attributes).as(\"Should find @ContextConfig on \" + element.getSimpleName()).isNotNull();\r\n    assertThat(attributes.getStringArray(\"value\")).as(\"value\").isEqualTo(asArray(\"test.xml\"));\r\n    assertThat(attributes.getStringArray(\"locations\")).as(\"locations\").isEqualTo(asArray(\"test.xml\"));\r\n    // Verify contracts between utility methods:\r\n    assertThat(isAnnotated(element, name)).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationAttributesWithAliasedComposedAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationAttributesWithAliasedComposedAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationAttributesWithAliasedValueComposedAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getMergedAnnotationAttributesWithAliasedValueComposedAnnotation() {\r\n    Class<?> element = AliasedValueComposedContextConfigClass.class;\r\n    String name = ContextConfig.class.getName();\r\n    AnnotationAttributes attributes = getMergedAnnotationAttributes(element, name);\r\n    assertThat(attributes).as(\"Should find @ContextConfig on \" + element.getSimpleName()).isNotNull();\r\n    assertThat(attributes.getStringArray(\"locations\")).as(\"locations\").isEqualTo(asArray(\"test.xml\"));\r\n    assertThat(attributes.getStringArray(\"value\")).as(\"value\").isEqualTo(asArray(\"test.xml\"));\r\n    // Verify contracts between utility methods:\r\n    assertThat(isAnnotated(element, name)).isTrue();\r\n}",
    "tailType": "method_code"
  }
]