[
  {
    "head": "org.springframework.util.ClassUtilsTests#getQualifiedNameForObjectArrayClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getQualifiedNameForObjectArrayClass() {\r\n    String className = ClassUtils.getQualifiedName(Object[].class);\r\n    assertThat(className).as(\"Class name did not match\").isEqualTo(\"java.lang.Object[]\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtilsTests#getQualifiedNameForObjectArrayClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#getQualifiedNameForObjectArrayClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#getQualifiedNameForMultiDimensionalObjectArrayClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getQualifiedNameForMultiDimensionalObjectArrayClass() {\r\n    String className = ClassUtils.getQualifiedName(Object[][].class);\r\n    assertThat(className).as(\"Class name did not match\").isEqualTo(\"java.lang.Object[][]\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtilsTests#getQualifiedNameForMultiDimensionalObjectArrayClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#getQualifiedNameForMultiDimensionalObjectArrayClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#getQualifiedNameForPrimitiveArrayClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getQualifiedNameForPrimitiveArrayClass() {\r\n    String className = ClassUtils.getQualifiedName(byte[].class);\r\n    assertThat(className).as(\"Class name did not match\").isEqualTo(\"byte[]\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtilsTests#getQualifiedNameForPrimitiveArrayClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#getQualifiedNameForPrimitiveArrayClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#getQualifiedNameForMultiDimensionalPrimitiveArrayClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getQualifiedNameForMultiDimensionalPrimitiveArrayClass() {\r\n    String className = ClassUtils.getQualifiedName(byte[][].class);\r\n    assertThat(className).as(\"Class name did not match\").isEqualTo(\"byte[][]\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtilsTests#getQualifiedNameForMultiDimensionalPrimitiveArrayClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#getQualifiedNameForMultiDimensionalPrimitiveArrayClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#hasMethod()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid hasMethod() {\r\n    assertThat(ClassUtils.hasMethod(Collection.class, \"size\")).isTrue();\r\n    assertThat(ClassUtils.hasMethod(Collection.class, \"remove\", Object.class)).isTrue();\r\n    assertThat(ClassUtils.hasMethod(Collection.class, \"remove\")).isFalse();\r\n    assertThat(ClassUtils.hasMethod(Collection.class, \"someOtherMethod\")).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtilsTests#hasMethod()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#hasMethod()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#getMethodIfAvailable()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getMethodIfAvailable() {\r\n    Method method = ClassUtils.getMethodIfAvailable(Collection.class, \"size\");\r\n    assertThat(method).isNotNull();\r\n    assertThat(method.getName()).isEqualTo(\"size\");\r\n    method = ClassUtils.getMethodIfAvailable(Collection.class, \"remove\", Object.class);\r\n    assertThat(method).isNotNull();\r\n    assertThat(method.getName()).isEqualTo(\"remove\");\r\n    assertThat(ClassUtils.getMethodIfAvailable(Collection.class, \"remove\")).isNull();\r\n    assertThat(ClassUtils.getMethodIfAvailable(Collection.class, \"someOtherMethod\")).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtilsTests#getMethodIfAvailable()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#getMethodIfAvailable()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#getMethodCountForName()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getMethodCountForName() {\r\n    assertThat(ClassUtils.getMethodCountForName(OverloadedMethodsClass.class, \"print\")).as(\"Verifying number of overloaded 'print' methods for OverloadedMethodsClass.\").isEqualTo(2);\r\n    assertThat(ClassUtils.getMethodCountForName(SubOverloadedMethodsClass.class, \"print\")).as(\"Verifying number of overloaded 'print' methods for SubOverloadedMethodsClass.\").isEqualTo(4);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtilsTests#getMethodCountForName()",
    "tailType": "method"
  }
]