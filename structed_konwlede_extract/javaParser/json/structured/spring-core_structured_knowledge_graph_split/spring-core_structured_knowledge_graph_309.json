[
  {
    "head": "org.springframework.util.OnlyPlaceholderTests#parseWithSinglePlaceholder()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.OnlyPlaceholderTests#parseWithPlaceholderAndPrefixText()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid parseWithPlaceholderAndPrefixText() {\r\n    PlaceholderResolver resolver = mockPlaceholderResolver(\"firstName\", \"John\");\r\n    assertThat(this.parser.replacePlaceholders(\"This is ${firstName}\", resolver)).isEqualTo(\"This is John\");\r\n    verify(resolver).resolvePlaceholder(\"firstName\");\r\n    verifyNoMoreInteractions(resolver);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.OnlyPlaceholderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.OnlyPlaceholderTests#parseWithPlaceholderAndPrefixText()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.OnlyPlaceholderTests#parseWithPlaceholderAndPrefixText()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.OnlyPlaceholderTests#parseWithMultiplePlaceholdersAndText()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid parseWithMultiplePlaceholdersAndText() {\r\n    PlaceholderResolver resolver = mockPlaceholderResolver(\"firstName\", \"John\", \"lastName\", \"Smith\");\r\n    assertThat(this.parser.replacePlaceholders(\"User: ${firstName} - ${lastName}.\", resolver)).isEqualTo(\"User: John - Smith.\");\r\n    verify(resolver).resolvePlaceholder(\"firstName\");\r\n    verify(resolver).resolvePlaceholder(\"lastName\");\r\n    verifyNoMoreInteractions(resolver);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.OnlyPlaceholderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.OnlyPlaceholderTests#parseWithMultiplePlaceholdersAndText()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.OnlyPlaceholderTests#parseWithMultiplePlaceholdersAndText()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.OnlyPlaceholderTests#parseWithNestedPlaceholderInKey()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid parseWithNestedPlaceholderInKey() {\r\n    PlaceholderResolver resolver = mockPlaceholderResolver(\"nested\", \"Name\", \"firstName\", \"John\");\r\n    assertThat(this.parser.replacePlaceholders(\"${first${nested}}\", resolver)).isEqualTo(\"John\");\r\n    verifyPlaceholderResolutions(resolver, \"nested\", \"firstName\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.OnlyPlaceholderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.OnlyPlaceholderTests#parseWithNestedPlaceholderInKey()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.OnlyPlaceholderTests#parseWithNestedPlaceholderInKey()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.OnlyPlaceholderTests#parseWithMultipleNestedPlaceholdersInKey()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid parseWithMultipleNestedPlaceholdersInKey() {\r\n    PlaceholderResolver resolver = mockPlaceholderResolver(\"nested0\", \"first\", \"nested1\", \"Name\", \"firstName\", \"John\");\r\n    assertThat(this.parser.replacePlaceholders(\"${${nested0}${nested1}}\", resolver)).isEqualTo(\"John\");\r\n    verifyPlaceholderResolutions(resolver, \"nested0\", \"nested1\", \"firstName\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.OnlyPlaceholderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.OnlyPlaceholderTests#parseWithMultipleNestedPlaceholdersInKey()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.OnlyPlaceholderTests#parseWithMultipleNestedPlaceholdersInKey()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.OnlyPlaceholderTests#placeholdersWithSeparatorAreHandledAsIs()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid placeholdersWithSeparatorAreHandledAsIs() {\r\n    PlaceholderResolver resolver = mockPlaceholderResolver(\"my:test\", \"value\");\r\n    assertThat(this.parser.replacePlaceholders(\"${my:test}\", resolver)).isEqualTo(\"value\");\r\n    verifyPlaceholderResolutions(resolver, \"my:test\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.OnlyPlaceholderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.OnlyPlaceholderTests#placeholdersWithSeparatorAreHandledAsIs()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.OnlyPlaceholderTests#placeholdersWithSeparatorAreHandledAsIs()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.OnlyPlaceholderTests#placeholdersWithoutEscapeCharAreNotEscaped()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid placeholdersWithoutEscapeCharAreNotEscaped() {\r\n    PlaceholderResolver resolver = mockPlaceholderResolver(\"test\", \"value\");\r\n    assertThat(this.parser.replacePlaceholders(\"\\\\${test}\", resolver)).isEqualTo(\"\\\\value\");\r\n    verifyPlaceholderResolutions(resolver, \"test\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.OnlyPlaceholderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.OnlyPlaceholderTests#placeholdersWithoutEscapeCharAreNotEscaped()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.OnlyPlaceholderTests#placeholdersWithoutEscapeCharAreNotEscaped()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.OnlyPlaceholderTests#textWithInvalidPlaceholderIsMerged()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid textWithInvalidPlaceholderIsMerged() {\r\n    String text = \"test${of${with${and${\";\r\n    ParsedValue parsedValue = this.parser.parse(text);\r\n    assertThat(parsedValue.parts()).singleElement().isInstanceOfSatisfying(TextPart.class, textPart -> assertThat(textPart.text()).isEqualTo(text));\r\n}",
    "tailType": "method_code"
  }
]