[
  {
    "head": "org.springframework.core.CollectionFactoryTests#createApproximateMapFromEmptyHashMap()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.CollectionFactoryTests#createApproximateMapFromNonEmptyHashMap()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid createApproximateMapFromNonEmptyHashMap() {\r\n    Map<String, String> hashMap = new HashMap<>();\r\n    hashMap.put(\"foo\", \"bar\");\r\n    Map<String, String> map = createApproximateMap(hashMap, 2);\r\n    assertThat(map).isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.CollectionFactoryTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.CollectionFactoryTests#createApproximateMapFromNonEmptyHashMap()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.CollectionFactoryTests#createApproximateMapFromNonEmptyHashMap()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.CollectionFactoryTests#createApproximateMapFromEmptyEnumMap()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid createApproximateMapFromEmptyEnumMap() {\r\n    Map<Color, String> colors = createApproximateMap(new EnumMap<>(Color.class), 2);\r\n    assertThat(colors).isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.CollectionFactoryTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.CollectionFactoryTests#createApproximateMapFromEmptyEnumMap()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.CollectionFactoryTests#createApproximateMapFromEmptyEnumMap()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.CollectionFactoryTests#createApproximateMapFromNonEmptyEnumMap()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid createApproximateMapFromNonEmptyEnumMap() {\r\n    EnumMap<Color, String> enumMap = new EnumMap<>(Color.class);\r\n    enumMap.put(Color.BLUE, \"blue\");\r\n    Map<Color, String> colors = createApproximateMap(enumMap, 2);\r\n    assertThat(colors).isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.CollectionFactoryTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.CollectionFactoryTests#createApproximateMapFromNonEmptyEnumMap()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.CollectionFactoryTests#createApproximateMapFromNonEmptyEnumMap()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.CollectionFactoryTests#createsCollectionsCorrectly()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid createsCollectionsCorrectly() {\r\n    // interfaces\r\n    testCollection(List.class, ArrayList.class);\r\n    testCollection(Set.class, LinkedHashSet.class);\r\n    testCollection(Collection.class, LinkedHashSet.class);\r\n    // on JDK 21: testCollection(SequencedSet.class, LinkedHashSet.class);\r\n    // on JDK 21: testCollection(SequencedCollection.class, LinkedHashSet.class);\r\n    testCollection(SortedSet.class, TreeSet.class);\r\n    testCollection(NavigableSet.class, TreeSet.class);\r\n    // concrete types\r\n    testCollection(ArrayList.class, ArrayList.class);\r\n    testCollection(HashSet.class, HashSet.class);\r\n    testCollection(LinkedHashSet.class, LinkedHashSet.class);\r\n    testCollection(TreeSet.class, TreeSet.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.CollectionFactoryTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.CollectionFactoryTests#createsCollectionsCorrectly()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.CollectionFactoryTests#createsCollectionsCorrectly()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.CollectionFactoryTests#testCollection(Class<?>,Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void testCollection(Class<?> collectionType, Class<?> resultType) {\r\n    assertThat(CollectionFactory.isApproximableCollectionType(collectionType)).isTrue();\r\n    assertThat(createCollection(collectionType, 0)).isExactlyInstanceOf(resultType);\r\n    assertThat(createCollection(collectionType, String.class, 0)).isExactlyInstanceOf(resultType);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.CollectionFactoryTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.CollectionFactoryTests#testCollection(Class<?>,Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.CollectionFactoryTests#createsEnumSet()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid createsEnumSet() {\r\n    assertThat(createCollection(EnumSet.class, Color.class, 0)).isInstanceOf(EnumSet.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.CollectionFactoryTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.CollectionFactoryTests#createsEnumSet()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.CollectionFactoryTests#createsEnumSet()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.CollectionFactoryTests#createsEnumSetSubclass()",
    "headType": "method",
    "relation": "provide",
    "tail": "// SPR-17619\r\n@Test\r\nvoid createsEnumSetSubclass() {\r\n    EnumSet<Color> enumSet = EnumSet.noneOf(Color.class);\r\n    assertThat(createCollection(enumSet.getClass(), Color.class, 0)).isInstanceOf(enumSet.getClass());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.CollectionFactoryTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.CollectionFactoryTests#createsEnumSetSubclass()",
    "tailType": "method"
  }
]