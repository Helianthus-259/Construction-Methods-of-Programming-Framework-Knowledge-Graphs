[
  {
    "head": "org.springframework.core.io.buffer.OutputStreamSubscription#addCap(long)",
    "headType": "method",
    "relation": "provide",
    "tail": "private long addCap(long n) {\r\n    while (true) {\r\n        long r = this.requested.get();\r\n        if (isTerminated(r) || isCancelled(r) || r == Long.MAX_VALUE) {\r\n            return r;\r\n        }\r\n        long u = addCap(r, n);\r\n        if (this.requested.compareAndSet(r, u)) {\r\n            return r;\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.OutputStreamSubscription",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.OutputStreamSubscription#addCap(long)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.OutputStreamSubscription#isTerminated(long)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static boolean isTerminated(long state) {\r\n    return state == (Long.MIN_VALUE | Long.MAX_VALUE);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.OutputStreamSubscription",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.OutputStreamSubscription#isTerminated(long)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.OutputStreamSubscription#isCancelled(long)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static boolean isCancelled(long state) {\r\n    return state == Long.MIN_VALUE;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.OutputStreamSubscription",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.OutputStreamSubscription#isCancelled(long)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.OutputStreamSubscription#addCap(long,long)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static long addCap(long a, long b) {\r\n    long res = a + b;\r\n    if (res < 0L) {\r\n        return Long.MAX_VALUE;\r\n    }\r\n    return res;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.OutputStreamSubscription",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.OutputStreamSubscription#addCap(long,long)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.OutputStreamSubscription",
    "headType": "class",
    "relation": "extend",
    "tail": "OutputStream",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.io.buffer",
    "tailType": "package"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.io.buffer",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.io.buffer",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.buffer.PooledDataBuffer",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.buffer.PooledDataBuffer",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io.buffer;\n\n/**\n * Extension of {@link DataBuffer} that allows for buffers that share\n * a memory pool. Introduces methods for reference counting.\n *\n * @author Arjen Poutsma\n * @since 5.0\n */\npublic interface PooledDataBuffer extends TouchableDataBuffer {\n\n\t/**\n\t * Return {@code true} if this buffer is allocated;\n\t * {@code false} if it has been deallocated.\n\t * @since 5.1\n\t */\n\tboolean isAllocated();\n\n\t/**\n\t * Increase the reference count for this buffer by one.\n\t * @return this buffer\n\t */\n\tPooledDataBuffer retain();\n\n\t/**\n\t * Associate the given hint with the data buffer for debugging purposes.\n\t * @return this buffer\n\t * @since 5.3.2\n\t */\n\t@Override\n\tPooledDataBuffer touch(Object hint);\n\n\t/**\n\t * Decrease the reference count for this buffer by one,\n\t * and deallocate it once the count reaches zero.\n\t * @return {@code true} if the buffer was deallocated;\n\t * {@code false} otherwise\n\t */\n\tboolean release();\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.buffer.PooledDataBuffer#isAllocated()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return {@code true} if this buffer is allocated;\r\n * {@code false} if it has been deallocated.\r\n * @since 5.1\r\n */\r\nboolean isAllocated();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.PooledDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.PooledDataBuffer#isAllocated()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.PooledDataBuffer#retain()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Increase the reference count for this buffer by one.\r\n * @return this buffer\r\n */\r\nPooledDataBuffer retain();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.PooledDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.PooledDataBuffer#retain()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.PooledDataBuffer#touch(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Associate the given hint with the data buffer for debugging purposes.\r\n * @return this buffer\r\n * @since 5.3.2\r\n */\r\n@Override\r\nPooledDataBuffer touch(Object hint);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.PooledDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.PooledDataBuffer#touch(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.PooledDataBuffer#touch(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  }
]