[
  {
    "head": "org.springframework.core.env.ConfigurableEnvironment",
    "headType": "class",
    "relation": "extend",
    "tail": "ConfigurablePropertyResolver",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.env",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.env",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.env.ConfigurablePropertyResolver",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.env.ConfigurablePropertyResolver",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.env;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.convert.support.ConfigurableConversionService;\n\n/**\n * Configuration interface to be implemented by most if not all {@link PropertyResolver}\n * types. Provides facilities for accessing and customizing the\n * {@link org.springframework.core.convert.ConversionService ConversionService}\n * used when converting property values from one type to another.\n *\n * @author Chris Beams\n * @author Stephane Nicoll\n * @since 3.1\n */\npublic interface ConfigurablePropertyResolver extends PropertyResolver {\n\n\t/**\n\t * Return the {@link ConfigurableConversionService} used when performing type\n\t * conversions on properties.\n\t * <p>The configurable nature of the returned conversion service allows for\n\t * the convenient addition and removal of individual {@code Converter} instances:\n\t * <pre class=\"code\">\n\t * ConfigurableConversionService cs = env.getConversionService();\n\t * cs.addConverter(new FooConverter());\n\t * </pre>\n\t * @see PropertyResolver#getProperty(String, Class)\n\t * @see org.springframework.core.convert.converter.ConverterRegistry#addConverter\n\t */\n\tConfigurableConversionService getConversionService();\n\n\t/**\n\t * Set the {@link ConfigurableConversionService} to be used when performing type\n\t * conversions on properties.\n\t * <p><strong>Note:</strong> as an alternative to fully replacing the\n\t * {@code ConversionService}, consider adding or removing individual\n\t * {@code Converter} instances by drilling into {@link #getConversionService()}\n\t * and calling methods such as {@code #addConverter}.\n\t * @see PropertyResolver#getProperty(String, Class)\n\t * @see #getConversionService()\n\t * @see org.springframework.core.convert.converter.ConverterRegistry#addConverter\n\t */\n\tvoid setConversionService(ConfigurableConversionService conversionService);\n\n\t/**\n\t * Set the prefix that placeholders replaced by this resolver must begin with.\n\t */\n\tvoid setPlaceholderPrefix(String placeholderPrefix);\n\n\t/**\n\t * Set the suffix that placeholders replaced by this resolver must end with.\n\t */\n\tvoid setPlaceholderSuffix(String placeholderSuffix);\n\n\t/**\n\t * Specify the separating character between the placeholders replaced by this\n\t * resolver and their associated default value, or {@code null} if no such\n\t * special character should be processed as a value separator.\n\t */\n\tvoid setValueSeparator(@Nullable String valueSeparator);\n\n\t/**\n\t * Specify the escape character to use to ignore placeholder prefix or\n\t * value separator, or {@code null} if no escaping should take place.\n\t * @since 6.2\n\t */\n\tvoid setEscapeCharacter(@Nullable Character escapeCharacter);\n\n\t/**\n\t * Set whether to throw an exception when encountering an unresolvable placeholder\n\t * nested within the value of a given property. A {@code false} value indicates strict\n\t * resolution, i.e. that an exception will be thrown. A {@code true} value indicates\n\t * that unresolvable nested placeholders should be passed through in their unresolved\n\t * ${...} form.\n\t * <p>Implementations of {@link #getProperty(String)} and its variants must inspect\n\t * the value set here to determine correct behavior when property values contain\n\t * unresolvable placeholders.\n\t * @since 3.2\n\t */\n\tvoid setIgnoreUnresolvableNestedPlaceholders(boolean ignoreUnresolvableNestedPlaceholders);\n\n\t/**\n\t * Specify which properties must be present, to be verified by\n\t * {@link #validateRequiredProperties()}.\n\t */\n\tvoid setRequiredProperties(String... requiredProperties);\n\n\t/**\n\t * Validate that each of the properties specified by\n\t * {@link #setRequiredProperties} is present and resolves to a\n\t * non-{@code null} value.\n\t * @throws MissingRequiredPropertiesException if any of the required\n\t * properties are not resolvable.\n\t */\n\tvoid validateRequiredProperties() throws MissingRequiredPropertiesException;\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.env.ConfigurablePropertyResolver#getConversionService()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the {@link ConfigurableConversionService} used when performing type\r\n * conversions on properties.\r\n * <p>The configurable nature of the returned conversion service allows for\r\n * the convenient addition and removal of individual {@code Converter} instances:\r\n * <pre class=\"code\">\r\n * ConfigurableConversionService cs = env.getConversionService();\r\n * cs.addConverter(new FooConverter());\r\n * </pre>\r\n * @see PropertyResolver#getProperty(String, Class)\r\n * @see org.springframework.core.convert.converter.ConverterRegistry#addConverter\r\n */\r\nConfigurableConversionService getConversionService();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.ConfigurablePropertyResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.ConfigurablePropertyResolver#getConversionService()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.ConfigurablePropertyResolver#setConversionService(ConfigurableConversionService)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Set the {@link ConfigurableConversionService} to be used when performing type\r\n * conversions on properties.\r\n * <p><strong>Note:</strong> as an alternative to fully replacing the\r\n * {@code ConversionService}, consider adding or removing individual\r\n * {@code Converter} instances by drilling into {@link #getConversionService()}\r\n * and calling methods such as {@code #addConverter}.\r\n * @see PropertyResolver#getProperty(String, Class)\r\n * @see #getConversionService()\r\n * @see org.springframework.core.convert.converter.ConverterRegistry#addConverter\r\n */\r\nvoid setConversionService(ConfigurableConversionService conversionService);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.ConfigurablePropertyResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.ConfigurablePropertyResolver#setConversionService(ConfigurableConversionService)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.ConfigurablePropertyResolver#setPlaceholderPrefix(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Set the prefix that placeholders replaced by this resolver must begin with.\r\n */\r\nvoid setPlaceholderPrefix(String placeholderPrefix);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.ConfigurablePropertyResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.ConfigurablePropertyResolver#setPlaceholderPrefix(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.ConfigurablePropertyResolver#setPlaceholderSuffix(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Set the suffix that placeholders replaced by this resolver must end with.\r\n */\r\nvoid setPlaceholderSuffix(String placeholderSuffix);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.ConfigurablePropertyResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.ConfigurablePropertyResolver#setPlaceholderSuffix(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.ConfigurablePropertyResolver#setValueSeparator(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Specify the separating character between the placeholders replaced by this\r\n * resolver and their associated default value, or {@code null} if no such\r\n * special character should be processed as a value separator.\r\n */\r\nvoid setValueSeparator(@Nullable String valueSeparator);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.ConfigurablePropertyResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.ConfigurablePropertyResolver#setValueSeparator(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.ConfigurablePropertyResolver#setEscapeCharacter(Character)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Specify the escape character to use to ignore placeholder prefix or\r\n * value separator, or {@code null} if no escaping should take place.\r\n * @since 6.2\r\n */\r\nvoid setEscapeCharacter(@Nullable Character escapeCharacter);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.ConfigurablePropertyResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.ConfigurablePropertyResolver#setEscapeCharacter(Character)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.ConfigurablePropertyResolver#setIgnoreUnresolvableNestedPlaceholders(boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Set whether to throw an exception when encountering an unresolvable placeholder\r\n * nested within the value of a given property. A {@code false} value indicates strict\r\n * resolution, i.e. that an exception will be thrown. A {@code true} value indicates\r\n * that unresolvable nested placeholders should be passed through in their unresolved\r\n * ${...} form.\r\n * <p>Implementations of {@link #getProperty(String)} and its variants must inspect\r\n * the value set here to determine correct behavior when property values contain\r\n * unresolvable placeholders.\r\n * @since 3.2\r\n */\r\nvoid setIgnoreUnresolvableNestedPlaceholders(boolean ignoreUnresolvableNestedPlaceholders);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.ConfigurablePropertyResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.ConfigurablePropertyResolver#setIgnoreUnresolvableNestedPlaceholders(boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.ConfigurablePropertyResolver#setRequiredProperties(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Specify which properties must be present, to be verified by\r\n * {@link #validateRequiredProperties()}.\r\n */\r\nvoid setRequiredProperties(String... requiredProperties);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.ConfigurablePropertyResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.ConfigurablePropertyResolver#setRequiredProperties(String)",
    "tailType": "method"
  }
]