[
  {
    "head": "org.springframework.aot.nativex.ResourceHintsAttributes#RESOURCE_BUNDLE_HINT_COMPARATOR",
    "headType": "field",
    "relation": "haveType",
    "tail": "Comparator<ResourceBundleHint>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.nativex.ResourceHintsAttributes#resources(ResourceHints)",
    "headType": "method",
    "relation": "provide",
    "tail": "public List<Map<String, Object>> resources(ResourceHints hint) {\r\n    return hint.resourcePatternHints().map(ResourcePatternHints::getIncludes).flatMap(List::stream).distinct().sorted(RESOURCE_PATTERN_HINT_COMPARATOR).map(this::toAttributes).toList();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.nativex.ResourceHintsAttributes",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.nativex.ResourceHintsAttributes#resources(ResourceHints)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.nativex.ResourceHintsAttributes#resourceBundles(ResourceHints)",
    "headType": "method",
    "relation": "provide",
    "tail": "public List<Map<String, Object>> resourceBundles(ResourceHints hint) {\r\n    return hint.resourceBundleHints().sorted(RESOURCE_BUNDLE_HINT_COMPARATOR).map(this::toAttributes).toList();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.nativex.ResourceHintsAttributes",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.nativex.ResourceHintsAttributes#resourceBundles(ResourceHints)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.nativex.ResourceHintsAttributes#toAttributes(ResourceBundleHint)",
    "headType": "method",
    "relation": "provide",
    "tail": "private Map<String, Object> toAttributes(ResourceBundleHint hint) {\r\n    Map<String, Object> attributes = new LinkedHashMap<>();\r\n    handleCondition(attributes, hint);\r\n    attributes.put(\"name\", hint.getBaseName());\r\n    return attributes;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.nativex.ResourceHintsAttributes",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.nativex.ResourceHintsAttributes#toAttributes(ResourceBundleHint)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.nativex.ResourceHintsAttributes#toAttributes(ResourcePatternHint)",
    "headType": "method",
    "relation": "provide",
    "tail": "private Map<String, Object> toAttributes(ResourcePatternHint hint) {\r\n    Map<String, Object> attributes = new LinkedHashMap<>();\r\n    handleCondition(attributes, hint);\r\n    attributes.put(\"glob\", hint.getPattern());\r\n    return attributes;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.nativex.ResourceHintsAttributes",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.nativex.ResourceHintsAttributes#toAttributes(ResourcePatternHint)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.nativex.ResourceHintsAttributes#handleCondition(Map<String,Object>,ConditionalHint)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void handleCondition(Map<String, Object> attributes, ConditionalHint hint) {\r\n    if (hint.getReachableType() != null) {\r\n        Map<String, Object> conditionAttributes = new LinkedHashMap<>();\r\n        conditionAttributes.put(\"typeReached\", hint.getReachableType());\r\n        attributes.put(\"condition\", conditionAttributes);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.nativex.ResourceHintsAttributes",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.nativex.ResourceHintsAttributes#handleCondition(Map<String,Object>,ConditionalHint)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.MultiValueMapTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.MultiValueMapTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Stream;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.Arguments;\nimport org.junit.jupiter.params.provider.MethodSource;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.SoftAssertions.assertSoftly;\nimport static org.junit.jupiter.params.provider.Arguments.argumentSet;\n\n/**\n * Tests for {@link MultiValueMap}.\n *\n * @author Mihai Dumitrescu\n * @author Arjen Poutsma\n * @author Juergen Hoeller\n * @author Stephane Nicoll\n * @author Sam Brannen\n */\nclass MultiValueMapTests {\n\n\t@ParameterizedMultiValueMapTest\n\tvoid add(MultiValueMap<String, String> map) {\n\t\tint initialSize = map.size();\n\t\tmap.add(\"key\", \"value1\");\n\t\tmap.add(\"key\", \"value2\");\n\t\tassertThat(map).hasSize(initialSize + 1);\n\t\tassertThat(map.get(\"key\")).containsExactly(\"value1\", \"value2\");\n\t}\n\n\t@ParameterizedMultiValueMapTest\n\tvoid addIfAbsentWhenAbsent(MultiValueMap<String, String> map) {\n\t\tmap.addIfAbsent(\"key\", \"value1\");\n\t\tassertThat(map.get(\"key\")).containsExactly(\"value1\");\n\t}\n\n\t@ParameterizedMultiValueMapTest\n\tvoid addIfAbsentWhenPresent(MultiValueMap<String, String> map) {\n\t\tmap.add(\"key\", \"value1\");\n\t\tmap.addIfAbsent(\"key\", \"value2\");\n\t\tassertThat(map.get(\"key\")).containsExactly(\"value1\");\n\t}\n\n\t@ParameterizedMultiValueMapTest\n\tvoid set(MultiValueMap<String, String> map) {\n\t\tmap.set(\"key\", \"value1\");\n\t\tmap.set(\"key\", \"value2\");\n\t\tassertThat(map.get(\"key\")).containsExactly(\"value2\");\n\t}\n\n\t@ParameterizedMultiValueMapTest\n\tvoid addAll(MultiValueMap<String, String> map) {\n\t\tint initialSize = map.size();\n\t\tmap.add(\"key\", \"value1\");\n\t\tmap.addAll(\"key\", Arrays.asList(\"value2\", \"value3\"));\n\t\tassertThat(map).hasSize(initialSize + 1);\n\t\tassertThat(map.get(\"key\")).containsExactly(\"value1\", \"value2\", \"value3\");\n\t}\n\n\t@ParameterizedMultiValueMapTest\n\tvoid addAllWithEmptyList(MultiValueMap<String, String> map) {\n\t\tint initialSize = map.size();\n\t\tmap.addAll(\"key\", List.of());\n\t\tassertThat(map).hasSize(initialSize + 1);\n\t\tassertThat(map.get(\"key\")).isEmpty();\n\t\tassertThat(map.getFirst(\"key\")).isNull();\n\t}\n\n\t@ParameterizedMultiValueMapTest\n\tvoid getFirst(MultiValueMap<String, String> map) {\n\t\tList<String> values = List.of(\"value1\", \"value2\");\n\t\tmap.put(\"key\", values);\n\t\tassertThat(map.getFirst(\"key\")).isEqualTo(\"value1\");\n\t\tassertThat(map.getFirst(\"other\")).isNull();\n\t}\n\n\t@ParameterizedMultiValueMapTest\n\tvoid toSingleValueMap(MultiValueMap<String, String> map) {\n\t\tint initialSize = map.size();\n\t\tList<String> values = List.of(\"value1\", \"value2\");\n\t\tmap.put(\"key\", values);\n\t\tMap<String, String> singleValueMap = map.toSingleValueMap();\n\t\tassertThat(singleValueMap).hasSize(initialSize + 1);\n\t\tassertThat(singleValueMap.get(\"key\")).isEqualTo(\"value1\");\n\t}\n\n\t@ParameterizedMultiValueMapTest\n\tvoid toSingleValueMapWithEmptyList(MultiValueMap<String, String> map) {\n\t\tint initialSize = map.size();\n\t\tmap.put(\"key\", List.of());\n\t\tMap<String, String> singleValueMap = map.toSingleValueMap();\n\t\tassertThat(singleValueMap).hasSize(initialSize);\n\t\tassertThat(singleValueMap.get(\"key\")).isNull();\n\t}\n\n\t@ParameterizedMultiValueMapTest\n\tvoid equalsOnExistingValues(MultiValueMap<String, String> map) {\n\t\tmap.clear();\n\t\tmap.set(\"key1\", \"value1\");\n\t\tassertThat(map).isEqualTo(map);\n\t}\n\n\t@ParameterizedMultiValueMapTest\n\tvoid equalsOnEmpty(MultiValueMap<String, String> map) {\n\t\tmap.clear();\n\t\tmap.set(\"key1\", \"value1\");\n\t\tMultiValueMap<String, String> map1 = new LinkedMultiValueMap<>();\n\t\tmap1.set(\"key1\", \"value1\");\n\t\tassertThat(map1).isEqualTo(map);\n\t\tassertThat(map).isEqualTo(map1);\n\t\tMap<String, List<String>> map2 = Map.of(\"key1\", List.of(\"value1\"));\n\t\tassertThat(map2).isEqualTo(map);\n\t\tassertThat(map).isEqualTo(map2);\n\t}\n\n\t@Test\n\tvoid canNotChangeAnUnmodifiableMultiValueMap() {\n\t\tMultiValueMap<String, String> map = new LinkedMultiValueMap<>();\n\t\tMultiValueMap<String, String> unmodifiableMap = CollectionUtils.unmodifiableMultiValueMap(map);\n\t\tassertSoftly(softly -> {\n\t\t\tsoftly.assertThatExceptionOfType(UnsupportedOperationException.class)\n\t\t\t\t\t.isThrownBy(() -> unmodifiableMap.add(\"key\", \"value\"));\n\t\t\tsoftly.assertThatExceptionOfType(UnsupportedOperationException.class)\n\t\t\t\t\t.isThrownBy(() -> unmodifiableMap.addIfAbsent(\"key\", \"value\"));\n\t\t\tsoftly.assertThatExceptionOfType(UnsupportedOperationException.class)\n\t\t\t\t\t.isThrownBy(() -> unmodifiableMap.addAll(\"key\", exampleListOfValues()));\n\t\t\tsoftly.assertThatExceptionOfType(UnsupportedOperationException.class)\n\t\t\t\t\t.isThrownBy(() -> unmodifiableMap.addAll(exampleMultiValueMap()));\n\t\t\tsoftly.assertThatExceptionOfType(UnsupportedOperationException.class)\n\t\t\t\t\t.isThrownBy(() -> unmodifiableMap.set(\"key\", \"value\"));\n\t\t\tsoftly.assertThatExceptionOfType(UnsupportedOperationException.class)\n\t\t\t\t\t.isThrownBy(() -> unmodifiableMap.setAll(exampleHashMap()));\n\t\t\tsoftly.assertThatExceptionOfType(UnsupportedOperationException.class)\n\t\t\t\t\t.isThrownBy(() -> unmodifiableMap.put(\"key\", exampleListOfValues()));\n\t\t\tsoftly.assertThatExceptionOfType(UnsupportedOperationException.class)\n\t\t\t\t\t.isThrownBy(() -> unmodifiableMap.putIfAbsent(\"key\", exampleListOfValues()));\n\t\t\tsoftly.assertThatExceptionOfType(UnsupportedOperationException.class)\n\t\t\t\t\t.isThrownBy(() -> unmodifiableMap.putAll(exampleMultiValueMap()));\n\t\t\tsoftly.assertThatExceptionOfType(UnsupportedOperationException.class)\n\t\t\t\t\t.isThrownBy(() -> unmodifiableMap.remove(\"key1\"));\n\t\t});\n\t}\n\n\tprivate static List<String> exampleListOfValues() {\n\t\treturn List.of(\"value1\", \"value2\");\n\t}\n\n\tprivate static Map<String, String> exampleHashMap() {\n\t\treturn Map.of(\"key2\", \"key2.value1\");\n\t}\n\n\tprivate static MultiValueMap<String, String> exampleMultiValueMap() {\n\t\tLinkedMultiValueMap<String, String> map = new LinkedMultiValueMap<>();\n\t\tmap.put(\"key1\", Arrays.asList(\"key1.value1\", \"key1.value2\"));\n\t\treturn map;\n\t}\n\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@ParameterizedTest\n\t@MethodSource(\"mapsUnderTest\")\n\t@interface ParameterizedMultiValueMapTest {\n\t}\n\n\tstatic Stream<Arguments> mapsUnderTest() {\n\t\treturn Stream.of(\n\t\t\t\targumentSet(\"new LinkedMultiValueMap<>()\", new LinkedMultiValueMap<>()),\n\t\t\t\targumentSet(\"new LinkedMultiValueMap<>(new HashMap<>())\", new LinkedMultiValueMap<>(new HashMap<>())),\n\t\t\t\targumentSet(\"new LinkedMultiValueMap<>(new LinkedHashMap<>())\", new LinkedMultiValueMap<>(new LinkedHashMap<>())),\n\t\t\t\targumentSet(\"new LinkedMultiValueMap<>(Map.of(...))\", new LinkedMultiValueMap<>(Map.of(\"existingkey\", List.of(\"existingvalue1\", \"existingvalue2\")))),\n\t\t\t\targumentSet(\"CollectionUtils.toMultiValueMap\", CollectionUtils.toMultiValueMap(new HashMap<>()))\n\t\t\t);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.MultiValueMapTests#add(MultiValueMap<String,String>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedMultiValueMapTest\r\nvoid add(MultiValueMap<String, String> map) {\r\n    int initialSize = map.size();\r\n    map.add(\"key\", \"value1\");\r\n    map.add(\"key\", \"value2\");\r\n    assertThat(map).hasSize(initialSize + 1);\r\n    assertThat(map.get(\"key\")).containsExactly(\"value1\", \"value2\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MultiValueMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MultiValueMapTests#add(MultiValueMap<String,String>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MultiValueMapTests#add(MultiValueMap<String,String>)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedMultiValueMapTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MultiValueMapTests#addIfAbsentWhenAbsent(MultiValueMap<String,String>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedMultiValueMapTest\r\nvoid addIfAbsentWhenAbsent(MultiValueMap<String, String> map) {\r\n    map.addIfAbsent(\"key\", \"value1\");\r\n    assertThat(map.get(\"key\")).containsExactly(\"value1\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MultiValueMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MultiValueMapTests#addIfAbsentWhenAbsent(MultiValueMap<String,String>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MultiValueMapTests#addIfAbsentWhenAbsent(MultiValueMap<String,String>)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedMultiValueMapTest",
    "tailType": "annotation"
  }
]