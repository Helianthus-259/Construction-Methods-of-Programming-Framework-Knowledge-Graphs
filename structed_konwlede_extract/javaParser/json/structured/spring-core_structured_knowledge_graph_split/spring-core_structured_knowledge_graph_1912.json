[
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#stringToEnumWithBaseInterfaceConversion()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#convertNullAnnotatedStringToString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid convertNullAnnotatedStringToString() throws Exception {\r\n    String source = null;\r\n    TypeDescriptor sourceType = new TypeDescriptor(getClass().getField(\"annotatedString\"));\r\n    TypeDescriptor targetType = TypeDescriptor.valueOf(String.class);\r\n    conversionService.convert(source, sourceType, targetType);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#convertNullAnnotatedStringToString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#convertNullAnnotatedStringToString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#multipleCollectionTypesFromSameSourceType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid multipleCollectionTypesFromSameSourceType() throws Exception {\r\n    conversionService.addConverter(new MyStringToRawCollectionConverter());\r\n    conversionService.addConverter(new MyStringToGenericCollectionConverter());\r\n    conversionService.addConverter(new MyStringToStringCollectionConverter());\r\n    conversionService.addConverter(new MyStringToIntegerCollectionConverter());\r\n    assertThat(conversionService.convert(\"test\", TypeDescriptor.valueOf(String.class), new TypeDescriptor(getClass().getField(\"stringCollection\")))).isEqualTo(Collections.singleton(\"testX\"));\r\n    assertThat(conversionService.convert(\"test\", TypeDescriptor.valueOf(String.class), new TypeDescriptor(getClass().getField(\"integerCollection\")))).isEqualTo(Collections.singleton(4));\r\n    assertThat(conversionService.convert(\"test\", TypeDescriptor.valueOf(String.class), new TypeDescriptor(getClass().getField(\"rawCollection\")))).isEqualTo(Collections.singleton(4));\r\n    assertThat(conversionService.convert(\"test\", TypeDescriptor.valueOf(String.class), new TypeDescriptor(getClass().getField(\"genericCollection\")))).isEqualTo(Collections.singleton(4));\r\n    assertThat(conversionService.convert(\"test\", TypeDescriptor.valueOf(String.class), new TypeDescriptor(getClass().getField(\"rawCollection\")))).isEqualTo(Collections.singleton(4));\r\n    assertThat(conversionService.convert(\"test\", TypeDescriptor.valueOf(String.class), new TypeDescriptor(getClass().getField(\"stringCollection\")))).isEqualTo(Collections.singleton(\"testX\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#multipleCollectionTypesFromSameSourceType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#multipleCollectionTypesFromSameSourceType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#adaptedCollectionTypesFromSameSourceType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid adaptedCollectionTypesFromSameSourceType() throws Exception {\r\n    conversionService.addConverter(new MyStringToStringCollectionConverter());\r\n    assertThat(conversionService.convert(\"test\", TypeDescriptor.valueOf(String.class), new TypeDescriptor(getClass().getField(\"stringCollection\")))).isEqualTo(Collections.singleton(\"testX\"));\r\n    assertThat(conversionService.convert(\"test\", TypeDescriptor.valueOf(String.class), new TypeDescriptor(getClass().getField(\"genericCollection\")))).isEqualTo(Collections.singleton(\"testX\"));\r\n    assertThat(conversionService.convert(\"test\", TypeDescriptor.valueOf(String.class), new TypeDescriptor(getClass().getField(\"rawCollection\")))).isEqualTo(Collections.singleton(\"testX\"));\r\n    assertThat(conversionService.convert(\"test\", TypeDescriptor.valueOf(String.class), new TypeDescriptor(getClass().getField(\"genericCollection\")))).isEqualTo(Collections.singleton(\"testX\"));\r\n    assertThat(conversionService.convert(\"test\", TypeDescriptor.valueOf(String.class), new TypeDescriptor(getClass().getField(\"stringCollection\")))).isEqualTo(Collections.singleton(\"testX\"));\r\n    assertThat(conversionService.convert(\"test\", TypeDescriptor.valueOf(String.class), new TypeDescriptor(getClass().getField(\"rawCollection\")))).isEqualTo(Collections.singleton(\"testX\"));\r\n    assertThatExceptionOfType(ConverterNotFoundException.class).isThrownBy(() -> conversionService.convert(\"test\", TypeDescriptor.valueOf(String.class), new TypeDescriptor(getClass().getField(\"integerCollection\"))));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#adaptedCollectionTypesFromSameSourceType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#adaptedCollectionTypesFromSameSourceType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#genericCollectionAsSource()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid genericCollectionAsSource() throws Exception {\r\n    conversionService.addConverter(new MyStringToGenericCollectionConverter());\r\n    assertThat(conversionService.convert(\"test\", TypeDescriptor.valueOf(String.class), new TypeDescriptor(getClass().getField(\"stringCollection\")))).isEqualTo(Collections.singleton(\"testX\"));\r\n    assertThat(conversionService.convert(\"test\", TypeDescriptor.valueOf(String.class), new TypeDescriptor(getClass().getField(\"genericCollection\")))).isEqualTo(Collections.singleton(\"testX\"));\r\n    assertThat(conversionService.convert(\"test\", TypeDescriptor.valueOf(String.class), new TypeDescriptor(getClass().getField(\"rawCollection\")))).isEqualTo(Collections.singleton(\"testX\"));\r\n    // The following is unpleasant but a consequence of the generic collection converter above...\r\n    assertThat(conversionService.convert(\"test\", TypeDescriptor.valueOf(String.class), new TypeDescriptor(getClass().getField(\"integerCollection\")))).isEqualTo(Collections.singleton(\"testX\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#genericCollectionAsSource()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#genericCollectionAsSource()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#rawCollectionAsSource()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid rawCollectionAsSource() throws Exception {\r\n    conversionService.addConverter(new MyStringToRawCollectionConverter());\r\n    assertThat(conversionService.convert(\"test\", TypeDescriptor.valueOf(String.class), new TypeDescriptor(getClass().getField(\"stringCollection\")))).isEqualTo(Collections.singleton(\"testX\"));\r\n    assertThat(conversionService.convert(\"test\", TypeDescriptor.valueOf(String.class), new TypeDescriptor(getClass().getField(\"genericCollection\")))).isEqualTo(Collections.singleton(\"testX\"));\r\n    assertThat(conversionService.convert(\"test\", TypeDescriptor.valueOf(String.class), new TypeDescriptor(getClass().getField(\"rawCollection\")))).isEqualTo(Collections.singleton(\"testX\"));\r\n    // The following is unpleasant but a consequence of the raw collection converter above...\r\n    assertThat(conversionService.convert(\"test\", TypeDescriptor.valueOf(String.class), new TypeDescriptor(getClass().getField(\"integerCollection\")))).isEqualTo(Collections.singleton(\"testX\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#rawCollectionAsSource()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#rawCollectionAsSource()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#stringListToListOfSubclassOfUnboundGenericClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid stringListToListOfSubclassOfUnboundGenericClass() {\r\n    conversionService.addConverter(new StringListToAListConverter());\r\n    conversionService.addConverter(new StringListToBListConverter());\r\n    List<?> aList = (List<?>) conversionService.convert(List.of(\"foo\"), TypeDescriptor.collection(List.class, TypeDescriptor.valueOf(String.class)), TypeDescriptor.collection(List.class, TypeDescriptor.valueOf(ARaw.class)));\r\n    assertThat(aList).allMatch(e -> e instanceof ARaw);\r\n    List<?> bList = (List<?>) conversionService.convert(List.of(\"foo\"), TypeDescriptor.collection(List.class, TypeDescriptor.valueOf(String.class)), TypeDescriptor.collection(List.class, TypeDescriptor.valueOf(BRaw.class)));\r\n    assertThat(bList).allMatch(e -> e instanceof BRaw);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#stringListToListOfSubclassOfUnboundGenericClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#stringListToListOfSubclassOfUnboundGenericClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.support.MyBaseInterface",
    "tailType": "class"
  }
]