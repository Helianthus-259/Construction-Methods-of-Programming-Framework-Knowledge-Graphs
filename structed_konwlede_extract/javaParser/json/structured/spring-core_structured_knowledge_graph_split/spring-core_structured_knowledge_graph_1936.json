[
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#fieldComplexTypeDescriptor()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#fieldComplexTypeDescriptor2()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid fieldComplexTypeDescriptor2() throws Exception {\r\n    TypeDescriptor typeDescriptor = new TypeDescriptor(TypeDescriptorTests.class.getDeclaredField(\"nestedMapField\"));\r\n    assertThat(typeDescriptor.isMap()).isTrue();\r\n    assertThat(typeDescriptor.getMapKeyTypeDescriptor().getType()).isEqualTo(String.class);\r\n    assertThat(typeDescriptor.getMapValueTypeDescriptor().getType()).isEqualTo(List.class);\r\n    assertThat(typeDescriptor.getMapValueTypeDescriptor().getElementTypeDescriptor().getType()).isEqualTo(Integer.class);\r\n    assertThat(typeDescriptor.toString()).isEqualTo(\"java.util.Map<java.lang.String, java.util.List<java.lang.Integer>>\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#fieldComplexTypeDescriptor2()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#fieldComplexTypeDescriptor2()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#fieldMap()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid fieldMap() throws Exception {\r\n    TypeDescriptor desc = new TypeDescriptor(TypeDescriptorTests.class.getField(\"fieldMap\"));\r\n    assertThat(desc.isMap()).isTrue();\r\n    assertThat(desc.getMapKeyTypeDescriptor().getElementTypeDescriptor().getType()).isEqualTo(Integer.class);\r\n    assertThat(desc.getMapValueTypeDescriptor().getElementTypeDescriptor().getType()).isEqualTo(Long.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#fieldMap()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#fieldMap()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#fieldAnnotated()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid fieldAnnotated() throws Exception {\r\n    TypeDescriptor typeDescriptor = new TypeDescriptor(getClass().getField(\"fieldAnnotated\"));\r\n    assertThat(typeDescriptor.getAnnotations()).hasSize(1);\r\n    assertThat(typeDescriptor.getAnnotation(FieldAnnotation.class)).isNotNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#fieldAnnotated()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#fieldAnnotated()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#valueOfScalar()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid valueOfScalar() {\r\n    TypeDescriptor typeDescriptor = TypeDescriptor.valueOf(Integer.class);\r\n    assertThat(typeDescriptor.isPrimitive()).isFalse();\r\n    assertThat(typeDescriptor.isArray()).isFalse();\r\n    assertThat(typeDescriptor.isCollection()).isFalse();\r\n    assertThat(typeDescriptor.isMap()).isFalse();\r\n    assertThat(typeDescriptor.getType()).isEqualTo(Integer.class);\r\n    assertThat(typeDescriptor.getObjectType()).isEqualTo(Integer.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#valueOfScalar()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#valueOfScalar()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#valueOfPrimitive()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid valueOfPrimitive() {\r\n    TypeDescriptor typeDescriptor = TypeDescriptor.valueOf(int.class);\r\n    assertThat(typeDescriptor.isPrimitive()).isTrue();\r\n    assertThat(typeDescriptor.isArray()).isFalse();\r\n    assertThat(typeDescriptor.isCollection()).isFalse();\r\n    assertThat(typeDescriptor.isMap()).isFalse();\r\n    assertThat(typeDescriptor.getType()).isEqualTo(int.class);\r\n    assertThat(typeDescriptor.getObjectType()).isEqualTo(Integer.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#valueOfPrimitive()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#valueOfPrimitive()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#valueOfArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid valueOfArray() {\r\n    TypeDescriptor typeDescriptor = TypeDescriptor.valueOf(int[].class);\r\n    assertThat(typeDescriptor.isArray()).isTrue();\r\n    assertThat(typeDescriptor.isCollection()).isFalse();\r\n    assertThat(typeDescriptor.isMap()).isFalse();\r\n    assertThat(typeDescriptor.getElementTypeDescriptor().getType()).isEqualTo(int.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#valueOfArray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#valueOfArray()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#valueOfCollection()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid valueOfCollection() {\r\n    TypeDescriptor typeDescriptor = TypeDescriptor.valueOf(Collection.class);\r\n    assertThat(typeDescriptor.isCollection()).isTrue();\r\n    assertThat(typeDescriptor.isArray()).isFalse();\r\n    assertThat(typeDescriptor.isMap()).isFalse();\r\n    assertThat((Object) typeDescriptor.getElementTypeDescriptor()).isNull();\r\n}",
    "tailType": "method_code"
  }
]