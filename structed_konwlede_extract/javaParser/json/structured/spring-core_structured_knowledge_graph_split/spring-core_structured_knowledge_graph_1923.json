[
  {
    "head": "org.springframework.core.convert.support.MapToMapConverterTests#notGenericMapSource",
    "headType": "field",
    "relation": "haveType",
    "tail": "Map",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.support.MapToMapConverterTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.support.MapToMapConverterTests#enumMap",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.support.MapToMapConverterTests#enumMap",
    "headType": "field",
    "relation": "haveType",
    "tail": "EnumMap<MyEnum, Integer>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.support.MapToMapConverterTests#setup()",
    "headType": "method",
    "relation": "provide",
    "tail": "@BeforeEach\r\nvoid setup() {\r\n    conversionService.addConverter(new MapToMapConverter(conversionService));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.MapToMapConverterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.MapToMapConverterTests#setup()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.MapToMapConverterTests#setup()",
    "headType": "method",
    "relation": "use",
    "tail": "@BeforeEach",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.MapToMapConverterTests#scalarMap()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid scalarMap() throws Exception {\r\n    Map<String, String> map = new HashMap<>();\r\n    map.put(\"1\", \"9\");\r\n    map.put(\"2\", \"37\");\r\n    TypeDescriptor sourceType = TypeDescriptor.forObject(map);\r\n    TypeDescriptor targetType = new TypeDescriptor(getClass().getField(\"scalarMapTarget\"));\r\n    assertThat(conversionService.canConvert(sourceType, targetType)).isTrue();\r\n    try {\r\n        conversionService.convert(map, sourceType, targetType);\r\n    } catch (ConversionFailedException ex) {\r\n        assertThat(ex.getCause()).isInstanceOf(ConverterNotFoundException.class);\r\n    }\r\n    conversionService.addConverterFactory(new StringToNumberConverterFactory());\r\n    assertThat(conversionService.canConvert(sourceType, targetType)).isTrue();\r\n    @SuppressWarnings(\"unchecked\")\r\n    Map<Integer, Integer> result = (Map<Integer, Integer>) conversionService.convert(map, sourceType, targetType);\r\n    assertThat(map).isNotEqualTo(result);\r\n    assertThat((int) result.get(1)).isEqualTo(9);\r\n    assertThat((int) result.get(2)).isEqualTo(37);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.MapToMapConverterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.MapToMapConverterTests#scalarMap()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.MapToMapConverterTests#scalarMap()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.MapToMapConverterTests#scalarMapNotGenericTarget()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid scalarMapNotGenericTarget() {\r\n    Map<String, String> map = new HashMap<>();\r\n    map.put(\"1\", \"9\");\r\n    map.put(\"2\", \"37\");\r\n    assertThat(conversionService.canConvert(Map.class, Map.class)).isTrue();\r\n    assertThat((Map<?, ?>) conversionService.convert(map, Map.class)).isSameAs(map);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.MapToMapConverterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.MapToMapConverterTests#scalarMapNotGenericTarget()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.MapToMapConverterTests#scalarMapNotGenericTarget()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.MapToMapConverterTests#scalarMapNotGenericSourceField()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid scalarMapNotGenericSourceField() throws Exception {\r\n    Map<String, String> map = new HashMap<>();\r\n    map.put(\"1\", \"9\");\r\n    map.put(\"2\", \"37\");\r\n    TypeDescriptor sourceType = new TypeDescriptor(getClass().getField(\"notGenericMapSource\"));\r\n    TypeDescriptor targetType = new TypeDescriptor(getClass().getField(\"scalarMapTarget\"));\r\n    assertThat(conversionService.canConvert(sourceType, targetType)).isTrue();\r\n    try {\r\n        conversionService.convert(map, sourceType, targetType);\r\n    } catch (ConversionFailedException ex) {\r\n        assertThat(ex.getCause()).isInstanceOf(ConverterNotFoundException.class);\r\n    }\r\n    conversionService.addConverterFactory(new StringToNumberConverterFactory());\r\n    assertThat(conversionService.canConvert(sourceType, targetType)).isTrue();\r\n    @SuppressWarnings(\"unchecked\")\r\n    Map<Integer, Integer> result = (Map<Integer, Integer>) conversionService.convert(map, sourceType, targetType);\r\n    assertThat(map).isNotEqualTo(result);\r\n    assertThat((int) result.get(1)).isEqualTo(9);\r\n    assertThat((int) result.get(2)).isEqualTo(37);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.MapToMapConverterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.MapToMapConverterTests#scalarMapNotGenericSourceField()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.MapToMapConverterTests#scalarMapNotGenericSourceField()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.MapToMapConverterTests#collectionMap()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid collectionMap() throws Exception {\r\n    Map<String, List<String>> map = new HashMap<>();\r\n    map.put(\"1\", Arrays.asList(\"9\", \"12\"));\r\n    map.put(\"2\", Arrays.asList(\"37\", \"23\"));\r\n    TypeDescriptor sourceType = TypeDescriptor.forObject(map);\r\n    TypeDescriptor targetType = new TypeDescriptor(getClass().getField(\"collectionMapTarget\"));\r\n    assertThat(conversionService.canConvert(sourceType, targetType)).isTrue();\r\n    try {\r\n        conversionService.convert(map, sourceType, targetType);\r\n    } catch (ConversionFailedException ex) {\r\n        assertThat(ex.getCause()).isInstanceOf(ConverterNotFoundException.class);\r\n    }\r\n    conversionService.addConverter(new CollectionToCollectionConverter(conversionService));\r\n    conversionService.addConverterFactory(new StringToNumberConverterFactory());\r\n    assertThat(conversionService.canConvert(sourceType, targetType)).isTrue();\r\n    @SuppressWarnings(\"unchecked\")\r\n    Map<Integer, List<Integer>> result = (Map<Integer, List<Integer>>) conversionService.convert(map, sourceType, targetType);\r\n    assertThat(map).isNotEqualTo(result);\r\n    assertThat(result.get(1)).isEqualTo(Arrays.asList(9, 12));\r\n    assertThat(result.get(2)).isEqualTo(Arrays.asList(37, 23));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.MapToMapConverterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.MapToMapConverterTests#collectionMap()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.MapToMapConverterTests#collectionMap()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.MapToMapConverterTests#collectionMapSourceTarget()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid collectionMapSourceTarget() throws Exception {\r\n    Map<String, List<String>> map = new HashMap<>();\r\n    map.put(\"1\", Arrays.asList(\"9\", \"12\"));\r\n    map.put(\"2\", Arrays.asList(\"37\", \"23\"));\r\n    TypeDescriptor sourceType = new TypeDescriptor(getClass().getField(\"sourceCollectionMapTarget\"));\r\n    TypeDescriptor targetType = new TypeDescriptor(getClass().getField(\"collectionMapTarget\"));\r\n    assertThat(conversionService.canConvert(sourceType, targetType)).isFalse();\r\n    assertThatExceptionOfType(ConverterNotFoundException.class).isThrownBy(() -> conversionService.convert(map, sourceType, targetType));\r\n    conversionService.addConverter(new CollectionToCollectionConverter(conversionService));\r\n    conversionService.addConverterFactory(new StringToNumberConverterFactory());\r\n    assertThat(conversionService.canConvert(sourceType, targetType)).isTrue();\r\n    @SuppressWarnings(\"unchecked\")\r\n    Map<Integer, List<Integer>> result = (Map<Integer, List<Integer>>) conversionService.convert(map, sourceType, targetType);\r\n    assertThat(map).isNotEqualTo(result);\r\n    assertThat(result.get(1)).isEqualTo(Arrays.asList(9, 12));\r\n    assertThat(result.get(2)).isEqualTo(Arrays.asList(37, 23));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.MapToMapConverterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.MapToMapConverterTests#collectionMapSourceTarget()",
    "tailType": "method"
  }
]