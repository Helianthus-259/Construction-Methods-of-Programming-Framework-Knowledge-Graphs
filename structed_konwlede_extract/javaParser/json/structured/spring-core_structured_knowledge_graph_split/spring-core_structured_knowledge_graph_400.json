[
  {
    "head": "org.springframework.util.xml.DomUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.DomUtilsTests#getChildElementsByTagNameWhenTagDoesNotExist()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.DomUtilsTests#getChildElementsByTagNameWhenTagDoesNotExist()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.DomUtilsTests#getChildElementByTagNameWithMatchingTag()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getChildElementByTagNameWithMatchingTag() {\r\n    Element principalElement = DomUtils.getChildElementByTagName(SCHOOL_ELEMENT, \"principal\");\r\n    assertThat(principalElement).isNotNull();\r\n    assertThat(principalElement.getTextContent()).isEqualTo(\"Test Principal\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.DomUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.DomUtilsTests#getChildElementByTagNameWithMatchingTag()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.DomUtilsTests#getChildElementByTagNameWithMatchingTag()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.DomUtilsTests#getChildElementByTagNameWithNonMatchingTag()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getChildElementByTagNameWithNonMatchingTag() {\r\n    assertThat(DomUtils.getChildElementByTagName(SCHOOL_ELEMENT, \"teacher\")).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.DomUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.DomUtilsTests#getChildElementByTagNameWithNonMatchingTag()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.DomUtilsTests#getChildElementByTagNameWithNonMatchingTag()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.DomUtilsTests#getChildElementValueByTagName()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getChildElementValueByTagName() {\r\n    assertThat(DomUtils.getChildElementValueByTagName(SCHOOL_ELEMENT, \"guard\")).isEqualTo(\"Fox Test\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.DomUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.DomUtilsTests#getChildElementValueByTagName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.DomUtilsTests#getChildElementValueByTagName()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.DomUtilsTests#getChildElementValueByTagNameWithNonMatchingTag()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getChildElementValueByTagNameWithNonMatchingTag() {\r\n    assertThat(DomUtils.getChildElementValueByTagName(SCHOOL_ELEMENT, \"math tutor\")).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.DomUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.DomUtilsTests#getChildElementValueByTagNameWithNonMatchingTag()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.DomUtilsTests#getChildElementValueByTagNameWithNonMatchingTag()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.DomUtilsTests#getChildElements()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getChildElements() {\r\n    List<Element> childElements = DomUtils.getChildElements(SCHOOL_ELEMENT);\r\n    assertThat(childElements).map(Element::getNodeName).containsExactly(\"class\", \"class\", \"principal\", \"guard\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.DomUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.DomUtilsTests#getChildElements()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.DomUtilsTests#getChildElements()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.DomUtilsTests#getTextValueWithCharacterDataNode()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getTextValueWithCharacterDataNode() {\r\n    assertThat(DomUtils.getTextValue(SCHOOL_ELEMENT)).isEqualToIgnoringWhitespace(\"TestSchool\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.DomUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.DomUtilsTests#getTextValueWithCharacterDataNode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.DomUtilsTests#getTextValueWithCharacterDataNode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]