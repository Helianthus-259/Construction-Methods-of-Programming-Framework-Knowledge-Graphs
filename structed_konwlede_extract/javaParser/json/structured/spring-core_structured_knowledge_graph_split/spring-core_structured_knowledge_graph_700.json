[
  {
    "head": "org.springframework.cglib.transform.impl",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.transform.impl.AddInitTransformer",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AddInitTransformer",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2004 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.cglib.transform.impl;\n\nimport java.lang.reflect.Method;\n\nimport org.springframework.asm.Type;\nimport org.springframework.cglib.core.CodeEmitter;\nimport org.springframework.cglib.core.Constants;\nimport org.springframework.cglib.core.MethodInfo;\nimport org.springframework.cglib.core.ReflectUtils;\nimport org.springframework.cglib.core.Signature;\nimport org.springframework.cglib.transform.ClassEmitterTransformer;\n\n/**\n * @author Mark Hobson\n */\npublic class AddInitTransformer extends ClassEmitterTransformer {\n    private MethodInfo info;\n\n    public AddInitTransformer(Method method) {\n        info = ReflectUtils.getMethodInfo(method);\n\n        Type[] types = info.getSignature().getArgumentTypes();\n        if (types.length != 1 ||\n        !types[0].equals(Constants.TYPE_OBJECT) ||\n        !info.getSignature().getReturnType().equals(Type.VOID_TYPE)) {\n            throw new IllegalArgumentException(method + \" illegal signature\");\n        }\n    }\n\n    @Override\n    public CodeEmitter begin_method(int access, Signature sig, Type[] exceptions) {\n        final CodeEmitter emitter = super.begin_method(access, sig, exceptions);\n        if (sig.getName().equals(Constants.CONSTRUCTOR_NAME)) {\n            return new CodeEmitter(emitter) {\n                @Override\n                public void visitInsn(int opcode) {\n                    if (opcode == Constants.RETURN) {\n                        load_this();\n                        invoke(info);\n                    }\n                    super.visitInsn(opcode);\n                }\n            };\n        }\n        return emitter;\n    }\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AddInitTransformer",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.transform.impl.AddInitTransformer#info",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AddInitTransformer#info",
    "headType": "field",
    "relation": "haveType",
    "tail": "MethodInfo",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AddInitTransformer#begin_method(int,Signature,Type[])",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic CodeEmitter begin_method(int access, Signature sig, Type[] exceptions) {\r\n    final CodeEmitter emitter = super.begin_method(access, sig, exceptions);\r\n    if (sig.getName().equals(Constants.CONSTRUCTOR_NAME)) {\r\n        return new CodeEmitter(emitter) {\r\n\r\n            @Override\r\n            public void visitInsn(int opcode) {\r\n                if (opcode == Constants.RETURN) {\r\n                    load_this();\r\n                    invoke(info);\r\n                }\r\n                super.visitInsn(opcode);\r\n            }\r\n        };\r\n    }\r\n    return emitter;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AddInitTransformer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.impl.AddInitTransformer#begin_method(int,Signature,Type[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AddInitTransformer#begin_method(int,Signature,Type[])",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AddInitTransformer",
    "headType": "class",
    "relation": "extend",
    "tail": "ClassEmitterTransformer",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.transform.impl",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.transform.impl",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.transform.impl.AddPropertyTransformer",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AddPropertyTransformer",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AddPropertyTransformer",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2003 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.cglib.transform.impl;\n\nimport java.util.Map;\n\nimport org.springframework.asm.Type;\nimport org.springframework.cglib.core.EmitUtils;\nimport org.springframework.cglib.core.TypeUtils;\nimport org.springframework.cglib.transform.ClassEmitterTransformer;\n\n@SuppressWarnings({\"rawtypes\", \"unchecked\"})\npublic class AddPropertyTransformer extends ClassEmitterTransformer {\n    private final String[] names;\n    private final Type[] types;\n\n    public AddPropertyTransformer(Map props) {\n        int size = props.size();\n        names = (String[])props.keySet().toArray(new String[size]);\n        types = new Type[size];\n        for (int i = 0; i < size; i++) {\n            types[i] = (Type)props.get(names[i]);\n        }\n    }\n\n    public AddPropertyTransformer(String[] names, Type[] types) {\n        this.names = names;\n        this.types = types;\n    }\n\n    @Override\n\tpublic void end_class() {\n        if (!TypeUtils.isAbstract(getAccess())) {\n            EmitUtils.add_properties(this, names, types);\n        }\n        super.end_class();\n    }\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AddPropertyTransformer",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.transform.impl.AddPropertyTransformer#names",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AddPropertyTransformer#names",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AddPropertyTransformer",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.transform.impl.AddPropertyTransformer#types",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AddPropertyTransformer#types",
    "headType": "field",
    "relation": "haveType",
    "tail": "Type",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AddPropertyTransformer#end_class()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void end_class() {\r\n    if (!TypeUtils.isAbstract(getAccess())) {\r\n        EmitUtils.add_properties(this, names, types);\r\n    }\r\n    super.end_class();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AddPropertyTransformer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.impl.AddPropertyTransformer#end_class()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AddPropertyTransformer#end_class()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AddPropertyTransformer",
    "headType": "class",
    "relation": "extend",
    "tail": "ClassEmitterTransformer",
    "tailType": "class"
  }
]