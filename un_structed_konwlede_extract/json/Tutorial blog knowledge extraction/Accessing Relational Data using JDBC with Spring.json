{
    "relationships": [
      {
        "head": "Accessing Relational Data with Spring",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "Accessing Relational Data with Spring",
        "tail_type": "title"
      },
      {
        "head": "Accessing Relational Data with Spring",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "Backend Development",
        "tail_type": "theme"
      },
      {
        "head": "Accessing Relational Data with Spring",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "Data Access",
        "tail_type": "theme"
      },
      {
        "head": "Accessing Relational Data with Spring",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "Spring Framework",
        "tail_type": "theme"
      },
      {
        "head": "Accessing Relational Data with Spring",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "Database Management",
        "tail_type": "theme"
      },
      {
        "head": "Accessing Relational Data with Spring",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "This tutorial demonstrates accessing relational data using Spring's JdbcTemplate with an H2 in-memory database. It covers configuring Spring Boot to auto-configure JDBC, executing DDL statements, performing batch inserts, and querying data with parameterized SQL to prevent injection attacks. The application uses JdbcTemplate's execute, batchUpdate, and query methods, leveraging Spring Boot's auto-configuration for data sources and connection pooling with HikariCP.",
        "tail_type": "abstract"
      },
      {
        "head": "Accessing Relational Data with Spring",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "https://spring.io/guides/gs/relational-data-access",
        "tail_type": "url"
      },
      {
        "head": "Accessing Relational Data with Spring",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "Access relational data using Spring's JdbcTemplate",
        "tail_type": "purpose"
      },
      {
        "head": "Accessing Relational Data with Spring",
        "head_type": "tutorialEntity",
        "relation": "haveFuntion",
        "tail": "Batch operations",
        "tail_type": "apiFunction"
      },
      {
        "head": "Accessing Relational Data with Spring",
        "head_type": "tutorialEntity",
        "relation": "haveFuntion",
        "tail": "SQL execution",
        "tail_type": "apiFunction"
      },
      {
        "head": "Accessing Relational Data with Spring",
        "head_type": "tutorialEntity",
        "relation": "haveFuntion",
        "tail": "Connection pooling",
        "tail_type": "apiFunction"
      },
      {
        "head": "Accessing Relational Data with Spring",
        "head_type": "tutorialEntity",
        "relation": "haveFuntion",
        "tail": "Parameterized queries",
        "tail_type": "apiFunction"
      },
      {
        "head": "Accessing Relational Data with Spring",
        "head_type": "tutorialEntity",
        "relation": "haveFuntion",
        "tail": "Data mapping",
        "tail_type": "apiFunction"
      },
      {
        "head": "Accessing Relational Data with Spring",
        "head_type": "tutorialEntity",
        "relation": "haveFuntion",
        "tail": "DDL execution",
        "tail_type": "apiFunction"
      },
      {
        "head": "Accessing Relational Data with Spring",
        "head_type": "tutorialEntity",
        "relation": "haveFuntion",
        "tail": "Auto-configuration",
        "tail_type": "apiFunction"
      },
      {
        "head": "Accessing Relational Data with Spring",
        "head_type": "tutorialEntity",
        "relation": "haveFuntion",
        "tail": "Dependency injection",
        "tail_type": "apiFunction"
      },
      {
        "head": "Accessing Relational Data with Spring",
        "head_type": "tutorialEntity",
        "relation": "correlate_to",
        "tail": "Spring Boot",
        "tail_type": "frameworkModule"
      },
      {
        "head": "Accessing Relational Data with Spring",
        "head_type": "tutorialEntity",
        "relation": "correlate_to",
        "tail": "Spring JDBC",
        "tail_type": "frameworkModule"
      },
      {
        "head": "Accessing Relational Data with Spring",
        "head_type": "tutorialEntity",
        "relation": "correlate_to",
        "tail": "Spring Core",
        "tail_type": "frameworkModule"
      },
      {
        "head": "Access relational data using Spring's JdbcTemplate",
        "head_type": "purpose",
        "relation": "accomplished_by",
        "tail": "RelationalDataAccessApplication.java code",
        "tail_type": "implementationCode"
      },
      {
        "head": "RelationalDataAccessApplication.java code",
        "head_type": "implementationCode",
        "relation": "import",
        "tail": "org.springframework.jdbc.core.JdbcTemplate",
        "tail_type": "class"
      },
      {
        "head": "RelationalDataAccessApplication.java code",
        "head_type": "implementationCode",
        "relation": "import",
        "tail": "org.springframework.boot.CommandLineRunner",
        "tail_type": "class"
      },
      {
        "head": "RelationalDataAccessApplication.java code",
        "head_type": "implementationCode",
        "relation": "import",
        "tail": "org.springframework.boot.SpringApplication",
        "tail_type": "class"
      },
      {
        "head": "RelationalDataAccessApplication.java code",
        "head_type": "implementationCode",
        "relation": "import",
        "tail": "org.springframework.jdbc.core.RowMapper",
        "tail_type": "class"
      },
      {
        "head": "RelationalDataAccessApplication.java code",
        "head_type": "implementationCode",
        "relation": "use",
        "tail": "@SpringBootApplication",
        "tail_type": "annotation"
      },
      {
        "head": "RelationalDataAccessApplication.java code",
        "head_type": "implementationCode",
        "relation": "use",
        "tail": "@Autowired",
        "tail_type": "annotation"
      }
    ]
  }