{
    "relationships": [
      {
        "head": "Building REST Services with Spring",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "Building REST Services with Spring",
        "tail_type": "title"
      },
      {
        "head": "Building REST Services with Spring",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "REST",
        "tail_type": "theme"
      },
      {
        "head": "Building REST Services with Spring",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "HATEOAS",
        "tail_type": "theme"
      },
      {
        "head": "Building REST Services with Spring",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "hypermedia",
        "tail_type": "theme"
      },
      {
        "head": "Building REST Services with Spring",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "Backend Development",
        "tail_type": "theme"
      },
      {
        "head": "Building REST Services with Spring",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "State Management",
        "tail_type": "theme"
      },
      {
        "head": "Building REST Services with Spring",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "Order Processing",
        "tail_type": "theme"
      },
      {
        "head": "Building REST Services with Spring",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "Order State Transitions",
        "tail_type": "theme"
      },
      {
        "head": "Building REST Services with Spring",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "Demonstrate building RESTful services with Spring, including Spring MVC controllers, Spring Data JPA repositories, HATEOAS hypermedia, and exception handling. Covers entity modeling, HTTP method handling, Spring Boot auto-configuration, and integration testing. Requires Spring Web, Spring Data JPA, and H2 dependencies.",
        "tail_type": "abstract"
      },
      {
        "head": "Building REST Services with Spring",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "Extends RESTful service to handle order management with state transitions. Enhances hypermedia support in PUT/DELETE operations, introduces HTTP 201 Created/204 No Content status codes, and demonstrates JPA entity evolution. Includes Order and Status entities with Spring Data repositories.",
        "tail_type": "abstract"
      },
      {
        "head": "Building REST Services with Spring",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "Extends RESTful service with order management including state transitions (IN_PROGRESSâ†’COMPLETED/CANCELLED). Implements hypermedia-driven conditional links for valid actions. Demonstrates RFC-7807 error handling and HAL representations with Spring HATEOAS. Introduces Order/Status entities with JPA repositories.",
        "tail_type": "abstract"
      },
      {
        "head": "Building REST Services with Spring",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "https://spring.io/guides/tutorials/rest",
        "tail_type": "url"
      },
      {
        "head": "Building REST Services with Spring",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "Implement RESTful web services with hypermedia support",
        "tail_type": "purpose"
      },
      {
        "head": "Building REST Services with Spring",
        "head_type": "tutorialEntity",
        "relation": "correlate_to",
        "tail": "Spring Boot",
        "tail_type": "frameworkModule"
      },
      {
        "head": "Building REST Services with Spring",
        "head_type": "tutorialEntity",
        "relation": "correlate_to",
        "tail": "Spring MVC",
        "tail_type": "frameworkModule"
      },
      {
        "head": "Building REST Services with Spring",
        "head_type": "tutorialEntity",
        "relation": "correlate_to",
        "tail": "Spring Data JPA",
        "tail_type": "frameworkModule"
      },
      {
        "head": "Building REST Services with Spring",
        "head_type": "tutorialEntity",
        "relation": "correlate_to",
        "tail": "Spring HATEOAS",
        "tail_type": "frameworkModule"
      },
      {
        "head": "Building REST Services with Spring",
        "head_type": "tutorialEntity",
        "relation": "correlate_to",
        "tail": "Spring Core",
        "tail_type": "frameworkModule"
      },
      {
        "head": "Building REST Services with Spring",
        "head_type": "tutorialEntity",
        "relation": "haveFuntion",
        "tail": "lazy loading",
        "tail_type": "apiFunction"
      },
      {
        "head": "Building REST Services with Spring",
        "head_type": "tutorialEntity",
        "relation": "haveFuntion",
        "tail": "hypermedia-driven APIs",
        "tail_type": "apiFunction"
      },
      {
        "head": "Building REST Services with Spring",
        "head_type": "tutorialEntity",
        "relation": "haveFuntion",
        "tail": "CRUD operations",
        "tail_type": "apiFunction"
      },
      {
        "head": "Building REST Services with Spring",
        "head_type": "tutorialEntity",
        "relation": "haveFuntion",
        "tail": "exception handling",
        "tail_type": "apiFunction"
      },
      {
        "head": "Building REST Services with Spring",
        "head_type": "tutorialEntity",
        "relation": "haveFuntion",
        "tail": "state transitions",
        "tail_type": "apiFunction"
      },
      {
        "head": "Building REST Services with Spring",
        "head_type": "tutorialEntity",
        "relation": "haveFuntion",
        "tail": "HTTP status code handling",
        "tail_type": "apiFunction"
      },
      {
        "head": "Building REST Services with Spring",
        "head_type": "tutorialEntity",
        "relation": "haveFuntion",
        "tail": "conditional hypermedia links",
        "tail_type": "apiFunction"
      },
      {
        "head": "Building REST Services with Spring",
        "head_type": "tutorialEntity",
        "relation": "haveFuntion",
        "tail": "state transition validation",
        "tail_type": "apiFunction"
      },
      {
        "head": "Implement RESTful web services with hypermedia support",
        "head_type": "purpose",
        "relation": "accomplished_by",
        "tail": "package com.healthMgr.common.email;import java.xxxx;import java.xxxx;public class One class {//specific code}",
        "tail_type": "implementationCode"
      },
      {
        "head": "Implement RESTful web services with hypermedia support",
        "head_type": "purpose",
        "relation": "accomplished_by",
        "tail": "package payroll;\n\n@Entity\npublic class Employee {\n    @Id @GeneratedValue private Long id;\n    private String name;\n    private String role;\n    // constructors/getters/setters\n}",
        "tail_type": "implementationCode"
      },
      {
        "head": "Implement RESTful web services with hypermedia support",
        "head_type": "purpose",
        "relation": "accomplished_by",
        "tail": "package payroll;\n\n@Entity\n@Table(name = \"CUSTOMER_ORDER\")\npublic class Order {\n    @Id @GeneratedValue private Long id;\n    private String description;\n    private Status status;\n    // constructors/getters/setters\n}",
        "tail_type": "implementationCode"
      },
      {
        "head": "package com.healthMgr.common.email;import java.xxxx;import java.xxxx;public class One class {//specific code}",
        "head_type": "implementationCode",
        "relation": "import",
        "tail": "org.springframework.core.SimpleAliasRegistryTests",
        "tail_type": "class"
      },
      {
        "head": "package payroll;\n\n@Entity\npublic class Employee {\n    @Id @GeneratedValue private Long id;\n    private String name;\n    private String role;\n    // constructors/getters/setters\n}",
        "head_type": "implementationCode",
        "relation": "import",
        "tail": "javax.persistence.Entity",
        "tail_type": "class"
      },
      {
        "head": "package payroll;\n\n@Entity\n@Table(name = \"CUSTOMER_ORDER\")\npublic class Order {\n    @Id @GeneratedValue private Long id;\n    private String description;\n    private Status status;\n    // constructors/getters/setters\n}",
        "head_type": "implementationCode",
        "relation": "import",
        "tail": "javax.persistence.Table",
        "tail_type": "class"
      },
      {
        "head": "package payroll;\n\npublic enum Status {\n    IN_PROGRESS, COMPLETED, CANCELLED\n}",
        "head_type": "implementationCode",
        "relation": "import",
        "tail": "javax.persistence.EnumType",
        "tail_type": "class"
      },
      {
        "head": "package payroll;\n\npublic enum Status {\n    IN_PROGRESS, COMPLETED, CANCELLED\n}",
        "head_type": "implementationCode",
        "relation": "import",
        "tail": "javax.persistence.Enumerated",
        "tail_type": "class"
      },
      {
        "head": "package payroll;\n\n@RestController\npublic class EmployeeController {\n    @GetMapping(\"/employees/{id}\")\n    public EntityModel<Employee> one(@PathVariable Long id) {\n        // implementation\n    }\n}",
        "head_type": "implementationCode",
        "relation": "use",
        "tail": "@RestController",
        "tail_type": "annotation"
      },
      {
        "head": "package payroll;\n\n@RestController\npublic class EmployeeController {\n    @GetMapping(\"/employees/{id}\")\n    public EntityModel<Employee> one(@PathVariable Long id) {\n        // implementation\n    }\n}",
        "head_type": "implementationCode",
        "relation": "use",
        "tail": "@GetMapping",
        "tail_type": "annotation"
      },
      {
        "head": "package payroll;\n\n@Entity\npublic class Employee {\n    @Id @GeneratedValue private Long id;\n    private String name;\n    private String role;\n    // constructors/getters/setters\n}",
        "head_type": "implementationCode",
        "relation": "use",
        "tail": "@Entity",
        "tail_type": "annotation"
      },
      {
        "head": "package payroll;\n\n@Entity\n@Table(name = \"CUSTOMER_ORDER\")\npublic class Order {\n    @Id @GeneratedValue private Long id;\n    private String description;\n    private Status status;\n    // constructors/getters/setters\n}",
        "head_type": "implementationCode",
        "relation": "use",
        "tail": "@Table",
        "tail_type": "annotation"
      },
      {
        "head": "links/src/main/java/payroll/OrderController.java",
        "head_type": "implementationCode",
        "relation": "use",
        "tail": "@RestController",
        "tail_type": "annotation"
      },
      {
        "head": "package payroll;\n\n@RestController\npublic class OrderController {\n    @PostMapping(\"/orders\")\n    public ResponseEntity<EntityModel<Order>> newOrder(@RequestBody Order order) {\n        // implementation\n    }\n}",
        "head_type": "implementationCode",
        "relation": "use",
        "tail": "@PostMapping",
        "tail_type": "annotation"
      },
      {
        "head": "links/src/main/java/payroll/OrderModelAssembler.java",
        "head_type": "implementationCode",
        "relation": "import",
        "tail": "org.springframework.hateoas.server.RepresentationModelAssembler",
        "tail_type": "class"
      }
    ]
  }