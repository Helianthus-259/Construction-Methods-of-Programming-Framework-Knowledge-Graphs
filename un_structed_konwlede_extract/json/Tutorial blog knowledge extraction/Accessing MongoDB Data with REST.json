{
    "relationships": [
      {
        "head": "Creating a Hypermedia-Driven RESTful Application with Spring Data MongoDB",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "Creating a Hypermedia-Driven RESTful Application with Spring Data MongoDB",
        "tail_type": "title"
      },
      {
        "head": "Creating a Hypermedia-Driven RESTful Application with Spring Data MongoDB",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "Backend Development",
        "tail_type": "theme"
      },
      {
        "head": "Creating a Hypermedia-Driven RESTful Application with Spring Data MongoDB",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "RESTful Services",
        "tail_type": "theme"
      },
      {
        "head": "Creating a Hypermedia-Driven RESTful Application with Spring Data MongoDB",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "Spring Data MongoDB",
        "tail_type": "theme"
      },
      {
        "head": "Creating a Hypermedia-Driven RESTful Application with Spring Data MongoDB",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "NoSQL Databases",
        "tail_type": "theme"
      },
      {
        "head": "Creating a Hypermedia-Driven RESTful Application with Spring Data MongoDB",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "Demonstrate building a Spring application that creates and retrieves Person objects via RESTful endpoints using Spring Data REST and MongoDB. Includes domain object modeling with @Document, repository setup with MongoRepository, automatic CRUD endpoint generation, custom query methods like findByLastName, and hypermedia navigation using HAL format. Requires Spring Boot, Spring Data MongoDB, and MongoDB installation.",
        "tail_type": "abstract"
      },
      {
        "head": "Creating a Hypermedia-Driven RESTful Application with Spring Data MongoDB",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "https://spring.io/guides/gs/accessing-mongodb-data-rest",
        "tail_type": "url"
      },
      {
        "head": "Creating a Hypermedia-Driven RESTful Application with Spring Data MongoDB",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "Create an application that accesses MongoDB data through hypermedia-based REST endpoints",
        "tail_type": "purpose"
      },
      {
        "head": "Create an application that accesses MongoDB data through hypermedia-based REST endpoints",
        "head_type": "purpose",
        "relation": "accomplished_by",
        "tail": "package com.example.accessingmongodbdatarest; import org.springframework.data.annotation.Id; import org.springframework.data.mongodb.core.mapping.Document; @Document public class Person { @Id private String id; private String firstName; private String lastName; // Getters and setters }",
        "tail_type": "implementationCode"
      },
      {
        "head": "Create an application that accesses MongoDB data through hypermedia-based REST endpoints",
        "head_type": "purpose",
        "relation": "accomplished_by",
        "tail": "package com.example.accessingmongodbdatarest; import org.springframework.data.mongodb.repository.MongoRepository; import org.springframework.data.rest.core.annotation.RepositoryRestResource; @RepositoryRestResource(collectionResourceRel = \"people\", path = \"people\") public interface PersonRepository extends MongoRepository<Person, String> { List<Person> findByLastName(@Param(\"name\") String name); }",
        "tail_type": "implementationCode"
      },
      {
        "head": "package com.example.accessingmongodbdatarest; import org.springframework.data.annotation.Id; import org.springframework.data.mongodb.core.mapping.Document; @Document public class Person { @Id private String id; private String firstName; private String lastName; // Getters and setters }",
        "head_type": "implementationCode",
        "relation": "import",
        "tail": "org.springframework.data.annotation.Id",
        "tail_type": "class"
      },
      {
        "head": "package com.example.accessingmongodbdatarest; import org.springframework.data.annotation.Id; import org.springframework.data.mongodb.core.mapping.Document; @Document public class Person { @Id private String id; private String firstName; private String lastName; // Getters and setters }",
        "head_type": "implementationCode",
        "relation": "import",
        "tail": "org.springframework.data.mongodb.core.mapping.Document",
        "tail_type": "class"
      },
      {
        "head": "package com.example.accessingmongodbdatarest; import org.springframework.data.mongodb.repository.MongoRepository; import org.springframework.data.rest.core.annotation.RepositoryRestResource; @RepositoryRestResource(collectionResourceRel = \"people\", path = \"people\") public interface PersonRepository extends MongoRepository<Person, String> { List<Person> findByLastName(@Param(\"name\") String name); }",
        "head_type": "implementationCode",
        "relation": "import",
        "tail": "org.springframework.data.mongodb.repository.MongoRepository",
        "tail_type": "class"
      },
      {
        "head": "package com.example.accessingmongodbdatarest; import org.springframework.data.mongodb.repository.MongoRepository; import org.springframework.data.rest.core.annotation.RepositoryRestResource; @RepositoryRestResource(collectionResourceRel = \"people\", path = \"people\") public interface PersonRepository extends MongoRepository<Person, String> { List<Person> findByLastName(@Param(\"name\") String name); }",
        "head_type": "implementationCode",
        "relation": "import",
        "tail": "org.springframework.data.rest.core.annotation.RepositoryRestResource",
        "tail_type": "class"
      },
      {
        "head": "package com.example.accessingmongodbdatarest; import org.springframework.data.annotation.Id; import org.springframework.data.mongodb.core.mapping.Document; @Document public class Person { @Id private String id; private String firstName; private String lastName; // Getters and setters }",
        "head_type": "implementationCode",
        "relation": "use",
        "tail": "@Document",
        "tail_type": "annotation"
      },
      {
        "head": "package com.example.accessingmongodbdatarest; import org.springframework.data.annotation.Id; import org.springframework.data.mongodb.core.mapping.Document; @Document public class Person { @Id private String id; private String firstName; private String lastName; // Getters and setters }",
        "head_type": "implementationCode",
        "relation": "use",
        "tail": "@Id",
        "tail_type": "annotation"
      },
      {
        "head": "package com.example.accessingmongodbdatarest; import org.springframework.data.mongodb.repository.MongoRepository; import org.springframework.data.rest.core.annotation.RepositoryRestResource; @RepositoryRestResource(collectionResourceRel = \"people\", path = \"people\") public interface PersonRepository extends MongoRepository<Person, String> { List<Person> findByLastName(@Param(\"name\") String name); }",
        "head_type": "implementationCode",
        "relation": "use",
        "tail": "@RepositoryRestResource",
        "tail_type": "annotation"
      },
      {
        "head": "Creating a Hypermedia-Driven RESTful Application with Spring Data MongoDB",
        "head_type": "tutorialEntity",
        "relation": "correlate_to",
        "tail": "Spring Data REST",
        "tail_type": "frameworkModule"
      },
      {
        "head": "Creating a Hypermedia-Driven RESTful Application with Spring Data MongoDB",
        "head_type": "tutorialEntity",
        "relation": "correlate_to",
        "tail": "Spring Data MongoDB",
        "tail_type": "frameworkModule"
      },
      {
        "head": "Creating a Hypermedia-Driven RESTful Application with Spring Data MongoDB",
        "head_type": "tutorialEntity",
        "relation": "correlate_to",
        "tail": "Spring Boot",
        "tail_type": "frameworkModule"
      },
      {
        "head": "Creating a Hypermedia-Driven RESTful Application with Spring Data MongoDB",
        "head_type": "tutorialEntity",
        "relation": "correlate_to",
        "tail": "Spring HATEOAS",
        "tail_type": "frameworkModule"
      },
      {
        "head": "Creating a Hypermedia-Driven RESTful Application with Spring Data MongoDB",
        "head_type": "tutorialEntity",
        "relation": "haveFuntion",
        "tail": "RESTful endpoint generation",
        "tail_type": "apiFunction"
      },
      {
        "head": "Creating a Hypermedia-Driven RESTful Application with Spring Data MongoDB",
        "head_type": "tutorialEntity",
        "relation": "haveFuntion",
        "tail": "CRUD operations",
        "tail_type": "apiFunction"
      },
      {
        "head": "Creating a Hypermedia-Driven RESTful Application with Spring Data MongoDB",
        "head_type": "tutorialEntity",
        "relation": "haveFuntion",
        "tail": "Custom query methods",
        "tail_type": "apiFunction"
      },
      {
        "head": "Creating a Hypermedia-Driven RESTful Application with Spring Data MongoDB",
        "head_type": "tutorialEntity",
        "relation": "haveFuntion",
        "tail": "Hypermedia navigation (HAL format)",
        "tail_type": "apiFunction"
      },
      {
        "head": "Creating a Hypermedia-Driven RESTful Application with Spring Data MongoDB",
        "head_type": "tutorialEntity",
        "relation": "haveFuntion",
        "tail": "MongoDB data modeling",
        "tail_type": "apiFunction"
      }
    ]
  }