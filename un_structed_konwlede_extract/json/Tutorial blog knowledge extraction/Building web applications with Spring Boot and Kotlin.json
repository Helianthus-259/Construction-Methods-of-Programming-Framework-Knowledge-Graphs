{
    "relationships": [
      {
        "head": "Building a Blog Application with Spring Boot and Kotlin",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "Building a Blog Application with Spring Boot and Kotlin",
        "tail_type": "title"
      },
      {
        "head": "Building a Blog Application with Spring Boot and Kotlin",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "https://spring.io/guides/tutorials/spring-boot-kotlin",
        "tail_type": "url"
      },
      {
        "head": "Building a Blog Application with Spring Boot and Kotlin",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "Backend Development",
        "tail_type": "theme"
      },
      {
        "head": "Building a Blog Application with Spring Boot and Kotlin",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "Web Application",
        "tail_type": "theme"
      },
      {
        "head": "Building a Blog Application with Spring Boot and Kotlin",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "Spring Boot",
        "tail_type": "theme"
      },
      {
        "head": "Building a Blog Application with Spring Boot and Kotlin",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "Kotlin",
        "tail_type": "theme"
      },
      {
        "head": "Building a Blog Application with Spring Boot and Kotlin",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "This tutorial demonstrates building a blog application using Spring Boot and Kotlin. It covers project setup via Spring Initializr with Gradle or Maven, configuring Kotlin plugins and dependencies, creating Spring Boot applications and controllers, utilizing Mustache templates, testing with JUnit 5, and writing Kotlin extensions for date formatting and string manipulation. Key aspects include Kotlin null-safety, Spring Framework integrations, and leveraging Kotlin's language features for concise code.",
        "tail_type": "abstract"
      },
      {
        "head": "Building a Blog Application with Spring Boot and Kotlin",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "Build a sample blog application using Spring Boot and Kotlin",
        "tail_type": "purpose"
      },
      {
        "head": "Build a sample blog application using Spring Boot and Kotlin",
        "head_type": "purpose",
        "relation": "accomplished_by",
        "tail": "plugins {\n\tid(\"org.springframework.boot\") version \"3.2.2\"\n\tid(\"io.spring.dependency-management\") version \"1.1.4\"\n\tkotlin(\"jvm\") version \"1.9.22\"\n\tkotlin(\"plugin.spring\") version \"1.9.22\"\n\tkotlin(\"plugin.jpa\") version \"1.9.22\"\n}",
        "tail_type": "implementationCode"
      },
      {
        "head": "Build a sample blog application using Spring Boot and Kotlin",
        "head_type": "purpose",
        "relation": "accomplished_by",
        "tail": "@SpringBootApplication\nclass BlogApplication\n\nfun main(args: Array<String>) {\n\trunApplication<BlogApplication>(*args)\n}",
        "tail_type": "implementationCode"
      },
      {
        "head": "Build a sample blog application using Spring Boot and Kotlin",
        "head_type": "purpose",
        "relation": "accomplished_by",
        "tail": "@Controller\nclass HtmlController {\n\n\t@GetMapping(\"/\")\n\tfun blog(model: Model): String {\n\t\tmodel[\"title\"] = \"Blog\"\n\t\treturn \"blog\"\n\t}\n}",
        "tail_type": "implementationCode"
      },
      {
        "head": "Build a sample blog application using Spring Boot and Kotlin",
        "head_type": "purpose",
        "relation": "accomplished_by",
        "tail": "@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\nclass IntegrationTests(@Autowired val restTemplate: TestRestTemplate) {\n\n\t@Test\n\tfun `Assert blog page title, content and status code`() {\n\t\tval entity = restTemplate.getForEntity<String>(\"/\")\n\t\tassertThat(entity.statusCode).isEqualTo(HttpStatus.OK)\n\t\tassertThat(entity.body).contains(\"<h1>Blog</h1>\")\n\t}\n}",
        "tail_type": "implementationCode"
      },
      {
        "head": "plugins {\n\tid(\"org.springframework.boot\") version \"3.2.2\"\n\tid(\"io.spring.dependency-management\") version \"1.1.4\"\n\tkotlin(\"jvm\") version \"1.9.22\"\n\tkotlin(\"plugin.spring\") version \"1.9.22\"\n\tkotlin(\"plugin.jpa\") version \"1.9.22\"\n}",
        "head_type": "implementationCode",
        "relation": "import",
        "tail": "org.jetbrains.kotlin.gradle.tasks.KotlinCompile",
        "tail_type": "class"
      },
      {
        "head": "@SpringBootApplication\nclass BlogApplication\n\nfun main(args: Array<String>) {\n\trunApplication<BlogApplication>(*args)\n}",
        "head_type": "implementationCode",
        "relation": "import",
        "tail": "org.springframework.boot.autoconfigure.SpringBootApplication",
        "tail_type": "class"
      },
      {
        "head": "@SpringBootApplication\nclass BlogApplication\n\nfun main(args: Array<String>) {\n\trunApplication<BlogApplication>(*args)\n}",
        "head_type": "implementationCode",
        "relation": "import",
        "tail": "org.springframework.boot.runApplication",
        "tail_type": "class"
      },
      {
        "head": "@SpringBootApplication\nclass BlogApplication\n\nfun main(args: Array<String>) {\n\trunApplication<BlogApplication>(*args)\n}",
        "head_type": "implementationCode",
        "relation": "use",
        "tail": "@SpringBootApplication",
        "tail_type": "annotation"
      },
      {
        "head": "@Controller\nclass HtmlController {\n\n\t@GetMapping(\"/\")\n\tfun blog(model: Model): String {\n\t\tmodel[\"title\"] = \"Blog\"\n\t\treturn \"blog\"\n\t}\n}",
        "head_type": "implementationCode",
        "relation": "import",
        "tail": "org.springframework.stereotype.Controller",
        "tail_type": "class"
      },
      {
        "head": "@Controller\nclass HtmlController {\n\n\t@GetMapping(\"/\")\n\tfun blog(model: Model): String {\n\t\tmodel[\"title\"] = \"Blog\"\n\t\treturn \"blog\"\n\t}\n}",
        "head_type": "implementationCode",
        "relation": "import",
        "tail": "org.springframework.ui.Model",
        "tail_type": "class"
      },
      {
        "head": "@Controller\nclass HtmlController {\n\n\t@GetMapping(\"/\")\n\tfun blog(model: Model): String {\n\t\tmodel[\"title\"] = \"Blog\"\n\t\treturn \"blog\"\n\t}\n}",
        "head_type": "implementationCode",
        "relation": "import",
        "tail": "org.springframework.ui.set",
        "tail_type": "class"
      },
      {
        "head": "@Controller\nclass HtmlController {\n\n\t@GetMapping(\"/\")\n\tfun blog(model: Model): String {\n\t\tmodel[\"title\"] = \"Blog\"\n\t\treturn \"blog\"\n\t}\n}",
        "head_type": "implementationCode",
        "relation": "import",
        "tail": "org.springframework.web.bind.annotation.GetMapping",
        "tail_type": "class"
      },
      {
        "head": "@Controller\nclass HtmlController {\n\n\t@GetMapping(\"/\")\n\tfun blog(model: Model): String {\n\t\tmodel[\"title\"] = \"Blog\"\n\t\treturn \"blog\"\n\t}\n}",
        "head_type": "implementationCode",
        "relation": "use",
        "tail": "@Controller",
        "tail_type": "annotation"
      },
      {
        "head": "@Controller\nclass HtmlController {\n\n\t@GetMapping(\"/\")\n\tfun blog(model: Model): String {\n\t\tmodel[\"title\"] = \"Blog\"\n\t\treturn \"blog\"\n\t}\n}",
        "head_type": "implementationCode",
        "relation": "use",
        "tail": "@GetMapping",
        "tail_type": "annotation"
      },
      {
        "head": "@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\nclass IntegrationTests(@Autowired val restTemplate: TestRestTemplate) {\n\n\t@Test\n\tfun `Assert blog page title, content and status code`() {\n\t\tval entity = restTemplate.getForEntity<String>(\"/\")\n\t\tassertThat(entity.statusCode).isEqualTo(HttpStatus.OK)\n\t\tassertThat(entity.body).contains(\"<h1>Blog</h1>\")\n\t}\n}",
        "head_type": "implementationCode",
        "relation": "import",
        "tail": "org.springframework.boot.test.context.SpringBootTest",
        "tail_type": "class"
      },
      {
        "head": "@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\nclass IntegrationTests(@Autowired val restTemplate: TestRestTemplate) {\n\n\t@Test\n\tfun `Assert blog page title, content and status code`() {\n\t\tval entity = restTemplate.getForEntity<String>(\"/\")\n\t\tassertThat(entity.statusCode).isEqualTo(HttpStatus.OK)\n\t\tassertThat(entity.body).contains(\"<h1>Blog</h1>\")\n\t}\n}",
        "head_type": "implementationCode",
        "relation": "import",
        "tail": "org.springframework.beans.factory.annotation.Autowired",
        "tail_type": "class"
      },
      {
        "head": "@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\nclass IntegrationTests(@Autowired val restTemplate: TestRestTemplate) {\n\n\t@Test\n\tfun `Assert blog page title, content and status code`() {\n\t\tval entity = restTemplate.getForEntity<String>(\"/\")\n\t\tassertThat(entity.statusCode).isEqualTo(HttpStatus.OK)\n\t\tassertThat(entity.body).contains(\"<h1>Blog</h1>\")\n\t}\n}",
        "head_type": "implementationCode",
        "relation": "import",
        "tail": "org.springframework.boot.test.web.client.TestRestTemplate",
        "tail_type": "class"
      },
      {
        "head": "@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\nclass IntegrationTests(@Autowired val restTemplate: TestRestTemplate) {\n\n\t@Test\n\tfun `Assert blog page title, content and status code`() {\n\t\tval entity = restTemplate.getForEntity<String>(\"/\")\n\t\tassertThat(entity.statusCode).isEqualTo(HttpStatus.OK)\n\t\tassertThat(entity.body).contains(\"<h1>Blog</h1>\")\n\t}\n}",
        "head_type": "implementationCode",
        "relation": "use",
        "tail": "@SpringBootTest",
        "tail_type": "annotation"
      },
      {
        "head": "@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\nclass IntegrationTests(@Autowired val restTemplate: TestRestTemplate) {\n\n\t@Test\n\tfun `Assert blog page title, content and status code`() {\n\t\tval entity = restTemplate.getForEntity<String>(\"/\")\n\t\tassertThat(entity.statusCode).isEqualTo(HttpStatus.OK)\n\t\tassertThat(entity.body).contains(\"<h1>Blog</h1>\")\n\t}\n}",
        "head_type": "implementationCode",
        "relation": "use",
        "tail": "@Autowired",
        "tail_type": "annotation"
      },
      {
        "head": "@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\nclass IntegrationTests(@Autowired val restTemplate: TestRestTemplate) {\n\n\t@Test\n\tfun `Assert blog page title, content and status code`() {\n\t\tval entity = restTemplate.getForEntity<String>(\"/\")\n\t\tassertThat(entity.statusCode).isEqualTo(HttpStatus.OK)\n\t\tassertThat(entity.body).contains(\"<h1>Blog</h1>\")\n\t}\n}",
        "head_type": "implementationCode",
        "relation": "use",
        "tail": "@Test",
        "tail_type": "annotation"
      },
      {
        "head": "Building a Blog Application with Spring Boot and Kotlin",
        "head_type": "tutorialEntity",
        "relation": "correlate_to",
        "tail": "Spring Boot",
        "tail_type": "frameworkModule"
      },
      {
        "head": "Building a Blog Application with Spring Boot and Kotlin",
        "head_type": "tutorialEntity",
        "relation": "correlate_to",
        "tail": "Spring Web",
        "tail_type": "frameworkModule"
      },
      {
        "head": "Building a Blog Application with Spring Boot and Kotlin",
        "head_type": "tutorialEntity",
        "relation": "correlate_to",
        "tail": "Spring Data JPA",
        "tail_type": "frameworkModule"
      },
      {
        "head": "Building a Blog Application with Spring Boot and Kotlin",
        "head_type": "tutorialEntity",
        "relation": "correlate_to",
        "tail": "H2 Database",
        "tail_type": "frameworkModule"
      },
      {
        "head": "Building a Blog Application with Spring Boot and Kotlin",
        "head_type": "tutorialEntity",
        "relation": "correlate_to",
        "tail": "Mustache",
        "tail_type": "frameworkModule"
      },
      {
        "head": "Building a Blog Application with Spring Boot and Kotlin",
        "head_type": "tutorialEntity",
        "relation": "correlate_to",
        "tail": "Spring Boot DevTools",
        "tail_type": "frameworkModule"
      },
      {
        "head": "Building a Blog Application with Spring Boot and Kotlin",
        "head_type": "tutorialEntity",
        "relation": "correlate_to",
        "tail": "JUnit 5",
        "tail_type": "frameworkModule"
      },
      {
        "head": "Building a Blog Application with Spring Boot and Kotlin",
        "head_type": "tutorialEntity",
        "relation": "haveFuntion",
        "tail": "Dependency Injection",
        "tail_type": "apiFunction"
      },
      {
        "head": "Building a Blog Application with Spring Boot and Kotlin",
        "head_type": "tutorialEntity",
        "relation": "haveFuntion",
        "tail": "REST API Development",
        "tail_type": "apiFunction"
      },
      {
        "head": "Building a Blog Application with Spring Boot and Kotlin",
        "head_type": "tutorialEntity",
        "relation": "haveFuntion",
        "tail": "JUnit Testing",
        "tail_type": "apiFunction"
      },
      {
        "head": "Building a Blog Application with Spring Boot and Kotlin",
        "head_type": "tutorialEntity",
        "relation": "haveFuntion",
        "tail": "Mustache Templating",
        "tail_type": "apiFunction"
      },
      {
        "head": "Building a Blog Application with Spring Boot and Kotlin",
        "head_type": "tutorialEntity",
        "relation": "haveFuntion",
        "tail": "Null-Safety Handling",
        "tail_type": "apiFunction"
      },
      {
        "head": "Building a Blog Application with Spring Boot and Kotlin",
        "head_type": "tutorialEntity",
        "relation": "haveFuntion",
        "tail": "Data Serialization",
        "tail_type": "apiFunction"
      },
      {
        "head": "Building a Blog Application with Spring Boot and Kotlin",
        "head_type": "tutorialEntity",
        "relation": "haveFuntion",
        "tail": "JPA Integration",
        "tail_type": "apiFunction"
      },
      {
        "head": "Building a Blog Application with Spring Boot and Kotlin",
        "head_type": "tutorialEntity",
        "relation": "haveFuntion",
        "tail": "Spring MVC Configuration",
        "tail_type": "apiFunction"
      },
      {
        "head": "Building a Blog Application with Spring Boot and Kotlin",
        "head_type": "tutorialEntity",
        "relation": "haveFuntion",
        "tail": "Gradle Build Configuration",
        "tail_type": "apiFunction"
      },
      {
        "head": "Building a Blog Application with Spring Boot and Kotlin",
        "head_type": "tutorialEntity",
        "relation": "haveFuntion",
        "tail": "Maven Build Configuration",
        "tail_type": "apiFunction"
      },
      {
        "head": "Building a Blog Application with Spring Boot and Kotlin",
        "head_type": "tutorialEntity",
        "relation": "haveFuntion",
        "tail": "Kotlin Extensions",
        "tail_type": "apiFunction"
      },
      {
        "head": "Building a Blog Application with Spring Boot and Kotlin",
        "head_type": "tutorialEntity",
        "relation": "haveFuntion",
        "tail": "Test Automation",
        "tail_type": "apiFunction"
      },
      {
        "head": "Building a Blog Application with Spring Boot and Kotlin",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "Data Persistence",
        "tail_type": "theme"
      },
      {
        "head": "Building a Blog Application with Spring Boot and Kotlin",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "JPA Integration",
        "tail_type": "theme"
      },
      {
        "head": "Build a sample blog application using Spring Boot and Kotlin",
        "head_type": "purpose",
        "relation": "accomplished_by",
        "tail": "@Entity\nclass Article(\n\tvar title: String,\n\tvar headline: String,\n\tvar content: String,\n\t@ManyToOne var author: User,\n\tvar slug: String = title.toSlug(),\n\tvar addedAt: LocalDateTime = LocalDateTime.now(),\n\t@Id @GeneratedValue var id: Long? = null)",
        "tail_type": "implementationCode"
      },
      {
        "head": "Build a sample blog application using Spring Boot and Kotlin",
        "head_type": "purpose",
        "relation": "accomplished_by",
        "tail": "@Entity\nclass User(\n\tvar login: String,\n\tvar firstname: String,\n\tvar lastname: String,\n\tvar description: String? = null,\n\t@Id @GeneratedValue var id: Long? = null)",
        "tail_type": "implementationCode"
      },
      {
        "head": "Build a sample blog application using Spring Boot and Kotlin",
        "head_type": "purpose",
        "relation": "accomplished_by",
        "tail": "interface ArticleRepository : CrudRepository<Article, Long> {\n\tfun findBySlug(slug: String): Article?\n\tfun findAllByOrderByAddedAtDesc(): Iterable<Article>\n}",
        "tail_type": "implementationCode"
      },
      {
        "head": "Build a sample blog application using Spring Boot and Kotlin",
        "head_type": "purpose",
        "relation": "accomplished_by",
        "tail": "@DataJpaTest\nclass RepositoriesTests @Autowired constructor(\n\tval entityManager: TestEntityManager,\n\tval userRepository: UserRepository,\n\tval articleRepository: ArticleRepository) {\n\n\t@Test\n\tfun `When findByIdOrNull then return Article`() {\n\t\tval johnDoe = User(\"johnDoe\", \"John\", \"Doe\")\n\t\tentityManager.persist(johnDoe)\n\t\tval article = Article(\"Lorem\", \"Lorem\", \"dolor sit amet\", johnDoe)\n\t\tentityManager.persist(article)\n\t\tentityManager.flush()\n\t\tval found = articleRepository.findByIdOrNull(article.id!!)\n\t\tassertThat(found).isEqualTo(article)\n\t}\n}",
        "tail_type": "implementationCode"
      },
      {
        "head": "@Entity\nclass Article(...)",
        "head_type": "implementationCode",
        "relation": "import",
        "tail": "jakarta.persistence.Entity",
        "tail_type": "class"
      },
      {
        "head": "@Entity\nclass Article(...)",
        "head_type": "implementationCode",
        "relation": "use",
        "tail": "@Entity",
        "tail_type": "annotation"
      },
      {
        "head": "@Entity\nclass Article(...)",
        "head_type": "implementationCode",
        "relation": "use",
        "tail": "@ManyToOne",
        "tail_type": "annotation"
      },
      {
        "head": "@Entity\nclass Article(...)",
        "head_type": "implementationCode",
        "relation": "use",
        "tail": "@Id",
        "tail_type": "annotation"
      },
      {
        "head": "@Entity\nclass Article(...)",
        "head_type": "implementationCode",
        "relation": "use",
        "tail": "@GeneratedValue",
        "tail_type": "annotation"
      },
      {
        "head": "plugins {\n\tkotlin(\"plugin.allopen\") version \"1.9.22\"\n}\n\nallOpen {\n\tannotation(\"jakarta.persistence.Entity\")\n\tannotation(\"jakarta.persistence.Embeddable\")\n\tannotation(\"jakarta.persistence.MappedSuperclass\")\n}",
        "head_type": "implementationCode",
        "relation": "import",
        "tail": "org.jetbrains.kotlin.plugin.allopen",
        "tail_type": "class"
      },
      {
        "head": "Building a Blog Application with Spring Boot and Kotlin",
        "head_type": "tutorialEntity",
        "relation": "haveFuntion",
        "tail": "Lazy Fetching Configuration",
        "tail_type": "apiFunction"
      },
      {
        "head": "Building a Blog Application with Spring Boot and Kotlin",
        "head_type": "tutorialEntity",
        "relation": "haveFuntion",
        "tail": "JPA Repository Implementation",
        "tail_type": "apiFunction"
      },
      {
        "head": "Building a Blog Application with Spring Boot and Kotlin",
        "head_type": "tutorialEntity",
        "relation": "haveFuntion",
        "tail": "Entity-DTO Mapping",
        "tail_type": "apiFunction"
      },
      {
        "head": "Building a Blog Application with Spring Boot and Kotlin",
        "head_type": "tutorialEntity",
        "relation": "haveFuntion",
        "tail": "Mustache Template Rendering",
        "tail_type": "apiFunction"
      },
      {
        "head": "interface ArticleRepository : CrudRepository<Article, Long>",
        "head_type": "implementationCode",
        "relation": "import",
        "tail": "org.springframework.data.repository.CrudRepository",
        "tail_type": "class"
      },
      {
        "head": "@DataJpaTest\nclass RepositoriesTests...",
        "head_type": "implementationCode",
        "relation": "use",
        "tail": "@DataJpaTest",
        "tail_type": "annotation"
      },
      {
        "head": "@DataJpaTest\nclass RepositoriesTests...",
        "head_type": "implementationCode",
        "relation": "use",
        "tail": "@Autowired",
        "tail_type": "annotation"
      },
      {
        "head": "@DataJpaTest\nclass RepositoriesTests...",
        "head_type": "implementationCode",
        "relation": "use",
        "tail": "@Test",
        "tail_type": "annotation"
      },
      {
        "head": "Building a Blog Application with Spring Boot and Kotlin",
        "head_type": "tutorialEntity",
        "relation": "correlate_to",
        "tail": "Spring Data JPA",
        "tail_type": "frameworkModule"
      },
      {
        "head": "Building a Blog Application with Spring Boot and Kotlin",
        "head_type": "tutorialEntity",
        "relation": "correlate_to",
        "tail": "Hibernate",
        "tail_type": "frameworkModule"
      },
      {
        "head": "HtmlController.kt update",
        "head_type": "implementationCode",
        "relation": "use",
        "tail": "@PathVariable",
        "tail_type": "annotation"
      },
      {
        "head": "HtmlController.kt update",
        "head_type": "implementationCode",
        "relation": "import",
        "tail": "org.springframework.web.bind.annotation.PathVariable",
        "tail_type": "class"
      },
      {
        "head": "Building a Blog Application with Spring Boot and Kotlin",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "API Development",
        "tail_type": "theme"
      },
      {
        "head": "Building a Blog Application with Spring Boot and Kotlin",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "Configuration Management",
        "tail_type": "theme"
      },
      {
        "head": "Build a sample blog application using Spring Boot and Kotlin",
        "head_type": "purpose",
        "relation": "accomplished_by",
        "tail": "@Configuration\nclass BlogConfiguration {\n\t@Bean\n\tfun databaseInitializer(...) = ApplicationRunner { ... }\n}",
        "tail_type": "implementationCode"
      },
      {
        "head": "Build a sample blog application using Spring Boot and Kotlin",
        "head_type": "purpose",
        "relation": "accomplished_by",
        "tail": "@WebMvcTest\nclass HttpControllersTests...",
        "tail_type": "implementationCode"
      },
      {
        "head": "Build a sample blog application using Spring Boot and Kotlin",
        "head_type": "purpose",
        "relation": "accomplished_by",
        "tail": "@RestController\nclass ArticleController...",
        "tail_type": "implementationCode"
      },
      {
        "head": "BlogConfiguration.kt code",
        "head_type": "implementationCode",
        "relation": "use",
        "tail": "@Configuration",
        "tail_type": "annotation"
      },
      {
        "head": "BlogConfiguration.kt code",
        "head_type": "implementationCode",
        "relation": "use",
        "tail": "@Bean",
        "tail_type": "annotation"
      },
      {
        "head": "BlogConfiguration.kt code",
        "head_type": "implementationCode",
        "relation": "import",
        "tail": "org.springframework.context.annotation.Bean",
        "tail_type": "class"
      },
      {
        "head": "HttpControllers.kt code",
        "head_type": "implementationCode",
        "relation": "use",
        "tail": "@RestController",
        "tail_type": "annotation"
      },
      {
        "head": "HttpControllers.kt code",
        "head_type": "implementationCode",
        "relation": "use",
        "tail": "@RequestMapping",
        "tail_type": "annotation"
      },
      {
        "head": "HttpControllers.kt code",
        "head_type": "implementationCode",
        "relation": "use",
        "tail": "@GetMapping",
        "tail_type": "annotation"
      },
      {
        "head": "HttpControllers.kt code",
        "head_type": "implementationCode",
        "relation": "use",
        "tail": "@PathVariable",
        "tail_type": "annotation"
      },
      {
        "head": "HttpControllersTests.kt code",
        "head_type": "implementationCode",
        "relation": "use",
        "tail": "@WebMvcTest",
        "tail_type": "annotation"
      },
      {
        "head": "HttpControllersTests.kt code",
        "head_type": "implementationCode",
        "relation": "use",
        "tail": "@MockkBean",
        "tail_type": "annotation"
      },
      {
        "head": "BlogProperties.kt code",
        "head_type": "implementationCode",
        "relation": "use",
        "tail": "@ConfigurationProperties",
        "tail_type": "annotation"
      },
      {
        "head": "BlogApplication.kt update",
        "head_type": "implementationCode",
        "relation": "use",
        "tail": "@EnableConfigurationProperties",
        "tail_type": "annotation"
      },
      {
        "head": "Building a Blog Application with Spring Boot and Kotlin",
        "head_type": "tutorialEntity",
        "relation": "correlate_to",
        "tail": "Spring Web MVC",
        "tail_type": "frameworkModule"
      },
      {
        "head": "Building a Blog Application with Spring Boot and Kotlin",
        "head_type": "tutorialEntity",
        "relation": "correlate_to",
        "tail": "SpringMockK",
        "tail_type": "frameworkModule"
      },
      {
        "head": "Building a Blog Application with Spring Boot and Kotlin",
        "head_type": "tutorialEntity",
        "relation": "haveFuntion",
        "tail": "REST API Exposure",
        "tail_type": "apiFunction"
      },
      {
        "head": "Building a Blog Application with Spring Boot and Kotlin",
        "head_type": "tutorialEntity",
        "relation": "haveFuntion",
        "tail": "Mock Testing",
        "tail_type": "apiFunction"
      },
      {
        "head": "Building a Blog Application with Spring Boot and Kotlin",
        "head_type": "tutorialEntity",
        "relation": "haveFuntion",
        "tail": "Configuration Properties Binding",
        "tail_type": "apiFunction"
      },
      {
        "head": "HttpControllers.kt code",
        "head_type": "implementationCode",
        "relation": "import",
        "tail": "org.springframework.web.bind.annotation.RestController",
        "tail_type": "class"
      },
      {
        "head": "application.properties update",
        "head_type": "implementationCode",
        "relation": "import",
        "tail": "blog.title=Blog",
        "tail_type": "class"
      },
      {
        "head": "HtmlController.kt update",
        "head_type": "implementationCode",
        "relation": "import",
        "tail": "com.example.blog.BlogProperties",
        "tail_type": "class"
      }
    ]
  }