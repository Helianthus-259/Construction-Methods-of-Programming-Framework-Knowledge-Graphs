{
    "relationships": [
      {
        "head": "Accessing Neo4j Data with REST",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "Accessing Neo4j Data with REST",
        "tail_type": "title"
      },
      {
        "head": "Accessing Neo4j Data with REST",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "Backend Development",
        "tail_type": "theme"
      },
      {
        "head": "Accessing Neo4j Data with REST",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "RESTful Services",
        "tail_type": "theme"
      },
      {
        "head": "Accessing Neo4j Data with REST",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "Spring Data Integration",
        "tail_type": "theme"
      },
      {
        "head": "Accessing Neo4j Data with REST",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "Neo4j Database Management",
        "tail_type": "theme"
      },
      {
        "head": "Accessing Neo4j Data with REST",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "This tutorial demonstrates building a Spring application that creates and retrieves Person objects stored in Neo4j using Spring Data REST. It covers setting up a Neo4j server, configuring Spring Data REST and Neo4j, creating domain objects and repositories, and testing RESTful endpoints with curl. The application uses Spring HATEOAS for hypermedia-driven interfaces and includes CRUD operations and custom queries.",
        "tail_type": "abstract"
      },
      {
        "head": "Accessing Neo4j Data with REST",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "https://spring.io/guides/gs/accessing-neo4j-data-rest",
        "tail_type": "url"
      },
      {
        "head": "Accessing Neo4j Data with REST",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "Create a Spring application to interact with Neo4j via RESTful endpoints",
        "tail_type": "purpose"
      },
      {
        "head": "Create a Spring application to interact with Neo4j via RESTful endpoints",
        "head_type": "purpose",
        "relation": "accomplished_by",
        "tail": "Person.java, PersonRepository.java, Application.java",
        "tail_type": "implementationCode"
      },
      {
        "head": "Person.java, PersonRepository.java, Application.java",
        "head_type": "implementationCode",
        "relation": "import",
        "tail": "org.springframework.data.neo4j.core.schema.Id",
        "tail_type": "class"
      },
      {
        "head": "Person.java, PersonRepository.java, Application.java",
        "head_type": "implementationCode",
        "relation": "import",
        "tail": "org.springframework.data.repository.PagingAndSortingRepository",
        "tail_type": "class"
      },
      {
        "head": "Person.java, PersonRepository.java, Application.java",
        "head_type": "implementationCode",
        "relation": "import",
        "tail": "org.springframework.data.rest.core.annotation.RepositoryRestResource",
        "tail_type": "class"
      },
      {
        "head": "Person.java, PersonRepository.java, Application.java",
        "head_type": "implementationCode",
        "relation": "use",
        "tail": "@Node",
        "tail_type": "annotation"
      },
      {
        "head": "Person.java, PersonRepository.java, Application.java",
        "head_type": "implementationCode",
        "relation": "use",
        "tail": "@Id",
        "tail_type": "annotation"
      },
      {
        "head": "Person.java, PersonRepository.java, Application.java",
        "head_type": "implementationCode",
        "relation": "use",
        "tail": "@GeneratedValue",
        "tail_type": "annotation"
      },
      {
        "head": "Person.java, PersonRepository.java, Application.java",
        "head_type": "implementationCode",
        "relation": "use",
        "tail": "@RepositoryRestResource",
        "tail_type": "annotation"
      },
      {
        "head": "Accessing Neo4j Data with REST",
        "head_type": "tutorialEntity",
        "relation": "correlate_to",
        "tail": "Spring Data REST",
        "tail_type": "frameworkModule"
      },
      {
        "head": "Accessing Neo4j Data with REST",
        "head_type": "tutorialEntity",
        "relation": "correlate_to",
        "tail": "Spring Data Neo4j",
        "tail_type": "frameworkModule"
      },
      {
        "head": "Accessing Neo4j Data with REST",
        "head_type": "tutorialEntity",
        "relation": "correlate_to",
        "tail": "Spring Boot",
        "tail_type": "frameworkModule"
      },
      {
        "head": "Accessing Neo4j Data with REST",
        "head_type": "tutorialEntity",
        "relation": "haveFuntion",
        "tail": "RESTful endpoint creation",
        "tail_type": "apiFunction"
      },
      {
        "head": "Accessing Neo4j Data with REST",
        "head_type": "tutorialEntity",
        "relation": "haveFuntion",
        "tail": "CRUD operations",
        "tail_type": "apiFunction"
      },
      {
        "head": "Accessing Neo4j Data with REST",
        "head_type": "tutorialEntity",
        "relation": "haveFuntion",
        "tail": "custom query execution",
        "tail_type": "apiFunction"
      },
      {
        "head": "Accessing Neo4j Data with REST",
        "head_type": "tutorialEntity",
        "relation": "haveFuntion",
        "tail": "hypermedia navigation",
        "tail_type": "apiFunction"
      },
      {
        "head": "Accessing Neo4j Data with REST",
        "head_type": "tutorialEntity",
        "relation": "haveFuntion",
        "tail": "automatic repository implementation",
        "tail_type": "apiFunction"
      }
    ]
  }