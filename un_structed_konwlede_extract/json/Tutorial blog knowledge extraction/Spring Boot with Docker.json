{
    "relationships": [
      {
        "head": "Building a Docker Image for a Spring Boot Application",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "Building a Docker Image for a Spring Boot Application",
        "tail_type": "title"
      },
      {
        "head": "Building a Docker Image for a Spring Boot Application",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "Containerization",
        "tail_type": "theme"
      },
      {
        "head": "Building a Docker Image for a Spring Boot Application",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "Backend Development",
        "tail_type": "theme"
      },
      {
        "head": "Building a Docker Image for a Spring Boot Application",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "Docker Integration",
        "tail_type": "theme"
      },
      {
        "head": "Building a Docker Image for a Spring Boot Application",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "Demonstrate containerization of a Spring Boot application using Docker. Covers Dockerfile creation with multi-stage builds, optimization through layer caching, security via non-root user execution, Spring Profile activation through environment variables, and debugging in Docker containers. Includes Gradle/Maven build integration and alternatives like Jib for Docker-less image building. Requires Spring Boot dependencies and Docker setup.",
        "tail_type": "abstract"
      },
      {
        "head": "Building a Docker Image for a Spring Boot Application",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "https://spring.io/guides/gs/spring-boot-docker",
        "tail_type": "url"
      },
      {
        "head": "Building a Docker Image for a Spring Boot Application",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "Containerize a Spring Boot application with Docker",
        "tail_type": "purpose"
      },
      {
        "head": "Containerize a Spring Boot application with Docker",
        "head_type": "purpose",
        "relation": "accomplished_by",
        "tail": "FROM openjdk:8-jdk-alpine\nARG JAR_FILE=target/*.jar\nCOPY ${JAR_FILE} app.jar\nENTRYPOINT [\"java\",\"-jar\",\"/app.jar\"]",
        "tail_type": "implementationCode"
      },
      {
        "head": "Containerize a Spring Boot application with Docker",
        "head_type": "purpose",
        "relation": "accomplished_by",
        "tail": "@SpringBootApplication\n@RestController\npublic class Application {\n    @RequestMapping(\"/\")\n    public String home() {\n        return \"Hello Docker World\";\n    }\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n}",
        "tail_type": "implementationCode"
      },
      {
        "head": "FROM openjdk:8-jdk-alpine\nARG JAR_FILE=target/*.jar\nCOPY ${JAR_FILE} app.jar\nENTRYPOINT [\"java\",\"-jar\",\"/app.jar\"]",
        "head_type": "implementationCode",
        "relation": "import",
        "tail": "hello.Application",
        "tail_type": "class"
      },
      {
        "head": "@SpringBootApplication\n@RestController\npublic class Application {\n    @RequestMapping(\"/\")\n    public String home() {\n        return \"Hello Docker World\";\n    }\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n}",
        "head_type": "implementationCode",
        "relation": "import",
        "tail": "org.springframework.boot.SpringApplication",
        "tail_type": "class"
      },
      {
        "head": "@SpringBootApplication\n@RestController\npublic class Application {\n    @RequestMapping(\"/\")\n    public String home() {\n        return \"Hello Docker World\";\n    }\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n}",
        "head_type": "implementationCode",
        "relation": "use",
        "tail": "@SpringBootApplication",
        "tail_type": "annotation"
      },
      {
        "head": "@SpringBootApplication\n@RestController\npublic class Application {\n    @RequestMapping(\"/\")\n    public String home() {\n        return \"Hello Docker World\";\n    }\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n}",
        "head_type": "implementationCode",
        "relation": "use",
        "tail": "@RestController",
        "tail_type": "annotation"
      },
      {
        "head": "@SpringBootApplication\n@RestController\npublic class Application {\n    @RequestMapping(\"/\")\n    public String home() {\n        return \"Hello Docker World\";\n    }\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n}",
        "head_type": "implementationCode",
        "relation": "use",
        "tail": "@RequestMapping",
        "tail_type": "annotation"
      },
      {
        "head": "Building a Docker Image for a Spring Boot Application",
        "head_type": "tutorialEntity",
        "relation": "correlate_to",
        "tail": "Spring Boot",
        "tail_type": "frameworkModule"
      },
      {
        "head": "Building a Docker Image for a Spring Boot Application",
        "head_type": "tutorialEntity",
        "relation": "correlate_to",
        "tail": "Spring MVC",
        "tail_type": "frameworkModule"
      },
      {
        "head": "Building a Docker Image for a Spring Boot Application",
        "head_type": "tutorialEntity",
        "relation": "haveFuntion",
        "tail": "Containerization",
        "tail_type": "apiFunction"
      },
      {
        "head": "Building a Docker Image for a Spring Boot Application",
        "head_type": "tutorialEntity",
        "relation": "haveFuntion",
        "tail": "Image Layering",
        "tail_type": "apiFunction"
      },
      {
        "head": "Building a Docker Image for a Spring Boot Application",
        "head_type": "tutorialEntity",
        "relation": "haveFuntion",
        "tail": "Non-root User Execution",
        "tail_type": "apiFunction"
      },
      {
        "head": "Building a Docker Image for a Spring Boot Application",
        "head_type": "tutorialEntity",
        "relation": "haveFuntion",
        "tail": "Spring Profile Activation",
        "tail_type": "apiFunction"
      },
      {
        "head": "Building a Docker Image for a Spring Boot Application",
        "head_type": "tutorialEntity",
        "relation": "haveFuntion",
        "tail": "Debugging in Docker",
        "tail_type": "apiFunction"
      },
      {
        "head": "Building a Docker Image for a Spring Boot Application",
        "head_type": "tutorialEntity",
        "relation": "haveFuntion",
        "tail": "Build Automation Integration",
        "tail_type": "apiFunction"
      },
      {
        "head": "Building a Docker Image for a Spring Boot Application",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "Security",
        "tail_type": "theme"
      },
      {
        "head": "Building a Docker Image for a Spring Boot Application",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "Performance Optimization",
        "tail_type": "theme"
      },
      {
        "head": "Building a Docker Image for a Spring Boot Application",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "Build Automation",
        "tail_type": "theme"
      }
    ]
  }