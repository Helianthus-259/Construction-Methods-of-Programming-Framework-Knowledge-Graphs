{
    "relationships": [
      {
        "head": "Social Login with Spring Boot and OAuth 2.0",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "Social Login with Spring Boot and OAuth 2.0",
        "tail_type": "title"
      },
      {
        "head": "Social Login with Spring Boot and OAuth 2.0",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "https://spring.io/guides/tutorials/spring-boot-oauth2",
        "tail_type": "url"
      },
      {
        "head": "Social Login with Spring Boot and OAuth 2.0",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "Security",
        "tail_type": "theme"
      },
      {
        "head": "Social Login with Spring Boot and OAuth 2.0",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "JavaScript",
        "tail_type": "theme"
      },
      {
        "head": "Social Login with Spring Boot and OAuth 2.0",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "REST",
        "tail_type": "theme"
      },
      {
        "head": "Social Login with Spring Boot and OAuth 2.0",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "OAuth",
        "tail_type": "theme"
      },
      {
        "head": "Social Login with Spring Boot and OAuth 2.0",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "This guide demonstrates building a sample application implementing social login using OAuth 2.0 with Spring Boot and Spring Security. It covers setting up single-provider single-sign-on and extends to multiple authentication providers like GitHub and Google. The samples are single-page applications using Spring Boot on the backend with jQuery on the frontend, highlighting minimal changes for different frameworks. The tutorial utilizes Spring Boot's native OAuth 2.0 support for seamless integration, including client credentials management, provider configuration, and security best practices to avoid exposing credentials in source control.",
        "tail_type": "abstract"
      },
      {
        "head": "Social Login with Spring Boot and OAuth 2.0",
        "head_type": "tutorialEntity",
        "relation": "have",
        "tail": "Implement social login using OAuth 2.0 and Spring Boot",
        "tail_type": "purpose"
      },
      {
        "head": "Social Login with Spring Boot and OAuth 2.0",
        "head_type": "tutorialEntity",
        "relation": "correlate_to",
        "tail": "Spring Security",
        "tail_type": "frameworkModule"
      },
      {
        "head": "Social Login with Spring Boot and OAuth 2.0",
        "head_type": "tutorialEntity",
        "relation": "correlate_to",
        "tail": "Spring Security OAuth",
        "tail_type": "frameworkModule"
      },
      {
        "head": "Social Login with Spring Boot and OAuth 2.0",
        "head_type": "tutorialEntity",
        "relation": "correlate_to",
        "tail": "Spring Boot",
        "tail_type": "frameworkModule"
      },
      {
        "head": "Social Login with Spring Boot and OAuth 2.0",
        "head_type": "tutorialEntity",
        "relation": "haveFuntion",
        "tail": "social login implementation",
        "tail_type": "apiFunction"
      },
      {
        "head": "Social Login with Spring Boot and OAuth 2.0",
        "head_type": "tutorialEntity",
        "relation": "haveFuntion",
        "tail": "single-sign on setup",
        "tail_type": "apiFunction"
      },
      {
        "head": "Social Login with Spring Boot and OAuth 2.0",
        "head_type": "tutorialEntity",
        "relation": "haveFuntion",
        "tail": "multi-provider authentication",
        "tail_type": "apiFunction"
      },
      {
        "head": "Social Login with Spring Boot and OAuth 2.0",
        "head_type": "tutorialEntity",
        "relation": "haveFuntion",
        "tail": "OAuth 2.0 client configuration",
        "tail_type": "apiFunction"
      },
      {
        "head": "Social Login with Spring Boot and OAuth 2.0",
        "head_type": "tutorialEntity",
        "relation": "haveFuntion",
        "tail": "client credentials management",
        "tail_type": "apiFunction"
      },
      {
        "head": "Social Login with Spring Boot and OAuth 2.0",
        "head_type": "tutorialEntity",
        "relation": "haveFuntion",
        "tail": "external OAuth provider integration",
        "tail_type": "apiFunction"
      }
    ]
  }