{
    "relationships": [
        {
            "head": "org.springframework.asm.Frame#getAbstractTypeFromApiFormat(SymbolTable,Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getAbstractTypeFromApiFormat",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Frame#getAbstractTypeFromApiFormat(SymbolTable,Object)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "type instances",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.Frame#getAbstractTypeFromApiFormat(SymbolTable,Object)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "frame element type conversion",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Frame#getAbstractTypeFromApiFormat(SymbolTable,Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for getAbstractTypeFromApiFormat",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Frame#getAbstractTypeFromApiFormat(SymbolTable,Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "SymbolTable and Object parameters",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Frame#getAbstractTypeFromApiFormat(SymbolTable,Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle of Frame class",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Frame",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Frame#getAbstractTypeFromApiFormat(SymbolTable,Object)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.Frame#getAbstractTypeFromInternalName(SymbolTable,String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "get abstract type from internal name",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Frame#getAbstractTypeFromInternalName(SymbolTable,String)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "internal name must not be an array type descriptor",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.Frame#getAbstractTypeFromInternalName(SymbolTable,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "get abstract type from internal name sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Frame#getAbstractTypeFromInternalName(SymbolTable,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "get abstract type from internal name related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Frame#getAbstractTypeFromInternalName(SymbolTable,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "get abstract type from internal name design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Frame",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Frame#getAbstractTypeFromInternalName(SymbolTable,String)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.Frame",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "get abstract type from internal name",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Frame",
            "head_type": "class",
            "relation": "constrained_by",
            "tail": "internal name must not be an array type descriptor",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.Frame",
            "head_type": "class",
            "relation": "have",
            "tail": "get abstract type from internal name sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Frame",
            "head_type": "class",
            "relation": "have",
            "tail": "get abstract type from internal name related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Frame",
            "head_type": "class",
            "relation": "have",
            "tail": "get abstract type from internal name design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Frame#getAbstractTypeFromDescriptor(SymbolTable,String,int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getAbstractTypeFromDescriptor",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Frame#getAbstractTypeFromDescriptor(SymbolTable,String,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "Returns the abstract type corresponding to the given type descriptor",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Frame#getAbstractTypeFromDescriptor(SymbolTable,String,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "This method is designed to interpret a type descriptor and return an abstract type. It uses a symbol table to look up and store type symbols, facilitating the processing of type descriptors in a structured manner.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Frame#getAbstractTypeFromDescriptor(SymbolTable,String,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "private static int getAbstractTypeFromDescriptor(final SymbolTable symbolTable, final String buffer, final int offset) {\n    String internalName;\n    switch(buffer.charAt(offset)) {\n        case 'V':\n            return 0;\n        case 'Z':\n        case 'C':\n        case 'B':\n        case 'S':\n        case 'I':\n            return INTEGER;\n        case 'F':\n            return FLOAT;\n        case 'J':\n            return LONG;\n        case 'D':\n            return DOUBLE;\n        case 'L':\n            internalName = buffer.substring(offset + 1, buffer.length() - 1);\n            return REFERENCE_KIND | symbolTable.addType(internalName);\n        case '[':\n            int elementDescriptorOffset = offset + 1;\n            while (buffer.charAt(elementDescriptorOffset) == '[') {\n                ++elementDescriptorOffset;\n            }\n            int typeValue;\n            switch(buffer.charAt(elementDescriptorOffset)) {\n                case 'Z':\n                    typeValue = BOOLEAN;\n                    break;\n                case 'C':\n                    typeValue = CHAR;\n                    break;\n                case 'B':\n                    typeValue = BYTE;\n                    break;\n                case 'S':\n                    typeValue = SHORT;\n                    break;\n                case 'I':\n                    typeValue = INTEGER;\n                    break;\n                case 'F':\n                    typeValue = FLOAT;\n                    break;\n                case 'J':\n                    typeValue = LONG;\n                    break;\n                case 'D':\n                    typeValue = DOUBLE;\n                    break;\n                case 'L':\n                    internalName = buffer.substring(elementDescriptorOffset + 1, buffer.length() - 1);\n                    typeValue = REFERENCE_KIND | symbolTable.addType(internalName);\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Invalid descriptor fragment: \" + buffer.substring(elementDescriptorOffset));\n            }\n            return ((elementDescriptorOffset - offset) << DIM_SHIFT) | typeValue;\n        default:\n            throw new IllegalArgumentException(\"Invalid descriptor: \" + buffer.substring(offset));\n    }\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Frame#setInputFrameFromDescriptor(SymbolTable,int,String,int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "initialize the first frame of a method",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Frame#setInputFrameFromDescriptor(SymbolTable,int,String,int)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "the frame is implicit and not stored explicitly in the StackMapTable attribute",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.Frame#setInputFrameFromDescriptor(SymbolTable,int,String,int)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "initializing the first frame of a method",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Frame#setInputFrameFromDescriptor(SymbolTable,int,String,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.asm.Frame#setInputFrameFromDescriptor(SymbolTable symbolTable, int access, String descriptor, int maxLocals) { ... }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Frame#setInputFrameFromDescriptor(SymbolTable,int,String,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "The method sets up the initial frame for a method based on its descriptor, handling local variables and stack initialization.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Frame#setInputFrameFromDescriptor(SymbolTable,int,String,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "The design principle is to ensure that the initial frame of a method is correctly set up based on its descriptor, facilitating accurate stack map table generation.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Frame#setInputFrameFromDescriptor(SymbolTable,int,String,int)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.Frame#setInputFrameFromDescriptor(SymbolTable,int,String,int)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Type",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.Frame#setInputFrameFromApiFormat(SymbolTable,int,Object[],int,Object[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "setInputFrameFromApiFormat",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Frame#setInputFrameFromApiFormat(SymbolTable,int,Object[],int,Object[])",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "symbolTableMustBeValid",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.Frame#setInputFrameFromApiFormat(SymbolTable,int,Object[],int,Object[])",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "frameDescriptionSetup",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Frame#setInputFrameFromApiFormat(SymbolTable,int,Object[],int,Object[])",
            "head_type": "method",
            "relation": "have",
            "tail": "frameDescriptionSetupSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Frame#setInputFrameFromApiFormat(SymbolTable,int,Object[],int,Object[])",
            "head_type": "method",
            "relation": "have",
            "tail": "frameDescriptionSetupRelatedConcepts",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Frame#setInputFrameFromApiFormat(SymbolTable,int,Object[],int,Object[])",
            "head_type": "method",
            "relation": "have",
            "tail": "frameDescriptionSetupDesignPrinciples",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Frame#setInputFrameFromApiFormat(SymbolTable,int,Object[],int,Object[])",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.Frame#setInputFrameFromApiFormat(SymbolTable,int,Object[],int,Object[])",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.MethodVisitor",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.Frame",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getInputStackSize()",
            "tail_type": "apiFunction"
        },
        {
            "head": "getInputStackSize()",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "org.springframework.asm.Frame",
            "tail_type": "class"
        },
        {
            "head": "getInputStackSize()",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "getInputStackSize() returns the length of the inputStack array.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "getInputStackSize()",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "The method is designed to provide the size of the input stack.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Frame",
            "head_type": "class",
            "relation": "have",
            "tail": "org.springframework.asm.Frame is a class in the Spring Framework's ASM library.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Frame",
            "head_type": "class",
            "relation": "have",
            "tail": "org.springframework.asm.Frame is designed to represent a stack frame in the context of Java bytecode manipulation.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Frame",
            "head_type": "class",
            "relation": "have",
            "tail": "package org.springframework.asm; public class Frame { final int[] inputStack; public Frame(int[] inputStack) { this.inputStack = inputStack; } public int getInputStackSize() { return inputStack.length; } }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Frame#getLocal(int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getLocal",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Frame#getLocal(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "getLocalAbstractType",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getLocalAbstractType",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Frame",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.Frame",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getLocal",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Frame",
            "head_type": "class",
            "relation": "have",
            "tail": "getLocalAbstractType",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Frame#getLocal(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "getLocalAbstractType",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getLocalAbstractType",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Frame",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.Frame",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getLocal",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Frame",
            "head_type": "class",
            "relation": "have",
            "tail": "getLocalAbstractType",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Frame#setLocal(int,int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "replace abstract type in output frame",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Frame#setLocal(int,int)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "valid local variable index",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.Frame#setLocal(int,int)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "modifying local variable types",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Frame#setLocal(int,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for setting local variable type",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Frame#setLocal(int,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "explanation of local variable frames",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Frame#setLocal(int,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principles of type safety",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Frame",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Frame#setLocal(int,int)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.Frame#push(int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "push abstract type on the output frame stack",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Frame#push(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "Pushes the given abstract type on the output frame stack.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Frame#push(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "private void push(final int abstractType) {\n    // Create and/or resize the output stack array if necessary.\n    if (outputStack == null) {\n        outputStack = new int[10];\n    }\n    int outputStackLength = outputStack.length;\n    if (outputStackTop >= outputStackLength) {\n        int[] newOutputStack = new int[Math.max(outputStackTop + 1, 2 * outputStackLength)];\n        System.arraycopy(outputStack, 0, newOutputStack, 0, outputStackLength);\n        outputStack = newOutputStack;\n    }\n    // Pushes the abstract type on the output stack.\n    outputStack[outputStackTop++] = abstractType;\n    // Updates the maximum size reached by the output stack, if needed (note that this size is\n    // relative to the input stack size, which is not known yet).\n    short outputStackSize = (short) (outputStackStart + outputStackTop);\n    if (outputStackSize > owner.outputStackMax) {\n        owner.outputStackMax = outputStackSize;\n    }\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Frame#push(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "The method 'push' is designed to add an abstract type to the output frame stack. It ensures that the stack is properly sized and updates the maximum stack size if necessary. This method is a part of the internal workings of the ASM library, which is used for Java bytecode manipulation and analysis.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Frame#push(SymbolTable,String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "push abstract type",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Frame#push(SymbolTable,String)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "descriptor must be valid",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.Frame#push(SymbolTable,String)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "method descriptor return type",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Frame#push(SymbolTable,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "SymbolTable used for type lookup",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Frame#push(SymbolTable,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "efficient type pushing",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Frame#push(SymbolTable,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "private void push(final SymbolTable symbolTable, final String descriptor) {\n    int typeDescriptorOffset = descriptor.charAt(0) == '(' ? Type.getReturnTypeOffset(descriptor) : 0;\n    int abstractType = getAbstractTypeFromDescriptor(symbolTable, descriptor, typeDescriptorOffset);\n    if (abstractType != 0) {\n        push(abstractType);\n        if (abstractType == LONG || abstractType == DOUBLE) {\n            push(TOP);\n        }\n    }\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Frame#pop()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "pop abstract type from stack",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Frame#pop()",
            "head_type": "method",
            "relation": "have",
            "tail": "private int pop() { if (outputStackTop > 0) { return outputStack[--outputStackTop]; } else { return STACK_KIND | -(--outputStackStart); } }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Frame#pop()",
            "head_type": "method",
            "relation": "have",
            "tail": "Pops an abstract type from the output frame stack and returns its value.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Frame#pop()",
            "head_type": "method",
            "relation": "have",
            "tail": "Design principle: Efficiently manage stack operations to handle abstract types.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Frame#pop(int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "pop abstract types from output frame stack",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Frame#pop(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Frame#pop(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Frame#pop(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "complete sample code for using pop(int)",
            "tail_type": "useSampleCode"
        },
        {
            "head": "relatedConceptInterpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "detailed description of related concepts",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "designPrincipleInterpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "have",
            "tail": "detailed description of design principles",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Frame#pop(String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "pop abstract types from output frame stack",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Frame#pop(String)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "descriptor must be a type or method descriptor",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.Frame#pop(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "Related to method and type descriptors in Java bytecode manipulation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Frame#pop(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "Design principle: Efficient manipulation of bytecode stack frames",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Frame#pop(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "private void pop(final String descriptor) {\n    char firstDescriptorChar = descriptor.charAt(0);\n    if (firstDescriptorChar == '(') {\n        pop((Type.getArgumentsAndReturnSizes(descriptor) >> 2) - 1);\n    } else if (firstDescriptorChar == 'J' || firstDescriptorChar == 'D') {\n        pop(2);\n    } else {\n        pop(1);\n    }\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Frame#addInitializedType(int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "addInitializedType",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Frame#addInitializedType(int)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "abstractTypeParameterConstraint",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.Frame#addInitializedType(int)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "constructorInvocationTypeTracking",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Frame#addInitializedType(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "addInitializedTypeSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Frame#addInitializedType(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "constructorInvocationTypeTrackingConcept",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Frame#addInitializedType(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleForTypeInitialization",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "addInitializedTypeSampleCode",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Frame#addInitializedType(int)",
            "tail_type": "method"
        },
        {
            "head": "constructorInvocationTypeTrackingConcept",
            "head_type": "relatedConceptInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Frame#addInitializedType(int)",
            "tail_type": "method"
        },
        {
            "head": "designPrincipleForTypeInitialization",
            "head_type": "designPrincipleInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Frame#addInitializedType(int)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.Frame#getInitializedType(SymbolTable,int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "get initialized abstract type",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Frame#getInitializedType(SymbolTable,int)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "abstractType must be UNINITIALIZED_THIS or an UNINITIALIZED_KIND or FORWARD_UNINITIALIZED_KIND",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.Frame#getInitializedType(SymbolTable,int)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "lookup and store type Symbol",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Frame#getInitializedType(SymbolTable,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "Returns the \"initialized\" abstract type corresponding to the given abstract type.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Frame#getInitializedType(SymbolTable,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "The method ensures that the returned type is correctly initialized based on the constructor invocations in the basic block.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Frame#getInitializedType(SymbolTable,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "private int getInitializedType(final SymbolTable symbolTable, final int abstractType) {\n    if (abstractType == UNINITIALIZED_THIS || (abstractType & (DIM_MASK | KIND_MASK)) == UNINITIALIZED_KIND || (abstractType & (DIM_MASK | KIND_MASK)) == FORWARD_UNINITIALIZED_KIND) {\n        for (int i = 0; i < initializationCount; ++i) {\n            int initializedType = initializations[i];\n            int dim = initializedType & DIM_MASK;\n            int kind = initializedType & KIND_MASK;\n            int value = initializedType & VALUE_MASK;\n            if (kind == LOCAL_KIND) {\n                initializedType = dim + inputLocals[value];\n            } else if (kind == STACK_KIND) {\n                initializedType = dim + inputStack[inputStack.length - value];\n            }\n            if (abstractType == initializedType) {\n                if (abstractType == UNINITIALIZED_THIS) {\n                    return REFERENCE_KIND | symbolTable.addType(symbolTable.getClassName());\n                } else {\n                    return REFERENCE_KIND | symbolTable.addType(symbolTable.getType(abstractType & VALUE_MASK).value);\n                }\n            }\n        }\n    }\n    return abstractType;\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Frame#execute(int,int,Symbol,SymbolTable)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "simulate the action of the given instruction on the output stack frame",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Frame#execute(int,int,Symbol,SymbolTable)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "opcode must be valid",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.Frame#execute(int,int,Symbol,SymbolTable)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "various opcodes manipulating stack and local variables",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Frame#execute(int,int,Symbol,SymbolTable)",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code demonstrating various opcodes",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Frame#execute(int,int,Symbol,SymbolTable)",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation about stack frame simulation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Frame#execute(int,int,Symbol,SymbolTable)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation focusing on simulation accuracy",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Frame",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Frame#execute(int,int,Symbol,SymbolTable)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.Frame#execute(int,int,Symbol,SymbolTable)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "Symbol",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.Frame#execute(int,int,Symbol,SymbolTable)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "SymbolTable",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxStreamXMLReaderTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "parse XML",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StaxStreamXMLReaderTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "handle XML elements",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StaxStreamXMLReaderTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "validate XML structure",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StaxStreamXMLReaderTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "set content handler",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StaxStreamXMLReaderTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "create XMLStreamReader",
            "tail_type": "apiFunction"
        },
        {
            "head": "parse XML",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "XML parsing",
            "tail_type": "useScenario"
        },
        {
            "head": "handle XML elements",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "XML element handling",
            "tail_type": "useScenario"
        },
        {
            "head": "validate XML structure",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "XML structure validation",
            "tail_type": "useScenario"
        },
        {
            "head": "set content handler",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "content handler setup",
            "tail_type": "useScenario"
        },
        {
            "head": "create XMLStreamReader",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "XMLStreamReader creation",
            "tail_type": "useScenario"
        },
        {
            "head": "parse XML",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "handle XML elements",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "validate XML structure",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "set content handler",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "create XMLStreamReader",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.StaxStreamXMLReaderTests",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.StaxStreamXMLReaderTests",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.StaxStreamXMLReaderTests#createStaxXmlReader(InputStream)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "create Stax XML Reader",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StaxStreamXMLReaderTests#createStaxXmlReader(InputStream)",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "complete sample code for using createStaxXmlReader",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Frame#getConcreteOutputType(int,int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "computeConcreteOutputType",
            "tail_type": "apiFunction"
        },
        {
            "head": "computeConcreteOutputType",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "abstractOutputTypeConstraint",
            "tail_type": "useConstraint"
        },
        {
            "head": "computeConcreteOutputType",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "stackSizeResolution",
            "tail_type": "useScenario"
        },
        {
            "head": "computeConcreteOutputType",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "getConcreteOutputTypeSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "computeConcreteOutputType",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "frameMergingExplanation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "computeConcreteOutputType",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "stackMapFrameDesignPrinciple",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Frame",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Frame#getConcreteOutputType(int,int)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.util.xml.StaxStreamXMLReaderTests#partial()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "XML Parsing",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StaxStreamXMLReaderTests#partial()",
            "head_type": "method",
            "relation": "have",
            "tail": "Sample Code for partial() method",
            "tail_type": "useSampleCode"
        },
        {
            "head": "Sample Code for partial() method",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.StaxStreamXMLReaderTests#partial()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.util.xml.StaxStreamXMLReaderTests#partial()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.StaxStreamXMLReader",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxStreamXMLReaderTests#partial()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "ContentHandler",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxStreamXMLReaderTests#partial()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "XMLInputFactory",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxStreamXMLReaderTests#partial()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "XMLStreamReader",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxStreamXMLReaderTests#partial()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "Locator",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxStreamXMLReaderTests#partial()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "Attributes",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxStreamXMLReaderTests#partial()",
            "head_type": "method",
            "relation": "have",
            "tail": "Related Concept Interpretation for partial() method",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "Related Concept Interpretation for partial() method",
            "head_type": "relatedConceptInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.StaxStreamXMLReaderTests#partial()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.util.xml.StaxStreamXMLReaderTests#partial()",
            "head_type": "method",
            "relation": "have",
            "tail": "Design Principle Interpretation for partial() method",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "Design Principle Interpretation for partial() method",
            "head_type": "designPrincipleInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.StaxStreamXMLReaderTests#partial()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.Frame#merge(SymbolTable,Frame,int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "merge frames",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Frame#merge(SymbolTable,Frame,int)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "frame successor in control flow graph",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.Frame#merge(SymbolTable,Frame,int)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "exception handler basic block",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Frame#merge(SymbolTable,Frame,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "merge frames sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Frame#merge(SymbolTable,Frame,int)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Frame",
            "tail_type": "class"
        },
        {
            "head": "merge frames sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "complete merge frames example",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Frame#merge(SymbolTable,int,int[],int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "merge types in an abstract type array",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Frame#merge(SymbolTable,int,int[],int)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "sourceType should be of CONSTANT_KIND, REFERENCE_KIND, UNINITIALIZED_KIND, or FORWARD_UNINITIALIZED_KIND",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.Frame#merge(SymbolTable,int,int[],int)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "merging types in an abstract type array",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Frame#merge(SymbolTable,int,int[],int)",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for merging types",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Frame#merge(SymbolTable,int,int[],int)",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation for merging types",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Frame#merge(SymbolTable,int,int[],int)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation for merging types",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Frame#merge(SymbolTable,int,int[],int)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.Frame#accept(MethodWriter)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "visit input frame",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Frame#accept(MethodWriter)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "methodWriter must not be null",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.Frame#accept(MethodWriter)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "generating StackMapFrame attributes",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Frame#accept(MethodWriter)",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for visiting frame",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Frame#accept(MethodWriter)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.MethodWriter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.Frame#accept(MethodWriter)",
            "head_type": "method",
            "relation": "have",
            "tail": "StackMapFrame attribute generation explanation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Frame#accept(MethodWriter)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principles for frame visiting",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Frame#putAbstractType(SymbolTable,int,ByteVector)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "putAbstractType",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Frame#putAbstractType(SymbolTable,int,ByteVector)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "abstractType must be one of CONSTANT_KIND, REFERENCE_KIND, UNINITIALIZED_KIND, FORWARD_UNINITIALIZED_KIND",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.Frame#putAbstractType(SymbolTable,int,ByteVector)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "StackMapTable attributes",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Frame#putAbstractType(SymbolTable,int,ByteVector)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Frame#putAbstractType(SymbolTable,int,ByteVector)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Frame#putAbstractType(SymbolTable,int,ByteVector)",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "putAbstractType",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Frame",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.Frame",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "putAbstractType",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StaxUtilsTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "isStaxSourceInvalid",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StaxUtilsTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "isStaxSource",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StaxUtilsTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "isStaxSourceJaxp14",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StaxUtilsTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "isStaxResultInvalid",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StaxUtilsTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "isStaxResult",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StaxUtilsTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "isStaxResultJaxp14",
            "tail_type": "apiFunction"
        },
        {
            "head": "isStaxSourceInvalid",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "isStaxSource",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "isStaxSourceJaxp14",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "isStaxResultInvalid",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "isStaxResult",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "isStaxResultJaxp14",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.StaxUtilsTests",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.StaxUtilsTests",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.StaxUtilsTests#isStaxSourceInvalid()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Stax Source Validation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StaxUtilsTests#isStaxSourceInvalid()",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.util.xml.StaxUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxUtilsTests#isStaxSourceInvalid()",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.util.xml.DOMSource",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxUtilsTests#isStaxSourceInvalid()",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.util.xml.SAXSource",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxUtilsTests#isStaxSourceInvalid()",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.util.xml.StreamSource",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxUtilsTests#isStaxSourceInvalid()",
            "head_type": "method",
            "relation": "have",
            "tail": "Stax Source Validation Sample Code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "Stax Source Validation Sample Code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "package org.springframework.util.xml;\n\nimport org.junit.jupiter.api.Test;\nimport static org.assertThat.assertThat;\n\npublic class StaxUtilsTests {\n\n    @Test\n    void isStaxSourceInvalid() {\n        assertThat(StaxUtils.isStaxSource(new DOMSource())).as(\"A StAX Source\").isFalse();\n        assertThat(StaxUtils.isStaxSource(new SAXSource())).as(\"A StAX Source\").isFalse();\n        assertThat(StaxUtils.isStaxSource(new StreamSource())).as(\"A StAX Source\").isFalse();\n    }\n}",
            "tail_type": "code"
        },
        {
            "head": "org.springframework.util.xml.StaxUtilsTests#isStaxSource()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "StAX Source Identification",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StaxUtilsTests#isStaxSource()",
            "head_type": "method",
            "relation": "have",
            "tail": "StAX Source Identification Sample Code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "StAX Source Identification Sample Code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "Complete Example for StAX Source Identification",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.StaxUtilsTests#isStaxSource()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.StaxUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxUtilsTests#isStaxSource()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.StaxUtilsTests",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxUtilsTests#isStaxSource()",
            "head_type": "method",
            "relation": "have",
            "tail": "StAX Source Identification Related Concepts",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.StaxUtilsTests#isStaxSource()",
            "head_type": "method",
            "relation": "have",
            "tail": "StAX Source Identification Design Principles",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.StaxUtilsTests#isStaxSourceJaxp14()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "StAX Source checking",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StaxUtilsTests#isStaxSourceJaxp14()",
            "head_type": "method",
            "relation": "have",
            "tail": "StAX Source checking sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "StAX Source checking sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "Complete example of StAX Source checking",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.StaxUtilsTests#isStaxSourceJaxp14()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.StaxUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxUtilsTests#isStaxSourceJaxp14()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.StaxUtilsTests",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxUtilsTests#isStaxSourceJaxp14()",
            "head_type": "method",
            "relation": "have",
            "tail": "StAX Source checking related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "StAX Source checking related concept interpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "Explanation of StAX Source and its usage in XML parsing",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.StaxUtilsTests#isStaxSourceJaxp14()",
            "head_type": "method",
            "relation": "have",
            "tail": "StAX Source checking design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "StAX Source checking design principle interpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "have",
            "tail": "Design principles behind StAX Source checking functionality",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.StaxUtilsTests#isStaxResultInvalid()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "StAX Result validation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StaxUtilsTests#isStaxResultInvalid()",
            "head_type": "method",
            "relation": "have",
            "tail": "Sample code demonstrating StAX Result validation",
            "tail_type": "useSampleCode"
        },
        {
            "head": "StAX Result validation",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "org.springframework.util.xml.StaxUtilsTests#isStaxResultInvalid()",
            "tail_type": "method"
        },
        {
            "head": "Sample code demonstrating StAX Result validation",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.util.xml.StaxUtilsTests#isStaxResultInvalid()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.util.xml.StaxUtilsTests#isStaxResultInvalid()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.StaxUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "StAX Result validation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StaxUtilsTests#isStaxResult()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "StAX Result Checking",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StaxUtilsTests#isStaxResult()",
            "head_type": "method",
            "relation": "have",
            "tail": "StAX Result Checking Sample Code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "StAX Result Checking Sample Code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "Complete StAX Result Checking Example",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.StaxUtilsTests#isStaxResultJaxp14()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "StAX Result checking",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StaxUtilsTests#isStaxResultJaxp14()",
            "head_type": "method",
            "relation": "have",
            "tail": "StAX Result checking sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "StAX Result checking sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "Complete example of StAX Result checking",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.StaxUtilsTests#isStaxResultJaxp14()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.StaxUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxUtilsTests#isStaxResultJaxp14()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.StAXResult",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxUtilsTests#isStaxResultJaxp14()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "javax.xml.stream.XMLOutputFactory",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxUtilsTests#isStaxResultJaxp14()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "javax.xml.stream.XMLStreamWriter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxUtilsTests#isStaxResultJaxp14()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "java.io.StringWriter",
            "tail_type": "class"
        },
        {
            "head": "StAX Result checking",
            "head_type": "apiFunction",
            "relation": "relatedConceptInterpretation",
            "tail": "StAX Result is used to check if a given XML result is a StAX-based result.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "StAX Result checking",
            "head_type": "apiFunction",
            "relation": "designPrincipleInterpretation",
            "tail": "The design principle behind StAX Result checking is to provide a utility method that can determine if an XML result is based on the StAX API, which is useful for integrating with different XML processing libraries.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Handle",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "reference to a field or a method",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Handle",
            "head_type": "class",
            "relation": "have",
            "tail": "A reference to a field or a method.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Handle",
            "head_type": "class",
            "relation": "have",
            "tail": "author Remi Forax, author Eric Bruneton",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Handle",
            "head_type": "class",
            "relation": "have",
            "tail": "The kind of field or method designated by this Handle.",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Handle#getTag()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getKindOfFieldOrMethod",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Handle#getTag()",
            "head_type": "method",
            "relation": "have",
            "tail": "getKindOfFieldOrMethodSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Handle",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Opcodes",
            "tail_type": "class"
        },
        {
            "head": "getKindOfFieldOrMethodSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.asm.Handle",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.Handle",
            "head_type": "class",
            "relation": "have",
            "tail": "getKindOfFieldOrMethodDesignPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Handle",
            "head_type": "class",
            "relation": "have",
            "tail": "getKindOfFieldOrMethodRelatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Handle#getOwner()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "get internal name of owner class",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Handle#getOwner()",
            "head_type": "method",
            "relation": "have",
            "tail": "getOwner() method returns the internal name of the class that owns the field or method designated by this handle.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Handle#getOwner()",
            "head_type": "method",
            "relation": "have",
            "tail": "The method is used to obtain the internal name of the owner class of a field or method.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Handle#getOwner()",
            "head_type": "method",
            "relation": "have",
            "tail": "public String getOwner() {\n    return owner;\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Handle",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Type",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.Handle#getName()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getFieldOrMethodName",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Handle#getName()",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.asm.Handle#getName() Sample Code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Handle#getName()",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.asm.Handle#getName() Related Concept Interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Handle#getName()",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.asm.Handle#getName() Design Principle Interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Handle#getName() Sample Code",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Handle",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.Handle#getDesc()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "get the descriptor of the field or method",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Handle#getDesc()",
            "head_type": "method",
            "relation": "have",
            "tail": "Returns the descriptor of the field or method designated by this handle.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Handle",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Handle#getDesc()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.Handle#isInterface()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "check if owner is an interface",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Handle#isInterface()",
            "head_type": "method",
            "relation": "have",
            "tail": "Returns true if the owner of the field or method designated by this handle is an interface.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Handle#isInterface()",
            "head_type": "method",
            "relation": "have",
            "tail": "The method is used to determine if the owner of the field or method designated by the handle is an interface. It returns a boolean value indicating whether the owner is an interface or not.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Handle#isInterface()",
            "head_type": "method",
            "relation": "have",
            "tail": "public boolean isInterface() {\n    return isInterface;\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Handle#equals(Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "equality check",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Handle#equals(Object)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "object must be of type Handle",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.Handle#equals(Object)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "comparing two Handle instances",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Handle#equals(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.asm.Handle#equals(Object) sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Handle#equals(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation for org.springframework.asm.Handle#equals(Object)",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Handle#equals(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation for org.springframework.asm.Handle#equals(Object)",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Handle",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Handle#equals(Object)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.Handle#hashCode()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "hashCode",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Handle#hashCode()",
            "head_type": "method",
            "relation": "have",
            "tail": "Calculate hash code for Handle object",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Handle#hashCode()",
            "head_type": "method",
            "relation": "have",
            "tail": "Override annotation indicates method overrides a super method",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Handle#hashCode()",
            "head_type": "method",
            "relation": "have",
            "tail": "public int hashCode() { return tag + (isInterface ? 64 : 0) + owner.hashCode() * name.hashCode() * descriptor.hashCode(); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Handle#toString()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "textual representation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Handle#toString()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "reference to a class or interface",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.Handle#toString()",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "generating string for method handle",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Handle#toString()",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for generating string representation of method handle",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Handle#toString()",
            "head_type": "method",
            "relation": "have",
            "tail": "interpretation of method handle",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Handle#toString()",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle of method handle string representation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Handle#toString()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Handle",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.TransformerUtilsTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "TransformerUtils.enableIndenting",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.TransformerUtilsTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "TransformerUtils.disableIndenting",
            "tail_type": "apiFunction"
        },
        {
            "head": "TransformerUtils.enableIndenting",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "Transformer cannot be null",
            "tail_type": "useConstraint"
        },
        {
            "head": "TransformerUtils.disableIndenting",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "Transformer cannot be null",
            "tail_type": "useConstraint"
        },
        {
            "head": "TransformerUtils.enableIndenting",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "Indent amount cannot be negative",
            "tail_type": "useConstraint"
        },
        {
            "head": "TransformerUtils.enableIndenting",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "Setting custom indent amount",
            "tail_type": "useScenario"
        },
        {
            "head": "TransformerUtils.enableIndenting",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Enabling indenting with default indent amount",
            "tail_type": "useSampleCode"
        },
        {
            "head": "TransformerUtils.enableIndenting",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Enabling indenting with custom indent amount",
            "tail_type": "useSampleCode"
        },
        {
            "head": "TransformerUtils.disableIndenting",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Disabling indenting",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.TransformerUtilsTests",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "TransformerUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.TransformerUtilsTests",
            "head_type": "class",
            "relation": "have",
            "tail": "Testing TransformerUtils for indenting functionalities",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.TransformerUtilsTests",
            "head_type": "class",
            "relation": "have",
            "tail": "Design principles focused on ensuring proper indenting behavior in XML transformations",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.TransformerUtilsTests#enableIndentingSunnyDay()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "enableIndenting",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.TransformerUtilsTests#enableIndentingSunnyDay()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "Transformer",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.TransformerUtilsTests#enableIndentingSunnyDay()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "TransformerUtils",
            "tail_type": "class"
        },
        {
            "head": "TransformerUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "enableIndenting",
            "tail_type": "apiFunction"
        },
        {
            "head": "TransformerUtils",
            "head_type": "class",
            "relation": "have",
            "tail": "DEFAULT_INDENT_AMOUNT",
            "tail_type": "useSampleCode"
        },
        {
            "head": "TransformerUtils",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "TransformerUtils",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.TransformerUtilsTests#enableIndentingSunnyDayWithCustomKosherIndentAmount()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "enableIndenting",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.TransformerUtilsTests#enableIndentingSunnyDayWithCustomKosherIndentAmount()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "Transformer",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.TransformerUtilsTests#enableIndentingSunnyDayWithCustomKosherIndentAmount()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "TransformerUtils",
            "tail_type": "class"
        },
        {
            "head": "enableIndenting",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "TransformerUtils.enableIndenting(transformer, Integer.parseInt(indentAmountProperty))",
            "tail_type": "useSampleCode"
        },
        {
            "head": "TransformerUtils.enableIndenting(transformer, Integer.parseInt(indentAmountProperty))",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "Transformer",
            "tail_type": "class"
        },
        {
            "head": "TransformerUtils.enableIndenting(transformer, Integer.parseInt(indentAmountProperty))",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "TransformerUtils",
            "tail_type": "class"
        },
        {
            "head": "TransformerUtils.enableIndenting(transformer, Integer.parseInt(indentAmountProperty))",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "indentAmountProperty",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "indentAmountProperty",
            "head_type": "relatedConceptInterpretation",
            "relation": "designPrincipleInterpretation",
            "tail": "The indent amount property specifies the number of spaces to use for indentation in the output XML document.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.TransformerUtilsTests#disableIndentingSunnyDay()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "disableIndenting",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.TransformerUtilsTests#disableIndentingSunnyDay()",
            "head_type": "method",
            "relation": "have",
            "tail": "TransformerUtils.disableIndenting(transformer)",
            "tail_type": "useSampleCode"
        },
        {
            "head": "TransformerUtils.disableIndenting(transformer)",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.TransformerUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.TransformerUtilsTests#disableIndentingSunnyDay()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.TransformerUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.TransformerUtilsTests#disableIndentingSunnyDay()",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.TransformerUtilsTests#disableIndentingSunnyDay()",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.TransformerUtilsTests#enableIndentingWithNullTransformer()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "enabling indenting",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.TransformerUtilsTests#enableIndentingWithNullTransformer()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "null transformer not allowed",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.util.xml.TransformerUtilsTests#enableIndentingWithNullTransformer()",
            "head_type": "method",
            "relation": "have",
            "tail": "void enableIndentingWithNullTransformer() { assertThatIllegalArgumentException().isThrownBy(() -> TransformerUtils.enableIndenting(null)); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.TransformerUtilsTests#enableIndentingWithNullTransformer()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.TransformerUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.TransformerUtilsTests#enableIndentingWithNullTransformer()",
            "head_type": "method",
            "relation": "have",
            "tail": "This method tests the behavior when a null transformer is passed to the enableIndenting method of TransformerUtils class.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.TransformerUtilsTests#enableIndentingWithNullTransformer()",
            "head_type": "method",
            "relation": "have",
            "tail": "The design principle here is to ensure robustness by preventing null values where a transformer is expected, thus maintaining the integrity of XML transformations.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.TransformerUtilsTests#disableIndentingWithNullTransformer()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "disableIndenting",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.TransformerUtilsTests#disableIndentingWithNullTransformer()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "nullTransformerConstraint",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.util.xml.TransformerUtilsTests#disableIndentingWithNullTransformer()",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.TransformerUtilsTests#disableIndentingWithNullTransformer()",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.TransformerUtilsTests#disableIndentingWithNullTransformer()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.TransformerUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.TransformerUtilsTests#enableIndentingWithNegativeIndentAmount()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "enabling indenting",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.TransformerUtilsTests#enableIndentingWithNegativeIndentAmount()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "negative indent amount",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.util.xml.TransformerUtilsTests#enableIndentingWithNegativeIndentAmount()",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.TransformerUtilsTests#enableIndentingWithNegativeIndentAmount()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.TransformerUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.TransformerUtilsTests#enableIndentingWithZeroIndentAmount()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "enabling indenting with zero indent amount",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.TransformerUtilsTests#enableIndentingWithZeroIndentAmount()",
            "head_type": "method",
            "relation": "have",
            "tail": "TransformerUtils.enableIndenting(new StubTransformer(), 0)",
            "tail_type": "useSampleCode"
        },
        {
            "head": "TransformerUtils.enableIndenting(new StubTransformer(), 0)",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.TransformerUtils",
            "tail_type": "class"
        },
        {
            "head": "enabling indenting with zero indent amount",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "indenting XML output with zero indentation",
            "tail_type": "useScenario"
        },
        {
            "head": "enabling indenting with zero indent amount",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "indent amount must be non-negative",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.util.xml.TransformerUtilsTests#enableIndentingWithZeroIndentAmount()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.TransformerUtilsTests",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.TransformerUtilsTests",
            "head_type": "class",
            "relation": "have",
            "tail": "related to XML transformation utilities",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.TransformerUtilsTests",
            "head_type": "class",
            "relation": "have",
            "tail": "designed to test TransformerUtils functionalities",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "transform",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "setParameter",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getParameter",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "clearParameters",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "setURIResolver",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getURIResolver",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "setOutputProperties",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getOutputProperties",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "setOutputProperty",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getOutputProperty",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "setErrorListener",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getErrorListener",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer",
            "head_type": "class",
            "relation": "constrained_by",
            "tail": "UnsupportedOperationException",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer",
            "head_type": "class",
            "relation": "constrained_by",
            "tail": "IllegalArgumentException",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer",
            "head_type": "class",
            "relation": "have",
            "tail": "outputProperties",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer",
            "head_type": "class",
            "relation": "have",
            "tail": "URIResolver",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer",
            "head_type": "class",
            "relation": "have",
            "tail": "ErrorListener",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer",
            "head_type": "class",
            "relation": "have",
            "tail": "Properties",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer",
            "head_type": "class",
            "relation": "have",
            "tail": "Source",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer",
            "head_type": "class",
            "relation": "have",
            "tail": "Result",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer",
            "head_type": "class",
            "relation": "have",
            "tail": "TransformerException",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer",
            "head_type": "class",
            "relation": "have",
            "tail": "outputProperty",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer",
            "head_type": "class",
            "relation": "have",
            "tail": "This class is a stub implementation of the Transformer interface, which is used to transform XML documents. It provides default implementations for all methods, throwing UnsupportedOperationException for most of them. The class is designed to be used as a placeholder or a starting point for custom transformer implementations.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer",
            "head_type": "class",
            "relation": "have",
            "tail": "package com.healthMgr.common.email; import java.util.Properties; import javax.xml.transform.ErrorListener; import javax.xml.transform.Result; import javax.xml.transform.Source; import javax.xml.transform.TransformerException; import javax.xml.transform.URIResolver; import org.springframework.util.xml.StubTransformer; public class OneClass { private Properties outputProperties = new Properties(); public OneClass() { outputProperties.setProperty(\"key\", \"value\"); } public static void main(String[] args) { OneClass oneClass = new OneClass(); try { oneClass.transform(new Source() { }, new Result() { }); } catch (TransformerException e) { e.printStackTrace(); } } }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer#transform(Source,Result)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "transform",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer#transform(Source,Result)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "UnsupportedOperationException",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer#transform(Source,Result)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer#transform(Source,Result)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer#transform(Source,Result)",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "transform",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "xmlSource and outputTarget",
            "tail_type": "useScenario"
        },
        {
            "head": "UnsupportedOperationException",
            "head_type": "useConstraint",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.StubTransformer#transform(Source,Result)",
            "tail_type": "method"
        },
        {
            "head": "relatedConceptInterpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.StubTransformer#transform(Source,Result)",
            "tail_type": "method"
        },
        {
            "head": "designPrincipleInterpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.StubTransformer#transform(Source,Result)",
            "tail_type": "method"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.StubTransformer#transform(Source,Result)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer#setParameter(String,Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "setParameter",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer#setParameter(String,Object)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "unsupportedOperation",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer#setParameter(String,Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer#setParameter(String,Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer#setParameter(String,Object)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.StubTransformer",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer#getParameter(String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getParameter",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer#getParameter(String)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.StubTransformer",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer",
            "head_type": "class",
            "relation": "have",
            "tail": "org.springframework.util.xml.StubTransformer#getParameter(String)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer#getParameter(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer#clearParameters()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "clearParameters",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer#clearParameters()",
            "head_type": "method",
            "relation": "have",
            "tail": "throw new UnsupportedOperationException()",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer#clearParameters()",
            "head_type": "method",
            "relation": "have",
            "tail": "This method clears parameters and throws an UnsupportedOperationException.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer#clearParameters()",
            "head_type": "method",
            "relation": "have",
            "tail": "This method is designed to clear parameters and indicate that the operation is not supported by throwing an UnsupportedOperationException.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer#setURIResolver(URIResolver)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "set URI resolver",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer#setURIResolver(URIResolver)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "unsupported operation",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer#setURIResolver(URIResolver)",
            "head_type": "method",
            "relation": "have",
            "tail": "throwing an UnsupportedOperationException",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer#setURIResolver(URIResolver)",
            "head_type": "method",
            "relation": "have",
            "tail": "URI resolver setting is not supported",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer#setURIResolver(URIResolver)",
            "head_type": "method",
            "relation": "have",
            "tail": "Design principle of throwing an exception for unsupported operations",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer#getURIResolver()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getURIResolver",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer#getURIResolver()",
            "head_type": "method",
            "relation": "have",
            "tail": "getURIResolver returns URIResolver",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer#getURIResolver()",
            "head_type": "method",
            "relation": "have",
            "tail": "URIResolver is used to resolve URIs",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer#getURIResolver()",
            "head_type": "method",
            "relation": "have",
            "tail": "public URIResolver getURIResolver() {\n    throw new UnsupportedOperationException();\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer#setOutputProperties(Properties)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "setOutputProperties",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer#setOutputProperties(Properties)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "UnsupportedOperationException",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer#setOutputProperties(Properties)",
            "head_type": "method",
            "relation": "have",
            "tail": "setOutputProperties throws UnsupportedOperationException",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer#setOutputProperties(Properties)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.StubTransformer",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer#getOutputProperties()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getOutputProperties",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer#getOutputProperties()",
            "head_type": "method",
            "relation": "have",
            "tail": "getOutputProperties returns a Properties object",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer#getOutputProperties()",
            "head_type": "method",
            "relation": "have",
            "tail": "This method is overridden",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer#getOutputProperties()",
            "head_type": "method",
            "relation": "have",
            "tail": "public Properties getOutputProperties() { return this.outputProperties; }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer#setOutputProperty(String,String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "setOutputProperty",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer#setOutputProperty(String,String)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.StubTransformer",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer#setOutputProperty(String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer#getOutputProperty(String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getOutputProperty",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer#getOutputProperty(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "getOutputProperty(String name) throws IllegalArgumentException",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.StubTransformer#getOutputProperty(String)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer",
            "head_type": "class",
            "relation": "have",
            "tail": "This class is a part of the Spring Framework's XML processing utilities.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer",
            "head_type": "class",
            "relation": "have",
            "tail": "The design principle of this class is to provide a simple and efficient way to handle XML transformations.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer#setErrorListener(ErrorListener)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "setErrorListener",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer#setErrorListener(ErrorListener)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "throws IllegalArgumentException",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer#setErrorListener(ErrorListener)",
            "head_type": "method",
            "relation": "have",
            "tail": "public void setErrorListener(ErrorListener listener)",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer#setErrorListener(ErrorListener)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer#setErrorListener(ErrorListener)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer#setErrorListener(ErrorListener)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.ErrorListener",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer#getErrorListener()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getErrorListener",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer#getErrorListener()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "UnsupportedOperationException",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer#getErrorListener()",
            "head_type": "method",
            "relation": "have",
            "tail": "This method is not supported and will throw an UnsupportedOperationException.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer#getErrorListener()",
            "head_type": "method",
            "relation": "have",
            "tail": "This method is designed to throw an exception, indicating that the functionality is not implemented.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.StubTransformer#getErrorListener()",
            "head_type": "method",
            "relation": "have",
            "tail": "package com.example;\n\nimport org.springframework.util.xml.ErrorListener;\n\npublic class StubTransformerExample {\n    public static void main(String[] args) {\n        StubTransformer transformer = new StubTransformer();\n        try {\n            ErrorListener listener = transformer.getErrorListener();\n        } catch (UnsupportedOperationException e) {\n            System.out.println(\"ErrorListener is not supported.\");\n        }\n    }\n}\n",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Handler",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "exception handler information",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Handler",
            "head_type": "class",
            "relation": "constrained_by",
            "tail": "must follow JVMS exception_table structure",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.Handler",
            "head_type": "class",
            "relation": "applied_to",
            "tail": "defining exception handling in Java bytecode",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Handler",
            "head_type": "class",
            "relation": "have",
            "tail": "complete sample code for using Handler",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Handler",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Label",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.Handler",
            "head_type": "class",
            "relation": "have",
            "tail": "related concept interpretation for exception handling",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Handler",
            "head_type": "class",
            "relation": "have",
            "tail": "design principle interpretation for Handler class",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Handler#removeRange(Handler,Label,Label)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "removeRangeFromHandlerList",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Handler#removeRange(Handler,Label,Label)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "nullFirstHandler",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.Handler#removeRange(Handler,Label,Label)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "exceptionHandlerManipulation",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Handler#removeRange(Handler,Label,Label)",
            "head_type": "method",
            "relation": "have",
            "tail": "exceptionHandlerManipulationSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Handler#removeRange(Handler,Label,Label)",
            "head_type": "method",
            "relation": "have",
            "tail": "exceptionHandlerManipulationConcept",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Handler#removeRange(Handler,Label,Label)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrinciplesForHandlerManipulation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "removeRangeFromHandlerList",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Handler",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.Handler#getExceptionTableLength(Handler)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getExceptionTableLength",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Handler#getExceptionTableLength(Handler)",
            "head_type": "method",
            "relation": "have",
            "tail": "getExceptionTableLengthSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getExceptionTableLengthSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "getExceptionTableLengthSampleCodeContent",
            "tail_type": "codeContent"
        },
        {
            "head": "org.springframework.asm.Handler#getExceptionTableLength(Handler)",
            "head_type": "method",
            "relation": "have",
            "tail": "getExceptionTableLengthDescription",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "getExceptionTableLengthDescription",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "getExceptionTableLengthDescriptionContent",
            "tail_type": "descriptionContent"
        },
        {
            "head": "org.springframework.asm.Handler#getExceptionTableLength(Handler)",
            "head_type": "method",
            "relation": "have",
            "tail": "getExceptionTableLengthDesignPrinciple",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "getExceptionTableLengthDesignPrinciple",
            "head_type": "designPrincipleInterpretation",
            "relation": "have",
            "tail": "getExceptionTableLengthDesignPrincipleContent",
            "tail_type": "principleContent"
        },
        {
            "head": "org.springframework.asm.Handler#getExceptionTableSize(Handler)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getExceptionTableSize",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Handler#getExceptionTableSize(Handler)",
            "head_type": "method",
            "relation": "have",
            "tail": "getExceptionTableSizeSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getExceptionTableSizeSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "getExceptionTableSizeSampleCodeContent",
            "tail_type": "codeContent"
        },
        {
            "head": "org.springframework.asm.Handler#getExceptionTableSize(Handler)",
            "head_type": "method",
            "relation": "have",
            "tail": "getExceptionTableSizeRelatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "getExceptionTableSizeRelatedConceptInterpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "JVMS exception_table",
            "tail_type": "concept"
        },
        {
            "head": "org.springframework.asm.Handler#getExceptionTableSize(Handler)",
            "head_type": "method",
            "relation": "have",
            "tail": "getExceptionTableSizeDesignPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "getExceptionTableSizeDesignPrincipleInterpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "have",
            "tail": "efficient memory usage",
            "tail_type": "principle"
        },
        {
            "head": "org.springframework.asm.Handler#putExceptionTable(Handler,ByteVector)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "puts the JVMS exception_table",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Handler#putExceptionTable(Handler,ByteVector)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "firstHandler may be null",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.Handler#putExceptionTable(Handler,ByteVector)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "exception handling in bytecode manipulation",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Handler#putExceptionTable(Handler,ByteVector)",
            "head_type": "method",
            "relation": "have",
            "tail": "static void putExceptionTable(final Handler firstHandler, final ByteVector output) {\n    output.putShort(getExceptionTableLength(firstHandler));\n    Handler handler = firstHandler;\n    while (handler != null) {\n        output.putShort(handler.startPc.bytecodeOffset).putShort(handler.endPc.bytecodeOffset).putShort(handler.handlerPc.bytecodeOffset).putShort(handler.catchType);\n        handler = handler.nextHandler;\n    }\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Handler#putExceptionTable(Handler,ByteVector)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Handler#putExceptionTable(Handler,ByteVector)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Handler#putExceptionTable(Handler,ByteVector)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Handler",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.Handler#putExceptionTable(Handler,ByteVector)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.ByteVector",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.XMLEventStreamReaderTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "XML parsing",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.XMLEventStreamReaderTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "XML event stream processing",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.XMLEventStreamReaderTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "XML transformation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.XMLEventStreamReaderTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "XML content comparison",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.XMLEventStreamReaderTests",
            "head_type": "class",
            "relation": "have",
            "tail": "XML parsing sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.XMLEventStreamReaderTests",
            "head_type": "class",
            "relation": "have",
            "tail": "XML event stream processing sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.XMLEventStreamReaderTests",
            "head_type": "class",
            "relation": "have",
            "tail": "XML transformation sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.XMLEventStreamReaderTests",
            "head_type": "class",
            "relation": "have",
            "tail": "XML content comparison sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.XMLEventStreamReaderTests",
            "head_type": "class",
            "relation": "have",
            "tail": "XML parsing related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.XMLEventStreamReaderTests",
            "head_type": "class",
            "relation": "have",
            "tail": "XML event stream processing related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.XMLEventStreamReaderTests",
            "head_type": "class",
            "relation": "have",
            "tail": "XML transformation related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.XMLEventStreamReaderTests",
            "head_type": "class",
            "relation": "have",
            "tail": "XML content comparison related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.XMLEventStreamReaderTests",
            "head_type": "class",
            "relation": "have",
            "tail": "XML parsing design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.XMLEventStreamReaderTests",
            "head_type": "class",
            "relation": "have",
            "tail": "XML event stream processing design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.XMLEventStreamReaderTests",
            "head_type": "class",
            "relation": "have",
            "tail": "XML transformation design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.XMLEventStreamReaderTests",
            "head_type": "class",
            "relation": "have",
            "tail": "XML content comparison design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.XMLEventStreamReaderTests#createStreamReader()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "create XMLEventStreamReader",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.XMLEventStreamReaderTests#createStreamReader()",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for creating XMLEventStreamReader",
            "tail_type": "useSampleCode"
        },
        {
            "head": "create XMLEventStreamReader",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "sample code for creating XMLEventStreamReader",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.XMLEventStreamReaderTests",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.XMLEventStreamReaderTests#createStreamReader()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.util.xml.XMLEventStreamReaderTests#createStreamReader()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.XMLEventStreamReaderTests",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.XMLEventStreamReaderTests#readAll()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "xml parsing",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.XMLEventStreamReaderTests#readAll()",
            "head_type": "method",
            "relation": "have",
            "tail": "xml parsing sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "xml parsing sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "xml parsing sample code content",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.XMLEventStreamReaderTests#readAll()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.XMLEventStreamReader",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.XMLEventStreamReaderTests#readCorrect()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "XML Transformation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.XMLEventStreamReaderTests#readCorrect()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Node Filtering",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.XMLEventStreamReaderTests#readCorrect()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "XML Similarity Comparison",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.XMLEventStreamReaderTests#readCorrect()",
            "head_type": "method",
            "relation": "have",
            "tail": "XML Transformation Sample Code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.XMLEventStreamReaderTests#readCorrect()",
            "head_type": "method",
            "relation": "have",
            "tail": "Node Filtering Explanation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.XMLEventStreamReaderTests#readCorrect()",
            "head_type": "method",
            "relation": "have",
            "tail": "XML Similarity Comparison Explanation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.XMLEventStreamReaderTests#readCorrect()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.XMLEventStreamReaderTests",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.XMLEventStreamReaderTests",
            "head_type": "class",
            "relation": "have",
            "tail": "XML Transformation Design Principle",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Label#getOffset()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "get bytecode offset",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Label#getOffset()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "label must be resolved",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.Label#getOffset()",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "Attribute subclasses",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Label#getOffset()",
            "head_type": "method",
            "relation": "have",
            "tail": "get bytecode offset sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Label#getOffset()",
            "head_type": "method",
            "relation": "have",
            "tail": "get bytecode offset related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Label#getOffset()",
            "head_type": "method",
            "relation": "have",
            "tail": "get bytecode offset design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Label",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Label#getOffset()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.Label#getCanonicalInstance()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getCanonicalInstance",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Label#getCanonicalInstance()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "MethodWriter#COMPUTE_ALL_FRAMES option must be used",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.Label#getCanonicalInstance()",
            "head_type": "method",
            "relation": "have",
            "tail": "Returns the canonical Label instance corresponding to this label's bytecode offset",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Label#getCanonicalInstance()",
            "head_type": "method",
            "relation": "have",
            "tail": "The canonical instance is the first label in the order of their visit by MethodVisitor#visitLabel",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Label#getCanonicalInstance()",
            "head_type": "method",
            "relation": "have",
            "tail": "package com.healthMgr.common.email; import java.util.*; public class OneClass { // specific code }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Label",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Label#getCanonicalInstance()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.Label#addLineNumber(int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "add source line number",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Label#addLineNumber(int)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "line number must be strictly positive",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.Label#addLineNumber(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "source line number management",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Label#addLineNumber(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "efficient line number storage",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Label#addLineNumber(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "source line number addition example",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Label",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Label#addLineNumber(int)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.Label#accept(MethodVisitor,boolean)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "visit label and source line numbers",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Label#accept(MethodVisitor,boolean)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "visitLineNumbers flag must be true to visit line numbers",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.Label#accept(MethodVisitor,boolean)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "source line numbers visitation",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Label#accept(MethodVisitor,boolean)",
            "head_type": "method",
            "relation": "have",
            "tail": "visit label and source line numbers sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Label#accept(MethodVisitor,boolean)",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation for visiting labels and line numbers",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Label#accept(MethodVisitor,boolean)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation for visiting labels and line numbers",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Label",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.MethodVisitor",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.Label#put(ByteVector,int,boolean)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "puts a reference to this label in the bytecode of a method",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Label#put(ByteVector,int,boolean)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "the bytecode offset of the label is known",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.Label#put(ByteVector,int,boolean)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "compute and write the relative bytecode offset",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Label#put(ByteVector,int,boolean)",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for putting a reference to a label in bytecode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Label#put(ByteVector,int,boolean)",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation for bytecode label referencing",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Label#put(ByteVector,int,boolean)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation for label referencing in bytecode",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Label#put(ByteVector,int,boolean)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.ByteVector",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.Label#put(ByteVector,int,boolean)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Label",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.Label#put(ByteVector)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "puts a reference to this label in the stack map table of a method",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Label#put(ByteVector)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "if the bytecode offset of the label is known, it is written directly. Otherwise, a null relative offset is written and a new forward reference is declared for this label.",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.Label#put(ByteVector)",
            "head_type": "method",
            "relation": "have",
            "tail": "the stack map table where the label offset must be added.",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Label#put(ByteVector)",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.asm.ByteVector",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.Label#put(ByteVector)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Label#put(ByteVector)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Label#put(ByteVector)",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Label#addForwardReference(int,int,int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "addForwardReference",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Label#addForwardReference(int,int,int)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "true forward reference",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.Label#addForwardReference(int,int,int)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "unresolved label",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Label#addForwardReference(int,int,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for addForwardReference",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Label#addForwardReference(int,int,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "explanation of forward and backward references",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Label#addForwardReference(int,int,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle of efficient forward reference management",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Label",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Label#addForwardReference(int,int,int)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.Label#resolve(byte[],ByteVector,int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "resolveForwardReferences",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Label#resolve(byte[],ByteVector,int)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "bytecodeOffsetMustBeKnown",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.Label#resolve(byte[],ByteVector,int)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "bytecodeManipulation",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Label#resolve(byte[],ByteVector,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "resolveForwardReferencesSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "resolveForwardReferencesSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "resolveForwardReferencesSampleCodeContent",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Label#resolve(byte[],ByteVector,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "resolveForwardReferencesRelatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "resolveForwardReferencesRelatedConceptInterpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "resolveForwardReferencesRelatedConceptInterpretationContent",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Label#resolve(byte[],ByteVector,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "resolveForwardReferencesDesignPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "resolveForwardReferencesDesignPrincipleInterpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "have",
            "tail": "resolveForwardReferencesDesignPrincipleInterpretationContent",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Label#resolve(byte[],ByteVector,int)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Label",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.Label#markSubroutine(short)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "marking subroutine blocks",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Label#markSubroutine(short)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "all labels must have a null nextListElement",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.Label#markSubroutine(short)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "finding all blocks reachable without following jsr targets",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Label#markSubroutine(short)",
            "head_type": "method",
            "relation": "have",
            "tail": "complete sample code for marking subroutine blocks",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Label#markSubroutine(short)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Label",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.Label#markSubroutine(short)",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation for subroutine block marking",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Label#markSubroutine(short)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation for subroutine block marking",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Label#addSubroutineRetSuccessors(Label)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "completing control flow graph",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Label#addSubroutineRetSuccessors(Label)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "all labels must have a null nextListElement",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.Label#addSubroutineRetSuccessors(Label)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "finding basic blocks ending a subroutine",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Label#addSubroutineRetSuccessors(Label)",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.asm.Label",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.Label#addSubroutineRetSuccessors(Label)",
            "head_type": "method",
            "relation": "have",
            "tail": "used to manage subroutine calls and returns in bytecode manipulation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Label#addSubroutineRetSuccessors(Label)",
            "head_type": "method",
            "relation": "have",
            "tail": "design to efficiently handle control flow in bytecode by adding edges for subroutine returns",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Label#addSubroutineRetSuccessors(Label)",
            "head_type": "method",
            "relation": "have",
            "tail": "public class Example {\n    public void exampleMethod() {\n        // Assuming Label and Edge classes exist\n        Label startLabel = new Label();\n        Label callerLabel = new Label();\n        startLabel.addSubroutineRetSuccessors(callerLabel);\n    }\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Label#pushSuccessors(Label)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "addSuccessorsToControlFlowGraph",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Label#pushSuccessors(Label)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "excludeJsrTargets",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.Label#pushSuccessors(Label)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "processBasicBlocks",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Label#pushSuccessors(Label)",
            "head_type": "method",
            "relation": "have",
            "tail": "addSuccessorsToControlFlowGraphSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Label#pushSuccessors(Label)",
            "head_type": "method",
            "relation": "have",
            "tail": "controlFlowGraphInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Label#pushSuccessors(Label)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrinciplesForPushSuccessors",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "addSuccessorsToControlFlowGraphSampleCode",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Label#pushSuccessors(Label)",
            "tail_type": "method"
        },
        {
            "head": "controlFlowGraphInterpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Label#pushSuccessors(Label)",
            "tail_type": "method"
        },
        {
            "head": "designPrinciplesForPushSuccessors",
            "head_type": "designPrincipleInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Label#pushSuccessors(Label)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.Label#toString()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "string representation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Label#toString()",
            "head_type": "method",
            "relation": "have",
            "tail": "Returns a string representation of this label.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Label#toString()",
            "head_type": "method",
            "relation": "have",
            "tail": "Complete sample code for using the method org.springframework.asm.Label#toString()",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "write XML content",
            "head_type": "class",
            "relation": "haveFunction",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "apiFunction"
        },
        {
            "tail": "writeStartDocument",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "writeProcessingInstruction",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "writeStartElement",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "writeDefaultNamespace",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "writeNamespace",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "writeComment",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "writeCharacters",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "writeEndElement",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "writeEndDocument",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "XmlContent.from(stringWriter)",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "assertThat(XmlContent.from(stringWriter)).isSimilarTo(XML, nodeFilter)",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "nodeFilter",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "n.getNodeType() != Node.DOCUMENT_TYPE_NODE && n.getNodeType() != Node.PROCESSING_INSTRUCTION_NODE",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "n.getNodeType()",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "Node.DOCUMENT_TYPE_NODE",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "Node.PROCESSING_INSTRUCTION_NODE",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "XmlContent.from(stringWriter)",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "assertThat(XmlContent.from(stringWriter)).isSimilarTo(XML, nodeFilter)",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "nodeFilter",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "n.getNodeType() != Node.DOCUMENT_TYPE_NODE && n.getNodeType() != Node.PROCESSING_INSTRUCTION_NODE",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "n.getNodeType()",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "Node.DOCUMENT_TYPE_NODE",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "Node.PROCESSING_INSTRUCTION_NODE",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "XmlContent.from(stringWriter)",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "assertThat(XmlContent.from(stringWriter)).isSimilarTo(XML, nodeFilter)",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "nodeFilter",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "n.getNodeType() != Node.DOCUMENT_TYPE_NODE && n.getNodeType() != Node.PROCESSING_INSTRUCTION_NODE",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "n.getNodeType()",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "Node.DOCUMENT_TYPE_NODE",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "Node.PROCESSING_INSTRUCTION_NODE",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "XmlContent.from(stringWriter)",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "assertThat(XmlContent.from(stringWriter)).isSimilarTo(XML, nodeFilter)",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "nodeFilter",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "n.getNodeType() != Node.DOCUMENT_TYPE_NODE && n.getNodeType() != Node.PROCESSING_INSTRUCTION_NODE",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "n.getNodeType()",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "Node.DOCUMENT_TYPE_NODE",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "Node.PROCESSING_INSTRUCTION_NODE",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "XmlContent.from(stringWriter)",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "assertThat(XmlContent.from(stringWriter)).isSimilarTo(XML, nodeFilter)",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "nodeFilter",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "n.getNodeType() != Node.DOCUMENT_TYPE_NODE && n.getNodeType() != Node.PROCESSING_INSTRUCTION_NODE",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "n.getNodeType()",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "Node.DOCUMENT_TYPE_NODE",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "Node.PROCESSING_INSTRUCTION_NODE",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "XmlContent.from(stringWriter)",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "assertThat(XmlContent.from(stringWriter)).isSimilarTo(XML, nodeFilter)",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "nodeFilter",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "n.getNodeType() != Node.DOCUMENT_TYPE_NODE && n.getNodeType() != Node.PROCESSING_INSTRUCTION_NODE",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "n.getNodeType()",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "Node.DOCUMENT_TYPE_NODE",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "Node.PROCESSING_INSTRUCTION_NODE",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "XmlContent.from(stringWriter)",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "assertThat(XmlContent.from(stringWriter)).isSimilarTo(XML, nodeFilter)",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "nodeFilter",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "n.getNodeType() != Node.DOCUMENT_TYPE_NODE && n.getNodeType() != Node.PROCESSING_INSTRUCTION_NODE",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "n.getNodeType()",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "Node.DOCUMENT_TYPE_NODE",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "Node.PROCESSING_INSTRUCTION_NODE",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "XmlContent.from(stringWriter)",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "assertThat(XmlContent.from(stringWriter)).isSimilarTo(XML, nodeFilter)",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "nodeFilter",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "n.getNodeType() != Node.DOCUMENT_TYPE_NODE && n.getNodeType() != Node.PROCESSING_INSTRUCTION_NODE",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "n.getNodeType()",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "Node.DOCUMENT_TYPE_NODE",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "Node.PROCESSING_INSTRUCTION_NODE",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "XmlContent.from(stringWriter)",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "assertThat(XmlContent.from(stringWriter)).isSimilarTo(XML, nodeFilter)",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "nodeFilter",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "n.getNodeType() != Node.DOCUMENT_TYPE_NODE && n.getNodeType() != Node.PROCESSING_INSTRUCTION_NODE",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "useSampleCode"
        },
        {
            "head_type": "class",
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests"
        },
        {
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "createStreamReader()",
            "tail_type": "apiFunction"
        },
        {
            "head": "createStreamReader()",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "createStreamReader()",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "createStreamReader()",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "createStreamReader()",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "class"
        },
        {
            "head": "createStreamReader()",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests#write()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "XML Document Writing",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests#write()",
            "head_type": "method",
            "relation": "have",
            "tail": "XML Document Writing Sample Code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "XML Document Writing Sample Code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "Complete XML Document Writing Example",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests#write()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
            "head_type": "class",
            "relation": "have",
            "tail": "Design Principles for XML Event Stream Writer Tests",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.MethodTooLargeException",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "constructor",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.MethodTooLargeException",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getClassName",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.MethodTooLargeException",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getMethodName",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.MethodTooLargeException",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getDescriptor",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.MethodTooLargeException",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getCodeSize",
            "tail_type": "apiFunction"
        },
        {
            "head": "constructor",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "validClassName",
            "tail_type": "useConstraint"
        },
        {
            "head": "constructor",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "validMethodName",
            "tail_type": "useConstraint"
        },
        {
            "head": "constructor",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "validDescriptor",
            "tail_type": "useConstraint"
        },
        {
            "head": "constructor",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "validCodeSize",
            "tail_type": "useConstraint"
        },
        {
            "head": "getClassName",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "classInformationRetrieval",
            "tail_type": "useScenario"
        },
        {
            "head": "getMethodName",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "methodInformationRetrieval",
            "tail_type": "useScenario"
        },
        {
            "head": "getDescriptor",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "methodDescriptorRetrieval",
            "tail_type": "useScenario"
        },
        {
            "head": "getCodeSize",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "methodCodeSizeRetrieval",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.MethodTooLargeException",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.MethodTooLargeException",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.MethodTooLargeException",
            "head_type": "class",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.MethodTooLargeException#getClassName()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getInternalName",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.MethodTooLargeException#getClassName()",
            "head_type": "method",
            "relation": "have",
            "tail": "getClassNameSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.MethodTooLargeException#getClassName()",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.MethodTooLargeException#getClassName()",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "getClassNameSampleCode",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.asm.MethodTooLargeException",
            "tail_type": "class"
        },
        {
            "head": "relatedConceptInterpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.asm.MethodTooLargeException",
            "tail_type": "class"
        },
        {
            "head": "designPrincipleInterpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.asm.MethodTooLargeException",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.MethodTooLargeException#getMethodName()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getMethodName",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.MethodTooLargeException#getMethodName()",
            "head_type": "method",
            "relation": "have",
            "tail": "Returns the name of the method.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.MethodTooLargeException#getMethodName()",
            "head_type": "method",
            "relation": "have",
            "tail": "public String getMethodName() { return methodName; }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.MethodTooLargeException#getDescriptor()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getDescriptor",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.MethodTooLargeException#getDescriptor()",
            "head_type": "method",
            "relation": "have",
            "tail": "Returns the descriptor of the method.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.MethodTooLargeException#getDescriptor()",
            "head_type": "method",
            "relation": "have",
            "tail": "public String getDescriptor() { return descriptor; }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.MethodTooLargeException#getCodeSize()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "return the size of the method's Code attribute",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.MethodTooLargeException#getCodeSize()",
            "head_type": "method",
            "relation": "have",
            "tail": "Returns the size of the method's Code attribute, in bytes.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.MethodTooLargeException#getCodeSize()",
            "head_type": "method",
            "relation": "have",
            "tail": "The method getCodeSize() is used to get the size of the method's Code attribute, measured in bytes. This is particularly useful in scenarios where the size of the generated bytecode needs to be monitored or limited, such as in environments with strict size constraints on methods.",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.MethodTooLargeException#getCodeSize()",
            "head_type": "method",
            "relation": "have",
            "tail": "public int getCodeSize() {\n    return codeSize;\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.XmlValidationModeDetectorTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "XmlValidationModeDetecting",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.XmlValidationModeDetectorTests",
            "head_type": "class",
            "relation": "have",
            "tail": "XmlValidationModeDetectorUsageSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.XmlValidationModeDetectorTests",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "XmlValidationModeDetector",
            "tail_type": "class"
        },
        {
            "head": "XmlValidationModeDetectorUsageSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "CompleteJavaSampleCode",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.XmlValidationModeDetectorTests#dtdDetection(String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "DTD Validation Detection",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.XmlValidationModeDetectorTests#dtdDetection(String)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "XML File Validation",
            "tail_type": "useScenario"
        },
        {
            "head": "DTD Validation Detection",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "File Must Exist",
            "tail_type": "useConstraint"
        },
        {
            "head": "DTD Validation Detection",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "org.springframework.util.xml.XmlValidationModeDetectorTests",
            "tail_type": "class"
        },
        {
            "head": "DTD Validation Detection",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Related Concept Interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "DTD Validation Detection",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Design Principle Interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "DTD Validation Detection",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Use Sample Code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.XmlValidationModeDetectorTests#xsdDetection(String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "XML Validation Mode Detection",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.XmlValidationModeDetectorTests#xsdDetection(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "Sample Code for XML Validation Mode Detection",
            "tail_type": "useSampleCode"
        },
        {
            "head": "Sample Code for XML Validation Mode Detection",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "Complete Example Code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.XmlValidationModeDetectorTests#xsdDetection(String)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.XmlValidationModeDetectorTests",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.XmlValidationModeDetectorTests#assertValidationMode(String,int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "assertValidationMode",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.XmlValidationModeDetectorTests#assertValidationMode(String,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "private void assertValidationMode(String fileName, int expectedValidationMode) throws IOException {\n    try (InputStream inputStream = getClass().getResourceAsStream(fileName)) {\n        assertThat(xmlValidationModeDetector.detectValidationMode(inputStream)).as(\"Validation Mode\").isEqualTo(expectedValidationMode);\n    }\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.XmlValidationModeDetectorTests#assertValidationMode(String,int)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.XmlValidationModeDetector",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.XmlValidationModeDetectorTests#assertValidationMode(String,int)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.XmlValidationModeDetectorTests",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.core.task.VirtualThreadTaskExecutorTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "virtualThreadsWithoutName",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.task.VirtualThreadTaskExecutorTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "virtualThreadsWithNamePrefix",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.task.VirtualThreadTaskExecutorTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "simpleWithVirtualThreadFactory",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.task.VirtualThreadTaskExecutorTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "simpleWithVirtualThreadFlag",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.task.VirtualThreadTaskExecutorTests",
            "head_type": "class",
            "relation": "have",
            "tail": "executeAndWait",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.task.VirtualThreadTaskExecutorTests",
            "head_type": "class",
            "relation": "have",
            "tail": "NoOpRunnable",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.core.task.VirtualThreadTaskExecutorTests",
            "head_type": "class",
            "relation": "have",
            "tail": "AbstractNotifyingRunnable",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.core.task.VirtualThreadTaskExecutorTests",
            "head_type": "class",
            "relation": "have",
            "tail": "ThreadNameHarvester",
            "tail_type": "class"
        },
        {
            "head": "virtualThreadsWithoutName",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "test without name",
            "tail_type": "useScenario"
        },
        {
            "head": "virtualThreadsWithNamePrefix",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "test with name prefix",
            "tail_type": "useScenario"
        },
        {
            "head": "simpleWithVirtualThreadFactory",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "test with virtual thread factory",
            "tail_type": "useScenario"
        },
        {
            "head": "simpleWithVirtualThreadFlag",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "test with virtual thread flag",
            "tail_type": "useScenario"
        },
        {
            "head": "executeAndWait",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "execute and wait for task completion",
            "tail_type": "useScenario"
        },
        {
            "head": "NoOpRunnable",
            "head_type": "class",
            "relation": "designPrincipleInterpretation",
            "tail": "No operation Runnable for testing",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "AbstractNotifyingRunnable",
            "head_type": "class",
            "relation": "designPrincipleInterpretation",
            "tail": "Abstract class for notifying runnables",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "ThreadNameHarvester",
            "head_type": "class",
            "relation": "designPrincipleInterpretation",
            "tail": "Class for harvesting thread names",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.core.task.VirtualThreadTaskExecutorTests",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "relatedConceptInterpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "associated_with",
            "tail": "virtual threads",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "relatedConceptInterpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "associated_with",
            "tail": "thread factories",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "relatedConceptInterpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "associated_with",
            "tail": "thread names",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "relatedConceptInterpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "associated_with",
            "tail": "asynchronous task execution",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.core.task.VirtualThreadTaskExecutorTests#virtualThreadsWithoutName()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "virtualThreadsWithoutName",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.task.VirtualThreadTaskExecutorTests#virtualThreadsWithoutName()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "VirtualThreadTaskExecutor",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.core.task.VirtualThreadTaskExecutorTests#virtualThreadsWithoutName()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "ThreadNameHarvester",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.core.task.VirtualThreadTaskExecutorTests#virtualThreadsWithoutName()",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.core.task.VirtualThreadTaskExecutorTests#virtualThreadsWithoutName()",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.task.VirtualThreadTaskExecutorTests#virtualThreadsWithNamePrefix()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "virtualThreadsWithNamePrefix",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.task.VirtualThreadTaskExecutorTests#virtualThreadsWithNamePrefix()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "VirtualThreadTaskExecutor",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.core.task.VirtualThreadTaskExecutorTests#virtualThreadsWithNamePrefix()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "ThreadNameHarvester",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.core.task.VirtualThreadTaskExecutorTests#virtualThreadsWithNamePrefix()",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.core.task.VirtualThreadTaskExecutorTests#virtualThreadsWithNamePrefix()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.core.task.VirtualThreadTaskExecutorTests#simpleWithVirtualThreadFactory()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "simpleWithVirtualThreadFactory",
            "tail_type": "apiFunction"
        },
        {
            "head": "simpleWithVirtualThreadFactory",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "SimpleAsyncTaskExecutor",
            "tail_type": "class"
        },
        {
            "head": "simpleWithVirtualThreadFactory",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "ThreadNameHarvester",
            "tail_type": "class"
        },
        {
            "head": "simpleWithVirtualThreadFactory",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "executeAndWait",
            "tail_type": "apiFunction"
        },
        {
            "head": "simpleWithVirtualThreadFactory",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "assertThat",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.task.VirtualThreadTaskExecutorTests#simpleWithVirtualThreadFactory()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "SimpleAsyncTaskExecutor",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.core.task.VirtualThreadTaskExecutorTests#simpleWithVirtualThreadFactory()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "ThreadNameHarvester",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.core.task.VirtualThreadTaskExecutorTests#simpleWithVirtualThreadFactory()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "executeAndWait",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.task.VirtualThreadTaskExecutorTests#simpleWithVirtualThreadFactory()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "assertThat",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.task.VirtualThreadTaskExecutorTests#simpleWithVirtualThreadFactory()",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.core.task.VirtualThreadTaskExecutorTests#simpleWithVirtualThreadFactory()",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.core.task.VirtualThreadTaskExecutorTests#simpleWithVirtualThreadFactory()",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.task.VirtualThreadTaskExecutorTests#simpleWithVirtualThreadFlag()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "virtual thread execution",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.task.VirtualThreadTaskExecutorTests#simpleWithVirtualThreadFlag()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "custom prefix requirement",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.core.task.VirtualThreadTaskExecutorTests#simpleWithVirtualThreadFlag()",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "thread naming convention",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.core.task.VirtualThreadTaskExecutorTests#simpleWithVirtualThreadFlag()",
            "head_type": "method",
            "relation": "have",
            "tail": "thread naming convention",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.core.task.VirtualThreadTaskExecutorTests#simpleWithVirtualThreadFlag()",
            "head_type": "method",
            "relation": "have",
            "tail": "SimpleAsyncTaskExecutor usage",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.task.VirtualThreadTaskExecutorTests#simpleWithVirtualThreadFlag()",
            "head_type": "method",
            "relation": "have",
            "tail": "thread naming explanation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.core.task.VirtualThreadTaskExecutorTests#simpleWithVirtualThreadFlag()",
            "head_type": "method",
            "relation": "have",
            "tail": "virtual thread design principles",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.core.task.VirtualThreadTaskExecutorTests#simpleWithVirtualThreadFlag()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "SimpleAsyncTaskExecutor",
            "tail_type": "class"
        }
    ]
}