{
    "relationships": [
        {
            "head": "org.springframework.cglib.proxy.InterfaceMaker#firstInstance(Class)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "firstInstance",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.InterfaceMaker#firstInstance(Class)",
            "head_type": "method",
            "relation": "have",
            "tail": "firstInstance(Class type) { return type; }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.InterfaceMaker",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.proxy.InterfaceMaker#firstInstance(Class)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.proxy.InterfaceMaker#nextInstance(Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "generate instance",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.InterfaceMaker#nextInstance(Object)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "InterfaceMaker does not cache",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.proxy.InterfaceMaker#nextInstance(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "InterfaceMaker does not cache",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.InterfaceMaker#nextInstance(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "InterfaceMaker does not cache",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.InterfaceMaker#nextInstance(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "InterfaceMaker does not cache",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.InterfaceMaker#generateClass(ClassVisitor)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "generate interface class",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.InterfaceMaker#generateClass(ClassVisitor)",
            "head_type": "method",
            "relation": "have",
            "tail": "generate interface class sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "generate interface class sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "complete sample code for generating interface class",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.InterfaceMaker#generateClass(ClassVisitor)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.proxy.InterfaceMaker",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.InterfaceMaker",
            "head_type": "class",
            "relation": "have",
            "tail": "related concept interpretation for InterfaceMaker",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "related concept interpretation for InterfaceMaker",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "InterfaceMaker is used to create interface classes dynamically",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.InterfaceMaker",
            "head_type": "class",
            "relation": "have",
            "tail": "design principle interpretation for InterfaceMaker",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "design principle interpretation for InterfaceMaker",
            "head_type": "designPrincipleInterpretation",
            "relation": "have",
            "tail": "InterfaceMaker follows the principle of dynamic code generation to provide flexibility in creating interfaces at runtime",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.InvocationHandler",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "java.lang.reflect.InvocationHandler#invoke",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.InvocationHandler",
            "head_type": "class",
            "relation": "constrained_by",
            "tail": "JDK 1.2 unavailability",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.proxy.InvocationHandler",
            "head_type": "class",
            "relation": "applied_to",
            "tail": "Proxy class usage",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.proxy.InvocationHandler",
            "head_type": "class",
            "relation": "applied_to",
            "tail": "Enhancer usage",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.proxy.InvocationHandler",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.InvocationHandler",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.InvocationHandler",
            "head_type": "class",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.InvocationHandler",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "java.lang.reflect.InvocationHandler",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.InvocationHandler",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "Proxy",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.InvocationHandler",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "Enhancer",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.InvocationHandler#invoke(Object,Method,Object[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "invocation handler",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.InvocationHandler#invoke(Object,Method,Object[])",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "java.lang.reflect.InvocationHandler#invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.proxy.InvocationHandler#invoke(Object,Method,Object[])",
            "head_type": "method",
            "relation": "have",
            "tail": "invocation handler",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.InvocationHandlerGenerator",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "generate invocation handler",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.InvocationHandlerGenerator",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "generate static code",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.InvocationHandlerGenerator",
            "head_type": "class",
            "relation": "have",
            "tail": "generate invocation handler sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.InvocationHandlerGenerator",
            "head_type": "class",
            "relation": "have",
            "tail": "generate static code sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.InvocationHandlerGenerator",
            "head_type": "class",
            "relation": "have",
            "tail": "related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.InvocationHandlerGenerator",
            "head_type": "class",
            "relation": "have",
            "tail": "design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "generate invocation handler",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "generate method code",
            "tail_type": "useScenario"
        },
        {
            "head": "generate static code",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "generate static method code",
            "tail_type": "useScenario"
        },
        {
            "head": "generate invocation handler",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "method must exist",
            "tail_type": "useConstraint"
        },
        {
            "head": "generate static code",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "static context required",
            "tail_type": "useConstraint"
        },
        {
            "head": "generate invocation handler sample code",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "generate invocation handler",
            "tail_type": "apiFunction"
        },
        {
            "head": "generate static code sample code",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "generate static code",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.InvocationHandlerGenerator#generate(ClassEmitter,Context,List)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "proxy method generation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.InvocationHandlerGenerator#generate(ClassEmitter,Context,List)",
            "head_type": "method",
            "relation": "have",
            "tail": "proxy method generation sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "proxy method generation sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "proxy method generation sample code content",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.InvocationHandlerGenerator#generate(ClassEmitter,Context,List)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.proxy.ClassEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.InvocationHandlerGenerator#generate(ClassEmitter,Context,List)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.proxy.Context",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.InvocationHandlerGenerator#generate(ClassEmitter,Context,List)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "java.util.List",
            "tail_type": "class"
        },
        {
            "head": "proxy method generation",
            "head_type": "apiFunction",
            "relation": "relatedConceptInterpretation",
            "tail": "proxy method generation explanation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "proxy method generation explanation",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "proxy method generation explanation content",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "proxy method generation",
            "head_type": "apiFunction",
            "relation": "designPrincipleInterpretation",
            "tail": "proxy method generation design principle",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "proxy method generation design principle",
            "head_type": "designPrincipleInterpretation",
            "relation": "have",
            "tail": "proxy method generation design principle content",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.InvocationHandlerGenerator#generateStatic(CodeEmitter,Context,List)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "generateStatic",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.InvocationHandlerGenerator#generateStatic(CodeEmitter,Context,List)",
            "head_type": "method",
            "relation": "have",
            "tail": "Generates static code for the given methods.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.InvocationHandlerGenerator#generateStatic(CodeEmitter,Context,List)",
            "head_type": "method",
            "relation": "have",
            "tail": "public void generateStatic(CodeEmitter e, Context context, List methods) {    for (Iterator it = methods.iterator(); it.hasNext(); ) {        MethodInfo method = (MethodInfo) it.next();        EmitUtils.load_method(e, method);        e.putfield(context.getImplSignature(method).getName());    }}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.InvocationHandlerGenerator#generateStatic(CodeEmitter,Context,List)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.proxy.InvocationHandlerGenerator",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.LazyLoader",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "lazy loading",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.LazyLoader",
            "head_type": "class",
            "relation": "have",
            "tail": "Lazy-loading Enhancer callback",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.LazyLoader",
            "head_type": "class",
            "relation": "have",
            "tail": "Return the object which the original method invocation should be dispatched. Called as soon as the first lazily-loaded method in the enhanced instance is invoked. The same object is then used for every future method call to the proxy instance.",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.LazyLoader#loadObject()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "lazy loading",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.LazyLoader#loadObject()",
            "head_type": "method",
            "relation": "have",
            "tail": "Return the object which the original method invocation should be dispatched. Called as soon as the first lazily-loaded method in the enhanced instance is invoked. The same object is then used for every future method call to the proxy instance.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.LazyLoader#loadObject()",
            "head_type": "method",
            "relation": "have",
            "tail": "The method loadObject() is responsible for returning the object that should handle the original method invocation. It is called when the first lazily-loaded method in the enhanced instance is invoked, and the returned object is used for all subsequent method calls to the proxy instance.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.LazyLoader#loadObject()",
            "head_type": "method",
            "relation": "have",
            "tail": "java\npackage org.springframework.cglib.proxy;\n\nimport java.lang.reflect.Method;\n\npublic class LazyLoaderExample {\n\n    public static void main(String[] args) throws Exception {\n        LazyLoader lazyLoader = new LazyLoader() {\n            @Override\n            public Object loadObject() throws Exception {\n                // The object that should handle the method invocation\n                return new MyObject();\n            }\n        };\n\n        // Assuming MyProxyClass is a proxy class generated by CGLIB\n        MyProxyClass proxy = (MyProxyClass) Enhancer.create(MyProxyClass.class, lazyLoader);\n\n        // The first method call will trigger the loadObject() method\n        proxy.someMethod();\n    }\n\n    static class MyObject {\n        public void someMethod() {\n            System.out.println(\"Method invocation handled by MyObject\");\n        }\n    }\n}\n",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.LazyLoaderGenerator",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "lazy loading",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.LazyLoaderGenerator",
            "head_type": "class",
            "relation": "have",
            "tail": "LazyLoaderGenerator generates bytecode for lazy loading",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.LazyLoaderGenerator",
            "head_type": "class",
            "relation": "have",
            "tail": "LazyLoaderGenerator uses CGLIB to create dynamic proxies",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.LazyLoaderGenerator",
            "head_type": "class",
            "relation": "have",
            "tail": "public static final LazyLoaderGenerator INSTANCE = new LazyLoaderGenerator();\nprivate static final Signature LOAD_OBJECT = TypeUtils.parseSignature(\"Object loadObject()\");\nprivate static final Type LAZY_LOADER = TypeUtils.parseType(\"org.springframework.cglib.proxy.LazyLoader\");\n@Override\npublic void generate(ClassEmitter ce, Context context, List methods) {\n    Set indexes = new HashSet();\n    for (Iterator it = methods.iterator(); it.hasNext(); ) {\n        MethodInfo method = (MethodInfo) it.next();\n        if (TypeUtils.isProtected(method.getModifiers())) {\n            // ignore protected methods\n        } else {\n            int index = context.getIndex(method);\n            indexes.add(index);\n            CodeEmitter e = context.beginMethod(ce, method);\n            e.load_this();\n            e.dup();\n            e.invoke_virtual_this(loadMethod(index));\n            e.checkcast(method.getClassInfo().getType());\n            e.load_args();\n            e.invoke(method);\n            e.return_value();\n            e.end_method();\n        }\n    }\n    for (Iterator it = indexes.iterator(); it.hasNext(); ) {\n        int index = ((Integer) it.next());\n        String delegate = \"CGLIB$LAZY_LOADER_\" + index;\n        ce.declare_field(Constants.ACC_PRIVATE, delegate, Constants.TYPE_OBJECT, null);\n        CodeEmitter e = ce.begin_method(Constants.ACC_PRIVATE | Constants.ACC_SYNCHRONIZED | Constants.ACC_FINAL, loadMethod(index), null);\n        e.load_this();\n        e.getfield(delegate);\n        e.dup();\n        Label end = e.make_label();\n        e.ifnonnull(end);\n        e.pop();\n        e.load_this();\n        context.emitCallback(e, index);\n        e.invoke_interface(LAZY_LOADER, LOAD_OBJECT);\n        e.dup_x1();\n        e.putfield(delegate);\n        e.mark(end);\n        e.return_value();\n        e.end_method();\n    }\n}\nprivate Signature loadMethod(int index) {\n    return new Signature(\"CGLIB$LOAD_PRIVATE_\" + index, Constants.TYPE_OBJECT, Constants.TYPES_EMPTY);\n}\n@Override\npublic void generateStatic(CodeEmitter e, Context context, List methods) ;",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.LazyLoaderGenerator#generate(ClassEmitter,Context,List)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "lazy loading",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.LazyLoaderGenerator#generate(ClassEmitter,Context,List)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "must be used within CGLIB framework",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.proxy.LazyLoaderGenerator#generate(ClassEmitter,Context,List)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "proxy classes generation",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.proxy.LazyLoaderGenerator#generate(ClassEmitter,Context,List)",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for generating proxy classes",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.LazyLoaderGenerator#generate(ClassEmitter,Context,List)",
            "head_type": "method",
            "relation": "have",
            "tail": "explanation of related concepts",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.LazyLoaderGenerator#generate(ClassEmitter,Context,List)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principles of the method",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.LazyLoaderGenerator#generate(ClassEmitter,Context,List)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.proxy.LazyLoader",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.LazyLoaderGenerator#loadMethod(int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "lazy loading",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.LazyLoaderGenerator#loadMethod(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "Generates a unique signature for loading private methods.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.LazyLoaderGenerator#loadMethod(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "private Signature loadMethod(int index) {\n    return new Signature(\"CGLIB$LOAD_PRIVATE_\" + index, Constants.TYPE_OBJECT, Constants.TYPES_EMPTY);\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.LazyLoaderGenerator",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.proxy.LazyLoaderGenerator#loadMethod(int)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.proxy.LazyLoaderGenerator#generateStatic(CodeEmitter,Context,List)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "lazy loading",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.LazyLoaderGenerator#generateStatic(CodeEmitter,Context,List)",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.cglib.proxy.LazyLoaderGenerator#generateStatic(CodeEmitter,Context,List) sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.LazyLoaderGenerator#generateStatic(CodeEmitter,Context,List) sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "Complete example of using org.springframework.cglib.proxy.LazyLoaderGenerator#generateStatic(CodeEmitter,Context,List)",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodInterceptor",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "around advice",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodInterceptor",
            "head_type": "class",
            "relation": "have",
            "tail": "All generated proxied methods call this method instead of the original method. The original method may either be invoked by normal reflection using the Method object, or by using the MethodProxy (faster).",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodInterceptor",
            "head_type": "class",
            "relation": "have",
            "tail": "General-purpose Enhancer callback which provides for \"around advice\".",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodInterceptor",
            "head_type": "class",
            "relation": "have",
            "tail": "Author: Juozas Baliuka, Version: $Id: MethodInterceptor.java,v 1.8 2004/06/24 21:15:20 herbyderby Exp $",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "intercept",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "around advice",
            "tail_type": "apiFunction"
        },
        {
            "head": "intercept",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "any exception may be thrown; if so, super method will not be invoked",
            "tail_type": "useConstraint"
        },
        {
            "head": "intercept",
            "head_type": "method",
            "relation": "have",
            "tail": "public Object intercept(Object obj, java.lang.reflect.Method method, Object[] args, MethodProxy proxy) throws Throwable",
            "tail_type": "useSampleCode"
        },
        {
            "head": "intercept",
            "head_type": "method",
            "relation": "have",
            "tail": "All generated proxied methods call this method instead of the original method. The original method may either be invoked by normal reflection using the Method object, or by using the MethodProxy (faster).",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "intercept",
            "head_type": "method",
            "relation": "have",
            "tail": "General-purpose Enhancer callback which provides for \"around advice\".",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "intercept",
            "head_type": "method",
            "relation": "have",
            "tail": "Author: Juozas Baliuka, Version: $Id: MethodInterceptor.java,v 1.8 2004/06/24 21:15:20 herbyderby Exp $",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodInterceptor#intercept(Object,java.lang.reflect.Method,Object[],MethodProxy)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "intercept",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodInterceptor#intercept(Object,java.lang.reflect.Method,Object[],MethodProxy)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "intercept constraints",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodInterceptor#intercept(Object,java.lang.reflect.Method,Object[],MethodProxy)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "intercept scenarios",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodInterceptor#intercept(Object,java.lang.reflect.Method,Object[],MethodProxy)",
            "head_type": "method",
            "relation": "have",
            "tail": "intercept sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodInterceptor#intercept(Object,java.lang.reflect.Method,Object[],MethodProxy)",
            "head_type": "method",
            "relation": "have",
            "tail": "intercept related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodInterceptor#intercept(Object,java.lang.reflect.Method,Object[],MethodProxy)",
            "head_type": "method",
            "relation": "have",
            "tail": "intercept design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodInterceptor#intercept(Object,java.lang.reflect.Method,Object[],MethodProxy)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "MethodProxy",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodInterceptorGenerator",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "lazy loading",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodInterceptorGenerator",
            "head_type": "class",
            "relation": "constrained_by",
            "tail": "circular aliases are prohibited",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodInterceptorGenerator",
            "head_type": "class",
            "relation": "applied_to",
            "tail": "multiple aliases for a single name",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodInterceptorGenerator",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodInterceptorGenerator",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodInterceptorGenerator",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.core.SimpleAliasRegistryTests",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodInterceptorGenerator#getMethodField(Signature)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getMethodField",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodInterceptorGenerator#getMethodField(Signature)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.proxy.MethodInterceptorGenerator",
            "tail_type": "class"
        },
        {
            "head": "getMethodField",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "getMethodField",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "getMethodField",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodInterceptorGenerator#getMethodProxyField(Signature)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getMethodProxyField",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodInterceptorGenerator#getMethodProxyField(Signature)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.proxy.MethodInterceptorGenerator",
            "tail_type": "class"
        },
        {
            "head": "getMethodProxyField",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "getMethodProxyField",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "getMethodProxyField",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodInterceptorGenerator#generate(ClassEmitter,Context,List)",
            "head_type": "method",
            "relation": "haveFuntion",
            "tail": "generate method code",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodInterceptorGenerator#generate(ClassEmitter,Context,List)",
            "head_type": "method",
            "relation": "have",
            "tail": "generate method code sample",
            "tail_type": "useSampleCode"
        },
        {
            "head": "generate method code sample",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "generate method code sample content",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodInterceptorGenerator#generate(ClassEmitter,Context,List)",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "related concept interpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "related concept interpretation content",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodInterceptorGenerator#generate(ClassEmitter,Context,List)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "design principle interpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "have",
            "tail": "design principle interpretation content",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodInterceptorGenerator#superHelper(CodeEmitter,MethodInfo,Context)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "handle abstract method invocation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodInterceptorGenerator#superHelper(CodeEmitter,MethodInfo,Context)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "method must not be abstract",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodInterceptorGenerator#superHelper(CodeEmitter,MethodInfo,Context)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "invoking super method",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodInterceptorGenerator#superHelper(CodeEmitter,MethodInfo,Context)",
            "head_type": "method",
            "relation": "have",
            "tail": "load this object and invoke method with arguments",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodInterceptorGenerator#superHelper(CodeEmitter,MethodInfo,Context)",
            "head_type": "method",
            "relation": "have",
            "tail": "related to method invocation and code generation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodInterceptorGenerator#superHelper(CodeEmitter,MethodInfo,Context)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle of handling method invocation in proxy classes",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodInterceptorGenerator#superHelper(CodeEmitter,MethodInfo,Context)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.proxy.MethodInterceptorGenerator",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodInterceptorGenerator#generateStatic(CodeEmitter,Context,List)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "generateStatic",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodInterceptorGenerator#generateStatic(CodeEmitter,Context,List)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodInterceptorGenerator#generateStatic(CodeEmitter,Context,List)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "Context",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodInterceptorGenerator#generateStatic(CodeEmitter,Context,List)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "List",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodInterceptorGenerator#generateStatic(CodeEmitter,Context,List)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "relatedConceptInterpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "The generateStatic method is used to generate static code for method interception in CGLIB. It uses CodeEmitter to emit bytecode, Context to maintain the state, and a List of methods to be intercepted. The method creates static blocks of code that initialize method proxies for the given methods.",
            "tail_type": "string"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodInterceptorGenerator#generateStatic(CodeEmitter,Context,List)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "designPrincipleInterpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "have",
            "tail": "The design principle behind generateStatic is to facilitate the creation of dynamic proxies for method interception. It leverages CGLIB's CodeEmitter to generate efficient bytecode at runtime, ensuring that the method calls are intercepted and handled appropriately without the overhead of reflection.",
            "tail_type": "string"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodInterceptorGenerator#generateStatic(CodeEmitter,Context,List)",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "java\npackage com.example;\nimport org.springframework.cglib.proxy.MethodInterceptorGenerator;\nimport org.springframework.cglib.proxy.CodeEmitter;\nimport org.springframework.cglib.proxy.Context;\nimport java.util.List;\nimport java.lang.reflect.Method;\n\nclass Example {\n    public static void main(String[] args) throws Exception {\n        // Assuming CodeEmitter, Context, and List<Method> are properly initialized\n        CodeEmitter e = new CodeEmitter();\n        Context context = new Context();\n        List<Method> methods = List.of(Example.class.getDeclaredMethods());\n        \n        MethodInterceptorGenerator generator = new MethodInterceptorGenerator();\n        generator.generateStatic(e, context, methods);\n    }\n}\n",
            "tail_type": "string"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodInterceptorGenerator#generateFindProxy(ClassEmitter,Map)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "generateFindProxy",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodInterceptorGenerator#generateFindProxy(ClassEmitter,Map)",
            "head_type": "method",
            "relation": "have",
            "tail": "generateFindProxySampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "generateFindProxySampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "generateFindProxySampleCodeContent",
            "tail_type": "useSampleCodeContent"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "create MethodProxy",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "invoke original method",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "invoke super method",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "find MethodProxy",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "get method signature",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "get super method name",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "get super method index",
            "tail_type": "apiFunction"
        },
        {
            "head": "create MethodProxy",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "must be used internally by Enhancer",
            "tail_type": "useConstraint"
        },
        {
            "head": "invoke original method",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "invoking methods on different objects of the same type",
            "tail_type": "useScenario"
        },
        {
            "head": "invoke super method",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "invoking original (super) methods on the specified object",
            "tail_type": "useScenario"
        },
        {
            "head": "find MethodProxy",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "finding MethodProxy instances for intercepted methods",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy",
            "head_type": "class",
            "relation": "have",
            "tail": "related to Enhancer and MethodInterceptor",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy",
            "head_type": "class",
            "relation": "have",
            "tail": "designed for internal use within Enhancer",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy",
            "head_type": "class",
            "relation": "have",
            "tail": "sample code for creating a MethodProxy",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.reflect.FastMethod",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy#create(Class,Class,String,String,String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "create MethodProxy",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy#create(Class,Class,String,String,String)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "For internal use by Enhancer only",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy#create(Class,Class,String,String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "Similar functionality in FastMethod class",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy#create(Class,Class,String,String,String)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.reflect.FastMethod",
            "tail_type": "class"
        },
        {
            "head": "create MethodProxy",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Creating a MethodProxy object",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy#init()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "volatile invariant",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy#init()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "double-checked locking",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy#init()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "Java version 1.5 or above",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy#init()",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "relatedConceptInterpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "associated_with",
            "tail": "volatile invariant",
            "tail_type": "apiFunction"
        },
        {
            "head": "relatedConceptInterpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "associated_with",
            "tail": "double-checked locking",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy#init()",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "designPrincipleInterpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "associated_with",
            "tail": "thread safety",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy#init()",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy#helper(CreateInfo,Class)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "generate FastClass instance",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy#helper(CreateInfo,Class)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "CreateInfo",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy#helper(CreateInfo,Class)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "Class",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy#helper(CreateInfo,Class)",
            "head_type": "method",
            "relation": "have",
            "tail": "generate FastClass instance sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "generate FastClass instance sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "private static FastClass helper(CreateInfo ci, Class type) {\n    FastClass.Generator g = new FastClass.Generator();\n    g.setType(type);\n    // SPRING PATCH BEGIN\n    g.setContextClass(type);\n    // SPRING PATCH END\n    g.setClassLoader(ci.c2.getClassLoader());\n    g.setNamingPolicy(ci.namingPolicy);\n    g.setStrategy(ci.strategy);\n    g.setAttemptLoad(ci.attemptLoad);\n    return g.create();\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy#getSignature()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getSignature",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy#getSignature()",
            "head_type": "method",
            "relation": "have",
            "tail": "Return the signature of the proxied method.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.proxy.MethodProxy#getSignature()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getSuperName()",
            "tail_type": "apiFunction"
        },
        {
            "head": "getSuperName()",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Return the name of the synthetic method created by CGLIB which is used by invokeSuper to invoke the superclass (non-intercepted) method implementation. The parameter types are the same as the proxied method.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy",
            "head_type": "class",
            "relation": "have",
            "tail": "Return the name of the synthetic method created by CGLIB which is used by invokeSuper to invoke the superclass (non-intercepted) method implementation. The parameter types are the same as the proxied method.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy",
            "head_type": "class",
            "relation": "have",
            "tail": "The synthetic method is used to invoke the superclass method implementation without interception. It has the same parameter types as the proxied method.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "getSuperName()",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "The synthetic method is used to invoke the superclass method implementation without interception. It has the same parameter types as the proxied method.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy",
            "head_type": "class",
            "relation": "have",
            "tail": "public String getSuperName() { return sig2.getName(); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getSuperName()",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "public String getSuperName() { return sig2.getName(); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getSuperIndex()",
            "tail_type": "apiFunction"
        },
        {
            "head": "getSuperIndex()",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Return the FastClass method index for the method used by invokeSuper",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "getSuperIndex()",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "This index uniquely identifies the method within the generated proxy, and therefore can be useful to reference external metadata",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "getSuperIndex()",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "public int getSuperIndex() {\n    init();\n    return fastClassInfo.i2;\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.reflect.FastClass",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy#getFastClass()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getFastClass",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy#getFastClass()",
            "head_type": "method",
            "relation": "have",
            "tail": "For testing",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy#getFastClass()",
            "head_type": "method",
            "relation": "have",
            "tail": "For testing",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy#getFastClass()",
            "head_type": "method",
            "relation": "have",
            "tail": "For testing",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy#getSuperFastClass()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getSuperFastClass",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy#getSuperFastClass()",
            "head_type": "method",
            "relation": "have",
            "tail": "For testing",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy#getSuperFastClass()",
            "head_type": "method",
            "relation": "have",
            "tail": "package com.example;\n\nimport org.springframework.cglib.proxy.MethodProxy;\n\npublic class TestClass {\n    public void testMethod() {\n        MethodProxy proxy = null; // Placeholder for actual MethodProxy instance\n        proxy.getSuperFastClass();\n    }\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy#getSuperFastClass()",
            "head_type": "method",
            "relation": "have",
            "tail": "This method is used for testing purposes within the Spring framework.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy#getSuperFastClass()",
            "head_type": "method",
            "relation": "have",
            "tail": "The design principle behind this method is to facilitate unit testing by providing a way to access the fast class information.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy#find(Class,Signature)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "find MethodProxy for method interception",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy#find(Class,Signature)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "IllegalArgumentException if the Class was not created by Enhancer or does not use a MethodInterceptor",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy#find(Class,Signature)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "intercepting method with given signature",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy#find(Class,Signature)",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for finding MethodProxy",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy#find(Class,Signature)",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation for MethodProxy",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy#find(Class,Signature)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation for MethodProxy",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy#find(Class,Signature)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.proxy.MethodInterceptor",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy#find(Class,Signature)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.proxy.MethodInterceptorGenerator",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy#invoke(Object,Object[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "invoke original method",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy#invoke(Object,Object[])",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "compatible object type",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy#invoke(Object,Object[])",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "different object of the same type",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy#invoke(Object,Object[])",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for invoking original method",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy#invoke(Object,Object[])",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation for method invocation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy#invoke(Object,Object[])",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation for method invocation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy#invoke(Object,Object[])",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "MethodInterceptor#intercept",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy#invokeSuper(Object,Object[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "invokeSuper",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy#invokeSuper(Object,Object[])",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "obj must be the object passed as the first argument to the MethodInterceptor",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy#invokeSuper(Object,Object[])",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "args types must be compatible",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy#invokeSuper(Object,Object[])",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy#invokeSuper(Object,Object[])",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy#invokeSuper(Object,Object[])",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.MethodProxy#invokeSuper(Object,Object[])",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "MethodInterceptor",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.FastClassInfo",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "proxy object creation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.FastClassInfo",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "method invocation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.FastClassInfo",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "property access",
            "tail_type": "apiFunction"
        },
        {
            "head": "proxy object creation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "Complete sample code for creating a proxy object using FastClassInfo",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.FastClassInfo",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "relatedConceptInterpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "Explanation of related concepts such as CGLIB, dynamic proxies, and reflection",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.FastClassInfo",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "designPrincipleInterpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "have",
            "tail": "Explanation of design principles behind FastClassInfo, focusing on performance optimization and reduced reflection overhead",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.CreateInfo",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "proxy creation",
            "tail_type": "apiFunction"
        },
        {
            "head": "proxy creation",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "dynamic proxy generation",
            "tail_type": "useScenario"
        },
        {
            "head": "proxy creation",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "naming policy",
            "tail_type": "useConstraint"
        },
        {
            "head": "proxy creation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "proxy creation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "proxy creation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.CreateInfo",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "AbstractClassGenerator",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.Mixin",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "create mixin",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.Mixin",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "create interface mixin",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.Mixin",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "create bean mixin",
            "tail_type": "apiFunction"
        },
        {
            "head": "create mixin",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "combine multiple objects into one",
            "tail_type": "useScenario"
        },
        {
            "head": "create interface mixin",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "finer control over the generated instance",
            "tail_type": "useScenario"
        },
        {
            "head": "create bean mixin",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "create a bean mixin",
            "tail_type": "useScenario"
        },
        {
            "head": "create mixin",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Mixin.create(Object[] delegates)",
            "tail_type": "useSampleCode"
        },
        {
            "head": "create interface mixin",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Mixin.create(Class[] interfaces, Object[] delegates)",
            "tail_type": "useSampleCode"
        },
        {
            "head": "create bean mixin",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Mixin.createBean(ClassLoader loader, Object[] beans)",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.Mixin",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.Mixin",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.Mixin#newInstance(Object[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "create new instance with delegates",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.Mixin#newInstance(Object[])",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.Mixin#newInstance(Object[])",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.Mixin#newInstance(Object[])",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.Mixin#create(Object[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "create an interface mixin",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.Mixin#create(Object[])",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "For finer control over the generated instance, use a new instance of <code>Mixin</code> instead of this static method.",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.proxy.Mixin#create(Object[])",
            "head_type": "method",
            "relation": "have",
            "tail": "Helper method to create an interface mixin. For finer control over the generated instance, use a new instance of <code>Mixin</code> instead of this static method.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "Mixin",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.proxy.Mixin#create(Object[])",
            "tail_type": "method"
        },
        {
            "head": "Mixin",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "create an interface mixin",
            "tail_type": "apiFunction"
        },
        {
            "head": "Mixin",
            "head_type": "class",
            "relation": "have",
            "tail": "Helper method to create an interface mixin. For finer control over the generated instance, use a new instance of <code>Mixin</code> instead of this static method.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "Mixin",
            "head_type": "class",
            "relation": "have",
            "tail": "use a new instance of <code>Mixin</code> instead of this static method.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "Mixin",
            "head_type": "class",
            "relation": "have",
            "tail": "public static Mixin create(Object[] delegates) {\n    Generator gen = new Generator();\n    gen.setDelegates(delegates);\n    return gen.create();\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.Mixin#create(Class[],Object[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "create an interface mixin",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.Mixin#create(Class[],Object[])",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "For finer control over the generated instance, use a new instance of <code>Mixin</code> instead of this static method.",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.proxy.Mixin#create(Class[],Object[])",
            "head_type": "method",
            "relation": "have",
            "tail": "Helper method to create an interface mixin. For finer control over the generated instance, use a new instance of <code>Mixin</code> instead of this static method.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "Mixin",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.proxy.Mixin#create(Class[],Object[])",
            "tail_type": "method"
        },
        {
            "head": "Mixin",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "create an interface mixin",
            "tail_type": "apiFunction"
        },
        {
            "head": "Mixin",
            "head_type": "class",
            "relation": "have",
            "tail": "Helper method to create an interface mixin. For finer control over the generated instance, use a new instance of <code>Mixin</code> instead of this static method.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "Mixin",
            "head_type": "class",
            "relation": "have",
            "tail": "For finer control over the generated instance, use a new instance of <code>Mixin</code> instead of this static method.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "Mixin",
            "head_type": "class",
            "relation": "have",
            "tail": "package com.healthMgr.common.email; import java.xxxx; public class Mixin { // specific code }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.Mixin#createBean(Object[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "createBean",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.Mixin#createBean(Object[])",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "Mixin",
            "tail_type": "class"
        },
        {
            "head": "Mixin",
            "head_type": "class",
            "relation": "have",
            "tail": "org.springframework.cglib.proxy.Mixin",
            "tail_type": "class"
        },
        {
            "head": "createBean",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "public static Mixin createBean(Object[] beans) {\n    return createBean(null, beans);\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.Mixin#createBean(ClassLoader,Object[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "create a bean mixin",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.Mixin#createBean(ClassLoader,Object[])",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "For finer control over the generated instance, use a new instance of <code>Mixin</code> instead of this static method.",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.proxy.Mixin#createBean(ClassLoader,Object[])",
            "head_type": "method",
            "relation": "have",
            "tail": "Helper method to create a bean mixin. For finer control over the generated instance, use a new instance of <code>Mixin</code> instead of this static method.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "Mixin",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.proxy.Mixin#createBean(ClassLoader,Object[])",
            "tail_type": "method"
        },
        {
            "head": "Mixin",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "create",
            "tail_type": "apiFunction"
        },
        {
            "head": "Mixin",
            "head_type": "class",
            "relation": "have",
            "tail": "Helper method to create a bean mixin. For finer control over the generated instance, use a new instance of <code>Mixin</code> instead of this static method.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.Mixin",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getClasses",
            "tail_type": "apiFunction"
        },
        {
            "head": "getClasses",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "Mixin",
            "tail_type": "class"
        },
        {
            "head": "getClasses",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "sampleCode",
            "tail_type": "sampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.Mixin#route(Object[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getRoute",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.Mixin#route(Object[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "route",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.Mixin#route(Object[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "createKey",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.Mixin#route(Object[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "cacheRoute",
            "tail_type": "apiFunction"
        },
        {
            "head": "getRoute",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "route",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "createKey",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "cacheRoute",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.Mixin#route(Object[])",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.Mixin#route(Object[])",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.Mixin",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.proxy.Mixin#route(Object[])",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.proxy.MixinKey",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "newInstance",
            "tail_type": "apiFunction"
        },
        {
            "head": "newInstance",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "newInstance",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "newInstance",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.MixinKey#newInstance(int,String[],int[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "create instance with mixed class types",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.MixinKey#newInstance(int,String[],int[])",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "style parameter must be valid",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.proxy.MixinKey#newInstance(int,String[],int[])",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "dynamic proxy creation",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.proxy.MixinKey#newInstance(int,String[],int[])",
            "head_type": "method",
            "relation": "have",
            "tail": "related to dynamic proxy generation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.MixinKey#newInstance(int,String[],int[])",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle of flexibility and reusability",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.MixinKey#newInstance(int,String[],int[])",
            "head_type": "method",
            "relation": "have",
            "tail": "public Object newInstance(int style, String[] classes, int[] route) { /* implementation code */ }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.MixinKey",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.proxy.MixinKey#newInstance(int,String[],int[])",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.proxy.Generator",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "lazy loading",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.Generator",
            "head_type": "class",
            "relation": "constrained_by",
            "tail": "circular aliases are prohibited",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.proxy.Generator",
            "head_type": "class",
            "relation": "applied_to",
            "tail": "multiple aliases for a single name",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.proxy.Generator",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.Generator",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.Generator",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.core.SimpleAliasRegistryTests",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.Generator#getDefaultClassLoader()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getDefaultClassLoader",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.Generator#getDefaultClassLoader()",
            "head_type": "method",
            "relation": "have",
            "tail": "Returns the default class loader",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.Generator#getDefaultClassLoader()",
            "head_type": "method",
            "relation": "have",
            "tail": "The method returns the class loader of the first class in the array",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.Generator#getDefaultClassLoader()",
            "head_type": "method",
            "relation": "have",
            "tail": "package com.example;\n\nimport org.springframework.cglib.proxy.Generator;\n\npublic class Main {\n    public static void main(String[] args) {\n        Generator generator = new Generator();\n        ClassLoader defaultClassLoader = generator.getDefaultClassLoader();\n        System.out.println(\"Default ClassLoader: \" + defaultClassLoader);\n    }\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.Generator#getProtectionDomain()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getProtectionDomain",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.Generator#getProtectionDomain()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "ReflectUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.Generator#getProtectionDomain()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "ProtectionDomain",
            "tail_type": "class"
        },
        {
            "head": "getProtectionDomain",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "getProtectionDomain is used to obtain the protection domain of the first class in the array.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "ReflectUtils",
            "head_type": "class",
            "relation": "have",
            "tail": "ReflectUtils is a utility class in Spring's CGLIB module that provides reflection-related operations.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "ProtectionDomain",
            "head_type": "class",
            "relation": "have",
            "tail": "ProtectionDomain is a Java class that represents a domain of protection, which includes a set of permissions and a classifier.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "getProtectionDomain",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "The method leverages ReflectUtils to fetch the protection domain, showcasing a design principle of utilizing utility classes for modular functionality.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.Generator#setStyle(int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "setStyle",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.Generator#setStyle(int)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "style value must be one of STYLE_INTERFACES, STYLE_BEANS, STYLE_EVERYTHING",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.proxy.Generator#setStyle(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "setStyle allows setting the mixin style for proxy generation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.Generator#setStyle(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "setStyle ensures the proxy adheres to specified style constraints",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.Generator#setStyle(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "public void setStyle(int style) {\n    switch(style) {\n        case STYLE_INTERFACES:\n        case STYLE_BEANS:\n        case STYLE_EVERYTHING:\n            this.style = style;\n            break;\n        default:\n            throw new IllegalArgumentException(\"Unknown mixin style: \" + style);\n    }\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.Generator#setClasses(Class[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Setting classes for proxy generation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.Generator#setClasses(Class[])",
            "head_type": "method",
            "relation": "have",
            "tail": "Set classes for proxy generation",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.Generator#setClasses(Class[])",
            "head_type": "method",
            "relation": "have",
            "tail": "Related to dynamic proxy generation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.Generator#setClasses(Class[])",
            "head_type": "method",
            "relation": "have",
            "tail": "Design principle of flexibility in proxy generation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.Generator#setDelegates(Object[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "setting delegates",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.Generator#setDelegates(Object[])",
            "head_type": "method",
            "relation": "have",
            "tail": "This method is used to set delegates for the proxy object generated by the Generator class.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.Generator#setDelegates(Object[])",
            "head_type": "method",
            "relation": "have",
            "tail": "The design principle behind this method is to provide flexibility in defining the behavior of the proxy object by allowing different delegates to be set.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.Generator#setDelegates(Object[])",
            "head_type": "method",
            "relation": "have",
            "tail": "public void setDelegates(Object[] delegates) {\n    this.delegates = delegates;\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.Generator#create()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Mixin creation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.Generator#create()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "classes or delegates must be set",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.proxy.Generator#create()",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "creation of dynamic proxies",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.proxy.Generator#create()",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for Mixin creation",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.Generator#create()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.proxy.Mixin",
            "tail_type": "class"
        },
        {
            "head": "Mixin creation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "related concept interpretation for Mixin creation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "Mixin creation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "design principle interpretation for Mixin creation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.Generator#generateClass(ClassVisitor)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "generateClass",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.Generator#generateClass(ClassVisitor)",
            "head_type": "method",
            "relation": "have",
            "tail": "generateClassSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "generateClassSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "generateClassSampleCodeContent",
            "tail_type": "useSampleCodeContent"
        },
        {
            "head": "org.springframework.cglib.proxy.Generator#firstInstance(Class)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "instance generation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.Generator#firstInstance(Class)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "Mixin",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.Generator#firstInstance(Class)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "ReflectUtils",
            "tail_type": "class"
        },
        {
            "head": "Mixin",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "ReflectUtils",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "instance generation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.Generator#nextInstance(Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "generate instance",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.Generator#nextInstance(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.cglib.proxy.Generator#nextInstance(Object) sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.Generator#nextInstance(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation for org.springframework.cglib.proxy.Generator#nextInstance(Object)",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.Generator#nextInstance(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation for org.springframework.cglib.proxy.Generator#nextInstance(Object)",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.Generator#nextInstance(Object)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "Mixin",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.Generator#nextInstance(Object)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "delegates",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.Route",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "interface aggregation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.Route",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "class and method routing",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.Route",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "dynamic proxy generation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.Route",
            "head_type": "class",
            "relation": "constrained_by",
            "tail": "type compatibility",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.proxy.Route",
            "head_type": "class",
            "relation": "applied_to",
            "tail": "AOP proxying",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.proxy.Route",
            "head_type": "class",
            "relation": "have",
            "tail": "org.springframework.cglib.proxy.Route is used to manage the route mapping of classes and interfaces in a dynamic proxying scenario. It ensures that the correct delegate instance is invoked for a given interface. This is particularly useful in AOP proxying where multiple interfaces need to be proxied through a single proxy object.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.Route",
            "head_type": "class",
            "relation": "have",
            "tail": "The design principle behind org.springframework.cglib.proxy.Route is to provide a flexible and efficient way to map interfaces to their respective delegate instances. This is achieved by maintaining a mapping of interfaces to indices and an array of delegate classes. This principle ensures that the correct delegate is invoked for each interface, which is crucial for dynamic proxying scenarios.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.Route",
            "head_type": "class",
            "relation": "have",
            "tail": "package com.healthMgr.common.email;\nimport java.util.*;\nimport org.springframework.cglib.proxy.*;\n\npublic class RouteExample {\n    public static void main(String[] args) {\n        Object[] delegates = {new ServiceImpl1(), new ServiceImpl2()};\n        Route route = new Route(delegates);\n        \n        // Assuming the Route class has a method to get the delegate for a given interface\n        Service service = (Service) route.getDelegate(Service.class);\n        service.execute();\n    }\n}\n\nclass ServiceImpl1 implements Service {\n    public void execute() {\n        System.out.println(\"ServiceImpl1\");\n    }\n}\n\nclass ServiceImpl2 implements Service {\n    public void execute() {\n        System.out.println(\"ServiceImpl2\");\n    }\n}\n\ninterface Service {\n    void execute();\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "MixinBeanEmitter",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "bean property method retrieval",
            "tail_type": "apiFunction"
        },
        {
            "head": "MixinBeanEmitter",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "interface retrieval",
            "tail_type": "apiFunction"
        },
        {
            "head": "MixinBeanEmitter",
            "head_type": "class",
            "relation": "have",
            "tail": "bean property method retrieval sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "MixinBeanEmitter",
            "head_type": "class",
            "relation": "have",
            "tail": "interface retrieval sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "MixinBeanEmitter",
            "head_type": "class",
            "relation": "have",
            "tail": "MixinBeanEmitter related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "MixinBeanEmitter",
            "head_type": "class",
            "relation": "have",
            "tail": "MixinBeanEmitter design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "MixinBeanEmitter",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "ReflectUtils",
            "tail_type": "class"
        },
        {
            "head": "MixinBeanEmitter",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "ClassVisitor",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.MixinBeanEmitter#getInterfaces(Class[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getInterfaces",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.MixinBeanEmitter#getInterfaces(Class[])",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.proxy.MixinBeanEmitter",
            "tail_type": "class"
        },
        {
            "head": "getInterfaces",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "org.springframework.cglib.proxy.MixinBeanEmitter#getInterfaces(Class[])",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.MixinBeanEmitter",
            "head_type": "class",
            "relation": "have",
            "tail": "getInterfaces",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.MixinBeanEmitter#getMethods(Class)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getMethods",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.MixinBeanEmitter#getMethods(Class)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "ReflectUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.MixinBeanEmitter#getMethods(Class)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "ReflectUtils.getPropertyMethods",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.proxy.MixinBeanEmitter#getMethods(Class)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "ReflectUtils.getBeanProperties",
            "tail_type": "method"
        },
        {
            "head": "getMethods",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getMethods",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "getMethods",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "MixinEmitter",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "lazy loading",
            "tail_type": "apiFunction"
        },
        {
            "head": "MixinEmitter",
            "head_type": "class",
            "relation": "constrained_by",
            "tail": "circular aliases are prohibited",
            "tail_type": "useConstraint"
        },
        {
            "head": "MixinEmitter",
            "head_type": "class",
            "relation": "applied_to",
            "tail": "multiple aliases for a single name",
            "tail_type": "useScenario"
        },
        {
            "head": "MixinEmitter",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "MixinEmitter",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "MixinEmitter",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.proxy.MixinEmitter",
            "tail_type": "class"
        },
        {
            "head": "MixinEmitter",
            "head_type": "class",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.MixinEmitter#getInterfaces(Class[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getInterfaces",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.MixinEmitter#getInterfaces(Class[])",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.proxy.MixinEmitter",
            "tail_type": "class"
        },
        {
            "head": "getInterfaces",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "getInterfaces(Class[])",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getInterfaces(Class[])",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.cglib.proxy.MixinEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.MixinEmitter#getMethods(Class)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getMethods",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.MixinEmitter#getMethods(Class)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "MixinEmitter",
            "tail_type": "class"
        },
        {
            "head": "MixinEmitter",
            "head_type": "class",
            "relation": "have",
            "tail": "getMethods",
            "tail_type": "apiFunction"
        },
        {
            "head": "getMethods",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "org.springframework.cglib.proxy.MixinEmitter#getMethods(Class)",
            "tail_type": "useSampleCode"
        },
        {
            "head": "MixinEverythingEmitter",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "emitting mixins",
            "tail_type": "apiFunction"
        },
        {
            "head": "MixinEverythingEmitter",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "interface aggregation",
            "tail_type": "apiFunction"
        },
        {
            "head": "MixinEverythingEmitter",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "method aggregation",
            "tail_type": "apiFunction"
        },
        {
            "head": "MixinEverythingEmitter",
            "head_type": "class",
            "relation": "constrained_by",
            "tail": "class array as input",
            "tail_type": "useConstraint"
        },
        {
            "head": "MixinEverythingEmitter",
            "head_type": "class",
            "relation": "applied_to",
            "tail": "class proxy generation",
            "tail_type": "useScenario"
        },
        {
            "head": "MixinEverythingEmitter",
            "head_type": "class",
            "relation": "have",
            "tail": "emitting mixins sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "MixinEverythingEmitter",
            "head_type": "class",
            "relation": "have",
            "tail": "interface aggregation sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "MixinEverythingEmitter",
            "head_type": "class",
            "relation": "have",
            "tail": "method aggregation sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "MixinEverythingEmitter",
            "head_type": "class",
            "relation": "have",
            "tail": "related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "MixinEverythingEmitter",
            "head_type": "class",
            "relation": "have",
            "tail": "design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "MixinEverythingEmitter",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "ClassVisitor",
            "tail_type": "class"
        },
        {
            "head": "MixinEverythingEmitter",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "ReflectUtils",
            "tail_type": "class"
        },
        {
            "head": "MixinEverythingEmitter",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "CollectionUtils",
            "tail_type": "class"
        },
        {
            "head": "MixinEverythingEmitter",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "RejectModifierPredicate",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.MixinEverythingEmitter#getInterfaces(Class[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "get all interfaces of given classes",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.MixinEverythingEmitter#getInterfaces(Class[])",
            "head_type": "method",
            "relation": "have",
            "tail": "get all interfaces of given classes",
            "tail_type": "useSampleCode"
        },
        {
            "head": "get all interfaces of given classes",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.cglib.proxy.MixinEverythingEmitter#getInterfaces(Class[])",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.proxy.MixinEverythingEmitter#getMethods(Class)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getMethods",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.MixinEverythingEmitter#getMethods(Class)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.proxy.MixinEverythingEmitter",
            "tail_type": "class"
        },
        {
            "head": "getMethods",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "getMethods(Class type) { List methods = new ArrayList(Arrays.asList(type.getMethods())); CollectionUtils.filter(methods, new RejectModifierPredicate(Modifier.FINAL | Modifier.STATIC)); return (Method[]) methods.toArray(new Method[methods.size()]); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getMethods(Class type) { List methods = new ArrayList(Arrays.asList(type.getMethods())); CollectionUtils.filter(methods, new RejectModifierPredicate(Modifier.FINAL | Modifier.STATIC)); return (Method[]) methods.toArray(new Method[methods.size()]); }",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "RejectModifierPredicate",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "RejectModifierPredicate",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "The RejectModifierPredicate is used to filter methods based on their modifiers. In this case, it filters out methods that are either final or static.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.NoOp",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "thread-safe singleton instance",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.NoOp",
            "head_type": "class",
            "relation": "have",
            "tail": "Methods using this Enhancer callback will delegate directly to the default (super) implementation in the base class.",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.proxy.NoOp",
            "head_type": "class",
            "relation": "have",
            "tail": "A thread-safe singleton instance of the NoOp callback.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.NoOp",
            "head_type": "class",
            "relation": "have",
            "tail": "Design Principle: The NoOp class is designed to provide a thread-safe singleton instance that acts as a no-operation callback, ensuring that methods using this callback will directly delegate to the default (super) implementation in the base class.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.NoOp",
            "head_type": "class",
            "relation": "have",
            "tail": "public static final NoOp INSTANCE = new NoOp() {};",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.NoOpGenerator",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "generate",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.NoOpGenerator",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "generateStatic",
            "tail_type": "apiFunction"
        },
        {
            "head": "generate",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "generate sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "generateStatic",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "generateStatic sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.NoOpGenerator",
            "head_type": "class",
            "relation": "have",
            "tail": "related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.NoOpGenerator",
            "head_type": "class",
            "relation": "have",
            "tail": "design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.NoOpGenerator#generate(ClassEmitter,Context,List)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "generate public methods",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.NoOpGenerator#generate(ClassEmitter,Context,List)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "methods must be public or protected",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.proxy.NoOpGenerator#generate(ClassEmitter,Context,List)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "generate public methods for classes",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.proxy.NoOpGenerator#generate(ClassEmitter,Context,List)",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for generating public methods",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.NoOpGenerator#generate(ClassEmitter,Context,List)",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation for generating public methods",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.NoOpGenerator#generate(ClassEmitter,Context,List)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation for generating public methods",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.NoOpGenerator#generate(ClassEmitter,Context,List)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.proxy.NoOpGenerator",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.NoOpGenerator#generateStatic(CodeEmitter,Context,List)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "generateStatic",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.NoOpGenerator#generateStatic(CodeEmitter,Context,List)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.proxy.NoOpGenerator",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.NoOpGenerator",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.NoOpGenerator",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.Proxy",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "proxyCreation",
            "tail_type": "apiFunction"
        },
        {
            "head": "proxyCreation",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "dynamicProxyCreation",
            "tail_type": "useScenario"
        },
        {
            "head": "proxyCreation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "completeProxyCreationExample",
            "tail_type": "useSampleCode"
        },
        {
            "head": "proxyCreation",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "proxyInterfaceConstraint",
            "tail_type": "useConstraint"
        },
        {
            "head": "proxyCreation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "proxyCreationExplanation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "proxyCreation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "designPrinciplesOfProxy",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.Proxy",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "java.lang.reflect.Proxy",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.Proxy",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "UndeclaredThrowableException",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.Proxy",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getInvocationHandler",
            "tail_type": "apiFunction"
        },
        {
            "head": "getInvocationHandler",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "IllegalArgumentException",
            "tail_type": "useConstraint"
        },
        {
            "head": "getInvocationHandler",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "Object is not a proxy",
            "tail_type": "useConstraint"
        },
        {
            "head": "getInvocationHandler",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "ProxyImpl",
            "tail_type": "class"
        },
        {
            "head": "getInvocationHandler",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Proxy",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.Proxy",
            "head_type": "class",
            "relation": "have",
            "tail": "getInvocationHandler",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.Proxy",
            "head_type": "class",
            "relation": "have",
            "tail": "ProxyImpl",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.Proxy",
            "head_type": "class",
            "relation": "have",
            "tail": "Proxy",
            "tail_type": "class"
        },
        {
            "head": "getInvocationHandler",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "InvocationHandler",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.Proxy",
            "head_type": "class",
            "relation": "have",
            "tail": "InvocationHandler",
            "tail_type": "class"
        },
        {
            "head": "getInvocationHandler",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "IllegalArgumentException",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.Proxy",
            "head_type": "class",
            "relation": "have",
            "tail": "IllegalArgumentException",
            "tail_type": "class"
        },
        {
            "head": "getInvocationHandler",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Object is not a proxy",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.Proxy",
            "head_type": "class",
            "relation": "have",
            "tail": "Object is not a proxy",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getInvocationHandler",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "ProxyImpl",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.proxy.Proxy",
            "head_type": "class",
            "relation": "have",
            "tail": "ProxyImpl",
            "tail_type": "useScenario"
        },
        {
            "head": "getInvocationHandler",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Proxy",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.proxy.Proxy",
            "head_type": "class",
            "relation": "have",
            "tail": "Proxy",
            "tail_type": "useScenario"
        },
        {
            "head": "getInvocationHandler",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "InvocationHandler",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.proxy.Proxy",
            "head_type": "class",
            "relation": "have",
            "tail": "InvocationHandler",
            "tail_type": "useScenario"
        },
        {
            "head": "getInvocationHandler",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "IllegalArgumentException",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.proxy.Proxy",
            "head_type": "class",
            "relation": "have",
            "tail": "IllegalArgumentException",
            "tail_type": "useScenario"
        },
        {
            "head": "getInvocationHandler",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Object is not a proxy",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.proxy.Proxy",
            "head_type": "class",
            "relation": "have",
            "tail": "Object is not a proxy",
            "tail_type": "useScenario"
        },
        {
            "head": "getInvocationHandler",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "ProxyImpl",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.Proxy",
            "head_type": "class",
            "relation": "have",
            "tail": "ProxyImpl",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "getInvocationHandler",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Proxy",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.Proxy",
            "head_type": "class",
            "relation": "have",
            "tail": "Proxy",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "getInvocationHandler",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "InvocationHandler",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.Proxy",
            "head_type": "class",
            "relation": "have",
            "tail": "InvocationHandler",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "getInvocationHandler",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "IllegalArgumentException",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.Proxy",
            "head_type": "class",
            "relation": "have",
            "tail": "IllegalArgumentException",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "getInvocationHandler",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Object is not a proxy",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.Proxy",
            "head_type": "class",
            "relation": "have",
            "tail": "Object is not a proxy",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "getInvocationHandler",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "ProxyImpl",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.Proxy",
            "head_type": "class",
            "relation": "have",
            "tail": "ProxyImpl",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "getInvocationHandler",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Proxy",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.Proxy",
            "head_type": "class",
            "relation": "have",
            "tail": "Proxy",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "getInvocationHandler",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "InvocationHandler",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.Proxy",
            "head_type": "class",
            "relation": "have",
            "tail": "InvocationHandler",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "getInvocationHandler",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "IllegalArgumentException",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.Proxy",
            "head_type": "class",
            "relation": "have",
            "tail": "IllegalArgumentException",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "getInvocationHandler",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Object is not a proxy",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.Proxy",
            "head_type": "class",
            "relation": "have",
            "tail": "Object is not a proxy",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.Proxy",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getProxyClass",
            "tail_type": "apiFunction"
        },
        {
            "head": "getProxyClass",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "create dynamic proxy class",
            "tail_type": "useScenario"
        },
        {
            "head": "getProxyClass",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "public static Class getProxyClass(ClassLoader loader, Class[] interfaces) {\n    Enhancer e = new Enhancer();\n    e.setSuperclass(ProxyImpl.class);\n    e.setInterfaces(interfaces);\n    e.setCallbackTypes(new Class[] { InvocationHandler.class, NoOp.class });\n    e.setCallbackFilter(BAD_OBJECT_METHOD_FILTER);\n    e.setUseFactory(false);\n    return e.createClass();\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getProxyClass",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "interfaces must be implemented by the proxy class",
            "tail_type": "useConstraint"
        },
        {
            "head": "getProxyClass",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "This method is used to create a dynamic proxy class that implements the specified interfaces. It uses CGLIB's Enhancer to generate the proxy class at runtime.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "getProxyClass",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "The design principle behind this method is to provide a flexible way to create proxy classes at runtime, allowing for dynamic implementation of interfaces. It leverages CGLIB's Enhancer to achieve this, ensuring that the generated proxy class adheres to the specified interfaces and can handle method invocations accordingly.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.Proxy",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.proxy.Enhancer",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.Proxy#isProxyClass(Class)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "check if a class is a proxy class",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.Proxy#isProxyClass(Class)",
            "head_type": "method",
            "relation": "have",
            "tail": "This method checks if the provided class is a proxy class by comparing its superclass to ProxyImpl.class.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.Proxy#isProxyClass(Class)",
            "head_type": "method",
            "relation": "have",
            "tail": "The design principle behind this method is to provide a straightforward way to determine if a given class is a result of proxy generation, which is useful in AOP (Aspect-Oriented Programming) frameworks.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.Proxy#isProxyClass(Class)",
            "head_type": "method",
            "relation": "have",
            "tail": "public static boolean isProxyClass(Class cl) {\n    return cl.getSuperclass().equals(ProxyImpl.class);\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.Proxy#newProxyInstance(ClassLoader,Class[],InvocationHandler)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "create dynamic proxy instance",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.Proxy#newProxyInstance(ClassLoader,Class[],InvocationHandler)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "interfaces must not be null",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.proxy.Proxy#newProxyInstance(ClassLoader,Class[],InvocationHandler)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "AOP (Aspect-Oriented Programming)",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.proxy.Proxy#newProxyInstance(ClassLoader,Class[],InvocationHandler)",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.cglib.proxy.Proxy#newProxyInstance(ClassLoader,Class[],InvocationHandler) sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.Proxy#newProxyInstance(ClassLoader,Class[],InvocationHandler)",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation for org.springframework.cglib.proxy.Proxy#newProxyInstance(ClassLoader,Class[],InvocationHandler)",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.Proxy#newProxyInstance(ClassLoader,Class[],InvocationHandler)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation for org.springframework.cglib.proxy.Proxy#newProxyInstance(ClassLoader,Class[],InvocationHandler)",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.Proxy#newProxyInstance(ClassLoader,Class[],InvocationHandler)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.proxy.Proxy",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.ProxyImpl",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "constructor",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.ProxyImpl",
            "head_type": "class",
            "relation": "constrained_by",
            "tail": "security reason",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.proxy.ProxyImpl",
            "head_type": "class",
            "relation": "have",
            "tail": "constructor for security of isProxyClass",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "constructor",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "constructor for security of isProxyClass",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "constructor",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "security reason",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.proxy.ProxyRefDispatcher",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "loadObject",
            "tail_type": "apiFunction"
        },
        {
            "head": "loadObject",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "every method invocation",
            "tail_type": "useScenario"
        },
        {
            "head": "loadObject",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Object loadObject(Object proxy) throws Exception;",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.ProxyRefDispatcher",
            "head_type": "class",
            "relation": "have",
            "tail": "Dispatching Enhancer callback. This is the same as the Dispatcher except for the addition of an argument which references the proxy object.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.ProxyRefDispatcher",
            "head_type": "class",
            "relation": "have",
            "tail": "The loadObject method is used to return the object which the original method invocation should be dispatched. It is called for every method invocation.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.ProxyRefDispatcher#loadObject(Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "dispatch method invocation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.ProxyRefDispatcher#loadObject(Object)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "every method invocation",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.proxy.ProxyRefDispatcher#loadObject(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "proxy object reference",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.proxy.ProxyRefDispatcher#loadObject(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "object that can invoke the method",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.ProxyRefDispatcher#loadObject(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.ProxyRefDispatcher#loadObject(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.ProxyRefDispatcher#loadObject(Object)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.proxy.ProxyRefDispatcher",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.UndeclaredThrowableException",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "constructor",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.UndeclaredThrowableException",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getUndeclaredThrowable",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.UndeclaredThrowableException",
            "head_type": "class",
            "relation": "constrained_by",
            "tail": "Throwable must be undeclared",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.proxy.UndeclaredThrowableException",
            "head_type": "class",
            "relation": "applied_to",
            "tail": "Proxy usage",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.proxy.UndeclaredThrowableException",
            "head_type": "class",
            "relation": "have",
            "tail": "Used by Proxy as a replacement for java.lang.reflect.UndeclaredThrowableException",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.UndeclaredThrowableException",
            "head_type": "class",
            "relation": "have",
            "tail": "Design principle: Provide a mechanism to handle undeclared throwables in dynamic proxies",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.UndeclaredThrowableException",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "Proxy",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.UndeclaredThrowableException",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "java.lang.reflect.UndeclaredThrowableException",
            "tail_type": "class"
        },
        {
            "head": "constructor",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "public UndeclaredThrowableException(Throwable t) { super(t); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getUndeclaredThrowable",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "public Throwable getUndeclaredThrowable() { return getCause(); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.UndeclaredThrowableException",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getUndeclaredThrowable()",
            "tail_type": "apiFunction"
        },
        {
            "head": "getUndeclaredThrowable()",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "getUndeclaredThrowable() method returns the cause of the exception.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "getUndeclaredThrowable()",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "public Throwable getUndeclaredThrowable() {\n    return getCause();\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.reflect.ConstructorDelegate",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "createConstructorDelegate",
            "tail_type": "apiFunction"
        },
        {
            "head": "createConstructorDelegate",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "constructorDelegateCreation",
            "tail_type": "useScenario"
        },
        {
            "head": "createConstructorDelegate",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "constructorDelegateCreationSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "createConstructorDelegate",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "returnTypeCompatibility",
            "tail_type": "useConstraint"
        },
        {
            "head": "createConstructorDelegate",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "constructorExistence",
            "tail_type": "useConstraint"
        },
        {
            "head": "createConstructorDelegate",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "constructorDelegateCreationExplanation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "createConstructorDelegate",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "designPrincipleExplanation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.reflect.ConstructorDelegate",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.reflect.ConstructorKey",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.reflect.ConstructorDelegate",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.AbstractClassGenerator",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.reflect.ConstructorDelegate",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.util.KeyFactory",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.reflect.ConstructorDelegate#create(Class,Class)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "constructor delegation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.reflect.ConstructorDelegate#create(Class,Class)",
            "head_type": "method",
            "relation": "have",
            "tail": "constructor delegation sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "constructor delegation sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "java\npublic static ConstructorDelegate create(Class targetClass, Class iface) {\n    Generator gen = new Generator();\n    gen.setTargetClass(targetClass);\n    gen.setInterface(iface);\n    return gen.create();\n}\n",
            "tail_type": "code"
        },
        {
            "head": "org.springframework.cglib.reflect.ConstructorDelegate#create(Class,Class)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.reflect.Generator",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.reflect.ConstructorDelegate#create(Class,Class)",
            "head_type": "method",
            "relation": "have",
            "tail": "constructor delegation related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "constructor delegation related concept interpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "Constructor delegation is a technique used in programming to allow one constructor to call another constructor within the same class. This is often used to avoid code duplication when multiple constructors share similar initialization logic.",
            "tail_type": "description"
        },
        {
            "head": "org.springframework.cglib.reflect.ConstructorDelegate#create(Class,Class)",
            "head_type": "method",
            "relation": "have",
            "tail": "constructor delegation design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "constructor delegation design principle interpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "have",
            "tail": "Constructor delegation follows the principle of DRY (Don't Repeat Yourself), aiming to reduce redundancy and promote code reusability. It ensures that common initialization tasks are centralized, making the code more maintainable and easier to understand.",
            "tail_type": "description"
        },
        {
            "head": "org.springframework.cglib.reflect.ConstructorKey",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "newInstance",
            "tail_type": "apiFunction"
        },
        {
            "head": "newInstance",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.reflect.ConstructorKey#newInstance(String,String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "create new instance",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.reflect.ConstructorKey#newInstance(String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "create new instance sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "create new instance sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "package com.example;\nimport org.springframework.cglib.reflect.ConstructorKey;\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        ConstructorKey key = new ConstructorKey(String.class, new String[] {\"declaring\", \"iface\"});\n        Object instance = key.newInstance(\"declaring\", \"iface\");\n        System.out.println(instance);\n    }\n}",
            "tail_type": "code"
        },
        {
            "head": "org.springframework.cglib.reflect.ConstructorKey#newInstance(String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "related concept interpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "This method is used to create a new instance of a class based on the provided constructor key and arguments. It is part of the CGLIB library, which provides powerful and flexible tools for generating and manipulating Java classes at runtime.",
            "tail_type": "description"
        },
        {
            "head": "org.springframework.cglib.reflect.ConstructorKey#newInstance(String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "design principle interpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "have",
            "tail": "This method follows the principle of reflection and dynamic class generation, allowing for the creation of objects without knowing their types at compile time. It leverages the CGLIB library to achieve this, providing a flexible and powerful way to manipulate Java classes at runtime.",
            "tail_type": "description"
        },
        {
            "head": "org.springframework.cglib.reflect.Generator",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "constructor delegation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.reflect.Generator",
            "head_type": "class",
            "relation": "constrained_by",
            "tail": "interface must match target class constructor",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.reflect.Generator",
            "head_type": "class",
            "relation": "applied_to",
            "tail": "creating a constructor delegate for a given interface and target class",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.reflect.Generator",
            "head_type": "class",
            "relation": "have",
            "tail": "sample code for creating a constructor delegate",
            "tail_type": "useSampleCode"
        },
        {
            "head": "constructor delegation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "constructor delegation allows creating a new instance by calling a constructor of the target class",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "constructor delegation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "design principle of constructor delegation is to provide a way to call a constructor of the target class indirectly",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.reflect.Generator",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.reflect.ConstructorDelegate",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.reflect.Generator#setInterface(Class)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Setting Interface",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.reflect.Generator#setInterface(Class)",
            "head_type": "method",
            "relation": "have",
            "tail": "Set Interface Sample Code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.reflect.Generator#setInterface(Class)",
            "head_type": "method",
            "relation": "have",
            "tail": "Related Concept Interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.reflect.Generator#setInterface(Class)",
            "head_type": "method",
            "relation": "have",
            "tail": "Design Principle Interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.reflect.Generator",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.reflect.Generator#setInterface(Class)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.reflect.Generator#setTargetClass(Class)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "setTargetClass",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.reflect.Generator#setTargetClass(Class)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.reflect.Generator",
            "tail_type": "class"
        },
        {
            "head": "setTargetClass",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "org.springframework.cglib.reflect.Generator#setTargetClass(Class)",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.reflect.Generator#setTargetClass(Class)",
            "head_type": "method",
            "relation": "have",
            "tail": "Sets the target class for the generator.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.reflect.Generator#setTargetClass(Class)",
            "head_type": "method",
            "relation": "have",
            "tail": "This method is used to specify the target class for the generator, which is essential for the code generation process.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.reflect.Generator#create()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "createConstructorDelegate",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.reflect.Generator#create()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.reflect.Generator",
            "tail_type": "class"
        },
        {
            "head": "createConstructorDelegate",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "createConstructorDelegateSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "createConstructorDelegate",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "createConstructorDelegateRelatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "createConstructorDelegate",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "createConstructorDelegateDesignPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.reflect.Generator#getDefaultClassLoader()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getDefaultClassLoader",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.reflect.Generator#getDefaultClassLoader()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.reflect.Generator",
            "tail_type": "class"
        },
        {
            "head": "getDefaultClassLoader",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "��取默认类加载器",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.reflect.Generator",
            "head_type": "class",
            "relation": "have",
            "tail": "CGLIB库中的类生成器",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.reflect.Generator",
            "head_type": "class",
            "relation": "have",
            "tail": "设计原则：使用CGLIB进行动态代理生成",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "getDefaultClassLoader",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "使用示例代码",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.reflect.Generator#getProtectionDomain()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getProtectionDomain",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.reflect.Generator#getProtectionDomain()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "ReflectUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.reflect.Generator#getProtectionDomain()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "ProtectionDomain",
            "tail_type": "class"
        },
        {
            "head": "getProtectionDomain",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "getProtectionDomain() Sample Code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getProtectionDomain() Sample Code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "Complete getProtectionDomain() Example",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.reflect.Generator#generateClass(ClassVisitor)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "generateClass",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.reflect.Generator#generateClass(ClassVisitor)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "newInstanceReturnTypeMustMatchTargetClass",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.reflect.Generator#generateClass(ClassVisitor)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "interfaceMustMatchConstructor",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.reflect.Generator#generateClass(ClassVisitor)",
            "head_type": "method",
            "relation": "have",
            "tail": "generateClassSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "generateClassSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "generateClassCompleteExample",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.reflect.Generator#generateClass(ClassVisitor)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.reflect.Generator",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.reflect.Generator#generateClass(ClassVisitor)",
            "head_type": "method",
            "relation": "have",
            "tail": "generateClassRelatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "generateClassRelatedConceptInterpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "generateClassDetailedExplanation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.reflect.Generator#generateClass(ClassVisitor)",
            "head_type": "method",
            "relation": "have",
            "tail": "generateClassDesignPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "generateClassDesignPrincipleInterpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "have",
            "tail": "generateClassDesignPrinciples",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.reflect.Generator#firstInstance(Class)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "ReflectUtils.newInstance(type)",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.reflect.Generator#firstInstance(Class)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "ReflectUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.reflect.Generator#firstInstance(Class)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "Class type",
            "tail_type": "class"
        },
        {
            "head": "ReflectUtils.newInstance(type)",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "ReflectUtils.newInstance(type)",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "ReflectUtils.newInstance(type)",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.reflect.Generator#nextInstance(Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "instance generation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.reflect.Generator#nextInstance(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.cglib.reflect.Generator#nextInstance(Object) returns the provided instance.",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.reflect.Generator#nextInstance(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "This method is used to generate or return the next instance based on the provided object.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.reflect.Generator#nextInstance(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "The design principle behind this method is to provide a straightforward mechanism for instance generation or retrieval, ensuring that the provided instance is returned as-is.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.reflect.FastClass",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "create FastClass instance",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.reflect.FastClass",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "invoke method",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.reflect.FastClass",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "get method information",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.reflect.FastClass",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "get constructor information",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.reflect.FastClass",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "get class name",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.reflect.FastClass",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "get Java class",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.reflect.FastClass",
            "head_type": "class",
            "relation": "constrained_by",
            "tail": "class type must be specified",
            "tail_type": "useConstraint"
        },
        {
            "head": "create FastClass instance",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "class initialization",
            "tail_type": "useScenario"
        },
        {
            "head": "invoke method",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "method execution",
            "tail_type": "useScenario"
        },
        {
            "head": "get method information",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "reflection operations",
            "tail_type": "useScenario"
        },
        {
            "head": "get constructor information",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "object instantiation",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.reflect.FastClass",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.reflect.FastClass",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.reflect.FastClass",
            "head_type": "class",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.reflect.FastClass#create(Class)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "createFastClass",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.reflect.FastClass#create(Class)",
            "head_type": "method",
            "relation": "have",
            "tail": "createFastClassSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "createFastClassSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "createFastClassSampleCodeContent",
            "tail_type": "useSampleCodeContent"
        },
        {
            "head": "org.springframework.cglib.reflect.FastClass#create(ClassLoader,Class)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "createFastClass",
            "tail_type": "apiFunction"
        },
        {
            "head": "createFastClass",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "createFastClassSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "createFastClass",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "classLoaderMustBeValid",
            "tail_type": "useConstraint"
        },
        {
            "head": "createFastClass",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "classTypeMustBeValid",
            "tail_type": "useScenario"
        },
        {
            "head": "createFastClass",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "createFastClassRelatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "createFastClass",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "createFastClassDesignPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.reflect.FastClass#create(ClassLoader,Class)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.reflect.FastClass",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.reflect.FastClass#invoke(String,Class[],Object,Object[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Method Invocation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.reflect.FastClass#invoke(String,Class[],Object,Object[])",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.cglib.reflect.FastClass",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.reflect.FastClass#invoke(String,Class[],Object,Object[])",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.cglib.reflect.FastClass#invoke(int,Object,Object[])",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.reflect.FastClass#invoke(String,Class[],Object,Object[])",
            "head_type": "method",
            "relation": "have",
            "tail": "getindex(String,Class[])",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.reflect.FastClass#invoke(String,Class[],Object,Object[])",
            "head_type": "method",
            "relation": "have",
            "tail": "java.lang.reflect.invocationtargetexception",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.reflect.FastClass#invoke(String,Class[],Object,Object[])",
            "head_type": "method",
            "relation": "have",
            "tail": "java.lang.reflect.invocationtargetexception",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.reflect.FastClass#invoke(String,Class[],Object,Object[])",
            "head_type": "method",
            "relation": "have",
            "tail": "java.lang.reflect.invocationtargetexception",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.reflect.FastClass#invoke(String,Class[],Object,Object[])",
            "head_type": "method",
            "relation": "have",
            "tail": "java.lang.reflect.invocationtargetexception",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.reflect.FastClass#invoke(String,Class[],Object,Object[])",
            "head_type": "method",
            "relation": "have",
            "tail": "java.lang.reflect.invocationtargetexception",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.reflect.FastClass#invoke(String,Class[],Object,Object[])",
            "head_type": "method",
            "relation": "have",
            "tail": "java.lang.reflect.invocationtargetexception",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.reflect.FastClass#newInstance()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "instance creation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.reflect.FastClass#newInstance()",
            "head_type": "method",
            "relation": "have",
            "tail": "This method is used to create a new instance of a class.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.reflect.FastClass#newInstance()",
            "head_type": "method",
            "relation": "have",
            "tail": "This method follows the design principle of encapsulation, providing a straightforward way to create objects.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.reflect.FastClass#newInstance()",
            "head_type": "method",
            "relation": "have",
            "tail": "public Object newInstance() throws InvocationTargetException {\n    return newInstance(getIndex(Constants.EMPTY_CLASS_ARRAY), null);\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.reflect.FastClass#newInstance(Class[],Object[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "instance_creation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.reflect.FastClass#newInstance(Class[],Object[])",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.reflect.FastClass#newInstance(Class[],Object[])",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.reflect.FastClass#newInstance(Class[],Object[])",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        }
    ]
}