{
    "relationships": [
        {
            "head": "org.springframework.cglib.core.HashCodeCustomizer#customize(CodeEmitter,Type)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Customizes calculation of hashcode",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.HashCodeCustomizer#customize(CodeEmitter,Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "Customizes calculation of hashcode",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.HashCodeCustomizer#customize(CodeEmitter,Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "Customizes calculation of hashcode",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.HashCodeCustomizer#customize(CodeEmitter,Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "package com.healthMgr.common.email; import java.util; public class OneClass { boolean customize(CodeEmitter e, Type type) { // specific code } }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.internal.CustomizerRegistry",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "addCustomizer",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.internal.CustomizerRegistry",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getCustomizers",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.internal.CustomizerRegistry",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "createSingleton",
            "tail_type": "apiFunction"
        },
        {
            "head": "addCustomizer",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "customizerTypeConstraint",
            "tail_type": "useConstraint"
        },
        {
            "head": "getCustomizers",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "retrieveCustomizersScenario",
            "tail_type": "useScenario"
        },
        {
            "head": "createSingleton",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "backwardCompatibilityConstraint",
            "tail_type": "useConstraint"
        },
        {
            "head": "createSingleton",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "backwardCompatibilitySampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.internal.CustomizerRegistry",
            "head_type": "class",
            "relation": "have",
            "tail": "customizerRegistryExplanation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.internal.CustomizerRegistry",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrinciplesExplanation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.internal.CustomizerRegistry#add(KeyFactoryCustomizer)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "addCustomizer",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.internal.CustomizerRegistry#add(KeyFactoryCustomizer)",
            "head_type": "method",
            "relation": "have",
            "tail": "addCustomizerSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "addCustomizerSampleCode",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.internal.CustomizerRegistry#add(KeyFactoryCustomizer)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.core.internal.CustomizerRegistry#add(KeyFactoryCustomizer)",
            "head_type": "method",
            "relation": "have",
            "tail": "CustomizerRegistryDesignPrinciple",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "CustomizerRegistryDesignPrinciple",
            "head_type": "designPrincipleInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.internal.CustomizerRegistry#add(KeyFactoryCustomizer)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.core.internal.CustomizerRegistry#add(KeyFactoryCustomizer)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.internal.CustomizerRegistry",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.internal.CustomizerRegistry",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "addCustomizer",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.internal.CustomizerRegistry#get(Class<T>)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "retrieveCustomizers",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.internal.CustomizerRegistry#get(Class<T>)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "typeSafety",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.internal.CustomizerRegistry#get(Class<T>)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "classCustomizationRetrieval",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.internal.CustomizerRegistry#get(Class<T>)",
            "head_type": "method",
            "relation": "have",
            "tail": "classCustomizationRetrieval",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.internal.CustomizerRegistry#get(Class<T>)",
            "head_type": "method",
            "relation": "have",
            "tail": "typeSafetyExplanation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.internal.CustomizerRegistry#get(Class<T>)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrinciples",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "CustomizerRegistry",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.internal.CustomizerRegistry#get(Class<T>)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.core.internal.CustomizerRegistry#singleton(Customizer)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "backward compatibility",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.internal.CustomizerRegistry#singleton(Customizer)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "deprecated",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.internal.CustomizerRegistry#singleton(Customizer)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.internal.CustomizerRegistry#singleton(Customizer)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.internal.CustomizerRegistry#singleton(Customizer)",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "CustomizerRegistry",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.internal.CustomizerRegistry#singleton(Customizer)",
            "tail_type": "method"
        },
        {
            "head": "Customizer",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.internal.CustomizerRegistry#singleton(Customizer)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.core.internal.Function",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "apply",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.internal.Function#apply(K)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "apply a function to a key",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.internal.Function#apply(K)",
            "head_type": "method",
            "relation": "have",
            "tail": "apply(K key);",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.internal.LoadingCache",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "lazy loading",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.internal.LoadingCache",
            "head_type": "class",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.internal.LoadingCache",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.internal.LoadingCache",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "lazy loading",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "thread safety",
            "tail_type": "useConstraint"
        },
        {
            "head": "lazy loading",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "caching",
            "tail_type": "useScenario"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "lazy loading",
            "tail_type": "apiFunction"
        },
        {
            "head": "relatedConceptInterpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "associated_with",
            "tail": "lazy loading",
            "tail_type": "apiFunction"
        },
        {
            "head": "designPrincipleInterpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "associated_with",
            "tail": "lazy loading",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.internal.LoadingCache#identity()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "identity function",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.internal.LoadingCache#identity()",
            "head_type": "method",
            "relation": "have",
            "tail": "return IDENTITY",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.internal.LoadingCache#identity()",
            "head_type": "method",
            "relation": "have",
            "tail": "related to Function interface",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.internal.LoadingCache#identity()",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle of providing identity function",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.internal.LoadingCache",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.internal.LoadingCache#identity()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.core.internal.LoadingCache#get(K)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "loading data from cache",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.internal.LoadingCache#get(K)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "caching",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.internal.LoadingCache#get(K)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "data retrieval",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.internal.LoadingCache",
            "head_type": "class",
            "relation": "have",
            "tail": "org.springframework.cglib.core.internal.LoadingCache#get(K)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.core.internal.LoadingCache",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.internal.LoadingCache",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.internal.LoadingCache",
            "head_type": "class",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.internal.LoadingCache",
            "head_type": "class",
            "relation": "have",
            "tail": "useScenario",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.internal.LoadingCache",
            "head_type": "class",
            "relation": "have",
            "tail": "useConstraint",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.internal.LoadingCache#createEntry(K,KK,Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "lazy loading",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.internal.LoadingCache#createEntry(K,KK,Object)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "thread safety",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.internal.LoadingCache#createEntry(K,KK,Object)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "concurrent access",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.internal.LoadingCache#createEntry(K,KK,Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.internal.LoadingCache#createEntry(K,KK,Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.internal.LoadingCache#createEntry(K,KK,Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.internal.LoadingCache",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "FutureTask",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.internal.LoadingCache",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "InterruptedException",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.internal.LoadingCache",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "ExecutionException",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.internal.LoadingCache",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "IllegalStateException",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.internal.LoadingCache",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "RuntimeException",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.KeyFactory",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "generates classes for multi-valued keys",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.KeyFactory",
            "head_type": "class",
            "relation": "applied_to",
            "tail": "use in Maps and Sets",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.KeyFactory",
            "head_type": "class",
            "relation": "have",
            "tail": "Code for equals and hashCode methods follow the rules in Effective Java by Joshua Bloch",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.KeyFactory",
            "head_type": "class",
            "relation": "have",
            "tail": "To generate a KeyFactory, supply an interface describing the key structure with a single newInstance method returning an Object",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.KeyFactory",
            "head_type": "class",
            "relation": "have",
            "tail": "Once you have a KeyFactory, generate a new key by calling the newInstance method",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.KeyFactory",
            "head_type": "class",
            "relation": "have",
            "tail": "hashCode equality between two keys is guaranteed if they are equal and produced by the same factory",
            "tail_type": "useConstraint"
        },
        {
            "head": "generates classes for multi-valued keys",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "hashCode equality constraint",
            "tail_type": "useConstraint"
        },
        {
            "head": "generates classes for multi-valued keys",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "use in Maps and Sets",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.KeyFactory#create(Class)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "KeyFactory creation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.KeyFactory#create(Class)",
            "head_type": "method",
            "relation": "have",
            "tail": "Creates a KeyFactory instance for a given key interface",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.KeyFactory#create(Class)",
            "head_type": "method",
            "relation": "have",
            "tail": "KeyFactory instances are used for generating keys in CGLIB",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.KeyFactory#create(Class)",
            "head_type": "method",
            "relation": "have",
            "tail": "package com.example.demo;\n\nimport org.springframework.cglib.core.KeyFactory;\n\npublic class KeyFactoryExample {\n    public static void main(String[] args) {\n        try {\n            Class<?> keyInterface = Class.forName(\"com.example.demo.MyKeyInterface\");\n            KeyFactory keyFactory = KeyFactory.create(keyInterface);\n            System.out.println(\"KeyFactory created successfully.\");\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.KeyFactory#create(Class,Customizer)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "KeyFactory creation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.KeyFactory#create(Class,Customizer)",
            "head_type": "method",
            "relation": "have",
            "tail": "Creates a KeyFactory instance for a given key interface and customizer.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.KeyFactory#create(Class,Customizer)",
            "head_type": "method",
            "relation": "have",
            "tail": "The method facilitates the creation of a KeyFactory, which is essential for generating keys in the CGLIB framework.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.KeyFactory#create(Class,Customizer)",
            "head_type": "method",
            "relation": "have",
            "tail": "public static KeyFactory create(Class keyInterface, Customizer customizer) {\n    return create(keyInterface.getClassLoader(), keyInterface, customizer);\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.KeyFactory#create(Class,KeyFactoryCustomizer,List<KeyFactoryCustomizer>)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "createKeyFactory",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.KeyFactory#create(Class,KeyFactoryCustomizer,List<KeyFactoryCustomizer>)",
            "head_type": "method",
            "relation": "have",
            "tail": "KeyFactoryCreationSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "createKeyFactory",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "KeyFactoryUsageScenario",
            "tail_type": "useScenario"
        },
        {
            "head": "createKeyFactory",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "KeyFactoryConstraints",
            "tail_type": "useConstraint"
        },
        {
            "head": "KeyFactoryUsageScenario",
            "head_type": "useScenario",
            "relation": "have",
            "tail": "KeyFactoryCreationSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "KeyFactoryConstraints",
            "head_type": "useConstraint",
            "relation": "have",
            "tail": "KeyFactoryCreationSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.KeyFactory",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.KeyFactory#create(Class,KeyFactoryCustomizer,List<KeyFactoryCustomizer>)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.core.KeyFactory",
            "head_type": "class",
            "relation": "have",
            "tail": "KeyFactoryRelatedConcepts",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.KeyFactory",
            "head_type": "class",
            "relation": "have",
            "tail": "KeyFactoryDesignPrinciples",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.KeyFactory#create(ClassLoader,Class,Customizer)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "KeyFactory creation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.KeyFactory#create(ClassLoader,Class,Customizer)",
            "head_type": "method",
            "relation": "have",
            "tail": "Creates a KeyFactory instance with specified ClassLoader, key interface, and customizer.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "KeyFactory creation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Used to generate a KeyFactory instance which can then be used to create keys for a given class.",
            "tail_type": "useScenario"
        },
        {
            "head": "KeyFactory creation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Ensure that the provided keyInterface is an interface and the customizer is capable of customizing instances of the keyInterface.",
            "tail_type": "useConstraint"
        },
        {
            "head": "KeyFactory creation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "package com.example;\nimport org.springframework.cglib.core.KeyFactory;\nimport java.lang.reflect.Method;\npublic class KeyFactoryExample {\n    public static void main(String[] args) throws Exception {\n        ClassLoader loader = KeyFactoryExample.class.getClassLoader();\n        Class<?> keyInterface = MyKeyInterface.class;\n        KeyFactory.Customizer customizer = new KeyFactory.Customizer() {\n            @Override\n            public void customize(Class<?> type, Object instance) {\n                // Customization logic here\n            }\n        };\n        KeyFactory keyFactory = KeyFactory.create(loader, keyInterface, customizer);\n        Object key = keyFactory.newInstance(MyKeyInterface.class.getMethod(\"myMethod\"), \"myKey\");\n        System.out.println(key);\n    }\n}\ninterface MyKeyInterface {\n    void myMethod();\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "KeyFactory creation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "KeyFactory is designed to create keys for classes dynamically, allowing for dynamic generation of classes and methods at runtime.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.KeyFactory#create(ClassLoader,Class,KeyFactoryCustomizer,List<KeyFactoryCustomizer>)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "KeyFactory creation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.KeyFactory#create(ClassLoader,Class,KeyFactoryCustomizer,List<KeyFactoryCustomizer>)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "Customizer constraints",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.KeyFactory#create(ClassLoader,Class,KeyFactoryCustomizer,List<KeyFactoryCustomizer>)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "Custom key generation scenarios",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.KeyFactory#create(ClassLoader,Class,KeyFactoryCustomizer,List<KeyFactoryCustomizer>)",
            "head_type": "method",
            "relation": "have",
            "tail": "Complete sample code for KeyFactory creation",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.KeyFactory#create(ClassLoader,Class,KeyFactoryCustomizer,List<KeyFactoryCustomizer>)",
            "head_type": "method",
            "relation": "have",
            "tail": "Related concepts in key generation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.KeyFactory#create(ClassLoader,Class,KeyFactoryCustomizer,List<KeyFactoryCustomizer>)",
            "head_type": "method",
            "relation": "have",
            "tail": "Design principles of KeyFactory",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.KeyFactory#create(ClassLoader,Class,KeyFactoryCustomizer,List<KeyFactoryCustomizer>)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.Generator",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.Generator",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "keyInterface management",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.Generator",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "customizer registry management",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.Generator",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "hash code generation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.Generator",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "equals method generation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.Generator",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "toString method generation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.Generator",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "class generation",
            "tail_type": "apiFunction"
        },
        {
            "head": "keyInterface management",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "managing key interfaces for class generation",
            "tail_type": "useScenario"
        },
        {
            "head": "customizer registry management",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "managing customizers for field type customization",
            "tail_type": "useScenario"
        },
        {
            "head": "hash code generation",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "generating hash codes for objects",
            "tail_type": "useScenario"
        },
        {
            "head": "equals method generation",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "generating equals methods for objects",
            "tail_type": "useScenario"
        },
        {
            "head": "toString method generation",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "generating toString methods for objects",
            "tail_type": "useScenario"
        },
        {
            "head": "class generation",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "generating dynamic classes",
            "tail_type": "useScenario"
        },
        {
            "head": "keyInterface management",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "customizer registry management",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "hash code generation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "equals method generation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "toString method generation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "class generation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.Generator",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.Generator",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.Generator#getDefaultClassLoader()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getDefaultClassLoader",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.Generator#getDefaultClassLoader()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.Generator",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.Generator",
            "head_type": "class",
            "relation": "have",
            "tail": "org.springframework.cglib.core.Generator#getDefaultClassLoader()",
            "tail_type": "method"
        },
        {
            "head": "getDefaultClassLoader",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Returns the default class loader",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "getDefaultClassLoader",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "The method returns the class loader of the key interface",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "getDefaultClassLoader",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "public ClassLoader getDefaultClassLoader() {\n    return keyInterface.getClassLoader();\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.Generator#getProtectionDomain()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getProtectionDomain",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.Generator#getProtectionDomain()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "ReflectUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.Generator#getProtectionDomain()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "keyInterface",
            "tail_type": "class"
        },
        {
            "head": "getProtectionDomain",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "getProtectionDomain sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getProtectionDomain sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "Complete getProtectionDomain example",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.Generator#setCustomizer(Customizer)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Customizer setting",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.Generator#setCustomizer(Customizer)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "Deprecated method usage",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.Generator#setCustomizer(Customizer)",
            "head_type": "method",
            "relation": "have",
            "tail": "Use #addCustomizer(KeyFactoryCustomizer) instead",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.Generator#setCustomizer(Customizer)",
            "head_type": "method",
            "relation": "have",
            "tail": "CustomizerRegistry singleton usage",
            "tail_type": "useSampleCode"
        },
        {
            "head": "Customizer setting",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "Customization of key factory",
            "tail_type": "useScenario"
        },
        {
            "head": "Deprecated method usage",
            "head_type": "useConstraint",
            "relation": "have",
            "tail": "Avoid using deprecated methods for better compatibility",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "Customization of key factory",
            "head_type": "useScenario",
            "relation": "have",
            "tail": "Customizing key factory for specific needs",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "CustomizerRegistry singleton usage",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "Example of setting customizer using CustomizerRegistry singleton",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.Generator#addCustomizer(KeyFactoryCustomizer)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "addCustomizer",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.Generator#addCustomizer(KeyFactoryCustomizer)",
            "head_type": "method",
            "relation": "have",
            "tail": "addCustomizerSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "addCustomizerSampleCode",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.Generator",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.Generator#getCustomizers(Class<T>)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getCustomizers",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.Generator#getCustomizers(Class<T>)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.Generator",
            "tail_type": "class"
        },
        {
            "head": "getCustomizers",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "getCustomizers usage sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getCustomizers",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "getCustomizers related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "getCustomizers",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "getCustomizers design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.Generator#setInterface(Class)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Setting Interface",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.Generator#setInterface(Class)",
            "head_type": "method",
            "relation": "have",
            "tail": "Set Interface Sample Code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.Generator#setInterface(Class)",
            "head_type": "method",
            "relation": "have",
            "tail": "Related Concept Interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.Generator#setInterface(Class)",
            "head_type": "method",
            "relation": "have",
            "tail": "Design Principle Interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.Generator",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.Generator#setInterface(Class)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.core.Generator#create()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "KeyFactory creation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.Generator#create()",
            "head_type": "method",
            "relation": "have",
            "tail": "public KeyFactory create() {setNamePrefix(keyInterface.getName());return (KeyFactory) super.create(keyInterface.getName());}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "KeyFactory creation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "public KeyFactory create() {setNamePrefix(keyInterface.getName());return (KeyFactory) super.create(keyInterface.getName());}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.Generator",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.Generator#create()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.core.Generator#create()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.Generator",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.Generator#setHashConstant(int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "set hash constant",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.Generator#setHashConstant(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "used to set the hash constant value for the Generator instance",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.Generator#setHashConstant(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "ensures consistent hash code generation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.Generator#setHashConstant(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "public void setHashConstant(int constant) {\n    this.constant = constant;\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.Generator#setHashMultiplier(int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "setHashMultiplier",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.Generator#setHashMultiplier(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "Set hash multiplier for the generator",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.Generator#setHashMultiplier(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "Ensure the hash multiplier is set correctly",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.Generator#setHashMultiplier(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "public void setHashMultiplier(int multiplier) {\n    this.multiplier = multiplier;\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.Generator#firstInstance(Class)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "ReflectUtils.newInstance(type)",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.Generator#firstInstance(Class)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "ReflectUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.Generator#firstInstance(Class)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.Generator",
            "tail_type": "class"
        },
        {
            "head": "ReflectUtils.newInstance(type)",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "ReflectUtils.newInstance(type)",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "ReflectUtils.newInstance(type)",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.Generator#nextInstance(Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "instance generation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.Generator#nextInstance(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.cglib.core.Generator#nextInstance(Object) sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.Generator#nextInstance(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation for org.springframework.cglib.core.Generator#nextInstance(Object)",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.Generator#nextInstance(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation for org.springframework.cglib.core.Generator#nextInstance(Object)",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.Generator#nextInstance(Object)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.Generator",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.Generator#generateClass(ClassVisitor)",
            "head_type": "method",
            "relation": "haveFuntion",
            "tail": "generateClass",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.Generator#generateClass(ClassVisitor)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "newInstance method must return Object",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.Generator#generateClass(ClassVisitor)",
            "head_type": "method",
            "relation": "have",
            "tail": "generateClass sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "generateClass sample code",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.Generator#generateClass(ClassVisitor)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.core.Generator#generateClass(ClassVisitor)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "ClassEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.Generator#generateClass(ClassVisitor)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "EmitUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.Generator#generateClass(ClassVisitor)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "TypeUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.Generator#generateClass(ClassVisitor)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "ReflectUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.Generator#generateClass(ClassVisitor)",
            "head_type": "method",
            "relation": "have",
            "tail": "generateClass related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "generateClass related concept interpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.Generator#generateClass(ClassVisitor)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.core.Generator#generateClass(ClassVisitor)",
            "head_type": "method",
            "relation": "have",
            "tail": "generateClass design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "generateClass design principle interpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.Generator#generateClass(ClassVisitor)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.core.Generator#getFieldName(int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getFieldName",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.Generator#getFieldName(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "private String getFieldName(int arg) { return \"FIELD_\" + arg; }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.Generator#getFieldName(int)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.Generator",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.KeyFactoryCustomizer",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "customization of KeyFactory",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.KeyFactoryCustomizer",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "KeyFactory",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.Local",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "storeType",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.Local",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "retrieveIndex",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.Local",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "retrieveType",
            "tail_type": "apiFunction"
        },
        {
            "head": "storeType",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "retrieveIndex",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "retrieveType",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.Local#getIndex()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getIndex",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.Local#getIndex()",
            "head_type": "method",
            "relation": "have",
            "tail": "public int getIndex() { return index; }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.Local#getType()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getType",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.Local#getType()",
            "head_type": "method",
            "relation": "have",
            "tail": "public Type getType() { return type; }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.LocalVariablesSorter",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "renumbers local variables",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.LocalVariablesSorter",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "add new local variables to a method",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.LocalVariablesSorter",
            "head_type": "class",
            "relation": "have",
            "tail": "A MethodVisitor that renumbers local variables in their order of appearance",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.LocalVariablesSorter",
            "head_type": "class",
            "relation": "have",
            "tail": "This adapter allows one to easily add new local variables to a method",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.LocalVariablesSorter",
            "head_type": "class",
            "relation": "have",
            "tail": "Mapping from old to new local variable indexes",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.LocalVariablesSorter",
            "head_type": "class",
            "relation": "have",
            "tail": "visitVarInsn",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.LocalVariablesSorter",
            "head_type": "class",
            "relation": "have",
            "tail": "visitIincInsn",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.LocalVariablesSorter",
            "head_type": "class",
            "relation": "have",
            "tail": "visitMaxs",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.LocalVariablesSorter",
            "head_type": "class",
            "relation": "have",
            "tail": "visitLocalVariable",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.LocalVariablesSorter",
            "head_type": "class",
            "relation": "have",
            "tail": "newLocal",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.LocalVariablesSorter",
            "head_type": "class",
            "relation": "have",
            "tail": "remap",
            "tail_type": "apiFunction"
        },
        {
            "head": "visitVarInsn",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "renumbers local variables",
            "tail_type": "apiFunction"
        },
        {
            "head": "visitIincInsn",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "renumbers local variables",
            "tail_type": "apiFunction"
        },
        {
            "head": "visitLocalVariable",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "renumbers local variables",
            "tail_type": "apiFunction"
        },
        {
            "head": "newLocal",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "add new local variables to a method",
            "tail_type": "apiFunction"
        },
        {
            "head": "remap",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "renumbers local variables",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.LocalVariablesSorter",
            "head_type": "class",
            "relation": "have",
            "tail": "This class is designed to simplify the process of adding new local variables to a method by renumbering existing variables.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.LocalVariablesSorter",
            "head_type": "class",
            "relation": "have",
            "tail": "It maintains a mapping from old to new local variable indexes to ensure that variables are correctly remapped during the process.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.LocalVariablesSorter",
            "head_type": "class",
            "relation": "have",
            "tail": "The class provides methods like visitVarInsn, visitIincInsn, visitLocalVariable, newLocal, and remap to facilitate the manipulation and renumbering of local variables.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.LocalVariablesSorter",
            "head_type": "class",
            "relation": "haveSampleCode",
            "tail": "public class LocalVariablesSorterExample {\n    public static void main(String[] args) {\n        // Example usage of LocalVariablesSorter\n    }\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.LocalVariablesSorter#visitVarInsn(int,int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "visitVarInsn",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.LocalVariablesSorter#visitVarInsn(int,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "visitVarInsn(int var1, int var2)",
            "tail_type": "useSampleCode"
        },
        {
            "head": "visitVarInsn(int var1, int var2)",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.LocalVariablesSorter#visitVarInsn(int,int)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.core.LocalVariablesSorter#visitIincInsn(int,int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "visitIincInsn",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.LocalVariablesSorter#visitIincInsn(int,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "visitIincInsn sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "visitIincInsn sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.cglib.core.LocalVariablesSorter#visitIincInsn(int,int) code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.LocalVariablesSorter#visitMaxs(int,int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "visitMaxs",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.LocalVariablesSorter#visitMaxs(int,int)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.LocalVariablesSorter",
            "tail_type": "class"
        },
        {
            "head": "visitMaxs",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "visitMaxs sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "visitMaxs sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "Complete visitMaxs example",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.LocalVariablesSorter#visitLocalVariable(String,String,String,Label,Label,int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "visitLocalVariable",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.LocalVariablesSorter#visitLocalVariable(String,String,String,Label,Label,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.cglib.core.LocalVariablesSorter#visitLocalVariable(String,String,String,Label,Label,int) sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.LocalVariablesSorter#visitLocalVariable(String,String,String,Label,Label,int) sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "Complete example of visitLocalVariable method",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.LocalVariablesSorter#newLocal(int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "allocate new local variable",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.LocalVariablesSorter#newLocal(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "This method is used to allocate a new local variable within the method. It takes an integer 'size' as an argument which typically represents the size or type of the local variable to be allocated. The method updates the state of the LocalVariablesSorter by incrementing the nextLocal index by the given size and returns the index of the newly allocated local variable.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.LocalVariablesSorter#newLocal(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "public int newLocal(int size) {\n    int var = state.nextLocal;\n    state.nextLocal += size;\n    return var;\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.LocalVariablesSorter#remap(int,int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "variable remapping",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.LocalVariablesSorter#remap(int,int)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "variable index constraints",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.LocalVariablesSorter#remap(int,int)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "local variable optimization",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.LocalVariablesSorter#remap(int,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for remapping variables",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.LocalVariablesSorter#remap(int,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation for variable remapping",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.LocalVariablesSorter#remap(int,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation for variable remapping",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.LocalVariablesSorter",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.LocalVariablesSorter#remap(int,int)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.core.LocalVariablesSorter#remap(int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "local variable remapping",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.LocalVariablesSorter#remap(int)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "variable must be within the range of the local variables",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.LocalVariablesSorter#remap(int)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "compiling code with local variables",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.LocalVariablesSorter#remap(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "private int remap(final int var) {\n    if (var < firstLocal) {\n        return var;\n    }\n    int key = 2 * var;\n    int value = key < state.mapping.length ? state.mapping[key] : 0;\n    if (value == 0) {\n        value = key + 1 < state.mapping.length ? state.mapping[key + 1] : 0;\n    }\n    if (value == 0) {\n        throw new IllegalStateException(\"Unknown local variable \" + var);\n    }\n    return value - 1;\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.LocalVariablesSorter#remap(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "This method is used to remap local variables during the code compilation process. It ensures that the variables are correctly mapped to their respective indices.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.LocalVariablesSorter#remap(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "The design principle behind this method is to ensure efficient and accurate variable mapping during the compilation process, which is crucial for maintaining the integrity of the compiled code.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.LocalVariablesSorter",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.LocalVariablesSorter#remap(int)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.core.State",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "local variable index mapping",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.State",
            "head_type": "class",
            "relation": "have",
            "tail": "Mapping from old to new local variable indexes",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.State",
            "head_type": "class",
            "relation": "have",
            "tail": "int[] mapping = new int[40];\nint nextLocal;",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.MethodInfo",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getClassInfo",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.MethodInfo",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getModifiers",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.MethodInfo",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getSignature",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.MethodInfo",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getExceptionTypes",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.MethodInfo",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "equals",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.MethodInfo",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "hashCode",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.MethodInfo",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "toString",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.MethodInfo",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.MethodInfo",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.MethodInfo",
            "head_type": "class",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.MethodInfo#getClassInfo()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getClassInfo",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.MethodInfo#getClassInfo()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.ClassInfo",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.MethodInfo#getClassInfo()",
            "head_type": "method",
            "relation": "have",
            "tail": "Retrieves Class Information",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.MethodInfo#getClassInfo()",
            "head_type": "method",
            "relation": "have",
            "tail": "Design Principles of getClassInfo",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.MethodInfo#getClassInfo()",
            "head_type": "method",
            "relation": "have",
            "tail": "Sample Code for getClassInfo",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.MethodInfo",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getModifiers()",
            "tail_type": "apiFunction"
        },
        {
            "head": "getModifiers()",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.MethodInfo",
            "tail_type": "class"
        },
        {
            "head": "getModifiers()",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.MethodInfo",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getSignature",
            "tail_type": "apiFunction"
        },
        {
            "head": "getSignature",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.MethodInfo",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.MethodInfo",
            "head_type": "class",
            "relation": "have",
            "tail": "getSignature",
            "tail_type": "apiFunction"
        },
        {
            "head": "getSignature",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "org.springframework.cglib.core.MethodInfo",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.MethodInfo",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getExceptionTypes()",
            "tail_type": "apiFunction"
        },
        {
            "head": "getExceptionTypes()",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.MethodInfo",
            "tail_type": "class"
        },
        {
            "head": "getExceptionTypes()",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getExceptionTypes()",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "getExceptionTypes()",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.MethodInfo#equals(Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "equality check",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.MethodInfo#equals(Object)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "null input",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.MethodInfo#equals(Object)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "object comparison",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.MethodInfo#equals(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.cglib.core.MethodInfo#equals(Object) sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.MethodInfo#equals(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.cglib.core.MethodInfo#equals(Object) related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.MethodInfo#equals(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.cglib.core.MethodInfo#equals(Object) design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.MethodInfo#equals(Object)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.MethodInfo",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.MethodInfo#hashCode()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "generate hash code",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.MethodInfo#hashCode()",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.cglib.core.MethodInfo#hashCode() returns the hash code of the method signature.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.MethodInfo#hashCode()",
            "head_type": "method",
            "relation": "have",
            "tail": "package com.example; import java.util.Objects; public class HashCodeExample { public static void main(String[] args) { MethodInfo methodInfo = new MethodInfo(); methodInfo.setSignature(\"exampleMethodSignature\"); int hashCode = methodInfo.hashCode(); System.out.println(\"Hash code: \" + hashCode); } }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.MethodInfo#toString()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "convert method information to string",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.MethodInfo#toString()",
            "head_type": "method",
            "relation": "have",
            "tail": "convert method information to string sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "convert method information to string sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "package com.example;\n\nimport org.springframework.cglib.core.MethodInfo;\n\npublic class MethodInfoToStringExample {\n    public static void main(String[] args) {\n        // Assuming existence of a MethodInfo object\n        MethodInfo methodInfo = new MethodInfo();\n        String methodString = methodInfo.toString();\n        System.out.println(methodString);\n    }\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.MethodInfo#toString()",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "related concept interpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "MethodInfo objects are used to represent method information in Spring's framework, particularly in the context of dynamic code generation and manipulation. The toString() method is commonly used to provide a string representation of an object, useful for logging and debugging purposes.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.MethodInfo#toString()",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "design principle interpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "have",
            "tail": "The design principle behind providing a toString() method in MethodInfo is to ensure that method information can be easily converted into a human-readable format. This facilitates debugging and logging by allowing developers to quickly inspect method details. It also adheres to the Java standard of providing meaningful toString() implementations for better object representation.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "tail": "transform",
            "head_type": "class",
            "relation": "haveFunction",
            "head": "org.springframework.cglib.core.MethodInfoTransformer",
            "tail_type": "apiFunction"
        },
        {
            "tail": "useSampleCode",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.cglib.core.MethodInfoTransformer",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "org.springframework.cglib.core.MethodInfoTransformer",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "class"
        },
        {
            "tail": "IllegalArgumentException",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "head": "transform",
            "tail_type": "useConstraint"
        },
        {
            "tail": "Method",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "head": "transform",
            "tail_type": "useScenario"
        },
        {
            "tail": "Constructor",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "head": "transform",
            "tail_type": "useScenario"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "head": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head_type": "useSampleCode",
            "head": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.MethodInfoTransformer#getInstance()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "get singleton instance",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.MethodInfoTransformer#getInstance()",
            "head_type": "method",
            "relation": "have",
            "tail": "public static MethodInfoTransformer getInstance() {\n    return INSTANCE;\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.MethodInfoTransformer#getInstance()",
            "head_type": "method",
            "relation": "designPrincipleInterpretation",
            "tail": "This method follows the Singleton design pattern, ensuring that a single instance of MethodInfoTransformer is used throughout the application, which can improve resource utilization and performance.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.MethodInfoTransformer#transform(Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "ReflectUtils.getMethodInfo",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.MethodInfoTransformer#transform(Object)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "IllegalArgumentException",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.MethodInfoTransformer#transform(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.MethodInfoTransformer#transform(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.MethodInfoTransformer#transform(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.MethodWrapper",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "create MethodWrapperKey",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.MethodWrapper",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "createSet from Collection of Methods",
            "tail_type": "apiFunction"
        },
        {
            "head": "create MethodWrapperKey",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode for create MethodWrapperKey",
            "tail_type": "useSampleCode"
        },
        {
            "head": "createSet from Collection of Methods",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode for createSet from Collection of Methods",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.MethodWrapper",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation for MethodWrapper",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.MethodWrapper",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation for MethodWrapper",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.MethodWrapper#create(Method)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "createMethodWrapper",
            "tail_type": "apiFunction"
        },
        {
            "head": "createMethodWrapper",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "createMethodWrapperSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "createMethodWrapper",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "createMethodWrapperRelatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "createMethodWrapper",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "createMethodWrapperDesignPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.MethodWrapper#createSet(Collection)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "createSet",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.MethodWrapper#createSet(Collection)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.MethodWrapper",
            "tail_type": "class"
        },
        {
            "head": "createSet",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "org.springframework.cglib.core.MethodWrapper#createSet(Collection)",
            "tail_type": "useSampleCode"
        },
        {
            "head": "createSet",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Creates a set from a collection of methods.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "createSet",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Efficiently converts a collection of methods into a set.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.NamingPolicy",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getClassName",
            "tail_type": "apiFunction"
        },
        {
            "head": "getClassName",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "getClassName_useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getClassName",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "getClassName_useScenario",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.NamingPolicy",
            "head_type": "class",
            "relation": "have",
            "tail": "NamingPolicy_relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.NamingPolicy",
            "head_type": "class",
            "relation": "have",
            "tail": "NamingPolicy_designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.NamingPolicy#getClassName(String,String,Object,Predicate)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "generateClassName",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.NamingPolicy#getClassName(String,String,Object,Predicate)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "uniqueClassNamePerClassLoader",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.NamingPolicy#getClassName(String,String,Object,Predicate)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "cachingGeneratedClasses",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.NamingPolicy#getClassName(String,String,Object,Predicate)",
            "head_type": "method",
            "relation": "have",
            "tail": "generateClassNameSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.NamingPolicy#getClassName(String,String,Object,Predicate)",
            "head_type": "method",
            "relation": "have",
            "tail": "classNameUniquenessExplanation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.NamingPolicy#getClassName(String,String,Object,Predicate)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrinciplesForGeneratedClassNames",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.NamingPolicy",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.NamingPolicy#getClassName(String,String,Object,Predicate)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.core.NamingPolicy#equals(Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "caching of classes",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.NamingPolicy#equals(Object)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "correctly implement equals and hashCode",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.NamingPolicy#equals(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "generating too many classes",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.NamingPolicy#equals(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "The NamingPolicy in use does not currently, but may in the future, affect the caching of classes generated by AbstractClassGenerator",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.NamingPolicy#equals(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": " reminder to correctly implement equals and hashCode to avoid generating too many classes",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.NamingPolicy#equals(Object)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "AbstractClassGenerator",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.ObjectSwitchCallback",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "processCase",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.ObjectSwitchCallback",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "processDefault",
            "tail_type": "apiFunction"
        },
        {
            "head": "processCase",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "processDefault",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.ObjectSwitchCallback#processCase(Object,Label)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "processCase",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.ObjectSwitchCallback#processCase(Object,Label)",
            "head_type": "method",
            "relation": "have",
            "tail": "void processCase(Object key, Label end) throws Exception;",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.ObjectSwitchCallback#processDefault()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "process default",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.ObjectSwitchCallback#processDefault()",
            "head_type": "method",
            "relation": "have",
            "tail": "void processDefault() throws Exception;",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.Predicate",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "evaluate",
            "tail_type": "apiFunction"
        },
        {
            "head": "evaluate",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.Predicate#evaluate(Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "evaluate",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.Predicate#evaluate(Object)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.Predicate",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.ProcessArrayCallback",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "processElement",
            "tail_type": "apiFunction"
        },
        {
            "head": "processElement",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "void processElement(Type type);",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.ProcessArrayCallback#processElement(Type)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "processElement",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.ProcessArrayCallback#processElement(Type)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.ProcessArrayCallback",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.ProcessSwitchCallback",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "processCase",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.ProcessSwitchCallback",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "processDefault",
            "tail_type": "apiFunction"
        },
        {
            "head": "processCase",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "processDefault",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.ProcessSwitchCallback#processCase(int,Label)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "processCase",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.ProcessSwitchCallback#processCase(int,Label)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.ProcessSwitchCallback",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.ProcessSwitchCallback",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.ProcessSwitchCallback",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.ProcessSwitchCallback#processCase(int,Label)",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.ProcessSwitchCallback#processDefault()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "process default behavior",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.ProcessSwitchCallback#processDefault()",
            "head_type": "method",
            "relation": "have",
            "tail": "void processDefault() throws Exception;",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#getProtectionDomain(Class)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getProtectionDomain",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#getProtectionDomain(Class)",
            "head_type": "method",
            "relation": "have",
            "tail": "getProtectionDomain(Class) useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getProtectionDomain(Class) useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "getProtectionDomain(Class) sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#getExceptionTypes(Member)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getExceptionTypes",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#getExceptionTypes(Member)",
            "head_type": "method",
            "relation": "have",
            "tail": "getExceptionTypesSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getExceptionTypesSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "getExceptionTypesSampleCodeContent",
            "tail_type": "useSampleCodeContent"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#getSignature(Member)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getSignature",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#getSignature(Member)",
            "head_type": "method",
            "relation": "have",
            "tail": "getSignatureUseSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getSignatureUseSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "getSignatureSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#findConstructor(String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "findConstructor",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#findConstructor(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "findConstructor(String) sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "findConstructor(String) sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "Complete example of findConstructor(String)",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#findConstructor(String,ClassLoader)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "find constructor",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#findConstructor(String,ClassLoader)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "constructor existence",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#findConstructor(String,ClassLoader)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "class loading",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#findConstructor(String,ClassLoader)",
            "head_type": "method",
            "relation": "have",
            "tail": "use sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#findConstructor(String,ClassLoader)",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#findConstructor(String,ClassLoader)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#findConstructor(String,ClassLoader)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.ReflectUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#findMethod(String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "findMethod",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#findMethod(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "findMethodSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "findMethodSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "findMethodSampleCodeContent",
            "tail_type": "useSampleCodeContent"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#findMethod(String,ClassLoader)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "findMethod",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#findMethod(String,ClassLoader)",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "sampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#parseTypes(String,ClassLoader)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "parseTypes",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#parseTypes(String,ClassLoader)",
            "head_type": "method",
            "relation": "have",
            "tail": "parseTypes(String,ClassLoader) sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "parseTypes(String,ClassLoader) sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "private static Class[] parseTypes(String desc, ClassLoader loader) throws ClassNotFoundException {\n    int lparen = desc.indexOf('(');\n    int rparen = desc.indexOf(')', lparen);\n    List params = new ArrayList();\n    int start = lparen + 1;\n    for (; ; ) {\n        int comma = desc.indexOf(',', start);\n        if (comma < 0) {\n            break;\n        }\n        params.add(desc.substring(start, comma).trim());\n        start = comma + 1;\n    }\n    if (start < rparen) {\n        params.add(desc.substring(start, rparen).trim());\n    }\n    Class[] types = new Class[params.size()];\n    for (int i = 0; i < types.length; i++) {\n        types[i] = getClass((String) params.get(i), loader);\n    }\n    return types;\n}",
            "tail_type": "String"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#getClass(String,ClassLoader)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "class loading",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#getClass(String,ClassLoader)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "class existence",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#getClass(String,ClassLoader)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "dynamic class loading",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#getClass(String,ClassLoader)",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for loading class dynamically",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#getClass(String,ClassLoader)",
            "head_type": "method",
            "relation": "have",
            "tail": "class loader and class name",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#getClass(String,ClassLoader)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle for dynamic class loading",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#getClass(String,ClassLoader)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.ReflectUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#getClass(String,ClassLoader,String[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "class loading",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#getClass(String,ClassLoader,String[])",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "ClassNotFoundException must be handled",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#getClass(String,ClassLoader,String[])",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "dynamic class loading scenarios",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#getClass(String,ClassLoader,String[])",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for loading classes dynamically",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#getClass(String,ClassLoader,String[])",
            "head_type": "method",
            "relation": "have",
            "tail": "interpretation of related concepts in class loading",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#getClass(String,ClassLoader,String[])",
            "head_type": "method",
            "relation": "have",
            "tail": "design principles behind dynamic class loading",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#getClass(String,ClassLoader,String[])",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.ReflectUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#newInstance(Class)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "create new instance of a class",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#newInstance(Class)",
            "head_type": "method",
            "relation": "have",
            "tail": "public static Object newInstance(Class type) {\n    return newInstance(type, Constants.EMPTY_CLASS_ARRAY, null);\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "create new instance of a class",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.ReflectUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#newInstance(Class)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.ReflectUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#newInstance(Class,Class[],Object[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "instance creation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#newInstance(Class,Class[],Object[])",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.ReflectUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#newInstance(Class,Class[],Object[])",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#newInstance(Class,Class[],Object[])",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#newInstance(Class,Class[],Object[])",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#newInstance(Constructor,Object[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "instance creation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#newInstance(Constructor,Object[])",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "constructor accessibility",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#newInstance(Constructor,Object[])",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "dynamic object creation",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#newInstance(Constructor,Object[])",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#newInstance(Constructor,Object[])",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#newInstance(Constructor,Object[])",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#newInstance(Constructor,Object[])",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeGenerationException",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#getConstructor(Class,Class[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getConstructor",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#getConstructor(Class,Class[])",
            "head_type": "method",
            "relation": "have",
            "tail": "getConstructorSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getConstructorSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "getConstructorSampleCodeContent",
            "tail_type": "useSampleCodeContent"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#getNames(Class[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "get class names",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#getNames(Class[])",
            "head_type": "method",
            "relation": "have",
            "tail": "get class names sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "get class names sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "get class names sample code content",
            "tail_type": "useSampleCodeContent"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getClasses",
            "tail_type": "apiFunction"
        },
        {
            "head": "getClasses",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "getClasses(Object[] objects)",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getClasses(Object[] objects)",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.ReflectUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#findNewInstance(Class)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "find new instance",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#findNewInstance(Class)",
            "head_type": "method",
            "relation": "have",
            "tail": "find new instance sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "find new instance sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.cglib.core.ReflectUtils#findNewInstance(Class) sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#getPropertyMethods(PropertyDescriptor[],boolean,boolean)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getPropertyMethods",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#getPropertyMethods(PropertyDescriptor[],boolean,boolean)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "PropertyDescriptor",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#getPropertyMethods(PropertyDescriptor[],boolean,boolean)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "Method",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#getPropertyMethods(PropertyDescriptor[],boolean,boolean)",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "code",
            "tail_type": "code"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#getBeanProperties(Class)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getBeanProperties",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#getBeanProperties(Class)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.ReflectUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#getBeanProperties(Class)",
            "head_type": "method",
            "relation": "have",
            "tail": "getBeanProperties(Class type) { return getPropertiesHelper(type, true, true); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#getBeanGetters(Class)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getBeanGetters",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#getBeanGetters(Class)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.ReflectUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#getBeanGetters(Class)",
            "head_type": "method",
            "relation": "have",
            "tail": "getBeanGetters Sample Code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getBeanGetters Sample Code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "Complete getBeanGetters Example",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#getBeanSetters(Class)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getBeanSetters",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#getBeanSetters(Class)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.ReflectUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#getBeanSetters(Class)",
            "head_type": "method",
            "relation": "have",
            "tail": "getBeanSetters Sample Code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getBeanSetters Sample Code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "Complete getBeanSetters Example",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getPropertiesHelper",
            "tail_type": "apiFunction"
        },
        {
            "head": "getPropertiesHelper",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "org.springframework.cglib.core.ReflectUtils",
            "tail_type": "class"
        },
        {
            "head": "getPropertiesHelper",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "getPropertiesHelper_SampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getPropertiesHelper_SampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "getPropertiesHelper",
            "tail_type": "apiFunction"
        },
        {
            "head": "getPropertiesHelper",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "getPropertiesHelper_RelatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "getPropertiesHelper_RelatedConceptInterpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "getPropertiesHelper",
            "tail_type": "apiFunction"
        },
        {
            "head": "getPropertiesHelper",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "getPropertiesHelper_DesignPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "getPropertiesHelper_DesignPrincipleInterpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "have",
            "tail": "getPropertiesHelper",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#findDeclaredMethod(Class,String,Class[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "findDeclaredMethod",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#findDeclaredMethod(Class,String,Class[])",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "Class",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#findDeclaredMethod(Class,String,Class[])",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "String",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#findDeclaredMethod(Class,String,Class[])",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "Class[]",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#findDeclaredMethod(Class,String,Class[])",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "NoSuchMethodException",
            "tail_type": "class"
        },
        {
            "head": "findDeclaredMethod",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "sampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#addAllMethods(Class,List)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "add all methods of a class to a list",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#addAllMethods(Class,List)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "class must not be null",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#addAllMethods(Class,List)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "reflection operations on classes",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#addAllMethods(Class,List)",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.cglib.core.ReflectUtils#addAllMethods(Class,List) sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#addAllMethods(Class,List)",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation for org.springframework.cglib.core.ReflectUtils#addAllMethods(Class,List)",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#addAllMethods(Class,List)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation for org.springframework.cglib.core.ReflectUtils#addAllMethods(Class,List)",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#addAllMethods(Class,List)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.ReflectUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#addAllMethods(Class,List)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "java.lang.Object",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#addAllMethods(Class,List)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "java.lang.Class",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#addAllInterfaces(Class,List)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "add all interfaces",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#addAllInterfaces(Class,List)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.ReflectUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#addAllInterfaces(Class,List)",
            "head_type": "method",
            "relation": "have",
            "tail": "add all interfaces to list",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#addAllInterfaces(Class,List)",
            "head_type": "method",
            "relation": "have",
            "tail": "public static List addAllInterfaces(Class type, List list) {\n    Class superclass = type.getSuperclass();\n    if (superclass != null) {\n        list.addAll(Arrays.asList(type.getInterfaces()));\n        addAllInterfaces(superclass, list);\n    }\n    return list;\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#addAllInterfaces(Class,List)",
            "head_type": "method",
            "relation": "have",
            "tail": "This method is used to add all interfaces implemented by a given class and its superclasses to a list.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#addAllInterfaces(Class,List)",
            "head_type": "method",
            "relation": "have",
            "tail": "The method follows a recursive approach to traverse the class hierarchy and collect all interfaces.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#findInterfaceMethod(Class)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "findInterfaceMethod",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#findInterfaceMethod(Class)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "inputClassMustBeInterface",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#findInterfaceMethod(Class)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "interfaceMustHaveExactlyOneMethod",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#findInterfaceMethod(Class)",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#findInterfaceMethod(Class)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#findInterfaceMethod(Class)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "findInterfaceMethod",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "searchingForSingleMethodInInterface",
            "tail_type": "useScenario"
        },
        {
            "head": "inputClassMustBeInterface",
            "head_type": "useConstraint",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "interfaceMustHaveExactlyOneMethod",
            "head_type": "useConstraint",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "completeExample",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "setGeneratedClassHandler(BiConsumer<String,byte[]>)",
            "tail_type": "apiFunction"
        },
        {
            "head": "setGeneratedClassHandler(BiConsumer<String,byte[]>)",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "code",
            "tail_type": "code"
        },
        {
            "head": "setGeneratedClassHandler(BiConsumer<String,byte[]>)",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "relatedConceptInterpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "description",
            "tail_type": "description"
        },
        {
            "head": "setGeneratedClassHandler(BiConsumer<String,byte[]>)",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "designPrincipleInterpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "have",
            "tail": "description",
            "tail_type": "description"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#defineClass(String,byte[],ClassLoader)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "defineClass",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#defineClass(String,byte[],ClassLoader)",
            "head_type": "method",
            "relation": "have",
            "tail": "public static Class defineClass(String className, byte[] b, ClassLoader loader) throws Exception {\n    return defineClass(className, b, loader, null, null);\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#defineClass(String,byte[],ClassLoader)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.ReflectUtils",
            "tail_type": "class"
        }
    ]
}