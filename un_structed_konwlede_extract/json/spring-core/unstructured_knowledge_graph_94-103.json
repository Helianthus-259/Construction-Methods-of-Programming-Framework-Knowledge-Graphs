{
  "relationships": [
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor#privateConstructorInvocationDoesNotMatchConstructorHint()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "privateConstructorInvocationDoesNotMatchConstructorHint",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor#privateConstructorInvocationDoesNotMatchConstructorHint()",
      "head_type": "method",
      "relation": "have",
      "tail": "privateConstructorInvocationDoesNotMatchConstructorHintSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "privateConstructorInvocationDoesNotMatchConstructorHintSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.aot.hint.predicate.ReflectionOnConstructor#privateConstructorInvocationDoesNotMatchConstructorHint()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#resourcePatternMatchesTypeInDefaultPackageAndResourceName()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "register resource pattern",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#resourcePatternMatchesTypeInDefaultPackageAndResourceName()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "assert resource pattern match",
      "tail_type": "apiFunction"
    },
    {
      "head": "register resource pattern",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "void runtimeHints.resources().registerPattern(\"spring.*\")",
      "tail_type": "useSampleCode"
    },
    {
      "head": "assert resource pattern match",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "void assertPredicateMatches(resources.forResource(TypeReference.of(\"DummyClass\"), \"spring.properties\"))",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#resourcePatternMatchesTypeInDefaultPackageAndResourceName()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests",
      "head_type": "class",
      "relation": "have",
      "tail": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#resourcePatternMatchesTypeInDefaultPackageAndResourceName()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.aot.hint.ProxyHintsTests#registerJdkProxyWithConsumer()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerJdkProxy",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ProxyHintsTests#registerJdkProxyWithConsumer()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "proxyHints",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ProxyHintsTests#registerJdkProxyWithConsumer()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "springProxy",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ProxyHintsTests#registerJdkProxyWithConsumer()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "proxiedInterfaces",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ProxyHintsTests#registerJdkProxyWithConsumer()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "assertThat",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ProxyHintsTests#registerJdkProxyWithConsumer()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "singleElement",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ProxyHintsTests#registerJdkProxyWithConsumer()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "satisfies",
      "tail_type": "apiFunction"
    },
    {
      "head": "registerJdkProxy",
      "head_type": "apiFunction",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.ProxyHints",
      "tail_type": "class"
    },
    {
      "head": "proxyHints",
      "head_type": "apiFunction",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.ProxyHints",
      "tail_type": "class"
    },
    {
      "head": "springProxy",
      "head_type": "apiFunction",
      "relation": "associated_with",
      "tail": "org.springframework.aop.SpringProxy",
      "tail_type": "class"
    },
    {
      "head": "proxiedInterfaces",
      "head_type": "apiFunction",
      "relation": "associated_with",
      "tail": "org.springframework.aop.SpringProxy",
      "tail_type": "class"
    },
    {
      "head": "proxiedInterfaces",
      "head_type": "apiFunction",
      "relation": "associated_with",
      "tail": "org.springframework.aop.framework.Advised",
      "tail_type": "class"
    },
    {
      "head": "proxiedInterfaces",
      "head_type": "apiFunction",
      "relation": "associated_with",
      "tail": "org.springframework.core.DecoratingProxy",
      "tail_type": "class"
    },
    {
      "head": "assertThat",
      "head_type": "apiFunction",
      "relation": "associated_with",
      "tail": "org.hamcrest.MatcherAssert",
      "tail_type": "class"
    },
    {
      "head": "singleElement",
      "head_type": "apiFunction",
      "relation": "associated_with",
      "tail": "org.hamcrest.Matcher",
      "tail_type": "class"
    },
    {
      "head": "satisfies",
      "head_type": "apiFunction",
      "relation": "associated_with",
      "tail": "org.hamcrest.Matcher",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ProxyHintsTests#registerJdkProxyWithConsumer()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.ProxyHintsTests#registerJdkProxyWithConsumer()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.ProxyHintsTests#registerJdkProxyWithConsumer()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#getTypeUsingTypeReference()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerType",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#getTypeUsingTypeReference()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "getTypeHint",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#getTypeUsingTypeReference()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "satisfies",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#getTypeUsingTypeReference()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "typeWithMemberCategories",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#getTypeUsingTypeReference()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.ReflectionHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#getTypeUsingTypeReference()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "TypeReference",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#getTypeUsingTypeReference()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "MemberCategory",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#getTypeUsingTypeReference()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#getTypeUsingTypeReference()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#getTypeUsingTypeReference()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.ParentType",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "first",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests#writeObjectWithNestedArrayOfString()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "writeObjectWithNestedArrayOfString",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests#writeObjectWithNestedArrayOfString()",
      "head_type": "method",
      "relation": "have",
      "tail": "writeObjectWithNestedArrayOfStringSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "writeObjectWithNestedArrayOfStringSampleCode",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.aot.nativex.BasicJsonWriterTests#writeObjectWithNestedArrayOfString()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.aot.nativex.ResourceHintsTests#empty()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "test runtime hints",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.ResourceHintsTests#empty()",
      "head_type": "method",
      "relation": "have",
      "tail": "void empty() throws JSONException {    RuntimeHints hints = new RuntimeHints();    assertEquals(\";\", hints);}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.nativex.ResourceHintsTests#empty()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.nativex.ResourceHintsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.ResourceHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "test runtime hints",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.ResourceHintsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "void empty() throws JSONException {    RuntimeHints hints = new RuntimeHints();    assertEquals(\";\", hints);}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getMergedAnnotationAttributesOnMetaCycleAnnotatedClassWithMissingTargetMetaAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedAnnotationAttributesOnMetaCycleAnnotatedClassWithMissingTargetMetaAnnotation",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "MetaCycleAnnotatedClass must be annotated with @Transactional",
      "tail_type": "useConstraint"
    },
    {
      "head": "getMergedAnnotationAttributesOnMetaCycleAnnotatedClassWithMissingTargetMetaAnnotation",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "Testing scenario where target meta-annotation is missing",
      "tail_type": "useScenario"
    },
    {
      "head": "getMergedAnnotationAttributesOnMetaCycleAnnotatedClassWithMissingTargetMetaAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "Sample code for testing merged annotation attributes",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getMergedAnnotationAttributesOnMetaCycleAnnotatedClassWithMissingTargetMetaAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "Explanation of related concepts for merged annotations",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "getMergedAnnotationAttributesOnMetaCycleAnnotatedClassWithMissingTargetMetaAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "Design principles behind merged annotation attribute retrieval",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtils",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getMergedAnnotationAttributesFavorsLocalComposedAnnotationOverInheritedAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedAnnotationAttributesFavorsLocalComposedAnnotationOverInheritedAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getMergedAnnotationAttributesFavorsLocalComposedAnnotationOverInheritedAnnotation()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getMergedAnnotationAttributesFavorsLocalComposedAnnotationOverInheritedAnnotation()",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.EnclosedInnerInner",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "enclosed inner class",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.EnclosedInnerInner",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.EnclosedInnerInner",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnClassHierarchyScansInCorrectOrder()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scanning inherited annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnClassHierarchyScansInCorrectOrder()",
      "head_type": "method",
      "relation": "have",
      "tail": "void inheritedAnnotationsStrategyOnClassHierarchyScansInCorrectOrder() {    Class<?> source = WithHierarchy.class;    assertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\", \"1:TestInheritedAnnotation2\", \"2:TestInheritedAnnotation3\");}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnClassHierarchyScansInCorrectOrder()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "scanning inherited annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests",
      "head_type": "class",
      "relation": "have",
      "tail": "related to annotation scanning and inheritance",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests",
      "head_type": "class",
      "relation": "have",
      "tail": "design principle of ensuring correct order of scanning annotations in a class hierarchy",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnClassHierarchyScansInCorrectOrder()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scanning annotations in type hierarchy",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnClassHierarchyScansInCorrectOrder()",
      "head_type": "method",
      "relation": "have",
      "tail": "void typeHierarchyStrategyOnClassHierarchyScansInCorrectOrder() {\n    Class<?> source = WithHierarchy.class;\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\", \"1:TestAnnotation5\", \"1:TestInheritedAnnotation5\", \"2:TestAnnotation6\", \"3:TestAnnotation2\", \"3:TestInheritedAnnotation2\", \"4:TestAnnotation3\", \"4:TestInheritedAnnotation3\", \"5:TestAnnotation4\");\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnClassHierarchyScansInCorrectOrder()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "scanning annotations in type hierarchy",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests",
      "head_type": "class",
      "relation": "have",
      "tail": "void typeHierarchyStrategyOnClassHierarchyScansInCorrectOrder() {\n    Class<?> source = WithHierarchy.class;\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\", \"1:TestAnnotation5\", \"1:TestInheritedAnnotation5\", \"2:TestAnnotation6\", \"3:TestAnnotation2\", \"3:TestInheritedAnnotation2\", \"4:TestAnnotation3\", \"4:TestInheritedAnnotation3\", \"5:TestAnnotation4\");\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodHierarchyScansInCorrectOrder()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scan",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodHierarchyScansInCorrectOrder()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "assertThat",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodHierarchyScansInCorrectOrder()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "methodFrom",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodHierarchyScansInCorrectOrder()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "containsExactly",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodHierarchyScansInCorrectOrder()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodHierarchyScansInCorrectOrder()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "WithHierarchy",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodHierarchyScansInCorrectOrder()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodHierarchyScansInCorrectOrder()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodHierarchyScansInCorrectOrder()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.Hello1Impl",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "method",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.Hello1Impl#method()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "org.springframework.core.annotation.Hello1Impl#method()",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.Hello1Impl#method()",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.core.annotation.Hello1Impl#method()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForToSelfAnnotatedToOtherAttribute()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "AnnotationTypeMappings.forAnnotationType()",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForToSelfAnnotatedToOtherAttribute()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "AnnotationConfigurationException",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForToSelfAnnotatedToOtherAttribute()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "relatedConceptInterpretation",
      "head_type": "relatedConceptInterpretation",
      "relation": "associated_with",
      "tail": "AnnotationTypeMappings",
      "tail_type": "class"
    },
    {
      "head": "relatedConceptInterpretation",
      "head_type": "relatedConceptInterpretation",
      "relation": "associated_with",
      "tail": "AliasForToSelfAnnotatedToOtherAttribute",
      "tail_type": "class"
    },
    {
      "head": "relatedConceptInterpretation",
      "head_type": "relatedConceptInterpretation",
      "relation": "associated_with",
      "tail": "AnnotationConfigurationException",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForToSelfAnnotatedToOtherAttribute()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "designPrincipleInterpretation",
      "head_type": "designPrincipleInterpretation",
      "relation": "associated_with",
      "tail": "AnnotationTypeMappings",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForToSelfAnnotatedToOtherAttribute()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#getRepeatableAnnotationsDeclaredOnMethod()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "getRepeatableAnnotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#getRepeatableAnnotationsDeclaredOnMethod()",
      "head_type": "method",
      "relation": "have",
      "tail": "getRepeatableAnnotationsSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getRepeatableAnnotationsSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "getRepeatableAnnotationsSampleCodeContent",
      "tail_type": "useSampleCodeContent"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedInterface#fromInterfaceImplementedByRoot()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "Order annotation processing",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedInterface#fromInterfaceImplementedByRoot()",
      "head_type": "method",
      "relation": "have",
      "tail": "Order annotation indicates the order value",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedInterface#fromInterfaceImplementedByRoot()",
      "head_type": "method",
      "relation": "have",
      "tail": "Used to specify the order in which the bean should be initialized",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedInterface#fromInterfaceImplementedByRoot()",
      "head_type": "method",
      "relation": "have",
      "tail": "@Order(0)\nvoid fromInterfaceImplementedByRoot();",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.Root#overrideToAnnotate()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "override annotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.Root#overrideToAnnotate()",
      "head_type": "method",
      "relation": "have",
      "tail": "used to override annotations in a class or method",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.Root#overrideToAnnotate()",
      "head_type": "method",
      "relation": "have",
      "tail": "ensures that annotations are correctly overridden when needed",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.Root#overrideToAnnotate()",
      "head_type": "method",
      "relation": "have",
      "tail": "public void overrideToAnnotate() ;",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.Root#overrideWithoutNewAnnotation()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "overrideWithoutNewAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.Root#overrideWithoutNewAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "Order(27)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.Leaf#metaAnnotatedOnLeaf()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "meta annotation processing",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.Leaf#metaAnnotatedOnLeaf()",
      "head_type": "method",
      "relation": "have",
      "tail": "meta annotation processing",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.Leaf#metaAnnotatedOnLeaf()",
      "head_type": "method",
      "relation": "have",
      "tail": "meta annotation processing",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.Leaf#metaAnnotatedOnLeaf()",
      "head_type": "method",
      "relation": "have",
      "tail": "meta annotation processing",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.NonAnnotatedClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "NonAnnotatedClass",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.NonAnnotatedClass",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.NonAnnotatedClass",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.ImportsInterfaceWithAnnotatedMethod",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "foo()",
      "tail_type": "apiFunction"
    },
    {
      "head": "foo()",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "org.springframework.core.annotation.ImportsInterfaceWithAnnotatedMethod",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SimplePojo#setName(String)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "setter method",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SimplePojo#setName(String)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.annotation.SimplePojo",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SimplePojo#setName(String)",
      "head_type": "method",
      "relation": "have",
      "tail": "setter method example",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SimplePojo#setDescription(String)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "setDescription",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SimplePojo#setDescription(String)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.annotation.SimplePojo",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SimplePojo#setDescription(String)",
      "head_type": "method",
      "relation": "have",
      "tail": "public void setDescription(String description) {\n    this.description = description;\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.ExecutableModeTests#invokeIncludesNullMode()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "invocation inclusion check",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ExecutableModeTests#invokeIncludesNullMode()",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.aot.hint.ExecutableMode",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ExecutableModeTests#invokeIncludesNullMode()",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.aot.hint.ExecutableMode.INVOKE",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ExecutableModeTests#invokeIncludesNullMode()",
      "head_type": "method",
      "relation": "have",
      "tail": "assertion",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ExecutableModeTests#invokeIncludesNullMode()",
      "head_type": "method",
      "relation": "have",
      "tail": "boolean result verification",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ExecutableModeTests#invokeIncludesNullMode()",
      "head_type": "method",
      "relation": "have",
      "tail": "null parameter handling",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.ExecutableModeTests#invokeIncludesNullMode()",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.aot.hint.ExecutableModeTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ExecutableModeTests#invokeIncludesNullMode()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.ExecutableMode",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ExecutableModeTests#invokeIncludesNullMode()",
      "head_type": "method",
      "relation": "have",
      "tail": "test method",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ExecutableModeTests#invokeIncludesNullMode()",
      "head_type": "method",
      "relation": "have",
      "tail": "unit testing",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.ExecutableModeTests#invokeIncludesNullMode()",
      "head_type": "method",
      "relation": "have",
      "tail": "test-driven development",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.ExecutableModeTests#invokeIncludesNullMode()",
      "head_type": "method",
      "relation": "have",
      "tail": "java\nimport org.junit.jupiter.api.Test;\nimport org.springframework.aot.hint.ExecutableMode;\nimport static org.assertj.core.api.Assertions.assertThat;\n\nclass ExampleTest {\n\n    @Test\n    void invokeIncludesNullMode() {\n        assertThat(ExecutableMode.INVOKE.includes(null)).isTrue();\n    }\n}\n",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithSameProxiedInterfacesDifferentOrderIsFalse()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "proxiedInterfaces",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithSameProxiedInterfacesDifferentOrderIsFalse()",
      "head_type": "method",
      "relation": "have",
      "tail": "JdkProxyHint",
      "tail_type": "class"
    },
    {
      "head": "JdkProxyHint",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "proxiedInterfaces",
      "tail_type": "apiFunction"
    },
    {
      "head": "JdkProxyHint",
      "head_type": "class",
      "relation": "have",
      "tail": "Builder",
      "tail_type": "class"
    },
    {
      "head": "Builder",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "proxiedInterfaces",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithSameProxiedInterfacesDifferentOrderIsFalse()",
      "head_type": "method",
      "relation": "have",
      "tail": "TypeReference",
      "tail_type": "class"
    },
    {
      "head": "TypeReference",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "of",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithSameProxiedInterfacesDifferentOrderIsFalse()",
      "head_type": "method",
      "relation": "have",
      "tail": "assertThat",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithSameProxiedInterfacesDifferentOrderIsFalse()",
      "head_type": "method",
      "relation": "have",
      "tail": "isNotEqualTo",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithSameProxiedInterfacesDifferentOrderIsFalse()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithSameProxiedInterfacesDifferentOrderIsFalse()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithSameProxiedInterfacesDifferentOrderIsFalse()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicatesTests#assertPredicateDoesNotMatch(Predicate<RuntimeHints>)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "assertion",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicatesTests#assertPredicateDoesNotMatch(Predicate<RuntimeHints>)",
      "head_type": "method",
      "relation": "have",
      "tail": "private void assertPredicateDoesNotMatch(Predicate<RuntimeHints> predicate) {\n    assertThat(predicate).rejects(this.runtimeHints);\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicatesTests#assertPredicateDoesNotMatch(Predicate<RuntimeHints>)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.predicate.ReflectionHintsPredicatesTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicatesTests#assertPredicateDoesNotMatch(Predicate<RuntimeHints>)",
      "head_type": "method",
      "relation": "have",
      "tail": "This method is used to assert that a given predicate does not match the provided runtime hints. It uses the 'assertThat' method from a testing framework to check that the predicate rejects the runtime hints.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicatesTests#assertPredicateDoesNotMatch(Predicate<RuntimeHints>)",
      "head_type": "method",
      "relation": "have",
      "tail": "The design principle behind this method is to ensure that the predicate accurately reflects the conditions under which it should not match the runtime hints. This is crucial for maintaining the integrity of the testing process and ensuring that the hints are correctly validated.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodIntrospectionMatchesInvokePublicMethods()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "methodIntrospection",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodIntrospectionMatchesInvokePublicMethods()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "introspectionOfPublicMethods",
      "tail_type": "useScenario"
    },
    {
      "head": "introspectionOfPublicMethods",
      "head_type": "useScenario",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodIntrospectionMatchesInvokePublicMethods()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "SampleClass",
      "tail_type": "class"
    },
    {
      "head": "introspectionOfPublicMethods",
      "head_type": "useScenario",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "introspectionOfPublicMethods",
      "head_type": "useScenario",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#registerOnInterfaces()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerForInterfaces",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#registerOnInterfaces()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerOnInterfaces useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerOnInterfaces useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.aot.hint.ReflectionHintsTests sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.SecondInterface#second()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "void second();",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#registerTypeWithInnerNestedType()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerTypeWithInnerNestedType",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#registerTypeWithInnerNestedType()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerTypeWithInnerNestedTypeSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerTypeWithInnerNestedTypeSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.aot.hint.ResourceHintsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#registerTypeWithInnerNestedType()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.ResourceHintsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#registerExactMatchesInRootDirectory()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "register resource patterns",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#registerExactMatchesInRootDirectory()",
      "head_type": "method",
      "relation": "have",
      "tail": "register resource patterns sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "register resource patterns sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "java\nimport org.junit.jupiter.api.Test;\nimport org.springframework.aot.hint.ResourceHints;\nimport org.springframework.aot.hint.ResourcePatternHint;\nimport java.util.function.Consumer;\n\nclass ResourceHintsTests {\n\n    private ResourceHints resourceHints;\n\n    @Test\n    void registerExactMatchesInRootDirectory() {\n        this.resourceHints.registerPattern(\"test.properties\");\n        this.resourceHints.registerPattern(\"another.properties\");\n        // assertions\n    }\n\n    private Consumer<ResourcePatternHint> patternOf(String directory, String pattern) {\n        return hint -> {\n            assertThat(hint.getDirectory()).isEqualTo(directory);\n            assertThat(hint.getPattern()).isEqualTo(pattern);\n        };\n    }\n}\n",
      "tail_type": "String"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#registerResourceBundle()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerResourceBundle",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#registerResourceBundle()",
      "head_type": "method",
      "relation": "have",
      "tail": "ResourceHintsTests",
      "tail_type": "class"
    },
    {
      "head": "registerResourceBundle",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "ResourceHints",
      "tail_type": "class"
    },
    {
      "head": "ResourceHintsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.ResourceHints",
      "tail_type": "class"
    },
    {
      "head": "registerResourceBundle",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "registerResourceBundle() sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerResourceBundle() sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "registerResourceBundle() complete example",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#registerResourceBundleSeveralTimesAddsOneEntry()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerResourceBundle",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#registerResourceBundleSeveralTimesAddsOneEntry()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerResourceBundleSeveralTimesAddsOneEntry() useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerResourceBundleSeveralTimesAddsOneEntry() useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "registerResourceBundleSeveralTimesAddsOneEntry() sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.SimpleTypeReferenceTests#primitivesAndPrimitivesArray()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "generateStreamOfArguments",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.SimpleTypeReferenceTests#primitivesAndPrimitivesArray()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "generateStreamOfArguments",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "completeSampleCode",
      "tail_type": "completeSampleCode"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#assertEquals(String)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "assertEquality",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#assertEquals(String)",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#assertEquals(String) sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.nativex.RuntimeHintsWriterTests",
      "head_type": "class",
      "relation": "haveFuntion",
      "tail": "lazy loading",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.RuntimeHintsWriterTests",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "circular aliases are prohibited",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.aot.nativex.RuntimeHintsWriterTests",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "multiple aliases for a single name",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.nativex.RuntimeHintsWriterTests",
      "head_type": "class",
      "relation": "have",
      "tail": "package com.healthMgr.common.email; import java.xxxx; public class OneClass { // specific code }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.nativex.RuntimeHintsWriterTests",
      "head_type": "class",
      "relation": "have",
      "tail": "An explanation of related concepts.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.nativex.RuntimeHintsWriterTests",
      "head_type": "class",
      "relation": "have",
      "tail": "An explanation of the design principles of the class or method.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.nativex.RuntimeHintsWriterTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.SimpleAliasRegistryTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.ResourceHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registerExactMatch",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.ResourceHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registerWildcardAtTheBeginningPattern",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.ResourceHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registerWildcardInTheMiddlePattern",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.ResourceHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registerWildcardAtTheEndPattern",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.ResourceHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registerPatternWithIncludesAndExcludes",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.ResourceHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registerWithReachableTypeCondition",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.ResourceHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registerType",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.ResourceHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registerResourceBundle",
      "tail_type": "apiFunction"
    },
    {
      "head": "registerExactMatch",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerWildcardAtTheBeginningPattern",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerWildcardInTheMiddlePattern",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerWildcardAtTheEndPattern",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerPatternWithIncludesAndExcludes",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerWithReachableTypeCondition",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerType",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerResourceBundle",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedRepeatableAnnotationsWithContainerWithMultipleAttributes()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "findMergedRepeatableAnnotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedRepeatableAnnotationsWithContainerWithMultipleAttributes()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedRepeatableAnnotationsWithContainerWithMultipleAttributes()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedRepeatableAnnotationsWithContainerWithMultipleAttributes()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedRepeatableAnnotationsWithContainerWithMultipleAttributes()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtils",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedRepeatableAnnotationsWithContainerWithMultipleAttributes()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "StandardRepeatableWithContainerWithMultipleAttributesTestCase",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedRepeatableAnnotationsWithContainerWithMultipleAttributes()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "StandardRepeatableWithContainerWithMultipleAttributes",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.TransactionalComponentClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "transaction management",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.TransactionalComponentClass",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "class must be annotated with @Transactional",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.TransactionalComponentClass",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "components requiring transactional behavior",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.TransactionalComponentClass",
      "head_type": "class",
      "relation": "have",
      "tail": "sample code demonstrating transactional component",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.TransactionalComponentClass",
      "head_type": "class",
      "relation": "have",
      "tail": "explanation of transaction management concepts",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.TransactionalComponentClass",
      "head_type": "class",
      "relation": "have",
      "tail": "design principles behind transactional components",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.TransactionalComponentClass",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.transaction.annotation.Transactional",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#javaWhenJavaxAnnotationReturnsTrue()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "javaWhenJavaxAnnotationReturnsTrue",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#javaWhenJavaxAnnotationReturnsTrue()",
      "head_type": "method",
      "relation": "have",
      "tail": "javaWhenJavaxAnnotationReturnsTrue",
      "tail_type": "useSampleCode"
    },
    {
      "head": "javaWhenJavaxAnnotationReturnsTrue",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotationFilterTests#javaWhenJavaxAnnotationReturnsTrue()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnClassScansAnnotations()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scanning annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnClassScansAnnotations()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "scanning annotations on class",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnClassScansAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "void typeHierarchyStrategyOnClassScansAnnotations() {\n    Class<?> source = WithSingleAnnotation.class;\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\");\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnClassScansAnnotations()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnClassScansAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "This method tests the scanning of annotations on a class using a type hierarchy strategy.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnClassScansAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "The design principle is to ensure that annotations on a class are correctly scanned and identified using the type hierarchy strategy.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnMethodWhenHasInterfaceScansOnlyDirect()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": " Annotations Scanning",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnMethodWhenHasInterfaceScansOnlyDirect()",
      "head_type": "method",
      "relation": "have",
      "tail": " Annotations Scanning",
      "tail_type": "useSampleCode"
    },
    {
      "head": " Annotations Scanning",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodHierarchyScansInCorrectOrder()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scan annotations in method hierarchy",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodHierarchyScansInCorrectOrder()",
      "head_type": "method",
      "relation": "have",
      "tail": "void typeHierarchyStrategyOnMethodHierarchyScansInCorrectOrder() { Method source = methodFrom(WithHierarchy.class); assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\", \"1:TestAnnotation5\", \"1:TestInheritedAnnotation5\", \"2:TestAnnotation6\", \"3:TestAnnotation2\", \"3:TestInheritedAnnotation2\", \"4:TestAnnotation3\", \"5:TestAnnotation4\"); }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodHierarchyScansInCorrectOrder()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "scan annotations in method hierarchy",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests",
      "head_type": "class",
      "relation": "have",
      "tail": "void typeHierarchyStrategyOnMethodHierarchyScansInCorrectOrder() { Method source = methodFrom(WithHierarchy.class); assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\", \"1:TestAnnotation5\", \"1:TestInheritedAnnotation5\", \"2:TestAnnotation6\", \"3:TestAnnotation2\", \"3:TestInheritedAnnotation2\", \"4:TestAnnotation3\", \"5:TestAnnotation4\"); }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWithGenericParameterOverrideScansAnnotations()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scan annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWithGenericParameterOverrideScansAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "void typeHierarchyStrategyOnMethodWithGenericParameterOverrideScansAnnotations() {\n    Method source = ReflectionUtils.findMethod(GenericOverride.class, \"method\", String.class);\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\", \"1:TestAnnotation2\");\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWithGenericParameterOverrideScansAnnotations()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWithGenericParameterOverrideScansAnnotations()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "GenericOverride",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWithGenericParameterOverrideScansAnnotations()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "ReflectionUtils",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWithGenericParameterOverrideScansAnnotations()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "SearchStrategy",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWithGenericParameterOverrideScansAnnotations()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "TestAnnotation1",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWithGenericParameterOverrideScansAnnotations()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "TestAnnotation2",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.SingleInterface",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "testAnnotationUsage",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.SingleInterface",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "testInheritedAnnotationUsage",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.SingleInterface",
      "head_type": "class",
      "relation": "have",
      "tail": "void method();",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.SingleInterface",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SingleInterface",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#resolveMirrorsWhenAliasPairResolves()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "resolveMirrors",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#resolveMirrorsWhenAliasPairResolves()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "aliasPairConstraint",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#resolveMirrorsWhenAliasPairResolves()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "aliasPairUsage",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#resolveMirrorsWhenAliasPairResolves()",
      "head_type": "method",
      "relation": "have",
      "tail": "resolveMirrorsSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#resolveMirrorsWhenAliasPairResolves()",
      "head_type": "method",
      "relation": "have",
      "tail": "aliasPairRelatedConcept",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#resolveMirrorsWhenAliasPairResolves()",
      "head_type": "method",
      "relation": "have",
      "tail": "aliasPairDesignPrinciple",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#resolveMirrorsWhenAliasPairResolves()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationTypeMappings",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#resolveMirrorsWhenHasSameValuesUsesFirst()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "resolveMirrors",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#resolveMirrorsWhenHasSameValuesUsesFirst()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "sameValuesConstraint",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#resolveMirrorsWhenHasSameValuesUsesFirst()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "sameValuesUsageScenario",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#resolveMirrorsWhenHasSameValuesUsesFirst()",
      "head_type": "method",
      "relation": "have",
      "tail": "resolveMirrorsSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "resolveMirrorsSampleCode",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationTypeMapping",
      "tail_type": "class"
    },
    {
      "head": "resolveMirrorsSampleCode",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.WithSameValueAliasPair",
      "tail_type": "class"
    },
    {
      "head": "resolveMirrorsSampleCode",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AliasPair",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#resolveMirrorsWhenHasSameValuesUsesFirst()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#resolveMirrorsWhenHasSameValuesUsesFirst()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#getRepeatableAnnotationsDeclaredOnMultipleSuperclasses()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "getRepeatableAnnotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#getRepeatableAnnotationsDeclaredOnMultipleSuperclasses()",
      "head_type": "method",
      "relation": "have",
      "tail": "getRepeatableAnnotations sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getRepeatableAnnotations sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "getRepeatableAnnotations sample code content",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests#getRepeatableAnnotationsDeclaredOnMultipleSuperclasses()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "related concept interpretation for AnnotationUtilsTests",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "related concept interpretation for AnnotationUtilsTests",
      "head_type": "relatedConceptInterpretation",
      "relation": "have",
      "tail": "related concept interpretation content",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "design principle interpretation for AnnotationUtilsTests",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "design principle interpretation for AnnotationUtilsTests",
      "head_type": "designPrincipleInterpretation",
      "relation": "have",
      "tail": "design principle interpretation content",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithoutAttributeAliases()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "synthesizeAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithoutAttributeAliases()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "getAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithoutAttributeAliases()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "collectionsSingletonMap",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithoutAttributeAliases()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "assertThat",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithoutAttributeAliases()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "isNotNull",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithoutAttributeAliases()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "isNotSameAs",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithoutAttributeAliases()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "isEqualTo",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithoutAttributeAliases()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "as",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithoutAttributeAliases()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "value",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithoutAttributeAliases()",
      "head_type": "method",
      "relation": "have",
      "tail": "synthesizeAnnotationFromMapWithoutAttributeAliasesSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "synthesizeAnnotationFromMapWithoutAttributeAliasesSampleCode",
      "head_type": "useSampleCode",
      "relation": "haveFunction",
      "tail": "synthesizeAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "synthesizeAnnotationFromMapWithoutAttributeAliasesSampleCode",
      "head_type": "useSampleCode",
      "relation": "haveFunction",
      "tail": "getAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "synthesizeAnnotationFromMapWithoutAttributeAliasesSampleCode",
      "head_type": "useSampleCode",
      "relation": "haveFunction",
      "tail": "collectionsSingletonMap",
      "tail_type": "apiFunction"
    },
    {
      "head": "synthesizeAnnotationFromMapWithoutAttributeAliasesSampleCode",
      "head_type": "useSampleCode",
      "relation": "haveFunction",
      "tail": "assertThat",
      "tail_type": "apiFunction"
    },
    {
      "head": "synthesizeAnnotationFromMapWithoutAttributeAliasesSampleCode",
      "head_type": "useSampleCode",
      "relation": "haveFunction",
      "tail": "isNotNull",
      "tail_type": "apiFunction"
    },
    {
      "head": "synthesizeAnnotationFromMapWithoutAttributeAliasesSampleCode",
      "head_type": "useSampleCode",
      "relation": "haveFunction",
      "tail": "isNotSameAs",
      "tail_type": "apiFunction"
    },
    {
      "head": "synthesizeAnnotationFromMapWithoutAttributeAliasesSampleCode",
      "head_type": "useSampleCode",
      "relation": "haveFunction",
      "tail": "isEqualTo",
      "tail_type": "apiFunction"
    },
    {
      "head": "synthesizeAnnotationFromMapWithoutAttributeAliasesSampleCode",
      "head_type": "useSampleCode",
      "relation": "haveFunction",
      "tail": "as",
      "tail_type": "apiFunction"
    },
    {
      "head": "synthesizeAnnotationFromMapWithoutAttributeAliasesSampleCode",
      "head_type": "useSampleCode",
      "relation": "haveFunction",
      "tail": "value",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithoutAttributeAliases()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithoutAttributeAliases()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "Component",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithoutAttributeAliases()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "WebController",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithoutAttributeAliases()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "synthesizeAnnotationFromMapWithoutAttributeAliasesSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithMissingAttributeValue()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "synthesizeAnnotationFromMap",
      "tail_type": "apiFunction"
    },
    {
      "head": "synthesizeAnnotationFromMap",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithMissingAttributeValue()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithMissingAttributeValue()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.SubSubClassWithInheritedAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "Inherited Annotation Processing",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.SubSubClassWithInheritedAnnotation",
      "head_type": "class",
      "relation": "have",
      "tail": "Inherited annotations are annotations that are inherited from parent classes or interfaces. They are used to provide metadata about the elements in the code.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SubSubClassWithInheritedAnnotation",
      "head_type": "class",
      "relation": "have",
      "tail": "Design Principle: Inheritance and Annotation Handling",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SubSubClassWithInheritedAnnotation",
      "head_type": "class",
      "relation": "have",
      "tail": "package org.springframework.core.annotation;\n\nimport java.lang.annotation.Inherited;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\n\n@Retention(RetentionPolicy.RUNTIME)\n@Inherited\npublic @interface SubSubClassWithInheritedAnnotation {\n    String value() default \"default\";\n}\n\n// Usage Example\npackage com.example;\n\nimport org.springframework.core.annotation.SubSubClassWithInheritedAnnotation;\n\n@SubSubClassWithInheritedAnnotation(value = \"example\")\npublic class ExampleClass {\n    // class content\n}\n",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedInterface",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "void fromInterfaceImplementedByRoot()",
      "tail_type": "apiFunction"
    },
    {
      "head": "void fromInterfaceImplementedByRoot()",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "@Order(0)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.NonInheritedAnnotationClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "Non-inherited annotation handling",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.NonInheritedAnnotationClass",
      "head_type": "class",
      "relation": "have",
      "tail": "Used to handle non-inherited annotations in Spring framework",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.NonInheritedAnnotationClass",
      "head_type": "class",
      "relation": "have",
      "tail": "Ensures that annotations are not inherited by subclasses",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.NonInheritedAnnotationClass",
      "head_type": "class",
      "relation": "have",
      "tail": "package org.springframework.core.annotation; public class NonInheritedAnnotationClass { // Example usage of handling non-inherited annotations }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SimpleReflectiveProcessorTests#registerReflectiveHintsForField()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerReflectiveHints",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SimpleReflectiveProcessorTests#registerReflectiveHintsForField()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerReflectiveHintsForFieldUseSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerReflectiveHintsForFieldUseSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "registerReflectiveHintsForFieldSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SimpleReflectiveProcessorTests#registerReflectiveHintsForField()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "SampleBean",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SimpleReflectiveProcessorTests#registerReflectiveHintsForField()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "processor",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SimpleReflectiveProcessorTests#registerReflectiveHintsForField()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "hints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SimpleReflectiveProcessorTests#registerReflectiveHintsForField()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "typeHint",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SimpleReflectiveProcessorTests#registerReflectiveHintsForField()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "fieldHint",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassWithCycles",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getSampleClassWithCycles()",
      "tail_type": "apiFunction"
    },
    {
      "head": "getSampleClassWithCycles()",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.aot.hint.SampleClassWithCycles",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassWithInheritedJsonProperty",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": " property handling",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassWithInheritedJsonProperty",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "inherited properties must be explicitly declared",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassWithInheritedJsonProperty",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "handling inherited  properties in AOT processing",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassWithInheritedJsonProperty",
      "head_type": "class",
      "relation": "have",
      "tail": "sample code for handling inherited  properties",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassWithInheritedJsonProperty",
      "head_type": "class",
      "relation": "have",
      "tail": "interpretation of inherited  properties in AOT",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassWithInheritedJsonProperty",
      "head_type": "class",
      "relation": "have",
      "tail": "design principles for handling inherited  properties",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassWithInheritedJsonProperty",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.RuntimeHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.FirstTestInterface",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "org.springframework.aot.hint.predicate.FirstTestInterface",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithAnyMemberCategoryMatchesCategory()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "reflection type registration",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithAnyMemberCategoryMatchesCategory()",
      "head_type": "method",
      "relation": "have",
      "tail": "runtimeHints.reflection().registerType(SampleClass.class, MemberCategory.INTROSPECT_PUBLIC_METHODS, MemberCategory.INVOKE_PUBLIC_METHODS);",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithAnyMemberCategoryMatchesCategory()",
      "head_type": "method",
      "relation": "have",
      "tail": "This method is used to register types for reflection with specific member categories, and then it asserts that the predicate matches when any member category is introspected or invoked publicly.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithAnyMemberCategoryMatchesCategory()",
      "head_type": "method",
      "relation": "have",
      "tail": "The design principle behind this method is to ensure that the reflection type registration is comprehensive and covers all necessary member categories for introspection and invocation, thereby enhancing the runtime performance and flexibility of the application.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor#privateConstructorInvocationDoesNotMatchIntrospectPublicConstructors()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "introspectPublicConstructors",
      "tail_type": "apiFunction"
    },
    {
      "head": "introspectPublicConstructors",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "introspectPublicConstructors",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "introspectPublicConstructors",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "introspectPublicConstructors",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "privateConstructorConstraint",
      "tail_type": "useConstraint"
    },
    {
      "head": "introspectPublicConstructors",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "privateConstructorScenario",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor#privateConstructorInvocationDoesNotMatchIntrospectPublicConstructors()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.predicate.ReflectionOnConstructor",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodIntrospectionMatchesMethodHint()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "methodIntrospection",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodIntrospectionMatchesMethodHint()",
      "head_type": "method",
      "relation": "have",
      "tail": "methodIntrospectionMatchesMethodHintSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "methodIntrospectionMatchesMethodHintSampleCode",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "SampleClass",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodIntrospectionMatchesMethodHint()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "SampleClass",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#resourcePatternDoesNotMatchResourceName()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "resourcePatternMatching",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#resourcePatternDoesNotMatchResourceName()",
      "head_type": "method",
      "relation": "have",
      "tail": "void resourcePatternDoesNotMatchResourceName() {\n    this.runtimeHints.resources().registerPattern(\"test/spring.*\");\n    assertPredicateDoesNotMatch(resources.forResource(\"/test/other.properties\"));\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#resourcePatternDoesNotMatchResourceName()",
      "tail_type": "method"
    },
    {
      "head": "resourcePatternMatching",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "matching resource patterns in tests",
      "tail_type": "useScenario"
    },
    {
      "head": "resourcePatternMatching",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "pattern registration must precede resource matching",
      "tail_type": "useConstraint"
    },
    {
      "head": "resourcePatternMatching",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "related to resource hinting and pattern matching in Spring AOT",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "resourcePatternMatching",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "design principle focuses on flexibility and testability in resource pattern handling",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#resourcePatternMatchesTypeAndAbsoluteResourceName()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "resourcePatternMatchesTypeAndAbsoluteResourceName",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#resourcePatternMatchesTypeAndAbsoluteResourceName()",
      "head_type": "method",
      "relation": "have",
      "tail": "void resourcePatternMatchesTypeAndAbsoluteResourceName() { this.runtimeHints.resources().registerPattern(\"spring.*\"); assertPredicateMatches(resources.forResource(TypeReference.of(getClass()), \"/spring.properties\")); }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#resourcePatternMatchesTypeAndAbsoluteResourceName()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#registerTypesAppliesTheSameHints()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerTypesAppliesTheSameHints",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#registerTypesAppliesTheSameHints()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerTypesAppliesTheSameHints useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerTypesAppliesTheSameHints useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "registerTypesAppliesTheSameHints sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#registerTypesAppliesTheSameHints()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "ReflectionHintsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#registerTypesAppliesTheSameHints()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerTypesAppliesTheSameHints relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "registerTypesAppliesTheSameHints relatedConceptInterpretation",
      "head_type": "relatedConceptInterpretation",
      "relation": "have",
      "tail": "registerTypesAppliesTheSameHints related concept interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#registerTypesAppliesTheSameHints()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerTypesAppliesTheSameHints designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "registerTypesAppliesTheSameHints designPrincipleInterpretation",
      "head_type": "designPrincipleInterpretation",
      "relation": "have",
      "tail": "registerTypesAppliesTheSameHints design principle interpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.Inner",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "inner class handling",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.Inner",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "inner class must be static",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.aot.hint.Inner",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "used in reflection scenarios",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.Inner",
      "head_type": "class",
      "relation": "have",
      "tail": "org.springframework.aot.hint.Inner is used to handle inner classes in Spring's ahead-of-time processing.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.Inner",
      "head_type": "class",
      "relation": "have",
      "tail": "Design principle focuses on reducing reflection costs by pre-processing inner classes.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.Inner",
      "head_type": "class",
      "relation": "have",
      "tail": "package org.springframework.aot.hint; public class Inner { // Example usage in Spring AOT processing }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.ResourcePatternHintTests#patternWithLeadingSlashIsRejected()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "validateResourcePattern",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ResourcePatternHintTests#patternWithLeadingSlashIsRejected()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "resourcePatternMustNotStartWithSlash",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.aot.hint.ResourcePatternHintTests#patternWithLeadingSlashIsRejected()",
      "head_type": "method",
      "relation": "have",
      "tail": "ResourcePatternHintConstruction",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.ResourcePatternHintTests#patternWithLeadingSlashIsRejected()",
      "head_type": "method",
      "relation": "have",
      "tail": "ResourcePatternHintConstructionSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.ResourcePatternHintTests#patternWithLeadingSlashIsRejected()",
      "head_type": "method",
      "relation": "have",
      "tail": "ResourcePatternHintConstructionRelatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.ResourcePatternHintTests#patternWithLeadingSlashIsRejected()",
      "head_type": "method",
      "relation": "have",
      "tail": "ResourcePatternHintConstructionDesignPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.ResourcePatternHintTests#patternWithLeadingSlashIsRejected()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "ResourcePatternHint",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.SimpleTypeReferenceTests#typeReferenceInRootPackage()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "typeReferenceInRootPackage",
      "tail_type": "apiFunction"
    },
    {
      "head": "typeReferenceInRootPackage",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "typeReferenceInRootPackageSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "typeReferenceInRootPackageSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "typeReferenceInRootPackageSampleCodeContent",
      "tail_type": "useSampleCodeContent"
    },
    {
      "head": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests#registerWithMultipleFilePrefixes()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerWithMultipleFilePrefixes",
      "tail_type": "apiFunction"
    },
    {
      "head": "registerWithMultipleFilePrefixes",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "registerWithMultipleFilePrefixesSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerWithMultipleFilePrefixesSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "registerWithMultipleFilePrefixesSampleCodeContent",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.support.SpringPropertiesRuntimeHintsTests#springPropertiesResourceHasHints()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "springPropertiesResourceHasHints",
      "tail_type": "apiFunction"
    },
    {
      "head": "springPropertiesResourceHasHints",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "RuntimeHintsPredicates.resource().forResource(\"spring.properties\")",
      "tail_type": "useSampleCode"
    },
    {
      "head": "springPropertiesResourceHasHints",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "This method tests whether the spring.properties resource has hints.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "springPropertiesResourceHasHints",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "The method uses RuntimeHintsPredicates to check resource hints.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#createWithNullTypeReference()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "TypeHint creation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#createWithNullTypeReference()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "Null TypeReference prohibition",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#createWithNullTypeReference()",
      "head_type": "method",
      "relation": "have",
      "tail": "TypeHint usage example",
      "tail_type": "useSampleCode"
    },
    {
      "head": "TypeHint usage example",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "Complete sample code for creating TypeHint with null reference",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.TypeHint",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#createWithNullTypeReference()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.TypeHint",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#createWithNullTypeReference()",
      "head_type": "method",
      "relation": "have",
      "tail": "Explanation of TypeHint and its usage",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#createWithNullTypeReference()",
      "head_type": "method",
      "relation": "have",
      "tail": "Design principles behind TypeHint",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#createWithField()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "createWithField",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#createWithField()",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.aot.hint.TypeHintTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.TypeHint",
      "tail_type": "class"
    },
    {
      "head": "createWithField",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "org.springframework.aot.hint.TypeHint",
      "tail_type": "class"
    },
    {
      "head": "createWithField",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "org.springframework.aot.hint.TypeReference",
      "tail_type": "class"
    },
    {
      "head": "createWithField",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "java.lang.String",
      "tail_type": "class"
    },
    {
      "head": "createWithField",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "assertFieldHint",
      "tail_type": "apiFunction"
    },
    {
      "head": "createWithField",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "assertThat",
      "tail_type": "apiFunction"
    },
    {
      "head": "createWithField",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "fieldHint.getName()",
      "tail_type": "apiFunction"
    },
    {
      "head": "createWithField",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "isEqualTo",
      "tail_type": "apiFunction"
    },
    {
      "head": "createWithField",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "value",
      "tail_type": "useScenario"
    },
    {
      "head": "createWithField",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "org.springframework.aot.hint.TypeHintTests#createWithField()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "createWithField",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "org.springframework.aot.hint.TypeHintTests",
      "tail_type": "class"
    },
    {
      "head": "createWithField",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "org.springframework.aot.hint.TypeHint",
      "tail_type": "class"
    },
    {
      "head": "createWithField",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "org.springframework.aot.hint.TypeReference",
      "tail_type": "class"
    },
    {
      "head": "createWithField",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "java.lang.String",
      "tail_type": "class"
    },
    {
      "head": "createWithField",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "assertFieldHint",
      "tail_type": "apiFunction"
    },
    {
      "head": "createWithField",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "assertThat",
      "tail_type": "apiFunction"
    },
    {
      "head": "createWithField",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "fieldHint.getName()",
      "tail_type": "apiFunction"
    },
    {
      "head": "createWithField",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "isEqualTo",
      "tail_type": "apiFunction"
    },
    {
      "head": "createWithField",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "value",
      "tail_type": "useScenario"
    },
    {
      "head": "createWithField",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "org.springframework.aot.hint.TypeHintTests#createWithField()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#builtWithAppliesMemberCategories()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "TypeHint building",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#builtWithAppliesMemberCategories()",
      "head_type": "method",
      "relation": "have",
      "tail": "TypeHint building sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "TypeHint building sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "TypeHint building sample code content",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#builtWithAppliesMemberCategories()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.TypeHint",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.TypeHint",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "TypeHint building",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.TypeReferenceTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "typeReferenceWithClassName",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.TypeReferenceTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "typeReferenceWithInnerClassName",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.TypeReferenceTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "typeReferenceWithNestedInnerClassName",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.TypeReferenceTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "equalsWithIdenticalNameIsTrue",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.TypeReferenceTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "equalsWithNonTypeReferenceIsFalse",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.TypeReferenceTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "toStringUsesCanonicalName",
      "tail_type": "apiFunction"
    },
    {
      "head": "typeReferenceWithClassName",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "typeReferenceWithInnerClassName",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "typeReferenceWithNestedInnerClassName",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "equalsWithIdenticalNameIsTrue",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "equalsWithNonTypeReferenceIsFalse",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "toStringUsesCanonicalName",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.TypeReferenceTests",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.TypeReferenceTests",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "typeReferenceWithClassName",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "useScenario",
      "tail_type": "useScenario"
    },
    {
      "head": "typeReferenceWithInnerClassName",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "useScenario",
      "tail_type": "useScenario"
    },
    {
      "head": "typeReferenceWithNestedInnerClassName",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "useScenario",
      "tail_type": "useScenario"
    },
    {
      "head": "equalsWithIdenticalNameIsTrue",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "useScenario",
      "tail_type": "useScenario"
    },
    {
      "head": "equalsWithNonTypeReferenceIsFalse",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "useScenario",
      "tail_type": "useScenario"
    },
    {
      "head": "toStringUsesCanonicalName",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "useScenario",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests#writeObjectWithNestedEmptyObject()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "writeObjectWithNestedEmptyObject",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests#writeObjectWithNestedEmptyObject()",
      "head_type": "method",
      "relation": "have",
      "tail": "writeObjectWithNestedEmptyObjectSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "writeObjectWithNestedEmptyObjectSampleCode",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.aot.nativex.BasicJsonWriterTests#writeObjectWithNestedEmptyObject()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.aot.nativex.ResourceHintsTests#registerExactMatch()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerPattern",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.ResourceHintsTests#registerExactMatch()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "assertEquals",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.ResourceHintsTests#registerExactMatch()",
      "head_type": "method",
      "relation": "have",
      "tail": "RuntimeHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.ResourceHintsTests#registerExactMatch()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerPattern Method Usage",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerPattern Method Usage",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "registerPattern Sample Code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.nativex.ResourceHintsTests#registerExactMatch()",
      "head_type": "method",
      "relation": "have",
      "tail": "ResourceHintsTests",
      "tail_type": "class"
    },
    {
      "head": "ResourceHintsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.aot.nativex.ResourceHintsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.ResourceHintsTests#registerExactMatch()",
      "head_type": "method",
      "relation": "have",
      "tail": "ResourceHints",
      "tail_type": "class"
    },
    {
      "head": "ResourceHints",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.aot.nativex.ResourceHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getMetaAnnotationTypesOnClassWithMetaDepth1",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMetaAnnotationTypesOnClassWithMetaDepth1",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "getMetaAnnotationTypesOnClassWithMetaDepth1",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getMetaAnnotationTypesOnClassWithMetaDepth1() Sample Code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getMetaAnnotationTypesOnClassWithMetaDepth1() Sample Code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "Complete Example for getMetaAnnotationTypesOnClassWithMetaDepth1()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getAllAnnotationAttributesOnJavaxType()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "getAllAnnotationAttributes",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getAllAnnotationAttributesOnJavaxType()",
      "head_type": "method",
      "relation": "have",
      "tail": "��取注解属性",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getAllAnnotationAttributesOnJavaxType()",
      "head_type": "method",
      "relation": "have",
      "tail": "注解属性获取示例代码",
      "tail_type": "useSampleCode"
    },
    {
      "head": "注解属性获取示例代码",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "获取注解属性",
      "tail_type": "apiFunction"
    },
    {
      "head": "获取注解属性",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "获取注解属性",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "获取注解属性",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "注解属性获取示例代码",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getMergedAnnotationAttributesFromInterfaceImplementedBySuperclass()",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedAnnotationAttributesFromInterfaceImplementedBySuperclass()",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getMergedAnnotationAttributesFromInterfaceImplementedBySuperclass() useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getMergedAnnotationAttributesFromInterfaceImplementedBySuperclass() useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests getMergedAnnotationAttributesFromInterfaceImplementedBySuperclass() sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getMergedAnnotationAttributesWithAliasedValueComposedAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedAnnotationAttributesWithAliasedValueComposedAnnotation",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "getMergedAnnotationAttributesWithAliasedValueComposedAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getMergedAnnotationAttributesWithAliasedValueComposedAnnotation() { ... }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "getMergedAnnotationAttributesWithAliasedValueComposedAnnotation() { ... }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getMergedAnnotationAttributesWithAliasedValueComposedAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "getMergedAnnotationAttributesWithAliasedValueComposedAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getMergedAnnotationWithImplicitAliasesInMetaAnnotationOnComposedAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedAnnotationWithImplicitAliasesInMetaAnnotationOnComposedAnnotation",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "ComposedImplicitAliasesContextConfigClass",
      "tail_type": "class"
    },
    {
      "head": "getMergedAnnotationWithImplicitAliasesInMetaAnnotationOnComposedAnnotation",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "ImplicitAliasesContextConfig",
      "tail_type": "class"
    },
    {
      "head": "getMergedAnnotationWithImplicitAliasesInMetaAnnotationOnComposedAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getMergedAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedAnnotationWithImplicitAliasesInMetaAnnotationOnComposedAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "asArray",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedAnnotationWithImplicitAliasesInMetaAnnotationOnComposedAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "assertThat",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedAnnotationWithImplicitAliasesInMetaAnnotationOnComposedAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "isAnnotated",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedAnnotationWithImplicitAliasesInMetaAnnotationOnComposedAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "groovyScripts",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedAnnotationWithImplicitAliasesInMetaAnnotationOnComposedAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "xmlFiles",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedAnnotationWithImplicitAliasesInMetaAnnotationOnComposedAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "locations",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedAnnotationWithImplicitAliasesInMetaAnnotationOnComposedAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "value",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedAnnotationWithImplicitAliasesInMetaAnnotationOnComposedAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getMergedAnnotationWithImplicitAliasesInMetaAnnotationOnComposedAnnotation()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getMergedAnnotationWithImplicitAliasesInMetaAnnotationOnComposedAnnotation()",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "ComposedImplicitAliasesContextConfigClass",
      "tail_type": "class"
    },
    {
      "head": "getMergedAnnotationWithImplicitAliasesInMetaAnnotationOnComposedAnnotation()",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "ImplicitAliasesContextConfig",
      "tail_type": "class"
    },
    {
      "head": "getMergedAnnotationWithImplicitAliasesInMetaAnnotationOnComposedAnnotation()",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "getMergedAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedAnnotationWithImplicitAliasesInMetaAnnotationOnComposedAnnotation()",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "asArray",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedAnnotationWithImplicitAliasesInMetaAnnotationOnComposedAnnotation()",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "assertThat",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedAnnotationWithImplicitAliasesInMetaAnnotationOnComposedAnnotation()",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "isAnnotated",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedAnnotationWithImplicitAliasesInMetaAnnotationOnComposedAnnotation()",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "groovyScripts",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedAnnotationWithImplicitAliasesInMetaAnnotationOnComposedAnnotation()",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "xmlFiles",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedAnnotationWithImplicitAliasesInMetaAnnotationOnComposedAnnotation()",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "locations",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedAnnotationWithImplicitAliasesInMetaAnnotationOnComposedAnnotation()",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "value",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.SubClassWithInheritedAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "SubClassWithInheritedAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.SubClassWithInheritedAnnotation",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SubClassWithInheritedAnnotation",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SubClassWithInheritedAnnotation",
      "head_type": "class",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.ClassWithInheritedComposedAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "Inherited Composed Annotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.ClassWithInheritedComposedAnnotation",
      "head_type": "class",
      "relation": "have",
      "tail": "org.springframework.core.annotation.ClassWithInheritedComposedAnnotation",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.InvalidConventionBasedComposedContextConfigClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "context configuration",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.InvalidConventionBasedComposedContextConfigClass",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "convention-based configuration constraints",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.InvalidConventionBasedComposedContextConfigClass",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "Spring context configuration scenarios",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.InvalidConventionBasedComposedContextConfigClass",
      "head_type": "class",
      "relation": "have",
      "tail": "context configuration sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.InvalidConventionBasedComposedContextConfigClass",
      "head_type": "class",
      "relation": "have",
      "tail": "context configuration concept interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.InvalidConventionBasedComposedContextConfigClass",
      "head_type": "class",
      "relation": "have",
      "tail": "design principles of context configuration",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.InvalidConventionBasedComposedContextConfigClass",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "Spring Framework",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AliasedComposedContextConfigClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "context configuration",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AliasedComposedContextConfigClass",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "alias uniqueness",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.AliasedComposedContextConfigClass",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "multiple context configurations",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AliasedComposedContextConfigClass",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AliasedComposedContextConfigClass",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AliasedComposedContextConfigClass",
      "head_type": "class",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AliasedComposedContextConfigClass",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.context.annotation.ConfigurationClassPostProcessor",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.TransactionalServiceImpl",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "execute transactional operations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.TransactionalServiceImpl",
      "head_type": "class",
      "relation": "have",
      "tail": "org.springframework.core.annotation.TransactionalServiceImpl is a service implementation that handles transactional operations.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.TransactionalServiceImpl",
      "head_type": "class",
      "relation": "have",
      "tail": "The design principle behind org.springframework.core.annotation.TransactionalServiceImpl is to provide a centralized service for managing transactional operations, ensuring data integrity and consistency across various business processes.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.TransactionalServiceImpl",
      "head_type": "class",
      "relation": "have",
      "tail": "public Object doIt() {\n    return null;\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.A",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "org.springframework.core.annotation.A",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnBridgedMethodScansAnnotations()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scanning annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnBridgedMethodScansAnnotations()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "bridged method handling",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnBridgedMethodScansAnnotations()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "direct search strategy",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnBridgedMethodScansAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnBridgedMethodScansAnnotations()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnBridgedMethodScansAnnotations()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "BridgedMethod",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnBridgedMethodScansAnnotations()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "SearchStrategy",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnBridgedMethodScansAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnBridgedMethodScansAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#scan(AnnotatedElement,SearchStrategy,Predicate<Class<?>>)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scan",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#scan(AnnotatedElement,SearchStrategy,Predicate<Class<?>>)",
      "head_type": "method",
      "relation": "have",
      "tail": "scan this, element, searchStrategy, searchEnclosingClass, (criteria, aggregateIndex, source, annotations) -> { trackIndexedAnnotations(aggregateIndex, annotations, results); // continue searching return null; }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#scan(AnnotatedElement,SearchStrategy,Predicate<Class<?>>)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests",
      "head_type": "class",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests#scan(AnnotatedElement,SearchStrategy,Predicate<Class<?>>)",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.core.annotation.SingleSuperclass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "SingleSuperclass",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.SingleSuperclass",
      "head_type": "class",
      "relation": "have",
      "tail": "SingleSuperclass is used to indicate that a class has only one superclass.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SingleSuperclass",
      "head_type": "class",
      "relation": "have",
      "tail": "This is a part of Spring Framework's annotations to manage class metadata.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SingleSuperclass",
      "head_type": "class",
      "relation": "have",
      "tail": "public void method() {\n    // Example method within a class annotated with SingleSuperclass\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.BridgedMethod",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "bridged method",
      "tail_type": "apiFunction"
    },
    {
      "head": "bridged method",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "bridged method",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "bridged method",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenHasAliasForWithBothValueAndAttributeThrowsException()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "Annotation Type Mapping",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenHasAliasForWithBothValueAndAttributeThrowsException()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "Alias Conflict Constraint",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenHasAliasForWithBothValueAndAttributeThrowsException()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "Annotation Alias Conflict Scenario",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenHasAliasForWithBothValueAndAttributeThrowsException()",
      "head_type": "method",
      "relation": "have",
      "tail": "Annotation Alias Conflict Sample Code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenHasAliasForWithBothValueAndAttributeThrowsException()",
      "head_type": "method",
      "relation": "have",
      "tail": "Annotation Alias Conflict Concept Interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenHasAliasForWithBothValueAndAttributeThrowsException()",
      "head_type": "method",
      "relation": "have",
      "tail": "Annotation Alias Conflict Design Principle Interpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenHasAliasForWithBothValueAndAttributeThrowsException()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationTypeMappings",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getMetaTypeReturnsTypes()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "getMetaTypeReturnsTypes",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getMetaTypeReturnsTypes()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationTypeMappings",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getMetaTypeReturnsTypes()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationTypeMapping",
      "tail_type": "class"
    },
    {
      "head": "getMetaTypeReturnsTypes",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getMetaTypeReturnsTypes returns types",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getMetaTypeReturnsTypes returns types",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "package com.example.demo; import org.springframework.core.annotation.AnnotationTypeMappings; import org.springframework.core.annotation.AnnotationTypeMapping; import org.junit.Test; import static org.assertj.core.api.Assertions.assertThat; public class AnnotationTypeMappingsTests { @Test public void getMetaTypeReturnsTypes() { AnnotationTypeMappings mappings = AnnotationTypeMappings.forAnnotationType(ThreeDeepA.class); AnnotationTypeMapping mappingC = mappings.get(2); assertThat(mappingC.getMetaTypes()).containsExactly(ThreeDeepA.class, ThreeDeepB.class, ThreeDeepC.class); } }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getMetaTypeReturnsTypes()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "relatedConceptInterpretation",
      "head_type": "relatedConceptInterpretation",
      "relation": "have",
      "tail": "AnnotationTypeMappings is used to determine the types that an annotation is mapped to. The getMetaTypeReturnsTypes method checks if the getMetaTypes method of AnnotationTypeMapping returns the correct types.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getMetaTypeReturnsTypes()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "designPrincipleInterpretation",
      "head_type": "designPrincipleInterpretation",
      "relation": "have",
      "tail": "The design principle behind AnnotationTypeMappings is to provide a way to map annotations to their corresponding types. This is important for frameworks that use annotations for configuration or to drive certain behaviors.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getMirrorSetWhenThreeDeepReturnsMirrors()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "getMirrorSetWhenThreeDeepReturnsMirrors",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getMirrorSetWhenThreeDeepReturnsMirrors()",
      "head_type": "method",
      "relation": "have",
      "tail": "getMirrorSetWhenThreeDeepReturnsMirrors() useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getMirrorSetWhenThreeDeepReturnsMirrors() useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "package org.springframework.core.annotation;\n\nimport org.junit.jupiter.api.Test;\n\npublic class AnnotationTypeMappingsTests {\n\n    @Test\n    void getMirrorSetWhenThreeDeepReturnsMirrors() {\n        AnnotationTypeMappings mappings = AnnotationTypeMappings.forAnnotationType(ThreeDeepA.class);\n        AnnotationTypeMapping mappingA = mappings.get(0);\n        MirrorSets mirrorSetsA = mappingA.getMirrorSets();\n        assertThat(mirrorSetsA.size()).isEqualTo(2);\n        assertThat(getNames(mirrorSetsA.get(0))).containsExactly(\"a1\", \"a2\", \"a3\");\n        AnnotationTypeMapping mappingB = mappings.get(1);\n        MirrorSets mirrorSetsB = mappingB.getMirrorSets();\n        assertThat(mirrorSetsB.size()).isEqualTo(1);\n        assertThat(getNames(mirrorSetsB.get(0))).containsExactly(\"b1\", \"b2\");\n        AnnotationTypeMapping mappingC = mappings.get(2);\n        MirrorSets mirrorSetsC = mappingC.getMirrorSets();\n        assertThat(mirrorSetsC.size()).isEqualTo(0);\n    }\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getMirrorSetWhenThreeDeepReturnsMirrors()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.core.annotation.WithAliasPairA",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "annotationProcessing",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.WithAliasPairA",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "aliasUniqueness",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.WithAliasPairA",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "beanDefinition",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.WithAliasPairA",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.WithAliasPairA",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.WithAliasPairA",
      "head_type": "class",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.WithAliasPairA",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.context.annotation.Bean",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationFavorsMoreLocallyDeclaredComposedAnnotationsOverInheritedAnnotations()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "findClassAnnotationFavorsMoreLocallyDeclaredComposedAnnotationsOverInheritedAnnotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationFavorsMoreLocallyDeclaredComposedAnnotationsOverInheritedAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "since 4.0.3",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationFavorsMoreLocallyDeclaredComposedAnnotationsOverInheritedAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "since 4.0.3",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationFavorsMoreLocallyDeclaredComposedAnnotationsOverInheritedAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "since 4.0.3",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationFavorsMoreLocallyDeclaredComposedAnnotationsOverInheritedAnnotations()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnSubSubNonInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "findClassAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnSubSubNonInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "since 4.2",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnSubSubNonInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "findClassAnnotationOnSubSubNonInheritedAnnotationInterface sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnSubSubNonInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnSubSubNonInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "related concept interpretation for findClassAnnotationOnSubSubNonInheritedAnnotationInterface",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnSubSubNonInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "design principle interpretation for findClassAnnotationOnSubSubNonInheritedAnnotationInterface",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithNestedMap()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "synthesizeAnnotationFromMap",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithNestedMap()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "nestedMapModification",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithNestedMap()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "annotationSynthesis",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithNestedMap()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithNestedMap()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "ComponentScanSingleFilterClass",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithNestedMap()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "ComponentScanSingleFilter",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithNestedMap()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "AnnotationAttributes",
      "tail_type": "class"
    },
    {
      "head": "synthesizeAnnotationFromMap",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "nestedMapModification",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "annotationSynthesis",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithNestedMap()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithNullAttributeValue()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "synthesizeAnnotationFromMap",
      "tail_type": "apiFunction"
    },
    {
      "head": "synthesizeAnnotationFromMap",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "synthesizeAnnotationFromMap",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "synthesizeAnnotationFromMap",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "synthesizeAnnotationFromMap",
      "tail_type": "apiFunction"
    },
    {
      "head": "synthesizeAnnotationFromMap",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "nullAttributeValueScenario",
      "tail_type": "useScenario"
    },
    {
      "head": "synthesizeAnnotationFromMap",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "nullAttributeValueConstraint",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.aot.hint.annotation.RegistrationSimple",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registration",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.annotation.RegistrationSimple",
      "head_type": "class",
      "relation": "have",
      "tail": "org.springframework.aot.hint.annotation.RegistrationSimple is used for registering beans in Spring's ahead-of-time processing.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.annotation.RegistrationSimple",
      "head_type": "class",
      "relation": "have",
      "tail": "Design principle: Simplify the configuration and registration process for Spring beans.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.annotation.RegistrationSimple",
      "head_type": "class",
      "relation": "have",
      "tail": "package org.springframework.aot.hint.annotation;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface RegistrationSimple {\n    String name();\n    String[] aliases() default {};\n}\n",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithRecord()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerTypeForSerialization",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithRecord()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerTypeForSerializationWithRecord useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerTypeForSerializationWithRecord useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithRecord() sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithRecord()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithRecord()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "relatedConceptInterpretation",
      "head_type": "relatedConceptInterpretation",
      "relation": "have",
      "tail": "This method is used to register type hints for serialization with record types in Spring AOT.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithRecord()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "designPrincipleInterpretation",
      "head_type": "designPrincipleInterpretation",
      "relation": "have",
      "tail": "The design principle behind this method is to ensure that all necessary type hints are registered for proper serialization of record types during ahead-of-time processing.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.SampleExtendingClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "extendingClassFunctionality",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.SampleExtendingClass",
      "head_type": "class",
      "relation": "have",
      "tail": "sampleExtendingClassCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.SampleExtendingClass",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.TypeHint",
      "tail_type": "class"
    },
    {
      "head": "extendingClassFunctionality",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "extendingClassUsageScenario",
      "tail_type": "useScenario"
    },
    {
      "head": "extendingClassFunctionality",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "extendingClassConstraints",
      "tail_type": "useConstraint"
    },
    {
      "head": "extendingClassFunctionality",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "extendingClassRelatedConcepts",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "extendingClassFunctionality",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "extendingClassDesignPrinciples",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassWithSetter",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "setter method",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassWithSetter",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "unmanaged method",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassWithSetter",
      "head_type": "class",
      "relation": "have",
      "tail": "setter method sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassWithSetter",
      "head_type": "class",
      "relation": "have",
      "tail": "unmanaged method sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "setter method sample code",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "setter method",
      "tail_type": "apiFunction"
    },
    {
      "head": "unmanaged method sample code",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "unmanaged method",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.CustomDeserializer1",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "deserialize",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.CustomDeserializer1",
      "head_type": "class",
      "relation": "have",
      "tail": "constructor",
      "tail_type": "useSampleCode"
    },
    {
      "head": "deserialize",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "JsonParser p, DeserializationContext ctxt",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.CustomDeserializer1",
      "head_type": "class",
      "relation": "have",
      "tail": "constructor",
      "tail_type": "useSampleCode"
    },
    {
      "head": "constructor",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "public CustomDeserializer1() {\n    super(CustomDeserializer1.class);\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "deserialize",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "public LocalDate deserialize(JsonParser p, DeserializationContext ctxt) {\n    return null;\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "constructorInvocationDoesNotMatchIntrospectDeclaredConstructors",
      "tail_type": "apiFunction"
    },
    {
      "head": "constructorInvocationDoesNotMatchIntrospectDeclaredConstructors",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "runtimeHints.reflection().registerType(SampleClass.class, MemberCategory.INTROSPECT_DECLARED_CONSTRUCTORS);\nassertPredicateDoesNotMatch(reflection.onConstructorInvocation(publicConstructor));",
      "tail_type": "useSampleCode"
    },
    {
      "head": "useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "package com.example;\n\nimport org.springframework.aot.hint.RuntimeHints;\nimport org.springframework.aot.hint.TypeReference;\nimport org.springframework.aot.hint.MemberCategory;\n\npublic class SampleClass {\n    public SampleClass() {\n        // constructor code\n    }\n\n    public static void main(String[] args) {\n        RuntimeHints runtimeHints = new RuntimeHints();\n        runtimeHints.reflection().registerType(SampleClass.class, MemberCategory.INTROSPECT_DECLARED_CONSTRUCTORS);\n        \n        // Assuming 'reflection' and 'publicConstructor' are defined elsewhere\n        // assertPredicateDoesNotMatch(reflection.onConstructorInvocation(publicConstructor));\n    }\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "constructorInvocationDoesNotMatchIntrospectDeclaredConstructors",
      "head_type": "apiFunction",
      "relation": "relatedConceptInterpretation",
      "tail": "This function checks if a constructor invocation does not match the introspection of declared constructors.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "constructorInvocationDoesNotMatchIntrospectDeclaredConstructors",
      "head_type": "apiFunction",
      "relation": "designPrincipleInterpretation",
      "tail": "The design principle behind this function is to ensure that constructor invocations are correctly introspected and validated against declared constructors.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.ResourcePatternHintTests#extension()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "resourcePatternMatching",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ResourcePatternHintTests#extension()",
      "head_type": "method",
      "relation": "have",
      "tail": "ResourcePatternHintUsage",
      "tail_type": "useSampleCode"
    },
    {
      "head": "ResourcePatternHintUsage",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "ResourcePatternHintExample",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.SerializationHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registerTypeTwiceExposesOneHint",
      "tail_type": "apiFunction"
    },
    {
      "head": "registerTypeTwiceExposesOneHint",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "SerializationHints",
      "tail_type": "class"
    },
    {
      "head": "SerializationHints",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registerType",
      "tail_type": "apiFunction"
    },
    {
      "head": "registerType",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "URL",
      "tail_type": "class"
    },
    {
      "head": "registerType",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "TypeReference",
      "tail_type": "class"
    },
    {
      "head": "SerializationHints",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "javaSerializationHints",
      "tail_type": "apiFunction"
    },
    {
      "head": "javaSerializationHints",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "JavaSerializationHint",
      "tail_type": "class"
    },
    {
      "head": "JavaSerializationHint",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getType",
      "tail_type": "apiFunction"
    },
    {
      "head": "SerializationHintsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "SerializationHints",
      "tail_type": "class"
    },
    {
      "head": "SerializationHintsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "SerializationHintsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "SerializationHintsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.support.KotlinDetectorRuntimeHintsTests#setup()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "initialization",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.support.KotlinDetectorRuntimeHintsTests#setup()",
      "head_type": "method",
      "relation": "have",
      "tail": "setup() method sets up the runtime hints",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.support.KotlinDetectorRuntimeHintsTests#setup()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.RuntimeHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.support.KotlinDetectorRuntimeHintsTests#setup()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.io.support.SpringFactoriesLoader",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.support.KotlinDetectorRuntimeHintsTests#setup()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.RuntimeHintsRegistrar",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.support.KotlinDetectorRuntimeHintsTests#setup()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.util.ClassUtils",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.support.KotlinDetectorRuntimeHintsTests#setup()",
      "head_type": "method",
      "relation": "have",
      "tail": "Initializes the runtime hints before each test",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.support.KotlinDetectorRuntimeHintsTests#setup()",
      "head_type": "method",
      "relation": "have",
      "tail": "Setup method design principle",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#createWithMemberCategory()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "TypeHint creation with member category",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#createWithMemberCategory()",
      "head_type": "method",
      "relation": "have",
      "tail": "Sample code for creating TypeHint with member category",
      "tail_type": "useSampleCode"
    },
    {
      "head": "TypeHint creation with member category",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "Specifying member categories for reflection hints",
      "tail_type": "useScenario"
    },
    {
      "head": "TypeHint creation with member category",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "MemberCategory must be one of the predefined categories",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#createWithMemberCategory()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.TypeHint",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#createWithMemberCategory()",
      "head_type": "method",
      "relation": "have",
      "tail": "Detailed explanation of TypeHint and MemberCategory",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#createWithMemberCategory()",
      "head_type": "method",
      "relation": "have",
      "tail": "Design principles behind TypeHint with MemberCategory",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.TypeReferenceTests#typeReferenceWithInnerClassName()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "typeReferenceWithInnerClassName",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.TypeReferenceTests#typeReferenceWithInnerClassName()",
      "head_type": "method",
      "relation": "have",
      "tail": "typeReferenceWithInnerClassName_useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "typeReferenceWithInnerClassName_useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "typeReferenceWithInnerClassName_sampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#reflectionConfig()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "generate native configuration",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#reflectionConfig()",
      "head_type": "method",
      "relation": "have",
      "tail": "writing runtime hints",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#reflectionConfig()",
      "head_type": "method",
      "relation": "have",
      "tail": "registering reflection hints",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#reflectionConfig()",
      "head_type": "method",
      "relation": "have",
      "tail": "FileNativeConfigurationWriter",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#reflectionConfig()",
      "head_type": "method",
      "relation": "have",
      "tail": "RuntimeHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#reflectionConfig()",
      "head_type": "method",
      "relation": "have",
      "tail": "ReflectionHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#reflectionConfig()",
      "head_type": "method",
      "relation": "have",
      "tail": "StringDecoder",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#reflectionConfig()",
      "head_type": "method",
      "relation": "have",
      "tail": "String",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#reflectionConfig()",
      "head_type": "method",
      "relation": "have",
      "tail": "Charset",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#reflectionConfig()",
      "head_type": "method",
      "relation": "have",
      "tail": "IOException",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#reflectionConfig()",
      "head_type": "method",
      "relation": "have",
      "tail": "JSONException",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#reflectionConfig()",
      "head_type": "method",
      "relation": "have",
      "tail": "MemberCategory",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#reflectionConfig()",
      "head_type": "method",
      "relation": "have",
      "tail": "ExecutableMode",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#reflectionConfig()",
      "head_type": "method",
      "relation": "have",
      "tail": "TypeReference",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#reflectionConfig()",
      "head_type": "method",
      "relation": "have",
      "tail": "generate JSON configuration",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#reflectionConfig()",
      "head_type": "method",
      "relation": "have",
      "tail": "native configuration",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#reflectionConfig()",
      "head_type": "method",
      "relation": "have",
      "tail": "runtime hints",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#reflectionConfig()",
      "head_type": "method",
      "relation": "have",
      "tail": "reflection hints",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#reflectionConfig()",
      "head_type": "method",
      "relation": "have",
      "tail": "configuration generation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#jniConfig()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "generate native configuration files",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#jniConfig()",
      "head_type": "method",
      "relation": "have",
      "tail": "used to generate native configuration files for JNI components",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#jniConfig()",
      "head_type": "method",
      "relation": "have",
      "tail": "public void jniConfig() throws IOException, JSONException { FileNativeConfigurationWriter generator = new FileNativeConfigurationWriter(tempDir); RuntimeHints hints = new RuntimeHints(); ReflectionHints jniHints = hints.jni(); jniHints.registerType(StringDecoder.class, builder -> builder.onReachableType(String.class)); generator.write(hints); assertEquals(\"\"\" { \"jni\": [ { \"type\": \"org.springframework.core.codec.StringDecoder\", \"condition\": { \"typeReached\": \"java.lang.String\" } } ] }\"\"\")); }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#jniConfig()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.codec.StringDecoder",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#jniConfig()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "java.lang.String",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#jniConfig()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.nativex.FileNativeConfigurationWriter",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#jniConfig()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.nativex.RuntimeHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#jniConfig()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.nativex.ReflectionHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.ResourceHintsTests#registerType()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerType",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.ResourceHintsTests#registerType()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.nativex.ResourceHintsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.ResourceHintsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.nativex.ResourceHintsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "registerType",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.nativex.ProxyHintsTests#shouldWriteInnerClass()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerJdkProxy",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.ProxyHintsTests#shouldWriteInnerClass()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "assertEquals",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.ProxyHintsTests#shouldWriteInnerClass()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.nativex.RuntimeHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.ProxyHintsTests#shouldWriteInnerClass()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.nativex.RuntimeHintsWriterTests$InnerInterface",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.ProxyHintsTests#shouldWriteInnerClass()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerJdkProxy useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerJdkProxy useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "registerJdkProxy useSampleCode Content",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.core.SpringNamingPolicyTests#prefixContainingSpringLabel()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "generateClassName",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.core.SpringNamingPolicyTests#prefixContainingSpringLabel()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.cglib.core.SpringNamingPolicyTests#prefixContainingSpringLabel()",
      "tail_type": "method"
    },
    {
      "head": "generateClassName",
      "head_type": "apiFunction",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.core.SpringNamingPolicyTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.core.SpringNamingPolicyTests#prefixContainingSpringLabel()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.core.SpringNamingPolicyTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#hasAnnotationForPlainTypes()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "hasAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#hasAnnotationForPlainTypes()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#hasAnnotationForPlainTypes()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#hasAnnotationForPlainTypes()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#hasAnnotationForPlainTypes()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#hasAnnotationForPlainTypes()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "hasAnnotation usage scenario",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#hasAnnotationForPlainTypes()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "hasAnnotation use constraints",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getMergedAnnotationAttributesFavorsInheritedComposedAnnotationsOverMoreLocallyDeclaredComposedAnnotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtils",
      "tail_type": "class"
    },
    {
      "head": "getMergedAnnotationAttributesFavorsInheritedComposedAnnotationsOverMoreLocallyDeclaredComposedAnnotations",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "getMergedAnnotationAttributesFavorsInheritedComposedAnnotationsOverMoreLocallyDeclaredComposedAnnotations",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getMergedAnnotationWithTransitiveImplicitAliasesWithSkippedLevelWithSingleElementOverridingAnArrayViaAliasFor()",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedAnnotationWithTransitiveImplicitAliasesWithSkippedLevelWithSingleElementOverridingAnArrayViaAliasFor()",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.MetaCycleAnnotatedClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "MetaCycleAnnotatedClass",
      "tail_type": "apiFunction"
    },
    {
      "head": "MetaCycleAnnotatedClass",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "Circular aliases are prohibited",
      "tail_type": "useConstraint"
    },
    {
      "head": "MetaCycleAnnotatedClass",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "Multiple aliases for a single name",
      "tail_type": "useScenario"
    },
    {
      "head": "MetaCycleAnnotatedClass",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "RelatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "MetaCycleAnnotatedClass",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "DesignPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "MetaCycleAnnotatedClass",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "UseSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.MetaCycleAnnotatedClass",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.SimpleAliasRegistryTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.InterfaceWithInheritedAnnotation#handleFromInterface()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "handleFromInterface",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.InterfaceWithInheritedAnnotation#handleFromInterface()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "Order annotation must be used",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.InterfaceWithInheritedAnnotation#handleFromInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "void return type",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.InterfaceWithInheritedAnnotation#handleFromInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.core.annotation.Order",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.InterfaceWithInheritedAnnotation#handleFromInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "Inherited annotation handling",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.InterfaceWithInheritedAnnotation#handleFromInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "Design principle for inherited annotations",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.InterfaceWithInheritedAnnotation#handleFromInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "Sample code for handleFromInterface",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.GenericParameter",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getFor",
      "tail_type": "apiFunction"
    },
    {
      "head": "getFor",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getFor(Class<T> cls);",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.TransactionalService#doIt()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "transactional operation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.TransactionalService#doIt()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "ensuring transaction integrity",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.TransactionalService#doIt()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "database transaction management",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.TransactionalService#doIt()",
      "head_type": "method",
      "relation": "have",
      "tail": "sample code for transactional method",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.TransactionalService#doIt()",
      "head_type": "method",
      "relation": "have",
      "tail": "transaction management explanation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.TransactionalService#doIt()",
      "head_type": "method",
      "relation": "have",
      "tail": "design principles of transactional methods",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.TransactionalService#doIt()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.Transactional",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#plainWhenSpringLangAnnotationReturnsTrue()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "AnnotationFilter.PLAIN.matches(Contract.class)",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#plainWhenSpringLangAnnotationReturnsTrue()",
      "head_type": "method",
      "relation": "have",
      "tail": "void plainWhenSpringLangAnnotationReturnsTrue() { assertThat(AnnotationFilter.PLAIN.matches(Contract.class)).isTrue(); }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#plainWhenSpringLangAnnotationReturnsTrue()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationFilter",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#plainWhenSpringLangAnnotationReturnsTrue()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "Contract.class",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.WithTestAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "test annotation processing",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.WithTestAnnotation",
      "head_type": "class",
      "relation": "have",
      "tail": "used for testing annotation processing",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.WithTestAnnotation",
      "head_type": "class",
      "relation": "have",
      "tail": "no specific constraints mentioned",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.WithTestAnnotation",
      "head_type": "class",
      "relation": "have",
      "tail": "related to Spring framework's annotation processing",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.WithTestAnnotation",
      "head_type": "class",
      "relation": "have",
      "tail": "designed to simplify unit testing of annotations",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.WithTestAnnotation",
      "head_type": "class",
      "relation": "have",
      "tail": "public @interface WithTestAnnotation { ... }",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "scan",
      "head_type": "class",
      "relation": "haveFuntion",
      "head": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "SearchStrategy",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "head": "scan",
      "tail_type": "useConstraint"
    },
    {
      "tail": "AnnotatedElement",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "SearchStrategy",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "AnnotationsProcessor",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "Predicate",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "AnnotatedElement",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "SearchStrategy",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "AnnotationsProcessor",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "Predicate",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "AnnotatedElement",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "SearchStrategy",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "AnnotationsProcessor",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "Predicate",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "AnnotatedElement",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "SearchStrategy",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "AnnotationsProcessor",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "Predicate",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "AnnotatedElement",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "SearchStrategy",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "AnnotationsProcessor",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "Predicate",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "AnnotatedElement",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "SearchStrategy",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "AnnotationsProcessor",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "Predicate",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "AnnotatedElement",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "SearchStrategy",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "AnnotationsProcessor",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "Predicate",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "AnnotatedElement",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "SearchStrategy",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "AnnotationsProcessor",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "Predicate",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "AnnotatedElement",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "SearchStrategy",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "AnnotationsProcessor",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "Predicate",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "AnnotatedElement",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "SearchStrategy",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "AnnotationsProcessor",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "Predicate",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "AnnotatedElement",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "SearchStrategy",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "AnnotationsProcessor",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "Predicate",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "AnnotatedElement",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "SearchStrategy",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "AnnotationsProcessor",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "Predicate",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "AnnotatedElement",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "SearchStrategy",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "AnnotationsProcessor",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "Predicate",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "AnnotatedElement",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "SearchStrategy",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "AnnotationsProcessor",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "Predicate",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "AnnotatedElement",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "SearchStrategy",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "AnnotationsProcessor",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "Predicate",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "AnnotatedElement",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "SearchStrategy",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "AnnotationsProcessor",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "Predicate",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "AnnotatedElement",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "SearchStrategy",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "AnnotationsProcessor",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "Predicate",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "AnnotatedElement",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "SearchStrategy",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "AnnotationsProcessor",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "Predicate",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "AnnotatedElement",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "SearchStrategy",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "AnnotationsProcessor",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "Predicate",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "AnnotatedElement",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "SearchStrategy",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "AnnotationsProcessor",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "Predicate",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "AnnotatedElement",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "SearchStrategy",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "AnnotationsProcessor",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "Predicate",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "AnnotatedElement",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "SearchStrategy",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "AnnotationsProcessor",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "Predicate",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "AnnotatedElement",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "SearchStrategy",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan",
      "tail_type": "useScenario"
    },
    {
      "tail": "",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "scan"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnClassWhenMultipleAnnotationsScansAnnotations()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scan annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnClassWhenMultipleAnnotationsScansAnnotations()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "multiple annotations on a class",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnClassWhenMultipleAnnotationsScansAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "void typeHierarchyStrategyOnClassWhenMultipleAnnotationsScansAnnotations() {\n    Class<?> source = WithMultipleAnnotations.class;\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\", \"0:TestAnnotation2\");\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnClassWhenMultipleAnnotationsScansAnnotations()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnClassWhenMultipleAnnotationsScansAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "This method tests the scanning of multiple annotations on a class using a type hierarchy strategy. It verifies that the scanning process correctly identifies and returns all annotations present on the class.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnClassWhenMultipleAnnotationsScansAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "The design principle behind this method is to ensure that the annotation scanning mechanism is robust and flexible enough to handle multiple annotations on a single class. It emphasizes the importance of a comprehensive scanning strategy that accounts for various annotation configurations on classes.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnMethodWhenHasInterfaceDoesNotIncludeInterfaces()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scan annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnMethodWhenHasInterfaceDoesNotIncludeInterfaces()",
      "head_type": "method",
      "relation": "have",
      "tail": "void inheritedAnnotationsStrategyOnMethodWhenHasInterfaceDoesNotIncludeInterfaces() {\n    Method source = methodFrom(WithSingleInterface.class);\n    assertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\");\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnMethodWhenHasInterfaceDoesNotIncludeInterfaces()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "scan annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests",
      "head_type": "class",
      "relation": "have",
      "tail": "void inheritedAnnotationsStrategyOnMethodWhenHasInterfaceDoesNotIncludeInterfaces() {\n    Method source = methodFrom(WithSingleInterface.class);\n    assertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\");\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests",
      "head_type": "class",
      "relation": "designPrincipleInterpretation",
      "tail": "This class is designed to test the functionality of scanning annotations in Spring framework, ensuring that inherited annotations are correctly identified and processed.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#indexedName(int,Annotation)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "indexedName",
      "tail_type": "apiFunction"
    },
    {
      "head": "indexedName",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "indexedName(int aggregateIndex, Annotation annotation)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "indexedName(int aggregateIndex, Annotation annotation)",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#indexedName(int,Annotation)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.MultipleMethodsInterface#method1()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "testFunctionality",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.MultipleMethodsInterface#method1()",
      "head_type": "method",
      "relation": "have",
      "tail": "voidReturnType",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.MultipleMethodsInterface#method1()",
      "head_type": "method",
      "relation": "have",
      "tail": "noParameters",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.MultipleMethodsInterface#method1()",
      "head_type": "method",
      "relation": "have",
      "tail": "annotationUsage",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.MultipleMethodsInterface#method1()",
      "head_type": "method",
      "relation": "have",
      "tail": "TestAnnotation2",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.MultipleMethodsInterface#method1()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.MultipleMethodsInterface#method1()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.MultipleMethodsInterface#method1()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.MultipleMethodsInterface",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.GenericNonOverrideInterface#method(T)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "org.springframework.core.annotation.GenericNonOverrideInterface#method(T)",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.GenericNonOverrideInterface#method(T)",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.core.annotation.GenericNonOverrideInterface#method(T)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.GenericNonOverrideInterface#method(T)",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.core.annotation.GenericNonOverrideInterface#method(T)",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.GenericNonOverrideInterface#method(T)",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.core.annotation.GenericNonOverrideInterface#method(T)",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationWithMetaMetaAnnotationOnLeaf()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "find method annotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationWithMetaMetaAnnotationOnLeaf()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "handle meta annotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationWithMetaMetaAnnotationOnLeaf()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "process leaf class",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationWithMetaMetaAnnotationOnLeaf()",
      "head_type": "method",
      "relation": "have",
      "tail": "sample code for finding method annotation with meta meta annotation on leaf",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationWithMetaMetaAnnotationOnLeaf()",
      "head_type": "method",
      "relation": "have",
      "tail": "related concept interpretation for finding method annotation with meta meta annotation on leaf",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationWithMetaMetaAnnotationOnLeaf()",
      "head_type": "method",
      "relation": "have",
      "tail": "design principle interpretation for finding method annotation with meta meta annotation on leaf",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationWithMetaMetaAnnotationOnLeaf()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationWithMetaMetaAnnotationOnLeaf()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "method existence constraint",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationWithMetaMetaAnnotationOnLeaf()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "leaf class processing scenario",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "findClassAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "annotationInheritance",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "inheritedAnnotationInterface",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "sampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConcepts",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrinciples",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AliasForWithMirroredAliasForWrongAttributeClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "AliasForWithMirroredAliasForWrongAttribute",
      "tail_type": "apiFunction"
    },
    {
      "head": "AliasForWithMirroredAliasForWrongAttribute",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "Circular aliases are prohibited",
      "tail_type": "useConstraint"
    },
    {
      "head": "AliasForWithMirroredAliasForWrongAttribute",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "Multiple aliases for a single name",
      "tail_type": "useScenario"
    },
    {
      "head": "AliasForWithMirroredAliasForWrongAttribute",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "Related concept interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "AliasForWithMirroredAliasForWrongAttribute",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "Design principle interpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "AliasForWithMirroredAliasForWrongAttribute",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "Sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AliasForWithMirroredAliasForWrongAttributeClass",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.SimpleAliasRegistryTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AliasForAttributeOfDifferentTypeClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "aliasForAttributeOfDifferentType",
      "tail_type": "apiFunction"
    },
    {
      "head": "aliasForAttributeOfDifferentType",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "typeCompatibility",
      "tail_type": "useConstraint"
    },
    {
      "head": "aliasForAttributeOfDifferentType",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "differentTypeAliasUsage",
      "tail_type": "useScenario"
    },
    {
      "head": "aliasForAttributeOfDifferentType",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "differentTypeAliasSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "aliasForAttributeOfDifferentType",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "aliasForAttributeOfDifferentType",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AliasForAttributeOfDifferentTypeClass",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AliasFor",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.annotation.AnnotatedMethodTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registerReflectionForStaticField",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.annotation.AnnotatedMethodTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registerReflectionWithoutTarget",
      "tail_type": "apiFunction"
    },
    {
      "head": "registerReflectionForStaticField",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "registerReflectionHints",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerReflectionWithoutTarget",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "registerReflectionHints",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerReflectionHints",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "SimplePojo.class",
      "tail_type": "class"
    },
    {
      "head": "registerReflectionHints",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "RegistrationMethodWithoutTarget.class",
      "tail_type": "class"
    },
    {
      "head": "registerReflectionHints",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "Method",
      "tail_type": "class"
    },
    {
      "head": "registerReflectionHints",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "NoSuchMethodException",
      "tail_type": "class"
    },
    {
      "head": "registerReflectionHints",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "List",
      "tail_type": "class"
    },
    {
      "head": "registerReflectionHints",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "MemberCategory",
      "tail_type": "class"
    },
    {
      "head": "registerReflectionHints",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "assertBasicTypeHint",
      "tail_type": "apiFunction"
    },
    {
      "head": "registerReflectionHints",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "assertThatIllegalStateException",
      "tail_type": "apiFunction"
    },
    {
      "head": "registerReflectionHints",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "isThrownBy",
      "tail_type": "apiFunction"
    },
    {
      "head": "registerReflectionHints",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "withMessageContaining",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.annotation.RegistrationMethod#doReflection()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "reflectionRegistration",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.annotation.RegistrationMethod#doReflection()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "classAvailability",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.aot.hint.annotation.RegistrationMethod#doReflection()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "runtimeCodeGeneration",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.annotation.RegistrationMethod#doReflection()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.annotation.RegistrationMethod#doReflection()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "SimplePojo.class",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.annotation.RegistrationMethod#doReflection()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.annotation.RegistrationMethod#doReflection()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithAnonymousClass()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerTypeForSerializationWithAnonymousClass",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithAnonymousClass()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerTypeForSerializationWithAnonymousClassSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerTypeForSerializationWithAnonymousClassSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "Complete Code Example for registerTypeForSerializationWithAnonymousClass",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassWithNoProperty",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "name retrieval",
      "tail_type": "apiFunction"
    },
    {
      "head": "name retrieval",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "String name() { return null; }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassWithNoProperty",
      "head_type": "class",
      "relation": "have",
      "tail": "String name() { return null; }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.Builder#name(String)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "nameSetting",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.Builder#name(String)",
      "head_type": "method",
      "relation": "have",
      "tail": "BuilderPatternUsage",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.Builder#name(String)",
      "head_type": "method",
      "relation": "have",
      "tail": "BuilderPatternSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.Builder#name(String)",
      "head_type": "method",
      "relation": "have",
      "tail": "BuilderPatternExplanation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.Builder#name(String)",
      "head_type": "method",
      "relation": "have",
      "tail": "BuilderPatternDesignPrinciple",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "proxy",
      "tail_type": "apiFunction"
    },
    {
      "head": "proxy",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "shouldFailForEmptyInterfacesArray",
      "tail_type": "useScenario"
    },
    {
      "head": "proxy",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "proxyForInterfacesMatchesProxyHint",
      "tail_type": "useScenario"
    },
    {
      "head": "proxy",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "proxyForInterfacesDoesNotMatchProxyHintDifferentOrder",
      "tail_type": "useScenario"
    },
    {
      "head": "proxy",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "ProxyHintsPredicates",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.SecondTestInterface",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "org.springframework.aot.hint.predicate.SecondTestInterface",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#reflectionOnDifferentClassShouldNotMatchIntrospection()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "reflectionOnDifferentClassShouldNotMatchIntrospection",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#reflectionOnDifferentClassShouldNotMatchIntrospection()",
      "head_type": "method",
      "relation": "have",
      "tail": "runtimeHints.reflection().registerType(Integer.class)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#reflectionOnDifferentClassShouldNotMatchIntrospection()",
      "head_type": "method",
      "relation": "have",
      "tail": "assertPredicateDoesNotMatch(reflection.onType(TypeReference.of(SampleClass.class)))",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#reflectionOnDifferentClassShouldNotMatchIntrospection()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.predicate.ReflectionOnType",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#reflectionOnDifferentClassShouldNotMatchIntrospection()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "Integer",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#reflectionOnDifferentClassShouldNotMatchIntrospection()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "SampleClass",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#publicFieldAccessMatchesAccessPublicFieldsHint()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "publicFieldAccessMatchesAccessPublicFieldsHint",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#publicFieldAccessMatchesAccessPublicFieldsHint()",
      "head_type": "method",
      "relation": "have",
      "tail": "publicFieldAccessMatchesAccessPublicFieldsHintSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "publicFieldAccessMatchesAccessPublicFieldsHintSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "publicFieldAccessMatchesAccessPublicFieldsHintSampleCodeContent",
      "tail_type": "codeContent"
    },
    {
      "head": "org.springframework.aot.hint.predicate.SampleClass#privateMethod()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "private method execution",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.SampleClass#privateMethod()",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.aot.hint.predicate.SampleClass#privateMethod() sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.SampleClass#privateMethod()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.predicate.SampleClass",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#resourcePatternMatchesTypeInDefaultPackageAndAbsoluteResourceName()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registering resource pattern",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#resourcePatternMatchesTypeInDefaultPackageAndAbsoluteResourceName()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "asserting resource pattern match",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#resourcePatternMatchesTypeInDefaultPackageAndAbsoluteResourceName()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#resourcePatternMatchesTypeInDefaultPackageAndAbsoluteResourceName()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "ResourceHintsPredicatesTests",
      "tail_type": "class"
    },
    {
      "head": "registering resource pattern",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "asserting resource pattern match",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#resourceBundleMatchesBundleName()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerResourceBundle",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#resourceBundleMatchesBundleName()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "assertPredicateMatches",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#resourceBundleMatchesBundleName()",
      "head_type": "method",
      "relation": "have",
      "tail": "spring",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#resourceBundleMatchesBundleName()",
      "head_type": "method",
      "relation": "have",
      "tail": "ResourceHintsPredicatesTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#resourceBundleMatchesBundleName()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#resourceBundleMatchesBundleName()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#resourceBundleMatchesBundleName()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "reflectionHintWithClass",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "registerType",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useScenario"
    },
    {
      "tail": "MemberCategory.INVOKE_PUBLIC_CONSTRUCTORS",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "typeHints",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getCanonicalName",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "isEmpty",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getMemberCategories",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "containsOnly",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "singleElement",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "satisfies",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "assertThat",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "typeHint",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "fields",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "constructors",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "methods",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "memberCategories",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "registerType",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "reflection",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "hints",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "String.class",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "MemberCategory.INVOKE_PUBLIC_CONSTRUCTORS",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "typeHint.getType().getCanonicalName()",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "typeHint.fields()",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "typeHint.constructors()",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "typeHint.methods()",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "typeHint.getMemberCategories()",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "MemberCategory.INVOKE_PUBLIC_CONSTRUCTORS",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "typeHint",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "typeHints",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "singleElement",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "satisfies",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "assertThat",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "isEqualTo",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "containsOnly",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "isEmpty",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getCanonicalName",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getMemberCategories",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "registerType",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "reflection",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "hints",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "String.class",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "MemberCategory.INVOKE_PUBLIC_CONSTRUCTORS",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "typeHint.getType().getCanonicalName()",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "typeHint.fields()",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "typeHint.constructors()",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "typeHint.methods()",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "typeHint.getMemberCategories()",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "MemberCategory.INVOKE_PUBLIC_CONSTRUCTORS",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "typeHint",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "typeHints",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "singleElement",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "satisfies",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "assertThat",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "isEqualTo",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "containsOnly",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "isEmpty",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getCanonicalName",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getMemberCategories",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "registerType",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "reflection",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "hints",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "String.class",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "MemberCategory.INVOKE_PUBLIC_CONSTRUCTORS",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "typeHint.getType().getCanonicalName()",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "typeHint.fields()",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "typeHint.constructors()",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "typeHint.methods()",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "typeHint.getMemberCategories()",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "MemberCategory.INVOKE_PUBLIC_CONSTRUCTORS",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
      "tail_type": ""
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#methodWithInnerClassParameter()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "reflection registration",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#methodWithInnerClassParameter()",
      "head_type": "method",
      "relation": "have",
      "tail": "registering reflection hints for inner class method invocation",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#methodWithInnerClassParameter()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.nativex.RuntimeHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#methodWithInnerClassParameter()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.nativex.ReflectionHintsWriterTests$InnerClass",
      "tail_type": "class"
    },
    {
      "head": "reflection registration",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "method must exist in the class",
      "tail_type": "useConstraint"
    },
    {
      "head": "reflection registration",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "native image compilation",
      "tail_type": "useScenario"
    },
    {
      "head": "reflection registration",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "used to register reflection hints for methods that need to be available at runtime in a native image",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "reflection registration",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "design principle of providing necessary runtime information to the native image compiler",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnSubSubInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "findMergedAnnotationAttributes",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnSubSubInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "findMergedAnnotationAttributes",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesInheritedFromInterfaceMethod()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "findMergedAnnotationAttributes",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesInheritedFromInterfaceMethod()",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesInheritedFromInterfaceMethod()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesInheritedFromInterfaceMethod()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesInheritedFromInterfaceMethod()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.DerivedTxConfig",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "transaction management",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.DerivedTxConfig",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "classpath scanning constraints",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.DerivedTxConfig",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "transaction configuration scenarios",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.DerivedTxConfig",
      "head_type": "class",
      "relation": "have",
      "tail": "transaction configuration sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.DerivedTxConfig",
      "head_type": "class",
      "relation": "have",
      "tail": "transaction management concept",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.DerivedTxConfig",
      "head_type": "class",
      "relation": "have",
      "tail": "transaction design principles",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.DerivedTxConfig",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.transaction.annotation.Transactional",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.TransitiveImplicitAliasesContextConfigClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "transitiveImplicitAliases",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.TransitiveImplicitAliasesContextConfigClass",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "circular aliases are prohibited",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.TransitiveImplicitAliasesContextConfigClass",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "multiple aliases for a single name",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.TransitiveImplicitAliasesContextConfigClass",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.TransitiveImplicitAliasesContextConfigClass",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.TransitiveImplicitAliasesContextConfigClass",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.SimpleAliasRegistryTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.SingleLocationTransitiveImplicitAliasesWithSkippedLevelContextConfigClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "SingleLocationTransitiveImplicitAliasesWithSkippedLevelContextConfigClass",
      "tail_type": "apiFunction"
    },
    {
      "head": "SingleLocationTransitiveImplicitAliasesWithSkippedLevelContextConfigClass",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "Circular aliases are prohibited",
      "tail_type": "useConstraint"
    },
    {
      "head": "SingleLocationTransitiveImplicitAliasesWithSkippedLevelContextConfigClass",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "Multiple aliases for a single name",
      "tail_type": "useScenario"
    },
    {
      "head": "SingleLocationTransitiveImplicitAliasesWithSkippedLevelContextConfigClass",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "RelatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "SingleLocationTransitiveImplicitAliasesWithSkippedLevelContextConfigClass",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "DesignPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "SingleLocationTransitiveImplicitAliasesWithSkippedLevelContextConfigClass",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "UseSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.SingleLocationTransitiveImplicitAliasesWithSkippedLevelContextConfigClass",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.SimpleAliasRegistryTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.ConventionBasedSinglePackageComponentScanClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "component scanning",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.ConventionBasedSinglePackageComponentScanClass",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "package naming conventions",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.ConventionBasedSinglePackageComponentScanClass",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "single package component scanning",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.ConventionBasedSinglePackageComponentScanClass",
      "head_type": "class",
      "relation": "have",
      "tail": "related to Spring Framework's component scanning",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.ConventionBasedSinglePackageComponentScanClass",
      "head_type": "class",
      "relation": "have",
      "tail": "design principle based on convention over configuration",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.ConventionBasedSinglePackageComponentScanClass",
      "head_type": "class",
      "relation": "have",
      "tail": "sample code for scanning components",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.ConventionBasedSinglePackageComponentScanClass",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.context.annotation.ComponentScan",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.C",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "org.springframework.core.annotation.C",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationBackCompatibilityTests#multiplRoutesToMetaAnnotation()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "mergedAnnotationProcessing",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationBackCompatibilityTests#multiplRoutesToMetaAnnotation()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "annotationMerging",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationBackCompatibilityTests#multiplRoutesToMetaAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "annotationMerging",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationBackCompatibilityTests#multiplRoutesToMetaAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "mergedAnnotationProcessingSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationBackCompatibilityTests#multiplRoutesToMetaAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "annotationMergingConcept",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationBackCompatibilityTests#multiplRoutesToMetaAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "annotationBackwardCompatibilityDesign",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationBackCompatibilityTests#multiplRoutesToMetaAnnotation()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationBackCompatibilityTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationBackCompatibilityTests#defaultValue()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "synthesizing annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationBackCompatibilityTests#defaultValue()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "retrieving default values from annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationBackCompatibilityTests#defaultValue()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationBackCompatibilityTests#defaultValue()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationBackCompatibilityTests#defaultValue()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationBackCompatibilityTests#defaultValue()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.DefaultValueAnnotation",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationBackCompatibilityTests#defaultValue()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.MergedAnnotations",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationBackCompatibilityTests#defaultValue()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationUtils",
      "tail_type": "class"
    },
    {
      "head": "synthesizing annotations",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "ensuring compatibility with legacy annotations",
      "tail_type": "useConstraint"
    },
    {
      "head": "retrieving default values from annotations",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "obtaining enum values from annotations",
      "tail_type": "useScenario"
    },
    {
      "head": "useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "complete example of using synthesized annotations and retrieving default values",
      "tail_type": "useSampleCode"
    },
    {
      "head": "relatedConceptInterpretation",
      "head_type": "relatedConceptInterpretation",
      "relation": "have",
      "tail": "explanation of annotation synthesis and default value retrieval",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "designPrincipleInterpretation",
      "head_type": "designPrincipleInterpretation",
      "relation": "have",
      "tail": "principles behind backward compatibility and annotation processing",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationIntrospectionFailureTests#filteredTypeInMetaAnnotationWhenUsingMergedAnnotationsHandlesException()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "annotation introspection",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationIntrospectionFailureTests#filteredTypeInMetaAnnotationWhenUsingMergedAnnotationsHandlesException()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "merged annotations handling",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationIntrospectionFailureTests#filteredTypeInMetaAnnotationWhenUsingMergedAnnotationsHandlesException()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "exception handling",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationIntrospectionFailureTests#filteredTypeInMetaAnnotationWhenUsingMergedAnnotationsHandlesException()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "class loader constraints",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationIntrospectionFailureTests#filteredTypeInMetaAnnotationWhenUsingMergedAnnotationsHandlesException()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "meta-annotation filtering",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationIntrospectionFailureTests#filteredTypeInMetaAnnotationWhenUsingMergedAnnotationsHandlesException()",
      "head_type": "method",
      "relation": "have",
      "tail": "related concept interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationIntrospectionFailureTests#filteredTypeInMetaAnnotationWhenUsingMergedAnnotationsHandlesException()",
      "head_type": "method",
      "relation": "have",
      "tail": "design principle interpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationIntrospectionFailureTests#filteredTypeInMetaAnnotationWhenUsingMergedAnnotationsHandlesException()",
      "head_type": "method",
      "relation": "have",
      "tail": "sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationIntrospectionFailureTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationIntrospectionFailureTests#filteredTypeInMetaAnnotationWhenUsingMergedAnnotationsHandlesException()",
      "tail_type": "method"
    },
    {
      "head": "related concept interpretation",
      "head_type": "relatedConceptInterpretation",
      "relation": "have",
      "tail": "MergedAnnotations and FilteringClassLoader",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "design principle interpretation",
      "head_type": "designPrincipleInterpretation",
      "relation": "have",
      "tail": "robustness and error handling",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "complete example",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnMethodHierarchyScansInCorrectOrder()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scanning inherited annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnMethodHierarchyScansInCorrectOrder()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "method hierarchy",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnMethodHierarchyScansInCorrectOrder()",
      "head_type": "method",
      "relation": "have",
      "tail": "void inheritedAnnotationsStrategyOnMethodHierarchyScansInCorrectOrder() {\n    Method source = methodFrom(WithHierarchy.class);\n    assertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\");\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnMethodHierarchyScansInCorrectOrder()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "scanning inherited annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "method hierarchy",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests",
      "head_type": "class",
      "relation": "have",
      "tail": "void inheritedAnnotationsStrategyOnMethodHierarchyScansInCorrectOrder() {\n    Method source = methodFrom(WithHierarchy.class);\n    assertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\");\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getAnnotationWhenMetaAnnotationReturnsAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "getAnnotationWhenMetaAnnotationReturnsAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getAnnotationWhenMetaAnnotationReturnsAnnotation() Sample Code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getAnnotationWhenMetaAnnotationReturnsAnnotation() Sample Code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "Complete Example",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#resolveMirrorsWhenHasWithMultipleRoutesToAliasReturnsMirrors()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "resolveMirrors",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#resolveMirrorsWhenHasWithMultipleRoutesToAliasReturnsMirrors()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "multipleRoutesToAlias",
      "tail_type": "useScenario"
    },
    {
      "head": "resolveMirrors",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "resolveMirrorsWhenHasWithMultipleRoutesToAliasReturnsMirrors() sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "resolveMirrors",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "resolveMirrors related concept interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "resolveMirrors",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "resolveMirrors design principle interpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationOnBridgeMethod()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "findMethodAnnotationOnBridgeMethod",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationOnBridgeMethod()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "SimpleFoo",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationOnBridgeMethod()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "Order",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationOnBridgeMethod()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "Transactional",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationOnBridgeMethod()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationOnBridgeMethod()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationOnBridgeMethod()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.SubSubInheritedAnnotationInterface",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "annotationInheritance",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.SubSubInheritedAnnotationInterface",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "annotationInheritanceConstraints",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.SubSubInheritedAnnotationInterface",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "annotationUsageScenarios",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.SubSubInheritedAnnotationInterface",
      "head_type": "class",
      "relation": "have",
      "tail": "annotationUsageSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.SubSubInheritedAnnotationInterface",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptsExplanation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SubSubInheritedAnnotationInterface",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrinciplesExplanation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SubSubInheritedAnnotationInterface",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.Inherited",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.InterfaceWithAnnotatedMethod",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "Order annotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.InterfaceWithAnnotatedMethod",
      "head_type": "class",
      "relation": "have",
      "tail": "void foo()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.SubOfAbstractImplementsInterfaceWithAnnotatedMethod#foo()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "foo()",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.SubOfAbstractImplementsInterfaceWithAnnotatedMethod#foo()",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.core.annotation.SubOfAbstractImplementsInterfaceWithAnnotatedMethod",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.SubOfAbstractImplementsInterfaceWithAnnotatedMethod#foo()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SubOfAbstractImplementsInterfaceWithAnnotatedMethod#foo()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SubOfAbstractImplementsInterfaceWithAnnotatedMethod#foo()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.SubMyRepeatableWithAdditionalLocalDeclarationsClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "repeatable annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.SubMyRepeatableWithAdditionalLocalDeclarationsClass",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "repeatable annotations",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "local declarations",
      "tail_type": "useScenario"
    },
    {
      "head": "repeatable annotations",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "additional constraints",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.SubMyRepeatableWithAdditionalLocalDeclarationsClass",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SubMyRepeatableWithAdditionalLocalDeclarationsClass",
      "head_type": "class",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.SubSubMyRepeatableWithAdditionalLocalDeclarationsClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "repeatableAnnotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "repeatableAnnotations",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "methodAnnotations",
      "tail_type": "useScenario"
    },
    {
      "head": "repeatableAnnotations",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "annotationCompatibility",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.SubSubMyRepeatableWithAdditionalLocalDeclarationsClass",
      "head_type": "class",
      "relation": "have",
      "tail": "repeatableAnnotationsSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.SubSubMyRepeatableWithAdditionalLocalDeclarationsClass",
      "head_type": "class",
      "relation": "have",
      "tail": "repeatableAnnotationsConcept",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SubSubMyRepeatableWithAdditionalLocalDeclarationsClass",
      "head_type": "class",
      "relation": "have",
      "tail": "repeatableAnnotationsDesignPrinciple",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassA",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getB",
      "tail_type": "apiFunction"
    },
    {
      "head": "getB",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassA",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "SampleClassB",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithDifferentProxiedInterfacesIsFalse()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "proxiedInterfaces",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithDifferentProxiedInterfacesIsFalse()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "TypeReference.of",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithDifferentProxiedInterfacesIsFalse()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "assertThat",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithDifferentProxiedInterfacesIsFalse()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "isNotEqualTo",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithDifferentProxiedInterfacesIsFalse()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "JdkProxyHint",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithDifferentProxiedInterfacesIsFalse()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "Builder",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithDifferentProxiedInterfacesIsFalse()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "TypeReference",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithDifferentProxiedInterfacesIsFalse()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "Function",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithDifferentProxiedInterfacesIsFalse()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "Consumer",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithDifferentProxiedInterfacesIsFalse()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithDifferentProxiedInterfacesIsFalse()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithDifferentProxiedInterfacesIsFalse()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodInvocationDoesNotMatchInvokePublicMethods()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "reflectionHintRegistration",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodInvocationDoesNotMatchInvokePublicMethods()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "predicateMatching",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodInvocationDoesNotMatchInvokePublicMethods()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "methodInvocation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodInvocationDoesNotMatchInvokePublicMethods()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "reflectionHintScope",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodInvocationDoesNotMatchInvokePublicMethods()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "reflectionHintTesting",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodInvocationDoesNotMatchInvokePublicMethods()",
      "head_type": "method",
      "relation": "have",
      "tail": "reflectionHintTesting",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodInvocationDoesNotMatchInvokePublicMethods()",
      "head_type": "method",
      "relation": "have",
      "tail": "runtimeHintsRegistrationExample",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodInvocationDoesNotMatchInvokePublicMethods()",
      "head_type": "method",
      "relation": "have",
      "tail": "reflectionHintRegistrationExplanation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodInvocationDoesNotMatchInvokePublicMethods()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrinciplesOfReflectionHints",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodInvocationDoesNotMatchInvokePublicMethods()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "SampleClass",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessDoesNotMatchTypeHint()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "privateFieldAccessDoesNotMatchTypeHint",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessDoesNotMatchTypeHint()",
      "head_type": "method",
      "relation": "have",
      "tail": "runtimeHints.reflection().registerType(SampleClass.class); assertPredicateDoesNotMatch(reflection.onField(SampleClass.class, \"privateField\"));",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessDoesNotMatchTypeHint()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "SampleClass",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#resourcePatternMatchesResourceName()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "resourcePatternMatchesResourceName",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#resourcePatternMatchesResourceName()",
      "head_type": "method",
      "relation": "have",
      "tail": "void resourcePatternMatchesResourceName() { this.runtimeHints.resources().registerPattern(\"test/*\"); assertPredicateMatches(resources.forResource(\"/test/spring.properties\")); }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#resourcePatternMatchesResourceName()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.SerializationHintsPredicatesTests#shouldNotMatchUnregisteredType()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "serialization type checking",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.SerializationHintsPredicatesTests#shouldNotMatchUnregisteredType()",
      "head_type": "method",
      "relation": "have",
      "tail": "registering types for serialization",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.SerializationHintsPredicatesTests#shouldNotMatchUnregisteredType()",
      "head_type": "method",
      "relation": "have",
      "tail": "ensuring only registered types are matched",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.predicate.SerializationHintsPredicatesTests#shouldNotMatchUnregisteredType()",
      "head_type": "method",
      "relation": "have",
      "tail": "design principle of ensuring type safety in serialization",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.SerializationHintsPredicatesTests#shouldNotMatchUnregisteredType()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.predicate.SerializationHintsPredicatesTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#registerTypeReusesBuilder()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerType",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#registerTypeReusesBuilder()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerField",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#registerTypeReusesBuilder()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "typeHints",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#registerTypeReusesBuilder()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "findField",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#registerTypeReusesBuilder()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "assertThat",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#registerTypeReusesBuilder()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "satisfies",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#registerTypeReusesBuilder()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "containsOnly",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#registerTypeReusesBuilder()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "isEqualTo",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#registerTypeReusesBuilder()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "singleElement",
      "tail_type": "apiFunction"
    },
    {
      "head": "registerType",
      "head_type": "apiFunction",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.ReflectionHints",
      "tail_type": "class"
    },
    {
      "head": "registerField",
      "head_type": "apiFunction",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.ReflectionHints",
      "tail_type": "class"
    },
    {
      "head": "typeHints",
      "head_type": "apiFunction",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.ReflectionHints",
      "tail_type": "class"
    },
    {
      "head": "findField",
      "head_type": "apiFunction",
      "relation": "associated_with",
      "tail": "org.springframework.util.ReflectionUtils",
      "tail_type": "class"
    },
    {
      "head": "assertThat",
      "head_type": "apiFunction",
      "relation": "associated_with",
      "tail": "org.assertj.core.api.AbstractObjectAssert",
      "tail_type": "class"
    },
    {
      "head": "satisfies",
      "head_type": "apiFunction",
      "relation": "associated_with",
      "tail": "org.assertj.core.api.AbstractObjectAssert",
      "tail_type": "class"
    },
    {
      "head": "containsOnly",
      "head_type": "apiFunction",
      "relation": "associated_with",
      "tail": "org.assertj.core.api.list.ListAssert",
      "tail_type": "class"
    },
    {
      "head": "isEqualTo",
      "head_type": "apiFunction",
      "relation": "associated_with",
      "tail": "org.assertj.core.api.AbstractCharSequenceAssert",
      "tail_type": "class"
    },
    {
      "head": "singleElement",
      "head_type": "apiFunction",
      "relation": "associated_with",
      "tail": "org.assertj.core.api.list.ListAssert",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#registerTypeReusesBuilder()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#registerTypeReusesBuilder()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#registerTypeReusesBuilder()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.support.ObjectToObjectConverterRuntimeHintsTests#uriHasHints()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "URI class reflection handling",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.support.ObjectToObjectConverterRuntimeHintsTests#uriHasHints()",
      "head_type": "method",
      "relation": "have",
      "tail": "URI class reflection handling sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "URI class reflection handling sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "package org.springframework.aot.hint.support;\n\nimport java.lang.reflect.Method;\nimport org.junit.jupiter.api.Test;\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class ObjectToObjectConverterRuntimeHintsTests {\n\n    @Test\n    void uriHasHints() throws NoSuchMethodException {\n        assertThat(RuntimeHintsPredicates.reflection().onType(URI.class)).accepts(this.hints);\n    }\n\n}",
      "tail_type": "String"
    },
    {
      "head": "org.springframework.aot.nativex.InnerInterface",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "inner interface handling",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.InnerInterface",
      "head_type": "class",
      "relation": "have",
      "tail": "used for managing inner interfaces in native image generation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.nativex.InnerInterface",
      "head_type": "class",
      "relation": "have",
      "tail": "design principles focus on efficiency and compatibility with native image compilation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#hasMetaAnnotationTypesOnNonAnnotatedClass()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "hasMetaAnnotationTypes",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#hasMetaAnnotationTypesOnNonAnnotatedClass()",
      "head_type": "method",
      "relation": "have",
      "tail": "hasMetaAnnotationTypesOnNonAnnotatedClass() sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "hasMetaAnnotationTypesOnNonAnnotatedClass() sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "package org.springframework.core.annotation;\n\nimport org.junit.jupiter.api.Test;\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class AnnotatedElementUtilsTests {\n\n    @Test\n    void hasMetaAnnotationTypesOnNonAnnotatedClass() {\n        assertThat(hasMetaAnnotationTypes(NonAnnotatedClass.class, TX_NAME)).isFalse();\n    }\n}",
      "tail_type": "code"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#hasMetaAnnotationTypesOnNonAnnotatedClass()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "related concept interpretation for org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "related concept interpretation for org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "relatedConceptInterpretation",
      "relation": "have",
      "tail": "This class is used for testing the utility methods provided by AnnotatedElementUtils, which is a part of the Spring Framework. It helps in retrieving annotation information from classes, methods, and fields. The test method checks if a class has meta-annotations, which are annotations that are themselves annotated with another annotation.",
      "tail_type": "description"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "design principle interpretation for org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "design principle interpretation for org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "designPrincipleInterpretation",
      "relation": "have",
      "tail": "The design principle behind this test class is to ensure that the AnnotatedElementUtils class correctly identifies and processes meta-annotations. This is crucial for the Spring Framework to function properly, as it relies on annotations for various functionalities like dependency injection and transaction management.",
      "tail_type": "description"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getAllAnnotationAttributesOnClassWithLocalAnnotation()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "getAllAnnotationAttributes",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getAllAnnotationAttributesOnClassWithLocalAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "��取类上的所有注解属性",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getAllAnnotationAttributesOnClassWithLocalAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "注解属性获取的设计原则",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getAllAnnotationAttributesOnClassWithLocalAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "获取类上注解属性的示例代码",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getAllAnnotationAttributesOnClassWithLocalAnnotation()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getAllMergedAnnotationsOnClassWithInterface()",
      "tail_type": "apiFunction"
    },
    {
      "head": "getAllMergedAnnotationsOnClassWithInterface()",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getAllMergedAnnotationsOnClassWithInterface()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getAllMergedAnnotationsOnClassWithInterface()",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getAllMergedAnnotationsOnClassWithInterface()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.SubSubClassWithInheritedAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "Inherited Annotation Processing",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.SubSubClassWithInheritedAnnotation",
      "head_type": "class",
      "relation": "have",
      "tail": "Inherited annotations are annotations that are inherited from parent classes or interfaces. They are used to provide metadata about the elements in the code.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SubSubClassWithInheritedAnnotation",
      "head_type": "class",
      "relation": "have",
      "tail": "Design Principle: Inheritance and Code Reusability. The class is designed to demonstrate how annotations can be inherited and reused across different classes and interfaces, promoting modularity and reducing redundancy.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SubSubClassWithInheritedAnnotation",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AliasFor",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AliasFor",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "Annotation Attribute Aliasing",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AliasFor",
      "head_type": "class",
      "relation": "have",
      "tail": "Annotation attributes can be aliased using @AliasFor, which allows for defining alternative names for annotation attributes, enhancing flexibility and backward compatibility.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AliasFor",
      "head_type": "class",
      "relation": "have",
      "tail": "Design Principle: Flexibility and Backward Compatibility. @AliasFor is designed to provide flexibility in defining and using annotations, ensuring that changes to attribute names do not break existing code.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests#sortClasses()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "sortClasses",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests#sortClasses()",
      "head_type": "method",
      "relation": "have",
      "tail": "sortClassesSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "sortClassesSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests#sortClasses()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.core.annotation.WithExampleMetaAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "meta-annotation processing",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.WithExampleMetaAnnotation",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.WithExampleMetaAnnotation",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.WithExampleMetaAnnotation",
      "head_type": "class",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnClassWhenNotAnnotatedScansNone()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scanning inherited annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnClassWhenNotAnnotatedScansNone()",
      "head_type": "method",
      "relation": "have",
      "tail": "sample code for scanning inherited annotations",
      "tail_type": "useSampleCode"
    },
    {
      "head": "sample code for scanning inherited annotations",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "complete example of scanning inherited annotations",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnClassWhenNotAnnotatedScansNone()",
      "head_type": "method",
      "relation": "have",
      "tail": "related concept interpretation for scanning inherited annotations",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "related concept interpretation for scanning inherited annotations",
      "head_type": "relatedConceptInterpretation",
      "relation": "have",
      "tail": "detailed explanation of scanning inherited annotations",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnClassWhenNotAnnotatedScansNone()",
      "head_type": "method",
      "relation": "have",
      "tail": "design principle interpretation for scanning inherited annotations",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "design principle interpretation for scanning inherited annotations",
      "head_type": "designPrincipleInterpretation",
      "relation": "have",
      "tail": "detailed explanation of design principles for scanning inherited annotations",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnClassWhenNotAnnotatedScansNone()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scan",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnClassWhenNotAnnotatedScansNone()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "source",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnClassWhenNotAnnotatedScansNone()",
      "head_type": "method",
      "relation": "have",
      "tail": "source",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnClassWhenNotAnnotatedScansNone()",
      "head_type": "method",
      "relation": "have",
      "tail": "SearchStrategy.SUPERCLASS",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnClassWhenNotAnnotatedScansNone()",
      "head_type": "method",
      "relation": "have",
      "tail": "WithNoAnnotations.class",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnClassWhenNotAnnotatedScansNone()",
      "head_type": "method",
      "relation": "have",
      "tail": "assertThat().isEmpty()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnClassWhenNotAnnotatedScansNone()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnClassWhenNotAnnotatedScansNone()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnClassWhenNotAnnotatedScansNone()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodWhenNotAnnotatedScansNone()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scanning annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodWhenNotAnnotatedScansNone()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "method must not be annotated",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodWhenNotAnnotatedScansNone()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "scanning superclass for annotations",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodWhenNotAnnotatedScansNone()",
      "head_type": "method",
      "relation": "have",
      "tail": "void superclassStrategyOnMethodWhenNotAnnotatedScansNone() {\n    Method source = methodFrom(WithNoAnnotations.class);\n    assertThat(scan(source, SearchStrategy.SUPERCLASS)).isEmpty();\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodWhenNotAnnotatedScansNone()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodWhenNotAnnotatedScansNone()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodWhenNotAnnotatedScansNone()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodWhenMultipleAnnotationsScansAnnotations()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scan annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodWhenMultipleAnnotationsScansAnnotations()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "multiple annotations on method",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodWhenMultipleAnnotationsScansAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "sample code for scanning annotations",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodWhenMultipleAnnotationsScansAnnotations()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "sample code for scanning annotations",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "complete example for scanning annotations",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.HierarchyInterfaceInterface",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "org.springframework.core.annotation.HierarchyInterfaceInterface",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.HierarchyInterfaceInterface",
      "head_type": "class",
      "relation": "have",
      "tail": "org.springframework.core.annotation.HierarchyInterfaceInterface",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForWithIncompatibleReturnTypes()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "AnnotationTypeMappings.forAnnotationType()",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForWithIncompatibleReturnTypes()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "Misconfigured aliases: attribute 'test' in annotation [AliasForWithIncompatibleReturnTypes] and attribute 'test' in annotation [AliasForWithIncompatibleReturnTypesTarget] must declare the same return type.",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForWithIncompatibleReturnTypes()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "AliasForWithIncompatibleReturnTypes",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForWithIncompatibleReturnTypes()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "AliasForWithIncompatibleReturnTypesTarget",
      "tail_type": "class"
    },
    {
      "head": "AliasForWithIncompatibleReturnTypes",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "AliasForWithIncompatibleReturnTypesTarget",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "AnnotationTypeMappings.forAnnotationType()",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "AnnotationTypeMapping",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "OutputStream",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "ReflectionUtils::invokeMethod",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "ClassValueWithDefault",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "AnnotationTypeMappings",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "isEquivalentToDefaultValue",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "assertThat",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "isFalse",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "forAnnotationType",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "get",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "AnnotationTypeMapping",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "OutputStream",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "ReflectionUtils::invokeMethod",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "ClassValueWithDefault",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "AnnotationTypeMappings",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "isEquivalentToDefaultValue",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "assertThat",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "isFalse",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "forAnnotationType",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "get",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "AnnotationTypeMapping",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "OutputStream",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "ReflectionUtils::invokeMethod",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "ClassValueWithDefault",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "AnnotationTypeMappings",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "isEquivalentToDefaultValue",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "assertThat",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "isFalse",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "forAnnotationType",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "get",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "AnnotationTypeMapping",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "OutputStream",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "ReflectionUtils::invokeMethod",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "ClassValueWithDefault",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "AnnotationTypeMappings",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "isEquivalentToDefaultValue",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "assertThat",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "isFalse",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "forAnnotationType",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "get",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "AnnotationTypeMapping",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "OutputStream",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "ReflectionUtils::invokeMethod",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "ClassValueWithDefault",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "AnnotationTypeMappings",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "isEquivalentToDefaultValue",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "assertThat",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "isFalse",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "forAnnotationType",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "get",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "AnnotationTypeMapping",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "OutputStream",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "ReflectionUtils::invokeMethod",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "ClassValueWithDefault",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "AnnotationTypeMappings",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "isEquivalentToDefaultValue",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "assertThat",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "isFalse",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "forAnnotationType",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "get",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "AnnotationTypeMapping",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "OutputStream",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "ReflectionUtils::invokeMethod",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "ClassValueWithDefault",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "AnnotationTypeMappings",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNotMatchingReturnsFalse()",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationWithMetaAnnotationOnLeaf()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "find method annotation with meta annotation on leaf",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationWithMetaAnnotationOnLeaf()",
      "head_type": "method",
      "relation": "have",
      "tail": "sample code for finding method annotation with meta annotation on leaf",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationWithMetaAnnotationOnLeaf()",
      "head_type": "method",
      "relation": "have",
      "tail": "related concept interpretation for finding method annotation with meta annotation on leaf",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationWithMetaAnnotationOnLeaf()",
      "head_type": "method",
      "relation": "have",
      "tail": "design principle interpretation for finding method annotation with meta annotation on leaf",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationWithMetaAnnotationOnLeaf()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findRepeatableAnnotation()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "findRepeatableAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findRepeatableAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "findRepeatableAnnotationSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "findRepeatableAnnotationSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.WebController#handleMappedWithPathAttribute()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "handle HTTP requests with specific path and methods",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.WebController#handleMappedWithPathAttribute()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "must be used with @WebMapping annotation",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.WebController#handleMappedWithPathAttribute()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "web applications requiring specific path and method handling",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.WebController#handleMappedWithPathAttribute()",
      "head_type": "method",
      "relation": "have",
      "tail": "public void handleMappedWithPathAttribute() { // implementation code }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.WebController#handleMappedWithPathAttribute()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.WebController",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.WebController#handleMappedWithPathAttribute()",
      "head_type": "method",
      "relation": "have",
      "tail": "Handles HTTP requests based on path and method specified in @WebMapping annotation.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.WebController#handleMappedWithPathAttribute()",
      "head_type": "method",
      "relation": "have",
      "tail": "Follows the principle of separation of concerns by handling HTTP requests in a controller method.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassWithCycles",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getSampleClassWithCycles",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassWithCycles",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getSampleClassWithCyclesList",
      "tail_type": "apiFunction"
    },
    {
      "head": "getSampleClassWithCycles",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getSampleClassWithCyclesList",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithAnyMemberCategoryDoesNotMatchOtherCategory()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "reflection type registration",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithAnyMemberCategoryDoesNotMatchOtherCategory()",
      "head_type": "method",
      "relation": "have",
      "tail": "runtimeHints.reflection().registerType(SampleClass.class, MemberCategory.INTROSPECT_PUBLIC_METHODS, MemberCategory.INVOKE_PUBLIC_METHODS);",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithAnyMemberCategoryDoesNotMatchOtherCategory()",
      "head_type": "method",
      "relation": "have",
      "tail": "assertPredicateDoesNotMatch(reflection.onType(SampleClass.class).withAnyMemberCategory(MemberCategory.INVOKE_DECLARED_METHODS));",
      "tail_type": "useSampleCode"
    },
    {
      "head": "reflection type registration",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "runtimeHints.reflection().registerType(SampleClass.class, MemberCategory.INTROSPECT_PUBLIC_METHODS, MemberCategory.INVOKE_PUBLIC_METHODS);",
      "tail_type": "useSampleCode"
    },
    {
      "head": "reflection type registration",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "assertPredicateDoesNotMatch(reflection.onType(SampleClass.class).withAnyMemberCategory(MemberCategory.INVOKE_DECLARED_METHODS));",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithAnyMemberCategoryDoesNotMatchOtherCategory()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "SampleClass",
      "tail_type": "class"
    },
    {
      "head": "reflection type registration",
      "head_type": "apiFunction",
      "relation": "associated_with",
      "tail": "SampleClass",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodInvocationDoesNotMatchInvokeDeclaredMethods()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "reflectionHintRegistration",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodInvocationDoesNotMatchInvokeDeclaredMethods()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "predicateVerification",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodInvocationDoesNotMatchInvokeDeclaredMethods()",
      "head_type": "method",
      "relation": "have",
      "tail": "runtimeHintsRegistration",
      "tail_type": "useSampleCode"
    },
    {
      "head": "runtimeHintsRegistration",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "SampleClass",
      "tail_type": "class"
    },
    {
      "head": "runtimeHintsRegistration",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "MemberCategory.INVOKE_DECLARED_METHODS",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodInvocationDoesNotMatchInvokeDeclaredMethods()",
      "head_type": "method",
      "relation": "have",
      "tail": "reflectionHintRegistrationExplanation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodInvocationDoesNotMatchInvokeDeclaredMethods()",
      "head_type": "method",
      "relation": "have",
      "tail": "predicateVerificationExplanation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodInvocationDoesNotMatchInvokeDeclaredMethods()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrinciplesExplanation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#fieldAccessDoesNotMatchTypeHint()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "fieldAccessDoesNotMatchTypeHint",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#fieldAccessDoesNotMatchTypeHint()",
      "head_type": "method",
      "relation": "have",
      "tail": "runtimeHints.reflection().registerType(SampleClass.class);",
      "tail_type": "useSampleCode"
    },
    {
      "head": "fieldAccessDoesNotMatchTypeHint",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "runtimeHints.reflection().registerType(SampleClass.class);",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#fieldAccessDoesNotMatchTypeHint()",
      "head_type": "method",
      "relation": "have",
      "tail": "assertPredicateDoesNotMatch(reflection.onField(SampleClass.class, \"publicField\"));",
      "tail_type": "useSampleCode"
    },
    {
      "head": "fieldAccessDoesNotMatchTypeHint",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "assertPredicateDoesNotMatch(reflection.onField(SampleClass.class, \"publicField\"));",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#fieldAccessDoesNotMatchTypeHint()",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.aot.hint.predicate.ReflectionOnField",
      "tail_type": "class"
    },
    {
      "head": "fieldAccessDoesNotMatchTypeHint",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "org.springframework.aot.hint.predicate.ReflectionOnField",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#fieldAccessDoesNotMatchTypeHint()",
      "head_type": "method",
      "relation": "have",
      "tail": "SampleClass",
      "tail_type": "class"
    },
    {
      "head": "fieldAccessDoesNotMatchTypeHint",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "SampleClass",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.SerializationHintsPredicatesTests#shouldMatchRegisteredClass()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerType",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.SerializationHintsPredicatesTests#shouldMatchRegisteredClass()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "test",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.SerializationHintsPredicatesTests#shouldMatchRegisteredClass()",
      "head_type": "method",
      "relation": "have",
      "tail": "runtimeHints.serialization().registerType(String.class); assertThat(serialization.onType(String.class).test(runtimeHints)).isTrue();",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.SerializationHintsPredicatesTests#shouldMatchRegisteredClass()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "runtimeHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.SerializationHintsPredicatesTests#shouldMatchRegisteredClass()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "serialization",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.SerializationHintsPredicatesTests#shouldMatchRegisteredClass()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "String.class",
      "tail_type": "class"
    },
    {
      "head": "registerType",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "class type must be registered",
      "tail_type": "useConstraint"
    },
    {
      "head": "test",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "runtimeHints must be initialized",
      "tail_type": "useConstraint"
    },
    {
      "head": "runtimeHints.serialization().registerType(String.class); assertThat(serialization.onType(String.class).test(runtimeHints)).isTrue();",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "registerType",
      "tail_type": "apiFunction"
    },
    {
      "head": "runtimeHints.serialization().registerType(String.class); assertThat(serialization.onType(String.class).test(runtimeHints)).isTrue();",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "test",
      "tail_type": "apiFunction"
    },
    {
      "head": "runtimeHints.serialization().registerType(String.class); assertThat(serialization.onType(String.class).test(runtimeHints)).isTrue();",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "SerializationHintsPredicatesTests",
      "tail_type": "class"
    },
    {
      "head": "runtimeHints.serialization().registerType(String.class); assertThat(serialization.onType(String.class).test(runtimeHints)).isTrue();",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "SerializationHintsPredicates",
      "tail_type": "class"
    },
    {
      "head": "runtimeHints.serialization().registerType(String.class); assertThat(serialization.onType(String.class).test(runtimeHints)).isTrue();",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "String.class",
      "tail_type": "class"
    },
    {
      "head": "runtimeHints",
      "head_type": "class",
      "relation": "have",
      "tail": "serialization",
      "tail_type": "class"
    },
    {
      "head": "runtimeHints",
      "head_type": "class",
      "relation": "have",
      "tail": "SerializationHintsPredicates",
      "tail_type": "class"
    },
    {
      "head": "runtimeHints",
      "head_type": "class",
      "relation": "have",
      "tail": "SerializationHintsPredicatesTests",
      "tail_type": "class"
    },
    {
      "head": "runtimeHints",
      "head_type": "class",
      "relation": "have",
      "tail": "String.class",
      "tail_type": "class"
    },
    {
      "head": "serialization",
      "head_type": "class",
      "relation": "have",
      "tail": "onType",
      "tail_type": "apiFunction"
    },
    {
      "head": "serialization",
      "head_type": "class",
      "relation": "have",
      "tail": "SerializationHintsPredicates",
      "tail_type": "class"
    },
    {
      "head": "serialization",
      "head_type": "class",
      "relation": "have",
      "tail": "SerializationHintsPredicatesTests",
      "tail_type": "class"
    },
    {
      "head": "serialization",
      "head_type": "class",
      "relation": "have",
      "tail": "String.class",
      "tail_type": "class"
    },
    {
      "head": "String.class",
      "head_type": "class",
      "relation": "have",
      "tail": "SerializationHintsPredicates",
      "tail_type": "class"
    },
    {
      "head": "String.class",
      "head_type": "class",
      "relation": "have",
      "tail": "SerializationHintsPredicatesTests",
      "tail_type": "class"
    },
    {
      "head": "String.class",
      "head_type": "class",
      "relation": "have",
      "tail": "runtimeHints",
      "tail_type": "class"
    },
    {
      "head": "SerializationHintsPredicates",
      "head_type": "class",
      "relation": "have",
      "tail": "SerializationHintsPredicatesTests",
      "tail_type": "class"
    },
    {
      "head": "SerializationHintsPredicates",
      "head_type": "class",
      "relation": "have",
      "tail": "runtimeHints",
      "tail_type": "class"
    },
    {
      "head": "SerializationHintsPredicatesTests",
      "head_type": "class",
      "relation": "have",
      "tail": "runtimeHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#registerPattern()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "register resource pattern",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#registerPattern()",
      "head_type": "method",
      "relation": "have",
      "tail": "sample code for registering resource pattern",
      "tail_type": "useSampleCode"
    },
    {
      "head": "register resource pattern",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "resource pattern registration",
      "tail_type": "useScenario"
    },
    {
      "head": "register resource pattern",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "sample code for registering resource pattern",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.ResourceHintsTests#registerPattern()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#registerPattern()",
      "head_type": "method",
      "relation": "have",
      "tail": "related concept interpretation for resource pattern registration",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#registerPattern()",
      "head_type": "method",
      "relation": "have",
      "tail": "design principle interpretation for resource pattern registration",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.ResourcePatternHintTests#rootDirectory()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "ResourcePatternHint",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ResourcePatternHintTests#rootDirectory()",
      "head_type": "method",
      "relation": "have",
      "tail": "ResourcePatternHint matches root directory",
      "tail_type": "useSampleCode"
    },
    {
      "head": "ResourcePatternHint matches root directory",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.ResourcePatternHintTests#rootDirectory()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.aot.hint.ResourcePatternHintTests#rootDirectory()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.ResourcePatternHint",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.RuntimeHintsTests#javaSerializationHintWithClass()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "javaSerializationHint",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.RuntimeHintsTests#javaSerializationHintWithClass()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerType",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerType",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "JavaSerializationHint",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.RuntimeHintsTests#javaSerializationHintWithClass()",
      "head_type": "method",
      "relation": "have",
      "tail": "javaSerializationHints",
      "tail_type": "useSampleCode"
    },
    {
      "head": "javaSerializationHints",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "JavaSerializationHint",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.RuntimeHintsTests#javaSerializationHintWithClass()",
      "head_type": "method",
      "relation": "have",
      "tail": "containsExactly",
      "tail_type": "useSampleCode"
    },
    {
      "head": "containsExactly",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "TypeReference",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.RuntimeHintsTests#javaSerializationHintWithClass()",
      "head_type": "method",
      "relation": "have",
      "tail": "TypeReference.of",
      "tail_type": "useSampleCode"
    },
    {
      "head": "TypeReference.of",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "TypeReference",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.RuntimeHintsTests#javaSerializationHintWithClass()",
      "head_type": "method",
      "relation": "have",
      "tail": "javaSerializationHintWithClass",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "javaSerializationHintWithClass",
      "head_type": "relatedConceptInterpretation",
      "relation": "associated_with",
      "tail": "Java Serialization",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.RuntimeHintsTests#javaSerializationHintWithClass()",
      "head_type": "method",
      "relation": "have",
      "tail": "javaSerializationHintWithClassDesignPrinciple",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "javaSerializationHintWithClassDesignPrinciple",
      "head_type": "designPrincipleInterpretation",
      "relation": "associated_with",
      "tail": "Efficiency and Maintainability",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#sortMethodHints()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerType",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#sortMethodHints()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "withMethod",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#sortMethodHints()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "writeJson",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#sortMethodHints()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "RuntimeHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#sortMethodHints()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "Integer",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#sortMethodHints()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "ExecutableMode",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#sortMethodHints()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerType method sorts method hints",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#sortMethodHints()",
      "head_type": "method",
      "relation": "have",
      "tail": " serialization of RuntimeHints",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#sortMethodHints()",
      "head_type": "method",
      "relation": "have",
      "tail": "test method for sorting method hints",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#sortMethodHints()",
      "head_type": "method",
      "relation": "have",
      "tail": "sample code for sorting method hints",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.nativex.JniHints",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "JNI库集成",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.JniHints",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "JNI版本兼容性",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.aot.nativex.JniHints",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "Spring Native应用开发",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.nativex.JniHints",
      "head_type": "class",
      "relation": "have",
      "tail": "JNI库集成示例代码",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.nativex.JniHints",
      "head_type": "class",
      "relation": "have",
      "tail": "JNI技术详解",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.nativex.JniHints",
      "head_type": "class",
      "relation": "have",
      "tail": "Spring Native设计理念",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.nativex.JniHints",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.aot.nativex.NativeConfiguration",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.ResourceHintsTests#registerWildcardInTheMiddlePattern()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerWildcardResourcePattern",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.ResourceHintsTests#registerWildcardInTheMiddlePattern()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerWildcardResourcePatternSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerWildcardResourcePatternSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.aot.nativex.ResourceHintsTests#registerWildcardInTheMiddlePattern()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.aot.nativex.ResourceHintsTests#registerPatternWithIncludesAndExcludes()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerPatternWithIncludesAndExcludes",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.ResourceHintsTests#registerPatternWithIncludesAndExcludes()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerPatternWithIncludesAndExcludesSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerPatternWithIncludesAndExcludesSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.aot.nativex.ResourceHintsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.ProxyHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "empty",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.ProxyHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "shouldWriteOneEntry",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.ProxyHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "shouldWriteMultipleEntries",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.ProxyHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "shouldWriteEntriesInNaturalOrder",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.ProxyHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "shouldWriteInnerClass",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.ProxyHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "shouldWriteCondition",
      "tail_type": "apiFunction"
    },
    {
      "head": "empty",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "shouldWriteOneEntry",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "shouldWriteMultipleEntries",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "shouldWriteEntriesInNaturalOrder",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "shouldWriteInnerClass",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "shouldWriteCondition",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getAllAnnotationAttributesOnLangType()",
      "tail_type": "apiFunction"
    },
    {
      "head": "getAllAnnotationAttributesOnLangType()",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "org.springframework.lang.NonNullApi",
      "tail_type": "class"
    },
    {
      "head": "getAllAnnotationAttributesOnLangType()",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "Nonnull",
      "tail_type": "class"
    },
    {
      "head": "getAllAnnotationAttributesOnLangType()",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "When.ALWAYS",
      "tail_type": "useScenario"
    },
    {
      "head": "getAllAnnotationAttributesOnLangType()",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "MultiValueMap<String, Object>",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.lang.NonNullApi",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "Nonnull",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "When.ALWAYS",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "MultiValueMap<String, Object>",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesFromBridgeMethod()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "findMergedAnnotationAttributes",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesFromBridgeMethod()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "bridgeMethod",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesFromBridgeMethod()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "bridgedMethod",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesFromBridgeMethod()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesFromBridgeMethod()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesFromBridgeMethod()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesFromBridgeMethod()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.BridgeMethodResolverTests#withGenericParameter()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMethodAnnotationFromGenericSuperclass()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "findMethodAnnotationFromGenericSuperclass",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMethodAnnotationFromGenericSuperclass()",
      "head_type": "method",
      "relation": "have",
      "tail": "findMergedAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMethodAnnotationFromGenericSuperclass()",
      "head_type": "method",
      "relation": "have",
      "tail": "assertThat",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMethodAnnotationFromGenericSuperclass()",
      "head_type": "method",
      "relation": "have",
      "tail": "isNotNull",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMethodAnnotationFromGenericSuperclass()",
      "head_type": "method",
      "relation": "have",
      "tail": "Order.class",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMethodAnnotationFromGenericSuperclass()",
      "head_type": "method",
      "relation": "have",
      "tail": "ExtendsBaseClassWithGenericAnnotatedMethod.class",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMethodAnnotationFromGenericSuperclass()",
      "head_type": "method",
      "relation": "have",
      "tail": "String.class",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMethodAnnotationFromGenericSuperclass()",
      "head_type": "method",
      "relation": "have",
      "tail": "Order",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMethodAnnotationFromGenericSuperclass()",
      "head_type": "method",
      "relation": "have",
      "tail": "ExtendsBaseClassWithGenericAnnotatedMethod",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMethodAnnotationFromGenericSuperclass()",
      "head_type": "method",
      "relation": "have",
      "tail": " SPR-17146 ",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMethodAnnotationFromGenericSuperclass()",
      "head_type": "method",
      "relation": "have",
      "tail": " SPR-17146 ",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMethodAnnotationFromGenericSuperclass()",
      "head_type": "method",
      "relation": "have",
      "tail": "void findMethodAnnotationFromGenericSuperclass() throws Exception {\n    Method method = ExtendsBaseClassWithGenericAnnotatedMethod.class.getMethod(\"foo\", String.class);\n    Order order = findMergedAnnotation(method, Order.class);\n    assertThat(order).isNotNull();\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#forAnnotationsCreatesCopyOfArrayOnEachCall()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "copy creation of array annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#forAnnotationsCreatesCopyOfArrayOnEachCall()",
      "head_type": "method",
      "relation": "have",
      "tail": "sample code for creating a copy of array annotations",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#forAnnotationsCreatesCopyOfArrayOnEachCall()",
      "head_type": "method",
      "relation": "have",
      "tail": "interpretation of related concepts for creating a copy of array annotations",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#forAnnotationsCreatesCopyOfArrayOnEachCall()",
      "head_type": "method",
      "relation": "have",
      "tail": "design principle interpretation for creating a copy of array annotations",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#forAnnotationsCreatesCopyOfArrayOnEachCall()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtils",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getMergedRepeatableAnnotationsWithContainerWithMultipleAttributes()",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedRepeatableAnnotationsWithContainerWithMultipleAttributes()",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getMergedRepeatableAnnotationsWithContainerWithMultipleAttributes() useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getMergedRepeatableAnnotationsWithContainerWithMultipleAttributes() useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "package org.springframework.core.annotation; import org.junit.jupiter.api.Test; import java.util.Set; import static org.assertj.core.api.Assertions.assertThat; public class AnnotatedElementUtilsTests { @Test void getMergedRepeatableAnnotationsWithContainerWithMultipleAttributes() { Set<StandardRepeatableWithContainerWithMultipleAttributes> repeatableAnnotations = AnnotatedElementUtils.getMergedRepeatableAnnotations(StandardRepeatablesWithContainerWithMultipleAttributesTestCase.class, StandardRepeatableWithContainerWithMultipleAttributes.class); assertThat(repeatableAnnotations).map(StandardRepeatableWithContainerWithMultipleAttributes::value).containsExactly(\"a\", \"b\"); } }",
      "tail_type": "code"
    },
    {
      "head": "getMergedRepeatableAnnotationsWithContainerWithMultipleAttributes()",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getMergedRepeatableAnnotationsWithContainerWithMultipleAttributes() relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "getMergedRepeatableAnnotationsWithContainerWithMultipleAttributes() relatedConceptInterpretation",
      "head_type": "relatedConceptInterpretation",
      "relation": "have",
      "tail": "This method is used to retrieve merged repeatable annotations from a class, considering containers with multiple attributes. It is particularly useful in scenarios where annotations are repeated and need to be aggregated into a single set.",
      "tail_type": "description"
    },
    {
      "head": "getMergedRepeatableAnnotationsWithContainerWithMultipleAttributes()",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getMergedRepeatableAnnotationsWithContainerWithMultipleAttributes() designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "getMergedRepeatableAnnotationsWithContainerWithMultipleAttributes() designPrincipleInterpretation",
      "head_type": "designPrincipleInterpretation",
      "relation": "have",
      "tail": "The design principle behind this method is to provide a convenient way to handle repeatable annotations, ensuring that annotations with multiple attributes are correctly merged and processed. This enhances code readability and maintainability by abstracting the complexity of annotation handling.",
      "tail_type": "description"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtils",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.ConventionBasedComposedContextConfigClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "context configuration class composition",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.ConventionBasedComposedContextConfigClass",
      "head_type": "class",
      "relation": "have",
      "tail": "related concept interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.ConventionBasedComposedContextConfigClass",
      "head_type": "class",
      "relation": "have",
      "tail": "design principle interpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "context configuration class composition",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "convention based constraints",
      "tail_type": "useConstraint"
    },
    {
      "head": "context configuration class composition",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "Spring context configuration",
      "tail_type": "useScenario"
    },
    {
      "head": "context configuration class composition",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "use sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AliasedValueComposedContextConfigClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "lazy loading",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AliasedValueComposedContextConfigClass",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "circular aliases are prohibited",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.AliasedValueComposedContextConfigClass",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "multiple aliases for a single name",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AliasedValueComposedContextConfigClass",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AliasedValueComposedContextConfigClass",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AliasedValueComposedContextConfigClass",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.SimpleAliasRegistryTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "instanceVariableIsAnAnnotationAwareOrderComparator",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "sortInstances",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "sortInstancesWithPriority",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "sortInstancesWithOrderAndPriority",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "sortInstancesWithSubclass",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "sortClasses",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "sortClassesWithSubclass",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "sortWithNulls",
      "tail_type": "apiFunction"
    },
    {
      "head": "sortInstances",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "sortInstancesWithPriority",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "sortInstancesWithOrderAndPriority",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "sortInstancesWithSubclass",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "sortClasses",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "sortClassesWithSubclass",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "sortWithNulls",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "instanceVariableIsAnAnnotationAwareOrderComparator",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "circular aliases are prohibited",
      "tail_type": "useConstraint"
    },
    {
      "head": "sortInstances",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "multiple aliases for a single name",
      "tail_type": "useScenario"
    },
    {
      "head": "sortInstancesWithPriority",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "multiple aliases for a single name",
      "tail_type": "useScenario"
    },
    {
      "head": "sortInstancesWithOrderAndPriority",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "multiple aliases for a single name",
      "tail_type": "useScenario"
    },
    {
      "head": "sortInstancesWithSubclass",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "multiple aliases for a single name",
      "tail_type": "useScenario"
    },
    {
      "head": "sortClasses",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "multiple aliases for a single name",
      "tail_type": "useScenario"
    },
    {
      "head": "sortClassesWithSubclass",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "multiple aliases for a single name",
      "tail_type": "useScenario"
    },
    {
      "head": "sortWithNulls",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "multiple aliases for a single name",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.SimpleAliasRegistryTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.WithMetaMetaTestAnnotation1AndMetaTestAnnotation2",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "metaAnnotationProcessing",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.WithMetaMetaTestAnnotation1AndMetaTestAnnotation2",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.WithMetaMetaTestAnnotation1AndMetaTestAnnotation2",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "metaAnnotationProcessing",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "annotationCombination",
      "tail_type": "useScenario"
    },
    {
      "head": "metaAnnotationProcessing",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "annotationInheritanceRules",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.WithMetaMetaTestAnnotation1AndMetaTestAnnotation2",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.MetaTestAnnotation1",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.WithMetaMetaTestAnnotation1AndMetaTestAnnotation2",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.MetaTestAnnotation2",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnClassScansAnnotations()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scanning annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnClassScansAnnotations()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "class scanning",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnClassScansAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "sample code for scanning annotations",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnClassScansAnnotations()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "sample code for scanning annotations",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "complete example of scanning annotations",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnClassWhenHasInterfaceDoesNotIncludeInterfaces()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scan",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnClassWhenHasInterfaceDoesNotIncludeInterfaces()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "assertThat",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnClassWhenHasInterfaceDoesNotIncludeInterfaces()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "containsExactly",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnClassWhenHasInterfaceDoesNotIncludeInterfaces()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnClassWhenHasInterfaceDoesNotIncludeInterfaces()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnClassWhenHasInterfaceDoesNotIncludeInterfaces()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnClassWhenHasInterfaceDoesNotIncludeInterfaces()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsMethodOnMethodWhenHasSuperclassIgnoresInherited()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scanning inherited annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsMethodOnMethodWhenHasSuperclassIgnoresInherited()",
      "head_type": "method",
      "relation": "have",
      "tail": "sample code for scanning inherited annotations",
      "tail_type": "useSampleCode"
    },
    {
      "head": "sample code for scanning inherited annotations",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "complete example of scanning inherited annotations",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsMethodOnMethodWhenHasSuperclassIgnoresInherited()",
      "head_type": "method",
      "relation": "have",
      "tail": "related concept interpretation for scanning inherited annotations",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "related concept interpretation for scanning inherited annotations",
      "head_type": "relatedConceptInterpretation",
      "relation": "have",
      "tail": "detailed explanation of scanning inherited annotations",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsMethodOnMethodWhenHasSuperclassIgnoresInherited()",
      "head_type": "method",
      "relation": "have",
      "tail": "design principle interpretation for scanning inherited annotations",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "design principle interpretation for scanning inherited annotations",
      "head_type": "designPrincipleInterpretation",
      "relation": "have",
      "tail": "detailed explanation of design principles for scanning inherited annotations",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SingleInterface#method()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "testFunctionality",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.SingleInterface#method()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "annotationConstraints",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.SingleInterface#method()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "voidReturnType",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.SingleInterface#method()",
      "head_type": "method",
      "relation": "have",
      "tail": "voidReturnType",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.SingleInterface#method()",
      "head_type": "method",
      "relation": "have",
      "tail": "sampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.SingleInterface#method()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConcepts",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SingleInterface#method()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrinciples",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SingleInterface#method()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.SingleInterface",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.WithHierarchy#method()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "testFunctionality",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.WithHierarchy#method()",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.core.annotation.WithHierarchy",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.WithHierarchy#method()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.WithHierarchy#method()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.WithHierarchy#method()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForSelfWithDifferentDefaults()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "AnnotationTypeMappings.forAnnotationType()",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForSelfWithDifferentDefaults()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "Misconfigured aliases",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForSelfWithDifferentDefaults()",
      "head_type": "method",
      "relation": "have",
      "tail": "AnnotationConfigurationException",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForSelfWithDifferentDefaults()",
      "head_type": "method",
      "relation": "have",
      "tail": "AliasForSelfWithDifferentDefaults",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForSelfWithDifferentDefaults()",
      "head_type": "method",
      "relation": "have",
      "tail": "AnnotationTypeMappings",
      "tail_type": "class"
    },
    {
      "head": "AnnotationTypeMappings.forAnnotationType()",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "Misconfigured aliases",
      "tail_type": "useConstraint"
    },
    {
      "head": "AnnotationTypeMappings.forAnnotationType()",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "AliasForSelfWithDifferentDefaults",
      "tail_type": "class"
    },
    {
      "head": "AnnotationTypeMappings.forAnnotationType()",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "AnnotationTypeMappings",
      "tail_type": "class"
    },
    {
      "head": "Misconfigured aliases",
      "head_type": "useConstraint",
      "relation": "have",
      "tail": "AnnotationTypeMappings.forAnnotationType()",
      "tail_type": "apiFunction"
    },
    {
      "head": "Misconfigured aliases",
      "head_type": "useConstraint",
      "relation": "have",
      "tail": "AliasForSelfWithDifferentDefaults",
      "tail_type": "class"
    },
    {
      "head": "Misconfigured aliases",
      "head_type": "useConstraint",
      "relation": "have",
      "tail": "AnnotationTypeMappings",
      "tail_type": "class"
    },
    {
      "head": "AnnotationConfigurationException",
      "head_type": "class",
      "relation": "have",
      "tail": "AnnotationTypeMappings.forAnnotationType()",
      "tail_type": "apiFunction"
    },
    {
      "head": "AnnotationConfigurationException",
      "head_type": "class",
      "relation": "have",
      "tail": "AliasForSelfWithDifferentDefaults",
      "tail_type": "class"
    },
    {
      "head": "AnnotationConfigurationException",
      "head_type": "class",
      "relation": "have",
      "tail": "AnnotationTypeMappings",
      "tail_type": "class"
    },
    {
      "head": "AliasForSelfWithDifferentDefaults",
      "head_type": "class",
      "relation": "have",
      "tail": "AnnotationTypeMappings.forAnnotationType()",
      "tail_type": "apiFunction"
    },
    {
      "head": "AliasForSelfWithDifferentDefaults",
      "head_type": "class",
      "relation": "have",
      "tail": "AnnotationTypeMappings",
      "tail_type": "class"
    },
    {
      "head": "AnnotationTypeMappings",
      "head_type": "class",
      "relation": "have",
      "tail": "AnnotationTypeMappings.forAnnotationType()",
      "tail_type": "apiFunction"
    },
    {
      "head": "AnnotationTypeMappings",
      "head_type": "class",
      "relation": "have",
      "tail": "AliasForSelfWithDifferentDefaults",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationFavorsMoreLocallyDeclaredComposedAnnotationsOverAnnotationsOnInterfaces()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "findClassAnnotationFavorsMoreLocallyDeclaredComposedAnnotationsOverAnnotationsOnInterfaces",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationFavorsMoreLocallyDeclaredComposedAnnotationsOverAnnotationsOnInterfaces()",
      "head_type": "method",
      "relation": "have",
      "tail": "since 4.1.2",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationFavorsMoreLocallyDeclaredComposedAnnotationsOverAnnotationsOnInterfaces()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationFavorsMoreLocallyDeclaredComposedAnnotationsOverAnnotationsOnInterfaces()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationFavorsMoreLocallyDeclaredComposedAnnotationsOverAnnotationsOnInterfaces()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.MetaMetaAnnotatedClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "meta-annotation processing",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.MetaMetaAnnotatedClass",
      "head_type": "class",
      "relation": "have",
      "tail": "used for creating meta-annotations",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.MetaMetaAnnotatedClass",
      "head_type": "class",
      "relation": "have",
      "tail": "related to annotation processing",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.MetaMetaAnnotatedClass",
      "head_type": "class",
      "relation": "have",
      "tail": "design principle based on annotation inheritance",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.InheritedAnnotationClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "inherited annotation processing",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.InheritedAnnotationClass",
      "head_type": "class",
      "relation": "have",
      "tail": "related concept interpretation for inherited annotations",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.InheritedAnnotationClass",
      "head_type": "class",
      "relation": "have",
      "tail": "design principle interpretation for inherited annotations",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.InheritedAnnotationClass",
      "head_type": "class",
      "relation": "have",
      "tail": "sample code for using inherited annotations",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.SubNonInheritedAnnotationClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "SubNonInheritedAnnotationClass",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.SubNonInheritedAnnotationClass",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SubNonInheritedAnnotationClass",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.annotation.RegistrationMethodWithoutTarget",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "reflection registration",
      "tail_type": "apiFunction"
    },
    {
      "head": "reflection registration",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "invoking declared constructors",
      "tail_type": "useScenario"
    },
    {
      "head": "reflection registration",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "sample code for reflection registration",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.annotation.RegistrationMethodWithoutTarget",
      "head_type": "class",
      "relation": "have",
      "tail": "sample code for reflection registration",
      "tail_type": "useSampleCode"
    },
    {
      "head": "reflection registration",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "related concept interpretation for reflection registration",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.annotation.RegistrationMethodWithoutTarget",
      "head_type": "class",
      "relation": "have",
      "tail": "related concept interpretation for reflection registration",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "reflection registration",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "design principle interpretation for reflection registration",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.annotation.RegistrationMethodWithoutTarget",
      "head_type": "class",
      "relation": "have",
      "tail": "design principle interpretation for reflection registration",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#shouldFailForNullType()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "org.springframework.aot.hint.predicate.ReflectionOnType#shouldFailForNullType()",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#shouldFailForNullType()",
      "head_type": "method",
      "relation": "have",
      "tail": "void shouldFailForNullType() { assertThatIllegalArgumentException().isThrownBy(() -> reflection.onType((TypeReference) null)); }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#reflectionOnClassShouldMatchIntrospection()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "reflectionOnType",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#reflectionOnClassShouldMatchIntrospection()",
      "head_type": "method",
      "relation": "have",
      "tail": "runtimeHints.reflection().registerType(SampleClass.class);",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#reflectionOnClassShouldMatchIntrospection()",
      "head_type": "method",
      "relation": "have",
      "tail": "assertPredicateMatches(reflection.onType(SampleClass.class));",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#reflectionOnClassShouldMatchIntrospection()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "SampleClass",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodIntrospectionMatchesTypeHint()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "introspection",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodIntrospectionMatchesTypeHint()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "reflection",
      "tail_type": "apiFunction"
    },
    {
      "head": "introspection",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "reflection",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "introspection",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "reflection",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "introspection",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "reflection",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "introspection",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "useScenario",
      "tail_type": "useScenario"
    },
    {
      "head": "reflection",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "useScenario",
      "tail_type": "useScenario"
    },
    {
      "head": "introspection",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "useConstraint",
      "tail_type": "useConstraint"
    },
    {
      "head": "reflection",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "useConstraint",
      "tail_type": "useConstraint"
    },
    {
      "head": "introspection",
      "head_type": "apiFunction",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.predicate.ReflectionOnMethod",
      "tail_type": "class"
    },
    {
      "head": "reflection",
      "head_type": "apiFunction",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.predicate.ReflectionOnMethod",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#registerTypeIfPresentIgnoresMissingClass()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerTypeIfPresent",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#registerTypeIfPresentIgnoresMissingClass()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerTypeIfPresentIgnoresMissingClass() useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerTypeIfPresent",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "class presence constraint",
      "tail_type": "useConstraint"
    },
    {
      "head": "registerTypeIfPresent",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "missing class scenario",
      "tail_type": "useScenario"
    },
    {
      "head": "registerTypeIfPresent",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "registerTypeIfPresent relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "registerTypeIfPresent",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "registerTypeIfPresent designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.ReflectionHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#registerConstructorTwiceUpdatesExistingEntry()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerConstructorTwiceUpdatesExistingEntry",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#registerConstructorTwiceUpdatesExistingEntry()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerConstructorTwiceUpdatesExistingEntrySampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerConstructorTwiceUpdatesExistingEntrySampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.aot.hint.ReflectionHintsTests#registerConstructorTwiceUpdatesExistingEntry()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registerType",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registerTypeWithNestedType",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registerTypeWithInnerNestedType",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registerTypeSeveralTimesAddsOnlyOneEntry",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registerExactMatches",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registerExactMatchesInRootDirectory",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registerRootDirectory",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registerRootPattern",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registerPattern",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registerPatternWithIncludesAndExcludes",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registerIfPresentRegisterExistingLocation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registerIfPresentIgnoreMissingLocation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registerResourceWithUnsupportedResourceType",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registerResourceWithNonexistentClassPathResource",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registerResourceWithExistingClassPathResource",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registerResourceWithExistingRelativeClassPathResource",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registerResourceBundle",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registerResourceBundleSeveralTimesAddsOneEntry",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "ResourceHints",
      "tail_type": "class"
    },
    {
      "head": "ResourceHints",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.ResourceHintsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#registerRootPattern()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "register resource pattern",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#registerRootPattern()",
      "head_type": "method",
      "relation": "have",
      "tail": "register resource pattern sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "register resource pattern sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.aot.hint.ResourceHintsTests#registerRootPattern() sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.SimpleTypeReferenceTests#arraysHaveSuitableReflectionTargetName(TypeReference,String)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "arraysHaveSuitableReflectionTargetName",
      "tail_type": "apiFunction"
    },
    {
      "head": "arraysHaveSuitableReflectionTargetName",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "org.springframework.aot.hint.SimpleTypeReferenceTests#arraysHaveSuitableReflectionTargetName(TypeReference,String)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "arraysHaveSuitableReflectionTargetName",
      "head_type": "apiFunction",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.SimpleTypeReferenceTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.TypeReferenceTests#equalsWithNonTypeReferenceIsFalse()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "TypeReference comparison",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.TypeReferenceTests#equalsWithNonTypeReferenceIsFalse()",
      "head_type": "method",
      "relation": "have",
      "tail": "TypeReference comparison sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "TypeReference comparison sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "package org.springframework.aot.hint;\n\nimport org.junit.jupiter.api.Test;\nimport static org.assertj.core.api.Assertions.assertThat;\n\nclass TypeReferenceTests {\n    @Test\n    void equalsWithNonTypeReferenceIsFalse() {\n        assertThat(TypeReference.of(String.class)).isNotEqualTo(\"java.lang.String\");\n    }\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.TypeReferenceTests#equalsWithNonTypeReferenceIsFalse()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.TypeReference",
      "tail_type": "class"
    },
    {
      "head": "TypeReference comparison",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "Compares TypeReference with other objects to determine equality.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "TypeReference comparison",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "Design principle: Ensure accurate type comparison for TypeReference instances.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests#writeWithEscapeTab()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "writeWithEscapeTab",
      "tail_type": "apiFunction"
    },
    {
      "head": "writeWithEscapeTab",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "writeWithEscapeTab() sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "writeWithEscapeTab() sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "Complete example of writeWithEscapeTab()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#namespace()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "generate reachability metadata",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#namespace()",
      "head_type": "method",
      "relation": "have",
      "tail": "generate reachability metadata sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "generate reachability metadata sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "package org.springframework.aot.nativex; import java.nio.file.Path; import java.nio.file.Paths; import org.springframework.aot.hint.RuntimeHints; import org.springframework.aot.hint.ResourceHints; public class FileNativeConfigurationWriterTests { @Test void namespace() { String groupId = \"foo.bar\"; String artifactId = \"baz\"; String filename = \"reachability-metadata.\"; FileNativeConfigurationWriter generator = new FileNativeConfigurationWriter(Paths.get(\"tempDir\"), groupId, artifactId); RuntimeHints hints = new RuntimeHints(); ResourceHints resourceHints = hints.resources(); resourceHints.registerPattern(\"com/example/test.properties\"); generator.write(hints); Path File = Paths.get(\"tempDir\").resolve(\"META-INF\").resolve(\"native-image\").resolve(groupId).resolve(artifactId).resolve(filename); assertThat(File.toFile()).exists(); } }",
      "tail_type": "code"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#namespace()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.nativex.FileNativeConfigurationWriter",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#namespace()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.RuntimeHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#namespace()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.ResourceHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#namespace()",
      "head_type": "method",
      "relation": "have",
      "tail": "reachability metadata generation explanation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "reachability metadata generation explanation",
      "head_type": "relatedConceptInterpretation",
      "relation": "have",
      "tail": "Reachability metadata is used in native image compilation to specify the resources and types that should be included in the final image. It ensures that all necessary classes and resources are available at runtime.",
      "tail_type": "description"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#namespace()",
      "head_type": "method",
      "relation": "have",
      "tail": "design principle for reachability metadata generation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "design principle for reachability metadata generation",
      "head_type": "designPrincipleInterpretation",
      "relation": "have",
      "tail": "The design principle for generating reachability metadata is to ensure that all required resources and types are included in the native image, while minimizing the size and improving the startup time of the application.",
      "tail_type": "description"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#sortConstructorHints()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerType",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#sortConstructorHints()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "withConstructor",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#sortConstructorHints()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "writeJson",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#sortConstructorHints()",
      "head_type": "method",
      "relation": "have",
      "tail": "Sample Code for ReflectionHintsTests#sortConstructorHints()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "Sample Code for ReflectionHintsTests#sortConstructorHints()",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.aot.nativex.ReflectionHintsTests#sortConstructorHints()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#sortConstructorHints()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.nativex.ReflectionHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#sortConstructorHints()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "Integer",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#sortConstructorHints()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "TypeReference",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#sortConstructorHints()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "ExecutableMode",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#sortConstructorHints()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "List",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#sortConstructorHints()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "relatedConceptInterpretation",
      "head_type": "relatedConceptInterpretation",
      "relation": "have",
      "tail": "org.springframework.aot.nativex.ReflectionHintsTests#sortConstructorHints()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#sortConstructorHints()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "designPrincipleInterpretation",
      "head_type": "designPrincipleInterpretation",
      "relation": "have",
      "tail": "org.springframework.aot.nativex.ReflectionHintsTests#sortConstructorHints()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.cglib.core.SpringNamingPolicyTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "generate unique class names",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.core.SpringNamingPolicyTests",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "prefix cannot be null",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.cglib.core.SpringNamingPolicyTests",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "handling null, java, javax, and custom prefixes",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.cglib.core.SpringNamingPolicyTests",
      "head_type": "class",
      "relation": "have",
      "tail": "void nullPrefix() { ... }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.core.SpringNamingPolicyTests",
      "head_type": "class",
      "relation": "have",
      "tail": "void javaPrefix() { ... }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.core.SpringNamingPolicyTests",
      "head_type": "class",
      "relation": "have",
      "tail": "void javaxPrefix() { ... }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.core.SpringNamingPolicyTests",
      "head_type": "class",
      "relation": "have",
      "tail": "void examplePrefix() { ... }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.core.SpringNamingPolicyTests",
      "head_type": "class",
      "relation": "have",
      "tail": "void prefixContainingSpringLabel() { ... }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.core.SpringNamingPolicyTests",
      "head_type": "class",
      "relation": "have",
      "tail": "void fastClass() { ... }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.core.SpringNamingPolicyTests",
      "head_type": "class",
      "relation": "have",
      "tail": "private String getClassName(String prefix) { ... }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.core.SpringNamingPolicyTests",
      "head_type": "class",
      "relation": "have",
      "tail": "private String getClassName(String prefix, String source, Object key) { ... }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.core.SpringNamingPolicyTests",
      "head_type": "class",
      "relation": "have",
      "tail": "Tests for SpringNamingPolicy",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.core.SpringNamingPolicyTests",
      "head_type": "class",
      "relation": "have",
      "tail": "Design principles of SpringNamingPolicyTests",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.core.SpringNamingPolicyTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "SpringNamingPolicy",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getMergedAnnotationWithTransitiveImplicitAliasesWithSingleElementOverridingAnArrayViaAliasFor()",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedAnnotationWithTransitiveImplicitAliasesWithSingleElementOverridingAnArrayViaAliasFor()",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnNonInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "findMergedAnnotationAttributes",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnNonInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "Should find @Order on NonInheritedAnnotationInterface",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnNonInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "void findMergedAnnotationAttributesOnNonInheritedAnnotationInterface() {\n    AnnotationAttributes attributes = findMergedAnnotationAttributes(NonInheritedAnnotationInterface.class, Order.class);\n    assertThat(attributes).as(\"Should find @Order on NonInheritedAnnotationInterface\").isNotNull();\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnNonInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnNonInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnNonInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesInheritedFromAbstractMethod()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "findMergedAnnotationAttributes",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesInheritedFromAbstractMethod()",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesInheritedFromAbstractMethod()",
      "head_type": "method",
      "relation": "have",
      "tail": "sample code for using findMergedAnnotationAttributes",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesInheritedFromAbstractMethod()",
      "head_type": "method",
      "relation": "have",
      "tail": "related concept interpretation for findMergedAnnotationAttributes",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesInheritedFromAbstractMethod()",
      "head_type": "method",
      "relation": "have",
      "tail": "design principle interpretation for findMergedAnnotationAttributes",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SubClassWithInheritedComposedAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "SubClassWithInheritedComposedAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.SubClassWithInheritedComposedAnnotation",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SubClassWithInheritedComposedAnnotation",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.TransactionalServiceImpl#doIt()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "perform a transactional operation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.TransactionalServiceImpl#doIt()",
      "head_type": "method",
      "relation": "have",
      "tail": "sample code for transactional operation",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.TransactionalServiceImpl#doIt()",
      "head_type": "method",
      "relation": "have",
      "tail": "related concept interpretation for transactional operation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.TransactionalServiceImpl#doIt()",
      "head_type": "method",
      "relation": "have",
      "tail": "design principle interpretation for transactional operation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.TransactionalServiceImpl#doIt()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.TransactionalServiceImpl",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAttributesTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getEnumWithTypeMismatch()",
      "tail_type": "apiFunction"
    },
    {
      "head": "getEnumWithTypeMismatch()",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getEnumWithTypeMismatch() Sample Code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getEnumWithTypeMismatch() Sample Code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "Complete Example Code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests#instanceVariableIsAnAnnotationAwareOrderComparator()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "instance verification",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests#instanceVariableIsAnAnnotationAwareOrderComparator()",
      "head_type": "method",
      "relation": "have",
      "tail": "void instanceVariableIsAnAnnotationAwareOrderComparator() {\n    assertThat(AnnotationAwareOrderComparator.INSTANCE).isInstanceOf(AnnotationAwareOrderComparator.class);\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests#instanceVariableIsAnAnnotationAwareOrderComparator()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationAwareOrderComparator",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.WithDefaultValue",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "assigning default values to annotation attributes",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.WithDefaultValue",
      "head_type": "class",
      "relation": "have",
      "tail": "related to the concept of annotations in Java, where metadata is provided about methods or types",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.WithDefaultValue",
      "head_type": "class",
      "relation": "have",
      "tail": "design principle of reducing boilerplate code by providing default values for commonly used annotation attributes",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.WithDefaultValue",
      "head_type": "class",
      "relation": "have",
      "tail": "sample code demonstrating the use of @WithDefaultValue to specify default values for annotation attributes",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationIntrospectionFailureTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "annotation introspection",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationIntrospectionFailureTests",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "class loading constraints",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationIntrospectionFailureTests",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "testing annotation failures",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationIntrospectionFailureTests",
      "head_type": "class",
      "relation": "have",
      "tail": "sample code for annotation introspection failure tests",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationIntrospectionFailureTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "AnnotationUtils",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationIntrospectionFailureTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "AnnotatedElementUtils",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationIntrospectionFailureTests",
      "head_type": "class",
      "relation": "have",
      "tail": "related concept interpretation for annotation introspection",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationIntrospectionFailureTests",
      "head_type": "class",
      "relation": "have",
      "tail": "design principle interpretation for handling annotation failures",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnMethodHierarchyScansInCorrectOrder()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scan",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnMethodHierarchyScansInCorrectOrder()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "assertThat",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnMethodHierarchyScansInCorrectOrder()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "containsExactly",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnMethodHierarchyScansInCorrectOrder()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "methodFrom",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnMethodHierarchyScansInCorrectOrder()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnMethodHierarchyScansInCorrectOrder()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "WithHierarchy",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnMethodHierarchyScansInCorrectOrder()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnMethodHierarchyScansInCorrectOrder()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnMethodHierarchyScansInCorrectOrder()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWhenHasInterfaceScansInterfaces()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scan annotations on method",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWhenHasInterfaceScansInterfaces()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "scanning annotations on methods with interfaces",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWhenHasInterfaceScansInterfaces()",
      "head_type": "method",
      "relation": "have",
      "tail": "void typeHierarchyStrategyOnMethodWhenHasInterfaceScansInterfaces() {\n    Method source = methodFrom(WithSingleInterface.class);\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\", \"1:TestAnnotation2\", \"1:TestInheritedAnnotation2\");\n    source = methodFrom(Hello1Impl.class);\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"1:TestAnnotation1\");\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWhenHasInterfaceScansInterfaces()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWhenHasInterfaceScansInterfaces()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWhenHasInterfaceScansInterfaces()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getAliasMappingWhenHasWithMultipleRoutesToAliasReturnsMappedAttributes",
      "tail_type": "apiFunction"
    },
    {
      "head": "getAliasMappingWhenHasWithMultipleRoutesToAliasReturnsMappedAttributes",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "multiple aliases for a single name",
      "tail_type": "useScenario"
    },
    {
      "head": "getAliasMappingWhenHasWithMultipleRoutesToAliasReturnsMappedAttributes",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "package org.springframework.core.annotation; import org.junit.jupiter.api.Test; import org.springframework.core.annotation.AnnotationTypeMappings; import org.springframework.core.annotation.AnnotationTypeMapping; import static org.assertj.core.api.Assertions.assertThat; @Test void getAliasMappingWhenHasWithMultipleRoutesToAliasReturnsMappedAttributes() { AnnotationTypeMappings mappings = AnnotationTypeMappings.forAnnotationType(MultipleRoutesToAliasA.class); AnnotationTypeMapping mappingsA = getMapping(mappings, MultipleRoutesToAliasA.class); assertThat(getAliasMapping(mappingsA, 0)).isNull(); AnnotationTypeMapping mappingsB = getMapping(mappings, MultipleRoutesToAliasB.class); assertThat(getAliasMapping(mappingsB, 0).getName()).isEqualTo(\"a1\"); assertThat(getAliasMapping(mappingsB, 1).getName()).isEqualTo(\"a1\"); assertThat(getAliasMapping(mappingsB, 2).getName()).isEqualTo(\"a1\"); AnnotationTypeMapping mappingsC = getMapping(mappings, MultipleRoutesToAliasC.class); assertThat(getAliasMapping(mappingsC, 0).getName()).isEqualTo(\"a1\"); assertThat(getAliasMapping(mappingsC, 1).getName()).isEqualTo(\"a1\"); }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationTypeMappings",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationTypeMapping",
      "tail_type": "class"
    },
    {
      "head": "getAliasMappingWhenHasWithMultipleRoutesToAliasReturnsMappedAttributes",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "This method tests the functionality of resolving alias mappings when there are multiple routes to an alias. It verifies that the correct mapped attributes are returned even when there are multiple paths leading to the same alias. The test involves creating mappings for different annotation types and asserting the expected results for each mapping.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "getAliasMappingWhenHasWithMultipleRoutesToAliasReturnsMappedAttributes",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "The design principle behind this method is to ensure robustness and correctness in resolving alias mappings, even in complex scenarios involving multiple routes to the same alias. The method follows a systematic approach to verify that each possible path to an alias is correctly handled and that the expected mapped attributes are returned. This principle is crucial for maintaining consistency and reliability in the annotation processing system.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findAnnotationDeclaringClassForTypesWithMultipleCandidateTypes()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "findAnnotationDeclaringClassForTypes",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findAnnotationDeclaringClassForTypesWithMultipleCandidateTypes()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findAnnotationDeclaringClassForTypesWithMultipleCandidateTypes()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getDefaultValueFromAnnotationType()",
      "tail_type": "apiFunction"
    },
    {
      "head": "getDefaultValueFromAnnotationType()",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getDefaultValueFromAnnotationType() useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getDefaultValueFromAnnotationType() useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "package org.springframework.core.annotation; import org.junit.jupiter.api.Test; import static org.springframework.core.annotation.AnnotationUtils.getDefaultValue; import org.springframework.core.Ordered; import org.springframework.core.annotation.Order; public class AnnotationUtilsTests { @Test void getDefaultValueFromAnnotationType() { assertThat(getDefaultValue(Order.class, \"value\")).isEqualTo(Ordered.LOWEST_PRECEDENCE); assertThat(getDefaultValue(Order.class)).isEqualTo(Ordered.LOWEST_PRECEDENCE); } }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.ClassWithInheritedMetaAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "meta-annotation processing",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.ClassWithInheritedMetaAnnotation",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.ClassWithInheritedMetaAnnotation",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.ClassWithInheritedMetaAnnotation",
      "head_type": "class",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.MetaMetaMetaAnnotatedClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "meta-annotation processing",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.MetaMetaMetaAnnotatedClass",
      "head_type": "class",
      "relation": "have",
      "tail": "used for creating annotations that are themselves annotated",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.MetaMetaMetaAnnotatedClass",
      "head_type": "class",
      "relation": "have",
      "tail": "design principle is to allow for the creation of complex annotations",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.MetaMetaMetaAnnotatedClass",
      "head_type": "class",
      "relation": "have",
      "tail": "sample code for using meta-annotations",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.annotation.AnnotatedSimplePojo",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "constructor",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.annotation.AnnotatedSimplePojo",
      "head_type": "class",
      "relation": "have",
      "tail": "constructor code example",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithEnum()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerTypeForSerializationWithEnum",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithEnum()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerTypeForSerializationWithEnum useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerTypeForSerializationWithEnum useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithEnum() sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassC",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getString",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassC",
      "head_type": "class",
      "relation": "have",
      "tail": "getString sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.ExecutableModeTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "invokeIncludesNullMode",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ExecutableModeTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "invokeIncludesIntrospect",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ExecutableModeTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "invokeIncludesIncludes",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ExecutableModeTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "introspectIncludesNullMode",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ExecutableModeTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "introspectIncludesIntrospect",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ExecutableModeTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "introspectDoesNotIncludeInvoke",
      "tail_type": "apiFunction"
    },
    {
      "head": "ExecutableMode",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.ExecutableModeTests",
      "tail_type": "class"
    },
    {
      "head": "ExecutableMode.INVOKE",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.ExecutableModeTests",
      "tail_type": "class"
    },
    {
      "head": "ExecutableMode.INTROSPECT",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.ExecutableModeTests",
      "tail_type": "class"
    },
    {
      "head": "Stephane Nicoll",
      "head_type": "relatedConceptInterpretation",
      "relation": "have",
      "tail": "org.springframework.aot.hint.ExecutableModeTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ExecutableModeTests#invokeIncludesIntrospect()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "ExecutableMode",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ExecutableModeTests#invokeIncludesIntrospect()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "introspection",
      "tail_type": "apiFunction"
    },
    {
      "head": "ExecutableMode",
      "head_type": "apiFunction",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.ExecutableMode",
      "tail_type": "class"
    },
    {
      "head": "introspection",
      "head_type": "apiFunction",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.ExecutableMode",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ExecutableModeTests#invokeIncludesIntrospect()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "relatedConceptInterpretation",
      "head_type": "relatedConceptInterpretation",
      "relation": "associated_with",
      "tail": "ExecutableMode includes ExecutableMode",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.ExecutableModeTests#invokeIncludesIntrospect()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.ExecutableModeTests#invokeIncludesIncludes()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "ExecutableMode invoking",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ExecutableModeTests#invokeIncludesIncludes()",
      "head_type": "method",
      "relation": "have",
      "tail": "ExecutableMode invoking sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "ExecutableMode invoking sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "Complete ExecutableMode invoking example",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithMemberCategoryFailsWithNullCategory()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerType",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithMemberCategoryFailsWithNullCategory()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "introspectPublicMethods",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithMemberCategoryFailsWithNullCategory()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "nullMemberCategoryConstraint",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithMemberCategoryFailsWithNullCategory()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "reflectionTypeWithMemberCategoryScenario",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithMemberCategoryFailsWithNullCategory()",
      "head_type": "method",
      "relation": "have",
      "tail": "reflectionTypeWithMemberCategorySampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "reflectionTypeWithMemberCategorySampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithMemberCategoryFailsWithNullCategory()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithMemberCategoryFailsWithNullCategory()",
      "head_type": "method",
      "relation": "have",
      "tail": "reflectionTypeWithMemberCategoryRelatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithMemberCategoryFailsWithNullCategory()",
      "head_type": "method",
      "relation": "have",
      "tail": "reflectionTypeWithMemberCategoryDesignPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithMemberCategoryFailsWithNullCategory()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.predicate.ReflectionOnType",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithMemberCategoryFailsWithNullCategory()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.aot.hint.ProxyHintsTests#registerJdkProxyTwiceExposesOneHint()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerJdkProxy",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ProxyHintsTests#registerJdkProxyTwiceExposesOneHint()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "TypeReference.of",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ProxyHintsTests#registerJdkProxyTwiceExposesOneHint()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "assertThat().singleElement().satisfies",
      "tail_type": "apiFunction"
    },
    {
      "head": "registerJdkProxy",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "registerJdkProxyTwiceExposesOneHint() useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "TypeReference.of",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "registerJdkProxyTwiceExposesOneHint() useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "assertThat().singleElement().satisfies",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "registerJdkProxyTwiceExposesOneHint() useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerJdkProxyTwiceExposesOneHint() useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.aot.hint.ProxyHintsTests#registerJdkProxyTwiceExposesOneHint() useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.ProxyHintsTests#registerJdkProxyTwiceExposesOneHint()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.ProxyHintsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ProxyHintsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "registerJdkProxyTwiceExposesOneHint() relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.ProxyHintsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "registerJdkProxyTwiceExposesOneHint() designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.ProxyHintsTests#proxiedInterfaces(String)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "proxiedInterfaces",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ProxyHintsTests#proxiedInterfaces(String)",
      "head_type": "method",
      "relation": "have",
      "tail": "private static Consumer<JdkProxyHint> proxiedInterfaces(String... proxiedInterfaces) {\n    return jdkProxyHint -> assertThat(jdkProxyHint.getProxiedInterfaces()).containsExactly(toTypeReferences(proxiedInterfaces));\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.ProxyHintsTests#toTypeReferences(String)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "convert string to TypeReference array",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ProxyHintsTests#toTypeReferences(String)",
      "head_type": "method",
      "relation": "have",
      "tail": "complete sample code for converting string to TypeReference array",
      "tail_type": "useSampleCode"
    },
    {
      "head": "convert string to TypeReference array",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "complete sample code for converting string to TypeReference array",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.ProxyHintsTests#toTypeReferences(String)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.ProxyHintsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#registerMethodTwiceUpdatesExistingEntry()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerMethodTwiceUpdatesExistingEntry",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#registerMethodTwiceUpdatesExistingEntry()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerMethodTwiceUpdatesExistingEntrySampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerMethodTwiceUpdatesExistingEntrySampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "registerMethodTwiceUpdatesExistingEntrySampleCodeContent",
      "tail_type": "useSampleCodeContent"
    },
    {
      "head": "org.springframework.aot.hint.ResourcePatternHintTests#fileAtRoot()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "ResourcePatternMatching",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ResourcePatternHintTests#fileAtRoot()",
      "head_type": "method",
      "relation": "have",
      "tail": "ResourcePatternHintInstantiation",
      "tail_type": "useSampleCode"
    },
    {
      "head": "ResourcePatternHintInstantiation",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "ResourcePatternHintUsageExample",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.ResourcePatternHintTests#fileAtRoot()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.ResourcePatternHint",
      "tail_type": "class"
    },
    {
      "head": "ResourcePatternHintUsageExample",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "ResourcePatternHintInstantiationCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests#registerWithMultipleClasspathLocations()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerWithMultipleClasspathLocations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests#registerWithMultipleClasspathLocations()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerWithMultipleClasspathLocationsSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerWithMultipleClasspathLocationsSampleCode",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests#registerWithMultipleClasspathLocations()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests#registerWithMultipleClasspathLocations()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests",
      "head_type": "class",
      "relation": "have",
      "tail": "registerWithMultipleClasspathLocationsDesignPrinciple",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "registerWithMultipleClasspathLocationsDesignPrinciple",
      "head_type": "designPrincipleInterpretation",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.TypeReferenceTests#toStringUsesCanonicalName()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "toStringUsesCanonicalName",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.TypeReferenceTests#toStringUsesCanonicalName()",
      "head_type": "method",
      "relation": "have",
      "tail": "toStringUsesCanonicalNameSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "toStringUsesCanonicalNameSampleCode",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.TypeReferenceTests#toStringUsesCanonicalName()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#sortFieldHints()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerType",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#sortFieldHints()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "withField",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#sortFieldHints()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "writeJson",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#sortFieldHints()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "RuntimeHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#sortFieldHints()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "Integer",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#sortFieldHints()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#sortFieldHints()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#sortFieldHints()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.nativex.SerializationHintsTests#shouldWriteEmptyHint()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "SerializationHintsTests",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.SerializationHintsTests#shouldWriteEmptyHint()",
      "head_type": "method",
      "relation": "have",
      "tail": "SerializationHints empty hint test",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.nativex.SerializationHintsTests#shouldWriteEmptyHint()",
      "head_type": "method",
      "relation": "have",
      "tail": "SerializationHints empty hint test sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "SerializationHints empty hint test sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "package org.springframework.aot.nativex; import org..simple.parser.JSONParser; import org.junit.jupiter.api.Test; import static org.junit.jupiter.api.Assertions.assertEquals; public class SerializationHintsTests { @Test void shouldWriteEmptyHint() throws JSONException { RuntimeHints hints = new RuntimeHints(); assertEquals(\";\", hints.toString()); } }",
      "tail_type": "code"
    },
    {
      "head": "org.springframework.aot.nativex.SerializationHintsTests#shouldWriteEmptyHint()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.nativex.RuntimeHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.RuntimeHints",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "RuntimeHints",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.RuntimeHints",
      "head_type": "class",
      "relation": "have",
      "tail": "RuntimeHints related concept interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "RuntimeHints related concept interpretation",
      "head_type": "relatedConceptInterpretation",
      "relation": "have",
      "tail": "RuntimeHints are used to provide hints to the native image compiler about the classes, methods, and fields that are used at runtime. This helps in reducing the size of the native image and improving the startup time.",
      "tail_type": "description"
    },
    {
      "head": "org.springframework.aot.nativex.RuntimeHints",
      "head_type": "class",
      "relation": "have",
      "tail": "RuntimeHints design principle interpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "RuntimeHints design principle interpretation",
      "head_type": "designPrincipleInterpretation",
      "relation": "have",
      "tail": "The design principle behind RuntimeHints is to provide a flexible and extensible way to specify hints for the native image compiler. This allows developers to easily add new hints as needed without modifying the core framework.",
      "tail_type": "description"
    },
    {
      "head": "org.springframework.aot.nativex.SerializationHintsTests#shouldWriteMultipleHints()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registering serialization hints",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.SerializationHintsTests#shouldWriteMultipleHints()",
      "head_type": "method",
      "relation": "have",
      "tail": "SerializationHintsTests.java",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registering serialization hints",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "org.springframework.aot.nativex.SerializationHintsTests#shouldWriteMultipleHints()",
      "tail_type": "method"
    },
    {
      "head": "SerializationHintsTests.java",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.aot.nativex.SerializationHintsTests#shouldWriteMultipleHints()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.aot.nativex.SerializationHintsTests#shouldWriteMultipleHints()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.nativex.RuntimeHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.RuntimeHints",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registering serialization hints",
      "tail_type": "apiFunction"
    },
    {
      "head": "registering serialization hints",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "TypeReference must be of a concrete class",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.aot.nativex.RuntimeHints",
      "head_type": "class",
      "relation": "have",
      "tail": "SerializationHints.java",
      "tail_type": "useSampleCode"
    },
    {
      "head": "SerializationHints.java",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.aot.nativex.RuntimeHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.RuntimeHints",
      "head_type": "class",
      "relation": "have",
      "tail": "SerializationHints related concepts",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "SerializationHints related concepts",
      "head_type": "relatedConceptInterpretation",
      "relation": "have",
      "tail": "org.springframework.aot.nativex.RuntimeHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.RuntimeHints",
      "head_type": "class",
      "relation": "have",
      "tail": "Design principles of RuntimeHints",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "Design principles of RuntimeHints",
      "head_type": "designPrincipleInterpretation",
      "relation": "have",
      "tail": "org.springframework.aot.nativex.RuntimeHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.core.SpringNamingPolicyTests#examplePrefix()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "generateClassName",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.core.SpringNamingPolicyTests#examplePrefix()",
      "head_type": "method",
      "relation": "have",
      "tail": "generateClassNameSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "generateClassNameSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "generateClassName",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.core.SpringNamingPolicyTests#examplePrefix()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.core.SpringNamingPolicyTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.core.SpringNamingPolicyTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "generateClassName",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.core.SpringNamingPolicyTests",
      "head_type": "class",
      "relation": "have",
      "tail": "generateClassNameDesignPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "generateClassNameDesignPrincipleInterpretation",
      "head_type": "designPrincipleInterpretation",
      "relation": "have",
      "tail": "generateClassName",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getAllAnnotationAttributesOnClassWithLocalAnnotationThatShadowsAnnotationFromSuperclass",
      "tail_type": "apiFunction"
    },
    {
      "head": "getAllAnnotationAttributesOnClassWithLocalAnnotationThatShadowsAnnotationFromSuperclass",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "shadowed annotations of the same type within the class hierarchy",
      "tail_type": "useConstraint"
    },
    {
      "head": "getAllAnnotationAttributesOnClassWithLocalAnnotationThatShadowsAnnotationFromSuperclass",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "mostSpecificDerivedClassDrivesEnvironment_withDevEnvAndDerivedDevConfigClass",
      "tail_type": "useScenario"
    },
    {
      "head": "getAllAnnotationAttributesOnClassWithLocalAnnotationThatShadowsAnnotationFromSuperclass",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getAllAnnotationAttributes(DerivedTxConfig.class, TX_NAME)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getAllAnnotationAttributesOnClassWithLocalAnnotationThatShadowsAnnotationFromSuperclass",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": " undesirable behavior would cause the logic in org.springframework.context.annotation.ProfileCondition to fail",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "getAllAnnotationAttributesOnClassWithLocalAnnotationThatShadowsAnnotationFromSuperclass",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "algorithm is accidentally picking up shadowed annotations of the same type within the class hierarchy",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.context.annotation.ProfileCondition",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getMergedAnnotationAttributesOnClassWithLocalAnnotationThatShadowsAnnotationFromSuperclass",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedAnnotationAttributesOnClassWithLocalAnnotationThatShadowsAnnotationFromSuperclass",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getMergedAnnotationAttributesOnClassWithLocalAnnotationThatShadowsAnnotationFromSuperclass()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getMergedAnnotationAttributesOnClassWithLocalAnnotationThatShadowsAnnotationFromSuperclass()",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.SpringAppConfigClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "Spring application configuration",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.SpringAppConfigClass",
      "head_type": "class",
      "relation": "have",
      "tail": "Used to mark classes that are part of the Spring application configuration.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SpringAppConfigClass",
      "head_type": "class",
      "relation": "have",
      "tail": "This annotation is typically used in Spring applications to indicate that a class provides Spring Bean definitions. It is used as an alternative to XML configuration.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SpringAppConfigClass",
      "head_type": "class",
      "relation": "have",
      "tail": "package com.example;\n\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class AppConfig {\n    // Define bean methods here\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.ForAnnotationsClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "annotationProcessing",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.ForAnnotationsClass",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.ForAnnotationsClass",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationEnclosingClassSample",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "AnnotationsScanner",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationEnclosingClassSample",
      "head_type": "class",
      "relation": "have",
      "tail": "Example class used to test AnnotationsScanner with enclosing classes",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationEnclosingClassSample",
      "head_type": "class",
      "relation": "have",
      "tail": "Author: Phillip Webb, Since: 5.2",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationEnclosingClassSample",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "EnclosedOne",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationEnclosingClassSample",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "EnclosedTwo",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationEnclosingClassSample",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "EnclosedThree",
      "tail_type": "class"
    },
    {
      "head": "EnclosedOne",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "Retention",
      "tail_type": "apiFunction"
    },
    {
      "head": "EnclosedTwo",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "Retention",
      "tail_type": "apiFunction"
    },
    {
      "head": "EnclosedThree",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "Retention",
      "tail_type": "apiFunction"
    },
    {
      "head": "EnclosedStatic",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "EnclosedTwo",
      "tail_type": "class"
    },
    {
      "head": "EnclosedStaticStatic",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "EnclosedThree",
      "tail_type": "class"
    },
    {
      "head": "EnclosedInner",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "EnclosedTwo",
      "tail_type": "class"
    },
    {
      "head": "EnclosedInnerInner",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "EnclosedThree",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#matchesAnnotationWhenNoMatchReturnsFalse()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "matchesAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#matchesAnnotationWhenNoMatchReturnsFalse()",
      "head_type": "method",
      "relation": "have",
      "tail": "WithOtherAnnotation.class.getDeclaredAnnotation(OtherAnnotation.class)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#matchesAnnotationWhenNoMatchReturnsFalse()",
      "head_type": "method",
      "relation": "have",
      "tail": "assertThat(FILTER.matches(annotation)).isFalse()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#matchesAnnotationWhenNoMatchReturnsFalse()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationFilterTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#matchesAnnotationWhenNoMatchReturnsFalse()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#matchesAnnotationWhenNoMatchReturnsFalse()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnMethodScansAnnotations()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scanning annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnMethodScansAnnotations()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "method annotation scanning",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnMethodScansAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "void inheritedAnnotationsStrategyOnMethodScansAnnotations() {\n    Method source = methodFrom(WithSingleAnnotation.class);\n    assertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\");\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnMethodScansAnnotations()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "scanning annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests",
      "head_type": "class",
      "relation": "have",
      "tail": "related to annotation scanning strategies",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests",
      "head_type": "class",
      "relation": "have",
      "tail": "designed to test inherited annotation scanning on methods",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#trackIndexedAnnotations(int,Annotation[],List<String>)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "trackIndexedAnnotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#trackIndexedAnnotations(int,Annotation[],List<String>)",
      "head_type": "method",
      "relation": "have",
      "tail": "private void trackIndexedAnnotations(int aggregateIndex, Annotation[] annotations, List<String> results) {\n    Arrays.stream(annotations).filter(Objects::nonNull).map(annotation -> indexedName(aggregateIndex, annotation)).forEach(results::add);\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#trackIndexedAnnotations(int,Annotation[],List<String>)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.SingleSuperclass#method()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "testFunctionality",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.SingleSuperclass#method()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SingleSuperclass#method()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SingleSuperclass#method()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.HierarchySuperSuperclassInterface",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "org.springframework.core.annotation.HierarchySuperSuperclassInterface",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.HierarchySuperSuperclassInterface",
      "head_type": "class",
      "relation": "have",
      "tail": "org.springframework.core.annotation.HierarchySuperSuperclassInterface",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.HierarchySuperSuperclassInterface",
      "head_type": "class",
      "relation": "have",
      "tail": "org.springframework.core.annotation.HierarchySuperSuperclassInterface",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.HierarchySuperSuperclassInterface",
      "head_type": "class",
      "relation": "have",
      "tail": "org.springframework.core.annotation.HierarchySuperSuperclassInterface",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.HierarchySuperSuperclassInterface#method()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "testAnnotationUsage",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.HierarchySuperSuperclassInterface#method()",
      "head_type": "method",
      "relation": "have",
      "tail": "voidReturnType",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.HierarchySuperSuperclassInterface#method()",
      "head_type": "method",
      "relation": "have",
      "tail": "annotationProcessing",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.HierarchySuperSuperclassInterface#method()",
      "head_type": "method",
      "relation": "have",
      "tail": "reflectionMechanism",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.HierarchySuperSuperclassInterface#method()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.HierarchySuperSuperclassInterface",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.MultipleMethods#method()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "testFunctionality",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.MultipleMethods#method()",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.core.annotation.MultipleMethods",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.MultipleMethods",
      "head_type": "class",
      "relation": "have",
      "tail": "used for testing purposes",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.MultipleMethods",
      "head_type": "class",
      "relation": "have",
      "tail": "designed to demonstrate method functionality",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.MultipleMethods#method()",
      "head_type": "method",
      "relation": "have",
      "tail": "public void method() {}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.GenericOverrideInterface#method(T)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "org.springframework.core.annotation.GenericOverrideInterface#method(T)",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.GenericOverrideInterface#method(T)",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.core.annotation.GenericOverrideInterface#method(T)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationFavorsMoreLocallyDeclaredComposedAnnotationsOverInheritedComposedAnnotations()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "findClassAnnotationFavorsMoreLocallyDeclaredComposedAnnotationsOverInheritedComposedAnnotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationFavorsMoreLocallyDeclaredComposedAnnotationsOverInheritedComposedAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "since 4.0.3",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationFavorsMoreLocallyDeclaredComposedAnnotationsOverInheritedComposedAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "This method tests that locally declared composed annotations are favored over inherited composed annotations when searching for class annotations.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationFavorsMoreLocallyDeclaredComposedAnnotationsOverInheritedComposedAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "The design principle followed here is to prioritize local declarations over inherited ones to ensure that the most specific and relevant annotations are considered first.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationFavorsMoreLocallyDeclaredComposedAnnotationsOverInheritedComposedAnnotations()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#getRepeatableAnnotationsDeclaredOnClassAndSuperclass()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "getRepeatableAnnotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#getRepeatableAnnotationsDeclaredOnClassAndSuperclass()",
      "head_type": "method",
      "relation": "have",
      "tail": "getRepeatableAnnotations sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getRepeatableAnnotations sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "getRepeatableAnnotations sample code content",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests#getRepeatableAnnotationsDeclaredOnClassAndSuperclass()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "related concept interpretation for AnnotationUtilsTests",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "related concept interpretation for AnnotationUtilsTests",
      "head_type": "relatedConceptInterpretation",
      "relation": "have",
      "tail": "related concept interpretation content",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "design principle interpretation for AnnotationUtilsTests",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "design principle interpretation for AnnotationUtilsTests",
      "head_type": "designPrincipleInterpretation",
      "relation": "have",
      "tail": "design principle interpretation content",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromDefaultsWithAttributeAliases()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "synthesizeAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromDefaultsWithAttributeAliases()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "ContextConfig",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromDefaultsWithAttributeAliases()",
      "head_type": "method",
      "relation": "have",
      "tail": "synthesizeAnnotationFromDefaultsWithAttributeAliases useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "synthesizeAnnotationFromDefaultsWithAttributeAliases useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromDefaultsWithAttributeAliases() useSampleCode Content",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithAttributeAliasesThatOverrideArraysWithSingleElements()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "synthesizeAnnotationFromMap",
      "tail_type": "apiFunction"
    },
    {
      "head": "synthesizeAnnotationFromMap",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithAttributeAliasesThatOverrideArraysWithSingleElements()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.SubInheritedAnnotationClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "SubInheritedAnnotationClass",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.SubInheritedAnnotationClass",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SubInheritedAnnotationClass",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SubMyRepeatableClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "repeatable annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.SubMyRepeatableClass",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "must be used with @Repeatable",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.SubMyRepeatableClass",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "marking a repeatable annotation",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.SubMyRepeatableClass",
      "head_type": "class",
      "relation": "have",
      "tail": "related to meta-annotations",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SubMyRepeatableClass",
      "head_type": "class",
      "relation": "have",
      "tail": "design principle of reducing boilerplate code",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SubMyRepeatableClass",
      "head_type": "class",
      "relation": "have",
      "tail": "sample code for using @SubMyRepeatableClass",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.SubMyRepeatableClass",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.Repeatable",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SampleBean",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "setterMethod",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SampleBean",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "constructor",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SampleBean",
      "head_type": "class",
      "relation": "have",
      "tail": "constructorSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SampleBean",
      "head_type": "class",
      "relation": "have",
      "tail": "setterSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "setterMethod",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "setterSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "constructor",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "constructorSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.ExecutableModeTests#introspectIncludesNullMode()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "introspection",
      "tail_type": "apiFunction"
    },
    {
      "head": "introspection",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "org.springframework.aot.hint.ExecutableMode.INTROSPECT.includes(null)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "introspection",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "null parameter handling",
      "tail_type": "useConstraint"
    },
    {
      "head": "introspection",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "null parameter scenarios",
      "tail_type": "useScenario"
    },
    {
      "head": "introspection",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "introspection",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.ExecutableModeTests#introspectIncludesNullMode()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.ExecutableMode",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "constructorInvocationDoesNotMatchIntrospectPublicConstructors",
      "tail_type": "apiFunction"
    },
    {
      "head": "constructorInvocationDoesNotMatchIntrospectPublicConstructors",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "void constructorInvocationDoesNotMatchIntrospectPublicConstructors() {\n    runtimeHints.reflection().registerType(SampleClass.class, MemberCategory.INTROSPECT_PUBLIC_CONSTRUCTORS);\n    assertPredicateDoesNotMatch(reflection.onConstructorInvocation(publicConstructor));\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "SampleClass",
      "tail_type": "class"
    },
    {
      "head": "constructorInvocationDoesNotMatchIntrospectPublicConstructors",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "This method tests whether the constructor invocation does not match the introspection of public constructors. It registers the type SampleClass with the MemberCategory.INTROSPECT_PUBLIC_CONSTRUCTORS and asserts that the predicate does not match the public constructor invocation.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "constructorInvocationDoesNotMatchIntrospectPublicConstructors",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "The design principle behind this method is to ensure that the constructor invocation is correctly introspected and validated against public constructors. It aims to maintain the integrity of the reflection process by verifying that the constructor invocations are as expected.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodIntrospectionMatchesIntrospectPublicMethods()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "introspection of public methods",
      "tail_type": "apiFunction"
    },
    {
      "head": "introspection of public methods",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "registerType(SampleClass.class, MemberCategory.INTROSPECT_PUBLIC_METHODS)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "introspection of public methods",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "assertPredicateMatches(reflection.onMethod(SampleClass.class, \"publicMethod\").introspect())",
      "tail_type": "useSampleCode"
    },
    {
      "head": "introspection of public methods",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "related to runtime hints and reflection",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "introspection of public methods",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "design principle for efficient method introspection",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "introspection of public methods",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "methodIntrospectionMatchesIntrospectPublicMethods()",
      "tail_type": "useScenario"
    },
    {
      "head": "introspection of public methods",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "method visibility must be public",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodInvocationDoesNotMatchIntrospectDeclaredMethods()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "introspectDeclaredMethods",
      "tail_type": "apiFunction"
    },
    {
      "head": "introspectDeclaredMethods",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "registerType(SampleClass.class, MemberCategory.INTROSPECT_DECLARED_METHODS)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "introspectDeclaredMethods",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "introspectDeclaredMethods",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "introspectDeclaredMethods",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "privateMethodInvocationConstraint",
      "tail_type": "useConstraint"
    },
    {
      "head": "introspectDeclaredMethods",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "privateMethodInvocationScenario",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodInvocationDoesNotMatchIntrospectDeclaredMethods()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "SampleClass",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ProxyHintsTests#springProxy(String)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "springProxy",
      "tail_type": "apiFunction"
    },
    {
      "head": "springProxy",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "proxying Spring components",
      "tail_type": "useScenario"
    },
    {
      "head": "springProxy",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "private static Consumer<JdkProxyHint.Builder> springProxy(String proxiedInterface) {\n    return builder -> builder.proxiedInterfaces(toTypeReferences(proxiedInterface, \"org.springframework.aop.SpringProxy\", \"org.springframework.aop.framework.Advised\", \"org.springframework.core.DecoratingProxy\"));\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "springProxy",
      "head_type": "apiFunction",
      "relation": "associated_with",
      "tail": "org.springframework.aop.SpringProxy",
      "tail_type": "class"
    },
    {
      "head": "springProxy",
      "head_type": "apiFunction",
      "relation": "associated_with",
      "tail": "org.springframework.aop.framework.Advised",
      "tail_type": "class"
    },
    {
      "head": "springProxy",
      "head_type": "apiFunction",
      "relation": "associated_with",
      "tail": "org.springframework.core.DecoratingProxy",
      "tail_type": "class"
    },
    {
      "head": "springProxy",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "The springProxy function is used to create a proxy for a given interface in a Spring context. It uses JdkProxyHint to specify the interfaces that should be proxied, including SpringProxy, Advised, and DecoratingProxy. This is typically used in AOT (Ahead of Time) compilation scenarios to provide hints about the proxying requirements of Spring components.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "springProxy",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "The design principle behind springProxy is to facilitate the proxying of Spring components during AOT compilation. By specifying the proxied interfaces, it ensures that the necessary proxy classes are generated and available at runtime, which is crucial for maintaining the functionality of Spring's dynamic proxying mechanism in environments where runtime class generation is not possible.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.SimpleTypeReferenceTests#primitivesAreHandledProperly(TypeReference,String)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "primitivesHandling",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.SimpleTypeReferenceTests#primitivesAreHandledProperly(TypeReference,String)",
      "head_type": "method",
      "relation": "have",
      "tail": "java.lang",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.SimpleTypeReferenceTests#primitivesAreHandledProperly(TypeReference,String)",
      "head_type": "method",
      "relation": "have",
      "tail": "TypeReference.getName()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.SimpleTypeReferenceTests#primitivesAreHandledProperly(TypeReference,String)",
      "head_type": "method",
      "relation": "have",
      "tail": "TypeReference.getCanonicalName()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.SimpleTypeReferenceTests#primitivesAreHandledProperly(TypeReference,String)",
      "head_type": "method",
      "relation": "have",
      "tail": "TypeReference.getPackageName()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.SimpleTypeReferenceTests#primitivesAreHandledProperly(TypeReference,String)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.SimpleTypeReferenceTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.SimpleTypeReferenceTests#primitivesAreHandledProperly(TypeReference,String)",
      "head_type": "method",
      "relation": "have",
      "tail": "The method tests that primitive types are handled properly by verifying the name, canonical name, and package name of a TypeReference.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.SimpleTypeReferenceTests#primitivesAreHandledProperly(TypeReference,String)",
      "head_type": "method",
      "relation": "have",
      "tail": "The design principle here is to ensure that the TypeReference class correctly represents primitive types by comparing their names and package information.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.support.ObjectToObjectConverterRuntimeHintsTests#javaSqlDateHasHints()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "javaSqlDateHasHints",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.support.ObjectToObjectConverterRuntimeHintsTests#javaSqlDateHasHints()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "java.sql.Date",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.support.ObjectToObjectConverterRuntimeHintsTests#javaSqlDateHasHints()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "java.sql.Date.class.getMethod(\"valueOf\", LocalDate.class)",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.aot.hint.support.ObjectToObjectConverterRuntimeHintsTests#javaSqlDateHasHints()",
      "head_type": "method",
      "relation": "have",
      "tail": "RuntimeHintsPredicates.reflection().onMethodInvocation",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.support.ObjectToObjectConverterRuntimeHintsTests#javaSqlDateHasHints()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.support.ObjectToObjectConverterRuntimeHintsTests#javaSqlDateHasHints()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#createWithMethod()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "createWithMethod",
      "tail_type": "apiFunction"
    },
    {
      "head": "createWithMethod",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "createWithMethodSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "createWithMethodSampleCode",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "TypeReference",
      "tail_type": "class"
    },
    {
      "head": "createWithMethodSampleCode",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "ExecutableMode",
      "tail_type": "class"
    },
    {
      "head": "createWithMethodSampleCode",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "TypeHint",
      "tail_type": "class"
    },
    {
      "head": "createWithMethodSampleCode",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "List",
      "tail_type": "class"
    },
    {
      "head": "createWithMethodSampleCode",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "assertMethodHint",
      "tail_type": "apiFunction"
    },
    {
      "head": "createWithMethodSampleCode",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "assertThat",
      "tail_type": "apiFunction"
    },
    {
      "head": "createWithMethodSampleCode",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "isEqualTo",
      "tail_type": "apiFunction"
    },
    {
      "head": "createWithMethodSampleCode",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "containsExactlyElementsOf",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests#orderedMap(String,Object)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "creation of ordered map",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests#orderedMap(String,Object)",
      "head_type": "method",
      "relation": "have",
      "tail": "private static LinkedHashMap<String, Object> orderedMap(String key, Object value) {\n    LinkedHashMap<String, Object> map = new LinkedHashMap<>();\n    map.put(key, value);\n    return map;\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "creation of ordered map",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "private static LinkedHashMap<String, Object> orderedMap(String key, Object value) {\n    LinkedHashMap<String, Object> map = new LinkedHashMap<>();\n    map.put(key, value);\n    return map;\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests#orderedMap(String,Object)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.nativex.BasicJsonWriterTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#hasMetaAnnotationTypesOnClassWithMetaDepth1()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "hasMetaAnnotationTypes",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#hasMetaAnnotationTypesOnClassWithMetaDepth1()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "hasMetaAnnotationTypes",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "hasMetaAnnotationTypes",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "hasMetaAnnotationTypes",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#hasMetaAnnotationTypesOnClassWithMetaDepth1()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedOnNonAnnotatedClass()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "check if a class is annotated with a specific annotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedOnNonAnnotatedClass()",
      "head_type": "method",
      "relation": "have",
      "tail": "sample code to check if a class is annotated with a specific annotation",
      "tail_type": "useSampleCode"
    },
    {
      "head": "sample code to check if a class is annotated with a specific annotation",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "java\nimport org.springframework.core.annotation.AnnotatedElementUtils;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.Matchers.isFalse;\n\npublic class AnnotatedElementUtilsTest {\n\n    @Test\n    public void isAnnotatedOnNonAnnotatedClass() {\n        assertThat(AnnotatedElementUtils.isAnnotated(NonAnnotatedClass.class, Transactional.class)).isFalse();\n    }\n\n    private static class NonAnnotatedClass {\n        // This class does not have the Transactional annotation\n    }\n}\n",
      "tail_type": "code"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedOnNonAnnotatedClass()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtils",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedOnNonAnnotatedClass()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.transaction.annotation.Transactional",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedOnNonAnnotatedClass()",
      "head_type": "method",
      "relation": "have",
      "tail": "related concept interpretation for checking annotations on classes",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "related concept interpretation for checking annotations on classes",
      "head_type": "relatedConceptInterpretation",
      "relation": "have",
      "tail": "This method uses the AnnotatedElementUtils.isAnnotated method to check if a given class is annotated with a specific annotation. It's commonly used to assert the presence or absence of annotations in unit tests.",
      "tail_type": "description"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedOnNonAnnotatedClass()",
      "head_type": "method",
      "relation": "have",
      "tail": "design principle interpretation for checking annotations on classes",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "design principle interpretation for checking annotations on classes",
      "head_type": "designPrincipleInterpretation",
      "relation": "have",
      "tail": "The design principle behind this method is to provide a flexible and reliable way to verify annotations on classes, which is crucial for ensuring the correct behavior of applications, especially in the context of frameworks like Spring that rely heavily on annotations for configuration and behavior.",
      "tail_type": "description"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getMergedAnnotationWithAliasedValueComposedAnnotation()",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedAnnotationWithAliasedValueComposedAnnotation()",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.ConventionBasedAnnotationAttributeOverrideTests#findMergedAnnotationWithSingleElementOverridingAnArrayViaConvention()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "findMergedAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.ConventionBasedAnnotationAttributeOverrideTests#findMergedAnnotationWithSingleElementOverridingAnArrayViaConvention()",
      "head_type": "method",
      "relation": "have",
      "tail": "sample code for using findMergedAnnotation",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.ConventionBasedAnnotationAttributeOverrideTests#findMergedAnnotationWithSingleElementOverridingAnArrayViaConvention()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "WebController",
      "tail_type": "class"
    },
    {
      "head": "findMergedAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "sample code for using findMergedAnnotation",
      "tail_type": "useSampleCode"
    },
    {
      "head": "findMergedAnnotation",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "overriding an array via convention",
      "tail_type": "useScenario"
    },
    {
      "head": "findMergedAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "related concept interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "findMergedAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "design principle interpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "sample code for using findMergedAnnotation",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "related concept interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "sample code for using findMergedAnnotation",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "design principle interpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "WebController",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "postMappedWithPathAttribute",
      "tail_type": "apiFunction"
    },
    {
      "head": "WebController",
      "head_type": "class",
      "relation": "have",
      "tail": "related concept interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "WebController",
      "head_type": "class",
      "relation": "have",
      "tail": "design principle interpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "postMappedWithPathAttribute",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "related concept interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "postMappedWithPathAttribute",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "design principle interpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.ConcreteClassWithInheritedAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "handle",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.ConcreteClassWithInheritedAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "handleParameterized",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.ConcreteClassWithInheritedAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "handleFromInterface",
      "tail_type": "apiFunction"
    },
    {
      "head": "handle",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "handleParameterized",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "handleFromInterface",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.ConcreteClassWithInheritedAnnotation#handleParameterized(String)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "handleParameterized",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.ConcreteClassWithInheritedAnnotation#handleParameterized(String)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.ConcreteClassWithInheritedAnnotation",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.TransitiveImplicitAliasesWithSkippedLevelContextConfigClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "transitive implicit aliases resolution",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.TransitiveImplicitAliasesWithSkippedLevelContextConfigClass",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": " aliases should not be circular",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.TransitiveImplicitAliasesWithSkippedLevelContextConfigClass",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "resolving aliases across different levels",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.TransitiveImplicitAliasesWithSkippedLevelContextConfigClass",
      "head_type": "class",
      "relation": "have",
      "tail": "related to Spring Framework's annotation processing",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.TransitiveImplicitAliasesWithSkippedLevelContextConfigClass",
      "head_type": "class",
      "relation": "have",
      "tail": "design principle focuses on flexibility and maintainability",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.TransitiveImplicitAliasesWithSkippedLevelContextConfigClass",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.context.annotation.ConfigurationClassPostProcessor",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.ShadowedAliasComposedContextConfigClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "shadowed alias composed context configuration",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.ShadowedAliasComposedContextConfigClass",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "no circular aliases allowed",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.ShadowedAliasComposedContextConfigClass",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "multiple aliases for a single context configuration",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.ShadowedAliasComposedContextConfigClass",
      "head_type": "class",
      "relation": "have",
      "tail": "related concept interpretation for shadowed alias",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.ShadowedAliasComposedContextConfigClass",
      "head_type": "class",
      "relation": "have",
      "tail": "design principle interpretation for shadowed alias",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.ShadowedAliasComposedContextConfigClass",
      "head_type": "class",
      "relation": "have",
      "tail": "sample code for shadowed alias",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.ShadowedAliasComposedContextConfigClass",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.context.annotation.ConfigurationClassPostProcessor",
      "tail_type": "class"
    },
    {
      "tail": "getEnumWithEmptyAttributeName()",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationAttributesTests",
      "tail_type": "method"
    },
    {
      "tail": "IllegalArgumentException",
      "head_type": "method",
      "relation": "constrained_by",
      "head": "getEnumWithEmptyAttributeName()",
      "tail_type": "useConstraint"
    },
    {
      "tail": "assertThatIllegalArgumentException().isThrownBy(() -> attributes.getEnum(\"",
      ",": "ail_type",
      "head_type": "method",
      "relation": "have",
      "head": "getEnumWithEmptyAttributeName()"
    },
    {
      "tail": " verifies that an IllegalArgumentException is thrown when an empty attribute name is passed to the getEnum method.",
      "head_type": "method",
      "relation": "have",
      "head": "getEnumWithEmptyAttributeName()",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "tail": "This test ensures that the getEnum method enforces the requirement that the attribute name must not be null or empty.",
      "head_type": "method",
      "relation": "have",
      "head": "getEnumWithEmptyAttributeName()",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAttributesTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getEnumWithUnknownAttributeName()",
      "tail_type": "apiFunction"
    },
    {
      "head": "getEnumWithUnknownAttributeName()",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getEnumWithUnknownAttributeName() useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getEnumWithUnknownAttributeName() useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "package org.springframework.core.annotation;\n\nimport org.junit.jupiter.api.Test;\nimport static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n\npublic class AnnotationAttributesTests {\n\n    @Test\n    void getEnumWithUnknownAttributeName() {\n        assertThatIllegalArgumentException().isThrownBy(() -> attributes.getEnum(\"bogus\"))\n            .withMessageContaining(\"Attribute 'bogus' not found\");\n    }\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests#sortClassesWithSubclass()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "sortClassesWithSubclass",
      "tail_type": "apiFunction"
    },
    {
      "head": "sortClassesWithSubclass",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "sortClassesWithSubclass() method sorts a list of classes based on their order annotations",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "sortClassesWithSubclass",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "package com.example; import java.util.ArrayList; import java.util.List; import org.springframework.core.annotation.AnnotationAwareOrderComparator; import static org.hamcrest.MatcherAssert.assertThat; import static org.hamcrest.Matchers.containsExactly; public class AnnotationAwareOrderComparatorExample { @Test public void sortClassesWithSubclass() { List<Object> list = new ArrayList<>(); list.add(B.class); list.add(C.class); AnnotationAwareOrderComparator.sort(list); assertThat(list).containsExactly(C.class, B.class); } }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests#sortClassesWithSubclass()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationAwareOrderComparator",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnMethodWhenNotAnnotatedScansNone()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scanning inherited annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnMethodWhenNotAnnotatedScansNone()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "scanning annotations on methods",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnMethodWhenNotAnnotatedScansNone()",
      "head_type": "method",
      "relation": "have",
      "tail": "void inheritedAnnotationsStrategyOnMethodWhenNotAnnotatedScansNone() {\n    Method source = methodFrom(WithNoAnnotations.class);\n    assertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).isEmpty();\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnMethodWhenNotAnnotatedScansNone()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnMethodWhenNotAnnotatedScansNone()",
      "head_type": "method",
      "relation": "have",
      "tail": "This method tests the inherited annotations scanning strategy on a method that is not annotated. It verifies that no annotations are scanned when the method is not annotated.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnMethodWhenNotAnnotatedScansNone()",
      "head_type": "method",
      "relation": "have",
      "tail": "The design principle behind this method is to ensure that the annotations scanning mechanism correctly handles methods without annotations, adhering to the inherited annotations strategy.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWhenNotAnnotatedScansNone()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scanning annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWhenNotAnnotatedScansNone()",
      "head_type": "method",
      "relation": "have",
      "tail": "void typeHierarchyStrategyOnMethodWhenNotAnnotatedScansNone() { Method source = methodFrom(WithNoAnnotations.class); assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).isEmpty(); }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWhenNotAnnotatedScansNone()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "scanning annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests",
      "head_type": "class",
      "relation": "have",
      "tail": "related to annotation scanning strategies",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests",
      "head_type": "class",
      "relation": "have",
      "tail": "design principle of efficient annotation scanning",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodScansAnnotations()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scans annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodScansAnnotations()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "method scanning",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodScansAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "void typeHierarchyStrategyOnMethodScansAnnotations() {\n    Method source = methodFrom(WithSingleAnnotation.class);\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\");\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodScansAnnotations()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodScansAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "This method tests the ability of the annotation scanning strategy to correctly identify annotations on methods within a class hierarchy.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodScansAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "The design principle behind this method is to ensure that the annotation scanning mechanism can efficiently and accurately navigate through class hierarchies to locate method-level annotations.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyWithEnclosingClassPredicatesOnEnclosedStaticClassScansAnnotations()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scans annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyWithEnclosingClassPredicatesOnEnclosedStaticClassScansAnnotations()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "static class",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyWithEnclosingClassPredicatesOnEnclosedStaticClassScansAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "sample code for scanning annotations in static class",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyWithEnclosingClassPredicatesOnEnclosedStaticClassScansAnnotations()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyWithEnclosingClassPredicatesOnEnclosedStaticClassScansAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "related concept interpretation for scanning annotations",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyWithEnclosingClassPredicatesOnEnclosedStaticClassScansAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "design principle interpretation for scanning annotations",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.WithSingleSuperclass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "single superclass constraint",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.WithSingleSuperclass",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "single superclass only",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.WithSingleSuperclass",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "class with single superclass",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.WithSingleSuperclass",
      "head_type": "class",
      "relation": "have",
      "tail": "related to inheritance",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.WithSingleSuperclass",
      "head_type": "class",
      "relation": "have",
      "tail": "design principle of single inheritance",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.WithSingleSuperclass",
      "head_type": "class",
      "relation": "have",
      "tail": "sample code for single superclass",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.IgnorableOverrideInterface2#method()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "org.springframework.core.annotation.IgnorableOverrideInterface2#method()",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.IgnorableOverrideInterface2#method()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.IgnorableOverrideInterface2",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.GenericOverride#method(String)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "testMethod",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.GenericOverride#method(String)",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "mustHaveArgument",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.GenericOverride#method(String)",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "unitTesting",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.GenericOverride#method(String)",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.core.annotation.GenericOverride",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.GenericOverride#method(String)",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.GenericOverride#method(String)",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.GenericOverride#method(String)",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForWithArrayCompatibleReturnTypes()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "lazy loading",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForWithArrayCompatibleReturnTypes()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "circular aliases are prohibited",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForWithArrayCompatibleReturnTypes()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "multiple aliases for a single name",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForWithArrayCompatibleReturnTypes()",
      "head_type": "method",
      "relation": "have",
      "tail": "complete sample code for using the apiFunction",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForWithArrayCompatibleReturnTypes()",
      "head_type": "method",
      "relation": "have",
      "tail": "related concept interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForWithArrayCompatibleReturnTypes()",
      "head_type": "method",
      "relation": "have",
      "tail": "design principle interpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForWithArrayCompatibleReturnTypes()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.SimpleAliasRegistryTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.WithDefaultValueAliasPair",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "handleDefaultValueAlias",
      "tail_type": "apiFunction"
    },
    {
      "head": "handleDefaultValueAlias",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "aliasValueMustBeValid",
      "tail_type": "useConstraint"
    },
    {
      "head": "handleDefaultValueAlias",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "annotationProcessing",
      "tail_type": "useScenario"
    },
    {
      "head": "handleDefaultValueAlias",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "handleDefaultValueAlias",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.WithDefaultValueAliasPair",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AliasFor",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationFromInterfaceWhenSuperDoesNotImplementMethod()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "findMethodAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationFromInterfaceWhenSuperDoesNotImplementMethod()",
      "head_type": "method",
      "relation": "have",
      "tail": "void findMethodAnnotationFromInterfaceWhenSuperDoesNotImplementMethod() throws Exception { Method method = SubOfAbstractImplementsInterfaceWithAnnotatedMethod.class.getMethod(\"foo\"); Order order = findAnnotation(method, Order.class); assertThat(order).isNotNull(); }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationFromInterfaceWhenSuperDoesNotImplementMethod()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationFromInterfaceWhenSuperDoesNotImplementMethod()",
      "head_type": "method",
      "relation": "have",
      "tail": "This method tests the functionality of finding method annotations from an interface when the super class does not implement the method. It retrieves the method 'foo' from the 'SubOfAbstractImplementsInterfaceWithAnnotatedMethod' class, finds the 'Order' annotation on the method, and asserts that the annotation is not null.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationFromInterfaceWhenSuperDoesNotImplementMethod()",
      "head_type": "method",
      "relation": "have",
      "tail": "The design principle behind this method is to ensure that annotations can be correctly retrieved from methods declared in interfaces, even if the super class does not implement those methods. This is crucial for maintaining consistency and flexibility in annotation processing, especially in scenarios involving multiple inheritance and interface implementation.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#isAnnotationMetaPresentForPlainType()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "isAnnotationMetaPresent",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#isAnnotationMetaPresentForPlainType()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#isAnnotationMetaPresentForPlainType()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#isAnnotationMetaPresentForPlainType()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#isAnnotationMetaPresentForPlainType()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#isAnnotationMetaPresentForPlainType()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#isAnnotationMetaPresentForPlainType()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#isAnnotationMetaPresentForPlainType()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationWithImplicitAliasesWithDifferentDefaultValues()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "synthesizeAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "synthesizeAnnotation",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "AnnotationConfigurationException",
      "tail_type": "useConstraint"
    },
    {
      "head": "synthesizeAnnotation",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "ImplicitAliasesWithDifferentDefaultValuesContextConfig",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationWithImplicitAliasesWithDifferentDefaultValues()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationWithImplicitAliasesWithDifferentDefaultValues()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationWithImplicitAliasesWithDifferentDefaultValues()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationWithImplicitAliasesWithDifferentDefaultValues()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "ImplicitAliasesWithDifferentDefaultValuesContextConfigClass",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationWithImplicitAliasesWithDifferentDefaultValues()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "ImplicitAliasesWithDifferentDefaultValuesContextConfig",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationWithImplicitAliasesWithDuplicateValues()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "synthesizeAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "synthesizeAnnotation",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "AnnotationConfigurationException",
      "tail_type": "useConstraint"
    },
    {
      "head": "synthesizeAnnotation",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "ImplicitAliasesWithDuplicateValuesContextConfig",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationWithImplicitAliasesWithDuplicateValues()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationWithImplicitAliasesWithDuplicateValues()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationWithImplicitAliasesWithDuplicateValues()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationWithImplicitAliasesWithDuplicateValues()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "ImplicitAliasesWithDuplicateValuesContextConfigClass",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationWithImplicitAliasesWithDuplicateValues()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "ImplicitAliasesWithDuplicateValuesContextConfig",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findDeprecatedAnnotation()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "findDeprecatedAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findDeprecatedAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "sampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "sampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests#findDeprecatedAnnotation()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.core.annotation.Foo#something(T)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "abstract method execution",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.Foo#something(T)",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "type parameter constraint",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.Foo#something(T)",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.core.annotation.Order",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.Foo#something(T)",
      "head_type": "method",
      "relation": "have",
      "tail": "method annotation usage",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.Foo#something(T)",
      "head_type": "method",
      "relation": "have",
      "tail": "example code for method with annotation",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.Foo#something(T)",
      "head_type": "method",
      "relation": "have",
      "tail": "annotation order significance",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.Foo#something(T)",
      "head_type": "method",
      "relation": "have",
      "tail": "design principle for method annotations",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SubOfImplementsInterfaceWithAnnotatedMethod",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "foo() method override",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.SubOfImplementsInterfaceWithAnnotatedMethod",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SubOfImplementsInterfaceWithAnnotatedMethod",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SubOfImplementsInterfaceWithAnnotatedMethod",
      "head_type": "class",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SimplePojo#getName()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "accessor method",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SimplePojo#getName()",
      "head_type": "method",
      "relation": "have",
      "tail": "public String getName() {\n    return this.name;\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SimplePojo#getName()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.annotation.SimplePojo",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SampleBean#setName(String)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "Setting a name",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SampleBean#setName(String)",
      "head_type": "method",
      "relation": "have",
      "tail": "public void setName(String name) {    this.name = name;}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassWithGetter#unmanaged()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "unmanaged",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassWithGetter#unmanaged()",
      "head_type": "method",
      "relation": "have",
      "tail": "public SampleEmptyClass unmanaged() {\n    return null;\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassWithGetter#unmanaged()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.SampleClassWithGetter",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassWithGetter",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getter",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassWithGetter",
      "head_type": "class",
      "relation": "designPrincipleInterpretation",
      "tail": "This class seems to follow the principle of encapsulation by providing a getter method to access its properties. It ensures controlled access to the class's internal state, promoting better maintainability and flexibility.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithMemberCategoriesDoesNotMatchMissingCategory()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "reflectionTypeRegistration",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithMemberCategoriesDoesNotMatchMissingCategory()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "predicateVerification",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithMemberCategoriesDoesNotMatchMissingCategory()",
      "head_type": "method",
      "relation": "have",
      "tail": "typeWithMemberCategoriesDoesNotMatchMissingCategorySampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "typeWithMemberCategoriesDoesNotMatchMissingCategorySampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "SampleClass",
      "tail_type": "class"
    },
    {
      "head": "typeWithMemberCategoriesDoesNotMatchMissingCategorySampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "MemberCategory",
      "tail_type": "class"
    },
    {
      "head": "typeWithMemberCategoriesDoesNotMatchMissingCategorySampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "ReflectionOnType",
      "tail_type": "class"
    },
    {
      "head": "typeWithMemberCategoriesDoesNotMatchMissingCategorySampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "RuntimeHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithMemberCategoriesDoesNotMatchMissingCategory()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.RuntimeHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithMemberCategoriesDoesNotMatchMissingCategory()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.predicate.ReflectionOnType",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithMemberCategoriesDoesNotMatchMissingCategory()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.predicate.MemberCategory",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ChildType",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "second",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#resourceBundle(String)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "ResourceBundleHint processing",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#resourceBundle(String)",
      "head_type": "method",
      "relation": "have",
      "tail": "ResourceBundleHint usage sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "ResourceBundleHint usage sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "private Consumer<ResourceBundleHint> resourceBundle(String baseName) {\n    return resourceBundleHint -> assertThat(resourceBundleHint.getBaseName()).isEqualTo(baseName);\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#resourceBundle(String)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.ResourceHintsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.support.SpringFactoriesLoaderRuntimeHintsTests#setup()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "setup resources for tests",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.support(SpringFactoriesLoaderRuntimeHintsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.support(SpringFactoriesLoaderRuntimeHintsTests#setup()",
      "tail_type": "method"
    },
    {
      "head": "setup resources for tests",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "initializes runtime hints",
      "tail_type": "useScenario"
    },
    {
      "head": "setup resources for tests",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "loads hints from resource location",
      "tail_type": "useSampleCode"
    },
    {
      "head": "setup resources for tests",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "SpringFactoriesLoader is used for loading factory instances",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "setup resources for tests",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "Design principle follows the setup pattern for test initialization",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.nativex.ResourceHintsTests#registerWildcardAtTheEndPattern()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerWildcardPattern",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.ResourceHintsTests#registerWildcardAtTheEndPattern()",
      "head_type": "method",
      "relation": "have",
      "tail": "ResourceHintsRegistrationExample",
      "tail_type": "useSampleCode"
    },
    {
      "head": "ResourceHintsRegistrationExample",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.aot.nativex.ResourceHintsTests#registerWildcardAtTheEndPattern()",
      "tail_type": "method"
    },
    {
      "head": "registerWildcardPattern",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "WildcardPatternRegistrationScenario",
      "tail_type": "useScenario"
    },
    {
      "head": "WildcardPatternRegistrationScenario",
      "head_type": "useScenario",
      "relation": "associated_with",
      "tail": "org.springframework.aot.nativex.ResourceHintsTests#registerWildcardAtTheEndPattern()",
      "tail_type": "method"
    },
    {
      "head": "registerWildcardPattern",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "ValidPatternConstraint",
      "tail_type": "useConstraint"
    },
    {
      "head": "ValidPatternConstraint",
      "head_type": "useConstraint",
      "relation": "associated_with",
      "tail": "org.springframework.aot.nativex.ResourceHintsTests#registerWildcardAtTheEndPattern()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.aot.nativex.ResourceHintsTests#registerWildcardAtTheEndPattern()",
      "head_type": "method",
      "relation": "have",
      "tail": "ResourceHintsRegistrationConcept",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "ResourceHintsRegistrationConcept",
      "head_type": "relatedConceptInterpretation",
      "relation": "associated_with",
      "tail": "org.springframework.aot.nativex.ResourceHintsTests#registerWildcardAtTheEndPattern()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.aot.nativex.ResourceHintsTests#registerWildcardAtTheEndPattern()",
      "head_type": "method",
      "relation": "have",
      "tail": "EfficientResourceManagementPrinciple",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "EfficientResourceManagementPrinciple",
      "head_type": "designPrincipleInterpretation",
      "relation": "associated_with",
      "tail": "org.springframework.aot.nativex.ResourceHintsTests#registerWildcardAtTheEndPattern()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getMetaAnnotationTypesOnNonAnnotatedClass()",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMetaAnnotationTypesOnNonAnnotatedClass()",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getMetaAnnotationTypesOnNonAnnotatedClass() useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getMetaAnnotationTypesOnNonAnnotatedClass() useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests getMetaAnnotationTypesOnNonAnnotatedClass() sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtils",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests relatedConceptInterpretation",
      "head_type": "relatedConceptInterpretation",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests related concept interpretation content",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests designPrincipleInterpretation",
      "head_type": "designPrincipleInterpretation",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests design principle interpretation content",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationForMultipleMetaAnnotationsWithClashingAttributeNames()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "findMergedAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationForMultipleMetaAnnotationsWithClashingAttributeNames()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "multipleMetaAnnotationsWithClashingAttributeNames",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationForMultipleMetaAnnotationsWithClashingAttributeNames()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationForMultipleMetaAnnotationsWithClashingAttributeNames()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationForMultipleMetaAnnotationsWithClashingAttributeNames()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationForMultipleMetaAnnotationsWithClashingAttributeNames()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.FilteringClassLoader#loadClassForOverriding(String)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "class loading",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.FilteringClassLoader#loadClassForOverriding(String)",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "class name restrictions",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.FilteringClassLoader#loadClassForOverriding(String)",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "class filtering",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.FilteringClassLoader#loadClassForOverriding(String)",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.FilteringClassLoader#loadClassForOverriding(String)",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.FilteringClassLoader#loadClassForOverriding(String)",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "class loading",
      "head_type": "apiFunction",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.FilteringClassLoader",
      "tail_type": "class"
    },
    {
      "head": "class name restrictions",
      "head_type": "useConstraint",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.FilteringClassLoader",
      "tail_type": "class"
    },
    {
      "head": "class filtering",
      "head_type": "useScenario",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.FilteringClassLoader",
      "tail_type": "class"
    },
    {
      "head": "relatedConceptInterpretation",
      "head_type": "relatedConceptInterpretation",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.FilteringClassLoader",
      "tail_type": "class"
    },
    {
      "head": "designPrincipleInterpretation",
      "head_type": "designPrincipleInterpretation",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.FilteringClassLoader",
      "tail_type": "class"
    },
    {
      "head": "useSampleCode",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.FilteringClassLoader",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnClassScansAnnotations()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scan annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnClassScansAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "void directStrategyOnClassScansAnnotations() {\n    Class<?> source = WithSingleAnnotation.class;\n    assertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnClassScansAnnotations()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "WithSingleAnnotation",
      "tail_type": "class"
    },
    {
      "head": "WithSingleAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "single annotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodScansAnnotations()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scan annotations on method",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodScansAnnotations()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "scanning annotations on methods",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodScansAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "sample code for scanning annotations on methods",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodScansAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "related concept interpretation for scanning annotations on methods",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodScansAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "design principle interpretation for scanning annotations on methods",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodScansAnnotations()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.MultipleMethodsInterface",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "method",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.MultipleMethodsInterface",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "method1",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.MultipleMethodsInterface",
      "head_type": "class",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getAll(AnnotationTypeMappings)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "getAll",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getAll(AnnotationTypeMappings)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "AnnotationTypeMappings",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getAll(AnnotationTypeMappings)",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getAll(AnnotationTypeMappings)",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getAll(AnnotationTypeMappings)",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.WithSameValueAliasPair",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "handle alias pairs with the same value",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.WithSameValueAliasPair",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "ensuring unique values for each alias pair",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.WithSameValueAliasPair",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "scenarios where alias pairs have identical values",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.WithSameValueAliasPair",
      "head_type": "class",
      "relation": "have",
      "tail": "sample code demonstrating the usage of alias pairs with the same value",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.WithSameValueAliasPair",
      "head_type": "class",
      "relation": "have",
      "tail": "interpretation of related concepts such as aliasing and annotation processing",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.WithSameValueAliasPair",
      "head_type": "class",
      "relation": "have",
      "tail": "design principles behind handling alias pairs with the same value",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.WithSameValueAliasPair",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AliasFor",
      "tail_type": "class"
    },
    {
      "tail": "clearCache",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "findMethodAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "getAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "findAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "findAnnotationDeclaringClass",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "findAnnotationDeclaringClassForTypes",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "isAnnotationDeclaredLocally",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "isAnnotationInherited",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "isAnnotationMetaPresent",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "getAnnotationAttributes",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "getAnnotationAttributesWithNestedAnnotations",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "getAnnotationAttributesWithAttributeAliases",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "getAnnotationAttributesWithAttributeAliasesWithDifferentValues",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "getValueFromAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "getValueFromNonPublicAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "getDefaultValueFromAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "getDefaultValueFromNonPublicAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "getDefaultValueFromAnnotationType",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "findRepeatableAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "getRepeatableAnnotationsDeclaredOnMethod",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "getRepeatableAnnotationsDeclaredOnClassWithAttributeAliases",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "getRepeatableAnnotationsDeclaredOnClass",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "getRepeatableAnnotationsDeclaredOnSuperclass",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "getRepeatableAnnotationsDeclaredOnClassAndSuperclass",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "getRepeatableAnnotationsDeclaredOnMultipleSuperclasses",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "getDeclaredRepeatableAnnotationsDeclaredOnClass",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "getDeclaredRepeatableAnnotationsDeclaredOnSuperclass",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "synthesizeAnnotationWithImplicitAliasesWithMissingDefaultValues",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "synthesizeAnnotationWithImplicitAliasesWithDifferentDefaultValues",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "synthesizeAnnotationWithImplicitAliasesWithDuplicateValues",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "synthesizeAnnotationFromMapWithoutAttributeAliases",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "synthesizeAnnotationFromMapWithNestedMap",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "synthesizeAnnotationFromMapWithNestedArrayOfMaps",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "synthesizeAnnotationFromDefaultsWithoutAttributeAliases",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "synthesizeAnnotationFromDefaultsWithAttributeAliases",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "synthesizeAnnotationFromMapWithMinimalAttributesWithAttributeAliases",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "synthesizeAnnotationFromMapWithAttributeAliasesThatOverrideArraysWithSingleElements",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "synthesizeAnnotationFromMapWithImplicitAttributeAliases",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "synthesizeAnnotationFromMapWithMissingAttributeValue",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "synthesizeAnnotationFromMapWithNullAttributeValue",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "synthesizeAnnotationFromMapWithAttributeOfIncorrectType",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "synthesizeAnnotationFromAnnotationAttributesWithoutAttributeAliases",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "findAnnotationWithRepeatablesElements",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "findAnnotationFindsRepeatableContainerOnComposedAnnotationMetaAnnotatedWithRepeatableAnnotations",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "findAnnotationFindsRepeatableContainerOnComposedAnnotationMetaAnnotatedWithRepeatableAnnotationsOnMethod",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "findDeprecatedAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "asArray",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "Meta1",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "Meta2",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "MetaMeta",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "MetaMetaMeta",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "MetaCycle1",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "MetaCycle2",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "MetaCycle3",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "InterfaceWithMetaAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "ClassWithLocalMetaAnnotationAndMetaAnnotatedInterface",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "ClassWithInheritedMetaAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "SubClassWithInheritedMetaAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "SubSubClassWithInheritedMetaAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "ClassWithInheritedAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "SubClassWithInheritedAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "SubSubClassWithInheritedAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "MetaMetaAnnotatedClass",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "MetaMetaMetaAnnotatedClass",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "MetaCycleAnnotatedClass",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "AnnotatedInterface",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "Root",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "Leaf",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "Transactional",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "Foo",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "SimpleFoo",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "InheritedAnnotationInterface",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "SubInheritedAnnotationInterface",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "SubSubInheritedAnnotationInterface",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "NonInheritedAnnotationInterface",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "apiFunction"
    },
    {
      "tail": "SubNonInheritedAnnotationInterface",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#getValueFromAnnotation()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "getValueFromAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#getValueFromAnnotation()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#getValueFromAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests#getValueFromAnnotation()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#asArray(T)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "convert varargs to array",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#asArray(T)",
      "head_type": "method",
      "relation": "have",
      "tail": "convert varargs to array sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "convert varargs to array sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "java\n@SafeVarargs\nstatic <T> T[] asArray(T... arr) {\n    return arr;\n}\n",
      "tail_type": "code"
    },
    {
      "head": "org.springframework.core.annotation.TransactionalAndOrderedClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "transaction management",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.TransactionalAndOrderedClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "order control",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.TransactionalAndOrderedClass",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "ensuring transaction integrity",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.TransactionalAndOrderedClass",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "methods requiring ordered execution within transactions",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.TransactionalAndOrderedClass",
      "head_type": "class",
      "relation": "have",
      "tail": "sample code demonstrating transactional and ordered execution",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.TransactionalAndOrderedClass",
      "head_type": "class",
      "relation": "have",
      "tail": "interpretation of transaction and order control concepts",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.TransactionalAndOrderedClass",
      "head_type": "class",
      "relation": "have",
      "tail": "design principles behind transactional and ordered execution",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.TransactionalAndOrderedClass",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.transaction.annotation.Transactional",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.TransactionalAndOrderedClass",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.Ordered",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.ImplementsInterfaceWithGenericAnnotatedMethod#foo(String)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "foo(String)",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.ImplementsInterfaceWithGenericAnnotatedMethod#foo(String)",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.core.annotation.ImplementsInterfaceWithGenericAnnotatedMethod",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.ImplementsInterfaceWithGenericAnnotatedMethod",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation",
      "tail_type": "package"
    },
    {
      "head": "foo(String)",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "org.springframework.core.annotation.ImplementsInterfaceWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.ImplementsInterfaceWithGenericAnnotatedMethod#foo(String)",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.core.annotation.ImplementsInterfaceWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.WebController#getMappedWithPathAttribute()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "getMappedWithPathAttribute",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.WebController#getMappedWithPathAttribute()",
      "head_type": "method",
      "relation": "have",
      "tail": "getMappedWithPathAttribute sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getMappedWithPathAttribute sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "Complete example of getMappedWithPathAttribute",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForJacksonAnnotations()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerTypeForJacksonAnnotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForJacksonAnnotations()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "SampleClassWithJsonProperty",
      "tail_type": "class"
    },
    {
      "head": "registerTypeForJacksonAnnotations",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "registerTypeForJacksonAnnotations useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerTypeForJacksonAnnotations useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "registerTypeForJacksonAnnotations sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassWithListProperty",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getNames()",
      "tail_type": "apiFunction"
    },
    {
      "head": "getNames()",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.aot.hint.SampleClassWithListProperty",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicatesTests#setupAll()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "setupAll",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicatesTests#setupAll()",
      "head_type": "method",
      "relation": "have",
      "tail": "privateConstructor = SampleClass.class.getDeclaredConstructor(String.class);",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicatesTests#setupAll()",
      "head_type": "method",
      "relation": "have",
      "tail": "publicConstructor = SampleClass.class.getConstructor();",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicatesTests#setupAll()",
      "head_type": "method",
      "relation": "have",
      "tail": "publicMethod = SampleClass.class.getMethod(\"publicMethod\");",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicatesTests#setupAll()",
      "head_type": "method",
      "relation": "have",
      "tail": "publicField = SampleClass.class.getField(\"publicField\");",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicatesTests#setupAll()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "SampleClass",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "reflection.onType",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "reflection.onType.withMemberCategory",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "reflection.onType.withMemberCategories",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "reflection.onType.withAnyMemberCategory",
      "tail_type": "apiFunction"
    },
    {
      "head": "reflection.onType",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "nullTypeReference",
      "tail_type": "useConstraint"
    },
    {
      "head": "reflection.onType.withMemberCategory",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "nullMemberCategory",
      "tail_type": "useConstraint"
    },
    {
      "head": "reflection.onType.withAnyMemberCategory",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "emptyMemberCategories",
      "tail_type": "useConstraint"
    },
    {
      "head": "reflection.onType",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "introspectionMatching",
      "tail_type": "useScenario"
    },
    {
      "head": "reflection.onType.withMemberCategory",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "categoryMatching",
      "tail_type": "useScenario"
    },
    {
      "head": "reflection.onType.withMemberCategories",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "categoriesMatching",
      "tail_type": "useScenario"
    },
    {
      "head": "reflection.onType.withAnyMemberCategory",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "anyCategoryMatching",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType",
      "head_type": "class",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodIntrospectionFailsForUnknownType()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "introspection",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodIntrospectionFailsForUnknownType()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "ClassNotFoundException",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodIntrospectionFailsForUnknownType()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "unknown type handling",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodIntrospectionFailsForUnknownType()",
      "head_type": "method",
      "relation": "have",
      "tail": "void methodIntrospectionFailsForUnknownType() {\n    assertThatThrownBy(() -> reflection.onMethod(\"com.example.DoesNotExist\", \"publicMethod\").introspect()).isInstanceOf(ClassNotFoundException.class);\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodIntrospectionFailsForUnknownType()",
      "head_type": "method",
      "relation": "have",
      "tail": "This method tests the behavior when method introspection fails due to an unknown type, expecting a ClassNotFoundException to be thrown.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodIntrospectionFailsForUnknownType()",
      "head_type": "method",
      "relation": "have",
      "tail": "The design principle here is to ensure robustness by verifying that the system correctly handles scenarios involving unknown types during method introspection.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodIntrospectionFailsForUnknownType()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.predicate.ReflectionOnMethod",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#assertPredicateDoesNotMatch(Predicate<RuntimeHints>)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "assertPredicateDoesNotMatch",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#assertPredicateDoesNotMatch(Predicate<RuntimeHints>)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "assertPredicateDoesNotMatch",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.ProxyHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registerJdkProxyWithSealedInterface",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ProxyHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registerJdkProxyWithConcreteClass",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ProxyHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registerJdkProxyWithInterface",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ProxyHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registerJdkProxyWithTypeReferences",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ProxyHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registerJdkProxyWithConsumer",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ProxyHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registerJdkProxyTwiceExposesOneHint",
      "tail_type": "apiFunction"
    },
    {
      "head": "registerJdkProxyWithSealedInterface",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "SealedInterfaceConstraint",
      "tail_type": "useConstraint"
    },
    {
      "head": "registerJdkProxyWithConcreteClass",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "ConcreteClassConstraint",
      "tail_type": "useConstraint"
    },
    {
      "head": "registerJdkProxyWithInterface",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "InterfaceUsageScenario",
      "tail_type": "useScenario"
    },
    {
      "head": "registerJdkProxyWithTypeReferences",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "TypeReferencesUsageScenario",
      "tail_type": "useScenario"
    },
    {
      "head": "registerJdkProxyWithConsumer",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "ConsumerUsageScenario",
      "tail_type": "useScenario"
    },
    {
      "head": "registerJdkProxyTwiceExposesOneHint",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "TwiceRegistrationScenario",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.ProxyHintsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "ProxyHintsRelatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.ProxyHintsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "ProxyHintsDesignPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.ProxyHintsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.ProxyHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ProxyHintsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "registerJdkProxyWithSealedInterfaceSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.ProxyHintsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "registerJdkProxyWithConcreteClassSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.ProxyHintsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "registerJdkProxyWithInterfaceSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.ProxyHintsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "registerJdkProxyWithTypeReferencesSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.ProxyHintsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "registerJdkProxyWithConsumerSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.ProxyHintsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "registerJdkProxyTwiceExposesOneHintSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#registerTypeIfPresentRegistersExistingClass()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerTypeIfPresent",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#registerTypeIfPresentRegistersExistingClass()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerTypeIfPresentRegistersExistingClassSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerTypeIfPresentRegistersExistingClassSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.aot.hint.ReflectionHintsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#registerResourceWithExistingRelativeClassPathResource()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerResourceWithExistingRelativeClassPathResource",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#registerResourceWithExistingRelativeClassPathResource()",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.aot.hint.ClassPathResource",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#registerResourceWithExistingRelativeClassPathResource()",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.aot.hint.ResourceHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#registerResourceWithExistingRelativeClassPathResource()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerResource",
      "tail_type": "apiFunction"
    },
    {
      "head": "registerResourceWithExistingRelativeClassPathResource",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "org.springframework.aot.hint.ClassPathResource",
      "tail_type": "class"
    },
    {
      "head": "registerResourceWithExistingRelativeClassPathResource",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "org.springframework.aot.hint.ResourceHints",
      "tail_type": "class"
    },
    {
      "head": "registerResourceWithExistingRelativeClassPathResource",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "ResourceHints.registerResource",
      "tail_type": "useSampleCode"
    },
    {
      "head": "ResourceHints.registerResource",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.aot.hint.ClassPathResource",
      "tail_type": "class"
    },
    {
      "head": "ResourceHints.registerResource",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.aot.hint.ResourceHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#patternOf(String)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "Resource Pattern Hinting",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#patternOf(String)",
      "head_type": "method",
      "relation": "have",
      "tail": "ResourceHintsTests#patternOf(String) Sample Code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "ResourceHintsTests#patternOf(String) Sample Code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "private Consumer<ResourcePatternHints> patternOf(String... includes) {\n    return patternOf(Arrays.asList(includes), Collections.emptyList());\n}",
      "tail_type": "code"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#patternOf(String)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.ResourceHintsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.support.SpringFactoriesLoaderRuntimeHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "runtime hints setup",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.support(SpringFactoriesLoaderRuntimeHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "resource location hint verification",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.support(SpringFactoriesLoaderRuntimeHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "factory type hint verification",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.support(SpringFactoriesLoaderRuntimeHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "factory implementation hint verification",
      "tail_type": "apiFunction"
    },
    {
      "head": "runtime hints setup",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "SpringFactoriesLoader.forResourceLocation(\"META-INF/spring/aot.factories\").load(RuntimeHintsRegistrar.class).forEach(registrar -> registrar.registerHints(this.hints, ClassUtils.getDefaultClassLoader()));",
      "tail_type": "useSampleCode"
    },
    {
      "head": "resource location hint verification",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "assertThat(RuntimeHintsPredicates.resource().forResource(SpringFactoriesLoader.FACTORIES_RESOURCE_LOCATION)).accepts(this.hints);",
      "tail_type": "useSampleCode"
    },
    {
      "head": "factory type hint verification",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "assertThat(RuntimeHintsPredicates.reflection().onType(DummyFactory.class).withMemberCategory(MemberCategory.INVOKE_DECLARED_CONSTRUCTORS)).accepts(this.hints);",
      "tail_type": "useSampleCode"
    },
    {
      "head": "factory implementation hint verification",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "assertThat(RuntimeHintsPredicates.reflection().onType(MyDummyFactory1.class).withMemberCategory(MemberCategory.INVOKE_DECLARED_CONSTRUCTORS)).accepts(this.hints);",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.support(SpringFactoriesLoaderRuntimeHintsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "SpringFactoriesLoaderRuntimeHints",
      "tail_type": "class"
    },
    {
      "head": "SpringFactoriesLoaderRuntimeHintsTests",
      "head_type": "class",
      "relation": "have",
      "tail": " Phillip Webb",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#createWithType()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "TypeHint creation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#createWithType()",
      "head_type": "method",
      "relation": "have",
      "tail": "TypeHint creation sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "TypeHint creation sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "package org.springframework.aot.hint;\n\nimport org.springframework.aot.hint.TypeHint;\nimport org.springframework.aot.hint.TypeReference;\n\npublic class TypeHintCreationExample {\n    public static void main(String[] args) {\n        TypeHint hint = TypeHint.of(TypeReference.of(String.class)).build();\n        System.out.println(hint.getType().getCanonicalName());\n    }\n}",
      "tail_type": "String"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#createWithType()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.TypeHint",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#createWithType()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.TypeReference",
      "tail_type": "class"
    },
    {
      "head": "TypeHint creation",
      "head_type": "apiFunction",
      "relation": "relatedConceptInterpretation",
      "tail": "TypeHint is used to provide hints about types to the ahead-of-time (AOT) processing engine in Spring. It helps in optimizing the application by providing information about the types that are expected to be used at runtime.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "TypeHint creation",
      "head_type": "apiFunction",
      "relation": "designPrincipleInterpretation",
      "tail": "The design principle behind TypeHint is to enable developers to provide explicit hints about the types used in their application, thereby facilitating better optimization and performance during AOT processing.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests#writeObjectWithNestedEmptyArray()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "write object with nested empty array",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests#writeObjectWithNestedEmptyArray()",
      "head_type": "method",
      "relation": "have",
      "tail": "sample code for writing object with nested empty array",
      "tail_type": "useSampleCode"
    },
    {
      "head": "sample code for writing object with nested empty array",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "complete example for writing object with nested empty array",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests#writeWithTypeReferenceForInnerClass()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "write with type reference for inner class",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests#writeWithTypeReferenceForInnerClass()",
      "head_type": "method",
      "relation": "have",
      "tail": "write with type reference for inner class sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "write with type reference for inner class sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.aot.nativex.BasicJsonWriterTests$Nested",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests#writeWithTypeReferenceForInnerClass()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.nativex.BasicJsonWriterTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#serializationConfig()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "serialization configuration",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#serializationConfig()",
      "head_type": "method",
      "relation": "have",
      "tail": "SerializationHints serializationHints = hints.serialization();\nserializationHints.registerType(Integer.class);\nserializationHints.registerType(Long.class);",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#serializationConfig()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.nativex.FileNativeConfigurationWriter",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#serializationConfig()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "RuntimeHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#serializationConfig()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "SerializationHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#serializationConfig()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "Integer",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#serializationConfig()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "Long",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#serializationConfig()",
      "head_type": "method",
      "relation": "have",
      "tail": "Serialization configuration involves specifying which types should be serialized in a native image.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#serializationConfig()",
      "head_type": "method",
      "relation": "have",
      "tail": "The design principle behind serialization configuration is to ensure that all necessary types are included in the native image to avoid runtime errors.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.nativex.ProxyHintsTests#shouldWriteEntriesInNaturalOrder()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerJdkProxy",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.ProxyHintsTests#shouldWriteEntriesInNaturalOrder()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "assertEquals",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.ProxyHintsTests#shouldWriteEntriesInNaturalOrder()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "RuntimeHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.ProxyHintsTests#shouldWriteEntriesInNaturalOrder()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "Supplier",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.ProxyHintsTests#shouldWriteEntriesInNaturalOrder()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "Function",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.ProxyHintsTests#shouldWriteEntriesInNaturalOrder()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerJdkProxy useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerJdkProxy useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "registerJdkProxy useSampleCode Content",
      "tail_type": "content"
    },
    {
      "head": "org.springframework.aot.nativex.ProxyHintsTests#shouldWriteEntriesInNaturalOrder()",
      "head_type": "method",
      "relation": "have",
      "tail": "assertEquals useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "assertEquals useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "assertEquals useSampleCode Content",
      "tail_type": "content"
    },
    {
      "head": "org.springframework.aot.nativex.InnerClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "inner class handling",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.InnerClass",
      "head_type": "class",
      "relation": "have",
      "tail": "used for managing inner classes in a native image context",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.nativex.InnerClass",
      "head_type": "class",
      "relation": "have",
      "tail": "design principles focus on efficiency and compatibility with native image generation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#assertComponentScanAttributes(Class<?>,String)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "assertComponentScanAttributes",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#assertComponentScanAttributes(Class<?>,String)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#assertComponentScanAttributes(Class<?>,String)",
      "head_type": "method",
      "relation": "have",
      "tail": "private AnnotationAttributes assertComponentScanAttributes(Class<?> element, String... expected) {\n    AnnotationAttributes attributes = findMergedAnnotationAttributes(element, ComponentScan.class);\n    assertThat(attributes).as(\"Should find @ComponentScan on \" + element).isNotNull();\n    assertThat(attributes.getStringArray(\"value\")).as(\"value: \").isEqualTo(expected);\n    assertThat(attributes.getStringArray(\"basePackages\")).as(\"basePackages: \").isEqualTo(expected);\n    return attributes;\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.ImplicitAliasesContextConfigClass3",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "implicit aliases context configuration",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.ImplicitAliasesContextConfigClass3",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "no circular aliases allowed",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.ImplicitAliasesContextConfigClass3",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "multiple aliases for a single bean name",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.ImplicitAliasesContextConfigClass3",
      "head_type": "class",
      "relation": "have",
      "tail": "related to Spring Framework's bean aliasing",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.ImplicitAliasesContextConfigClass3",
      "head_type": "class",
      "relation": "have",
      "tail": "design principle of simplifying bean configuration",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.ImplicitAliasesContextConfigClass3",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.beans.factory.config.ConfigurableListableBeanFactory",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.ImplicitAliasesContextConfigClass3",
      "head_type": "class",
      "relation": "have",
      "tail": "sample code for implicit aliases configuration",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AliasedComposedContextConfigAndTestPropSourceClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "context configuration",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AliasedComposedContextConfigAndTestPropSourceClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "property source",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AliasedComposedContextConfigAndTestPropSourceClass",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "alias uniqueness",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.AliasedComposedContextConfigAndTestPropSourceClass",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "multiple context configurations",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AliasedComposedContextConfigAndTestPropSourceClass",
      "head_type": "class",
      "relation": "have",
      "tail": "related concept interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AliasedComposedContextConfigAndTestPropSourceClass",
      "head_type": "class",
      "relation": "have",
      "tail": "design principle interpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AliasedComposedContextConfigAndTestPropSourceClass",
      "head_type": "class",
      "relation": "have",
      "tail": "sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AliasedComposedContextConfigAndTestPropSourceClass",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.context.annotation.ConfigurationClassPostProcessor",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAttributesTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "typeSafeAttributeAccess",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAttributesTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "unresolvableClassWithClassNotFoundException",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAttributesTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "unresolvableClassWithLinkageError",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAttributesTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "singleElementToSingleElementArrayConversionSupport",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAttributesTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "nestedAnnotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAttributesTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getEnumWithNullAttributeName",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAttributesTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getEnumWithEmptyAttributeName",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAttributesTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getEnumWithUnknownAttributeName",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAttributesTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getEnumWithTypeMismatch",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAttributesTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getAliasedStringWithImplicitAliases",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAttributesTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getAliasedStringArrayWithImplicitAliases",
      "tail_type": "apiFunction"
    },
    {
      "head": "typeSafeAttributeAccess",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "unresolvableClassWithClassNotFoundException",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "unresolvableClassWithLinkageError",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "singleElementToSingleElementArrayConversionSupport",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "nestedAnnotations",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getEnumWithNullAttributeName",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getEnumWithEmptyAttributeName",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getEnumWithUnknownAttributeName",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getEnumWithTypeMismatch",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getAliasedStringWithImplicitAliases",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getAliasedStringArrayWithImplicitAliases",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAttributesTests",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAttributesTests",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.B",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "org.springframework.core.annotation.B",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.A2",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "annotationProcessing",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.A2",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "annotationProcessingConstraints",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.A2",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "annotationUseScenarios",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.A2",
      "head_type": "class",
      "relation": "have",
      "tail": "annotationSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.A2",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.A2",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.A2",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationUtils",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#noneReturnsFalse()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "annotation filtering",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#noneReturnsFalse()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "none filter should return false for all annotations",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#noneReturnsFalse()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "ensuring no annotation matches",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#noneReturnsFalse()",
      "head_type": "method",
      "relation": "have",
      "tail": "void noneReturnsFalse() {\n    assertThat(AnnotationFilter.NONE.matches(Retention.class)).isFalse();\n    assertThat(AnnotationFilter.NONE.matches(Nullable.class)).isFalse();\n    assertThat(AnnotationFilter.NONE.matches(TestAnnotation.class)).isFalse();\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#noneReturnsFalse()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationFilter",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#noneReturnsFalse()",
      "head_type": "method",
      "relation": "have",
      "tail": "AnnotationFilter.NONE is used to verify that no annotations match.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#noneReturnsFalse()",
      "head_type": "method",
      "relation": "have",
      "tail": "This method tests the behavior of the AnnotationFilter.NONE instance to ensure it returns false for any given annotation.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodWhenHasSuperclassScansSuperclass()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scan annotations from superclass",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodWhenHasSuperclassScansSuperclass()",
      "head_type": "method",
      "relation": "have",
      "tail": "sample code for scanning annotations from superclass",
      "tail_type": "useSampleCode"
    },
    {
      "head": "sample code for scanning annotations from superclass",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "complete example of scanning annotations from superclass",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodWhenHasSuperclassScansSuperclass()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests",
      "head_type": "class",
      "relation": "have",
      "tail": "related concept interpretation for AnnotationsScannerTests",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests",
      "head_type": "class",
      "relation": "have",
      "tail": "design principle interpretation for AnnotationsScannerTests",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.WithMultipleAnnotations#method()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "multipleAnnotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.WithMultipleAnnotations#method()",
      "head_type": "method",
      "relation": "have",
      "tail": "multipleAnnotationsSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.WithMultipleAnnotations#method()",
      "head_type": "method",
      "relation": "have",
      "tail": "multipleAnnotationsConcept",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.WithMultipleAnnotations#method()",
      "head_type": "method",
      "relation": "have",
      "tail": "multipleAnnotationsPrinciple",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#resolveMirrorsWhenOnlyHasDefaultValuesUsesFirst()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "resolveMirrors",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#resolveMirrorsWhenOnlyHasDefaultValuesUsesFirst()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "defaultValuesConstraint",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#resolveMirrorsWhenOnlyHasDefaultValuesUsesFirst()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "annotationWithDefaultValue",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#resolveMirrorsWhenOnlyHasDefaultValuesUsesFirst()",
      "head_type": "method",
      "relation": "have",
      "tail": "resolveMirrorsSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "resolveMirrorsSampleCode",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationTypeMappingsTests#resolveMirrorsWhenOnlyHasDefaultValuesUsesFirst()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#resolveMirrorsWhenOnlyHasDefaultValuesUsesFirst()",
      "head_type": "method",
      "relation": "have",
      "tail": "annotationMirrorResolutionExplanation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#resolveMirrorsWhenOnlyHasDefaultValuesUsesFirst()",
      "head_type": "method",
      "relation": "have",
      "tail": "annotationDesignPrinciple",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#resolveMirrorsWhenOnlyHasDefaultValuesUsesFirst()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationFromInterfaceOnSuper()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "find method annotation from interface on super",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationFromInterfaceOnSuper()",
      "head_type": "method",
      "relation": "have",
      "tail": "void findMethodAnnotationFromInterfaceOnSuper() throws Exception { Method method = SubOfImplementsInterfaceWithAnnotatedMethod.class.getMethod(\"foo\"); Order order = findAnnotation(method, Order.class); assertThat(order).isNotNull(); }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationFromInterfaceOnSuper()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationFromInterfaceOnSuper()",
      "head_type": "method",
      "relation": "have",
      "tail": "This method tests the functionality of finding method annotations from an interface on a superclass.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationFromInterfaceOnSuper()",
      "head_type": "method",
      "relation": "have",
      "tail": "The design principle followed here is to ensure that annotations from interfaces are correctly inherited by implementing classes, maintaining consistency in annotation processing.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.InterfaceWithMetaAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "meta-annotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.InterfaceWithMetaAnnotation",
      "head_type": "class",
      "relation": "have",
      "tail": "meta-annotations are used to provide a common set of annotations that can be applied to other annotations",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.InterfaceWithMetaAnnotation",
      "head_type": "class",
      "relation": "have",
      "tail": "meta-annotations are designed to reduce redundancy and improve code readability",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.InterfaceWithMetaAnnotation",
      "head_type": "class",
      "relation": "have",
      "tail": "package org.springframework.core.annotation; import java.lang.annotation.Documented; import java.lang.annotation.ElementType; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Target; @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.TYPE) @Documented public @interface InterfaceWithMetaAnnotation { // specific code }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.TransactionalClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "transaction management",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.TransactionalClass",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": " Proper transaction management configuration is required",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.TransactionalClass",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "Methods or classes that require transactional support",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.TransactionalClass",
      "head_type": "class",
      "relation": "have",
      "tail": "org.springframework.transaction.annotation.Transactional",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.TransactionalClass",
      "head_type": "class",
      "relation": "have",
      "tail": "Ensures that methods or classes execute within a transactional context",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.TransactionalClass",
      "head_type": "class",
      "relation": "have",
      "tail": "Design principle focused on transactional integrity and consistency",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.WebController#getMappedWithValueAttribute()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "handle HTTP GET requests",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.WebController#getMappedWithValueAttribute()",
      "head_type": "method",
      "relation": "have",
      "tail": "map HTTP requests to handler methods",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.WebController#getMappedWithValueAttribute()",
      "head_type": "method",
      "relation": "have",
      "tail": "use @Get annotation to define the URL path",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.WebController",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.web.bind.annotation.RestController",
      "tail_type": "class"
    },
    {
      "head": "handle HTTP GET requests",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "the method signature must match the expected parameters",
      "tail_type": "useConstraint"
    },
    {
      "head": "map HTTP requests to handler methods",
      "head_type": "useScenario",
      "relation": "have",
      "tail": "the method should be public and return void or a response body",
      "tail_type": "useSampleCode"
    },
    {
      "head": "use @Get annotation to define the URL path",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "complete example of using @Get annotation",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.WebController",
      "head_type": "class",
      "relation": "have",
      "tail": "used to define controllers and their request mappings",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.WebController",
      "head_type": "class",
      "relation": "have",
      "tail": "designed to simplify the development of web applications",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassWithResolvableType",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getResolvableType",
      "tail_type": "apiFunction"
    },
    {
      "head": "getResolvableType",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "public ResolvableType getResolvableType() { return null; }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassB#getC()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "return null",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassB#getC()",
      "head_type": "method",
      "relation": "have",
      "tail": "public SampleClassC getC() {\n    return null;\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "constructor invocation matching",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "constructor hint registration",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "constructor hint scenarios",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor",
      "head_type": "class",
      "relation": "have",
      "tail": "constructor hint sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor",
      "head_type": "class",
      "relation": "have",
      "tail": "constructor hint related concept interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor",
      "head_type": "class",
      "relation": "have",
      "tail": "constructor hint design principle interpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "constructor hint sample code",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "constructor invocation matching",
      "tail_type": "apiFunction"
    },
    {
      "head": "constructor hint related concept interpretation",
      "head_type": "relatedConceptInterpretation",
      "relation": "associated_with",
      "tail": "constructor invocation matching",
      "tail_type": "apiFunction"
    },
    {
      "head": "constructor hint design principle interpretation",
      "head_type": "designPrincipleInterpretation",
      "relation": "associated_with",
      "tail": "constructor invocation matching",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor#constructorInvocationDoesNotMatchConstructorHint()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "constructor invocation introspection",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor#constructorInvocationDoesNotMatchConstructorHint()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "constructor hint mismatch",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor#constructorInvocationDoesNotMatchConstructorHint()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "constructor hint validation",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor#constructorInvocationDoesNotMatchConstructorHint()",
      "head_type": "method",
      "relation": "have",
      "tail": "constructor hint validation sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "constructor hint validation sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.aot.hint.predicate.ReflectionOnConstructor#constructorInvocationDoesNotMatchConstructorHint()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor#constructorInvocationDoesNotMatchConstructorHint()",
      "head_type": "method",
      "relation": "have",
      "tail": "constructor hint validation related concept interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "constructor hint validation related concept interpretation",
      "head_type": "relatedConceptInterpretation",
      "relation": "have",
      "tail": "org.springframework.aot.hint.predicate.ReflectionOnConstructor#constructorInvocationDoesNotMatchConstructorHint()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor#constructorInvocationDoesNotMatchConstructorHint()",
      "head_type": "method",
      "relation": "have",
      "tail": "constructor hint validation design principle interpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "constructor hint validation design principle interpretation",
      "head_type": "designPrincipleInterpretation",
      "relation": "have",
      "tail": "org.springframework.aot.hint.predicate.ReflectionOnConstructor#constructorInvocationDoesNotMatchConstructorHint()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor#constructorInvocationDoesNotMatchConstructorHint()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.predicate.ReflectionOnConstructor",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor#privateConstructorInvocationDoesNotMatchIntrospectDeclaredConstructors()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "introspectDeclaredConstructors",
      "tail_type": "apiFunction"
    },
    {
      "head": "introspectDeclaredConstructors",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "introspectDeclaredConstructors",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "introspectDeclaredConstructors",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "introspectDeclaredConstructors",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "privateConstructorConstraint",
      "tail_type": "useConstraint"
    },
    {
      "head": "introspectDeclaredConstructors",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "privateConstructorScenario",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor#privateConstructorInvocationDoesNotMatchIntrospectDeclaredConstructors()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.predicate.ReflectionOnConstructor",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.TestType#setName(String)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "setName",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.TestType#setName(String)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.TestType",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ResourcePatternHintTests#extensionInDirectoryAtAnyDepth()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "ResourcePatternMatching",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ResourcePatternHintTests#extensionInDirectoryAtAnyDepth()",
      "head_type": "method",
      "relation": "have",
      "tail": "ResourcePatternHintUsage",
      "tail_type": "useSampleCode"
    },
    {
      "head": "ResourcePatternHintUsage",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "ResourcePatternHintExample",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests#includes(String)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "ResourcePatternHintRegistration",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests#includes(String)",
      "head_type": "method",
      "relation": "have",
      "tail": "ResourcePatternHintRegistrationSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "ResourcePatternHintRegistrationSampleCode",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests#includes(String)",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.aot.hint.TypeReferenceTests#typeReferenceWithClassName()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "TypeReference creation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.TypeReferenceTests#typeReferenceWithClassName()",
      "head_type": "method",
      "relation": "have",
      "tail": "TypeReference usage example",
      "tail_type": "useSampleCode"
    },
    {
      "head": "TypeReference usage example",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "Complete example of TypeReference usage",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.TypeReferenceTests#typeReferenceWithClassName()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.TypeReference",
      "tail_type": "class"
    },
    {
      "head": "TypeReference creation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "TypeReference creation explanation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.nativex.RuntimeHintsWriterTests#setupSchemaValidator()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "JsonSchemaFactory usage",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.RuntimeHintsWriterTests#setupSchemaValidator()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "SchemaValidatorsConfig creation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.RuntimeHintsWriterTests#setupSchemaValidator()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "JSON_SCHEMA retrieval",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.RuntimeHintsWriterTests#setupSchemaValidator()",
      "head_type": "method",
      "relation": "have",
      "tail": "Sample Code for setupSchemaValidator()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "Sample Code for setupSchemaValidator()",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "Complete Example Code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.nativex.RuntimeHintsWriterTests#setupSchemaValidator()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.nativex.RuntimeHintsWriterTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.RuntimeHintsWriterTests#setupSchemaValidator()",
      "head_type": "method",
      "relation": "have",
      "tail": "Related Concept Interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "Related Concept Interpretation",
      "head_type": "relatedConceptInterpretation",
      "relation": "have",
      "tail": "Explanation of JSON Schema Factory and Schema Validators Config",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.nativex.RuntimeHintsWriterTests#setupSchemaValidator()",
      "head_type": "method",
      "relation": "have",
      "tail": "Design Principle Interpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "Design Principle Interpretation",
      "head_type": "designPrincipleInterpretation",
      "relation": "have",
      "tail": "Principles behind Schema Validation Setup",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#hasAnnotationOnNonAnnotatedClass()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "hasAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#hasAnnotationOnNonAnnotatedClass()",
      "head_type": "method",
      "relation": "have",
      "tail": "sample code for checking annotation on a non-annotated class",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#hasAnnotationOnNonAnnotatedClass()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "NonAnnotatedClass",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#hasAnnotationOnNonAnnotatedClass()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "Transactional",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#hasAnnotationOnNonAnnotatedClass()",
      "head_type": "method",
      "relation": "have",
      "tail": "related concept interpretation for checking annotation existence",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#hasAnnotationOnNonAnnotatedClass()",
      "head_type": "method",
      "relation": "have",
      "tail": "design principle interpretation for annotation checking",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getAllAnnotationAttributesOnClassWithMultipleComposedAnnotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getAllAnnotationAttributesOnClassWithMultipleComposedAnnotations()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "getAllAnnotationAttributesOnClassWithMultipleComposedAnnotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getAllAnnotationAttributesOnClassWithMultipleComposedAnnotations()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "required by org.springframework.context.annotation.ProfileCondition",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getAllAnnotationAttributesOnClassWithMultipleComposedAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "��取类上多个组合注解的所有注解属性",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getAllAnnotationAttributesOnClassWithMultipleComposedAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "在类上获取多个组合注解的所有注解属性",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getAllAnnotationAttributesOnClassWithMultipleComposedAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "设计原则：利用注解和反射技术，提供了一种灵活的方式来检索和处理类上的注解信息",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getAllAnnotationAttributesOnClassWithMultipleComposedAnnotations()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.context.annotation.ProfileCondition",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getAllAnnotationAttributesOnClassWithMultipleComposedAnnotations()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.env.EnvironmentSystemIntegrationTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getMergedAnnotationAttributesOnClassWithLocalAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedAnnotationAttributesOnClassWithLocalAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getMergedAnnotationAttributesOnClassWithLocalAnnotation()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getMergedAnnotationAttributesOnClassWithLocalAnnotation()",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "getMergedAnnotationAttributesOnClassWithLocalAnnotation()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.InterfaceWithInheritedAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "handleFromInterface",
      "tail_type": "apiFunction"
    },
    {
      "head": "handleFromInterface",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "void handleFromInterface();",
      "tail_type": "useSampleCode"
    },
    {
      "head": "handleFromInterface",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "Order annotation must be used",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.InterfaceWithInheritedAnnotation",
      "head_type": "class",
      "relation": "have",
      "tail": "Order annotation must be used",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.AbstractClassWithInheritedAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "transactional operation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AbstractClassWithInheritedAnnotation",
      "head_type": "class",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AbstractClassWithInheritedAnnotation",
      "tail_type": "class"
    },
    {
      "head": "transactional operation",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "abstract method",
      "tail_type": "useScenario"
    },
    {
      "head": "transactional operation",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "parameterized method",
      "tail_type": "useScenario"
    },
    {
      "head": "transactional operation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "use sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "transactional operation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "related concept interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "transactional operation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "design principle interpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AbstractClassWithInheritedAnnotation#handleParameterized(T)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "handleParameterized",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AbstractClassWithInheritedAnnotation#handleParameterized(T)",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "Transactional",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.AbstractClassWithInheritedAnnotation#handleParameterized(T)",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AbstractClassWithInheritedAnnotation",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AbstractClassWithInheritedAnnotation#handleParameterized(T)",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AbstractClassWithInheritedAnnotation#handleParameterized(T)",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AbstractClassWithInheritedAnnotation#handleParameterized(T)",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.StringGenericParameter",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getFor(Integer)",
      "tail_type": "apiFunction"
    },
    {
      "head": "getFor(Integer)",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getFor(Integer) Sample Code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getFor(Integer) Sample Code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "Complete Example for getFor(Integer)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.NonInheritedAnnotationInterface",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "Non-inherited annotation interface",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.NonInheritedAnnotationInterface",
      "head_type": "class",
      "relation": "have",
      "tail": "Non-inherited annotations are not inherited by subclasses.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.NonInheritedAnnotationInterface",
      "head_type": "class",
      "relation": "have",
      "tail": "Design principle: Separation of concerns, ensuring annotations are only applicable to specific classes or interfaces.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.WithOtherAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "annotationProcessing",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.WithOtherAnnotation",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "annotationRetentionPolicy",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.WithOtherAnnotation",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "metaAnnotations",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.WithOtherAnnotation",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.WithOtherAnnotation",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.WithOtherAnnotation",
      "head_type": "class",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.WithOtherAnnotation",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationAttributes",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnClassScansAnnotations()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scan annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnClassScansAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "void superclassStrategyOnClassScansAnnotations() {\n    Class<?> source = WithSingleAnnotation.class;\n    assertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\"0:TestAnnotation1\");\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnClassScansAnnotations()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests",
      "head_type": "class",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnClassScansAnnotations()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#scan(C,AnnotatedElement,SearchStrategy,AnnotationsProcessor<C,R>)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scan",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#scan(C,AnnotatedElement,SearchStrategy,AnnotationsProcessor<C,R>)",
      "head_type": "method",
      "relation": "have",
      "tail": "scan method implementation",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests#scan(C,AnnotatedElement,SearchStrategy,AnnotationsProcessor<C,R>)",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#scan(C,AnnotatedElement,SearchStrategy,AnnotationsProcessor<C,R>)",
      "head_type": "method",
      "relation": "have",
      "tail": "related concept interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#scan(C,AnnotatedElement,SearchStrategy,AnnotationsProcessor<C,R>)",
      "head_type": "method",
      "relation": "have",
      "tail": "design principle interpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.Hello2Impl",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "method",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.BridgeMethod",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "Bridge Method",
      "tail_type": "apiFunction"
    },
    {
      "head": "Bridge Method",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "Used to indicate that a method is a bridge method generated by the compiler.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "Bridge Method",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "This annotation is used internally by the Spring framework and should not be used directly in application code.",
      "tail_type": "useConstraint"
    },
    {
      "head": "Bridge Method",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "Example:\n\npackage com.example;\n\nimport org.springframework.core.annotation.BridgeMethod;\n\npublic class ExampleClass {\n\n    @BridgeMethod\n    public void method(Object arg) {\n        // Implementation\n    }\n\n    public void method(String arg) {\n        // Implementation\n    }\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.GenericNonOverrideInterface",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "void method(T argument);",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.GenericNonOverrideInterface",
      "head_type": "class",
      "relation": "have",
      "tail": "void method(T argument);",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getDistanceReturnsDistance",
      "tail_type": "apiFunction"
    },
    {
      "head": "getDistanceReturnsDistance",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getDistanceReturnsDistance() Sample Code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getDistanceReturnsDistance() Sample Code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "Complete getDistanceReturnsDistance() Example",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.WithAliasPairB",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "aliasHandling",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.WithAliasPairB",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "circularAliasProhibition",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.WithAliasPairB",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "multipleAliasesForSingleName",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.WithAliasPairB",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.WithAliasPairB",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.WithAliasPairB",
      "head_type": "class",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.WithAliasPairB",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.SimpleAliasRegistryTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#methodWithComposedAnnotationMetaAnnotatedWithRepeatableAnnotations()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "composedAnnotationProcessing",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#methodWithComposedAnnotationMetaAnnotatedWithRepeatableAnnotations()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "repeatableAnnotationsUsage",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#methodWithComposedAnnotationMetaAnnotatedWithRepeatableAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "composedAnnotationProcessing",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#methodWithComposedAnnotationMetaAnnotatedWithRepeatableAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "repeatableAnnotationsUsage",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#methodWithComposedAnnotationMetaAnnotatedWithRepeatableAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "composedAnnotationProcessing",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#methodWithComposedAnnotationMetaAnnotatedWithRepeatableAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "repeatableAnnotationsUsage",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#methodWithComposedAnnotationMetaAnnotatedWithRepeatableAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "composedAnnotationProcessing",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#methodWithComposedAnnotationMetaAnnotatedWithRepeatableAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "repeatableAnnotationsUsage",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#methodWithComposedAnnotationMetaAnnotatedWithRepeatableAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "composedAnnotationProcessing",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#methodWithComposedAnnotationMetaAnnotatedWithRepeatableAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "repeatableAnnotationsUsage",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#methodWithComposedAnnotationMetaAnnotatedWithRepeatableAnnotations()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.MetaCycleAnnotatedClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "MetaCycleAnnotatedClass",
      "tail_type": "apiFunction"
    },
    {
      "head": "MetaCycleAnnotatedClass",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "Circular aliases are prohibited",
      "tail_type": "useConstraint"
    },
    {
      "head": "MetaCycleAnnotatedClass",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "Multiple aliases for a single name",
      "tail_type": "useScenario"
    },
    {
      "head": "MetaCycleAnnotatedClass",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "RelatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "MetaCycleAnnotatedClass",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "DesignPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "MetaCycleAnnotatedClass",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "UseSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.MetaCycleAnnotatedClass",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.SimpleAliasRegistryTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.ImplementsInterfaceWithAnnotatedMethod",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "foo method",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.ImplementsInterfaceWithAnnotatedMethod",
      "head_type": "class",
      "relation": "have",
      "tail": "foo method sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithMultipleLevelsAndCollection()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerTypeForSerializationWithMultipleLevelsAndCollection",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithMultipleLevelsAndCollection()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerTypeForSerializationWithMultipleLevelsAndCollection() useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerTypeForSerializationWithMultipleLevelsAndCollection() useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithMultipleLevelsAndCollection() sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithMultipleLevelsAndCollection()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "SampleClassA",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithMultipleLevelsAndCollection()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "SampleClassB",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithMultipleLevelsAndCollection()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "SampleClassC",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithMultipleLevelsAndCollection()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "String",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithMultipleLevelsAndCollection()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "Set",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassB",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getC",
      "tail_type": "apiFunction"
    },
    {
      "head": "getC",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.Builder#newInstance()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "create instance of Builder",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.Builder#newInstance()",
      "head_type": "method",
      "relation": "have",
      "tail": "public static Builder newInstance() {\n    return new Builder();\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor#constructorInvocationMatchesInvokeDeclaredConstructors()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "constructor invocation matching",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor#constructorInvocationMatchesInvokeDeclaredConstructors()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "constructor must be declared",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor#constructorInvocationMatchesInvokeDeclaredConstructors()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "runtime hints registration",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor#constructorInvocationMatchesInvokeDeclaredConstructors()",
      "head_type": "method",
      "relation": "have",
      "tail": "runtime hints registration sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "runtime hints registration sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "package com.healthMgr.common.email; import java.xxxx; public class OneClass { // specific code }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor#constructorInvocationMatchesInvokeDeclaredConstructors()",
      "head_type": "method",
      "relation": "have",
      "tail": "constructor invocation matching explanation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "constructor invocation matching explanation",
      "head_type": "relatedConceptInterpretation",
      "relation": "have",
      "tail": "constructor invocation matching explanation text",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor#constructorInvocationMatchesInvokeDeclaredConstructors()",
      "head_type": "method",
      "relation": "have",
      "tail": "design principle explanation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "design principle explanation",
      "head_type": "designPrincipleInterpretation",
      "relation": "have",
      "tail": "design principle explanation text",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor#constructorInvocationMatchesInvokeDeclaredConstructors()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.SimpleAliasRegistryTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#shouldFailForUnknownClass()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "field access reflection",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#shouldFailForUnknownClass()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "class existence",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#shouldFailForUnknownClass()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "unit testing",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#shouldFailForUnknownClass()",
      "head_type": "method",
      "relation": "have",
      "tail": "sample code for field access reflection",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#shouldFailForUnknownClass()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.predicate.ReflectionOnField",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#shouldFailForUnknownClass()",
      "head_type": "method",
      "relation": "have",
      "tail": "reflection on field access",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#shouldFailForUnknownClass()",
      "head_type": "method",
      "relation": "have",
      "tail": "design principle for reflection on field",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.ProxyHintsTests#registerJdkProxyWithSealedInterface()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerJdkProxyWithSealedInterface",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ProxyHintsTests#registerJdkProxyWithSealedInterface()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "IllegalArgumentException",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.aot.hint.ProxyHintsTests#registerJdkProxyWithSealedInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerJdkProxyWithSealedInterface useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerJdkProxyWithSealedInterface useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.aot.hint.ProxyHintsTests#registerJdkProxyWithSealedInterface() sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.ProxyHintsTests#registerJdkProxyWithSealedInterface()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.ProxyHintsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionTypeReferenceTests#reflectionTargetNames()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "generateStreamOfArguments",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionTypeReferenceTests#reflectionTargetNames()",
      "head_type": "method",
      "relation": "have",
      "tail": "generateStreamOfArgumentsSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "generateStreamOfArgumentsSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "static Stream<Arguments> reflectionTargetNames() {\n    return Stream.of(\n        arguments(int.class, \"int\"),\n        arguments(int[].class, \"int[]\"),\n        arguments(Integer[].class, \"java.lang.Integer[]\"),\n        arguments(Object[].class, \"java.lang.Object[]\"),\n        arguments(StaticNested.class, \"org.springframework.aot.hint.ReflectionTypeReferenceTests$StaticNested\"),\n        arguments(StaticNested[].class, \"org.springframework.aot.hint.ReflectionTypeReferenceTests$StaticNested[]\"),\n        arguments(Inner.class, \"org.springframework.aot.hint.ReflectionTypeReferenceTests$Inner\"),\n        arguments(Inner[].class, \"org.springframework.aot.hint.ReflectionTypeReferenceTests$Inner[]\")\n    );\n}",
      "tail_type": "code"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionTypeReferenceTests#reflectionTargetNames()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.ReflectionTypeReferenceTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#registerRootDirectory()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "register root directory",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#registerRootDirectory()",
      "head_type": "method",
      "relation": "have",
      "tail": "void registerRootDirectory() { this.resourceHints.registerPattern(\"/\"); assertThat(this.resourceHints.resourcePatternHints()).singleElement().satisfies(patternOf(\"/\")); }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#registerRootDirectory()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.ResourceHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.support.ObjectToObjectConverterRuntimeHintsTests#setup()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "runtime hints setup",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.support.ObjectToObjectConverterRuntimeHintsTests#setup()",
      "head_type": "method",
      "relation": "have",
      "tail": "setup runtime hints",
      "tail_type": "useSampleCode"
    },
    {
      "head": "setup runtime hints",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.support.ObjectToObjectConverterRuntimeHintsTests#setup()",
      "tail_type": "method"
    },
    {
      "head": "runtime hints setup",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "initializing runtime hints",
      "tail_type": "useScenario"
    },
    {
      "head": "initializing runtime hints",
      "head_type": "useScenario",
      "relation": "have",
      "tail": "org.springframework.aot.hint.support.ObjectToObjectConverterRuntimeHintsTests#setup()",
      "tail_type": "method"
    },
    {
      "head": "runtime hints setup",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "class loader availability",
      "tail_type": "useConstraint"
    },
    {
      "head": "class loader availability",
      "head_type": "useConstraint",
      "relation": "have",
      "tail": "org.springframework.aot.hint.support.ObjectToObjectConverterRuntimeHintsTests#setup()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.aot.hint.support.ObjectToObjectConverterRuntimeHintsTests#setup()",
      "head_type": "method",
      "relation": "have",
      "tail": "SpringFactoriesLoader usage",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "SpringFactoriesLoader usage",
      "head_type": "relatedConceptInterpretation",
      "relation": "have",
      "tail": "org.springframework.aot.hint.support.ObjectToObjectConverterRuntimeHintsTests#setup()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.aot.hint.support.ObjectToObjectConverterRuntimeHintsTests#setup()",
      "head_type": "method",
      "relation": "have",
      "tail": "runtime hints design principle",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "runtime hints design principle",
      "head_type": "designPrincipleInterpretation",
      "relation": "have",
      "tail": "org.springframework.aot.hint.support.ObjectToObjectConverterRuntimeHintsTests#setup()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.aot.hint.support.PathMatchingResourcePatternResolverRuntimeHintsTests#setup()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "runtime hints setup",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.support.PathMatchingResourcePatternResolverRuntimeHintsTests#setup()",
      "head_type": "method",
      "relation": "have",
      "tail": "setup runtime hints",
      "tail_type": "useSampleCode"
    },
    {
      "head": "setup runtime hints",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.support.PathMatchingResourcePatternResolverRuntimeHintsTests#setup()",
      "tail_type": "method"
    },
    {
      "head": "runtime hints setup",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "org.springframework.aot.hint.support.PathMatchingResourcePatternResolverRuntimeHintsTests#setup()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.aot.hint.support.PathMatchingResourcePatternResolverRuntimeHintsTests#EclipseOsgiFileLocatorHasHints()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "reflectionHint",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.support.PathMatchingResourcePatternResolverRuntimeHintsTests#EclipseOsgiFileLocatorHasHints()",
      "head_type": "method",
      "relation": "have",
      "tail": "org.eclipse.core.runtime.FileLocator",
      "tail_type": "class"
    },
    {
      "head": "reflectionHint",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "org.eclipse.core.runtime.FileLocator",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.support.PathMatchingResourcePatternResolverRuntimeHintsTests#EclipseOsgiFileLocatorHasHints()",
      "head_type": "method",
      "relation": "have",
      "tail": "RuntimeHintsPredicates.reflection().onType(TypeReference.of(\"org.eclipse.core.runtime.FileLocator\"))",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.support.PathMatchingResourcePatternResolverRuntimeHintsTests#EclipseOsgiFileLocatorHasHints()",
      "head_type": "method",
      "relation": "have",
      "tail": "This method tests whether the Eclipse OSGi FileLocator has appropriate runtime hints.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.support.PathMatchingResourcePatternResolverRuntimeHintsTests#EclipseOsgiFileLocatorHasHints()",
      "head_type": "method",
      "relation": "have",
      "tail": "The design principle is to ensure that the runtime hints for Eclipse OSGi FileLocator are correctly set up.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests#writeWithEscapeFormFeed()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "writeWithEscapeFormFeed",
      "tail_type": "apiFunction"
    },
    {
      "head": "writeWithEscapeFormFeed",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "org.springframework.aot.nativex.BasicJsonWriterTests#writeWithEscapeFormFeed()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests#writeWithEscapeFormFeed()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.nativex.BasicJsonWriterTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests#assertStringAttribute(Object,String)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "assertStringAttribute",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests#assertStringAttribute(Object,String)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.nativex.BasicJsonWriterTests",
      "tail_type": "class"
    },
    {
      "head": "assertStringAttribute",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "void assertStringAttribute(Object value, String expectedValue) {\n    Map<String, Object> attributes = new LinkedHashMap<>();\n    attributes.put(\"test\", value);\n    this..writeObject(attributes);\n    assertThat(out.toString()).contains(\"\\\"test\\\": \\\"\" + expectedValue + \"\\\"\");\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.nativex.SerializationHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "shouldWriteEmptyHint",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.SerializationHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "shouldWriteSingleHint",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.SerializationHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "shouldWriteMultipleHints",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.SerializationHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "shouldWriteSingleHintWithCondition",
      "tail_type": "apiFunction"
    },
    {
      "head": "shouldWriteEmptyHint",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "shouldWriteSingleHint",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "shouldWriteMultipleHints",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "shouldWriteSingleHintWithCondition",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.nativex.ProxyHintsTests#shouldWriteCondition()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerJdkProxy",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.ProxyHintsTests#shouldWriteCondition()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "assertEquals",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.ProxyHintsTests#shouldWriteCondition()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "RuntimeHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.ProxyHintsTests#shouldWriteCondition()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "JSONException",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.ProxyHintsTests#shouldWriteCondition()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "Function",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.ProxyHintsTests#shouldWriteCondition()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "TypeReference",
      "tail_type": "class"
    },
    {
      "head": "registerJdkProxy",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "assertEquals",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "ProxyHintsTestsSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.core.SpringNamingPolicyTests#javaxPrefix()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "generateClassName",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.core.SpringNamingPolicyTests#javaxPrefix()",
      "head_type": "method",
      "relation": "have",
      "tail": "generateClassNameSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "generateClassNameSampleCode",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "generateClassName",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.core.SpringNamingPolicyTests#javaxPrefix()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.core.SpringNamingPolicyTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.core.SpringNamingPolicyTests",
      "head_type": "class",
      "relation": "have",
      "tail": "generateClassNameDesignPrinciple",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "generateClassNameDesignPrinciple",
      "head_type": "designPrincipleInterpretation",
      "relation": "associated_with",
      "tail": "generateClassName",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedForPlainTypes()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "isAnnotated",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedForPlainTypes()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedForPlainTypes()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedForPlainTypes()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedForPlainTypes()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedForPlainTypes()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "Order.class",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedForPlainTypes()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.lang.NonNullApi.class",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedForPlainTypes()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "ParametersAreNonnullByDefault.class",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedForPlainTypes()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "Documented.class",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedForPlainTypes()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "Nonnull.class",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "findMergedAnnotationAttributes",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnInheritedAnnotationInterface() sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.TxConfig",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "transaction configuration",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.TxConfig",
      "head_type": "class",
      "relation": "have",
      "tail": "used for specifying transaction management settings",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.TxConfig",
      "head_type": "class",
      "relation": "have",
      "tail": "design principle is to provide a centralized way to configure transactional behavior",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SubNonInheritedAnnotationInterface",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "SubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.SubNonInheritedAnnotationInterface",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SubNonInheritedAnnotationInterface",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenNoMetaAnnotationsReturnsMappings()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "getAnnotationTypeMappings",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenNoMetaAnnotationsReturnsMappings()",
      "head_type": "method",
      "relation": "have",
      "tail": "��取注解类型的映射",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenNoMetaAnnotationsReturnsMappings()",
      "head_type": "method",
      "relation": "have",
      "tail": "确保在没有元注解的情况下正确获取注解类型的映射",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenNoMetaAnnotationsReturnsMappings()",
      "head_type": "method",
      "relation": "have",
      "tail": "使用示例代码",
      "tail_type": "useSampleCode"
    },
    {
      "head": "使用示例代码",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "完整示例代码",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getAliasMappingsWhenHasDefinedAttributesReturnsMappedAttributes",
      "tail_type": "apiFunction"
    },
    {
      "head": "getAliasMappingsWhenHasDefinedAttributesReturnsMappedAttributes",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getAliasMappingsWhenHasDefinedAttributesReturnsMappedAttributes()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getAliasMappingsWhenHasDefinedAttributesReturnsMappedAttributes()",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationTypeMapping",
      "tail_type": "class"
    },
    {
      "head": "getAliasMappingsWhenHasDefinedAttributesReturnsMappedAttributes()",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationTypeMappings",
      "tail_type": "class"
    },
    {
      "head": "getAliasMappingsWhenHasDefinedAttributesReturnsMappedAttributes()",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.DefinedAttributes",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getMapping(AnnotationTypeMappings,Class<? extends Annotation>)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "getMapping",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getMapping(AnnotationTypeMappings,Class<? extends Annotation>)",
      "head_type": "method",
      "relation": "have",
      "tail": "getMappingSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getMappingSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "getMappingSampleCodeContent",
      "tail_type": "useSampleCodeContent"
    },
    {
      "head": "org.springframework.core.annotation.ClassWithLocalMetaAnnotationAndMetaAnnotatedInterface",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "metaAnnotationUsage",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.ClassWithLocalMetaAnnotationAndMetaAnnotatedInterface",
      "head_type": "class",
      "relation": "have",
      "tail": "metaAnnotationUsageSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.ClassWithLocalMetaAnnotationAndMetaAnnotatedInterface",
      "head_type": "class",
      "relation": "have",
      "tail": "metaAnnotationRelatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.ClassWithLocalMetaAnnotationAndMetaAnnotatedInterface",
      "head_type": "class",
      "relation": "have",
      "tail": "metaAnnotationDesignPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "tail": "metaMetaAnnotatedOnLeaf",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.Leaf#metaMetaAnnotatedOnLeaf()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "org.springframework.core.annotation.Leaf",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#metaMetaAnnotatedOnLeaf()",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "package"
    },
    {
      "tail": "metaMetaAnnotatedOnLeaf()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "method"
    },
    {
      "tail": "metaMetaAnnotatedOnLeaf",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "metaMetaAnnotatedOnLeaf()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "metaMetaAnnotatedOnLeaf()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "method"
    },
    {
      "tail": "org.springframework.core.annotation",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "package"
    },
    {
      "tail": "metaMetaAnnotatedOnLeaf()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "method"
    },
    {
      "tail": "org.springframework.core.annotation",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "package"
    },
    {
      "tail": "metaMetaAnnotatedOnLeaf()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "method"
    },
    {
      "tail": "org.springframework.core.annotation",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "package"
    },
    {
      "tail": "metaMetaAnnotatedOnLeaf()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "method"
    },
    {
      "tail": "org.springframework.core.annotation",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "package"
    },
    {
      "tail": "metaMetaAnnotatedOnLeaf()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "method"
    },
    {
      "tail": "org.springframework.core.annotation",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "package"
    },
    {
      "tail": "metaMetaAnnotatedOnLeaf()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "method"
    },
    {
      "tail": "org.springframework.core.annotation",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "package"
    },
    {
      "tail": "metaMetaAnnotatedOnLeaf()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "method"
    },
    {
      "tail": "org.springframework.core.annotation",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "package"
    },
    {
      "tail": "metaMetaAnnotatedOnLeaf()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "method"
    },
    {
      "tail": "org.springframework.core.annotation",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "package"
    },
    {
      "tail": "metaMetaAnnotatedOnLeaf()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "method"
    },
    {
      "tail": "org.springframework.core.annotation",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "package"
    },
    {
      "tail": "metaMetaAnnotatedOnLeaf()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "method"
    },
    {
      "tail": "org.springframework.core.annotation",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "package"
    },
    {
      "tail": "metaMetaAnnotatedOnLeaf()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "method"
    },
    {
      "tail": "org.springframework.core.annotation",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "package"
    },
    {
      "tail": "metaMetaAnnotatedOnLeaf()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "method"
    },
    {
      "tail": "org.springframework.core.annotation",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "package"
    },
    {
      "tail": "metaMetaAnnotatedOnLeaf()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "method"
    },
    {
      "tail": "org.springframework.core.annotation",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "package"
    },
    {
      "tail": "metaMetaAnnotatedOnLeaf()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "method"
    },
    {
      "tail": "org.springframework.core.annotation",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "package"
    },
    {
      "tail": "metaMetaAnnotatedOnLeaf()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "method"
    },
    {
      "tail": "org.springframework.core.annotation",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "package"
    },
    {
      "tail": "metaMetaAnnotatedOnLeaf()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "method"
    },
    {
      "tail": "org.springframework.core.annotation",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "package"
    },
    {
      "tail": "metaMetaAnnotatedOnLeaf()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "method"
    },
    {
      "tail": "org.springframework.core.annotation",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "package"
    },
    {
      "tail": "metaMetaAnnotatedOnLeaf()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "method"
    },
    {
      "tail": "org.springframework.core.annotation",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "package"
    },
    {
      "tail": "metaMetaAnnotatedOnLeaf()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "method"
    },
    {
      "tail": "org.springframework.core.annotation",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "package"
    },
    {
      "tail": "metaMetaAnnotatedOnLeaf()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "method"
    },
    {
      "tail": "org.springframework.core.annotation",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "package"
    },
    {
      "tail": "metaMetaAnnotatedOnLeaf()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "method"
    },
    {
      "tail": "org.springframework.core.annotation",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "package"
    },
    {
      "tail": "metaMetaAnnotatedOnLeaf()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "method"
    },
    {
      "tail": "org.springframework.core.annotation",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "package"
    },
    {
      "tail": "metaMetaAnnotatedOnLeaf()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "method"
    },
    {
      "tail": "org.springframework.core.annotation",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "package"
    },
    {
      "tail": "metaMetaAnnotatedOnLeaf()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "method"
    },
    {
      "tail": "org.springframework.core.annotation",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "package"
    },
    {
      "tail": "metaMetaAnnotatedOnLeaf()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "method"
    },
    {
      "tail": "org.springframework.core.annotation",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "package"
    },
    {
      "tail": "metaMetaAnnotatedOnLeaf()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "method"
    },
    {
      "tail": "org.springframework.core.annotation",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "package"
    },
    {
      "tail": "metaMetaAnnotatedOnLeaf()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "method"
    },
    {
      "tail": "org.springframework.core.annotation",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "package"
    },
    {
      "tail": "metaMetaAnnotatedOnLeaf()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "method"
    },
    {
      "tail": "org.springframework.core.annotation",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "package"
    },
    {
      "tail": "metaMetaAnnotatedOnLeaf()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "method"
    },
    {
      "tail": "org.springframework.core.annotation",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "package"
    },
    {
      "tail": "metaMetaAnnotatedOnLeaf()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "method"
    },
    {
      "tail": "org.springframework.core.annotation",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "package"
    },
    {
      "tail": "metaMetaAnnotatedOnLeaf()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "method"
    },
    {
      "tail": "org.springframework.core.annotation",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "package"
    },
    {
      "tail": "metaMetaAnnotatedOnLeaf()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "method"
    },
    {
      "tail": "org.springframework.core.annotation",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "package"
    },
    {
      "tail": "metaMetaAnnotatedOnLeaf()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "method"
    },
    {
      "tail": "org.springframework.core.annotation",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "package"
    },
    {
      "tail": "metaMetaAnnotatedOnLeaf()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "method"
    },
    {
      "tail": "org.springframework.core.annotation",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "package"
    },
    {
      "tail": "metaMetaAnnotatedOnLeaf()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "method"
    },
    {
      "tail": "org.springframework.core.annotation",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "package"
    },
    {
      "tail": "metaMetaAnnotatedOnLeaf()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "method"
    },
    {
      "tail": "org.springframework.core.annotation",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "package"
    },
    {
      "tail": "metaMetaAnnotatedOnLeaf()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "method"
    },
    {
      "tail": "org.springframework.core.annotation",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "package"
    },
    {
      "tail": "metaMetaAnnotatedOnLeaf()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf",
      "tail_type": "method"
    },
    {
      "head_type": "class",
      "head": "org.springframework.core.annotation.Leaf"
    },
    {
      "head": "org.springframework.core.annotation.WebController#handleMappedWithValueAttribute()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "handle web mapping with value attribute",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.WebController#handleMappedWithValueAttribute()",
      "head_type": "method",
      "relation": "have",
      "tail": "handle web mapping with value attribute sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "handle web mapping with value attribute sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "complete sample code for using handle web mapping with value attribute",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AliasForWithDuplicateAttributeDeclarationClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "aliasForWithDuplicateAttributeDeclaration",
      "tail_type": "apiFunction"
    },
    {
      "head": "aliasForWithDuplicateAttributeDeclaration",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "duplicateAttributeDeclarationConstraint",
      "tail_type": "useConstraint"
    },
    {
      "head": "aliasForWithDuplicateAttributeDeclaration",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "duplicateAttributeDeclarationScenario",
      "tail_type": "useScenario"
    },
    {
      "head": "aliasForWithDuplicateAttributeDeclaration",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "duplicateAttributeDeclarationSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "aliasForWithDuplicateAttributeDeclaration",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "aliasForWithDuplicateAttributeDeclaration",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AliasForWithDuplicateAttributeDeclarationClass",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AliasFor",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AliasForNonexistentAttributeClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "aliasForNonexistentAttribute",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AliasForNonexistentAttributeClass",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "annotationUsage",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.AliasForNonexistentAttributeClass",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "attributeMapping",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AliasForNonexistentAttributeClass",
      "head_type": "class",
      "relation": "have",
      "tail": "sampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AliasForNonexistentAttributeClass",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConcepts",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AliasForNonexistentAttributeClass",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrinciples",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AliasForNonexistentAttributeClass",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AliasFor",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.annotation.AnnotatedTypeTests#registerReflectionForMultipleTargets()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerReflectionHints",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.annotation.AnnotatedTypeTests#registerReflectionForMultipleTargets()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "assertReflectionHints",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.annotation.AnnotatedTypeTests#registerReflectionForMultipleTargets()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "mapTypeHints",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.annotation.AnnotatedTypeTests#registerReflectionForMultipleTargets()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "hasSameElementsAs",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.annotation.AnnotatedTypeTests#registerReflectionForMultipleTargets()",
      "head_type": "method",
      "relation": "have",
      "tail": "TypeReference.listOf(Number.class, Double.class, Integer.class, Float.class)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.annotation.AnnotatedTypeTests#registerReflectionForMultipleTargets()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.annotation.AnnotatedTypeTests#registerReflectionForMultipleTargets()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.annotation.AnnotatedTypeTests#registerReflectionForMultipleTargets()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.annotation.AnnotatedTypeTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SimplePojo",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getName",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SimplePojo",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "setName",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SimplePojo",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getDescription",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SimplePojo",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "setDescription",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SimplePojo",
      "head_type": "class",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SimplePojo",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SimplePojo",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SimpleReflectiveProcessorTests#registerReflectiveHintsForConstructor()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerReflectiveHints",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SimpleReflectiveProcessorTests#registerReflectiveHintsForConstructor()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerReflectiveHintsForConstructor() useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerReflectiveHintsForConstructor() useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "registerReflectiveHintsForConstructor() useSampleCode Content",
      "tail_type": "Content"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SimpleReflectiveProcessorTests#registerReflectiveHintsForConstructor()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "SampleBean",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SimpleReflectiveProcessorTests#registerReflectiveHintsForConstructor()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "processor",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SimpleReflectiveProcessorTests#registerReflectiveHintsForConstructor()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "hints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SimpleReflectiveProcessorTests#registerReflectiveHintsForConstructor()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "typeHint",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SimpleReflectiveProcessorTests#registerReflectiveHintsForConstructor()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "constructorHint",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SimpleReflectiveProcessorTests#registerReflectiveHintsForConstructor()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerReflectiveHintsForConstructor() relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "registerReflectiveHintsForConstructor() relatedConceptInterpretation",
      "head_type": "relatedConceptInterpretation",
      "relation": "have",
      "tail": "registerReflectiveHintsForConstructor() relatedConceptInterpretation Content",
      "tail_type": "Content"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SimpleReflectiveProcessorTests#registerReflectiveHintsForConstructor()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerReflectiveHintsForConstructor() designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "registerReflectiveHintsForConstructor() designPrincipleInterpretation",
      "head_type": "designPrincipleInterpretation",
      "relation": "have",
      "tail": "registerReflectiveHintsForConstructor() designPrincipleInterpretation Content",
      "tail_type": "Content"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registerReflectionHints",
      "tail_type": "apiFunction"
    },
    {
      "head": "registerReflectionHints",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "SampleEmptyClass",
      "tail_type": "class"
    },
    {
      "head": "registerReflectionHints",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "SampleExtendingClass",
      "tail_type": "class"
    },
    {
      "head": "registerReflectionHints",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "SampleClassWithNoProperty",
      "tail_type": "class"
    },
    {
      "head": "registerReflectionHints",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "SampleClassWithGetter",
      "tail_type": "class"
    },
    {
      "head": "registerReflectionHints",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "SampleClassWithSetter",
      "tail_type": "class"
    },
    {
      "head": "registerReflectionHints",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "SampleClassWithListProperty",
      "tail_type": "class"
    },
    {
      "head": "registerReflectionHints",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "SampleClassWithCycles",
      "tail_type": "class"
    },
    {
      "head": "registerReflectionHints",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "SampleClassWithResolvableType",
      "tail_type": "class"
    },
    {
      "head": "registerReflectionHints",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "SampleClassA",
      "tail_type": "class"
    },
    {
      "head": "registerReflectionHints",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "SampleEnum",
      "tail_type": "class"
    },
    {
      "head": "registerReflectionHints",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "SampleRecord",
      "tail_type": "class"
    },
    {
      "head": "registerReflectionHints",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "SampleRecordWithProperty",
      "tail_type": "class"
    },
    {
      "head": "registerReflectionHints",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "SampleClassWithJsonProperty",
      "tail_type": "class"
    },
    {
      "head": "registerReflectionHints",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "SampleClassWithInheritedJsonProperty",
      "tail_type": "class"
    },
    {
      "head": "registerReflectionHints",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "SampleRecordWithJacksonCustomStrategy",
      "tail_type": "class"
    },
    {
      "head": "registerReflectionHints",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "typeHints",
      "tail_type": "useConstraint"
    },
    {
      "head": "registerReflectionHints",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "registerReflectionHints",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "registerReflectionHints",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassWithCycles#getSampleClassWithCyclesList()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "getSampleClassWithCyclesList",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassWithCycles#getSampleClassWithCyclesList()",
      "head_type": "method",
      "relation": "have",
      "tail": "getSampleClassWithCyclesListSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getSampleClassWithCyclesListSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "getSampleClassWithCyclesListSampleCodeContent",
      "tail_type": "useSampleCodeContent"
    },
    {
      "head": "org.springframework.aot.hint.Builder",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "newInstance",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.Builder",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "name",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.Builder",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "build",
      "tail_type": "apiFunction"
    },
    {
      "head": "newInstance",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "name",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "build",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.Builder",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.Builder",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithNonJdkProxyHintIsFalse()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "proxiedInterfaces",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithNonJdkProxyHintIsFalse()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "TypeReference.of",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithNonJdkProxyHintIsFalse()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "assertThat().isNotEqualTo",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithNonJdkProxyHintIsFalse()",
      "head_type": "method",
      "relation": "have",
      "tail": "JdkProxyHint",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithNonJdkProxyHintIsFalse()",
      "head_type": "method",
      "relation": "have",
      "tail": "Builder",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithNonJdkProxyHintIsFalse()",
      "head_type": "method",
      "relation": "have",
      "tail": "TypeReference",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithNonJdkProxyHintIsFalse()",
      "head_type": "method",
      "relation": "have",
      "tail": "Function.class",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithNonJdkProxyHintIsFalse()",
      "head_type": "method",
      "relation": "have",
      "tail": "assertThat().isNotEqualTo(second)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "JdkProxyHint",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithNonJdkProxyHintIsFalse()",
      "tail_type": "method"
    },
    {
      "head": "Builder",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithNonJdkProxyHintIsFalse()",
      "tail_type": "method"
    },
    {
      "head": "TypeReference",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithNonJdkProxyHintIsFalse()",
      "tail_type": "method"
    },
    {
      "head": "Function.class",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithNonJdkProxyHintIsFalse()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithAnyMemberCategoryFailsWithNullCategories()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "type reflection",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithAnyMemberCategoryFailsWithNullCategories()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "null categories not allowed",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithAnyMemberCategoryFailsWithNullCategories()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "reflection type registration",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithAnyMemberCategoryFailsWithNullCategories()",
      "head_type": "method",
      "relation": "have",
      "tail": "void typeWithAnyMemberCategoryFailsWithNullCategories() {\n    runtimeHints.reflection().registerType(SampleClass.class, MemberCategory.INTROSPECT_PUBLIC_METHODS);\n    assertThatIllegalArgumentException().isThrownBy(() -> reflection.onType(SampleClass.class).withAnyMemberCategory(new MemberCategory[0]));\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithAnyMemberCategoryFailsWithNullCategories()",
      "head_type": "method",
      "relation": "have",
      "tail": "related concept interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithAnyMemberCategoryFailsWithNullCategories()",
      "head_type": "method",
      "relation": "have",
      "tail": "design principle interpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithAnyMemberCategoryFailsWithNullCategories()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.predicate.ReflectionOnType",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodInvocationDoesNotMatchIntrospectDeclaredMethods()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "introspectDeclaredMethods",
      "tail_type": "apiFunction"
    },
    {
      "head": "introspectDeclaredMethods",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "registerType(SampleClass.class, MemberCategory.INTROSPECT_DECLARED_METHODS)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "introspectDeclaredMethods",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "introspectDeclaredMethods",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "introspectDeclaredMethods",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "methodInvocationDoesNotMatchIntrospectDeclaredMethods()",
      "tail_type": "useScenario"
    },
    {
      "head": "introspectDeclaredMethods",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "runtimeHints.reflection().registerType() constraints",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodInvocationDoesNotMatchIntrospectPublicMethods()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "introspectPublicMethods",
      "tail_type": "apiFunction"
    },
    {
      "head": "introspectPublicMethods",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "introspectPublicMethods",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "introspectPublicMethods",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "introspectPublicMethods",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "privateMethodInvocationConstraint",
      "tail_type": "useConstraint"
    },
    {
      "head": "introspectPublicMethods",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "privateMethodInvocationScenario",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodInvocationDoesNotMatchIntrospectPublicMethods()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "SampleClass",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#resourcePatternMatchesTypeAndResourceName()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "register resource pattern",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#resourcePatternMatchesTypeAndResourceName()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "assert predicate matches",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#resourcePatternMatchesTypeAndResourceName()",
      "head_type": "method",
      "relation": "have",
      "tail": "org/springframework/aot/hint/predicate/spring.*",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#resourcePatternMatchesTypeAndResourceName()",
      "head_type": "method",
      "relation": "have",
      "tail": "resources.forResource(TypeReference.of(getClass()), \"spring.properties\")",
      "tail_type": "useSampleCode"
    },
    {
      "head": "register resource pattern",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "org/springframework/aot/hint/predicate/spring.*",
      "tail_type": "useSampleCode"
    },
    {
      "head": "assert predicate matches",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "resources.forResource(TypeReference.of(getClass()), \"spring.properties\")",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#resourcePatternMatchesTypeAndResourceName()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests",
      "head_type": "class",
      "relation": "have",
      "tail": "org.springframework.aot.hint.predicate",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests",
      "head_type": "class",
      "relation": "have",
      "tail": "JUnit test class for testing resource pattern matching",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.SecondInterface",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "void second()",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#registerType()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerType",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#registerType()",
      "head_type": "method",
      "relation": "have",
      "tail": "ResourceHintsTests",
      "tail_type": "class"
    },
    {
      "head": "registerType",
      "head_type": "apiFunction",
      "relation": "associated_with",
      "tail": "ResourceHintsTests",
      "tail_type": "class"
    },
    {
      "head": "ResourceHintsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "org.springframework.aot.hint.ResourceHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#registerType()",
      "head_type": "method",
      "relation": "have",
      "tail": "sample code for registering a type with resource hints",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#registerIfPresentRegisterExistingLocation()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerPatternIfPresent",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#registerIfPresentRegisterExistingLocation()",
      "head_type": "method",
      "relation": "have",
      "tail": "ResourceHintsTests_registerIfPresentRegisterExistingLocation_useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "ResourceHintsTests_registerIfPresentRegisterExistingLocation_useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.aot.hint.ResourceHintsTests#registerIfPresentRegisterExistingLocation()_useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.SerializationHintsTests#registerTypeTwiceExposesOneHint()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerTypeTwiceExposesOneHint",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.SerializationHintsTests#registerTypeTwiceExposesOneHint()",
      "head_type": "method",
      "relation": "have",
      "tail": "SerializationHintsTestsSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "SerializationHintsTestsSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "Complete Code Example for SerializationHintsTests",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#createWithConstructor()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "constructorHintGeneration",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#createWithConstructor()",
      "head_type": "method",
      "relation": "have",
      "tail": "constructorHintGenerationSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "constructorHintGenerationSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "constructorHintGenerationSampleCodeContent",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.TypeHint",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#createWithConstructor()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.TypeHint",
      "tail_type": "class"
    },
    {
      "head": "constructorHintGeneration",
      "head_type": "apiFunction",
      "relation": "related_to",
      "tail": "TypeHint",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "constructorHintGeneration",
      "head_type": "apiFunction",
      "relation": "design_principle",
      "tail": "flexibilityAndIntrospection",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#assertConstructorHint(Builder,Consumer<ExecutableHint>)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "constructorHint",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#assertConstructorHint(Builder,Consumer<ExecutableHint>)",
      "head_type": "method",
      "relation": "have",
      "tail": "void assertConstructorHint(Builder builder, Consumer<ExecutableHint> constructorHint) {\n    TypeHint hint = builder.build();\n    assertThat(hint.fields()).isEmpty();\n    assertThat(hint.constructors()).singleElement().satisfies(constructorHint);\n    assertThat(hint.methods()).isEmpty();\n    assertThat(hint.getMemberCategories()).isEmpty();\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#assertConstructorHint(Builder,Consumer<ExecutableHint>)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "TypeHint",
      "tail_type": "class"
    },
    {
      "head": "TypeHint",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "constructorHint",
      "tail_type": "apiFunction"
    },
    {
      "head": "TypeHint",
      "head_type": "class",
      "relation": "have",
      "tail": "void assertConstructorHint(Builder builder, Consumer<ExecutableHint> constructorHint) {\n    TypeHint hint = builder.build();\n    assertThat(hint.fields()).isEmpty();\n    assertThat(hint.constructors()).singleElement().satisfies(constructorHint);\n    assertThat(hint.methods()).isEmpty();\n    assertThat(hint.getMemberCategories()).isEmpty();\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "TypeHint",
      "head_type": "class",
      "relation": "have",
      "tail": "The TypeHint class is used to specify type hints for ahead-of-time (AOT) processing. It provides methods to assert the presence of specific hints such as fields, constructors, and methods. The assertConstructorHint method is used to assert that a specific constructor hint is present.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "TypeHint",
      "head_type": "class",
      "relation": "have",
      "tail": "The design principle behind the TypeHint class is to provide a flexible and extensible way to specify type hints for AOT processing. It allows developers to easily assert the presence of specific hints and ensures that the AOT processing is performed correctly.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests#writeWithEscapeBackspace()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "writeWithEscapeBackspace",
      "tail_type": "apiFunction"
    },
    {
      "head": "writeWithEscapeBackspace",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "writeWithEscapeBackspace() method in BasicJsonWriterTests",
      "tail_type": "useSampleCode"
    },
    {
      "head": "writeWithEscapeBackspace() method in BasicJsonWriterTests",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.aot.nativex.BasicJsonWriterTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "reflection registration",
      "tail_type": "apiFunction"
    },
    {
      "head": "reflection registration",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "registering types for reflection",
      "tail_type": "useScenario"
    },
    {
      "head": "reflection registration",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "sample code for reflection registration",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "sample code for reflection registration",
      "tail_type": "useSampleCode"
    },
    {
      "head": "reflection registration",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "type reachability conditions",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "RuntimeHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "design principle interpretation for reflection registration",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "related concept interpretation for reflection registration",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#assertGetMergedAnnotation(Class<?>,String)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "getMergedAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#assertGetMergedAnnotation(Class<?>,String)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "assertThat",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#assertGetMergedAnnotation(Class<?>,String)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "isAnnotated",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#assertGetMergedAnnotation(Class<?>,String)",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#assertGetMergedAnnotation(Class<?>,String)",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#assertGetMergedAnnotation(Class<?>,String)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#assertGetMergedAnnotation(Class<?>,String)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "ContextConfig",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationWithAttributeAliasesInTargetAnnotation()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "findMergedAnnotationWithAttributeAliasesInTargetAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationWithAttributeAliasesInTargetAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationWithAttributeAliasesInTargetAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "findMergedAnnotationWithAttributeAliasesInTargetAnnotation() useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "findMergedAnnotationWithAttributeAliasesInTargetAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "findMergedAnnotationWithAttributeAliasesInTargetAnnotation() useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "findMergedAnnotationWithAttributeAliasesInTargetAnnotation() useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "findMergedAnnotationWithAttributeAliasesInTargetAnnotation() useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationWithAttributeAliasesInTargetAnnotation()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#nullableAnnotationTypeViaFindMergedAnnotation()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "nullableAnnotationTypeViaFindMergedAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#nullableAnnotationTypeViaFindMergedAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#nullableAnnotationTypeViaFindMergedAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "findMergedAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#nullableAnnotationTypeViaFindMergedAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "method.getAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#nullableAnnotationTypeViaFindMergedAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "Resource.class",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#nullableAnnotationTypeViaFindMergedAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "TransactionalServiceImpl.class.getMethod",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#nullableAnnotationTypeViaFindMergedAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "TransactionalServiceImpl.class",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#nullableAnnotationTypeViaFindMergedAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "assertThat",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#nullableAnnotationTypeViaFindMergedAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "isEqual",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#nullableAnnotationTypeViaFindMergedAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "Resource",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#nullableAnnotationTypeViaFindMergedAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "findMergedAnnotation(method, Resource.class)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#nullableAnnotationTypeViaFindMergedAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "assertThat(findMergedAnnotation(method, Resource.class)).isEqual(method.getAnnotation(Resource.class))",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#nullableAnnotationTypeViaFindMergedAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#nullableAnnotationTypeViaFindMergedAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests#sortInstances()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "sortInstances",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests#sortInstances()",
      "head_type": "method",
      "relation": "have",
      "tail": "sortInstances useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "sortInstances useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "package org.springframework.core.annotation;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.Test;\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class AnnotationAwareOrderComparatorTests {\n\n    @Test\n    void sortInstances() {\n        List<Object> list = new ArrayList<>();\n        list.add(new B());\n        list.add(new A());\n        AnnotationAwareOrderComparator.sort(list);\n        assertThat(list).hasExactlyElementsOfTypes(A.class, B.class);\n    }\n\n    class A {}\n    class B {}\n}",
      "tail_type": "code"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenMetaAnnotationsReturnsMappings()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "getAnnotationTypeMappings",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenMetaAnnotationsReturnsMappings()",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotationTypeMapping",
      "tail_type": "class"
    },
    {
      "head": "getAnnotationTypeMappings",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "metaAnnotationScenarios",
      "tail_type": "useScenario"
    },
    {
      "head": "getAnnotationTypeMappings",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getAnnotationTypeMappingsSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getAnnotationTypeMappings",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "metaAnnotationConstraints",
      "tail_type": "useConstraint"
    },
    {
      "head": "getAnnotationTypeMappings",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "metaAnnotationConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "getAnnotationTypeMappings",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "metaAnnotationDesignPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenRepeatableMetaAnnotationIsFiltered()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "filter repeatable meta annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenRepeatableMetaAnnotationIsFiltered()",
      "head_type": "method",
      "relation": "have",
      "tail": "sample code for filtering repeatable meta annotations",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenRepeatableMetaAnnotationIsFiltered()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationTypeMappings",
      "tail_type": "class"
    },
    {
      "head": "filter repeatable meta annotations",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "repeatable meta annotations must be filtered correctly",
      "tail_type": "useConstraint"
    },
    {
      "head": "filter repeatable meta annotations",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "scenarios where repeatable meta annotations need to be filtered",
      "tail_type": "useScenario"
    },
    {
      "head": "sample code for filtering repeatable meta annotations",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "complete example of filtering repeatable meta annotations",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappings",
      "head_type": "class",
      "relation": "have",
      "tail": "related concepts in annotation type mappings",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappings",
      "head_type": "class",
      "relation": "have",
      "tail": "design principles of annotation type mappings",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasWithExplicitMirrorAndDifferentDefaults()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "AnnotationTypeMappings.forAnnotationType()",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasWithExplicitMirrorAndDifferentDefaults()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "AnnotationConfigurationException",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasWithExplicitMirrorAndDifferentDefaults()",
      "head_type": "method",
      "relation": "have",
      "tail": "Misconfigured aliases error message",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "AnnotationTypeMappings.forAnnotationType()",
      "head_type": "apiFunction",
      "relation": "associated_with",
      "tail": "AliasWithExplicitMirrorAndDifferentDefaults",
      "tail_type": "class"
    },
    {
      "head": "AliasWithExplicitMirrorAndDifferentDefaults",
      "head_type": "class",
      "relation": "have",
      "tail": "attributes 'a' and 'c' with different default values",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationFromGenericSuperclass()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "findMethodAnnotationFromGenericSuperclass",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationFromGenericSuperclass()",
      "head_type": "method",
      "relation": "have",
      "tail": "findMethodAnnotationFromGenericSuperclass() sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "findMethodAnnotationFromGenericSuperclass() sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationFromGenericSuperclass()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "class"
    },
    {
      "tail": "getRepeatableAnnotations",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#getRepeatableAnnotationsDeclaredOnClass()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "getRepeatableAnnotations sample code",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#getRepeatableAnnotationsDeclaredOnClass()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getRepeatableAnnotations sample code content",
      "head_type": "useSampleCode",
      "relation": "have",
      "head": "getRepeatableAnnotations sample code",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests#getRepeatableAnnotationsDeclaredOnClass()",
      "head_type": "class",
      "relation": "associated_with",
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.core.annotation.BaseClassWithGenericAnnotatedMethod#foo(T)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "abstractMethod",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.BaseClassWithGenericAnnotatedMethod#foo(T)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "genericMethod",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.BaseClassWithGenericAnnotatedMethod#foo(T)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "annotatedMethod",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.BaseClassWithGenericAnnotatedMethod#foo(T)",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "typeConstraint",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.BaseClassWithGenericAnnotatedMethod#foo(T)",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.BaseClassWithGenericAnnotatedMethod#foo(T)",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.BaseClassWithGenericAnnotatedMethod#foo(T)",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.BaseClassWithGenericAnnotatedMethod",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.BaseClassWithGenericAnnotatedMethod#foo(T)",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SimplePojo#getDescription()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "retrieve description",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SimplePojo#getDescription()",
      "head_type": "method",
      "relation": "have",
      "tail": "public String getDescription() { return this.description; }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SimplePojo",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.annotation.SimplePojo#getDescription()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithNoProperty()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerTypeForSerialization",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithNoProperty()",
      "head_type": "method",
      "relation": "have",
      "tail": "SampleClassWithNoProperty.class",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerTypeForSerialization",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "serialization with no property",
      "tail_type": "useScenario"
    },
    {
      "head": "registerTypeForSerialization",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "Serialization is the process of converting an object into a format that can be easily stored or transmitted, and then reconstructing it later. It is often used in various scenarios such as caching, session persistence, and cross-service communication. In this case, the apiFunction is used for serialization without properties, which may be applicable to simple objects that do not require additional state information during serialization.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "registerTypeForSerialization",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "The design principle followed here is to keep the serialization process as lightweight and efficient as possible by avoiding unnecessary property information. This aligns with the broader principle of minimizing overhead and optimizing performance, which is particularly important in scenarios where serialization is frequently performed.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForJacksonCustomStrategy()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerTypeForJacksonCustomStrategy",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForJacksonCustomStrategy()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "SampleRecordWithJacksonCustomStrategy",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForJacksonCustomStrategy()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "PropertyNamingStrategies.UpperSnakeCaseStrategy",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForJacksonCustomStrategy()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "SampleRecordWithJacksonCustomStrategy.Builder",
      "tail_type": "class"
    },
    {
      "head": "registerTypeForJacksonCustomStrategy",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "registerTypeForJacksonCustomStrategyUseSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerTypeForJacksonCustomStrategyUseSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "registerTypeForJacksonCustomStrategySampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassWithSetter#unmanaged()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "unmanaged",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassWithSetter#unmanaged()",
      "head_type": "method",
      "relation": "have",
      "tail": "public SampleEmptyClass unmanaged() {\n    return null;\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassWithSetter#unmanaged()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.SampleClassWithSetter",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassWithSetter",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "setter",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassWithSetter",
      "head_type": "class",
      "relation": "designPrincipleInterpretation",
      "tail": "This class seems to follow the principle of encapsulation by providing a setter method. Encapsulation is a fundamental concept in object-oriented programming that binds together the data and the methods that operate on that data, restricting direct access to some of an object's components.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassWithListProperty",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getNames",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassWithListProperty",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "setNames",
      "tail_type": "apiFunction"
    },
    {
      "head": "getNames",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "setNames",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesDeclaredFieldsHint()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "privateFieldAccessMatchesDeclaredFieldsHint",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesDeclaredFieldsHint()",
      "head_type": "method",
      "relation": "have",
      "tail": "privateFieldAccessMatchesDeclaredFieldsHintSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "privateFieldAccessMatchesDeclaredFieldsHintSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.aot.hint.predicate.ReflectionOnField",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesDeclaredFieldsHint()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.predicate.ReflectionOnField",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesAccessDeclaredFieldsHint()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "privateFieldAccessMatchesAccessDeclaredFieldsHint",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesAccessDeclaredFieldsHint()",
      "head_type": "method",
      "relation": "have",
      "tail": "privateFieldAccessMatchesAccessDeclaredFieldsHintSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "privateFieldAccessMatchesAccessDeclaredFieldsHintSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "privateFieldAccessMatchesAccessDeclaredFieldsHintSampleCodeContent",
      "tail_type": "useSampleCodeContent"
    },
    {
      "head": "org.springframework.aot.hint.predicate.SampleClass#publicMethod()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "public method",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.SampleClass#publicMethod()",
      "head_type": "method",
      "relation": "have",
      "tail": "public method sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.SampleClass#publicMethod()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.predicate.SampleClass",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.Inner",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "inner class handling",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.Inner",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "inner class must be static",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.aot.hint.Inner",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "used in reflection scenarios",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.Inner",
      "head_type": "class",
      "relation": "have",
      "tail": "org.springframework.aot.hint.Inner is used to handle inner classes in Spring's ahead-of-time processing.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.Inner",
      "head_type": "class",
      "relation": "have",
      "tail": "Design principle focuses on ensuring that inner classes are correctly handled during AOT processing to maintain application integrity.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.Inner",
      "head_type": "class",
      "relation": "have",
      "tail": "package org.springframework.aot.hint;\n\npublic class InnerExample {\n    public static class InnerClass {\n        public void doSomething() {\n            System.out.println(\"Doing something in inner class\");\n        }\n    }\n\n    public static void main(String[] args) {\n        InnerExample.InnerClass inner = new InnerExample.InnerClass();\n        inner.doSomething();\n    }\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "writeObject",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "writeObjectWithNestedObject",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "writeObjectWithNestedArrayOfString",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "writeObjectWithNestedArrayOfObject",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "writeObjectWithNestedEmptyArray",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "writeObjectWithNestedEmptyObject",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "writeWithEscapeDoubleQuote",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "writeWithEscapeBackslash",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "writeWithEscapeBackspace",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "writeWithEscapeFormFeed",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "writeWithEscapeNewline",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "writeWithEscapeCarriageReturn",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "writeWithEscapeTab",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "writeWithEscapeUnicode",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "writeWithTypeReferenceForSimpleClass",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "writeWithTypeReferenceForInnerClass",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "writeWithTypeReferenceForDoubleInnerClass",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "assertStringAttribute",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "orderedMap",
      "tail_type": "apiFunction"
    },
    {
      "head": "writeObject",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "writeObjectWithNestedObject",
      "tail_type": "useScenario"
    },
    {
      "head": "writeObject",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "writeObjectWithNestedArrayOfString",
      "tail_type": "useScenario"
    },
    {
      "head": "writeObject",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "writeObjectWithNestedArrayOfObject",
      "tail_type": "useScenario"
    },
    {
      "head": "writeObject",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "writeObjectWithNestedEmptyArray",
      "tail_type": "useScenario"
    },
    {
      "head": "writeObject",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "writeObjectWithNestedEmptyObject",
      "tail_type": "useScenario"
    },
    {
      "head": "writeWithEscapeDoubleQuote",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "writeWithEscapeBackslash",
      "tail_type": "useScenario"
    },
    {
      "head": "writeWithEscapeDoubleQuote",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "writeWithEscapeBackspace",
      "tail_type": "useScenario"
    },
    {
      "head": "writeWithEscapeDoubleQuote",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "writeWithEscapeFormFeed",
      "tail_type": "useScenario"
    },
    {
      "head": "writeWithEscapeDoubleQuote",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "writeWithEscapeNewline",
      "tail_type": "useScenario"
    },
    {
      "head": "writeWithEscapeDoubleQuote",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "writeWithEscapeCarriageReturn",
      "tail_type": "useScenario"
    },
    {
      "head": "writeWithEscapeDoubleQuote",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "writeWithEscapeTab",
      "tail_type": "useScenario"
    },
    {
      "head": "writeWithEscapeDoubleQuote",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "writeWithEscapeUnicode",
      "tail_type": "useScenario"
    },
    {
      "head": "writeWithTypeReferenceForSimpleClass",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "writeWithTypeReferenceForInnerClass",
      "tail_type": "useScenario"
    },
    {
      "head": "writeWithTypeReferenceForSimpleClass",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "writeWithTypeReferenceForDoubleInnerClass",
      "tail_type": "useScenario"
    },
    {
      "head": "assertStringAttribute",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "orderedMap",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "BasicJsonWriter",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#proxyConfig()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "proxy configuration",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#proxyConfig()",
      "head_type": "method",
      "relation": "have",
      "tail": "proxy configuration sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "proxy configuration sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "proxy configuration sample code content",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#proxyConfig()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.nativex.FileNativeConfigurationWriter",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#proxyConfig()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "RuntimeHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#proxyConfig()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "ProxyHints",
      "tail_type": "class"
    },
    {
      "head": "proxy configuration",
      "head_type": "apiFunction",
      "relation": "relatedConceptInterpretation",
      "tail": "proxy configuration explanation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "proxy configuration explanation",
      "head_type": "relatedConceptInterpretation",
      "relation": "have",
      "tail": "proxy configuration explanation content",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "proxy configuration",
      "head_type": "apiFunction",
      "relation": "designPrincipleInterpretation",
      "tail": "proxy configuration design principle",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "proxy configuration design principle",
      "head_type": "designPrincipleInterpretation",
      "relation": "have",
      "tail": "proxy configuration design principle content",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getAllAnnotationAttributesOnClassWithLocalComposedAnnotationAndInheritedAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "getAllAnnotationAttributesOnClassWithLocalComposedAnnotationAndInheritedAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getAllAnnotationAttributesFavorsInheritedComposedAnnotationsOverMoreLocallyDeclaredComposedAnnotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getAllAnnotationAttributesFavorsInheritedComposedAnnotationsOverMoreLocallyDeclaredComposedAnnotations()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "getAllAnnotationAttributesFavorsInheritedComposedAnnotationsOverMoreLocallyDeclaredComposedAnnotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getAllAnnotationAttributesFavorsInheritedComposedAnnotationsOverMoreLocallyDeclaredComposedAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "getAllAnnotationAttributesFavorsInheritedComposedAnnotationsOverMoreLocallyDeclaredComposedAnnotations() useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getAllAnnotationAttributesFavorsInheritedComposedAnnotationsOverMoreLocallyDeclaredComposedAnnotations()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnSubSubNonInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "findMergedAnnotationAttributes",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnSubSubNonInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtils",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnSubSubNonInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnSubSubNonInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnSubSubNonInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.SubTransactionalComponentClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "transactional component management",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.SubTransactionalComponentClass",
      "head_type": "class",
      "relation": "have",
      "tail": "used in scenarios where transactional components need to be managed",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.SubTransactionalComponentClass",
      "head_type": "class",
      "relation": "have",
      "tail": "related to Spring's transaction management",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SubTransactionalComponentClass",
      "head_type": "class",
      "relation": "have",
      "tail": "design principle focuses on transactional integrity and component isolation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAttributesTests#unresolvableClassWithLinkageError()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "unresolvableClassWithLinkageError",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAttributesTests#unresolvableClassWithLinkageError()",
      "head_type": "method",
      "relation": "have",
      "tail": "attributes.put(\"unresolvableClass\", new LinkageError(\"myclass\"));",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAttributesTests#unresolvableClassWithLinkageError()",
      "head_type": "method",
      "relation": "have",
      "tail": "assertThatIllegalArgumentException().isThrownBy(() -> attributes.getClass(\"unresolvableClass\")).withMessageContaining(\"myclass\").withCauseInstanceOf(LinkageError.class);",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAttributesTests#unresolvableClassWithLinkageError()",
      "head_type": "method",
      "relation": "have",
      "tail": "This method tests the behavior when a linkage error occurs while trying to resolve a class.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAttributesTests#unresolvableClassWithLinkageError()",
      "head_type": "method",
      "relation": "have",
      "tail": "The design principle here is to ensure that linkage errors are properly handled and reported.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnClassWhenHasInterfaceDoesNotIncludeInterfaces()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scan annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnClassWhenHasInterfaceDoesNotIncludeInterfaces()",
      "head_type": "method",
      "relation": "have",
      "tail": "void inheritedAnnotationsStrategyOnClassWhenHasInterfaceDoesNotIncludeInterfaces() {\n    Class<?> source = WithSingleInterface.class;\n    assertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\");\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnClassWhenHasInterfaceDoesNotIncludeInterfaces()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "scan annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests",
      "head_type": "class",
      "relation": "have",
      "tail": "related to scanning annotations on classes and interfaces",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests",
      "head_type": "class",
      "relation": "have",
      "tail": "design principle of efficiently scanning annotations",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnClassWhenHasSingleInterfaceScansInterfaces()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scanning annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnClassWhenHasSingleInterfaceScansInterfaces()",
      "head_type": "method",
      "relation": "have",
      "tail": "void typeHierarchyStrategyOnClassWhenHasSingleInterfaceScansInterfaces() {\n    Class<?> source = WithSingleInterface.class;\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\", \"1:TestAnnotation2\", \"1:TestInheritedAnnotation2\");\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnClassWhenHasSingleInterfaceScansInterfaces()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "scanning annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests",
      "head_type": "class",
      "relation": "have",
      "tail": "void typeHierarchyStrategyOnClassWhenHasSingleInterfaceScansInterfaces() {\n    Class<?> source = WithSingleInterface.class;\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\", \"1:TestAnnotation2\", \"1:TestInheritedAnnotation2\");\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWithIgnorablesScansAnnotations()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scanning annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWithIgnorablesScansAnnotations()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "method with ignorables",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWithIgnorablesScansAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "void typeHierarchyStrategyOnMethodWithIgnorablesScansAnnotations() {\n    Method source = methodFrom(Ignorable.class);\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\");\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWithIgnorablesScansAnnotations()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "scanning annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "method with ignorables",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests",
      "head_type": "class",
      "relation": "have",
      "tail": "void typeHierarchyStrategyOnMethodWithIgnorablesScansAnnotations() {\n    Method source = methodFrom(Ignorable.class);\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\");\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.WithNoAnnotations#method()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "org.springframework.core.annotation.WithNoAnnotations#method()",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.WithSingleInterface#method()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "testFunctionality",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.WithSingleInterface#method()",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.core.annotation.WithSingleInterface",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.WithSingleInterface#method()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.WithSingleInterface#method()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.WithSingleInterface#method()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.Hello2Impl#method()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "org.springframework.core.annotation.Hello2Impl#method()",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.Hello2Impl#method()",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.core.annotation.Hello2Impl#method()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.HierarchySuperSuperclass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "org.springframework.core.annotation.HierarchySuperSuperclass",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.HierarchySuperSuperclass",
      "head_type": "class",
      "relation": "have",
      "tail": "org.springframework.core.annotation.HierarchySuperSuperclass",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.HierarchySuperSuperclass",
      "head_type": "class",
      "relation": "have",
      "tail": "org.springframework.core.annotation.HierarchySuperSuperclass",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.HierarchySuperSuperclass",
      "head_type": "class",
      "relation": "have",
      "tail": "org.springframework.core.annotation.HierarchySuperSuperclass",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.Ignorable#method()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "testMethod",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.Ignorable#method()",
      "head_type": "method",
      "relation": "have",
      "tail": "testMethodSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.Ignorable#method()",
      "head_type": "method",
      "relation": "have",
      "tail": "testMethodRelatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.Ignorable#method()",
      "head_type": "method",
      "relation": "have",
      "tail": "testMethodDesignPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.Ignorable#method()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.Ignorable",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenFormsLoopReturnsMapping()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "annotation type mapping",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenFormsLoopReturnsMapping()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "loop formation",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenFormsLoopReturnsMapping()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "loop detection",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenFormsLoopReturnsMapping()",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenFormsLoopReturnsMapping() sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenFormsLoopReturnsMapping()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationTypeMapping",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenFormsLoopReturnsMapping()",
      "head_type": "method",
      "relation": "have",
      "tail": "related concept interpretation for org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenFormsLoopReturnsMapping()",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenFormsLoopReturnsMapping()",
      "head_type": "method",
      "relation": "have",
      "tail": "design principle interpretation for org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenFormsLoopReturnsMapping()",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getMirrorSetWhenAliasPairReturnsMirrors",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMirrorSetWhenAliasPairReturnsMirrors",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getMirrorSetWhenAliasPairReturnsMirrors()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getMirrorSetWhenAliasPairReturnsMirrors()",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationTypeMapping",
      "tail_type": "class"
    },
    {
      "head": "getMirrorSetWhenAliasPairReturnsMirrors()",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.MirrorSets",
      "tail_type": "class"
    },
    {
      "head": "getMirrorSetWhenAliasPairReturnsMirrors()",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AliasPair",
      "tail_type": "class"
    },
    {
      "head": "getMirrorSetWhenAliasPairReturnsMirrors()",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationTypeMappings",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationTypeMapping",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.MirrorSets",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AliasPair",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationTypeMappings",
      "tail_type": "class"
    },
    {
      "head": "getMirrorSetWhenAliasPairReturnsMirrors",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "getMirrorSetWhenAliasPairReturnsMirrors",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNestedAnnotationAndExtractedValuesMatchReturnsTrueAndValueSuppliedAsTypeMappedAnnotation()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "type mapped annotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNestedAnnotationAndExtractedValuesMatchReturnsTrueAndValueSuppliedAsTypeMappedAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "type mapped annotation",
      "tail_type": "useSampleCode"
    },
    {
      "head": "type mapped annotation",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNestedAnnotationAndExtractedValuesMatchReturnsTrueAndValueSuppliedAsTypeMappedAnnotation()",
      "tail_type": "method"
    },
    {
      "head": "type mapped annotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "related concept interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "type mapped annotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "design principle interpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationOnRootButOverridden()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "findMethodAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationOnRootButOverridden()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "overrideAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationOnRootButOverridden()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "annotationRetrieval",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationOnRootButOverridden()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "methodExistence",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationOnRootButOverridden()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "annotationInheritance",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationOnRootButOverridden()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "annotationTesting",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationOnRootButOverridden()",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationOnRootButOverridden()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationOnRootButOverridden()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationOnRootButOverridden()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationUtils",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationOnBridgedMethod()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "find method annotation on bridged method",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationOnBridgedMethod()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "SimpleFoo",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationOnBridgedMethod()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "Order",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationOnBridgedMethod()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "Transactional",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationOnBridgedMethod()",
      "head_type": "method",
      "relation": "have",
      "tail": "sample code for finding method annotation on bridged method",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationOnBridgedMethod()",
      "head_type": "method",
      "relation": "have",
      "tail": "related concept interpretation for finding method annotation on bridged method",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationOnBridgedMethod()",
      "head_type": "method",
      "relation": "have",
      "tail": "design principle interpretation for finding method annotation on bridged method",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnMetaMetaMetaAnnotatedClass()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "findClassAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnMetaMetaMetaAnnotatedClass()",
      "head_type": "method",
      "relation": "have",
      "tail": "Should find meta-annotation on meta-annotation on composed annotation on class",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnMetaMetaMetaAnnotatedClass()",
      "head_type": "method",
      "relation": "have",
      "tail": "component.value() should be equal to meta2",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnMetaMetaMetaAnnotatedClass()",
      "head_type": "method",
      "relation": "have",
      "tail": "package org.springframework.core.annotation; import org.springframework.stereotype.Component; import static org.springframework.core.annotation.AnnotationUtils.findAnnotation; import static org.junit.Assert.assertThat; import org.junit.Test; public class AnnotationUtilsTests { @Test void findClassAnnotationOnMetaMetaMetaAnnotatedClass() { Component component = findAnnotation(MetaMetaMetaAnnotatedClass.class, Component.class); assertThat(component).as(\"Should find meta-annotation on meta-annotation on composed annotation on class\").isNotNull(); assertThat(component.value()).isEqualTo(\"meta2\"); } }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnMetaMetaMetaAnnotatedClass()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationUtils",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#getRepeatableAnnotationsDeclaredOnSuperclass()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "getRepeatableAnnotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#getRepeatableAnnotationsDeclaredOnSuperclass()",
      "head_type": "method",
      "relation": "have",
      "tail": "getRepeatableAnnotations sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getRepeatableAnnotations sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "getRepeatableAnnotations sample code content",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests#getRepeatableAnnotationsDeclaredOnSuperclass()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithAttributeOfIncorrectType()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "synthesizeAnnotationFromMap",
      "tail_type": "apiFunction"
    },
    {
      "head": "synthesizeAnnotationFromMap",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "attributeTypeCompatibility",
      "tail_type": "useConstraint"
    },
    {
      "head": "synthesizeAnnotationFromMap",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "annotationAttributeTypeMismatch",
      "tail_type": "useScenario"
    },
    {
      "head": "synthesizeAnnotationFromMap",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "synthesizeAnnotationFromMap",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "synthesizeAnnotationFromMap",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "synthesizeAnnotationFromMap",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromAnnotationAttributesWithoutAttributeAliases()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "synthesizeAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromAnnotationAttributesWithoutAttributeAliases()",
      "head_type": "method",
      "relation": "have",
      "tail": "Get an annotation",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromAnnotationAttributesWithoutAttributeAliases()",
      "head_type": "method",
      "relation": "have",
      "tail": "Convert the annotation into AnnotationAttributes",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromAnnotationAttributesWithoutAttributeAliases()",
      "head_type": "method",
      "relation": "have",
      "tail": "Synthesize the AnnotationAttributes back into an annotation",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromAnnotationAttributesWithoutAttributeAliases()",
      "head_type": "method",
      "relation": "have",
      "tail": "Verify that the original and synthesized annotations are equivalent",
      "tail_type": "useSampleCode"
    },
    {
      "head": "synthesizeAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "Get an annotation",
      "tail_type": "useSampleCode"
    },
    {
      "head": "synthesizeAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "Convert the annotation into AnnotationAttributes",
      "tail_type": "useSampleCode"
    },
    {
      "head": "synthesizeAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "Synthesize the AnnotationAttributes back into an annotation",
      "tail_type": "useSampleCode"
    },
    {
      "head": "synthesizeAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "Verify that the original and synthesized annotations are equivalent",
      "tail_type": "useSampleCode"
    },
    {
      "head": "synthesizeAnnotation",
      "head_type": "apiFunction",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "synthesizeAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.Root",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "annotatedOnRoot",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.Root",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "metaAnnotatedOnRoot",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.Root",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "overrideToAnnotate",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.Root",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "overrideWithoutNewAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.Root",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "notAnnotated",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.Root",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "fromInterfaceImplementedByRoot",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.Root",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.Root",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AliasForWithMissingDefaultValuesClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "aliasing",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AliasForWithMissingDefaultValuesClass",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "default value presence",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.AliasForWithMissingDefaultValuesClass",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "annotation usage",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AliasForWithMissingDefaultValuesClass",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AliasForWithMissingDefaultValuesClass",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AliasForWithMissingDefaultValuesClass",
      "head_type": "class",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SimpleReflectiveProcessorTests#registerReflectiveHintsForClass()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerReflectiveHints",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SimpleReflectiveProcessorTests#registerReflectiveHintsForClass()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerReflectiveHintsForClass() useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerReflectiveHintsForClass() useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "registerReflectiveHintsForClass() useSampleCode Content",
      "tail_type": "Content"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SimpleReflectiveProcessorTests#registerReflectiveHintsForClass()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.annotation.SimpleReflectiveProcessorTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithGetter()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerTypeForSerializationWithGetter",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithGetter()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerTypeForSerializationWithGetterSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerTypeForSerializationWithGetterSampleCode",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithGetter()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithGetter()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "SampleClassWithGetter",
      "tail_type": "class"
    },
    {
      "head": "registerTypeForSerializationWithGetter",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "serializationWithGetterScenario",
      "tail_type": "useScenario"
    },
    {
      "head": "registerTypeForSerializationWithGetter",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "serializationWithGetterConstraint",
      "tail_type": "useConstraint"
    },
    {
      "head": "registerTypeForSerializationWithGetter",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "serializationWithGetterRelatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "registerTypeForSerializationWithGetter",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "serializationWithGetterDesignPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.ExecutableModeTests#introspectIncludesIntrospect()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "introspection",
      "tail_type": "apiFunction"
    },
    {
      "head": "introspection",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "ExecutableMode.INTROSPECT.includes(ExecutableMode.INTROSPECT)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "introspection",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "must use ExecutableMode enum",
      "tail_type": "useConstraint"
    },
    {
      "head": "introspection",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "checking if one ExecutableMode includes another",
      "tail_type": "useScenario"
    },
    {
      "head": "introspection",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "related to reflection and method handling",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "introspection",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "design principle of encapsulation and modularity",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.ExecutableModeTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "introspection",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodInvocationMatchesInvokeDeclaredMethods()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "privateMethodInvocation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodInvocationMatchesInvokeDeclaredMethods()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "methodVisibilityConstraint",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodInvocationMatchesInvokeDeclaredMethods()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "reflectionHintRegistration",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodInvocationMatchesInvokeDeclaredMethods()",
      "head_type": "method",
      "relation": "have",
      "tail": "reflectionHintRegistrationSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodInvocationMatchesInvokeDeclaredMethods()",
      "head_type": "method",
      "relation": "have",
      "tail": "reflectionHintRegistrationConcept",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodInvocationMatchesInvokeDeclaredMethods()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleForReflectionHints",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodInvocationMatchesInvokeDeclaredMethods()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "SampleClass",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#publicFieldAccessMatchesPublicFieldsHint()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "publicFieldAccess",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#publicFieldAccessMatchesPublicFieldsHint()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "fieldAccessibility",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#publicFieldAccessMatchesPublicFieldsHint()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "runtimeHintRegistration",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#publicFieldAccessMatchesPublicFieldsHint()",
      "head_type": "method",
      "relation": "have",
      "tail": "runtimeHints.reflection().registerType(SampleClass.class, MemberCategory.PUBLIC_FIELDS); assertPredicateMatches(reflection.onField(SampleClass.class, \"publicField\"));",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#publicFieldAccessMatchesPublicFieldsHint()",
      "head_type": "method",
      "relation": "have",
      "tail": "This method is used to assert that the public field access matches the public fields hint.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#publicFieldAccessMatchesPublicFieldsHint()",
      "head_type": "method",
      "relation": "have",
      "tail": "The method follows the principle of ensuring that reflection hints are correctly applied to public fields.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#publicFieldAccessMatchesPublicFieldsHint()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "SampleClass",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#patternOf(List<String>,List<String>)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "pattern matching",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#patternOf(List<String>,List<String>)",
      "head_type": "method",
      "relation": "have",
      "tail": "private Consumer<ResourcePatternHints> patternOf(List<String> includes, List<String> excludes) {\n    return pattern -> assertThat(pattern.getIncludes()).map(ResourcePatternHint::getPattern).containsExactlyInAnyOrderElementsOf(includes);\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#patternOf(List<String>,List<String>)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "ResourceHintsTests",
      "tail_type": "class"
    },
    {
      "head": "ResourceHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "resource pattern hint testing",
      "tail_type": "apiFunction"
    },
    {
      "head": "ResourceHintsTests",
      "head_type": "class",
      "relation": "designPrincipleInterpretation",
      "tail": "This class is designed to test the functionality of resource pattern hints in Spring AOT, ensuring that the pattern matching works correctly.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.RuntimeHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "reflectionHintWithClass",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.RuntimeHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "resourceHintWithClass",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.RuntimeHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "javaSerializationHintWithClass",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.RuntimeHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "jdkProxyWithClass",
      "tail_type": "apiFunction"
    },
    {
      "head": "reflectionHintWithClass",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "registerType(String.class, MemberCategory.INVOKE_PUBLIC_CONSTRUCTORS)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "resourceHintWithClass",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "registerType(String.class)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "javaSerializationHintWithClass",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "registerType(String.class)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "jdkProxyWithClass",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "registerJdkProxy(Function.class)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.RuntimeHintsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "RuntimeHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.RuntimeHintsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.RuntimeHintsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#emptyConfig()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "generate empty configuration",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#emptyConfig()",
      "head_type": "method",
      "relation": "have",
      "tail": "void emptyConfig() {\n    Path empty = tempDir.resolve(\"empty\");\n    FileNativeConfigurationWriter generator = new FileNativeConfigurationWriter(empty);\n    generator.write(new RuntimeHints());\n    assertThat(empty.toFile().listFiles()).isNull();\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#emptyConfig()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.nativex.FileNativeConfigurationWriter",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#emptyConfig()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#emptyConfig()",
      "head_type": "method",
      "relation": "have",
      "tail": "This method tests the generation of an empty configuration file using the FileNativeConfigurationWriter class.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#emptyConfig()",
      "head_type": "method",
      "relation": "have",
      "tail": "The design principle behind this method is to ensure that the FileNativeConfigurationWriter can handle scenarios where an empty configuration needs to be generated and written to a file.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#ignoreLambda()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "ignoreLambda",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#ignoreLambda()",
      "head_type": "method",
      "relation": "have",
      "tail": "Runnable anonymousRunnable = () -> ;",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#ignoreLambda()",
      "head_type": "method",
      "relation": "have",
      "tail": "Registering a lambda function for reflection",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#ignoreLambda()",
      "head_type": "method",
      "relation": "have",
      "tail": "JUnit test method",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getMergedAnnotationAttributesOnNonInheritedAnnotationInterface()",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedAnnotationAttributesOnNonInheritedAnnotationInterface()",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getMergedAnnotationAttributesOnNonInheritedAnnotationInterface() useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getMergedAnnotationAttributesOnNonInheritedAnnotationInterface() useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests getMergedAnnotationAttributesOnNonInheritedAnnotationInterface() sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getMergedAnnotationAttributesWithAliasedComposedAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedAnnotationAttributesWithAliasedComposedAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getMergedAnnotationAttributesWithAliasedComposedAnnotation()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getMergedAnnotationAttributesWithAliasedComposedAnnotation()",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "getMergedAnnotationAttributesWithAliasedComposedAnnotation()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getMergedAnnotationWithImplicitAliasesWithDefaultsInMetaAnnotationOnComposedAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedAnnotationWithImplicitAliasesWithDefaultsInMetaAnnotationOnComposedAnnotation",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "getMergedAnnotationWithImplicitAliasesWithDefaultsInMetaAnnotationOnComposedAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnMethodWithComposedMetaTransactionalAnnotation()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "findMergedAnnotationAttributes",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnMethodWithComposedMetaTransactionalAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "sample code for using findMergedAnnotationAttributes",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnMethodWithComposedMetaTransactionalAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "related concept interpretation for findMergedAnnotationAttributes",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnMethodWithComposedMetaTransactionalAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "design principle interpretation for findMergedAnnotationAttributes",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnMethodWithComposedMetaTransactionalAnnotation()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnMethodWithComposedMetaTransactionalAnnotation()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "none",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnMethodWithComposedMetaTransactionalAnnotation()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "none",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.ConventionBasedAnnotationAttributeOverrideTests#findMergedAnnotationAttributesWithSingleElementOverridingAnArrayViaConvention()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "findMergedAnnotationAttributes",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.ConventionBasedAnnotationAttributeOverrideTests#findMergedAnnotationAttributesWithSingleElementOverridingAnArrayViaConvention()",
      "head_type": "method",
      "relation": "have",
      "tail": "assertComponentScanAttributes usage",
      "tail_type": "useSampleCode"
    },
    {
      "head": "assertComponentScanAttributes usage",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "ConventionBasedSinglePackageComponentScanClass",
      "tail_type": "class"
    },
    {
      "head": "assertComponentScanAttributes usage",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "com.example.app.test",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.MetaAndLocalTxConfigClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "transaction management",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.MetaAndLocalTxConfigClass",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "ensuring proper transaction propagation",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.MetaAndLocalTxConfigClass",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "configuring transactional behavior in Spring applications",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.MetaAndLocalTxConfigClass",
      "head_type": "class",
      "relation": "have",
      "tail": "sample code for transaction configuration",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.MetaAndLocalTxConfigClass",
      "head_type": "class",
      "relation": "have",
      "tail": "interpretation of related concepts in transaction management",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.MetaAndLocalTxConfigClass",
      "head_type": "class",
      "relation": "have",
      "tail": "design principles behind transaction management configuration",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.MetaAndLocalTxConfigClass",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.transaction.annotation.Transactional",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAttributesTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getAliasedStringArrayWithImplicitAliases()",
      "tail_type": "apiFunction"
    },
    {
      "head": "getAliasedStringArrayWithImplicitAliases()",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "multiple aliases for a single name",
      "tail_type": "useScenario"
    },
    {
      "head": "getAliasedStringArrayWithImplicitAliases()",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "complete sample code",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "getAliasedStringArrayWithImplicitAliases()",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "relatedConceptInterpretation",
      "head_type": "relatedConceptInterpretation",
      "relation": "have",
      "tail": "detailed description",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "getAliasedStringArrayWithImplicitAliases()",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAttributesTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.SimpleAliasRegistryTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationIntrospectionFailureTests#filteredTypeInMetaAnnotationWhenUsingAnnotatedElementUtilsHandlesException()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "filteredTypeInMetaAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationIntrospectionFailureTests#filteredTypeInMetaAnnotationWhenUsingAnnotatedElementUtilsHandlesException()",
      "head_type": "method",
      "relation": "have",
      "tail": "void filteredTypeInMetaAnnotationWhenUsingAnnotatedElementUtilsHandlesException() throws Exception",
      "tail_type": "useSampleCode"
    },
    {
      "head": "void filteredTypeInMetaAnnotationWhenUsingAnnotatedElementUtilsHandlesException() throws Exception",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationIntrospectionFailureTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationIntrospectionFailureTests#filteredTypeInMetaAnnotationWhenUsingAnnotatedElementUtilsHandlesException()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationIntrospectionFailureTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationIntrospectionFailureTests",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationIntrospectionFailureTests",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#scanWhenProcessorHasFinishMethodUsesFinishResult()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scan",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#scanWhenProcessorHasFinishMethodUsesFinishResult()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "process annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#scanWhenProcessorHasFinishMethodUsesFinishResult()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "assert results",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#scanWhenProcessorHasFinishMethodUsesFinishResult()",
      "head_type": "method",
      "relation": "have",
      "tail": "sample code for scanning annotations and processing results",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#scanWhenProcessorHasFinishMethodUsesFinishResult()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#scanWhenProcessorHasFinishMethodUsesFinishResult()",
      "head_type": "method",
      "relation": "have",
      "tail": "related concept interpretation for annotation scanning and processing",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#scanWhenProcessorHasFinishMethodUsesFinishResult()",
      "head_type": "method",
      "relation": "have",
      "tail": "design principle interpretation for method with finish processing",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#scan(AnnotatedElement,SearchStrategy)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scan",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#scan(AnnotatedElement,SearchStrategy)",
      "head_type": "method",
      "relation": "have",
      "tail": "private Stream<String> scan(AnnotatedElement element, SearchStrategy searchStrategy) { return scan(element, searchStrategy, Search.never); }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#scan(AnnotatedElement,SearchStrategy)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.GenericNonOverride#method(StringBuilder)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "testAnnotationUsage",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.GenericNonOverride#method(StringBuilder)",
      "head_type": "method",
      "relation": "have",
      "tail": "testAnnotationUsageSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.GenericNonOverride#method(StringBuilder)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.GenericNonOverride",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForToOtherNonExistingAttribute()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "Annotation Type Mapping",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForToOtherNonExistingAttribute()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "Alias For Non Existing Attribute",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForToOtherNonExistingAttribute()",
      "head_type": "method",
      "relation": "have",
      "tail": "Annotation Configuration Exception Handling",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForToOtherNonExistingAttribute()",
      "head_type": "method",
      "relation": "have",
      "tail": "Design Principle for Annotation Mapping",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForToOtherNonExistingAttribute()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationTypeMappings",
      "tail_type": "class"
    },
    {
      "head": "Annotation Configuration Exception Handling",
      "head_type": "relatedConceptInterpretation",
      "relation": "have",
      "tail": "Handling exceptions when annotation configuration is incorrect.",
      "tail_type": "useSampleCode"
    },
    {
      "head": "Design Principle for Annotation Mapping",
      "head_type": "designPrincipleInterpretation",
      "relation": "have",
      "tail": "Ensure proper annotation mapping and handle exceptions effectively.",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForHasMixedImplicitAndExplicitAliases()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "assertMixedImplicitAndExplicitAliases",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForHasMixedImplicitAndExplicitAliases()",
      "head_type": "method",
      "relation": "have",
      "tail": "AliasForWithMixedImplicitAndExplicitAliasesV1",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForHasMixedImplicitAndExplicitAliases()",
      "head_type": "method",
      "relation": "have",
      "tail": "AliasForWithMixedImplicitAndExplicitAliasesV2",
      "tail_type": "class"
    },
    {
      "head": "AliasForWithMixedImplicitAndExplicitAliasesV1",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForHasMixedImplicitAndExplicitAliases()",
      "tail_type": "method"
    },
    {
      "head": "AliasForWithMixedImplicitAndExplicitAliasesV2",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForHasMixedImplicitAndExplicitAliases()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getDefaultValueFromAnnotation()",
      "tail_type": "apiFunction"
    },
    {
      "head": "getDefaultValueFromAnnotation()",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getDefaultValueFromAnnotation() useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getDefaultValueFromAnnotation() useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "package org.springframework.core.annotation; import java.lang.annotation.*; import org.springframework.core.Ordered; import org.springframework.core.annotation.Order; public class AnnotationUtilsTests { @Test void getDefaultValueFromAnnotation() throws Exception { Method method = SimpleFoo.class.getMethod(\"something\", Object.class); Order order = findAnnotation(method, Order.class); assertThat(getDefaultValue(order, VALUE)).isEqualTo(Ordered.LOWEST_PRECEDENCE); assertThat(getDefaultValue(order)).isEqualTo(Ordered.LOWEST_PRECEDENCE); } }",
      "tail_type": "String"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "SimpleFoo",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "Ordered",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "Order",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getRepeatableAnnotationsDeclaredOnClassWithAttributeAliases",
      "tail_type": "apiFunction"
    },
    {
      "head": "getRepeatableAnnotationsDeclaredOnClassWithAttributeAliases",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getRepeatableAnnotationsDeclaredOnClassWithAttributeAliases()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getRepeatableAnnotationsDeclaredOnClassWithAttributeAliases()",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "getRepeatableAnnotationsDeclaredOnClassWithAttributeAliases()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.Root#notAnnotated()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "notAnnotated",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.Root#notAnnotated()",
      "head_type": "method",
      "relation": "have",
      "tail": "notAnnotated sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.Root#notAnnotated()",
      "head_type": "method",
      "relation": "have",
      "tail": "notAnnotated related concept interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.Root#notAnnotated()",
      "head_type": "method",
      "relation": "have",
      "tail": "notAnnotated design principle interpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.Foo",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "abstract method execution",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.Foo",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "method parameter type constraint",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.Foo",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "method annotation with order",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.Foo",
      "head_type": "class",
      "relation": "have",
      "tail": "related concept interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.Foo",
      "head_type": "class",
      "relation": "have",
      "tail": "design principle interpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.Foo",
      "head_type": "class",
      "relation": "have",
      "tail": "sample code for abstract method",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.SimpleFoo#something(String)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "transactional operation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.SimpleFoo#something(String)",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "ensuring transaction integrity",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.SimpleFoo#something(String)",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "database transaction management",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.SimpleFoo#something(String)",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.transaction.annotation.Transactional",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.SimpleFoo#something(String)",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SimpleFoo#something(String)",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SimpleFoo#something(String)",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.SubOfAbstractImplementsInterfaceWithAnnotatedMethod",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "foo() method override",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.SubOfAbstractImplementsInterfaceWithAnnotatedMethod",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SubOfAbstractImplementsInterfaceWithAnnotatedMethod",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SubOfAbstractImplementsInterfaceWithAnnotatedMethod",
      "head_type": "class",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "foo method override",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "class",
      "relation": "have",
      "tail": "foo method override sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.InterfaceWithRepeated",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "repeatable annotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.InterfaceWithRepeated",
      "head_type": "class",
      "relation": "have",
      "tail": "repeatable annotation sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "repeatable annotation sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "@MyRepeatable(\"A\")\n@MyRepeatableContainer({ @MyRepeatable(\"B\"), @MyRepeatable(\"C\") })\n@MyRepeatableMeta1\nvoid foo();",
      "tail_type": "useSampleCode"
    },
    {
      "head": "repeatable annotation",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "container annotation must directly contain all repeatable instances",
      "tail_type": "useConstraint"
    },
    {
      "head": "repeatable annotation",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "method annotations",
      "tail_type": "useScenario"
    },
    {
      "head": "repeatable annotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "related concept interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "repeatable annotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "design principle interpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "related concept interpretation",
      "head_type": "relatedConceptInterpretation",
      "relation": "have",
      "tail": "Repeatable annotations provide a way to apply the same annotation multiple times to a single element.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "design principle interpretation",
      "head_type": "designPrincipleInterpretation",
      "relation": "have",
      "tail": "Repeatable annotations simplify the use of annotations that are intended to be applied multiple times by encapsulating them in a container annotation.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AliasForWithoutMirroredAliasForClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "AliasForWithoutMirroredAliasFor",
      "tail_type": "apiFunction"
    },
    {
      "head": "AliasForWithoutMirroredAliasFor",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "Circular Aliases Prohibited",
      "tail_type": "useConstraint"
    },
    {
      "head": "AliasForWithoutMirroredAliasFor",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "Multiple Aliases for a Single Name",
      "tail_type": "useScenario"
    },
    {
      "head": "AliasForWithoutMirroredAliasFor",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "Complete Sample Code for AliasForWithoutMirroredAliasFor",
      "tail_type": "useSampleCode"
    },
    {
      "head": "AliasForWithoutMirroredAliasFor",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "Detailed Explanation of AliasForWithoutMirroredAliasFor",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "AliasForWithoutMirroredAliasFor",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "Design Principles of AliasForWithoutMirroredAliasFor",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AliasForWithoutMirroredAliasForClass",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.SimpleAliasRegistryTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests#setup()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "setup",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests#setup()",
      "head_type": "method",
      "relation": "have",
      "tail": "initializes runtime hints",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests#setup()",
      "head_type": "method",
      "relation": "have",
      "tail": "void setup() { this.runtimeHints = new RuntimeHints(); }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests#setup()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests#setup()",
      "head_type": "method",
      "relation": "have",
      "tail": "Prepares the runtime hints for each test.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests#setup()",
      "head_type": "method",
      "relation": "have",
      "tail": "Ensures that each test case has a fresh instance of RuntimeHints to avoid side effects between tests.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests#assertPredicateDoesNotMatch(Predicate<RuntimeHints>)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "asserting predicate does not match",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests#assertPredicateDoesNotMatch(Predicate<RuntimeHints>)",
      "head_type": "method",
      "relation": "have",
      "tail": "private void assertPredicateDoesNotMatch(Predicate<RuntimeHints> predicate) {\n    assertThat(predicate.test(this.runtimeHints)).isFalse();\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests#assertPredicateDoesNotMatch(Predicate<RuntimeHints>)",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodInvocationMatchesMethodInvocationHint()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "method invocation matching",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodInvocationMatchesMethodInvocationHint()",
      "head_type": "method",
      "relation": "have",
      "tail": "runtime hints registration",
      "tail_type": "useSampleCode"
    },
    {
      "head": "runtime hints registration",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "SampleClass",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodInvocationMatchesMethodInvocationHint()",
      "head_type": "method",
      "relation": "have",
      "tail": "reflection type hinting",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodInvocationMatchesMethodInvocationHint()",
      "head_type": "method",
      "relation": "have",
      "tail": "executable mode invocation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#shouldFailForMissingField()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "fieldReflectionTesting",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#shouldFailForMissingField()",
      "head_type": "method",
      "relation": "have",
      "tail": "void shouldFailForMissingField() { assertThatIllegalArgumentException().isThrownBy(() -> reflection.onField(SampleClass.class, \"missingField\")); }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#shouldFailForMissingField()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.predicate.ReflectionOnField",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#shouldFailForMissingField()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "SampleClass",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ProxyHintsTests#registerJdkProxyWithInterface()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerJdkProxy",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ProxyHintsTests#registerJdkProxyWithInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "sample code for registering JDK proxy with interface",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerJdkProxy",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "interface proxy registration",
      "tail_type": "useScenario"
    },
    {
      "head": "registerJdkProxy",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "related concept interpretation for JDK proxy registration",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "registerJdkProxy",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "design principle interpretation for JDK proxy registration",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#getTypeForNonExistingType()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "getTypeForNonExistingType",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#getTypeForNonExistingType()",
      "head_type": "method",
      "relation": "have",
      "tail": "getTypeForNonExistingTypeSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getTypeForNonExistingTypeSampleCode",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.ReflectionHintsTests#getTypeForNonExistingType()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#registerTypeIgnoresLambda()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerType",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#registerTypeIgnoresLambda()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerTypeIgnoresLambda() useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerType",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "Runnable lambda constraint",
      "tail_type": "useConstraint"
    },
    {
      "head": "registerType",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "Runnable lambda scenario",
      "tail_type": "useScenario"
    },
    {
      "head": "registerType",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "registerType relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "registerType",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "registerType designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests#configureWithInvalidFileExtension()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "validate file extension",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests#configureWithInvalidFileExtension()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "file extension must start with '.'",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests#configureWithInvalidFileExtension()",
      "head_type": "method",
      "relation": "have",
      "tail": "void configureWithInvalidFileExtension() {\n    Builder builder = FilePatternResourceHintsRegistrar.forClassPathLocations(\"\");\n    assertThatIllegalArgumentException().isThrownBy(() -> builder.withFileExtensions(\"txt\")).withMessageContaining(\"must start with '.'\");\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests#configureWithInvalidFileExtension()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#createWithConstructorWithSameConstructorUpdatesEntry()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "constructorHint",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#createWithConstructorWithSameConstructorUpdatesEntry()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "parameterTypesHint",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#createWithConstructorWithSameConstructorUpdatesEntry()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "executableModeHint",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#createWithConstructorWithSameConstructorUpdatesEntry()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "TypeHintTestsSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#createWithConstructorWithSameConstructorUpdatesEntry()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "TypeHint",
      "tail_type": "class"
    },
    {
      "head": "TypeHint",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "constructorHint",
      "tail_type": "apiFunction"
    },
    {
      "head": "TypeHint",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "parameterTypesHint",
      "tail_type": "apiFunction"
    },
    {
      "head": "TypeHint",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "executableModeHint",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#createWithConstructorWithSameConstructorUpdatesEntry()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "relatedConceptInterpretation",
      "head_type": "relatedConceptInterpretation",
      "relation": "have",
      "tail": "TypeHintConcept",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#createWithConstructorWithSameConstructorUpdatesEntry()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "designPrincipleInterpretation",
      "head_type": "designPrincipleInterpretation",
      "relation": "have",
      "tail": "TypeHintDesignPrinciple",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.TypeReferenceTests#equalsWithIdenticalNameIsTrue()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "TypeReference comparison",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.TypeReferenceTests#equalsWithIdenticalNameIsTrue()",
      "head_type": "method",
      "relation": "have",
      "tail": "TypeReference usage example",
      "tail_type": "useSampleCode"
    },
    {
      "head": "TypeReference usage example",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "TypeReference.of(String.class)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "TypeReference usage example",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "TypeReference.of(\"java.lang.String\")",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.TypeReferenceTests#equalsWithIdenticalNameIsTrue()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.TypeReference",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.TypeReferenceTests#equalsWithIdenticalNameIsTrue()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "relatedConceptInterpretation",
      "head_type": "relatedConceptInterpretation",
      "relation": "have",
      "tail": "TypeReference is used to represent a reference to a type in a way that is independent of the class loader.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.TypeReferenceTests#equalsWithIdenticalNameIsTrue()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "designPrincipleInterpretation",
      "head_type": "designPrincipleInterpretation",
      "relation": "have",
      "tail": "The method demonstrates the principle of type comparison in a way that is independent of the class loader.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.nativex.SerializationHintsTests#shouldWriteSingleHint()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerType",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.SerializationHintsTests#shouldWriteSingleHint()",
      "head_type": "method",
      "relation": "have",
      "tail": "SerializationHintsSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "SerializationHintsSampleCode",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.aot.nativex.RuntimeHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.RuntimeHints",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "serialization",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.RuntimeHints",
      "head_type": "class",
      "relation": "have",
      "tail": "SerializationHintsRelatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "SerializationHintsRelatedConceptInterpretation",
      "head_type": "relatedConceptInterpretation",
      "relation": "associated_with",
      "tail": "org.springframework.aot.nativex.RuntimeHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.RuntimeHints",
      "head_type": "class",
      "relation": "have",
      "tail": "SerializationHintsDesignPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "SerializationHintsDesignPrincipleInterpretation",
      "head_type": "designPrincipleInterpretation",
      "relation": "associated_with",
      "tail": "org.springframework.aot.nativex.RuntimeHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.core.SpringNamingPolicyTests#getClassName(String,String,Object)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "generateClassName",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.core.SpringNamingPolicyTests#getClassName(String,String,Object)",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "classNameUniqueness",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.cglib.core.SpringNamingPolicyTests#getClassName(String,String,Object)",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "dynamicClassGeneration",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.cglib.core.SpringNamingPolicyTests#getClassName(String,String,Object)",
      "head_type": "method",
      "relation": "have",
      "tail": "generateClassNameSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.core.SpringNamingPolicyTests#getClassName(String,String,Object)",
      "head_type": "method",
      "relation": "have",
      "tail": "classNameUniquenessInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.core.SpringNamingPolicyTests#getClassName(String,String,Object)",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleForDynamicClassNaming",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.core.SpringNamingPolicyTests#getClassName(String,String,Object)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.core.SpringNamingPolicy",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationOnMethodWithComposedMetaTransactionalAnnotation()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "findMergedAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationOnMethodWithComposedMetaTransactionalAnnotation()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "composedTransactionalMethod",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationOnMethodWithComposedMetaTransactionalAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "sample code for using findMergedAnnotation",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationOnMethodWithComposedMetaTransactionalAnnotation()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "AliasedTransactional",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationOnMethodWithComposedMetaTransactionalAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "related concept interpretation for AliasedTransactional",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationOnMethodWithComposedMetaTransactionalAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "design principle interpretation for AnnotatedElementUtils",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnClassWithComposedMetaTransactionalAnnotation()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "findMergedAnnotationAttributes",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnClassWithComposedMetaTransactionalAnnotation()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "ComposedTransactionalClass",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnClassWithComposedMetaTransactionalAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "findMergedAnnotationAttributesOnClassWithComposedMetaTransactionalAnnotation sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "findMergedAnnotationAttributesOnClassWithComposedMetaTransactionalAnnotation sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnClassWithComposedMetaTransactionalAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "related concept interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnClassWithComposedMetaTransactionalAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "design principle interpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#javaLangAnnotationTypeViaFindMergedAnnotation()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "findMergedAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#javaLangAnnotationTypeViaFindMergedAnnotation()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "getAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#javaLangAnnotationTypeViaFindMergedAnnotation()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtils",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#javaLangAnnotationTypeViaFindMergedAnnotation()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "java.lang.annotation.Deprecated",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#javaLangAnnotationTypeViaFindMergedAnnotation()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "java.util.Date",
      "tail_type": "class"
    },
    {
      "head": "findMergedAnnotation",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "java.lang.reflect.Constructor",
      "tail_type": "useScenario"
    },
    {
      "head": "findMergedAnnotation",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "java.lang.Class",
      "tail_type": "useScenario"
    },
    {
      "head": "getAnnotation",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "java.lang.reflect.Constructor",
      "tail_type": "useScenario"
    },
    {
      "head": "getAnnotation",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "java.lang.Class",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#javaLangAnnotationTypeViaFindMergedAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#javaLangAnnotationTypeViaFindMergedAnnotation()_useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#composedTransactionalMethod()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "composedTransactional",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#composedTransactionalMethod()",
      "head_type": "method",
      "relation": "have",
      "tail": "composedTransactionalMethod() useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "composedTransactionalMethod() useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "composedTransactionalMethod() useSampleCode content",
      "tail_type": "content"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#composedTransactionalMethod()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAttributesTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getEnumWithNullAttributeName()",
      "tail_type": "apiFunction"
    },
    {
      "head": "getEnumWithNullAttributeName()",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "attributeNameMustNotBeNull",
      "tail_type": "useConstraint"
    },
    {
      "head": "getEnumWithNullAttributeName()",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getEnumWithNullAttributeName()",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "getEnumWithNullAttributeName()",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAttributesTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationAttributes",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests#sortInstancesWithOrderAndPriority()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "sortInstancesWithOrderAndPriority",
      "tail_type": "apiFunction"
    },
    {
      "head": "sortInstancesWithOrderAndPriority",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "sortInstancesWithOrderAndPrioritySampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "sortInstancesWithOrderAndPrioritySampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.B2",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "lazy loading",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.B2",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "circular aliases are prohibited",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.B2",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "multiple aliases for a single name",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.B2",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.B2",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.B2",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.SimpleAliasRegistryTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.WithSingleSuperclass#method()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "testMethod",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.WithSingleSuperclass#method()",
      "head_type": "method",
      "relation": "have",
      "tail": "testMethodSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.WithSingleSuperclass#method()",
      "head_type": "method",
      "relation": "have",
      "tail": "testMethodRelatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.WithSingleSuperclass#method()",
      "head_type": "method",
      "relation": "have",
      "tail": "testMethodDesignPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.WithSingleSuperclass#method()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.WithSingleSuperclass",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.Hello1",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "testAnnotationUsage",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.Hello1",
      "head_type": "class",
      "relation": "have",
      "tail": "void method();",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.Hello1",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.TestAnnotation1",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.MultipleMethodsInterface#method(String)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "testAnnotation2",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.MultipleMethodsInterface#method(String)",
      "head_type": "method",
      "relation": "have",
      "tail": "void method(String arg);",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenSelfAnnotatedReturnsMapping()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "getAnnotationTypeMapping",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenSelfAnnotatedReturnsMapping()",
      "head_type": "method",
      "relation": "have",
      "tail": "SelfAnnotated class mapping retrieval",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getAnnotationTypeMapping",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "SelfAnnotated class mapping retrieval",
      "tail_type": "useScenario"
    },
    {
      "head": "SelfAnnotated class mapping retrieval",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationTypeMapping",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMapping",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getAnnotationType",
      "tail_type": "apiFunction"
    },
    {
      "head": "SelfAnnotated class mapping retrieval",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "getAnnotationType function usage",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "getAnnotationType function usage",
      "head_type": "relatedConceptInterpretation",
      "relation": "designPrincipleInterpretation",
      "tail": "Efficient annotation type retrieval",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenValueAndDefaultAreNullReturnsTrue()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "testAnnotationTypeMappingEquivalence",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenValueAndDefaultAreNullReturnsTrue()",
      "head_type": "method",
      "relation": "have",
      "tail": "annotationTypeMappingEquivalenceTestSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "testAnnotationTypeMappingEquivalence",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "annotationTypeMappingEquivalenceScenario",
      "tail_type": "useScenario"
    },
    {
      "head": "annotationTypeMappingEquivalenceTestSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotationTypeMapping",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMapping",
      "head_type": "class",
      "relation": "have",
      "tail": "annotationTypeMappingRelatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMapping",
      "head_type": "class",
      "relation": "have",
      "tail": "annotationTypeMappingDesignPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenValueAndDefaultMatchReturnsTrue()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "isEquivalentToDefaultValue",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenValueAndDefaultMatchReturnsTrue()",
      "head_type": "method",
      "relation": "have",
      "tail": "AnnotationTypeMapping mapping = AnnotationTypeMappings.forAnnotationType(ClassValueWithDefault.class).get(0); assertThat(mapping.isEquivalentToDefaultValue(0, InputStream.class, ReflectionUtils::invokeMethod)).isTrue();",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenValueAndDefaultMatchReturnsTrue()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationTypeMapping",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMapping",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "isEquivalentToDefaultValue",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMapping",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMapping",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getNames(MirrorSet)",
      "tail_type": "apiFunction"
    },
    {
      "head": "getNames(MirrorSet)",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getNames(MirrorSet) Sample Code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getNames(MirrorSet) Sample Code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "Complete getNames(MirrorSet) Example",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getAnnotationAttributesWithNestedAnnotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "getAnnotationAttributesWithNestedAnnotations",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getAnnotationAttributesWithNestedAnnotations() Sample Code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getAnnotationAttributesWithNestedAnnotations() Sample Code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "Complete Example Code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getDefaultValueFromNonPublicAnnotation()",
      "tail_type": "apiFunction"
    },
    {
      "head": "getDefaultValueFromNonPublicAnnotation()",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getDefaultValueFromNonPublicAnnotation() useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getDefaultValueFromNonPublicAnnotation() useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "package org.springframework.core.annotation; import org.junit.jupiter.api.Test; public class AnnotationUtilsTests { @Test void getDefaultValueFromNonPublicAnnotation() { Annotation[] declaredAnnotations = NonPublicAnnotatedClass.class.getDeclaredAnnotations(); assertThat(declaredAnnotations).hasSize(1); Annotation annotation = declaredAnnotations[0]; assertThat(annotation).isNotNull(); assertThat(annotation.annotationType().getSimpleName()).isEqualTo(\"NonPublicAnnotation\"); assertThat(getDefaultValue(annotation, VALUE)).isEqualTo(-1); assertThat(getDefaultValue(annotation)).isEqualTo(-1); } }",
      "tail_type": "String"
    },
    {
      "head": "org.springframework.aot.hint.annotation.RegistrationMethod",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "reflection registration",
      "tail_type": "apiFunction"
    },
    {
      "head": "reflection registration",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "RegisterReflection annotation usage",
      "tail_type": "useSampleCode"
    },
    {
      "head": "reflection registration",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "class and member categories must be specified",
      "tail_type": "useConstraint"
    },
    {
      "head": "reflection registration",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "private methods for reflection",
      "tail_type": "useScenario"
    },
    {
      "head": "reflection registration",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "related concept interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "reflection registration",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "design principle interpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.annotation.RegistrationMethod",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "SimplePojo",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassA#getB()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "retrieveSetOfSampleClassB",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassA#getB()",
      "head_type": "method",
      "relation": "have",
      "tail": "This method is designed to return a set containing instances of SampleClassB. It is currently returning null, which indicates that the implementation is either not yet completed or intentionally left empty. This could be a placeholder for future functionality or a part of a larger design where the actual set retrieval logic will be implemented later.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassA#getB()",
      "head_type": "method",
      "relation": "have",
      "tail": "public Set<SampleClassB> getB() {\n    return null;\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "retrieveSetOfSampleClassB",
      "head_type": "apiFunction",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.SampleClassA",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassA",
      "head_type": "class",
      "relation": "have",
      "tail": "This class seems to be a part of a framework or library that provides hints for ahead-of-time (AOT) processing. The method getB() is likely used to fetch related objects or dependencies, which are instances of SampleClassB. The design principle here might revolve around lazy loading or dependency injection, where the actual instances are provided only when needed.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassWithJsonProperty",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "PropertyAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassWithJsonProperty",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "DeserializeAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "PropertyAnnotation",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "privateField",
      "tail_type": "useScenario"
    },
    {
      "head": "DeserializeAnnotation",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "privateField",
      "tail_type": "useScenario"
    },
    {
      "head": "DeserializeAnnotation",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "packagePrivateMethod",
      "tail_type": "useScenario"
    },
    {
      "head": "PropertyAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "DeserializeAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "DeserializeAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "DeserializeAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.CustomDeserializer1#deserialize(JsonParser,DeserializationContext)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "deserialize",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.CustomDeserializer1#deserialize(JsonParser,DeserializationContext)",
      "head_type": "method",
      "relation": "have",
      "tail": "CustomDeserializer1",
      "tail_type": "class"
    },
    {
      "head": "CustomDeserializer1",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.CustomDeserializer1#deserialize(JsonParser,DeserializationContext)",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithMemberCategoryMatchesCategory()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "reflection type registration",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithMemberCategoryMatchesCategory()",
      "head_type": "method",
      "relation": "have",
      "tail": "runtimeHints.reflection().registerType(SampleClass.class, MemberCategory.INTROSPECT_PUBLIC_METHODS);",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithMemberCategoryMatchesCategory()",
      "head_type": "method",
      "relation": "have",
      "tail": "registering types for reflection",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithMemberCategoryMatchesCategory()",
      "head_type": "method",
      "relation": "have",
      "tail": "ensuring public methods are introspected",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor#privateConstructorInvocationMatchesInvokeDeclaredConstructors()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "privateConstructorInvocationMatchesInvokeDeclaredConstructors",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor#privateConstructorInvocationMatchesInvokeDeclaredConstructors()",
      "head_type": "method",
      "relation": "have",
      "tail": "runtimeHints.reflection().registerType(SampleClass.class, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS);",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor#privateConstructorInvocationMatchesInvokeDeclaredConstructors()",
      "head_type": "method",
      "relation": "have",
      "tail": "assertPredicateMatches(reflection.onConstructorInvocation(privateConstructor));",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor#privateConstructorInvocationMatchesInvokeDeclaredConstructors()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "SampleClass",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor#privateConstructorInvocationMatchesInvokeDeclaredConstructors()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "privateConstructor",
      "tail_type": "class"
    },
    {
      "head": "privateConstructorInvocationMatchesInvokeDeclaredConstructors",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "runtimeHints.reflection().registerType(SampleClass.class, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS);",
      "tail_type": "useScenario"
    },
    {
      "head": "privateConstructorInvocationMatchesInvokeDeclaredConstructors",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "assertPredicateMatches(reflection.onConstructorInvocation(privateConstructor));",
      "tail_type": "useScenario"
    },
    {
      "head": "runtimeHints.reflection().registerType(SampleClass.class, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS);",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.aot.hint.predicate.ReflectionOnConstructor#privateConstructorInvocationMatchesInvokeDeclaredConstructors()",
      "tail_type": "method"
    },
    {
      "head": "assertPredicateMatches(reflection.onConstructorInvocation(privateConstructor));",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.aot.hint.predicate.ReflectionOnConstructor#privateConstructorInvocationMatchesInvokeDeclaredConstructors()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodIntrospectionMatchesMethodHint()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "introspection",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodIntrospectionMatchesMethodHint()",
      "head_type": "method",
      "relation": "have",
      "tail": "runtimeHints.reflection().registerType(SampleClass.class, typeHint -> typeHint.withMethod(\"privateMethod\", Collections.emptyList(), ExecutableMode.INTROSPECT));",
      "tail_type": "useSampleCode"
    },
    {
      "head": "introspection",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "privateMethod",
      "tail_type": "useScenario"
    },
    {
      "head": "introspection",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "introspection",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "introspection",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "introspection",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "useConstraint",
      "tail_type": "useConstraint"
    },
    {
      "head": "introspection",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "useScenario",
      "tail_type": "useScenario"
    },
    {
      "tail": "privateFieldAccess",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "runtimeHints.reflection().registerType(SampleClass.class, typeHint -> typeHint.withField(\"privateField\"));",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "registerType",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "withField",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "assertPredicateMatches",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "reflection.onField(SampleClass.class, \"privateField\")",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SampleClass",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "class"
    },
    {
      "tail": "privateField",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "privateFieldAccessMatchesFieldHint",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "ReflectionOnField",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "class"
    },
    {
      "tail": "runtimeHints",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "reflection",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "registerType",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "withField",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "assertPredicateMatches",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "reflection.onField(SampleClass.class, \"privateField\")",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SampleClass",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "class"
    },
    {
      "tail": "privateField",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "privateFieldAccessMatchesFieldHint",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "ReflectionOnField",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "class"
    },
    {
      "tail": "runtimeHints",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "reflection",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "registerType",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "withField",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "assertPredicateMatches",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "reflection.onField(SampleClass.class, \"privateField\")",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SampleClass",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "class"
    },
    {
      "tail": "privateField",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "privateFieldAccessMatchesFieldHint",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "ReflectionOnField",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "class"
    },
    {
      "tail": "runtimeHints",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "reflection",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "registerType",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "withField",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "assertPredicateMatches",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "reflection.onField(SampleClass.class, \"privateField\")",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SampleClass",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "class"
    },
    {
      "tail": "privateField",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "privateFieldAccessMatchesFieldHint",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "ReflectionOnField",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "class"
    },
    {
      "tail": "runtimeHints",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "reflection",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "registerType",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "withField",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "assertPredicateMatches",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "reflection.onField(SampleClass.class, \"privateField\")",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SampleClass",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "class"
    },
    {
      "tail": "privateField",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "privateFieldAccessMatchesFieldHint",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "ReflectionOnField",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "class"
    },
    {
      "tail": "runtimeHints",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "reflection",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "registerType",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "withField",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "assertPredicateMatches",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "reflection.onField(SampleClass.class, \"privateField\")",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SampleClass",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "class"
    },
    {
      "tail": "privateField",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "privateFieldAccessMatchesFieldHint",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "ReflectionOnField",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "class"
    },
    {
      "tail": "runtimeHints",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "reflection",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "registerType",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "withField",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "assertPredicateMatches",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "reflection.onField(SampleClass.class, \"privateField\")",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
      "tail_type": "useSampleCode"
    },
    {},
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#typeWithMemberCategories(Class<?>,MemberCategory)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "type hinting",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#typeWithMemberCategories(Class<?>,MemberCategory)",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "type must have a canonical name",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#typeWithMemberCategories(Class<?>,MemberCategory)",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "reflection-based frameworks",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#typeWithMemberCategories(Class<?>,MemberCategory)",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.aot.hint.TypeHint",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#typeWithMemberCategories(Class<?>,MemberCategory)",
      "head_type": "method",
      "relation": "have",
      "tail": "type hinting ensures that reflection operations are correctly handled",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#typeWithMemberCategories(Class<?>,MemberCategory)",
      "head_type": "method",
      "relation": "have",
      "tail": "design principle is to ensure that the type hinting process is robust and flexible",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#typeWithMemberCategories(Class<?>,MemberCategory)",
      "head_type": "method",
      "relation": "have",
      "tail": "private Consumer<TypeHint> typeWithMemberCategories(Class<?> type, MemberCategory... memberCategories) { return typeHint -> { assertThat(typeHint.getType().getCanonicalName()).isEqualTo(type.getCanonicalName()); assertThat(typeHint.fields()).isEmpty(); assertThat(typeHint.constructors()).isEmpty(); assertThat(typeHint.methods()).isEmpty(); assertThat(typeHint.getMemberCategories()).containsExactly(memberCategories); }; }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.FirstInterface",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "void first()",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#registerExactMatches()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "register resource patterns",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#registerExactMatches()",
      "head_type": "method",
      "relation": "have",
      "tail": "register resource patterns sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "register resource patterns sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.aot.hint.ResourceHintsTests#registerExactMatches()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#registerExactMatches()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.ResourceHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#registerPatternWithIncludesAndExcludes()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerPatternWithIncludesAndExcludes",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#registerPatternWithIncludesAndExcludes()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerPatternWithIncludesAndExcludesSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerPatternWithIncludesAndExcludesSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.aot.hint.ResourceHintsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "emptyConfig",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "serializationConfig",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "proxyConfig",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "reflectionConfig",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "jniConfig",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "resourceConfig",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "namespace",
      "tail_type": "apiFunction"
    },
    {
      "head": "emptyConfig",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "serializationConfig",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "proxyConfig",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "reflectionConfig",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "jniConfig",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "resourceConfig",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "namespace",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "FileNativeConfigurationWriter",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.nativex.ResourceHintsTests#registerResourceBundle()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerResourceBundle",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.ResourceHintsTests#registerResourceBundle()",
      "head_type": "method",
      "relation": "have",
      "tail": "ResourceHintsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.ResourceHintsTests#registerResourceBundle()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerResourceBundle() useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerResourceBundle() useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.aot.nativex.ResourceHintsTests#registerResourceBundle() sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnClassWithBothAttributesOfAnAliasPairDeclared()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "postProcessAnnotationAttributes",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnClassWithBothAttributesOfAnAliasPairDeclared()",
      "head_type": "method",
      "relation": "have",
      "tail": "This test ensures that AnnotationUtils.postProcessAnnotationAttributes uses ObjectUtils.nullSafeEquals() to check for equality between annotation attributes since attributes may be arrays.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnClassWithBothAttributesOfAnAliasPairDeclared()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "AnnotationUtils",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnClassWithBothAttributesOfAnAliasPairDeclared()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "ObjectUtils",
      "tail_type": "class"
    },
    {
      "head": "postProcessAnnotationAttributes",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "This test ensures that AnnotationUtils.postProcessAnnotationAttributes uses ObjectUtils.nullSafeEquals() to check for equality between annotation attributes since attributes may be arrays.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "postProcessAnnotationAttributes",
      "head_type": "apiFunction",
      "relation": "associated_with",
      "tail": "AnnotationUtils",
      "tail_type": "class"
    },
    {
      "head": "postProcessAnnotationAttributes",
      "head_type": "apiFunction",
      "relation": "associated_with",
      "tail": "ObjectUtils",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.ComposedTransactionalComponentClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "transactional component composition",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.ComposedTransactionalComponentClass",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.ComposedTransactionalComponentClass",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.ComposedTransactionalComponentClass",
      "head_type": "class",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.SubSubInheritedAnnotationInterface",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "annotationInheritance",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.SubSubInheritedAnnotationInterface",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "annotationInheritanceConstraints",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.SubSubInheritedAnnotationInterface",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "annotationUsageScenarios",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.SubSubInheritedAnnotationInterface",
      "head_type": "class",
      "relation": "have",
      "tail": "annotationUsageSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.SubSubInheritedAnnotationInterface",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptsExplanation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SubSubInheritedAnnotationInterface",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrinciplesExplanation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SubSubInheritedAnnotationInterface",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.Inherited",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAttributesTests#singleElementToSingleElementArrayConversionSupport()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "singleElementToSingleElementArrayConversionSupport",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAttributesTests#singleElementToSingleElementArrayConversionSupport()",
      "head_type": "method",
      "relation": "have",
      "tail": "singleElementToSingleElementArrayConversionSupportSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "singleElementToSingleElementArrayConversionSupportSampleCode",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationAttributesTests#singleElementToSingleElementArrayConversionSupport()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.core.annotation.EnclosedStatic",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "static class definition",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.EnclosedStatic",
      "head_type": "class",
      "relation": "have",
      "tail": "static class usage sample",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.EnclosedStatic",
      "head_type": "class",
      "relation": "have",
      "tail": "related concept interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.EnclosedStatic",
      "head_type": "class",
      "relation": "have",
      "tail": "design principle interpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.WithExampleAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "exampleAnnotationUsage",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.WithExampleAnnotation",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "annotationConstraints",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.WithExampleAnnotation",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "exampleUsageScenario",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.WithExampleAnnotation",
      "head_type": "class",
      "relation": "have",
      "tail": "exampleSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.WithExampleAnnotation",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConcepts",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.WithExampleAnnotation",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrinciples",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.WithExampleAnnotation",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtils",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnClassWhenNotAnnotatedScansNone()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scanning for annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnClassWhenNotAnnotatedScansNone()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "scanning classes not annotated",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnClassWhenNotAnnotatedScansNone()",
      "head_type": "method",
      "relation": "have",
      "tail": "void typeHierarchyStrategyOnClassWhenNotAnnotatedScansNone() {\n    Class<?> source = WithNoAnnotations.class;\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).isEmpty();\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnClassWhenNotAnnotatedScansNone()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnClassWhenNotAnnotatedScansNone()",
      "head_type": "method",
      "relation": "have",
      "tail": "This method tests the behavior of the annotation scanning when no annotations are present on a class, using the type hierarchy strategy. It verifies that the scanning result is empty.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnClassWhenNotAnnotatedScansNone()",
      "head_type": "method",
      "relation": "have",
      "tail": "The design principle behind this method is to ensure that the annotation scanning mechanism correctly handles classes without annotations, adhering to the type hierarchy strategy. This is crucial for maintaining the integrity and accuracy of the scanning process within the Spring framework.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnMethodScansAnnotations()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scan annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnMethodScansAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "void directStrategyOnMethodScansAnnotations() {\n    Method source = methodFrom(WithSingleAnnotation.class);\n    assertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnMethodScansAnnotations()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnMethodScansAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "This method tests the scanning of annotations using a direct strategy on a method.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnMethodScansAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "The design principle here is to ensure that annotations on methods are correctly scanned and identified using a direct search strategy.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.WithSingleAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "testAnnotationUsage",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.WithSingleAnnotation",
      "head_type": "class",
      "relation": "have",
      "tail": "testAnnotationUsageSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.HierarchySuperclass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "org.springframework.core.annotation.HierarchySuperclass",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.HierarchySuperclass",
      "head_type": "class",
      "relation": "have",
      "tail": "org.springframework.core.annotation.HierarchySuperclass",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.HierarchySuperclass",
      "head_type": "class",
      "relation": "have",
      "tail": "org.springframework.core.annotation.HierarchySuperclass",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.HierarchySuperclass",
      "head_type": "class",
      "relation": "have",
      "tail": "org.springframework.core.annotation.HierarchySuperclass",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForSelfWithMissingDefault()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "AnnotationTypeMappings.forAnnotationType()",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForSelfWithMissingDefault()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "AnnotationConfigurationException",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForSelfWithMissingDefault()",
      "head_type": "method",
      "relation": "have",
      "tail": "Misconfigured aliases: attribute 'a' in annotation [AliasForSelfWithMissingDefault] and attribute 'b' in annotation [AliasForSelfWithMissingDefault] must declare default values.",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForSelfWithMissingDefault()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForSelfWithMissingDefault()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForSelfWithMissingDefault()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "AliasForSelfWithMissingDefault",
      "tail_type": "class"
    },
    {
      "head": "AliasForSelfWithMissingDefault",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "AnnotationTypeMappings.forAnnotationType()",
      "tail_type": "apiFunction"
    },
    {
      "head": "AliasForSelfWithMissingDefault",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "AnnotationConfigurationException",
      "tail_type": "useConstraint"
    },
    {
      "head": "AliasForSelfWithMissingDefault",
      "head_type": "class",
      "relation": "have",
      "tail": "Misconfigured aliases: attribute 'a' in annotation [AliasForSelfWithMissingDefault] and attribute 'b' in annotation [AliasForSelfWithMissingDefault] must declare default values.",
      "tail_type": "useScenario"
    },
    {
      "head": "AliasForSelfWithMissingDefault",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "AliasForSelfWithMissingDefault",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getMirrorSetWhenImplicitMirrorsReturnsMirrors",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMirrorSetWhenImplicitMirrorsReturnsMirrors",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getMirrorSetWhenImplicitMirrorsReturnsMirrors()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getMirrorSetWhenImplicitMirrorsReturnsMirrors()",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationTypeMapping",
      "tail_type": "class"
    },
    {
      "head": "getMirrorSetWhenImplicitMirrorsReturnsMirrors()",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.MirrorSets",
      "tail_type": "class"
    },
    {
      "head": "getMirrorSetWhenImplicitMirrorsReturnsMirrors()",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation ImplicitMirrors",
      "tail_type": "class"
    },
    {
      "relationships": [
        {
          "tail": "resolveMirrorSets",
          "head_type": "method",
          "relation": "haveFunction",
          "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#resolveMirrorSets(AnnotationTypeMapping,Class<?>,Class<? extends Annotation>)",
          "tail_type": "apiFunction"
        },
        {
          "tail": "resolveMirrorSetsSampleCode",
          "head_type": "apiFunction",
          "relation": "have",
          "head": "resolveMirrorSets",
          "tail_type": "useSampleCode"
        },
        {
          "tail": "resolveMirrorSetsCompleteSampleCode",
          "head_type": "useSampleCode",
          "relation": "have",
          "head": "resolveMirrorSetsSampleCode",
          "tail_type": "useSampleCode"
        }
      ]
    },
    {
      "ReflectionUtils": "invokeMethod);\n        Method[] result = new Method[resolved.length];\n        for (int i = 0; i < resolved.length; i++) {\n            result[i] = resolved[i] != -1 ? mapping.getAttributes().get(resolved[i]) : null;"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getConventionMapping(AnnotationTypeMapping,int)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "getConventionMapping",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getConventionMapping(AnnotationTypeMapping,int)",
      "head_type": "method",
      "relation": "have",
      "tail": "getConventionMapping sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getConventionMapping sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnNonInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "findClassAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnNonInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "nonInheritedAnnotationInterface",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnNonInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "since 4.2",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnNonInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnNonInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnNonInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnNonInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findAnnotationDeclaringClassForTypesWithSingleCandidateType()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "findAnnotationDeclaringClassForTypes",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findAnnotationDeclaringClassForTypesWithSingleCandidateType()",
      "head_type": "method",
      "relation": "have",
      "tail": "findAnnotationDeclaringClassForTypesWithSingleCandidateType useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "findAnnotationDeclaringClassForTypesWithSingleCandidateType useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "package org.springframework.core.annotation;\n\nimport java.lang.annotation.Annotation;\nimport java.util.Collections;\nimport java.util.List;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class AnnotationUtilsTests {\n\n    @Test\n    void findAnnotationDeclaringClassForTypesWithSingleCandidateType() {\n        // no class-level annotation\n        List<Class<? extends Annotation>> transactionalCandidateList = Collections.singletonList(Transactional.class);\n        assertThat(findAnnotationDeclaringClassForTypes(transactionalCandidateList, NonAnnotatedInterface.class)).isNull();\n        assertThat(findAnnotationDeclaringClassForTypes(transactionalCandidateList, NonAnnotatedClass.class)).isNull();\n        // inherited class-level annotation; note: @Transactional is inherited\n        assertThat(findAnnotationDeclaringClassForTypes(transactionalCandidateList, InheritedAnnotationInterface.class)).isEqualTo(InheritedAnnotationInterface.class);\n        assertThat(findAnnotationDeclaringClassForTypes(transactionalCandidateList, SubInheritedAnnotationInterface.class)).isNull();\n        assertThat(findAnnotationDeclaringClassForTypes(transactionalCandidateList, InheritedAnnotationClass.class)).isEqualTo(InheritedAnnotationClass.class);\n        assertThat(findAnnotationDeclaringClassForTypes(transactionalCandidateList, SubInheritedAnnotationClass.class)).isEqualTo(InheritedAnnotationClass.class);\n        // non-inherited class-level annotation; note: @Order is not inherited,\n        // but findAnnotationDeclaringClassForTypes() should still find it on classes.\n        List<Class<? extends Annotation>> orderCandidateList = Collections.singletonList(Order.class);\n        assertThat(findAnnotationDeclaringClassForTypes(orderCandidateList, NonInheritedAnnotationInterface.class)).isEqualTo(NonInheritedAnnotationInterface.class);\n        assertThat(findAnnotationDeclaringClassForTypes(orderCandidateList, SubNonInheritedAnnotationInterface.class)).isNull();\n        assertThat(findAnnotationDeclaringClassForTypes(orderCandidateList, NonInheritedAnnotationClass.class)).isEqualTo(NonInheritedAnnotationClass.class);\n        assertThat(findAnnotationDeclaringClassForTypes(orderCandidateList, SubNonInheritedAnnotationClass.class)).isEqualTo(NonInheritedAnnotationClass.class);\n    }\n}\n",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findAnnotationDeclaringClassForTypesWithSingleCandidateType()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithNestedArrayOfMaps()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "synthesizeAnnotationFromMap",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithNestedArrayOfMaps()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "synthesizeAnnotationFromMap",
      "head_type": "apiFunction",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationUtils",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithNestedArrayOfMaps()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationUtils",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithNestedArrayOfMaps()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithNestedArrayOfMaps()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithMinimalAttributesWithAttributeAliases()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "synthesizeAnnotationFromMap",
      "tail_type": "apiFunction"
    },
    {
      "head": "synthesizeAnnotationFromMap",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "synthesizeAnnotationFromMap",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "synthesizeAnnotationFromMap",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "synthesizeAnnotationFromMap",
      "tail_type": "apiFunction"
    },
    {
      "head": "synthesizeAnnotationFromMap",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useScenario",
      "tail_type": "useScenario"
    },
    {
      "head": "synthesizeAnnotationFromMap",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "mapAttributeValidation",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.AliasForAttributeWithDifferentDefaultValueClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "aliasForAttributeWithDifferentDefaultValue",
      "tail_type": "apiFunction"
    },
    {
      "head": "aliasForAttributeWithDifferentDefaultValue",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "defaultValuesMustMatch",
      "tail_type": "useConstraint"
    },
    {
      "head": "aliasForAttributeWithDifferentDefaultValue",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "annotationAttributeAliasing",
      "tail_type": "useScenario"
    },
    {
      "head": "aliasForAttributeWithDifferentDefaultValue",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "sampleCodeForAliasForAttributeWithDifferentDefaultValue",
      "tail_type": "useSampleCode"
    },
    {
      "head": "aliasForAttributeWithDifferentDefaultValue",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "relatedConceptsForAliasForAttributeWithDifferentDefaultValue",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "aliasForAttributeWithDifferentDefaultValue",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "designPrinciplesForAliasForAttributeWithDifferentDefaultValue",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AliasForAttributeWithDifferentDefaultValueClass",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AliasFor",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithMemberCategoriesMatchesCategories()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "type introspection",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithMemberCategoriesMatchesCategories()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerType(SampleClass.class, MemberCategory.INTROSPECT_PUBLIC_CONSTRUCTORS, MemberCategory.INTROSPECT_PUBLIC_METHODS)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithMemberCategoriesMatchesCategories()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "SampleClass",
      "tail_type": "class"
    },
    {
      "head": "type introspection",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "type and member categories must be specified",
      "tail_type": "useConstraint"
    },
    {
      "head": "type introspection",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "runtime hints registration",
      "tail_type": "useScenario"
    },
    {
      "head": "type introspection",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "used to specify which types and members should be introspected at runtime",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "type introspection",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "design principle to reduce the overhead of reflection by specifying only necessary types and members",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.SampleClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "constructor",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.SampleClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getter",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.SampleClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "setter",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.SampleClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "public method",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.SampleClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "private method",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.SampleClass",
      "head_type": "class",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.aot.hint.predicate.SampleClass",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.SerializationHintsPredicatesTests#shouldMatchRegisteredTypeReference()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerType",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.SerializationHintsPredicatesTests#shouldMatchRegisteredTypeReference()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "test",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.SerializationHintsPredicatesTests#shouldMatchRegisteredTypeReference()",
      "head_type": "method",
      "relation": "have",
      "tail": "runtimeHints.serialization().registerType(TypeReference.of(String.class))",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.SerializationHintsPredicatesTests#shouldMatchRegisteredTypeReference()",
      "head_type": "method",
      "relation": "have",
      "tail": "assertThat(serialization.onType(String.class).test(runtimeHints)).isTrue()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.SerializationHintsPredicatesTests#shouldMatchRegisteredTypeReference()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "runtimeHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.SerializationHintsPredicatesTests#shouldMatchRegisteredTypeReference()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "serialization",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.SerializationHintsPredicatesTests#shouldMatchRegisteredTypeReference()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "TypeReference",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.SerializationHintsPredicatesTests#shouldMatchRegisteredTypeReference()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "String",
      "tail_type": "class"
    },
    {
      "head": "registerType",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "runtimeHints.serialization().registerType(TypeReference.of(String.class))",
      "tail_type": "useSampleCode"
    },
    {
      "head": "test",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "assertThat(serialization.onType(String.class).test(runtimeHints)).isTrue()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.ProxyHintsTests#registerJdkProxyWithTypeReferences()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerJdkProxy",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ProxyHintsTests#registerJdkProxyWithTypeReferences()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerJdkProxyWithTypeReferences sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerJdkProxyWithTypeReferences sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.aot.hint.ProxyHintsTests#registerJdkProxyWithTypeReferences() sample code content",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.RuntimeHintsTests#resourceHintWithClass()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerType",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.RuntimeHintsTests#resourceHintWithClass()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "resourcePatternHints",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.RuntimeHintsTests#resourceHintWithClass()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "containsExactlyInAnyOrder",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.RuntimeHintsTests#resourceHintWithClass()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerType(String.class)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.RuntimeHintsTests#resourceHintWithClass()",
      "head_type": "method",
      "relation": "have",
      "tail": "resourceHintWithClass() method registers resource hints for a specific class.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.RuntimeHintsTests#resourceHintWithClass()",
      "head_type": "method",
      "relation": "have",
      "tail": "Design principle: The method follows the principle of explicit resource management by registering hints for specific classes to optimize resource loading.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.RuntimeHintsTests#resourceHintWithClass()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.RuntimeHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.SimpleTypeReferenceTests#nameOfNestedCglibProxy()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "getSimpleName",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.SimpleTypeReferenceTests#nameOfNestedCglibProxy()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "getEnclosingType",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.SimpleTypeReferenceTests#nameOfNestedCglibProxy()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "TypeReference.of",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.SimpleTypeReferenceTests#nameOfNestedCglibProxy()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.SimpleTypeReferenceTests#nameOfNestedCglibProxy()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "TypeReference",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.SimpleTypeReferenceTests#nameOfNestedCglibProxy()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.TypeReference",
      "tail_type": "class"
    },
    {
      "head": "getSimpleName",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "reference",
      "tail_type": "useScenario"
    },
    {
      "head": "getEnclosingType",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "reference",
      "tail_type": "useScenario"
    },
    {
      "head": "TypeReference.of",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "com.example.Test$Another$$SpringCGLIB$$0",
      "tail_type": "useScenario"
    },
    {
      "head": "useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.aot.hint.SimpleTypeReferenceTests#nameOfNestedCglibProxy()",
      "tail_type": "method"
    },
    {
      "head": "TypeReference",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.SimpleTypeReferenceTests#nameOfNestedCglibProxy()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.aot.hint.TypeReference",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.SimpleTypeReferenceTests#nameOfNestedCglibProxy()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.aot.hint.support.KotlinDetectorRuntimeHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "runtimeHintsInitialization",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.support.KotlinDetectorRuntimeHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "kotlinMetadataHintsVerification",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.support.KotlinDetectorRuntimeHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "kotlinReflectHintsVerification",
      "tail_type": "apiFunction"
    },
    {
      "head": "runtimeHintsInitialization",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "runtimeHintsInitializationSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "kotlinMetadataHintsVerification",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "kotlinMetadataHintsVerificationSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "kotlinReflectHintsVerification",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "kotlinReflectHintsVerificationSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.support.KotlinDetectorRuntimeHintsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "KotlinDetectorRuntimeHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.support.SpringFactoriesLoaderRuntimeHintsTests#factoryImplementationHasHint()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "factoryImplementationHasHint",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.support.SpringFactoriesLoaderRuntimeHintsTests#factoryImplementationHasHint()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "MyDummyFactory1",
      "tail_type": "class"
    },
    {
      "head": "MyDummyFactory1",
      "head_type": "class",
      "relation": "have",
      "tail": "reflection().onType(MyDummyFactory1.class).withMemberCategory(MemberCategory.INVOKE_DECLARED_CONSTRUCTORS)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests#writeWithEscapeCarriageReturn()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "writeWithEscapeCarriageReturn",
      "tail_type": "apiFunction"
    },
    {
      "head": "writeWithEscapeCarriageReturn",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "writeWithEscapeCarriageReturn() { assertStringAttribute(\"foo\\rbar\", \"foo\\\\rbar\"); }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests#writeWithEscapeCarriageReturn()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.nativex.BasicJsonWriterTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests#writeWithEscapeUnicode()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "writeWithEscapeUnicode",
      "tail_type": "apiFunction"
    },
    {
      "head": "writeWithEscapeUnicode",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "writeWithEscapeUnicode() sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "writeWithEscapeUnicode() sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "Complete example of writeWithEscapeUnicode()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#empty()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "test runtime hints",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#empty()",
      "head_type": "method",
      "relation": "have",
      "tail": "void empty() throws JSONException {    RuntimeHints hints = new RuntimeHints();    assertEquals(\";\", hints);}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#empty()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.nativex.ReflectionHintsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#empty()",
      "head_type": "method",
      "relation": "have",
      "tail": "This method tests the behavior of RuntimeHints when it is empty. It creates a new instance of RuntimeHints and uses assertEquals to check if the result of calling toString() on the hints object is a semicolon (';'). This implies that an empty RuntimeHints object has a specific string representation.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#empty()",
      "head_type": "method",
      "relation": "have",
      "tail": "The design principle behind this method is to ensure that the RuntimeHints object behaves correctly when it is empty. It verifies that the default or initial state of the RuntimeHints object is as expected, which is crucial for maintaining consistency and reliability in the application. This principle is aligned with the overall goal of ensuring that the application's components function correctly under various conditions, including edge cases like empty states.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getMergedAnnotationAttributesFavorsInheritedAnnotationsOverMoreLocallyDeclaredComposedAnnotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtils",
      "tail_type": "class"
    },
    {
      "head": "getMergedAnnotationAttributesFavorsInheritedAnnotationsOverMoreLocallyDeclaredComposedAnnotations",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "getMergedAnnotationAttributesFavorsInheritedAnnotationsOverMoreLocallyDeclaredComposedAnnotations",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationWithSingleElementOverridingAnArrayViaAliasFor()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "findMergedAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationWithSingleElementOverridingAnArrayViaAliasFor()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "overridingAnnotationViaAlias",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationWithSingleElementOverridingAnArrayViaAliasFor()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationWithSingleElementOverridingAnArrayViaAliasFor()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationWithSingleElementOverridingAnArrayViaAliasFor()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationWithSingleElementOverridingAnArrayViaAliasFor()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "WebController",
      "tail_type": "class"
    },
    {
      "head": "findMergedAnnotation",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "annotationInheritanceRules",
      "tail_type": "useConstraint"
    },
    {
      "head": "overridingAnnotationViaAlias",
      "head_type": "useScenario",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "relatedConceptInterpretation",
      "head_type": "relatedConceptInterpretation",
      "relation": "have",
      "tail": "annotationMerging",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "designPrincipleInterpretation",
      "head_type": "designPrincipleInterpretation",
      "relation": "have",
      "tail": "flexibilityAndConsistency",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.ConventionBasedAnnotationAttributeOverrideTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getMergedAnnotationAttributesWithHalfConventionBasedAndHalfAliasedComposedAnnotation()",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedAnnotationAttributesWithHalfConventionBasedAndHalfAliasedComposedAnnotation()",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "Spring does not support a hybrid approach for annotation attribute overrides with transitive implicit aliases",
      "tail_type": "useConstraint"
    },
    {
      "head": "getMergedAnnotationAttributesWithHalfConventionBasedAndHalfAliasedComposedAnnotation()",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "This test should never pass, simply because Spring does not support a hybrid approach for annotation attribute overrides with transitive implicit aliases. See SPR-13554 for details. Furthermore, if you choose to execute this test, it can fail for either the first test class or the second one (with different exceptions), depending on the order in which the JVM returns the attribute methods via reflection.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "getMergedAnnotationAttributesWithHalfConventionBasedAndHalfAliasedComposedAnnotation()",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "package com.healthMgr.common.email; import java.xxxx; public class OneClass { // specific code }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getMergedAnnotationAttributesWithHalfConventionBasedAndHalfAliasedComposedAnnotation()",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "This test should never pass, simply because Spring does not support a hybrid approach for annotation attribute overrides with transitive implicit aliases. See SPR-13554 for details. Furthermore, if you choose to execute this test, it can fail for either the first test class or the second one (with different exceptions), depending on the order in which the JVM returns the attribute methods via reflection.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SingleLocationTransitiveImplicitAliasesContextConfigClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "context configuration",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.SingleLocationTransitiveImplicitAliasesContextConfigClass",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "transitive implicit aliases",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.SingleLocationTransitiveImplicitAliasesContextConfigClass",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "single location context configuration",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.SingleLocationTransitiveImplicitAliasesContextConfigClass",
      "head_type": "class",
      "relation": "have",
      "tail": "related to managing context configuration with transitive implicit aliases",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SingleLocationTransitiveImplicitAliasesContextConfigClass",
      "head_type": "class",
      "relation": "have",
      "tail": "design principle focuses on efficient context configuration management",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SingleLocationTransitiveImplicitAliasesContextConfigClass",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.context.annotation.ConfigurationClassPostProcessor",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.TestComponentScanClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "component scanning",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.TestComponentScanClass",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.TestComponentScanClass",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.TestComponentScanClass",
      "head_type": "class",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.StandardRepeatablesWithContainerWithMultipleAttributesTestCase",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "testStandardRepeatablesWithContainerWithMultipleAttributes",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.StandardRepeatablesWithContainerWithMultipleAttributesTestCase",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AliasFor",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.StandardRepeatablesWithContainerWithMultipleAttributesTestCase",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.Repeatable",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.StandardRepeatablesWithContainerWithMultipleAttributesTestCase",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationUtils",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.StandardRepeatablesWithContainerWithMultipleAttributesTestCase",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.StandardRepeatablesWithContainerWithMultipleAttributesTestCase",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnClassWhenHasInterfaceScansOnlyDirect()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scan",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnClassWhenHasInterfaceScansOnlyDirect()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "SearchStrategy.DIRECT",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnClassWhenHasInterfaceScansOnlyDirect()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "containsExactly",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnClassWhenHasInterfaceScansOnlyDirect()",
      "head_type": "method",
      "relation": "have",
      "tail": "WithSingleInterface.class",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnClassWhenHasInterfaceScansOnlyDirect()",
      "head_type": "method",
      "relation": "have",
      "tail": "TestAnnotation1",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnClassWhenHasInterfaceScansOnlyDirect()",
      "head_type": "method",
      "relation": "have",
      "tail": "void directStrategyOnClassWhenHasInterfaceScansOnlyDirect() {    Class<?> source = WithSingleInterface.class;    assertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnClassWhenHasInterfaceScansOnlyDirect()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests",
      "head_type": "class",
      "relation": "have",
      "tail": "directStrategyOnClassWhenHasInterfaceScansOnlyDirect()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnClassHierarchyScansInCorrectOrder()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scan",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnClassHierarchyScansInCorrectOrder()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "SearchStrategy.DIRECT",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnClassHierarchyScansInCorrectOrder()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "containsExactly",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnClassHierarchyScansInCorrectOrder()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnClassHierarchyScansInCorrectOrder()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnClassHierarchyScansInCorrectOrder()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnClassHierarchyScansInCorrectOrder()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnClassWhenHasSuperclassScansSuperclass()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scanSuperclassAnnotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnClassWhenHasSuperclassScansSuperclass()",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnClassWhenHasSuperclassScansSuperclass()",
      "head_type": "method",
      "relation": "have",
      "tail": "superclassStrategyOnClassWhenHasSuperclassScansSuperclass() method example",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnClassWhenHasSuperclassScansSuperclass()",
      "head_type": "method",
      "relation": "have",
      "tail": "Scanning superclass annotations explanation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnClassWhenHasSuperclassScansSuperclass()",
      "head_type": "method",
      "relation": "have",
      "tail": "Design principles for scanning superclass annotations",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWhenHasInterfaceHierarchyScansInterfacesOnlyOnce()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scan annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWhenHasInterfaceHierarchyScansInterfacesOnlyOnce()",
      "head_type": "method",
      "relation": "have",
      "tail": "void typeHierarchyStrategyOnMethodWhenHasInterfaceHierarchyScansInterfacesOnlyOnce() {\n    Method source = methodFrom(Hello2Impl.class);\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"1:TestAnnotation1\");\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWhenHasInterfaceHierarchyScansInterfacesOnlyOnce()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWhenHasInterfaceHierarchyScansInterfacesOnlyOnce()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWhenHasInterfaceHierarchyScansInterfacesOnlyOnce()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.IgnorableOverrideInterface1#method()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "org.springframework.core.annotation.IgnorableOverrideInterface1#method()",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.IgnorableOverrideInterface1#method()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.IgnorableOverrideInterface1",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.GenericOverride",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "overrideAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.GenericOverride",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "testAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.GenericOverride",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.GenericOverride",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.GenericOverride",
      "head_type": "class",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenClassArrayAndStringArrayNamesMatchReturnsTrue()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "AnnotationTypeMapping",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenClassArrayAndStringArrayNamesMatchReturnsTrue()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "ReflectionUtils::invokeMethod",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenClassArrayAndStringArrayNamesMatchReturnsTrue()",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenClassArrayAndStringArrayNamesMatchReturnsTrue()",
      "head_type": "method",
      "relation": "have",
      "tail": "java.io.InputStream",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenClassArrayAndStringArrayNamesMatchReturnsTrue()",
      "head_type": "method",
      "relation": "have",
      "tail": "java.io.OutputStream",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenClassArrayAndStringArrayNamesMatchReturnsTrue()",
      "head_type": "method",
      "relation": "have",
      "tail": "AnnotationTypeMappings.forAnnotationType(ClassArrayValueWithDefault.class).get(0)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenClassArrayAndStringArrayNamesMatchReturnsTrue()",
      "head_type": "method",
      "relation": "have",
      "tail": "mapping.isEquivalentToDefaultValue(0, new String[] { \"java.io.InputStream\", \"java.io.OutputStream\" }, ReflectionUtils::invokeMethod)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenClassArrayAndStringArrayNamesMatchReturnsTrue()",
      "head_type": "method",
      "relation": "have",
      "tail": "assertThat(mapping.isEquivalentToDefaultValue(0, new String[] { \"java.io.InputStream\", \"java.io.OutputStream\" }, ReflectionUtils::invokeMethod)).isTrue()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#assertMissingTextAttribute(Map<String,Object>)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "synthesizeAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#assertMissingTextAttribute(Map<String,Object>)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "assertMissingTextAttribute",
      "tail_type": "apiFunction"
    },
    {
      "head": "synthesizeAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "assertMissingTextAttribute",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#assertMissingTextAttribute(Map<String,Object>)",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#assertMissingTextAttribute(Map<String,Object>)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "NoSuchElementException",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#assertMissingTextAttribute(Map<String,Object>)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "AnnotationWithoutDefaults",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#assertMissingTextAttribute(Map<String,Object>)",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#assertMissingTextAttribute(Map<String,Object>)",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.InheritedAnnotationInterface",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "inheritedAnnotationProcessing",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.InheritedAnnotationInterface",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "annotationInheritanceConstraints",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.InheritedAnnotationInterface",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "annotationInheritanceScenarios",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.InheritedAnnotationInterface",
      "head_type": "class",
      "relation": "have",
      "tail": "inheritedAnnotationSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.InheritedAnnotationInterface",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptsInheritedAnnotations",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.InheritedAnnotationInterface",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrinciplesInheritedAnnotations",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.InheritedAnnotationInterface",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationAttributes",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.InterfaceWithRepeated#foo()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "repeatableAnnotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.InterfaceWithRepeated#foo()",
      "head_type": "method",
      "relation": "have",
      "tail": "repeatableAnnotationsSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "repeatableAnnotationsSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "repeatableAnnotationsCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithExtendingClass()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerTypeForSerialization",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithExtendingClass()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerTypeForSerializationWithExtendingClass useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerTypeForSerializationWithExtendingClass useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "Sample Code for registerTypeForSerializationWithExtendingClass",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithExtendingClass()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithExtendingClass()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerTypeForSerializationWithExtendingClass relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "registerTypeForSerializationWithExtendingClass relatedConceptInterpretation",
      "head_type": "relatedConceptInterpretation",
      "relation": "have",
      "tail": "registerTypeForSerializationWithExtendingClass Detailed Explanation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithExtendingClass()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerTypeForSerializationWithExtendingClass designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "registerTypeForSerializationWithExtendingClass designPrincipleInterpretation",
      "head_type": "designPrincipleInterpretation",
      "relation": "have",
      "tail": "registerTypeForSerializationWithExtendingClass Design Principles",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassWithGetter",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getName",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassWithGetter",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "unmanaged",
      "tail_type": "apiFunction"
    },
    {
      "head": "getName",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "unmanaged",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassWithGetter",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassWithGetter",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.JdkProxyHintTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "proxiedInterfaces",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.JdkProxyHintTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "onReachableType",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.JdkProxyHintTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "isEqualTo",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.JdkProxyHintTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "isNotEqualTo",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.JdkProxyHintTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "JdkProxyHint",
      "tail_type": "class"
    },
    {
      "head": "JdkProxyHint",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "JdkProxyHint",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "JdkProxyHintTests",
      "head_type": "class",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#registerClass()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerType",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#registerClass()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "typeHints",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#registerClass()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "singleElement",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#registerClass()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "satisfies",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#registerClass()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "Integer.class",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#registerClass()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "MemberCategory.INVOKE_PUBLIC_CONSTRUCTORS",
      "tail_type": "class"
    },
    {
      "head": "registerType",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "typeHints",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "singleElement",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "satisfies",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "complete example",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionTypeReferenceTests#typeReferenceFromClassHasSuitableReflectionTargetName(Class<?>,String)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "typeReferenceFromClassHasSuitableReflectionTargetName",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionTypeReferenceTests#typeReferenceFromClassHasSuitableReflectionTargetName(Class<?>,String)",
      "head_type": "method",
      "relation": "have",
      "tail": "typeReferenceFromClassHasSuitableReflectionTargetName(Class<?>,String)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "typeReferenceFromClassHasSuitableReflectionTargetName(Class<?>,String)",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "ReflectionTypeReference.of(clazz).getName()",
      "tail_type": "apiFunction"
    },
    {
      "head": "typeReferenceFromClassHasSuitableReflectionTargetName(Class<?>,String)",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "assertThat(ReflectionTypeReference.of(clazz).getName()).isEqualTo(binaryName);",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.support.SpringPropertiesRuntimeHintsTests#setup()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "runtime hints setup",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.support(SpringPropertiesRuntimeHintsTests#setup()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "RuntimeHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.support(SpringPropertiesRuntimeHintsTests#setup()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "SpringFactoriesLoader",
      "tail_type": "class"
    },
    {
      "head": "runtime hints setup",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "setup runtime hints for tests",
      "tail_type": "useScenario"
    },
    {
      "head": "runtime hints setup",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "register hints using registrars from spring factories",
      "tail_type": "useSampleCode"
    },
    {
      "head": "runtime hints setup",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "used to configure the environment before tests",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "runtime hints setup",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "design principle of setting up runtime hints",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#createWithConstructorAndSameConstructorAppliesExecutableModePrecedence()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "constructorHint",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#createWithConstructorAndSameConstructorAppliesExecutableModePrecedence()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "parameterTypesHint",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#createWithConstructorAndSameConstructorAppliesExecutableModePrecedence()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "executableModeHint",
      "tail_type": "apiFunction"
    },
    {
      "head": "constructorHint",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "parameterTypes",
      "tail_type": "useScenario"
    },
    {
      "head": "constructorHint",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "executableMode",
      "tail_type": "useScenario"
    },
    {
      "head": "parameterTypesHint",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "parameterTypesList",
      "tail_type": "useScenario"
    },
    {
      "head": "executableModeHint",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "executableModeValue",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.TypeHint",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#createWithConstructorAndSameConstructorAppliesExecutableModePrecedence()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.TypeHint",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#createWithConstructorAndSameConstructorAppliesExecutableModePrecedence()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "completeExample",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests#writeWithEscapeDoubleQuote()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "writeWithEscapeDoubleQuote",
      "tail_type": "apiFunction"
    },
    {
      "head": "writeWithEscapeDoubleQuote",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "writeWithEscapeDoubleQuote() { assertStringAttribute(\"foo\\\"bar\", \"foo\\\\\\\"bar\"); }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "writeWithEscapeDoubleQuote() { assertStringAttribute(\"foo\\\"bar\", \"foo\\\\\\\"bar\"); }",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.aot.nativex.BasicJsonWriterTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "haveFuntion",
      "tail": "lazy loading",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "circular aliases are prohibited",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "multiple aliases for a single name",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "package com.healthMgr.common.email; import java.xxxx; public class OneClass { // specific code }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.SimpleAliasRegistryTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "lazy loading",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "design principles of the class or method",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#hasAnnotationOnClassWithMetaDepth()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "hasAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#hasAnnotationOnClassWithMetaDepth()",
      "head_type": "method",
      "relation": "have",
      "tail": "void hasAnnotationOnClassWithMetaDepth() { // specific code }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#hasAnnotationOnClassWithMetaDepth()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#hasAnnotationOnClassWithMetaDepth()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#hasAnnotationOnClassWithMetaDepth()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getAllAnnotationAttributesFavorsInheritedAnnotationsOverMoreLocallyDeclaredComposedAnnotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "getAllAnnotationAttributesFavorsInheritedAnnotationsOverMoreLocallyDeclaredComposedAnnotations",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getAllAnnotationAttributesFavorsInheritedAnnotationsOverMoreLocallyDeclaredComposedAnnotations()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getAllAnnotationAttributesFavorsInheritedAnnotationsOverMoreLocallyDeclaredComposedAnnotations()",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesWithSingleElementOverridingAnArrayViaAliasFor()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "findMergedAnnotationAttributes",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesWithSingleElementOverridingAnArrayViaAliasFor()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "overridingAnnotationAttributes",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesWithSingleElementOverridingAnArrayViaAliasFor()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesWithSingleElementOverridingAnArrayViaAliasFor()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesWithSingleElementOverridingAnArrayViaAliasFor()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesWithSingleElementOverridingAnArrayViaAliasFor()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "AliasForBasedSinglePackageComponentScanClass",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getMergedAnnotationOnThreeDeepMetaWithValue()",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedAnnotationOnThreeDeepMetaWithValue()",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getMergedAnnotationOnThreeDeepMetaWithValue() Sample Code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getMergedAnnotationOnThreeDeepMetaWithValue() Sample Code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "Complete Example Code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.ConventionBasedAnnotationAttributeOverrideTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getMergedAnnotationAttributesWithConventionBasedComposedAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedAnnotationAttributesWithConventionBasedComposedAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getMergedAnnotationAttributesWithConventionBasedComposedAnnotation()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getMergedAnnotationAttributesWithConventionBasedComposedAnnotation()",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.ConventionBasedAnnotationAttributeOverrideTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.ConventionBasedAnnotationAttributeOverrideTests",
      "head_type": "class",
      "relation": "have",
      "tail": "getMergedAnnotationAttributesWithConventionBasedComposedAnnotation()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAttributesTests#nestedAnnotations()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "nestedAnnotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAttributesTests#nestedAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "nestedAnnotationsSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "nestedAnnotationsSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "nestedAnnotationsCompleteSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.FilteredClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "filteredClass",
      "tail_type": "apiFunction"
    },
    {
      "head": "filteredClass",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "filteredClassConstraint",
      "tail_type": "useConstraint"
    },
    {
      "head": "filteredClass",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "filteredClassScenario",
      "tail_type": "useScenario"
    },
    {
      "head": "filteredClass",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "filteredClassSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "filteredClass",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "filteredClassRelatedConcept",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "filteredClass",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "filteredClassDesignPrinciple",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.FilteredClass",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests#sortInstancesWithPriority()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "sortInstancesWithPriority",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests#sortInstancesWithPriority()",
      "head_type": "method",
      "relation": "have",
      "tail": "sortInstancesWithPrioritySampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "sortInstancesWithPrioritySampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests#sortInstancesWithPriority()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.core.annotation.EnclosedInner",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "enclosed inner class",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.EnclosedInner",
      "head_type": "class",
      "relation": "have",
      "tail": "org.springframework.core.annotation.EnclosedInner is used to define an enclosed inner class",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.EnclosedInner",
      "head_type": "class",
      "relation": "have",
      "tail": "org.springframework.core.annotation.EnclosedInner is designed to simplify the management of inner classes",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.EnclosedInner",
      "head_type": "class",
      "relation": "have",
      "tail": "public class EnclosedInnerInner { // specific code }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnBridgeMethodScansAnnotations()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scanning annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnBridgeMethodScansAnnotations()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "bridge method handling",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnBridgeMethodScansAnnotations()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "type hierarchy strategy",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnBridgeMethodScansAnnotations()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "exception handling",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnBridgeMethodScansAnnotations()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "unit testing",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnBridgeMethodScansAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "void typeHierarchyStrategyOnBridgeMethodScansAnnotations() throws Exception { Method source = BridgedMethod.class.getDeclaredMethod(\"method\", Object.class); assertThat(source.isBridge()).isTrue(); assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\", \"1:TestAnnotation2\"); }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnBridgeMethodScansAnnotations()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnBridgeMethodScansAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "related concept interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnBridgeMethodScansAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "design principle interpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#scan(C,AnnotatedElement,SearchStrategy,Predicate<Class<?>>,AnnotationsProcessor<C,R>)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scan annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#scan(C,AnnotatedElement,SearchStrategy,Predicate<Class<?>>,AnnotationsProcessor<C,R>)",
      "head_type": "method",
      "relation": "have",
      "tail": "process annotations based on context and search strategy",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#scan(C,AnnotatedElement,SearchStrategy,Predicate<Class<?>>,AnnotationsProcessor<C,R>)",
      "head_type": "method",
      "relation": "have",
      "tail": "AnnotationsScanner is used to scan annotations",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#scan(C,AnnotatedElement,SearchStrategy,Predicate<Class<?>>,AnnotationsProcessor<C,R>)",
      "head_type": "method",
      "relation": "have",
      "tail": "Design principle: Encapsulate the process of scanning annotations to provide a flexible and reusable scanning mechanism",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#scan(C,AnnotatedElement,SearchStrategy,Predicate<Class<?>>,AnnotationsProcessor<C,R>)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScanner",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#scan(C,AnnotatedElement,SearchStrategy,Predicate<Class<?>>,AnnotationsProcessor<C,R>)",
      "head_type": "method",
      "relation": "have",
      "tail": "public class AnnotationsScannerTests {\n    public static void main(String[] args) {\n        // Example usage of scan method\n        C context = null; // Replace with actual context\n        AnnotatedElement source = null; // Replace with actual source\n        SearchStrategy searchStrategy = null; // Replace with actual search strategy\n        Predicate<Class<?>> searchEnclosingClass = null; // Replace with actual predicate\n        AnnotationsProcessor<C, R> processor = null; // Replace with actual processor\n        R result = AnnotationsScanner.scan(context, source, searchStrategy, searchEnclosingClass, processor);\n        System.out.println(\"Scanned result: \" + result);\n    }\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.WithNoAnnotations",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "org.springframework.core.annotation.WithNoAnnotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnMetaCycleAnnotatedClassWithMissingTargetMetaAnnotation()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "findClassAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnMetaCycleAnnotatedClassWithMissingTargetMetaAnnotation()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "metaCycleAnnotationConstraint",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnMetaCycleAnnotatedClassWithMissingTargetMetaAnnotation()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "metaCycleAnnotatedClassScenario",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnMetaCycleAnnotatedClassWithMissingTargetMetaAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "metaCycleAnnotatedClassSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnMetaCycleAnnotatedClassWithMissingTargetMetaAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnMetaCycleAnnotatedClassWithMissingTargetMetaAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnMetaCycleAnnotatedClassWithMissingTargetMetaAnnotation()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getAnnotationAttributesWithoutAttributeAliases()",
      "tail_type": "apiFunction"
    },
    {
      "head": "getAnnotationAttributesWithoutAttributeAliases()",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getAnnotationAttributesWithoutAttributeAliases() useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getAnnotationAttributesWithoutAttributeAliases() useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests getAnnotationAttributesWithoutAttributeAliases() sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#getValueFromNonPublicAnnotation()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "getValueFromNonPublicAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#getValueFromNonPublicAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "getValueFromNonPublicAnnotationSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getValueFromNonPublicAnnotationSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests#getValueFromNonPublicAnnotation()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.core.annotation.WebController",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "handleMappedWithValueAttribute",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.WebController",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "handleMappedWithPathAttribute",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.WebController",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getMappedWithValueAttribute",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.WebController",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getMappedWithPathAttribute",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.WebController",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "postMappedWithPathAttribute",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.WebController",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "handleMappedWithSamePathAndValueAttributes",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.WebController",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "handleMappedWithDifferentPathAndValueAttributes",
      "tail_type": "apiFunction"
    },
    {
      "head": "handleMappedWithValueAttribute",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "handleMappedWithPathAttribute",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getMappedWithValueAttribute",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getMappedWithPathAttribute",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "postMappedWithPathAttribute",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "handleMappedWithSamePathAndValueAttributes",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "handleMappedWithDifferentPathAndValueAttributes",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "handleMappedWithValueAttribute",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "handleMappedWithPathAttribute",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "getMappedWithValueAttribute",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "getMappedWithPathAttribute",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "postMappedWithPathAttribute",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "handleMappedWithSamePathAndValueAttributes",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "handleMappedWithDifferentPathAndValueAttributes",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "handleMappedWithValueAttribute",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "handleMappedWithPathAttribute",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "getMappedWithValueAttribute",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "getMappedWithPathAttribute",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "postMappedWithPathAttribute",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "handleMappedWithSamePathAndValueAttributes",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "handleMappedWithDifferentPathAndValueAttributes",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor#privateConstructorInvocationMatchesConstructorInvocationHint()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "privateConstructorInvocationMatchesConstructorInvocationHint",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor#privateConstructorInvocationMatchesConstructorInvocationHint()",
      "head_type": "method",
      "relation": "have",
      "tail": "runtimeHints.reflection().registerType(SampleClass.class, typeHint -> typeHint.withConstructor(TypeReference.listOf(String.class), ExecutableMode.INVOKE))",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor#privateConstructorInvocationMatchesConstructorInvocationHint()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "SampleClass",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodInvocationDoesNotMatchIntrospectPublicMethods()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "introspectPublicMethods",
      "tail_type": "apiFunction"
    },
    {
      "head": "introspectPublicMethods",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "registerType(SampleClass.class, MemberCategory.INTROSPECT_PUBLIC_METHODS)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "introspectPublicMethods",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "introspectPublicMethods",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "introspectPublicMethods",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "methodInvocationDoesNotMatchIntrospectPublicMethods()",
      "tail_type": "useScenario"
    },
    {
      "head": "introspectPublicMethods",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "runtimeHints.reflection().registerType(SampleClass.class, MemberCategory.INTROSPECT_PUBLIC_METHODS)",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "fieldAccessValidation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "fieldExistence",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "classExistence",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "publicFieldAccess",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "privateFieldAccess",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField",
      "head_type": "class",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "fieldAccessValidation",
      "head_type": "apiFunction",
      "relation": "associated_with",
      "tail": "SampleClass",
      "tail_type": "class"
    },
    {
      "head": "useSampleCode",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "SampleClass",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "resourcePatternMatchesResourceName",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "resourcePatternDoesNotMatchResourceName",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "resourcePatternMatchesTypeAndResourceName",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "resourcePatternMatchesTypeAndAbsoluteResourceName",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "resourcePatternMatchesTypeInDefaultPackageAndResourceName",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "resourcePatternMatchesTypeInDefaultPackageAndAbsoluteResourceName",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "resourcePatternDoesNotMatchTypeAndResourceName",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "resourceBundleMatchesBundleName",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "resourceBundleDoesNotMatchBundleName",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests",
      "head_type": "class",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "ReflectionHintsPredicates",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#getTypeUsingType()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerType",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#getTypeUsingType()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "getTypeHint",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#getTypeUsingType()",
      "head_type": "method",
      "relation": "have",
      "tail": "satisfies",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#getTypeUsingType()",
      "head_type": "method",
      "relation": "have",
      "tail": "typeWithMemberCategories",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#getTypeUsingType()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#getTypeUsingType()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#getTypeUsingType()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.ReflectionHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#getTypeUsingType()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "TypeReference",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#getTypeUsingType()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "MemberCategory",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#getTypeUsingType()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "String",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionTypeReferenceTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "typeReferenceWithNullClass",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionTypeReferenceTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "typeReferenceWithLambda",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionTypeReferenceTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "typeReferenceFromClassHasSuitableReflectionTargetName",
      "tail_type": "apiFunction"
    },
    {
      "head": "typeReferenceWithNullClass",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "nullClassInputProhibited",
      "tail_type": "useConstraint"
    },
    {
      "head": "typeReferenceWithLambda",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "lambdaClassInputProhibited",
      "tail_type": "useConstraint"
    },
    {
      "head": "typeReferenceFromClassHasSuitableReflectionTargetName",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "classWithBinaryNameVerification",
      "tail_type": "useScenario"
    },
    {
      "head": "typeReferenceFromClassHasSuitableReflectionTargetName",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "reflectionTargetNamesMethodSource",
      "tail_type": "useSampleCode"
    },
    {
      "head": "reflectionTargetNamesMethodSource",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "StreamOfArguments",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "StreamOfArguments",
      "head_type": "relatedConceptInterpretation",
      "relation": "have",
      "tail": "parameterizedTesting",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionTypeReferenceTests#typeReferenceWithNullClass()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "handle null class in type reference",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionTypeReferenceTests#typeReferenceWithNullClass()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "null class not allowed",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionTypeReferenceTests#typeReferenceWithNullClass()",
      "head_type": "method",
      "relation": "have",
      "tail": "void typeReferenceWithNullClass() { assertThatIllegalArgumentException().isThrownBy(() -> ReflectionTypeReference.of(null)); }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionTypeReferenceTests#typeReferenceWithNullClass()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.ReflectionTypeReference",
      "tail_type": "class"
    },
    {
      "head": "handle null class in type reference",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "type reference with null class",
      "tail_type": "useScenario"
    },
    {
      "head": "handle null class in type reference",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "related to handling null values in type references",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "handle null class in type reference",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "design principle to avoid null values in type references",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#registerResourceWithUnsupportedResourceType()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerResourceWithUnsupportedResourceType",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#registerResourceWithUnsupportedResourceType()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "Resource must be a ClassPathResource that exists",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#registerResourceWithUnsupportedResourceType()",
      "head_type": "method",
      "relation": "have",
      "tail": "DescriptiveResource with unsupported type",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#registerResourceWithUnsupportedResourceType()",
      "head_type": "method",
      "relation": "have",
      "tail": "IllegalArgumentException thrown for unsupported resource type",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#registerResourceWithUnsupportedResourceType()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.ResourceHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#registerResourceWithUnsupportedResourceType()",
      "head_type": "method",
      "relation": "have",
      "tail": "Resource type validation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#registerResourceWithUnsupportedResourceType()",
      "head_type": "method",
      "relation": "have",
      "tail": "Robust resource handling",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#registerResourceWithNonexistentClassPathResource()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerResourceWithNonexistentClassPathResource",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#registerResourceWithNonexistentClassPathResource()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "Resource must be a ClassPathResource that exists",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#registerResourceWithNonexistentClassPathResource()",
      "head_type": "method",
      "relation": "have",
      "tail": "void registerResourceWithNonexistentClassPathResource() {\n    ClassPathResource resource = new ClassPathResource(\"bogus\", getClass());\n    assertThatIllegalArgumentException().isThrownBy(() -> this.resourceHints.registerResource(resource)).withMessage(\"Resource must be a ClassPathResource that exists: %s\", resource);\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#registerResourceWithNonexistentClassPathResource()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.ResourceHintsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests#configureWithInvalidFilePrefix()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "validate file prefix",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests#configureWithInvalidFilePrefix()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "file prefix cannot contain '*'",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests#configureWithInvalidFilePrefix()",
      "head_type": "method",
      "relation": "have",
      "tail": "FilePatternResourceHintsRegistrar used for class path locations",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests#configureWithInvalidFilePrefix()",
      "head_type": "method",
      "relation": "have",
      "tail": "IllegalArgumentException expected for invalid file prefix",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests#configureWithInvalidFilePrefix()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "FilePatternResourceHintsRegistrar",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests#configureWithInvalidFilePrefix()",
      "head_type": "method",
      "relation": "have",
      "tail": "related concept interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests#configureWithInvalidFilePrefix()",
      "head_type": "method",
      "relation": "have",
      "tail": "design principle interpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests#registerWithClasspathLocationWithoutTrailingSlash()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "register resource pattern hints",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests#registerWithClasspathLocationWithoutTrailingSlash()",
      "head_type": "method",
      "relation": "have",
      "tail": "register resource pattern hints sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "register resource pattern hints sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests#registerWithClasspathLocationWithoutTrailingSlash() sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests#registerWithClasspathLocationWithoutTrailingSlash()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests",
      "head_type": "class",
      "relation": "have",
      "tail": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests class",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests#writeObjectWithNestedArrayOfObject()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "write JSON object with nested array",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests#writeObjectWithNestedArrayOfObject()",
      "head_type": "method",
      "relation": "have",
      "tail": "sample code for writing JSON object with nested array",
      "tail_type": "useSampleCode"
    },
    {
      "head": "sample code for writing JSON object with nested array",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "complete example for writing JSON object with nested array",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests#writeObjectWithNestedArrayOfObject()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.nativex.BasicJsonWriterTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#assertWebMapping(AnnotatedElement)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "assertWebMapping",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#assertWebMapping(AnnotatedElement)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#assertWebMapping(AnnotatedElement)",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#assertWebMapping(AnnotatedElement) sample code",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "annotationProcessing",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "metadataManagement",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "classDesign",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "nonInheritedAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "interfaceImplementation",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "subAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "springFrameworkIntegration",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "javaAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "programmingPattern",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "objectRelationalMapping",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "dependencyInjection",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "aspectOrientedProgramming",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "eventDrivenArchitecture",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "transactionManagement",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "securityAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "validationAndConstraints",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "restfulWebServices",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "microservicesArchitecture",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "cloudNativeDevelopment",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "serverlessComputing",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "reactiveProgramming",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "functionalProgramming",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "concurrencyAndMultithreading",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "databaseInteraction",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "cachingMechanisms",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "messagingAndQueueing",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "emailHandling",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "fileProcessing",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "networkingAndSockets",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": " serializationAndDeserialization",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "unitAndIntegrationTesting",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "performanceOptimization",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "loggingAndMonitoring",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "errorAndExceptionHandling",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "dependencyManagement",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "buildAndDeployment",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "versionControl",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "codeQualityAndStandards",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "apiDocumentation",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "userAuthenticationAndAuthorization",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "sessionManagement",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "userProfileManagement",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "auditLogging",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "dataEncryptionAndSecurity",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "complianceAndRegulatory",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "businessIntelligenceAndReporting",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "integrationWithExternalSystems",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "thirdPartyServices",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "serviceOrientedArchitecture",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "batchProcessing",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "realTimeProcessing",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "bigDataProcessing",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "machineLearningIntegration",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "artificialIntelligence",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "naturalLanguageProcessing",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "computerVision",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "roboticsProcessAutomation",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "internetOfThings",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "blockchainTechnology",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "quantumComputing",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "edgeComputing",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "serverlessArchitecture",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "microservicesDesignPatterns",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "containerizationAndOrchestration",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "devOpsPractices",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "continuousIntegrationAndContinuousDeployment",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "infrastructureAsCode",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "cloudSecurity",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "complianceAsCode",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "siteReliabilityEngineering",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "chaosEngineering",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "gameDevelopment",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "mobileApplicationDevelopment",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "tail": "desktopApplicationDevelopment",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#plainWhenOtherAnnotationReturnsFalse()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "Annotation Filtering",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#plainWhenOtherAnnotationReturnsFalse()",
      "head_type": "method",
      "relation": "have",
      "tail": "Sample Code for Annotation Filtering",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#plainWhenOtherAnnotationReturnsFalse()",
      "head_type": "method",
      "relation": "have",
      "tail": "Related Concept Interpretation for Annotation Filtering",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#plainWhenOtherAnnotationReturnsFalse()",
      "head_type": "method",
      "relation": "have",
      "tail": "Design Principle Interpretation for Annotation Filtering",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#plainWhenOtherAnnotationReturnsFalse()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationFilter",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#javaWhenOtherAnnotationReturnsFalse()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "AnnotationFiltering",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#javaWhenOtherAnnotationReturnsFalse()",
      "head_type": "method",
      "relation": "have",
      "tail": "Sample Code for Annotation Filtering",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#javaWhenOtherAnnotationReturnsFalse()",
      "head_type": "method",
      "relation": "have",
      "tail": "Related Concepts Interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#javaWhenOtherAnnotationReturnsFalse()",
      "head_type": "method",
      "relation": "have",
      "tail": "Design Principle Interpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#javaWhenOtherAnnotationReturnsFalse()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationFilter",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnClassWhenHasAnnotationOnBothClassesIncludesOnlyOne()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scan",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnClassWhenHasAnnotationOnBothClassesIncludesOnlyOne()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "inheritedAnnotationsStrategy",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnClassWhenHasAnnotationOnBothClassesIncludesOnlyOne()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnClassWhenHasAnnotationOnBothClassesIncludesOnlyOne()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnClassWhenHasAnnotationOnBothClassesIncludesOnlyOne()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnClassWhenHasAnnotationOnBothClassesIncludesOnlyOne()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnClassWhenHasAnnotationOnBothClassesIncludesOnlyOne()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "inheritedAnnotationsStrategyOnClassWhenHasAnnotationOnBothClassesIncludesOnlyOne()",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnClassWhenHasAnnotationOnBothClassesIncludesOnlyOne()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "inheritedAnnotationsStrategyOnClassWhenHasAnnotationOnBothClassesIncludesOnlyOne()",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnClassWhenMultipleAnnotationsScansAnnotations()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scan annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnClassWhenMultipleAnnotationsScansAnnotations()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "multiple annotations on a class",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnClassWhenMultipleAnnotationsScansAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "sample code for scanning annotations",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnClassWhenMultipleAnnotationsScansAnnotations()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "sample code for scanning annotations",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "complete example of scanning annotations",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnMethodWhenHasSuperclassScansOnlyDirect()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": " Annotations Scanning",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnMethodWhenHasSuperclassScansOnlyDirect()",
      "head_type": "method",
      "relation": "have",
      "tail": " Annotations Scanning",
      "tail_type": "useSampleCode"
    },
    {
      "head": " Annotations Scanning",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnMethodWhenHasSuperclassScansOnlyDirect()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWhenHasSuperclassScansSuperclass()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scanning annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWhenHasSuperclassScansSuperclass()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "scanning annotations on methods with superclass",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWhenHasSuperclassScansSuperclass()",
      "head_type": "method",
      "relation": "have",
      "tail": "scanning annotations on methods with superclass sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWhenHasSuperclassScansSuperclass()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "scanning annotations on methods with superclass sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "package org.springframework.core.annotation; import org.junit.jupiter.api.Test; public class AnnotationsScannerTests { @Test void typeHierarchyStrategyOnMethodWhenHasSuperclassScansSuperclass() { Method source = methodFrom(WithSingleSuperclass.class); assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\", \"1:TestAnnotation2\", \"1:TestInheritedAnnotation2\"); } }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnBridgedMethodScansAnnotations()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scanning annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnBridgedMethodScansAnnotations()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "bridged method handling",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnBridgedMethodScansAnnotations()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "type hierarchy strategy",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnBridgedMethodScansAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "void typeHierarchyStrategyOnBridgedMethodScansAnnotations() throws Exception {    Method source = BridgedMethod.class.getDeclaredMethod(\"method\", String.class);    assertThat(source.isBridge()).isFalse();    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\", \"1:TestAnnotation2\");}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnBridgedMethodScansAnnotations()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnBridgedMethodScansAnnotations()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "BridgedMethod",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnBridgedMethodScansAnnotations()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "SearchStrategy",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests",
      "head_type": "class",
      "relation": "have",
      "tail": "related concept interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests",
      "head_type": "class",
      "relation": "have",
      "tail": "design principle interpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnBridgeMethodScansAnnotations()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scanning annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnBridgeMethodScansAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "void directStrategyOnBridgeMethodScansAnnotations() throws Exception { Method source = BridgedMethod.class.getDeclaredMethod(\"method\", Object.class); assertThat(source.isBridge()).isTrue(); assertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\"); }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnBridgeMethodScansAnnotations()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnBridgeMethodScansAnnotations()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "BridgedMethod",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnBridgeMethodScansAnnotations()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "SearchStrategy.DIRECT",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#scanWhenProcessorReturnsFromDoWithAnnotationsExitsEarly()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scan",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#scanWhenProcessorReturnsFromDoWithAnnotationsExitsEarly()",
      "head_type": "method",
      "relation": "have",
      "tail": "scanWhenProcessorReturnsFromDoWithAnnotationsExitsEarly useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "scanWhenProcessorReturnsFromDoWithAnnotationsExitsEarly useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "package org.springframework.core.annotation; import java.util.ArrayList; import java.util.List; import org.junit.jupiter.api.Test; import static org.assertj.core.api.Assertions.assertThat; public class AnnotationsScannerTests { @Test void scanWhenProcessorReturnsFromDoWithAnnotationsExitsEarly() { List<Integer> indexes = new ArrayList<>(); String result = scan(this, WithSingleSuperclass.class, SearchStrategy.TYPE_HIERARCHY, (context, aggregateIndex, source, annotations) -> { indexes.add(aggregateIndex); return \"\"; }); assertThat(result).isEmpty(); assertThat(indexes).containsExactly(0); } }",
      "tail_type": "String"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#scanWhenProcessorReturnsFromDoWithAnnotationsExitsEarly()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.WithMultipleAnnotations",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "multiple annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.WithMultipleAnnotations",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.WithMultipleAnnotations",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.WithMultipleAnnotations",
      "head_type": "class",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.HierarchySuperclass#method()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "testMethod",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.HierarchySuperclass#method()",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.core.annotation.HierarchySuperclass",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.HierarchySuperclass#method()",
      "head_type": "method",
      "relation": "have",
      "tail": "testMethodSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.HierarchySuperclass#method()",
      "head_type": "method",
      "relation": "have",
      "tail": "testMethodRelatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.HierarchySuperclass#method()",
      "head_type": "method",
      "relation": "have",
      "tail": "testMethodDesignPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.BridgeMethod#method(T)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "Bridge Method",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.BridgeMethod#method(T)",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.core.annotation.BridgeMethod#method(T) Use Sample Code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.BridgeMethod#method(T)",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.core.annotation.BridgeMethod#method(T) Related Concept Interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.BridgeMethod#method(T)",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.core.annotation.BridgeMethod#method(T) Design Principle Interpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.BridgeMethod#method(T)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.BridgeMethod",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.GenericNonOverride",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "testAnnotationUsage",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.GenericNonOverride",
      "head_type": "class",
      "relation": "have",
      "tail": "testAnnotationUsageSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getAliasMapping(AnnotationTypeMapping,int)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "getAliasMapping",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getAliasMapping(AnnotationTypeMapping,int)",
      "head_type": "method",
      "relation": "have",
      "tail": "getAliasMappingSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getAliasMappingSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "getAliasMappingSampleCodeContent",
      "tail_type": "useSampleCodeContent"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationFromGenericInterface()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "find method annotation from generic interface",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationFromGenericInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "sample code for finding method annotation from generic interface",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationFromGenericInterface()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationFromGenericInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "related concept interpretation for finding method annotation from generic interface",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationFromGenericInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "design principle interpretation for finding method annotation from generic interface",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SubClassWithInheritedMetaAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "meta-annotation inheritance",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.SubClassWithInheritedMetaAnnotation",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SubClassWithInheritedMetaAnnotation",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SubClassWithInheritedMetaAnnotation",
      "head_type": "class",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.SubSubClassWithInheritedMetaAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "meta-annotation inheritance",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.SubSubClassWithInheritedMetaAnnotation",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SubSubClassWithInheritedMetaAnnotation",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.NonInheritedAnnotationInterface",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "Non-inherited annotation interface",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.NonInheritedAnnotationInterface",
      "head_type": "class",
      "relation": "have",
      "tail": "Non-inherited annotations are not inherited by subclasses",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.NonInheritedAnnotationInterface",
      "head_type": "class",
      "relation": "have",
      "tail": "Used to define annotations that should not be inherited by subclasses",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.NonInheritedAnnotationInterface",
      "head_type": "class",
      "relation": "have",
      "tail": "package org.springframework.core.annotation; public @interface NonInheritedAnnotationInterface { }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.MyRepeatableClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "repeatable annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.MyRepeatableClass",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "container annotation must have a value",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.MyRepeatableClass",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "defining repeatable annotations",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.MyRepeatableClass",
      "head_type": "class",
      "relation": "have",
      "tail": "sample code for defining repeatable annotations",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.MyRepeatableClass",
      "head_type": "class",
      "relation": "have",
      "tail": "repeatable annotations allow a set of annotations to be used as a container for another annotation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.MyRepeatableClass",
      "head_type": "class",
      "relation": "have",
      "tail": "design principle for repeatable annotations",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SimpleReflectiveProcessorTests#registerReflectiveHintsForMethod()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerReflectiveHints",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SimpleReflectiveProcessorTests#registerReflectiveHintsForMethod()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerReflectiveHintsForMethod sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerReflectiveHintsForMethod sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "registerReflectiveHintsForMethod sample code content",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SimpleReflectiveProcessorTests#registerReflectiveHintsForMethod()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "SampleBean",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SimpleReflectiveProcessorTests#registerReflectiveHintsForMethod()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "processor",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SimpleReflectiveProcessorTests#registerReflectiveHintsForMethod()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "hints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SimpleReflectiveProcessorTests#registerReflectiveHintsForMethod()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "typeHint",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SimpleReflectiveProcessorTests#registerReflectiveHintsForMethod()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "methodHint",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SimpleReflectiveProcessorTests#registerReflectiveHintsForMethod()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerReflectiveHintsForMethod related concept interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "registerReflectiveHintsForMethod related concept interpretation",
      "head_type": "relatedConceptInterpretation",
      "relation": "have",
      "tail": "registerReflectiveHintsForMethod related concept interpretation content",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SimpleReflectiveProcessorTests#registerReflectiveHintsForMethod()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerReflectiveHintsForMethod design principle interpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "registerReflectiveHintsForMethod design principle interpretation",
      "head_type": "designPrincipleInterpretation",
      "relation": "have",
      "tail": "registerReflectiveHintsForMethod design principle interpretation content",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithResolvableType()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerTypeForSerialization",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithResolvableType()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "serializationWithResolvableType",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithResolvableType()",
      "head_type": "method",
      "relation": "have",
      "tail": "SampleClassWithResolvableType.class registration",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerTypeForSerialization",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "ResolvableType constraints",
      "tail_type": "useConstraint"
    },
    {
      "head": "SampleClassWithResolvableType.class registration",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "ResolvableType.class",
      "tail_type": "class"
    },
    {
      "head": "SampleClassWithResolvableType.class registration",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "Type.class",
      "tail_type": "class"
    },
    {
      "head": "SampleClassWithResolvableType.class registration",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "Class.class",
      "tail_type": "class"
    },
    {
      "head": "SampleClassWithResolvableType.class registration",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "SampleClassWithResolvableType.class",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithResolvableType()",
      "head_type": "method",
      "relation": "have",
      "tail": "ResolvableType reflection hint registration",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithResolvableType()",
      "head_type": "method",
      "relation": "have",
      "tail": "Reflection hint design principles",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithSameProxiedInterfacesIsTrue()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "proxiedInterfaces",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithSameProxiedInterfacesIsTrue()",
      "head_type": "method",
      "relation": "have",
      "tail": "void equalsWithSameProxiedInterfacesIsTrue() {    JdkProxyHint first = new Builder().proxiedInterfaces(Function.class, Consumer.class).build();    JdkProxyHint second = new Builder().proxiedInterfaces(TypeReference.of(Function.class.getName()), TypeReference.of(Consumer.class)).build();    assertThat(first).isEqualTo(second);}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithSameProxiedInterfacesIsTrue()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "JdkProxyHint",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithSameProxiedInterfacesIsTrue()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "Builder",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithSameProxiedInterfacesIsTrue()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "TypeReference",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithSameProxiedInterfacesIsTrue()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "Function",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithSameProxiedInterfacesIsTrue()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "Consumer",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests#proxyForInterfacesMatchesProxyHint()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "proxyForInterfaces",
      "tail_type": "apiFunction"
    },
    {
      "head": "proxyForInterfaces",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "registerJdkProxy",
      "tail_type": "useScenario"
    },
    {
      "head": "registerJdkProxy",
      "head_type": "useScenario",
      "relation": "have",
      "tail": "this.runtimeHints.proxies().registerJdkProxy(FirstTestInterface.class, SecondTestInterface.class);",
      "tail_type": "useSampleCode"
    },
    {
      "head": "proxyForInterfaces",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "assertPredicateMatches(this.proxy.forInterfaces(FirstTestInterface.class, SecondTestInterface.class));",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests#proxyForInterfacesMatchesProxyHint()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests",
      "head_type": "class",
      "relation": "have",
      "tail": "ProxyHintsPredicatesTests is a test class for proxy hint predicates.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests",
      "head_type": "class",
      "relation": "have",
      "tail": "Design principle involves ensuring that proxy hint predicates work correctly with various proxy configurations.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests#proxyForInterfacesDoesNotMatchProxyHintDifferentOrder()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "proxyForInterfaces",
      "tail_type": "apiFunction"
    },
    {
      "head": "proxyForInterfaces",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "proxy registration with different interface order",
      "tail_type": "useScenario"
    },
    {
      "head": "proxyForInterfaces",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "interface order sensitivity",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests#proxyForInterfacesDoesNotMatchProxyHintDifferentOrder()",
      "head_type": "method",
      "relation": "have",
      "tail": "proxy registration with different interface order",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests#proxyForInterfacesDoesNotMatchProxyHintDifferentOrder()",
      "head_type": "method",
      "relation": "have",
      "tail": "interface order sensitivity",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests#proxyForInterfacesDoesNotMatchProxyHintDifferentOrder()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerJdkProxy requires interfaces in the same order as the proxy hint",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests#proxyForInterfacesDoesNotMatchProxyHintDifferentOrder()",
      "head_type": "method",
      "relation": "have",
      "tail": "ensuring proxy hint consistency with interface registration order",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests#proxyForInterfacesDoesNotMatchProxyHintDifferentOrder()",
      "head_type": "method",
      "relation": "have",
      "tail": "java\n@org.junit.jupiter.api.Test\nvoid proxyForInterfacesDoesNotMatchProxyHintDifferentOrder() {\n    this.runtimeHints.proxies().registerJdkProxy(SecondTestInterface.class, FirstTestInterface.class);\n    assertPredicateDoesNotMatch(this.proxy.forInterfaces(FirstTestInterface.class, SecondTestInterface.class));\n}\n",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests#assertPredicateMatches(Predicate<RuntimeHints>)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "assertPredicateMatches",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests#assertPredicateMatches(Predicate<RuntimeHints>)",
      "head_type": "method",
      "relation": "have",
      "tail": "private void assertPredicateMatches(Predicate<RuntimeHints> predicate) {\n    assertThat(predicate.test(this.runtimeHints)).isTrue();\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "assertPredicateMatches",
      "head_type": "apiFunction",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithMemberCategoryDoesNotMatchOtherCategory()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "type reflection",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithMemberCategoryDoesNotMatchOtherCategory()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "type member category matching",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithMemberCategoryDoesNotMatchOtherCategory()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "type member category mismatch scenario",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithMemberCategoryDoesNotMatchOtherCategory()",
      "head_type": "method",
      "relation": "have",
      "tail": "typeWithMemberCategoryDoesNotMatchOtherCategory sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "typeWithMemberCategoryDoesNotMatchOtherCategory sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithMemberCategoryDoesNotMatchOtherCategory()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithMemberCategoryDoesNotMatchOtherCategory()",
      "head_type": "method",
      "relation": "have",
      "tail": "related concept interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithMemberCategoryDoesNotMatchOtherCategory()",
      "head_type": "method",
      "relation": "have",
      "tail": "design principle interpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithMemberCategoryDoesNotMatchOtherCategory()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.predicate.ReflectionOnType",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor#constructorInvocationMatchesConstructorInvocationHint()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "constructor invocation matching",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor#constructorInvocationMatchesConstructorInvocationHint()",
      "head_type": "method",
      "relation": "have",
      "tail": "constructor invocation matching sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "constructor invocation matching sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "java\nimport org.springframework.aot.hint.RuntimeHints;\nimport org.springframework.aot.hint.TypeHint;\nimport org.springframework.aot.hint.predicate.ReflectionPredicate;\nimport java.util.Collections;\n\nclass ConstructorInvocationExample {\n    public static void main(String[] args) {\n        RuntimeHints runtimeHints = new RuntimeHints();\n        runtimeHints.reflection().registerType(SampleClass.class, typeHint -> typeHint.withConstructor(Collections.emptyList(), ExecutableMode.INVOKE));\n        ReflectionPredicate predicate = new ReflectionPredicate();\n        boolean matches = predicate.constructorInvocationMatchesConstructorInvocationHint(SampleClass.class.getConstructor());\n        System.out.println(\"Matches: \" + matches);\n    }\n}\n",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor#constructorInvocationMatchesConstructorInvocationHint()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "ReflectionOnConstructor",
      "tail_type": "class"
    },
    {
      "head": "ReflectionOnConstructor",
      "head_type": "class",
      "relation": "have",
      "tail": "constructor invocation reflection",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "constructor invocation reflection",
      "head_type": "relatedConceptInterpretation",
      "relation": "have",
      "tail": "Constructor invocation reflection refers to the ability of a program to inspect and manipulate the structure and behavior of its own classes and methods at runtime. This is particularly useful in frameworks like Spring, where dynamic proxying and method interception are common. Constructor invocation hints allow developers to specify which constructors should be made accessible to the runtime environment, ensuring that the necessary reflection operations can be performed efficiently and securely.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "ReflectionOnConstructor",
      "head_type": "class",
      "relation": "have",
      "tail": "reflection design principle",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "reflection design principle",
      "head_type": "designPrincipleInterpretation",
      "relation": "have",
      "tail": "The reflection design principle involves creating systems that can examine and modify their own structure and behavior at runtime. This principle is crucial for building flexible and adaptable software frameworks. By allowing components to dynamically discover and interact with each other, reflection enables powerful features such as dependency injection, aspect-oriented programming, and dynamic proxies. However, it also introduces complexity and potential performance overhead, so it must be used judiciously.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#registerClassWithCustomizer()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerType",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#registerClassWithCustomizer()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "typeHint",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#registerClassWithCustomizer()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "withMembers",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#registerClassWithCustomizer()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "typeHints",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#registerClassWithCustomizer()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "singleElement",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#registerClassWithCustomizer()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "satisfies",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#registerClassWithCustomizer()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "typeWithMemberCategories",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#registerClassWithCustomizer()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "ReflectionHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#registerClassWithCustomizer()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "TypeHint",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#registerClassWithCustomizer()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "MemberCategory",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#registerClassWithCustomizer()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#registerClassWithCustomizer()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#registerClassWithCustomizer()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.ResourcePatternHintTests#anyFileInDirectoryAtAnyDepth()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "ResourcePatternMatching",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ResourcePatternHintTests#anyFileInDirectoryAtAnyDepth()",
      "head_type": "method",
      "relation": "have",
      "tail": "ResourcePatternHintUsage",
      "tail_type": "useSampleCode"
    },
    {
      "head": "ResourcePatternHintUsage",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "ResourcePatternHintExample",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.ResourcePatternHintTests#anyFileInDirectoryAtAnyDepth()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.ResourcePatternHint",
      "tail_type": "class"
    },
    {
      "head": "ResourcePatternHintExample",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "CompleteResourcePatternHintUsage",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests#registerWithSinglePattern()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerWithSinglePattern",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests#registerWithSinglePattern()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerWithSinglePatternSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerWithSinglePatternSampleCode",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests#registerWithSinglePattern()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.aot.hint.support.SpringPropertiesRuntimeHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "SpringPropertiesRuntimeHints",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.support(SpringPropertiesRuntimeHintsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "Tests for SpringPropertiesRuntimeHints",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.support(SpringPropertiesRuntimeHintsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "author Brian Clozel",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.support(SpringPropertiesRuntimeHintsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "setup() method",
      "tail_type": "useSampleCode"
    },
    {
      "head": "setup() method",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "initializes RuntimeHints",
      "tail_type": "apiFunction"
    },
    {
      "head": "setup() method",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "loads RuntimeHintsRegistrar",
      "tail_type": "apiFunction"
    },
    {
      "head": "springPropertiesResourceHasHints() method",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "validates spring.properties hints",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests#writeWithTypeReferenceForDoubleInnerClass()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "write with type reference for double inner class",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests#writeWithTypeReferenceForDoubleInnerClass()",
      "head_type": "method",
      "relation": "have",
      "tail": "void writeWithTypeReferenceForDoubleInnerClass() {\n    assertStringAttribute(TypeReference.of(Inner.class), \"org.springframework.aot.nativex.BasicJsonWriterTests$Nested$Inner\");\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests#writeWithTypeReferenceForDoubleInnerClass()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.nativex.BasicJsonWriterTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests#writeWithTypeReferenceForDoubleInnerClass()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "TypeReference",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests#writeWithTypeReferenceForDoubleInnerClass()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "Inner",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests#writeWithTypeReferenceForDoubleInnerClass()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "Nested",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.ProxyHintsTests#empty()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "test runtime hints",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.ProxyHintsTests#empty()",
      "head_type": "method",
      "relation": "have",
      "tail": "sample code for testing runtime hints",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.nativex.ProxyHintsTests#empty()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.nativex.RuntimeHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#hasMetaAnnotationTypesOnClassWithMetaDepth2()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "hasMetaAnnotationTypes",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#hasMetaAnnotationTypesOnClassWithMetaDepth2()",
      "head_type": "method",
      "relation": "have",
      "tail": "ComposedTransactionalComponentClass",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#hasMetaAnnotationTypesOnClassWithMetaDepth2()",
      "head_type": "method",
      "relation": "have",
      "tail": "TX_NAME",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#hasMetaAnnotationTypesOnClassWithMetaDepth2()",
      "head_type": "method",
      "relation": "have",
      "tail": "Component",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#hasMetaAnnotationTypesOnClassWithMetaDepth2()",
      "head_type": "method",
      "relation": "have",
      "tail": "ComposedTransactionalComponent",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#hasMetaAnnotationTypesOnClassWithMetaDepth2()",
      "head_type": "method",
      "relation": "have",
      "tail": "hasMetaAnnotationTypesOnClassWithMetaDepth2()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "hasMetaAnnotationTypesOnClassWithMetaDepth2()",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#hasMetaAnnotationTypesOnClassWithMetaDepth2()",
      "tail_type": "method"
    },
    {
      "tail": "isAnnotated",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "assertThat",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "class hierarchy search",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "meta-annotation processing",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "annotation retrieval",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "transaction management",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "component annotation",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "composed annotation",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "annotation composition",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "annotation inheritance",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "annotation depth search",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "meta-annotation depth",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "annotation name retrieval",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "annotation class retrieval",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "annotation type retrieval",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "annotation attribute retrieval",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "annotation attribute value retrieval",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "annotation attribute type retrieval",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "annotation attribute default value retrieval",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "annotation attribute annotation retrieval",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "annotation attribute annotation value retrieval",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "annotation attribute annotation type retrieval",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "annotation attribute annotation default value retrieval",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "annotation attribute annotation annotation retrieval",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "annotation attribute annotation annotation value retrieval",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "annotation attribute annotation annotation type retrieval",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "annotation attribute annotation annotation default value retrieval",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "annotation attribute annotation annotation annotation retrieval",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "annotation attribute annotation annotation annotation value retrieval",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "annotation attribute annotation annotation annotation type retrieval",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "annotation attribute annotation annotation annotation default value retrieval",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "annotation attribute annotation annotation annotation annotation retrieval",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "annotation attribute annotation annotation annotation annotation value retrieval",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "annotation attribute annotation annotation annotation annotation type retrieval",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "annotation attribute annotation annotation annotation annotation default value retrieval",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "annotation attribute annotation annotation annotation annotation annotation retrieval",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "annotation attribute annotation annotation annotation annotation annotation value retrieval",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "annotation attribute annotation annotation annotation annotation annotation type retrieval",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "annotation attribute annotation annotation annotation annotation annotation default value retrieval",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "annotation attribute annotation annotation annotation annotation annotation annotation retrieval",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "annotation attribute annotation annotation annotation annotation annotation annotation value retrieval",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "annotation attribute annotation annotation annotation annotation annotation annotation type retrieval",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "annotation attribute annotation annotation annotation annotation annotation annotation default value retrieval",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "annotation attribute annotation annotation annotation annotation annotation annotation annotation retrieval",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "annotation attribute annotation annotation annotation annotation annotation annotation annotation value retrieval",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "annotation attribute annotation annotation annotation annotation annotation annotation annotation type retrieval",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "annotation attribute annotation annotation annotation annotation annotation annotation annotation default value retrieval",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "annotation attribute annotation annotation annotation annotation annotation annotation annotation annotation retrieval",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "annotation attribute annotation annotation annotation annotation annotation annotation annotation annotation value retrieval",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "annotation attribute annotation annotation annotation annotation annotation annotation annotation annotation type retrieval",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "annotation attribute annotation annotation annotation annotation annotation annotation annotation annotation default value retrieval",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "annotation attribute annotation annotation annotation annotation annotation annotation annotation annotation annotation retrieval",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "annotation attribute annotation annotation annotation annotation annotation annotation annotation annotation annotation value retrieval",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "annotation attribute annotation annotation annotation annotation annotation annotation annotation annotation annotation type retrieval",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "annotation attribute annotation annotation annotation annotation annotation annotation annotation annotation annotation default value retrieval",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "annotation attribute annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation retrieval",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "annotation attribute annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation value retrieval",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "annotation attribute annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation type retrieval",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "annotation attribute annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation default value retrieval",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "annotation",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnClassWithMetaDepth()"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnClassWithAttributeAliasInComposedAnnotationAndNestedAnnotationsInTargetAnnotation()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "findMergedAnnotationAttributes",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnClassWithAttributeAliasInComposedAnnotationAndNestedAnnotationsInTargetAnnotation()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "classWithAttributeAliasInComposedAnnotationAndNestedAnnotationsInTargetAnnotation",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnClassWithAttributeAliasInComposedAnnotationAndNestedAnnotationsInTargetAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnClassWithAttributeAliasInComposedAnnotationAndNestedAnnotationsInTargetAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnClassWithAttributeAliasInComposedAnnotationAndNestedAnnotationsInTargetAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnClassWithAttributeAliasInComposedAnnotationAndNestedAnnotationsInTargetAnnotation()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.ComposedImplicitAliasesContextConfigClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "ComposedImplicitAliasesContextConfigClass",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.ComposedImplicitAliasesContextConfigClass",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.ComposedImplicitAliasesContextConfigClass",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "ComposedImplicitAliasesContextConfigClass",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "useScenario",
      "tail_type": "useScenario"
    },
    {
      "head": "ComposedImplicitAliasesContextConfigClass",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "useConstraint",
      "tail_type": "useConstraint"
    },
    {
      "head": "ComposedImplicitAliasesContextConfigClass",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#matchesAnnotationWhenMatchReturnsTrue()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "matchesAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#matchesAnnotationWhenMatchReturnsTrue()",
      "head_type": "method",
      "relation": "have",
      "tail": "TestAnnotation",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#matchesAnnotationWhenMatchReturnsTrue()",
      "head_type": "method",
      "relation": "have",
      "tail": "WithTestAnnotation",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#matchesAnnotationWhenMatchReturnsTrue()",
      "head_type": "method",
      "relation": "have",
      "tail": "FILTER",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#matchesAnnotationWhenMatchReturnsTrue()",
      "head_type": "method",
      "relation": "have",
      "tail": "annotation matching",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#matchesAnnotationWhenMatchReturnsTrue()",
      "head_type": "method",
      "relation": "have",
      "tail": "unit testing",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#matchesAnnotationWhenMatchReturnsTrue()",
      "head_type": "method",
      "relation": "have",
      "tail": "java.lang.annotation.Annotation",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#matchesAnnotationWhenMatchReturnsTrue()",
      "head_type": "method",
      "relation": "have",
      "tail": "org.junit.jupiter.api.Test",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#matchesAnnotationWhenMatchReturnsTrue()",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotationFilter",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#matchesAnnotationWhenMatchReturnsTrue()",
      "head_type": "method",
      "relation": "have",
      "tail": "sample code for matchesAnnotationWhenMatchReturnsTrue()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnClassWhenHasSuperclassScansSuperclass()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scan",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnClassWhenHasSuperclassScansSuperclass()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "assertThat",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnClassWhenHasSuperclassScansSuperclass()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "containsExactly",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnClassWhenHasSuperclassScansSuperclass()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnClassWhenHasSuperclassScansSuperclass()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnClassWhenHasSuperclassScansSuperclass()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnClassWhenHasSuperclassScansSuperclass()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWithMultipleCandidatesScansAnnotations()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scan annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWithMultipleCandidatesScansAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "void typeHierarchyStrategyOnMethodWithMultipleCandidatesScansAnnotations() {\n    Method source = methodFrom(MultipleMethods.class);\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\");\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWithMultipleCandidatesScansAnnotations()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests",
      "head_type": "class",
      "relation": "have",
      "tail": "related to scanning annotations in a type hierarchy",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests",
      "head_type": "class",
      "relation": "have",
      "tail": "designed to test the scanning of annotations in a type hierarchy",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.WithSingleInterface",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "testAnnotationUsage",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.WithSingleInterface",
      "head_type": "class",
      "relation": "have",
      "tail": "testAnnotationUsageSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "testAnnotationUsageSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.core.annotation.WithSingleInterface",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.HierarchySuperSuperclass#method()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "testMethod",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.HierarchySuperSuperclass#method()",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.core.annotation.HierarchySuperSuperclass#method()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.HierarchySuperSuperclass#method()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.HierarchySuperSuperclass",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.MultipleMethods",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "testAnnotationUsage",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.MultipleMethods",
      "head_type": "class",
      "relation": "have",
      "tail": "testAnnotationUsageSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "testAnnotationUsageSampleCode",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.MultipleMethods",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getAliasMappingReturnsAttributes",
      "tail_type": "apiFunction"
    },
    {
      "head": "getAliasMappingReturnsAttributes",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getAliasMappingReturnsAttributesSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getAliasMappingReturnsAttributesSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "getAliasMappingReturnsAttributesCodeContent",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#clearCacheBeforeTests()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "clearCache",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#clearCacheBeforeTests()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationUtils",
      "tail_type": "class"
    },
    {
      "head": "clearCache",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "void clearCache() {    AnnotationUtils.clearCache();}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "clearCache",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "Clears the cache used by AnnotationUtils.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "clearCache",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "Ensure that the cache is cleared before each test to maintain a clean state.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.Leaf#overrideWithoutNewAnnotation()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "override existing annotation without adding a new one",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.Leaf#overrideWithoutNewAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.core.annotation.Leaf",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.Leaf",
      "head_type": "class",
      "relation": "have",
      "tail": "org.springframework.core.annotation",
      "tail_type": "package"
    },
    {
      "head": "org.springframework.core.annotation.Leaf",
      "head_type": "class",
      "relation": "have",
      "tail": "related to managing annotations in Spring framework",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.Leaf",
      "head_type": "class",
      "relation": "have",
      "tail": "design principle of keeping annotations simple and manageable",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.Leaf#overrideWithoutNewAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "public void overrideWithoutNewAnnotation()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.InterfaceWithAnnotatedMethod#foo()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "foo()",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.InterfaceWithAnnotatedMethod#foo()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "Order annotation",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.InterfaceWithAnnotatedMethod#foo()",
      "head_type": "method",
      "relation": "have",
      "tail": "Order annotation",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.InterfaceWithAnnotatedMethod#foo()",
      "head_type": "method",
      "relation": "have",
      "tail": "void foo();",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.InterfaceWithAnnotatedMethod#foo()",
      "head_type": "method",
      "relation": "have",
      "tail": "Order annotation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.InterfaceWithAnnotatedMethod#foo()",
      "head_type": "method",
      "relation": "have",
      "tail": "void foo();",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.InterfaceWithAnnotatedMethod#foo()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.InterfaceWithAnnotatedMethod",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.ConfigHierarchyTestCase",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "configuration hierarchy testing",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.ConfigHierarchyTestCase",
      "head_type": "class",
      "relation": "have",
      "tail": "related to Spring configuration annotations",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.ConfigHierarchyTestCase",
      "head_type": "class",
      "relation": "have",
      "tail": "design principles of configuration hierarchy",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.ConfigHierarchyTestCase",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation",
      "tail_type": "class"
    },
    {
      "tail": "testSimpleConfig",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithClass",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithMethod",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithProperty",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithField",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithConstructor",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithMultipleAnnotations",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithMetaAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithComposedAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithImplicitAliasForAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithImplicitAliasForValueAttribute",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithImplicitAliasForClass",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithImplicitAliasForMethod",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithImplicitAliasForField",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithImplicitAliasForConstructor",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithImplicitAliasForMultipleAnnotations",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithImplicitAliasForMetaAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithImplicitAliasForComposedAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithExplicitAlias",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithExplicitAliasForClass",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithExplicitAliasForMethod",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithExplicitAliasForField",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithExplicitAliasForConstructor",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithExplicitAliasForMultipleAnnotations",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithExplicitAliasForMetaAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithExplicitAliasForComposedAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithInvalidAlias",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithInvalidAliasForClass",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithInvalidAliasForMethod",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithInvalidAliasForField",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithInvalidAliasForConstructor",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithInvalidAliasForMultipleAnnotations",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithInvalidAliasForMetaAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithInvalidAliasForComposedAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithCircularAlias",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithCircularAliasForClass",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithCircularAliasForMethod",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithCircularAliasForField",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithCircularAliasForConstructor",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithCircularAliasForMultipleAnnotations",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithCircularAliasForMetaAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithCircularAliasForComposedAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithAliasShadowing",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithAliasShadowingForClass",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithAliasShadowingForMethod",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithAliasShadowingForField",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithAliasShadowingForConstructor",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithAliasShadowingForMultipleAnnotations",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithAliasShadowingForMetaAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithAliasShadowingForComposedAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithAliasShadowingAndCircularAlias",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithAliasShadowingAndCircularAliasForClass",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithAliasShadowingAndCircularAliasForMethod",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithAliasShadowingAndCircularAliasForField",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithAliasShadowingAndCircularAliasForConstructor",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithAliasShadowingAndCircularAliasForMultipleAnnotations",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithAliasShadowingAndCircularAliasForMetaAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithAliasShadowingAndCircularAliasForComposedAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithAliasShadowingAndInvalidAlias",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithAliasShadowingAndInvalidAliasForClass",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithAliasShadowingAndInvalidAliasForMethod",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithAliasShadowingAndInvalidAliasForField",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithAliasShadowingAndInvalidAliasForConstructor",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithAliasShadowingAndInvalidAliasForMultipleAnnotations",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithAliasShadowingAndInvalidAliasForMetaAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithAliasShadowingAndInvalidAliasForComposedAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithAliasShadowingAndInvalidAliasAndCircularAlias",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithAliasShadowingAndInvalidAliasAndCircularAliasForClass",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithAliasShadowingAndInvalidAliasAndCircularAliasForMethod",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithAliasShadowingAndInvalidAliasAndCircularAliasForField",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "tail": "testSimpleConfigWithAliasShadowingAndInvalidAliasAndCircularAliasForConstructor",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.SimpleConfigTestCase",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.Simple"
    },
    {
      "head": "org.springframework.core.annotation.AliasForWithMissingAttributeDeclarationClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "aliasForAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AliasForWithMissingAttributeDeclarationClass",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "missingAttributeDeclaration",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.AliasForWithMissingAttributeDeclarationClass",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AliasForWithMissingAttributeDeclarationClass",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AliasForWithMissingAttributeDeclarationClass",
      "head_type": "class",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.annotation.AnnotatedTypeTests#registerReflectionOnTargetClass()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerReflectionHints",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.annotation.AnnotatedTypeTests#registerReflectionOnTargetClass()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "assertBasicTypeHint",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.annotation.AnnotatedTypeTests#registerReflectionOnTargetClass()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "AnnotatedSimplePojo.class",
      "tail_type": "class"
    },
    {
      "head": "registerReflectionHints",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "assertBasicTypeHint",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithEmptyClass()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerTypeForSerialization",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithEmptyClass()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerTypeForSerializationWithEmptyClass useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerTypeForSerializationWithEmptyClass useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "registerTypeForSerializationWithEmptyClass sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.BindingReflectionHintsRegistrar",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithEmptyClass()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.BindingReflectionHintsRegistrar",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithEmptyClass()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerTypeForSerializationWithEmptyClass relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "registerTypeForSerializationWithEmptyClass relatedConceptInterpretation",
      "head_type": "relatedConceptInterpretation",
      "relation": "have",
      "tail": "This method is used to register type hints for serialization with an empty class.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithEmptyClass()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerTypeForSerializationWithEmptyClass designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "registerTypeForSerializationWithEmptyClass designPrincipleInterpretation",
      "head_type": "designPrincipleInterpretation",
      "relation": "have",
      "tail": "This method follows the principle of providing necessary reflection hints for efficient serialization processes.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithRecordWithProperty()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerTypeForSerialization",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithRecordWithProperty()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "SampleRecordWithProperty.class",
      "tail_type": "class"
    },
    {
      "head": "registerTypeForSerialization",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "Serialization of Record with Property",
      "tail_type": "useScenario"
    },
    {
      "head": "registerTypeForSerialization",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "Serialization of Record with Property Sample Code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerTypeForSerialization",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "Serialization of Record with Property Related Concept Interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "registerTypeForSerialization",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "Serialization of Record with Property Design Principle Interpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor#constructorInvocationMatchesInvokePublicConstructors()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "constructor invocation matching",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor#constructorInvocationMatchesInvokePublicConstructors()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "public constructors constraint",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor#constructorInvocationMatchesInvokePublicConstructors()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "public constructor invocation scenario",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor#constructorInvocationMatchesInvokePublicConstructors()",
      "head_type": "method",
      "relation": "have",
      "tail": "public constructor invocation scenario",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor#constructorInvocationMatchesInvokePublicConstructors()",
      "head_type": "method",
      "relation": "have",
      "tail": "runtime hints registration sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor#constructorInvocationMatchesInvokePublicConstructors()",
      "head_type": "method",
      "relation": "have",
      "tail": "reflection on constructor invocation interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor#constructorInvocationMatchesInvokePublicConstructors()",
      "head_type": "method",
      "relation": "have",
      "tail": "runtime hints design principle interpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor#constructorInvocationMatchesInvokePublicConstructors()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "SampleClass",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodInvocationMatchesInvokePublicMethods()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "reflection registration",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodInvocationMatchesInvokePublicMethods()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "public method invocation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodInvocationMatchesInvokePublicMethods()",
      "head_type": "method",
      "relation": "have",
      "tail": "runtime hints registration",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodInvocationMatchesInvokePublicMethods()",
      "head_type": "method",
      "relation": "have",
      "tail": "predicate matching",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodInvocationMatchesInvokePublicMethods()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "SampleClass",
      "tail_type": "class"
    },
    {
      "head": "SampleClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "public method",
      "tail_type": "apiFunction"
    },
    {
      "head": "runtime hints registration",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "reflection type registration",
      "tail_type": "apiFunction"
    },
    {
      "head": "runtime hints registration",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "member category invocation",
      "tail_type": "apiFunction"
    },
    {
      "head": "reflection type registration",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "reflection type registration sample",
      "tail_type": "useSampleCode"
    },
    {
      "head": "member category invocation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "member category invocation sample",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.SealedInterface",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "Sealed Interface Handling",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.SealedInterface",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "Java Version Compatibility",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.aot.hint.SealedInterface",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "Advanced AOT Compilation",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.SealedInterface",
      "head_type": "class",
      "relation": "have",
      "tail": "Sample Code for Sealed Interface",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.SealedInterface",
      "head_type": "class",
      "relation": "have",
      "tail": "Detailed Explanation of Sealed Interfaces",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.SealedInterface",
      "head_type": "class",
      "relation": "have",
      "tail": "Design Principles of Sealed Interfaces",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.SealedInterface",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.TypeHint",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#registerMethod()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerMethod",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#registerMethod()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerMethodSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerMethodSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.aot.hint.ReflectionHintsTests#registerMethod()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.aot.hint.SimpleTypeReferenceTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "handle primitives",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.SimpleTypeReferenceTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "handle arrays",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.SimpleTypeReferenceTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "handle CglibProxy name",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.SimpleTypeReferenceTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "handle nested CglibProxy name",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.SimpleTypeReferenceTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "handle type reference in root package",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.SimpleTypeReferenceTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "handle invalid class name",
      "tail_type": "apiFunction"
    },
    {
      "head": "handle primitives",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode for handle primitives",
      "tail_type": "useSampleCode"
    },
    {
      "head": "handle arrays",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode for handle arrays",
      "tail_type": "useSampleCode"
    },
    {
      "head": "handle CglibProxy name",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode for handle CglibProxy name",
      "tail_type": "useSampleCode"
    },
    {
      "head": "handle nested CglibProxy name",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode for handle nested CglibProxy name",
      "tail_type": "useSampleCode"
    },
    {
      "head": "handle type reference in root package",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode for handle type reference in root package",
      "tail_type": "useSampleCode"
    },
    {
      "head": "handle invalid class name",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode for handle invalid class name",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.SimpleTypeReferenceTests",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation for SimpleTypeReferenceTests",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.SimpleTypeReferenceTests",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation for SimpleTypeReferenceTests",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.SimpleTypeReferenceTests#arrays()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "generateStreamOfArguments",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.SimpleTypeReferenceTests#arrays()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "generateStreamOfArguments",
      "head_type": "apiFunction",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.SimpleTypeReferenceTests",
      "tail_type": "class"
    },
    {
      "head": "useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "completeSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#createWithMethodWithSameMethodUpdatesEntry()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "TypeHint creation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#createWithMethodWithSameMethodUpdatesEntry()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "MethodHint configuration",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#createWithMethodWithSameMethodUpdatesEntry()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "Assertion of method hint properties",
      "tail_type": "apiFunction"
    },
    {
      "head": "TypeHint creation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "TypeHint.of(TypeReference.of(String.class))",
      "tail_type": "useSampleCode"
    },
    {
      "head": "MethodHint configuration",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "builder.withMethod(\"valueOf\", parameterTypes, ExecutableMode.INVOKE)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "Assertion of method hint properties",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "assertMethodHint(...)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.TypeHint",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#createWithMethodWithSameMethodUpdatesEntry()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.TypeHint",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#createWithMethodWithSameMethodUpdatesEntry()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.MethodHint",
      "tail_type": "class"
    },
    {
      "head": "TypeHint creation",
      "head_type": "apiFunction",
      "relation": "relatedConceptInterpretation",
      "tail": "Type hints are used to provide information about types to the ahead-of-time (AOT) processing engine, allowing for optimizations and code generation.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "MethodHint configuration",
      "head_type": "apiFunction",
      "relation": "relatedConceptInterpretation",
      "tail": "Method hints specify details about methods, such as their name, parameter types, and the mode of execution, which can be introspection or invocation.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "Assertion of method hint properties",
      "head_type": "apiFunction",
      "relation": "relatedConceptInterpretation",
      "tail": "Assertions are used to verify that the method hints are configured correctly, ensuring that the properties like method name, parameter types, and execution mode match the expected values.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "TypeHint creation",
      "head_type": "apiFunction",
      "relation": "designPrincipleInterpretation",
      "tail": "The design principle behind type hint creation is to provide a way to describe types and their members to the AOT engine, facilitating ahead-of-time processing and optimizations.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "MethodHint configuration",
      "head_type": "apiFunction",
      "relation": "designPrincipleInterpretation",
      "tail": "The design principle for method hint configuration is to allow fine-grained control over method-level details, enabling precise optimization and generation of code during AOT processing.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "Assertion of method hint properties",
      "head_type": "apiFunction",
      "relation": "designPrincipleInterpretation",
      "tail": "The design principle for asserting method hint properties is to ensure that the configuration of method hints is correct, maintaining the integrity and reliability of the AOT processing engine.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests#writeWithEscapeNewline()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "writeWithEscapeNewline",
      "tail_type": "apiFunction"
    },
    {
      "head": "writeWithEscapeNewline",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "writeWithEscapeNewline() sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "writeWithEscapeNewline() sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "Complete example of writeWithEscapeNewline()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.nativex.ProxyHintsTests#shouldWriteMultipleEntries()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerJdkProxy",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.ProxyHintsTests#shouldWriteMultipleEntries()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "assertEquals",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.ProxyHintsTests#shouldWriteMultipleEntries()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "RuntimeHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.ProxyHintsTests#shouldWriteMultipleEntries()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "Function",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.ProxyHintsTests#shouldWriteMultipleEntries()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "Consumer",
      "tail_type": "class"
    },
    {
      "head": "registerJdkProxy",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "registerJdkProxy_useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "assertEquals",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "assertEquals_useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerJdkProxy_useSampleCode",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.aot.nativex.ProxyHintsTests#shouldWriteMultipleEntries()",
      "tail_type": "method"
    },
    {
      "head": "assertEquals_useSampleCode",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.aot.nativex.ProxyHintsTests#shouldWriteMultipleEntries()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#names(Class<?>)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "extract names from classes",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#names(Class<?>)",
      "head_type": "method",
      "relation": "have",
      "tail": "private Set<String> names(Class<?>... classes) { return stream(classes).map(Class::getName).collect(toSet()); }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#names(Class<?>)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.ConcreteClassWithInheritedAnnotation#handleFromInterface()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "handleFromInterface",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.ConcreteClassWithInheritedAnnotation#handleFromInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.core.annotation.ConcreteClassWithInheritedAnnotation",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.StringGenericParameter",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getFor",
      "tail_type": "apiFunction"
    },
    {
      "head": "getFor",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "org.springframework.core.annotation.StringGenericParameter",
      "tail_type": "class"
    },
    {
      "head": "getFor",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getFor(Class<String>)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getFor(Class<String>)",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.StringGenericParameter",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.TransactionalService",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "transactional operation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.TransactionalService",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "ensuring transaction integrity",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.TransactionalService",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "database transaction management",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.TransactionalService",
      "head_type": "class",
      "relation": "have",
      "tail": "related to transaction management",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.TransactionalService",
      "head_type": "class",
      "relation": "have",
      "tail": "design principle of transactional integrity",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.TransactionalService",
      "head_type": "class",
      "relation": "have",
      "tail": "sample code for transactional operation",
      "tail_type": "useSampleCode"
    },
    {
      "head": "transactional operation",
      "head_type": "apiFunction",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.TransactionalService",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#matchesAnnotationClassWhenMatchReturnsTrue()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "matchesAnnotationClass",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#matchesAnnotationClassWhenMatchReturnsTrue()",
      "head_type": "method",
      "relation": "have",
      "tail": "void matchesAnnotationClassWhenMatchReturnsTrue() { Class<TestAnnotation> annotationType = TestAnnotation.class; assertThat(FILTER.matches(annotationType)).isTrue(); }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#matchesAnnotationClassWhenMatchReturnsTrue()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationFilterTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#matchesAnnotationClassWhenMatchReturnsTrue()",
      "head_type": "method",
      "relation": "have",
      "tail": "This method tests the matches function of the AnnotationFilter with an expected outcome of true.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#matchesAnnotationClassWhenMatchReturnsTrue()",
      "head_type": "method",
      "relation": "have",
      "tail": "The design principle here is to ensure that the AnnotationFilter correctly identifies matching annotations.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnMethodWhenNotAnnotatedScansNone()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scanning for annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnMethodWhenNotAnnotatedScansNone()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "method must not be annotated",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnMethodWhenNotAnnotatedScansNone()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "scanning methods without annotations",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnMethodWhenNotAnnotatedScansNone()",
      "head_type": "method",
      "relation": "have",
      "tail": "void directStrategyOnMethodWhenNotAnnotatedScansNone() {\n    Method source = methodFrom(WithNoAnnotations.class);\n    assertThat(scan(source, SearchStrategy.DIRECT)).isEmpty();\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnMethodWhenNotAnnotatedScansNone()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnMethodWhenNotAnnotatedScansNone()",
      "head_type": "method",
      "relation": "have",
      "tail": "This method tests the scenario where a method is scanned for annotations when no annotations are present. It uses a direct search strategy and expects the result to be empty.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnMethodWhenNotAnnotatedScansNone()",
      "head_type": "method",
      "relation": "have",
      "tail": "The design principle behind this method is to ensure that the annotation scanning mechanism correctly handles methods without annotations, verifying that no annotations are mistakenly identified when none are present.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.WithSingleAnnotation#method()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "testAnnotationUsage",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.WithSingleAnnotation#method()",
      "head_type": "method",
      "relation": "have",
      "tail": "sampleCodeForTestAnnotationUsage",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.WithSingleAnnotation#method()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.TestAnnotation1",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.Ignorable",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "testAnnotationUsage",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.Ignorable",
      "head_type": "class",
      "relation": "have",
      "tail": "testAnnotationUsageSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "testAnnotationUsageSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.core.annotation.Ignorable",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findAnnotationDeclaringClassForAllScenarios()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "findAnnotationDeclaringClass",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findAnnotationDeclaringClassForAllScenarios()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "class-level annotation",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findAnnotationDeclaringClassForAllScenarios()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "inherited class-level annotation",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findAnnotationDeclaringClassForAllScenarios()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "non-inherited class-level annotation",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findAnnotationDeclaringClassForAllScenarios()",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests#findAnnotationDeclaringClassForAllScenarios() sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findAnnotationDeclaringClassForAllScenarios() sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests#findAnnotationDeclaringClassForAllScenarios() sample code content",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findAnnotationDeclaringClassForAllScenarios() sample code content",
      "head_type": "relatedConceptInterpretation",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests#findAnnotationDeclaringClassForAllScenarios() sample code content details",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#isAnnotationDeclaredLocallyForAllScenarios()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "isAnnotationDeclaredLocally",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#isAnnotationDeclaredLocallyForAllScenarios()",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationUtils",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#isAnnotationDeclaredLocallyForAllScenarios()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#isAnnotationDeclaredLocallyForAllScenarios()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#isAnnotationDeclaredLocallyForAllScenarios()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#getDeclaredRepeatableAnnotationsDeclaredOnClass()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "getDeclaredRepeatableAnnotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#getDeclaredRepeatableAnnotationsDeclaredOnClass()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationUtils",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "relatedConceptInterpretation",
      "head_type": "relatedConceptInterpretation",
      "relation": "have",
      "tail": "Repeatable Annotations",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "designPrincipleInterpretation",
      "head_type": "designPrincipleInterpretation",
      "relation": "have",
      "tail": "Simplifying Annotation Handling",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationWithImplicitAliasesWithMissingDefaultValues()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "synthesizeAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "synthesizeAnnotation",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "AnnotationConfigurationException",
      "tail_type": "useConstraint"
    },
    {
      "head": "synthesizeAnnotation",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "ImplicitAliasesWithMissingDefaultValuesContextConfig",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationWithImplicitAliasesWithMissingDefaultValues()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationWithImplicitAliasesWithMissingDefaultValues()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationWithImplicitAliasesWithMissingDefaultValues()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationWithImplicitAliasesWithMissingDefaultValues()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "ImplicitAliasesWithMissingDefaultValuesContextConfigClass",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationWithImplicitAliasesWithMissingDefaultValues()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "ImplicitAliasesWithMissingDefaultValuesContextConfig",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.GroupOfCharsClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "grouping characters",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.GroupOfCharsClass",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.GroupOfCharsClass",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.annotation.AnnotatedMethodTests#registerReflectionForStaticField()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerReflectionHints",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.annotation.AnnotatedMethodTests#registerReflectionForStaticField()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "assertBasicTypeHint",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.annotation.AnnotatedMethodTests#registerReflectionForStaticField()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "SimplePojo",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.annotation.AnnotatedMethodTests#registerReflectionForStaticField()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "RegistrationMethod",
      "tail_type": "class"
    },
    {
      "head": "registerReflectionHints",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "registerReflectionHints",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "assertBasicTypeHint",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "assertBasicTypeHint",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "SimplePojo",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "SimplePojo",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "RegistrationMethod",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "RegistrationMethod",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.annotation.RegistrationMethodWithoutTarget#doReflection()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "reflectionRegistration",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.annotation.RegistrationMethodWithoutTarget#doReflection()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "reflectionConstraints",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.aot.hint.annotation.RegistrationMethodWithoutTarget#doReflection()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "reflectionUsageScenario",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.annotation.RegistrationMethodWithoutTarget#doReflection()",
      "head_type": "method",
      "relation": "have",
      "tail": "reflectionSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.annotation.RegistrationMethodWithoutTarget#doReflection()",
      "head_type": "method",
      "relation": "have",
      "tail": "reflectionRelatedConcepts",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.annotation.RegistrationMethodWithoutTarget#doReflection()",
      "head_type": "method",
      "relation": "have",
      "tail": "reflectionDesignPrinciples",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.annotation.RegistrationMethodWithoutTarget#doReflection()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.annotation.RegistrationMethodWithoutTarget",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForAnnotationOnMethodAndField()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerTypeForAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForAnnotationOnMethodAndField()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "SampleClassWithJsonProperty",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForAnnotationOnMethodAndField()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "CustomDeserializer1",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForAnnotationOnMethodAndField()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "CustomDeserializer2",
      "tail_type": "class"
    },
    {
      "head": "registerTypeForAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "registerTypeForAnnotationOnMethodAndField() useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerTypeForAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "registerTypeForAnnotationOnMethodAndField() relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "registerTypeForAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "registerTypeForAnnotationOnMethodAndField() designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.ExecutableHintTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "testExecutableHintBuilding",
      "tail_type": "apiFunction"
    },
    {
      "head": "testExecutableHintBuilding",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "buildingExecutableHints",
      "tail_type": "useScenario"
    },
    {
      "head": "buildingExecutableHints",
      "head_type": "useScenario",
      "relation": "have",
      "tail": "ExecutableHintExampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "testExecutableHintBuilding",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "ExecutableHintRelatedConcepts",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "testExecutableHintBuilding",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "ExecutableHintDesignPrinciples",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithSameInstanceIsTrue()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "proxiedInterfaces",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithSameInstanceIsTrue()",
      "head_type": "method",
      "relation": "have",
      "tail": "JdkProxyHint",
      "tail_type": "class"
    },
    {
      "head": "JdkProxyHint",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "Function",
      "tail_type": "class"
    },
    {
      "head": "JdkProxyHint",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "Consumer",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithSameInstanceIsTrue()",
      "head_type": "method",
      "relation": "have",
      "tail": "Builder",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithSameInstanceIsTrue()",
      "head_type": "method",
      "relation": "have",
      "tail": "assertThat(hint).isEqualTo(hint);",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithSameInstanceIsTrue()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithSameInstanceIsTrue()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithSameProxiedInterfacesAndDifferentConditionIsFalse()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "proxiedInterfaces",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithSameProxiedInterfacesAndDifferentConditionIsFalse()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "onReachableType",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithSameProxiedInterfacesAndDifferentConditionIsFalse()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "isNotEqualTo",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithSameProxiedInterfacesAndDifferentConditionIsFalse()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.JdkProxyHint",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithSameProxiedInterfacesAndDifferentConditionIsFalse()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.TypeReference",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithSameProxiedInterfacesAndDifferentConditionIsFalse()",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithSameProxiedInterfacesAndDifferentConditionIsFalse() useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor#privateConstructorInvocationDoesNotMatchInvokePublicConstructors()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "privateConstructorInvocationDoesNotMatchInvokePublicConstructors",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor#privateConstructorInvocationDoesNotMatchInvokePublicConstructors()",
      "head_type": "method",
      "relation": "have",
      "tail": "privateConstructorInvocationDoesNotMatchInvokePublicConstructors",
      "tail_type": "useSampleCode"
    },
    {
      "head": "privateConstructorInvocationDoesNotMatchInvokePublicConstructors",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.aot.hint.predicate.ReflectionOnConstructor#privateConstructorInvocationDoesNotMatchInvokePublicConstructors()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodIntrospectionMatchesIntrospectDeclaredMethods()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "introspection",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodIntrospectionMatchesIntrospectDeclaredMethods()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "declared methods",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodIntrospectionMatchesIntrospectDeclaredMethods()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "private method",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodIntrospectionMatchesIntrospectDeclaredMethods()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodIntrospectionMatchesIntrospectDeclaredMethods()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodIntrospectionMatchesIntrospectDeclaredMethods()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodIntrospectionMatchesIntrospectDeclaredMethods()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "SampleClass",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodIntrospectionMatchesInvokeDeclaredMethods()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "privateMethodIntrospection",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodIntrospectionMatchesInvokeDeclaredMethods()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "methodVisibilityConstraint",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodIntrospectionMatchesInvokeDeclaredMethods()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "introspectionOfPrivateMethods",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodIntrospectionMatchesInvokeDeclaredMethods()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodIntrospectionMatchesInvokeDeclaredMethods()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodIntrospectionMatchesInvokeDeclaredMethods()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodIntrospectionMatchesInvokeDeclaredMethods()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "SampleClass",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registerType",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registerTypeIfPresentRegistersExistingClass",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registerTypeIfPresentIgnoresMissingClass",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getTypeUsingType",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getTypeUsingTypeReference",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getTypeForNonExistingType",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registerTypeReusesBuilder",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registerClass",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registerClassWithCustomizer",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registerTypesAppliesTheSameHints",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registerField",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registerTypeIgnoresLambda",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registerConstructor",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registerConstructorTwiceUpdatesExistingEntry",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registerMethod",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registerMethodTwiceUpdatesExistingEntry",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registerOnInterfaces",
      "tail_type": "apiFunction"
    },
    {
      "head": "registerType",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "ReflectionHints",
      "tail_type": "class"
    },
    {
      "head": "registerTypeIfPresentRegistersExistingClass",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "ReflectionHints",
      "tail_type": "class"
    },
    {
      "head": "registerTypeIfPresentIgnoresMissingClass",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "ReflectionHints",
      "tail_type": "class"
    },
    {
      "head": "getTypeUsingType",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "ReflectionHints",
      "tail_type": "class"
    },
    {
      "head": "getTypeUsingTypeReference",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "ReflectionHints",
      "tail_type": "class"
    },
    {
      "head": "getTypeForNonExistingType",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "ReflectionHints",
      "tail_type": "class"
    },
    {
      "head": "registerTypeReusesBuilder",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "ReflectionHints",
      "tail_type": "class"
    },
    {
      "head": "registerClass",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "ReflectionHints",
      "tail_type": "class"
    },
    {
      "head": "registerClassWithCustomizer",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "ReflectionHints",
      "tail_type": "class"
    },
    {
      "head": "registerTypesAppliesTheSameHints",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "ReflectionHints",
      "tail_type": "class"
    },
    {
      "head": "registerField",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "ReflectionHints",
      "tail_type": "class"
    },
    {
      "head": "registerTypeIgnoresLambda",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "ReflectionHints",
      "tail_type": "class"
    },
    {
      "head": "registerConstructor",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "ReflectionHints",
      "tail_type": "class"
    },
    {
      "head": "registerConstructorTwiceUpdatesExistingEntry",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "ReflectionHints",
      "tail_type": "class"
    },
    {
      "head": "registerMethod",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "ReflectionHints",
      "tail_type": "class"
    },
    {
      "head": "registerMethodTwiceUpdatesExistingEntry",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "ReflectionHints",
      "tail_type": "class"
    },
    {
      "head": "registerOnInterfaces",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "ReflectionHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "ReflectionHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.TestType",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "field",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.TestType",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "setName",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.TestType",
      "head_type": "class",
      "relation": "have",
      "tail": "field",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.TestType",
      "head_type": "class",
      "relation": "have",
      "tail": "setName",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.FirstInterface#first()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "void first()",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.StaticNested",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "static nested class handling",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.StaticNested",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "must be used within the same outer class",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.aot.hint.StaticNested",
      "head_type": "class",
      "relation": "applied_to",
      "tail": " scenarios involving static nested classes",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.StaticNested",
      "head_type": "class",
      "relation": "have",
      "tail": "sample code for handling static nested classes",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.StaticNested",
      "head_type": "class",
      "relation": "have",
      "tail": "interpretation of related concepts for static nested classes",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.StaticNested",
      "head_type": "class",
      "relation": "have",
      "tail": "design principles behind static nested class handling",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.StaticNested",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.TypeReference",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#registerTypeWithNestedType()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerTypeWithNestedType",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#registerTypeWithNestedType()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerTypeWithNestedTypeSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerTypeWithNestedTypeSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.aot.hint.ResourceHintsTests#registerTypeWithNestedType()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#registerTypeWithNestedType()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.ResourceHintsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#registerResourceWithExistingClassPathResource()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerResourceWithExistingClassPathResource",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#registerResourceWithExistingClassPathResource()",
      "head_type": "method",
      "relation": "have",
      "tail": "ResourceHintsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#registerResourceWithExistingClassPathResource()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerResourceWithExistingClassPathResource",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerResourceWithExistingClassPathResource",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "ResourceHintsTests",
      "tail_type": "class"
    },
    {
      "head": "registerResourceWithExistingClassPathResource",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "registerResourceWithExistingClassPathResource",
      "tail_type": "useSampleCode"
    },
    {
      "head": "ResourceHintsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "registerResourceWithExistingClassPathResource",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.support.PathMatchingResourcePatternResolverRuntimeHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "RuntimeHints",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.support.PathMatchingResourcePatternResolverRuntimeHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "SpringFactoriesLoader",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.support.PathMatchingResourcePatternResolverRuntimeHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "RuntimeHintsRegistrar",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.support.PathMatchingResourcePatternResolverRuntimeHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "ClassUtils.getDefaultClassLoader()",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.support.PathMatchingResourcePatternResolverRuntimeHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "RuntimeHintsPredicates.reflection().onType()",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.support.PathMatchingResourcePatternResolverRuntimeHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "TypeReference.of()",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.support.PathMatchingResourcePatternResolverRuntimeHintsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "PathMatchingResourcePatternResolverRuntimeHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.support.PathMatchingResourcePatternResolverRuntimeHintsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "private RuntimeHints hints",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.support.PathMatchingResourcePatternResolverRuntimeHintsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "setup() method",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.support.PathMatchingResourcePatternResolverRuntimeHintsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "EclipseOsgiFileLocatorHasHints() method",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.support.PathMatchingResourcePatternResolverRuntimeHintsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "author Brian Clozel",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.nativex.RuntimeHintsWriterTests#writeJson(RuntimeHints)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "writeJson",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.RuntimeHintsWriterTests#writeJson(RuntimeHints)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "RuntimeHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.RuntimeHintsWriterTests#writeJson(RuntimeHints)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "StringWriter",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.RuntimeHintsWriterTests#writeJson(RuntimeHints)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "BasicJsonWriter",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.RuntimeHintsWriterTests#writeJson(RuntimeHints)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "RuntimeHintsWriter",
      "tail_type": "class"
    },
    {
      "head": "writeJson",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "sampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getMetaAnnotationTypesOnClassWithMetaDepth2",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMetaAnnotationTypesOnClassWithMetaDepth2",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getMetaAnnotationTypesOnClassWithMetaDepth2() sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getMetaAnnotationTypesOnClassWithMetaDepth2() sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "Complete example of getMetaAnnotationTypesOnClassWithMetaDepth2()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnSubInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "findMergedAnnotationAttributes",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnSubInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnSubInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnSubInheritedAnnotationInterface()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "javaxAnnotationTypeViaFindMergedAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "javaxAnnotationTypeViaFindMergedAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "javaxAnnotationTypeViaFindMergedAnnotation()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "javaxAnnotationTypeViaFindMergedAnnotation()",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "ResourceHolder.class",
      "tail_type": "class"
    },
    {
      "head": "javaxAnnotationTypeViaFindMergedAnnotation()",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "Resource.class",
      "tail_type": "class"
    },
    {
      "head": "javaxAnnotationTypeViaFindMergedAnnotation()",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "SpringAppConfigClass.class",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMethodAnnotationFromGenericInterface()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "find method annotation from generic interface",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMethodAnnotationFromGenericInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "sample code for finding method annotation from generic interface",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMethodAnnotationFromGenericInterface()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMethodAnnotationFromGenericInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "related concept interpretation for finding method annotation from generic interface",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMethodAnnotationFromGenericInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "design principle interpretation for finding method annotation from generic interface",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.ConventionBasedAnnotationAttributeOverrideTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getMergedAnnotationAttributesWithConventionBasedComposedAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.ConventionBasedAnnotationAttributeOverrideTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getMergedAnnotationAttributesWithHalfConventionBasedAndHalfAliasedComposedAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.ConventionBasedAnnotationAttributeOverrideTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getMergedAnnotationAttributesWithInvalidConventionBasedComposedAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.ConventionBasedAnnotationAttributeOverrideTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "findMergedAnnotationAttributesWithSingleElementOverridingAnArrayViaConvention",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.ConventionBasedAnnotationAttributeOverrideTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "findMergedAnnotationWithLocalAliasesThatConflictWithAttributesInMetaAnnotationByConvention",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.ConventionBasedAnnotationAttributeOverrideTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "findMergedAnnotationWithSingleElementOverridingAnArrayViaConvention",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedAnnotationAttributesWithConventionBasedComposedAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getMergedAnnotationAttributesWithHalfConventionBasedAndHalfAliasedComposedAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getMergedAnnotationAttributesWithInvalidConventionBasedComposedAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "findMergedAnnotationAttributesWithSingleElementOverridingAnArrayViaConvention",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "findMergedAnnotationWithLocalAliasesThatConflictWithAttributesInMetaAnnotationByConvention",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "findMergedAnnotationWithSingleElementOverridingAnArrayViaConvention",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getMergedAnnotationAttributesWithHalfConventionBasedAndHalfAliasedComposedAnnotation",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "useConstraint",
      "tail_type": "useConstraint"
    },
    {
      "head": "getMergedAnnotationAttributesWithInvalidConventionBasedComposedAnnotation",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "useConstraint",
      "tail_type": "useConstraint"
    },
    {
      "head": "getMergedAnnotationAttributesWithConventionBasedComposedAnnotation",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "useScenario",
      "tail_type": "useScenario"
    },
    {
      "head": "getMergedAnnotationAttributesWithHalfConventionBasedAndHalfAliasedComposedAnnotation",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "useScenario",
      "tail_type": "useScenario"
    },
    {
      "head": "getMergedAnnotationAttributesWithInvalidConventionBasedComposedAnnotation",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "useScenario",
      "tail_type": "useScenario"
    },
    {
      "head": "findMergedAnnotationAttributesWithSingleElementOverridingAnArrayViaConvention",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "useScenario",
      "tail_type": "useScenario"
    },
    {
      "head": "findMergedAnnotationWithLocalAliasesThatConflictWithAttributesInMetaAnnotationByConvention",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "useScenario",
      "tail_type": "useScenario"
    },
    {
      "head": "findMergedAnnotationWithSingleElementOverridingAnArrayViaConvention",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "useScenario",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.ConventionBasedAnnotationAttributeOverrideTests",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.ConventionBasedAnnotationAttributeOverrideTests",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.ComposedTransactionalClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "transaction management",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.ComposedTransactionalClass",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "transaction propagation behavior rules",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.ComposedTransactionalClass",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "method level transaction control",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.ComposedTransactionalClass",
      "head_type": "class",
      "relation": "have",
      "tail": "related to Spring's transaction management",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.ComposedTransactionalClass",
      "head_type": "class",
      "relation": "have",
      "tail": "design principles of transaction management in Spring",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.ComposedTransactionalClass",
      "head_type": "class",
      "relation": "have",
      "tail": "sample code for transaction management",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.ComposedTransactionalClass",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.transaction.annotation.Transactional",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.ValueAttributeMetaMetaClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "value attribute meta meta class",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.ValueAttributeMetaMetaClass",
      "head_type": "class",
      "relation": "have",
      "tail": "related concept interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.ValueAttributeMetaMetaClass",
      "head_type": "class",
      "relation": "have",
      "tail": "design principle interpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.EnclosedStaticStatic",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "enclosedStaticStatic",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.EnclosedStaticStatic",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.EnclosedStaticStatic",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "matchesAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "matchesAnnotationClass",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "plainWhenJavaLangAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "javaWhenJavaLangAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "noneReturnsFalse",
      "tail_type": "apiFunction"
    },
    {
      "head": "matchesAnnotation",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "WithTestAnnotation",
      "tail_type": "useScenario"
    },
    {
      "head": "matchesAnnotation",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "WithOtherAnnotation",
      "tail_type": "useScenario"
    },
    {
      "head": "matchesAnnotationClass",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "TestAnnotation",
      "tail_type": "useScenario"
    },
    {
      "head": "matchesAnnotationClass",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "OtherAnnotation",
      "tail_type": "useScenario"
    },
    {
      "head": "plainWhenJavaLangAnnotation",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "Retention",
      "tail_type": "useScenario"
    },
    {
      "head": "javaWhenJavaLangAnnotation",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "Retention",
      "tail_type": "useScenario"
    },
    {
      "head": "noneReturnsFalse",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "Retention",
      "tail_type": "useScenario"
    },
    {
      "head": "noneReturnsFalse",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "Nullable",
      "tail_type": "useScenario"
    },
    {
      "head": "noneReturnsFalse",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "TestAnnotation",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests",
      "head_type": "class",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "AnnotationFilter",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationIntrospectionFailureTests#filteredTypeThrowsTypeNotPresentException()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "filteredTypeThrowsTypeNotPresentException",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationIntrospectionFailureTests#filteredTypeThrowsTypeNotPresentException()",
      "head_type": "method",
      "relation": "have",
      "tail": "filteredTypeThrowsTypeNotPresentException useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "filteredTypeThrowsTypeNotPresentException useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotationIntrospectionFailureTests useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.FilteredType",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "filteredTypeAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "filteredTypeAnnotation",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "annotationUsageConstraint",
      "tail_type": "useConstraint"
    },
    {
      "head": "filteredTypeAnnotation",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "componentScanningScenario",
      "tail_type": "useScenario"
    },
    {
      "head": "filteredTypeAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "filteredTypeSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "filteredTypeAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "filteredTypeAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.FilteredType",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnClassWhenHasSuperclassScansOnlyDirect()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scan",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnClassWhenHasSuperclassScansOnlyDirect()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "SearchStrategy.DIRECT",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnClassWhenHasSuperclassScansOnlyDirect()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "WithSingleSuperclass",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnClassWhenHasSuperclassScansOnlyDirect()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "TestAnnotation1",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnClassWhenHasSuperclassScansOnlyDirect()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnClassWhenHasSuperclassScansOnlyDirect()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnClassWhenHasSuperclassScansOnlyDirect()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnClassWhenHasSuperclassScansOnlyInherited()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scanning inherited annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnClassWhenHasSuperclassScansOnlyInherited()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "scanning annotations on classes with superclass",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnClassWhenHasSuperclassScansOnlyInherited()",
      "head_type": "method",
      "relation": "have",
      "tail": "void inheritedAnnotationsStrategyOnClassWhenHasSuperclassScansOnlyInherited() {\n    Class<?> source = WithSingleSuperclass.class;\n    assertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\", \"1:TestInheritedAnnotation2\");\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnClassWhenHasSuperclassScansOnlyInherited()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnClassWhenHasSuperclassScansOnlyInherited()",
      "head_type": "method",
      "relation": "have",
      "tail": "This method tests the inherited annotations strategy on a class with a superclass, ensuring that only inherited annotations are scanned.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnClassWhenHasSuperclassScansOnlyInherited()",
      "head_type": "method",
      "relation": "have",
      "tail": "The design principle behind this method is to ensure that the annotation scanning mechanism correctly identifies and processes inherited annotations, adhering to the specified search strategy.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodWhenHasInterfaceDoesNotIncludeInterfaces()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scan annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodWhenHasInterfaceDoesNotIncludeInterfaces()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "test method",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodWhenHasInterfaceDoesNotIncludeInterfaces()",
      "head_type": "method",
      "relation": "have",
      "tail": "test method",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodWhenHasInterfaceDoesNotIncludeInterfaces()",
      "head_type": "method",
      "relation": "have",
      "tail": "void superclassStrategyOnMethodWhenHasInterfaceDoesNotIncludeInterfaces() {\n    Method source = methodFrom(WithSingleInterface.class);\n    assertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\"0:TestAnnotation1\");\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodWhenHasInterfaceDoesNotIncludeInterfaces()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodWhenHasInterfaceDoesNotIncludeInterfaces()",
      "head_type": "method",
      "relation": "have",
      "tail": "This method tests the behavior of the annotation scanning process when dealing with classes that have interfaces. It verifies that the scanning strategy correctly identifies annotations on the superclass but does not include annotations from implemented interfaces.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodWhenHasInterfaceDoesNotIncludeInterfaces()",
      "head_type": "method",
      "relation": "have",
      "tail": "The design principle behind this method is to ensure that the annotation scanning process is precise and only targets the relevant annotations based on the specified scanning strategy. This helps in maintaining clarity and avoiding unnecessary processing of annotations that are not relevant to the current context.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#methodFrom(Class<?>)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "findMethod",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#methodFrom(Class<?>)",
      "head_type": "method",
      "relation": "have",
      "tail": "ReflectionUtils.findMethod(type, \"method\")",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#methodFrom(Class<?>)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "ReflectionUtils",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#methodFrom(Class<?>)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.BridgedMethod#method(String)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "method execution",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.BridgedMethod#method(String)",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "method argument type must match",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.BridgedMethod#method(String)",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "unit testing",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.BridgedMethod#method(String)",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.core.annotation.BridgedMethod",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.BridgedMethod#method(String)",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.BridgedMethod#method(String)",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.BridgedMethod#method(String)",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.GenericOverrideInterface",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "void method(T argument);",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.GenericOverrideInterface",
      "head_type": "class",
      "relation": "have",
      "tail": "void method(T argument);",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#assertMixedImplicitAndExplicitAliases(Class<? extends Annotation>,String)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "assertMixedImplicitAndExplicitAliases",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#assertMixedImplicitAndExplicitAliases(Class<? extends Annotation>,String)",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "AnnotationConfigurationException",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#assertMixedImplicitAndExplicitAliases(Class<? extends Annotation>,String)",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "AnnotationTypeMappings.forAnnotationType(annotationType)",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#assertMixedImplicitAndExplicitAliases(Class<? extends Annotation>,String)",
      "head_type": "method",
      "relation": "have",
      "tail": "assertMixedImplicitAndExplicitAliases Sample Code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#assertMixedImplicitAndExplicitAliases(Class<? extends Annotation>,String)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "AnnotationTypeMappings",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#assertMixedImplicitAndExplicitAliases(Class<? extends Annotation>,String)",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#assertMixedImplicitAndExplicitAliases(Class<? extends Annotation>,String)",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getAliasMappingWhenThreeDeepReturnsMappedAttributes",
      "tail_type": "apiFunction"
    },
    {
      "head": "getAliasMappingWhenThreeDeepReturnsMappedAttributes",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getAliasMappingWhenThreeDeepReturnsMappedAttributes() sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getAliasMappingWhenThreeDeepReturnsMappedAttributes() sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "package org.springframework.core.annotation;\n\nimport org.junit.jupiter.api.Test;\n\npublic class AnnotationTypeMappingsTests {\n\n    @Test\n    void getAliasMappingWhenThreeDeepReturnsMappedAttributes() {\n        AnnotationTypeMappings mappings = AnnotationTypeMappings.forAnnotationType(ThreeDeepA.class);\n        AnnotationTypeMapping mappingA = mappings.get(0);\n        assertThat(getAliasMapping(mappingA, 0)).isNull();\n        assertThat(getAliasMapping(mappingA, 1)).isNull();\n        assertThat(getAliasMapping(mappingA, 2)).isNull();\n        assertThat(getAliasMapping(mappingA, 3)).isNull();\n        assertThat(getAliasMapping(mappingA, 4)).isNull();\n        AnnotationTypeMapping mappingB = mappings.get(1);\n        assertThat(getAliasMapping(mappingB, 0).getName()).isEqualTo(\"a1\");\n        assertThat(getAliasMapping(mappingB, 1).getName()).isEqualTo(\"a1\");\n        AnnotationTypeMapping mappingC = mappings.get(2);\n        assertThat(getAliasMapping(mappingC, 0).getName()).isEqualTo(\"a1\");\n        assertThat(getAliasMapping(mappingC, 1).getName()).isEqualTo(\"a4\");\n    }\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationTypeMapping",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMapping",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationTypeMappings",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappings",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.ThreeDeepA",
      "tail_type": "class"
    },
    {
      "head": "getAliasMappingWhenThreeDeepReturnsMappedAttributes",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "relatedConceptInterpretation",
      "head_type": "relatedConceptInterpretation",
      "relation": "have",
      "tail": "AnnotationTypeMappings is used to determine the mapping of annotation types to their respective attributes. In this test, it is used to get the mappings for the annotation type ThreeDeepA. The getAliasMapping method is then used to retrieve the alias mapping for each of the annotation type mappings. The test checks if the alias mappings are null or if they match the expected values.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "getAliasMappingWhenThreeDeepReturnsMappedAttributes",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "designPrincipleInterpretation",
      "head_type": "designPrincipleInterpretation",
      "relation": "have",
      "tail": "The design principle behind this method is to ensure that the alias mappings for annotation types are correctly determined and returned. This is important for maintaining consistency and accuracy in the mapping of annotation types to their respective attributes.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNestedAnnotationAndExtractedValuesMatchReturnsTrueAndValueSuppliedAsMap()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "AnnotationTypeMapping",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNestedAnnotationAndExtractedValuesMatchReturnsTrueAndValueSuppliedAsMap()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "extractFromMap",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNestedAnnotationAndExtractedValuesMatchReturnsTrueAndValueSuppliedAsMap()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "relatedConceptInterpretation",
      "head_type": "relatedConceptInterpretation",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNestedAnnotationAndExtractedValuesMatchReturnsTrueAndValueSuppliedAsMap()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNestedAnnotationAndExtractedValuesMatchReturnsTrueAndValueSuppliedAsMap()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "designPrincipleInterpretation",
      "head_type": "designPrincipleInterpretation",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNestedAnnotationAndExtractedValuesMatchReturnsTrueAndValueSuppliedAsMap()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNestedAnnotationAndExtractedValuesMatchReturnsTrueAndValueSuppliedAsMap()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "useSampleCode",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenNestedAnnotationAndExtractedValuesMatchReturnsTrueAndValueSuppliedAsMap()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationOnLeaf()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "find method annotation on leaf",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationOnLeaf()",
      "head_type": "method",
      "relation": "have",
      "tail": "sample code for finding method annotation on leaf",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationOnLeaf()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationOnLeaf()",
      "head_type": "method",
      "relation": "have",
      "tail": "related concept interpretation for finding method annotation on leaf",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationOnLeaf()",
      "head_type": "method",
      "relation": "have",
      "tail": "design principle interpretation for finding method annotation on leaf",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnAnnotatedClassWithMissingTargetMetaAnnotation()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "findClassAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnAnnotatedClassWithMissingTargetMetaAnnotation()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "missingTargetMetaAnnotation",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnAnnotatedClassWithMissingTargetMetaAnnotation()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "annotatedClassWithMissingTargetMetaAnnotation",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnAnnotatedClassWithMissingTargetMetaAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnAnnotatedClassWithMissingTargetMetaAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnAnnotatedClassWithMissingTargetMetaAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnAnnotatedClassWithMissingTargetMetaAnnotation()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getAnnotationAttributesWithAttributeAliasesWithDifferentValues",
      "tail_type": "apiFunction"
    },
    {
      "head": "getAnnotationAttributesWithAttributeAliasesWithDifferentValues",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "AnnotationConfigurationException",
      "tail_type": "useConstraint"
    },
    {
      "head": "getAnnotationAttributesWithAttributeAliasesWithDifferentValues",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "WebMapping",
      "tail_type": "useScenario"
    },
    {
      "head": "getAnnotationAttributesWithAttributeAliasesWithDifferentValues",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getAnnotationAttributesWithAttributeAliasesWithDifferentValues() Sample Code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getAnnotationAttributesWithAttributeAliasesWithDifferentValues",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getAnnotationAttributesWithAttributeAliasesWithDifferentValues() Related Concept Interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "getAnnotationAttributesWithAttributeAliasesWithDifferentValues",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getAnnotationAttributesWithAttributeAliasesWithDifferentValues() Design Principle Interpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "WebController",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "WebMapping",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "AnnotationConfigurationException",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.Root#fromInterfaceImplementedByRoot()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "interface implementation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.Root#fromInterfaceImplementedByRoot()",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.core.annotation.Root#fromInterfaceImplementedByRoot() sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.Root#fromInterfaceImplementedByRoot() sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.core.annotation.Root#fromInterfaceImplementedByRoot() code content",
      "tail_type": "codeContent"
    },
    {
      "head": "org.springframework.core.annotation.SubNonInheritedAnnotationInterface",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "SubNonInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.SubNonInheritedAnnotationInterface",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SubNonInheritedAnnotationInterface",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AbstractDoesNotImplementInterfaceWithAnnotatedMethod",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "interface validation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AbstractDoesNotImplementInterfaceWithAnnotatedMethod",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "no circular dependencies",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.AbstractDoesNotImplementInterfaceWithAnnotatedMethod",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "ensuring proper interface implementation",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AbstractDoesNotImplementInterfaceWithAnnotatedMethod",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AbstractDoesNotImplementInterfaceWithAnnotatedMethod",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AbstractDoesNotImplementInterfaceWithAnnotatedMethod",
      "head_type": "class",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AbstractDoesNotImplementInterfaceWithAnnotatedMethod",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationUtils",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.ImplementsInterfaceWithGenericAnnotatedMethod",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "foo method",
      "tail_type": "apiFunction"
    },
    {
      "head": "foo method",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "foo method sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "foo method sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "Complete sample code for foo method",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.BaseClassWithGenericAnnotatedMethod",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "abstract void foo(T t)",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.BaseClassWithGenericAnnotatedMethod",
      "head_type": "class",
      "relation": "have",
      "tail": "Order annotation",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.BaseClassWithGenericAnnotatedMethod",
      "head_type": "class",
      "relation": "have",
      "tail": "Generic Method",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.BaseClassWithGenericAnnotatedMethod",
      "head_type": "class",
      "relation": "have",
      "tail": "Abstract Method",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.BaseClassWithGenericAnnotatedMethod",
      "head_type": "class",
      "relation": "have",
      "tail": "Design Principle: Abstraction",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.BaseClassWithGenericAnnotatedMethod",
      "head_type": "class",
      "relation": "have",
      "tail": "Sample Code: \n\npackage org.example;\n\nimport org.springframework.core.annotation.Order;\n\n@Order\npublic abstract class GenericAnnotatedMethodExample {\n    abstract <T> void foo(T t);\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassWithListProperty#setNames(List<String>)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "Setting List of Names",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassWithListProperty#setNames(List<String>)",
      "head_type": "method",
      "relation": "have",
      "tail": "Set names for the SampleClassWithListProperty",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassWithListProperty#setNames(List<String>)",
      "head_type": "method",
      "relation": "have",
      "tail": "This method sets the names for the SampleClassWithListProperty. It takes a List of Strings as input and does not return any value.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassWithListProperty#setNames(List<String>)",
      "head_type": "method",
      "relation": "have",
      "tail": "The method follows the principle of encapsulation, allowing the modification of the internal state of the object while maintaining controlled access.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.ExecutableHintTests#builtWithAppliesMode()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "ExecutableHint building",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ExecutableHintTests#builtWithAppliesMode()",
      "head_type": "method",
      "relation": "have",
      "tail": "ExecutableHint building sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "ExecutableHint building sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "Complete example of building ExecutableHint",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.ExecutableHintTests#builtWithAppliesMode()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.ExecutableHint",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ExecutableHintTests#builtWithAppliesMode()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.ExecutableMode",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodInvocationDoesNotMatchMethodHint()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "reflectionHintRegistration",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodInvocationDoesNotMatchMethodHint()",
      "head_type": "method",
      "relation": "have",
      "tail": "runtimeHints.reflection().registerType(SampleClass.class, typeHint -> typeHint.withMethod(\"publicMethod\", Collections.emptyList(), ExecutableMode.INTROSPECT))",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodInvocationDoesNotMatchMethodHint()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "SampleClass",
      "tail_type": "class"
    },
    {
      "head": "reflectionHintRegistration",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "methodHintApplication",
      "tail_type": "useScenario"
    },
    {
      "head": "reflectionHintRegistration",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "methodHintConstraints",
      "tail_type": "useConstraint"
    },
    {
      "head": "reflectionHintRegistration",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "reflectionHintRegistration",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodInvocationDoesNotMatchMethodHint()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "privateMethodInvocationDoesNotMatchMethodHint",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodInvocationDoesNotMatchMethodHint()",
      "head_type": "method",
      "relation": "have",
      "tail": "runtimeHints.reflection().registerType(SampleClass.class, typeHint -> typeHint.withMethod(\"privateMethod\", Collections.emptyList(), ExecutableMode.INTROSPECT));",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodInvocationDoesNotMatchMethodHint()",
      "head_type": "method",
      "relation": "have",
      "tail": "assertPredicateDoesNotMatch(reflection.onMethod(SampleClass.class, \"privateMethod\").invoke());",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodInvocationDoesNotMatchMethodHint()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "SampleClass",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodInvocationDoesNotMatchMethodHint()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "reflection",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#publicFieldAccessMatchesFieldHint()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "publicFieldAccessHint",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#publicFieldAccessMatchesFieldHint()",
      "head_type": "method",
      "relation": "have",
      "tail": "publicFieldAccessHintSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "publicFieldAccessHintSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.aot.hint.predicate.ReflectionOnField#publicFieldAccessMatchesFieldHint()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnField#publicFieldAccessMatchesFieldHint()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "SampleClass",
      "tail_type": "class"
    },
    {
      "head": "publicFieldAccessHint",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "publicFieldAccessScenario",
      "tail_type": "useScenario"
    },
    {
      "head": "publicFieldAccessHint",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "fieldAccessibilityConstraint",
      "tail_type": "useConstraint"
    },
    {
      "head": "publicFieldAccessHint",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "publicFieldAccessHintInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "publicFieldAccessHint",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "designPrincipleForPublicFieldAccess",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.SealedClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "Sealed Class Hinting",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.SealedClass",
      "head_type": "class",
      "relation": "have",
      "tail": "Sealed classes are used to indicate a restricted set of subclasses.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.SealedClass",
      "head_type": "class",
      "relation": "have",
      "tail": "Design principle focuses on compile-time safety and reducing reflection usage.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.SealedClass",
      "head_type": "class",
      "relation": "have",
      "tail": "public class SealedClassExample { \n    public static void main(String[] args) { \n        // Example usage of SealedClass \n    } \n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.ParentType#first()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "override",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ParentType#first()",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.aot.hint.ParentType#first() sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.ChildType#second()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "org.springframework.aot.hint.ChildType#second()",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ChildType#second()",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.aot.hint.ChildType#second()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests#registerWithClasspathLocationUsingResourceClasspathPrefix()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerWithClasspathLocationUsingResourceClasspathPrefix",
      "tail_type": "apiFunction"
    },
    {
      "head": "registerWithClasspathLocationUsingResourceClasspathPrefix",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "registerWithClasspathLocationUsingResourceClasspathPrefixSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerWithClasspathLocationUsingResourceClasspathPrefixSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "Sample Code for registerWithClasspathLocationUsingResourceClasspathPrefix",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests#registerWithClasspathLocationUsingResourceClasspathPrefixAndTrailingSlash()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "register resource hints",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests#registerWithClasspathLocationUsingResourceClasspathPrefixAndTrailingSlash()",
      "head_type": "method",
      "relation": "have",
      "tail": "classpath resource registration",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests#registerWithClasspathLocationUsingResourceClasspathPrefixAndTrailingSlash()",
      "head_type": "method",
      "relation": "have",
      "tail": "register resource hints sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "register resource hints sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "java\n@Test\nvoid registerWithClasspathLocationUsingResourceClasspathPrefixAndTrailingSlash() {\n    FilePatternResourceHintsRegistrar.forClassPathLocations(\"classpath:/META-INF\")\n            .withFilePrefixes(\"test\")\n            .withFileExtensions(\".txt\")\n            .registerHints(this.hints, null);\n    assertThat(this.hints.resourcePatternHints())\n            .singleElement()\n            .satisfies(includes(\"/\", \"META-INF\", \"META-INF/test*.txt\"));\n}\n",
      "tail_type": "code"
    },
    {
      "head": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests#registerWithClasspathLocationUsingResourceClasspathPrefixAndTrailingSlash()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests",
      "head_type": "class",
      "relation": "have",
      "tail": "resource hints registration",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "resource hints registration",
      "head_type": "relatedConceptInterpretation",
      "relation": "have",
      "tail": "Resource hints registration is a process used in Spring's Ahead-of-Time (AOT) framework to specify which resources an application will need at runtime. This helps in optimizing the application by providing hints about the resources that should be included or excluded, thus reducing the overall size and improving the startup time of the application.",
      "tail_type": "description"
    },
    {
      "head": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests",
      "head_type": "class",
      "relation": "have",
      "tail": "design principle of resource hints registrar",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "design principle of resource hints registrar",
      "head_type": "designPrincipleInterpretation",
      "relation": "have",
      "tail": "The design principle behind the FilePatternResourceHintsRegistrar is to provide a flexible and efficient way to register resource hints based on file patterns. This registrar allows developers to specify file prefixes and extensions, enabling fine-grained control over which resources are included in the hints. This approach ensures that only necessary resources are considered, optimizing the application's resource management.",
      "tail_type": "description"
    },
    {
      "head": "org.springframework.cglib.core.SpringNamingPolicyTests#getClassName(String)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "getClassName",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.core.SpringNamingPolicyTests#getClassName(String)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.core.SpringNamingPolicyTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.core.SpringNamingPolicyTests",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.core.SpringNamingPolicyTests",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.core.SpringNamingPolicyTests#getClassName(String)",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#hasMetaAnnotationTypesOnClassWithMetaDepth0()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "hasMetaAnnotationTypes",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#hasMetaAnnotationTypesOnClassWithMetaDepth0()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtils",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#hasMetaAnnotationTypesOnClassWithMetaDepth0()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#hasMetaAnnotationTypesOnClassWithMetaDepth0()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#hasMetaAnnotationTypesOnClassWithMetaDepth0()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesInheritedFromBridgedMethod()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "findMergedAnnotationAttributes",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesInheritedFromBridgedMethod()",
      "head_type": "method",
      "relation": "have",
      "tail": "sample code for using findMergedAnnotationAttributes",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesInheritedFromBridgedMethod()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesInheritedFromBridgedMethod()",
      "head_type": "method",
      "relation": "have",
      "tail": "related concept interpretation for findMergedAnnotationAttributes",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesInheritedFromBridgedMethod()",
      "head_type": "method",
      "relation": "have",
      "tail": "design principle interpretation for findMergedAnnotationAttributes",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributes(AnnotatedElement,Class<? extends Annotation>)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "findMergedAnnotationAttributes",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributes(AnnotatedElement,Class<? extends Annotation>)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "AnnotatedElementUtils",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributes(AnnotatedElement,Class<? extends Annotation>)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "AnnotationAttributes",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributes(AnnotatedElement,Class<? extends Annotation>)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "AnnotatedElement",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributes(AnnotatedElement,Class<? extends Annotation>)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "Class<? extends Annotation>",
      "tail_type": "class"
    },
    {
      "head": "findMergedAnnotationAttributes",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "sampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.NonAnnotatedClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "NonAnnotatedClass",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.NonAnnotatedClass",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.NonAnnotatedClass",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.InheritedAnnotationInterface",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "inheritedAnnotationProcessing",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.InheritedAnnotationInterface",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "annotationInheritanceRules",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.InheritedAnnotationInterface",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "classLevelAnnotationUsage",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.InheritedAnnotationInterface",
      "head_type": "class",
      "relation": "have",
      "tail": "sampleCodeForInheritedAnnotation",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.InheritedAnnotationInterface",
      "head_type": "class",
      "relation": "have",
      "tail": "annotationInheritanceConcept",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.InheritedAnnotationInterface",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrinciplesOfInheritedAnnotations",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.InheritedAnnotationInterface",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationAttributes",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests#sortInstancesWithSubclass()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "sortInstancesWithSubclass",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests#sortInstancesWithSubclass()",
      "head_type": "method",
      "relation": "have",
      "tail": "sortInstancesWithSubclass useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "sortInstancesWithSubclass useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "package org.springframework.core.annotation;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class AnnotationAwareOrderComparatorTests {\n    @Test\n    void sortInstancesWithSubclass() {\n        List<Object> list = new ArrayList<>();\n        list.add(new B());\n        list.add(new C());\n        AnnotationAwareOrderComparator.sort(list);\n        assertThat(list).hasExactlyElementsOfTypes(C.class, B.class);\n    }\n}",
      "tail_type": "String"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnClassWhenNotAnnotatedScansNone()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scanning for annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnClassWhenNotAnnotatedScansNone()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "scanning unannotated classes",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnClassWhenNotAnnotatedScansNone()",
      "head_type": "method",
      "relation": "have",
      "tail": "void directStrategyOnClassWhenNotAnnotatedScansNone() {\n    Class<?> source = WithNoAnnotations.class;\n    assertThat(scan(source, SearchStrategy.DIRECT)).isEmpty();\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnClassWhenNotAnnotatedScansNone()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnClassWhenNotAnnotatedScansNone()",
      "head_type": "method",
      "relation": "have",
      "tail": "This method tests the scenario where a class with no annotations is scanned using a direct search strategy, expecting no annotations to be found.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnClassWhenNotAnnotatedScansNone()",
      "head_type": "method",
      "relation": "have",
      "tail": "The design principle here is to ensure that the annotation scanning mechanism correctly handles classes without annotations, verifying that no false positives are returned when using the direct search strategy.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnClassHierarchyScansInCorrectOrder()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scan",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnClassHierarchyScansInCorrectOrder()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "assertThat",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnClassHierarchyScansInCorrectOrder()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "containsExactly",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnClassHierarchyScansInCorrectOrder()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnClassHierarchyScansInCorrectOrder()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnClassHierarchyScansInCorrectOrder()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnClassHierarchyScansInCorrectOrder()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.WithHierarchy",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "org.springframework.core.annotation.WithHierarchy",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.WithHierarchy",
      "head_type": "class",
      "relation": "have",
      "tail": "org.springframework.core.annotation.WithHierarchy",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.WithHierarchy",
      "head_type": "class",
      "relation": "have",
      "tail": "org.springframework.core.annotation.WithHierarchy",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.WithHierarchy",
      "head_type": "class",
      "relation": "have",
      "tail": "org.springframework.core.annotation.WithHierarchy",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.IgnorableOverrideInterface1",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "void method();",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenHasRepeatingMetaAnnotationReturnsMapping()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "annotation type mapping",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenHasRepeatingMetaAnnotationReturnsMapping()",
      "head_type": "method",
      "relation": "have",
      "tail": "annotation type mapping for repeating meta annotations",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenHasRepeatingMetaAnnotationReturnsMapping()",
      "head_type": "method",
      "relation": "have",
      "tail": "annotation type mapping for repeating meta annotations sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenHasRepeatingMetaAnnotationReturnsMapping()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationTypeMappings",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenHasRepeatingMetaAnnotationReturnsMapping()",
      "head_type": "method",
      "relation": "have",
      "tail": "annotation type mapping for repeating meta annotations related concept interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenHasRepeatingMetaAnnotationReturnsMapping()",
      "head_type": "method",
      "relation": "have",
      "tail": "annotation type mapping for repeating meta annotations design principle interpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForNonMetaAnnotated()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "Annotation Type Mapping",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForNonMetaAnnotated()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "Alias For Non Meta Annotated",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForNonMetaAnnotated()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "Annotation Configuration Exception",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForNonMetaAnnotated()",
      "head_type": "method",
      "relation": "have",
      "tail": "Sample Code for Annotation Type Mapping",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForNonMetaAnnotated()",
      "head_type": "method",
      "relation": "have",
      "tail": "Related Concept Interpretation for Annotation Type Mapping",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForNonMetaAnnotated()",
      "head_type": "method",
      "relation": "have",
      "tail": "Design Principle Interpretation for Annotation Type Mapping",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForNonMetaAnnotated()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationTypeMappings",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getAnnotationTypeReturnsAnnotationType",
      "tail_type": "apiFunction"
    },
    {
      "head": "getAnnotationTypeReturnsAnnotationType",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getAnnotationTypeReturnsAnnotationTypeSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getAnnotationTypeReturnsAnnotationTypeSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "getAnnotationTypeReturnsAnnotationTypeSampleCodeContent",
      "tail_type": "useSampleCodeContent"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationNotAnnotated()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "find method annotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationNotAnnotated()",
      "head_type": "method",
      "relation": "have",
      "tail": "sample code for finding method annotation",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationNotAnnotated()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationUtils",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationNotAnnotated()",
      "head_type": "method",
      "relation": "have",
      "tail": "related concept interpretation for finding method annotation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationNotAnnotated()",
      "head_type": "method",
      "relation": "have",
      "tail": "design principle interpretation for finding method annotation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#isAnnotationInheritedForAllScenarios()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "isAnnotationInherited",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#isAnnotationInheritedForAllScenarios()",
      "head_type": "method",
      "relation": "have",
      "tail": "isAnnotationInheritedForAllScenarios sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "isAnnotationInheritedForAllScenarios sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#isAnnotationInheritedForAllScenarios()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "related concept interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "design principle interpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.Root#annotatedOnRoot()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "annotatedOnRoot",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.Root#annotatedOnRoot()",
      "head_type": "method",
      "relation": "have",
      "tail": "Order annotation with value 27",
      "tail_type": "useSampleCode"
    },
    {
      "head": "Order annotation with value 27",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.core.annotation.Order",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.Leaf",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "Order",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.Leaf",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "Meta1",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.Leaf",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "MetaMeta",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.Leaf",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "Override",
      "tail_type": "apiFunction"
    },
    {
      "head": "Order",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "Meta1",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "MetaMeta",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "Override",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.Leaf",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.Leaf",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SubTransactionalAndOrderedClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "transaction management",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.SubTransactionalAndOrderedClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "annotation processing",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.SubTransactionalAndOrderedClass",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "classpath scanning constraints",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.SubTransactionalAndOrderedClass",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "transactional component configuration",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.SubTransactionalAndOrderedClass",
      "head_type": "class",
      "relation": "have",
      "tail": "related concept interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SubTransactionalAndOrderedClass",
      "head_type": "class",
      "relation": "have",
      "tail": "design principle interpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SubTransactionalAndOrderedClass",
      "head_type": "class",
      "relation": "have",
      "tail": "sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.SubTransactionalAndOrderedClass",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.transaction.annotation.Transactional",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.SubOfImplementsInterfaceWithAnnotatedMethod#foo()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "foo()",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.SubOfImplementsInterfaceWithAnnotatedMethod#foo()",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.core.annotation.SubOfImplementsInterfaceWithAnnotatedMethod",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.SubOfImplementsInterfaceWithAnnotatedMethod",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.SubOfImplementsInterfaceWithAnnotatedMethod#foo()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SubOfImplementsInterfaceWithAnnotatedMethod#foo()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SubOfImplementsInterfaceWithAnnotatedMethod#foo()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.InterfaceWithGenericAnnotatedMethod#foo(T)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "foo(T)",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.InterfaceWithGenericAnnotatedMethod#foo(T)",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "Order annotation",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.InterfaceWithGenericAnnotatedMethod#foo(T)",
      "head_type": "method",
      "relation": "have",
      "tail": "Order annotation",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.InterfaceWithGenericAnnotatedMethod#foo(T)",
      "head_type": "method",
      "relation": "have",
      "tail": "Generic method",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.InterfaceWithGenericAnnotatedMethod#foo(T)",
      "head_type": "method",
      "relation": "have",
      "tail": "Design principle for generic methods",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.InterfaceWithGenericAnnotatedMethod#foo(T)",
      "head_type": "method",
      "relation": "have",
      "tail": "Sample code for foo(T)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.InterfaceWithGenericAnnotatedMethod",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.InterfaceWithGenericAnnotatedMethod#foo(T)",
      "tail_type": "method"
    },
    {
      "tail": "foo(String)",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "apiFunction"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "tail": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.ExtendsBase"
    },
    {
      "head": "org.springframework.aot.hint.SampleEmptyClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "emptyClassFunctionality",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.SampleEmptyClass",
      "head_type": "class",
      "relation": "have",
      "tail": "usedInAOTContext",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.SampleEmptyClass",
      "head_type": "class",
      "relation": "have",
      "tail": "sampleEmptyClassCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.SampleEmptyClass",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedToAOTProcessing",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.SampleEmptyClass",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrinciplesOfEmptyClass",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassWithNoProperty#name()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "return a string value",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassWithNoProperty#name()",
      "head_type": "method",
      "relation": "have",
      "tail": "always returns null",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassWithNoProperty#name()",
      "head_type": "method",
      "relation": "have",
      "tail": "This method is used to return a string value, but it always returns null. It might be used as a placeholder or a stub in the testing or development phase.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassWithNoProperty#name()",
      "head_type": "method",
      "relation": "have",
      "tail": "The design principle behind this method could be to provide a simple and straightforward way to handle string values, ensuring that the method's behavior is predictable and easy to understand. However, returning null might indicate a need for further implementation or handling of special cases.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassC#getString()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "return empty string",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassC#getString()",
      "head_type": "method",
      "relation": "have",
      "tail": "public String getString() {\n    return \"\";\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassWithJsonProperty#packagePrivateMethod()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "JSON property deserialization",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassWithJsonProperty#packagePrivateMethod()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "Use with CustomDeserializer2",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassWithJsonProperty#packagePrivateMethod()",
      "head_type": "method",
      "relation": "have",
      "tail": "Deserializing JSON properties using custom deserializer",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassWithJsonProperty#packagePrivateMethod()",
      "head_type": "method",
      "relation": "have",
      "tail": "package com.healthMgr.common.email;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.fasterxml.jackson.databind.annotation.JsonDeserialize;\nimport com.fasterxml.jackson.databind.deser.std.StringDeserializer;\n\npublic class SampleClass {\n    @JsonProperty\n    @JsonDeserialize(using = CustomDeserializer2.class)\n    public String packagePrivateMethod() {\n        return \"\";\n    }\n}\n",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicatesTests#assertPredicateMatches(Predicate<RuntimeHints>)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "assertPredicateMatches",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicatesTests#assertPredicateMatches(Predicate<RuntimeHints>)",
      "head_type": "method",
      "relation": "have",
      "tail": "private void assertPredicateMatches(Predicate<RuntimeHints> predicate) {\n    assertThat(predicate).accepts(this.runtimeHints);\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "assertPredicateMatches",
      "head_type": "apiFunction",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.predicate.ReflectionHintsPredicatesTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "introspection",
      "tail_type": "apiFunction"
    },
    {
      "head": "introspection",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "publicMethod",
      "tail_type": "useScenario"
    },
    {
      "head": "introspection",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "privateMethod",
      "tail_type": "useScenario"
    },
    {
      "head": "introspection",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "typeHint",
      "tail_type": "useConstraint"
    },
    {
      "head": "introspection",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "methodHint",
      "tail_type": "useConstraint"
    },
    {
      "head": "introspection",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "introspectPublicMethods",
      "tail_type": "useConstraint"
    },
    {
      "head": "introspection",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "invokePublicMethods",
      "tail_type": "useConstraint"
    },
    {
      "head": "introspection",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "introspectDeclaredMethods",
      "tail_type": "useConstraint"
    },
    {
      "head": "introspection",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "invokeDeclaredMethods",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod",
      "head_type": "class",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodIntrospectionMatchesTypeHint()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "methodIntrospection",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodIntrospectionMatchesTypeHint()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "introspectionTypeHint",
      "tail_type": "useScenario"
    },
    {
      "head": "introspectionTypeHint",
      "head_type": "useScenario",
      "relation": "have",
      "tail": "runtimeHints.reflection().registerType(SampleClass.class); assertPredicateMatches(reflection.onMethod(SampleClass.class, \"publicMethod\").introspect());",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodIntrospectionMatchesTypeHint()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "SampleClass",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#resourceBundleDoesNotMatchBundleName()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerResourceBundle",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#resourceBundleDoesNotMatchBundleName()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "assertPredicateDoesNotMatch",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#resourceBundleDoesNotMatchBundleName()",
      "head_type": "method",
      "relation": "have",
      "tail": "ResourceHintsPredicatesTests",
      "tail_type": "class"
    },
    {
      "head": "ResourceHintsPredicatesTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#resourceBundleDoesNotMatchBundleName()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#resourceBundleDoesNotMatchBundleName()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#resourceBundleDoesNotMatchBundleName()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#registerType()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerType",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#registerType()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerTypeSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerTypeSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.aot.hint.ReflectionHintsTests#registerType()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#registerConstructor()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerConstructor",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#registerConstructor()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerConstructorSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerConstructorSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.aot.hint.ReflectionHintsTests#registerConstructor()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#assertTestTypeMethodHints(Consumer<ExecutableHint>)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "assertion",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#assertTestTypeMethodHints(Consumer<ExecutableHint>)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "reflection hint processing",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#assertTestTypeMethodHints(Consumer<ExecutableHint>)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "type hint verification",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#assertTestTypeMethodHints(Consumer<ExecutableHint>)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "method hint verification",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#assertTestTypeMethodHints(Consumer<ExecutableHint>)",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#assertTestTypeMethodHints(Consumer<ExecutableHint>)",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#assertTestTypeMethodHints(Consumer<ExecutableHint>)",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#assertTestTypeMethodHints(Consumer<ExecutableHint>)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.ReflectionHintsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#assertTestTypeMethodHints(Consumer<ExecutableHint>)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "ExecutableHint",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#assertTestTypeMethodHints(Consumer<ExecutableHint>)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "TestType",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#registerTypeSeveralTimesAddsOnlyOneEntry()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerType",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#registerTypeSeveralTimesAddsOnlyOneEntry()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "TypeReference.of",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#registerTypeSeveralTimesAddsOnlyOneEntry()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "assertThat().singleElement().satisfies",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#registerTypeSeveralTimesAddsOnlyOneEntry()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerTypeSeveralTimesAddsOnlyOneEntry() sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerTypeSeveralTimesAddsOnlyOneEntry() sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.aot.hint.ResourceHintsTests#registerTypeSeveralTimesAddsOnlyOneEntry()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.ResourceHintsTests#registerTypeSeveralTimesAddsOnlyOneEntry()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#registerTypeSeveralTimesAddsOnlyOneEntry()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.ResourceHintsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.SimpleTypeReferenceTests#nameOfCglibProxy()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "TypeReference.of()",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.SimpleTypeReferenceTests#nameOfCglibProxy()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "getSimpleName()",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.SimpleTypeReferenceTests#nameOfCglibProxy()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "getEnclosingType()",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.SimpleTypeReferenceTests#nameOfCglibProxy()",
      "head_type": "method",
      "relation": "have",
      "tail": "TypeReference.of()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "TypeReference.of()",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "TypeReference.of()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getSimpleName()",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getSimpleName()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getEnclosingType()",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getEnclosingType()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.SimpleTypeReferenceTests#nameOfCglibProxy()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.TypeReference",
      "tail_type": "class"
    },
    {
      "head": "TypeReference.of()",
      "head_type": "apiFunction",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.TypeReference",
      "tail_type": "class"
    },
    {
      "head": "getSimpleName()",
      "head_type": "apiFunction",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.TypeReference",
      "tail_type": "class"
    },
    {
      "head": "getEnclosingType()",
      "head_type": "apiFunction",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.TypeReference",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.SimpleTypeReferenceTests#nameOfCglibProxy()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.SimpleTypeReferenceTests#nameOfCglibProxy()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "register resource hints",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "At least one classpath location must be specified",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "file prefix cannot contain '*' and file extension must start with '.'",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "single or multiple classpath locations and file patterns",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests",
      "head_type": "class",
      "relation": "have",
      "tail": "register resource hints for various scenarios",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "FilePatternResourceHintsRegistrar",
      "tail_type": "class"
    },
    {
      "head": "register resource hints",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "register resource hints for various scenarios",
      "tail_type": "useSampleCode"
    },
    {
      "head": "register resource hints",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "At least one classpath location must be specified",
      "tail_type": "useConstraint"
    },
    {
      "head": "register resource hints",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "file prefix cannot contain '*' and file extension must start with '.'",
      "tail_type": "useConstraint"
    },
    {
      "head": "register resource hints",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "single or multiple classpath locations and file patterns",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests#registerWithClasspathLocationWithLeadingSlash()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerWithClasspathLocationWithLeadingSlash",
      "tail_type": "apiFunction"
    },
    {
      "head": "registerWithClasspathLocationWithLeadingSlash",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "registerWithClasspathLocationWithLeadingSlash() sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerWithClasspathLocationWithLeadingSlash() sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "Complete example of registerWithClasspathLocationWithLeadingSlash()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.support.ObjectToObjectConverterRuntimeHintsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "ObjectToObjectConverterRuntimeHints",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.support.ObjectToObjectConverterRuntimeHintsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "RuntimeHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.support.ObjectToObjectConverterRuntimeHintsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "RuntimeHintsPredicates",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.support.ObjectToObjectConverterRuntimeHintsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "java.sql.Date",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.support.ObjectToObjectConverterRuntimeHintsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "URI",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.support.ObjectToObjectConverterRuntimeHintsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "javaSqlDateHasHints()",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.support.ObjectToObjectConverterRuntimeHintsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "uriHasHints()",
      "tail_type": "useScenario"
    },
    {
      "head": "javaSqlDateHasHints()",
      "head_type": "useScenario",
      "relation": "have",
      "tail": "java.sql.Date.toLocalDate()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "javaSqlDateHasHints()",
      "head_type": "useScenario",
      "relation": "have",
      "tail": "java.sql.Date.valueOf(LocalDate.class)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "uriHasHints()",
      "head_type": "useScenario",
      "relation": "have",
      "tail": "URI",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.support.ObjectToObjectConverterRuntimeHintsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.support.ObjectToObjectConverterRuntimeHintsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#typeHintHasAppropriateToString()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "typeHintHasAppropriateToString",
      "tail_type": "apiFunction"
    },
    {
      "head": "typeHintHasAppropriateToString",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "TypeHint.of(TypeReference.of(String.class)).build()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "typeHintHasAppropriateToString",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "This method tests the appropriate toString representation of a TypeHint.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "typeHintHasAppropriateToString",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "The design principle is to ensure that the TypeHint's toString method provides a clear and informative representation of the type it represents.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests#writeObject()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "write JSON object",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests#writeObject()",
      "head_type": "method",
      "relation": "have",
      "tail": "sample code for writing JSON object",
      "tail_type": "useSampleCode"
    },
    {
      "head": "sample code for writing JSON object",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "complete sample code for using the writeObject method",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests#writeWithEscapeBackslash()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "writeWithEscapeBackslash",
      "tail_type": "apiFunction"
    },
    {
      "head": "writeWithEscapeBackslash",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "writeWithEscapeBackslash() { assertStringAttribute(\"foo\\\"bar\", \"foo\\\\\\\"bar\"); }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "writeWithEscapeBackslash() { assertStringAttribute(\"foo\\\"bar\", \"foo\\\\\\\"bar\"); }",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.aot.nativex.BasicJsonWriterTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getAllAnnotationAttributesOnNonAnnotatedClass()",
      "tail_type": "apiFunction"
    },
    {
      "head": "getAllAnnotationAttributesOnNonAnnotatedClass()",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getAllAnnotationAttributesOnNonAnnotatedClass() useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getAllAnnotationAttributesOnNonAnnotatedClass() useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "getAllAnnotationAttributesOnNonAnnotatedClass() useSampleCode content",
      "tail_type": "content"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getMergedAnnotationWithTransitiveImplicitAliases()",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedAnnotationWithTransitiveImplicitAliases()",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationOnClassWithComposedMetaTransactionalAnnotation()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "findMergedAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationOnClassWithComposedMetaTransactionalAnnotation()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "ComposedTransactionalClass",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationOnClassWithComposedMetaTransactionalAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "Sample Code for findMergedAnnotation",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationOnClassWithComposedMetaTransactionalAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "Related Concept Interpretation for findMergedAnnotation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationOnClassWithComposedMetaTransactionalAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "Design Principle Interpretation for findMergedAnnotation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "findMergedAnnotation",
      "head_type": "apiFunction",
      "relation": "associated_with",
      "tail": "AliasedTransactional",
      "tail_type": "class"
    },
    {
      "head": "findMergedAnnotation",
      "head_type": "apiFunction",
      "relation": "associated_with",
      "tail": "anotherTransactionManager",
      "tail_type": "useScenario"
    },
    {
      "head": "Sample Code for findMergedAnnotation",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AbstractClassWithInheritedAnnotation#handle()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "transactional operation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AbstractClassWithInheritedAnnotation#handle()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "ensuring transaction integrity",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.AbstractClassWithInheritedAnnotation#handle()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "database transaction management",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AbstractClassWithInheritedAnnotation#handle()",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.transaction.annotation.Transactional",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AbstractClassWithInheritedAnnotation#handle()",
      "head_type": "method",
      "relation": "have",
      "tail": "ensuring data consistency and rollback capabilities",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AbstractClassWithInheritedAnnotation#handle()",
      "head_type": "method",
      "relation": "have",
      "tail": "public abstract void handle();",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAttributesTests#typeSafeAttributeAccess()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "typeSafeAttributeAccess",
      "tail_type": "apiFunction"
    },
    {
      "head": "typeSafeAttributeAccess",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "typeSafeAttributeAccessSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "typeSafeAttributeAccessSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "typeSafeAttributeAccessSampleCodeContent",
      "tail_type": "useSampleCodeContent"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAttributesTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getAliasedStringWithImplicitAliases()",
      "tail_type": "apiFunction"
    },
    {
      "head": "getAliasedStringWithImplicitAliases()",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "multiple aliases for a single name",
      "tail_type": "useScenario"
    },
    {
      "head": "getAliasedStringWithImplicitAliases()",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "complete sample code",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "getAliasedStringWithImplicitAliases()",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "relatedConceptInterpretation",
      "head_type": "relatedConceptInterpretation",
      "relation": "have",
      "tail": "detailed description",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAttributesTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.SimpleAliasRegistryTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnClassWhenMultipleAnnotationsScansAnnotations()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scan annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnClassWhenMultipleAnnotationsScansAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "void directStrategyOnClassWhenMultipleAnnotationsScansAnnotations() {\n    Class<?> source = WithMultipleAnnotations.class;\n    assertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\", \"0:TestAnnotation2\");\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnClassWhenMultipleAnnotationsScansAnnotations()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "WithMultipleAnnotations",
      "tail_type": "class"
    },
    {
      "head": "WithMultipleAnnotations",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "multiple annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnMethodWhenMultipleAnnotationsScansAnnotations()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scan annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnMethodWhenMultipleAnnotationsScansAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "void directStrategyOnMethodWhenMultipleAnnotationsScansAnnotations() {\n    Method source = methodFrom(WithMultipleAnnotations.class);\n    assertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\", \"0:TestAnnotation2\");\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnMethodWhenMultipleAnnotationsScansAnnotations()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests",
      "head_type": "class",
      "relation": "have",
      "tail": "This class is designed to test the functionality of scanning annotations in Spring Framework. It ensures that when multiple annotations are present on a method, the scanning process can correctly identify and process each annotation.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests",
      "head_type": "class",
      "relation": "have",
      "tail": "The design principle behind this class is to ensure robustness and accuracy in annotation scanning. It follows best practices in unit testing to validate that the Spring Framework's annotation scanning mechanism works as expected, even in complex scenarios involving multiple annotations on a single method.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.Hello1#method()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "testFunctionality",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.Hello1#method()",
      "head_type": "method",
      "relation": "have",
      "tail": "voidReturnType",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.Hello1#method()",
      "head_type": "method",
      "relation": "have",
      "tail": "noParameters",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.Hello1#method()",
      "head_type": "method",
      "relation": "have",
      "tail": "annotationUsage",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.Hello1#method()",
      "head_type": "method",
      "relation": "have",
      "tail": "completeSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.Hello1#method()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.Hello1#method()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.Hello1#method()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.Hello1",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.IgnorableOverrideInterface2",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "void method();",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#resolveMirrorsWhenHasDifferentValuesThrowsException()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "resolveMirrors",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#resolveMirrorsWhenHasDifferentValuesThrowsException()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "AnnotationConfigurationException",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#resolveMirrorsWhenHasDifferentValuesThrowsException()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "WithDifferentValueAliasPair",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#resolveMirrorsWhenHasDifferentValuesThrowsException()",
      "head_type": "method",
      "relation": "have",
      "tail": "resolveMirrorsWhenHasDifferentValuesThrowsException() sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "resolveMirrorsWhenHasDifferentValuesThrowsException() sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "resolveMirrorsWhenHasDifferentValuesThrowsException() code content",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "resolveMirrorsWhenHasDifferentValuesThrowsException() sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "resolveMirrorsWhenHasDifferentValuesThrowsException() design principle",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#resolveMirrorsWhenHasDifferentValuesThrowsException()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenClassAndStringNamesMatchReturnsTrue()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "AnnotationTypeMapping",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenClassAndStringNamesMatchReturnsTrue()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "isEquivalentToDefaultValue",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenClassAndStringNamesMatchReturnsTrue()",
      "head_type": "method",
      "relation": "have",
      "tail": "java.io.InputStream",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenClassAndStringNamesMatchReturnsTrue()",
      "head_type": "method",
      "relation": "have",
      "tail": "ReflectionUtils::invokeMethod",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenClassAndStringNamesMatchReturnsTrue()",
      "head_type": "method",
      "relation": "have",
      "tail": "AnnotationTypeMappings.forAnnotationType(ClassValueWithDefault.class)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenClassAndStringNamesMatchReturnsTrue()",
      "head_type": "method",
      "relation": "have",
      "tail": "mapping.isEquivalentToDefaultValue(0, \"java.io.InputStream\", ReflectionUtils::invokeMethod)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenClassAndStringNamesMatchReturnsTrue()",
      "head_type": "method",
      "relation": "have",
      "tail": "assertThat(mapping.isEquivalentToDefaultValue(0, \"java.io.InputStream\", ReflectionUtils::invokeMethod)).isTrue()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenClassAndStringNamesMatchReturnsTrue()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationTypeMappings",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenClassAndStringNamesMatchReturnsTrue()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "ClassValueWithDefault",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenClassAndStringNamesMatchReturnsTrue()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "ReflectionUtils",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenClassAndStringNamesMatchReturnsTrue()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#isEquivalentToDefaultValueWhenClassAndStringNamesMatchReturnsTrue()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationWithAnnotationOnMethodInInterface()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "find method annotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationWithAnnotationOnMethodInInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "getAnnotation() does not search on interfaces",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationWithAnnotationOnMethodInInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "findAnnotation() does search on interfaces",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationWithAnnotationOnMethodInInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "sample code for finding method annotation",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationWithAnnotationOnMethodInInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "related concept interpretation for method annotation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationWithAnnotationOnMethodInInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "design principle interpretation for method annotation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationWithAnnotationOnMethodInInterface()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnSubSubInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "findClassAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnSubSubInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "annotationInheritance",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnSubSubInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "inheritedAnnotationInterface",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnSubSubInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "sampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnSubSubInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnSubSubInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnSubSubInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getAnnotationAttributesWithAttributeAliases",
      "tail_type": "apiFunction"
    },
    {
      "head": "getAnnotationAttributesWithAttributeAliases",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "getAnnotationAttributesWithAttributeAliases",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getAnnotationAttributesWithAttributeAliases() sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getAnnotationAttributesWithAttributeAliases() sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "getAnnotationAttributesWithAttributeAliases() complete example",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.NonAnnotatedInterface",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "NonAnnotatedInterface",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.NonAnnotatedInterface",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.NonAnnotatedInterface",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.XmlImplicitAliasesContextConfigClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "XmlImplicitAliasesContextConfigClass",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.XmlImplicitAliasesContextConfigClass",
      "head_type": "class",
      "relation": "have",
      "tail": "Attribute value intentionally matches attribute name",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.annotation.RegistrationMultipleTargets",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registration of multiple targets",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.annotation.RegistrationMultipleTargets",
      "head_type": "class",
      "relation": "have",
      "tail": "related to the registration of multiple targets",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.annotation.RegistrationMultipleTargets",
      "head_type": "class",
      "relation": "have",
      "tail": "design principle involves handling multiple targets efficiently",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithSetter()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerTypeForSerializationWithSetter",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithSetter()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerTypeForSerializationWithSetterSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerTypeForSerializationWithSetterSampleCode",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithSetter()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithSetter()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "SampleClassWithSetter",
      "tail_type": "class"
    },
    {
      "head": "registerTypeForSerializationWithSetter",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "serializationWithSetterScenario",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithSetter()",
      "head_type": "method",
      "relation": "have",
      "tail": "serializationWithSetterScenario",
      "tail_type": "useScenario"
    },
    {
      "head": "serializationWithSetterScenario",
      "head_type": "useScenario",
      "relation": "associated_with",
      "tail": "registerTypeForSerializationWithSetter",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registerTypeForSerializationWithSetter",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests",
      "head_type": "class",
      "relation": "have",
      "tail": "registerTypeForSerializationWithSetterSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerTypeForSerializationWithSetterSampleCode",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "SampleClassWithSetter",
      "tail_type": "class"
    },
    {
      "head": "registerTypeForSerializationWithSetter",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "serializationWithSetterScenario",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests",
      "head_type": "class",
      "relation": "have",
      "tail": "serializationWithSetterScenario",
      "tail_type": "useScenario"
    },
    {
      "head": "serializationWithSetterScenario",
      "head_type": "useScenario",
      "relation": "associated_with",
      "tail": "registerTypeForSerializationWithSetter",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassWithGetter#getName()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "retrieving a name",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassWithGetter#getName()",
      "head_type": "method",
      "relation": "have",
      "tail": "public String getName() {\n    return null;\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassWithGetter#getName()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.SampleClassWithGetter",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.CustomDeserializer2#deserialize(JsonParser,DeserializationContext)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "deserialize",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.CustomDeserializer2#deserialize(JsonParser,DeserializationContext)",
      "head_type": "method",
      "relation": "have",
      "tail": "CustomDeserializer2",
      "tail_type": "class"
    },
    {
      "head": "CustomDeserializer2",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.CustomDeserializer2#deserialize(JsonParser,DeserializationContext)",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests#shouldFailForEmptyInterfacesArray()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "IllegalArgumentException handling",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests#shouldFailForEmptyInterfacesArray()",
      "head_type": "method",
      "relation": "have",
      "tail": "ProxyHintsPredicatesTests related concept interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests#shouldFailForEmptyInterfacesArray()",
      "head_type": "method",
      "relation": "have",
      "tail": "ProxyHintsPredicatesTests design principle interpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests#shouldFailForEmptyInterfacesArray()",
      "head_type": "method",
      "relation": "have",
      "tail": "ProxyHintsPredicatesTests sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests#shouldFailForEmptyInterfacesArray()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#assertPredicateMatches(Predicate<RuntimeHints>)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "assertPredicateMatches",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#assertPredicateMatches(Predicate<RuntimeHints>)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#assertPredicateMatches(Predicate<RuntimeHints>)",
      "head_type": "method",
      "relation": "have",
      "tail": "private void assertPredicateMatches(Predicate<RuntimeHints> predicate) {\n    assertThat(predicate).accepts(this.runtimeHints);\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionTypeReferenceTests#typeReferenceWithLambda()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "typeReferenceWithLambda",
      "tail_type": "apiFunction"
    },
    {
      "head": "typeReferenceWithLambda",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "typeReferenceWithLambdaSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "typeReferenceWithLambdaSampleCode",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.ReflectionTypeReferenceTests#typeReferenceWithLambda()",
      "tail_type": "method"
    },
    {
      "head": "typeReferenceWithLambda",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "RunnableLambdaConstraint",
      "tail_type": "useConstraint"
    },
    {
      "head": "typeReferenceWithLambda",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "ReflectionTypeReferenceWithLambdaScenario",
      "tail_type": "useScenario"
    },
    {
      "head": "typeReferenceWithLambda",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "ReflectionTypeReferenceWithLambdaConcept",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "typeReferenceWithLambda",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "ReflectionTypeReferenceWithLambdaDesignPrinciple",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.Nested",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "nestedClass",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.Nested",
      "head_type": "class",
      "relation": "have",
      "tail": "org.springframework.aot.hint.Nested",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.SimpleTypeReferenceTests#typeReferenceWithInvalidClassName(String)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "typeReferenceWithInvalidClassName",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.SimpleTypeReferenceTests#typeReferenceWithInvalidClassName(String)",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "invalidClassName",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.aot.hint.SimpleTypeReferenceTests#typeReferenceWithInvalidClassName(String)",
      "head_type": "method",
      "relation": "have",
      "tail": "void typeReferenceWithInvalidClassName(String invalidClassName) {    assertThatIllegalStateException().isThrownBy(() -> SimpleTypeReference.of(invalidClassName)).withMessageContaining(\"Invalid class name\");}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.SimpleTypeReferenceTests#typeReferenceWithInvalidClassName(String)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "SimpleTypeReference",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.support.SpringFactoriesLoaderRuntimeHintsTests#resourceLocationHasHints()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "resourceLocationHasHints",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.support(SpringFactoriesLoaderRuntimeHintsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.support(SpringFactoriesLoaderRuntimeHintsTests#resourceLocationHasHints()",
      "tail_type": "method"
    },
    {
      "head": "resourceLocationHasHints",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "SpringFactoriesLoader.FACTORIES_RESOURCE_LOCATION",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.support.SpringFactoriesLoaderRuntimeHintsTests#factoryTypeHasHint()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "factoryTypeHasHint",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.support(SpringFactoriesLoaderRuntimeHintsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "SpringFactoriesLoader",
      "tail_type": "class"
    },
    {
      "head": "factoryTypeHasHint",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "runtimeHintsPredicates",
      "tail_type": "useScenario"
    },
    {
      "head": "runtimeHintsPredicates",
      "head_type": "useScenario",
      "relation": "have",
      "tail": "reflection().onType(DummyFactory.class).withMemberCategory(MemberCategory.INVOKE_DECLARED_CONSTRUCTORS)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "DummyFactory",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "MemberCategory.INVOKE_DECLARED_CONSTRUCTORS",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.Nested",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "nestedClass",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.Nested",
      "head_type": "class",
      "relation": "have",
      "tail": "nestedClassImplementation",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#one()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerType",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#one()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "withMembers",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#one()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "withField",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#one()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "withMethod",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#one()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "RuntimeHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#one()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "StringDecoder",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#one()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "String",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#one()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "Charset",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#one()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#one()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#one()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.nativex.ResourceHintsTests#registerWildcardAtTheBeginningPattern()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerWildcardPattern",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.ResourceHintsTests#registerWildcardAtTheBeginningPattern()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerWildcardAtTheBeginningPatternSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerWildcardAtTheBeginningPatternSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.aot.nativex.ResourceHintsTests#registerWildcardAtTheBeginningPattern()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.aot.nativex.ResourceHintsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.aot.nativex.ResourceHintsTests#registerWildcardAtTheBeginningPattern()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.aot.nativex.ResourceHintsTests#registerWildcardAtTheBeginningPattern()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.nativex.ResourceHintsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedOnClassWithMetaDepth()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "apiFunction",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedOnClassWithMetaDepth()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "apiFunction",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "useConstraint",
      "tail_type": "useConstraint"
    },
    {
      "head": "apiFunction",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "useScenario",
      "tail_type": "useScenario"
    },
    {
      "head": "apiFunction",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "apiFunction",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedOnClassWithMetaDepth()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnClassWithMetaAndLocalTxConfig()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "findMergedAnnotationAttributes",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnClassWithMetaAndLocalTxConfig()",
      "head_type": "method",
      "relation": "have",
      "tail": "Should find @Transactional on MetaAndLocalTxConfigClass",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnClassWithMetaAndLocalTxConfig()",
      "head_type": "method",
      "relation": "have",
      "tail": "TX qualifier for MetaAndLocalTxConfigClass",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnClassWithMetaAndLocalTxConfig()",
      "head_type": "method",
      "relation": "have",
      "tail": "localTxMgr",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnClassWithMetaAndLocalTxConfig()",
      "head_type": "method",
      "relation": "have",
      "tail": "MetaAndLocalTxConfigClass",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnClassWithMetaAndLocalTxConfig()",
      "head_type": "method",
      "relation": "have",
      "tail": "Transactional",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnClassWithMetaAndLocalTxConfig()",
      "head_type": "method",
      "relation": "have",
      "tail": "AnnotationAttributes",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnClassWithMetaAndLocalTxConfig()",
      "head_type": "method",
      "relation": "have",
      "tail": "assertThat(attributes).as(\"Should find @Transactional on MetaAndLocalTxConfigClass\").isNotNull()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnClassWithMetaAndLocalTxConfig()",
      "head_type": "method",
      "relation": "have",
      "tail": "assertThat(attributes.getString(\"qualifier\")).as(\"TX qualifier for MetaAndLocalTxConfigClass.\").isEqualTo(\"localTxMgr\")",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.ConventionBasedAnnotationAttributeOverrideTests#findMergedAnnotationWithLocalAliasesThatConflictWithAttributesInMetaAnnotationByConvention()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "findMergedAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.ConventionBasedAnnotationAttributeOverrideTests#findMergedAnnotationWithLocalAliasesThatConflictWithAttributesInMetaAnnotationByConvention()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "annotationAttributeConflict",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.ConventionBasedAnnotationAttributeOverrideTests#findMergedAnnotationWithLocalAliasesThatConflictWithAttributesInMetaAnnotationByConvention()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "annotationProcessing",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.ConventionBasedAnnotationAttributeOverrideTests#findMergedAnnotationWithLocalAliasesThatConflictWithAttributesInMetaAnnotationByConvention()",
      "head_type": "method",
      "relation": "have",
      "tail": "sampleCodeForMergedAnnotation",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.ConventionBasedAnnotationAttributeOverrideTests#findMergedAnnotationWithLocalAliasesThatConflictWithAttributesInMetaAnnotationByConvention()",
      "head_type": "method",
      "relation": "have",
      "tail": "annotationAttributeOverrideExplanation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.ConventionBasedAnnotationAttributeOverrideTests#findMergedAnnotationWithLocalAliasesThatConflictWithAttributesInMetaAnnotationByConvention()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleForAnnotationProcessing",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.ConventionBasedAnnotationAttributeOverrideTests#findMergedAnnotationWithLocalAliasesThatConflictWithAttributesInMetaAnnotationByConvention()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.ConventionBasedAnnotationAttributeOverrideTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.SubSubClassWithInheritedComposedAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "Inherited Composed Annotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.SubSubClassWithInheritedComposedAnnotation",
      "head_type": "class",
      "relation": "have",
      "tail": "org.springframework.core.annotation.SubSubClassWithInheritedComposedAnnotation",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.SubSubClassWithInheritedComposedAnnotation",
      "head_type": "class",
      "relation": "have",
      "tail": "org.springframework.core.annotation.SubSubClassWithInheritedComposedAnnotation",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.SubSubClassWithInheritedComposedAnnotation",
      "head_type": "class",
      "relation": "have",
      "tail": "org.springframework.core.annotation.SubSubClassWithInheritedComposedAnnotation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SubSubClassWithInheritedComposedAnnotation",
      "head_type": "class",
      "relation": "have",
      "tail": "org.springframework.core.annotation.SubSubClassWithInheritedComposedAnnotation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SubInheritedAnnotationInterface",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "SubInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.SubInheritedAnnotationInterface",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SubInheritedAnnotationInterface",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.ImplicitAliasesContextConfigClass2",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "implicit aliases processing",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.ImplicitAliasesContextConfigClass2",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "no circular aliases allowed",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.ImplicitAliasesContextConfigClass2",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "multiple aliases for a single bean name",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.ImplicitAliasesContextConfigClass2",
      "head_type": "class",
      "relation": "have",
      "tail": "related to Spring's component scanning",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.ImplicitAliasesContextConfigClass2",
      "head_type": "class",
      "relation": "have",
      "tail": "design principle follows Spring's convention over configuration",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.ImplicitAliasesContextConfigClass2",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.context.annotation.Bean",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.ImplicitAliasesContextConfigClass2",
      "head_type": "class",
      "relation": "have",
      "tail": "sample code for using implicit aliases",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.ImplicitAliasesWithDefaultsClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "implicit aliases with defaults",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.ImplicitAliasesWithDefaultsClass",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "no circular aliases allowed",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.ImplicitAliasesWithDefaultsClass",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "multiple aliases for a single annotation",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.ImplicitAliasesWithDefaultsClass",
      "head_type": "class",
      "relation": "have",
      "tail": "sample code for using implicit aliases with defaults",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.ImplicitAliasesWithDefaultsClass",
      "head_type": "class",
      "relation": "have",
      "tail": "related concept interpretation for implicit aliases",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.ImplicitAliasesWithDefaultsClass",
      "head_type": "class",
      "relation": "have",
      "tail": "design principle interpretation for implicit aliases",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.ImplicitAliasesWithDefaultsClass",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AliasFor",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAttributesTests#unresolvableClassWithClassNotFoundException()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "unresolvableClassWithClassNotFoundException",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAttributesTests#unresolvableClassWithClassNotFoundException()",
      "head_type": "method",
      "relation": "have",
      "tail": "unresolvableClassWithClassNotFoundExceptionSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "unresolvableClassWithClassNotFoundExceptionSampleCode",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationAttributesTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#javaWhenJavaLangAnnotationReturnsTrue()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "java.lang.annotation.Annotation matching",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#javaWhenJavaLangAnnotationReturnsTrue()",
      "head_type": "method",
      "relation": "have",
      "tail": "java.lang.annotation.Annotation matching sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#javaWhenJavaLangAnnotationReturnsTrue()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationFilter",
      "tail_type": "class"
    },
    {
      "head": "java.lang.annotation.Annotation matching",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "java.lang.annotation.Annotation matching sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "java.lang.annotation.Annotation matching",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "java.lang.annotation.Annotation matching scenario",
      "tail_type": "useScenario"
    },
    {
      "head": "java.lang.annotation.Annotation matching sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "java.lang.annotation.Annotation matching sample code content",
      "tail_type": "useSampleCode"
    },
    {
      "head": "java.lang.annotation.Annotation matching scenario",
      "head_type": "useScenario",
      "relation": "have",
      "tail": "java.lang.annotation.Annotation matching scenario description",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilter",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "java.lang.annotation.Annotation matching",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilter",
      "head_type": "class",
      "relation": "have",
      "tail": "java.lang.annotation.Annotation matching design principle",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilter",
      "head_type": "class",
      "relation": "have",
      "tail": "java.lang.annotation.Annotation matching related concept",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.FilteringClassLoader",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "classLoading",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.FilteringClassLoader",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "classNameConstraints",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.FilteringClassLoader",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "overridingClassLoading",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.FilteringClassLoader",
      "head_type": "class",
      "relation": "have",
      "tail": "classLoadingSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.FilteringClassLoader",
      "head_type": "class",
      "relation": "have",
      "tail": "classLoadingConcept",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.FilteringClassLoader",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrinciples",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "classLoadingSampleCode",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.FilteringClassLoader",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.FilteringClassLoader#isEligibleForOverriding(String)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "class or method filtering",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.FilteringClassLoader#isEligibleForOverriding(String)",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "class name prefix constraint",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.FilteringClassLoader#isEligibleForOverriding(String)",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "class introspection",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.FilteringClassLoader#isEligibleForOverriding(String)",
      "head_type": "method",
      "relation": "have",
      "tail": "sample code for FilteringClassLoader",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.FilteringClassLoader#isEligibleForOverriding(String)",
      "head_type": "method",
      "relation": "have",
      "tail": "class introspection explanation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.FilteringClassLoader#isEligibleForOverriding(String)",
      "head_type": "method",
      "relation": "have",
      "tail": "design principle for FilteringClassLoader",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.FilteringClassLoader#isEligibleForOverriding(String)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationIntrospectionFailureTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnMethodWhenMultipleAnnotationsScansAnnotations()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scanning annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnMethodWhenMultipleAnnotationsScansAnnotations()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "multiple annotations on a method",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnMethodWhenMultipleAnnotationsScansAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "void inheritedAnnotationsStrategyOnMethodWhenMultipleAnnotationsScansAnnotations() {\n    Method source = methodFrom(WithMultipleAnnotations.class);\n    assertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\", \"0:TestAnnotation2\");\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnMethodWhenMultipleAnnotationsScansAnnotations()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnMethodWhenMultipleAnnotationsScansAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "This method tests the inherited annotations strategy on a method with multiple annotations to ensure that all annotations are scanned correctly.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnMethodWhenMultipleAnnotationsScansAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "The design principle behind this method is to ensure that the annotations scanner correctly handles multiple annotations on a single method, adhering to the inherited annotations strategy.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyWithEnclosingClassPredicatesOnEnclosedInnerClassScansAnnotations()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scan annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyWithEnclosingClassPredicatesOnEnclosedInnerClassScansAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "Class<?> source = AnnotationEnclosingClassSample.EnclosedInner.EnclosedInnerInner.class; assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY, ClassUtils::isStaticClass)).containsExactly(\"0:EnclosedThree\"); assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY, Search.always).toList()).isEqualTo(scan(source, SearchStrategy.TYPE_HIERARCHY, ClassUtils::isInnerClass).toList()).containsExactly(\"0:EnclosedThree\", \"1:EnclosedTwo\", \"2:EnclosedOne\");",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyWithEnclosingClassPredicatesOnEnclosedInnerClassScansAnnotations()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyWithEnclosingClassPredicatesOnEnclosedInnerClassScansAnnotations()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "AnnotationEnclosingClassSample.EnclosedInner.EnclosedInnerInner",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyWithEnclosingClassPredicatesOnEnclosedInnerClassScansAnnotations()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "ClassUtils",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyWithEnclosingClassPredicatesOnEnclosedInnerClassScansAnnotations()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "Search",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyWithEnclosingClassPredicatesOnEnclosedInnerClassScansAnnotations()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "SearchStrategy",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "scan annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "AnnotationEnclosingClassSample.EnclosedInner.EnclosedInnerInner",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "scan annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "ClassUtils",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "isStaticClass",
      "tail_type": "apiFunction"
    },
    {
      "head": "ClassUtils",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "isInnerClass",
      "tail_type": "apiFunction"
    },
    {
      "head": "Search",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "always",
      "tail_type": "apiFunction"
    },
    {
      "head": "SearchStrategy",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "TYPE_HIERARCHY",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.WithSingleSuperclassAndDoubleInherited",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "testMethod",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.WithSingleSuperclassAndDoubleInherited",
      "head_type": "class",
      "relation": "have",
      "tail": "testMethodSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.WithSingleSuperclassAndDoubleInherited",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.WithSingleSuperclassAndDoubleInherited",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.HierarchyInterfaceInterface#method()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "testAnnotationProcessing",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.HierarchyInterfaceInterface#method()",
      "head_type": "method",
      "relation": "have",
      "tail": "void method();",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.HierarchyInterfaceInterface#method()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.HierarchyInterfaceInterface",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getConventionMappingReturnsAttributes",
      "tail_type": "apiFunction"
    },
    {
      "head": "getConventionMappingReturnsAttributes",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getConventionMappingReturnsAttributes() Sample Code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getConventionMappingReturnsAttributes() Sample Code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "Complete Example for getConventionMappingReturnsAttributes()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationOnRoot()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "find method annotation on root",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationOnRoot()",
      "head_type": "method",
      "relation": "have",
      "tail": "sample code for finding method annotation on root",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationOnRoot()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationOnRoot()",
      "head_type": "method",
      "relation": "have",
      "tail": "related concept interpretation for finding method annotation on root",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationOnRoot()",
      "head_type": "method",
      "relation": "have",
      "tail": "design principle interpretation for finding method annotation on root",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findAnnotationWithRepeatablesElements()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "findAnnotationWithRepeatablesElements",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findAnnotationWithRepeatablesElements()",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findAnnotationWithRepeatablesElements()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findAnnotationWithRepeatablesElements()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findAnnotationWithRepeatablesElements()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findAnnotationFindsRepeatableContainerOnComposedAnnotationMetaAnnotatedWithRepeatableAnnotationsOnMethod()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "find repeatable container annotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findAnnotationFindsRepeatableContainerOnComposedAnnotationMetaAnnotatedWithRepeatableAnnotationsOnMethod()",
      "head_type": "method",
      "relation": "have",
      "tail": "sample code for finding repeatable container annotation",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findAnnotationFindsRepeatableContainerOnComposedAnnotationMetaAnnotatedWithRepeatableAnnotationsOnMethod()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationUtils",
      "tail_type": "class"
    },
    {
      "head": "find repeatable container annotation",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "meta-annotated method with repeatable annotations",
      "tail_type": "useScenario"
    },
    {
      "head": "find repeatable container annotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "related concept interpretation for repeatable annotations",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "find repeatable container annotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "design principle interpretation for finding annotations",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "sample code for finding repeatable container annotation",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "complete example for finding repeatable container annotation",
      "tail_type": "useSampleCode"
    },
    {
      "head": "related concept interpretation for repeatable annotations",
      "head_type": "relatedConceptInterpretation",
      "relation": "have",
      "tail": "detailed explanation of repeatable annotations",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "design principle interpretation for finding annotations",
      "head_type": "designPrincipleInterpretation",
      "relation": "have",
      "tail": "design principles behind finding annotations",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SubClassWithInheritedAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "SubClassWithInheritedAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.SubClassWithInheritedAnnotation",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SubClassWithInheritedAnnotation",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SubClassWithInheritedAnnotation",
      "head_type": "class",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "annotation processing",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "used to specify the order value of an annotation when it is used to annotate a class or method",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "void annotatedOnLeaf() { // specific code }",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()"
    },
    {
      "head": "org.springframework.core.annotation.Leaf#overrideToAnnotate()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "override annotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.Leaf#overrideToAnnotate()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "order annotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.Leaf#overrideToAnnotate()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "must be used with @Override",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.Leaf#overrideToAnnotate()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "method overriding",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.Leaf#overrideToAnnotate()",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.core.annotation.Order",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.Leaf#overrideToAnnotate()",
      "head_type": "method",
      "relation": "have",
      "tail": "specifies the order in which the annotated element should be processed",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.Leaf#overrideToAnnotate()",
      "head_type": "method",
      "relation": "have",
      "tail": "design principle of maintaining method order in annotations",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.Leaf#overrideToAnnotate()",
      "head_type": "method",
      "relation": "have",
      "tail": "sample code for using override and order annotations",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.SimpleFoo",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "transactional operation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.SimpleFoo",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "ensuring transaction integrity",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.SimpleFoo",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "database transaction management",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.SimpleFoo",
      "head_type": "class",
      "relation": "have",
      "tail": "sample code for transactional operation",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.SimpleFoo",
      "head_type": "class",
      "relation": "have",
      "tail": "transaction management explanation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SimpleFoo",
      "head_type": "class",
      "relation": "have",
      "tail": "design principles of transactional operations",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SimpleFoo",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.transaction.annotation.Transactional",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.WebController#postMappedWithPathAttribute()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "postMapping",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.WebController#postMappedWithPathAttribute()",
      "head_type": "method",
      "relation": "have",
      "tail": "postMappingUsage",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.WebController#postMappedWithPathAttribute()",
      "head_type": "method",
      "relation": "have",
      "tail": "postMappingSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.WebController#postMappedWithPathAttribute()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.WebController#postMappedWithPathAttribute()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.WebController#postMappedWithPathAttribute()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "WebController",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SimpleReflectiveProcessorTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registerReflectiveHintsForClass",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SimpleReflectiveProcessorTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registerReflectiveHintsForConstructor",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SimpleReflectiveProcessorTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registerReflectiveHintsForField",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SimpleReflectiveProcessorTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "registerReflectiveHintsForMethod",
      "tail_type": "apiFunction"
    },
    {
      "head": "registerReflectiveHintsForClass",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "registerReflectiveHintsForClass-SampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerReflectiveHintsForConstructor",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "registerReflectiveHintsForConstructor-SampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerReflectiveHintsForField",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "registerReflectiveHintsForField-SampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerReflectiveHintsForMethod",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "registerReflectiveHintsForMethod-SampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SimpleReflectiveProcessorTests",
      "head_type": "class",
      "relation": "have",
      "tail": "SimpleReflectiveProcessorTests-RelatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.annotation.SimpleReflectiveProcessorTests",
      "head_type": "class",
      "relation": "have",
      "tail": "SimpleReflectiveProcessorTests-DesignPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithListProperty()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerTypeForSerializationWithListProperty",
      "tail_type": "apiFunction"
    },
    {
      "head": "registerTypeForSerializationWithListProperty",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "registerTypeForSerializationWithListPropertyUseSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerTypeForSerializationWithListPropertyUseSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "registerTypeForSerializationWithListPropertySampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#registerField()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerField",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#registerField()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerFieldSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerFieldSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.aot.hint.ReflectionHintsTests#registerField()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#assertTestTypeFieldHint(Consumer<FieldHint>)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "assertTestTypeFieldHint",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#assertTestTypeFieldHint(Consumer<FieldHint>)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "ReflectionHintsTests",
      "tail_type": "class"
    },
    {
      "head": "ReflectionHintsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "ReflectionHintsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.ResourcePatternHintTests#fileInDirectory()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "ResourcePatternHint",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ResourcePatternHintTests#fileInDirectory()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "matches",
      "tail_type": "apiFunction"
    },
    {
      "head": "ResourcePatternHint",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "ResourcePatternHint Usage",
      "tail_type": "useSampleCode"
    },
    {
      "head": "ResourcePatternHint Usage",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "Complete Example",
      "tail_type": "useSampleCode"
    },
    {
      "head": "Complete Example",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "package com.example;\nimport org.springframework.aot.hint.ResourcePatternHint;\n\npublic class ResourcePatternHintExample {\n    public static void main(String[] args) {\n        ResourcePatternHint hint = new ResourcePatternHint(\"com/example/file.properties\", null);\n        System.out.println(hint.matches(\"com/example/file.properties\"));\n        System.out.println(hint.matches(\"file.properties\"));\n        System.out.println(hint.matches(\"com/file.properties\"));\n        System.out.println(hint.matches(\"com/example/another-file.properties\"));\n    }\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "ResourcePatternHint",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "ResourcePatternHint Explanation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "ResourcePatternHint Explanation",
      "head_type": "relatedConceptInterpretation",
      "relation": "have",
      "tail": "ResourcePatternHint is used to specify resource patterns for hinting during ahead-of-time (AOT) processing. It helps in identifying which resources should be included or excluded based on the specified pattern.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "ResourcePatternHint",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "Design Principle",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "Design Principle",
      "head_type": "designPrincipleInterpretation",
      "relation": "have",
      "tail": "ResourcePatternHint is designed to provide a flexible and efficient way to manage resource patterns in AOT processing, ensuring that only necessary resources are included, thereby optimizing the application's performance and reducing unnecessary overhead.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.support.KotlinDetectorRuntimeHintsTests#kotlinReflectHasHints()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "reflection",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.support.KotlinDetectorRuntimeHintsTests#kotlinReflectHasHints()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "onType",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.support.KotlinDetectorRuntimeHintsTests#kotlinReflectHasHints()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "accepts",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.support.KotlinDetectorRuntimeHintsTests#kotlinReflectHasHints()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "kotlin.reflect.full.KClasses",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.support.KotlinDetectorRuntimeHintsTests#kotlinReflectHasHints()",
      "head_type": "method",
      "relation": "have",
      "tail": "RuntimeHintsPredicates.reflection().onType(kotlin.reflect.full.KClasses.class).accepts(this.hints)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.support.KotlinDetectorRuntimeHintsTests#kotlinReflectHasHints()",
      "head_type": "method",
      "relation": "have",
      "tail": "This method tests whether the Kotlin reflection has hints by using the RuntimeHintsPredicates.reflection().onType(kotlin.reflect.full.KClasses.class).accepts(this.hints) method.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.support.KotlinDetectorRuntimeHintsTests#kotlinReflectHasHints()",
      "head_type": "method",
      "relation": "have",
      "tail": "The design principle of this method is to ensure that Kotlin reflection hints are correctly registered and detected by the runtime environment.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "createWithNullTypeReference",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "createWithType",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "createWithTypeAndReachableType",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "createWithField",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "createWithConstructor",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "createWithMethod",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "createWithMemberCategory",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "typeHintHasAppropriateToString",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "builtWithAppliesMemberCategories",
      "tail_type": "apiFunction"
    },
    {
      "head": "createWithNullTypeReference",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "nullTypeReferenceException",
      "tail_type": "useConstraint"
    },
    {
      "head": "createWithType",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "typeCreation",
      "tail_type": "useScenario"
    },
    {
      "head": "createWithTypeAndReachableType",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "typeWithReachableTypeCreation",
      "tail_type": "useScenario"
    },
    {
      "head": "createWithField",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "fieldHintCreation",
      "tail_type": "useScenario"
    },
    {
      "head": "createWithConstructor",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "constructorHintCreation",
      "tail_type": "useScenario"
    },
    {
      "head": "createWithMethod",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "methodHintCreation",
      "tail_type": "useScenario"
    },
    {
      "head": "createWithMemberCategory",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "memberCategoryHintCreation",
      "tail_type": "useScenario"
    },
    {
      "head": "typeHintHasAppropriateToString",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "toStringMethodTest",
      "tail_type": "useSampleCode"
    },
    {
      "head": "builtWithAppliesMemberCategories",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "memberCategoriesApplicationTest",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#createWithMethodAndSameMethodAppliesExecutableModePrecedence()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "TypeHint creation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#createWithMethodAndSameMethodAppliesExecutableModePrecedence()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "MethodHint configuration",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#createWithMethodAndSameMethodAppliesExecutableModePrecedence()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "ExecutableMode precedence handling",
      "tail_type": "apiFunction"
    },
    {
      "head": "TypeHint creation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "TypeHint creation sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "MethodHint configuration",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "MethodHint configuration sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "ExecutableMode precedence handling",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "ExecutableMode precedence handling sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "TypeHint creation sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "Complete TypeHint creation example",
      "tail_type": "useSampleCode"
    },
    {
      "head": "MethodHint configuration sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "Complete MethodHint configuration example",
      "tail_type": "useSampleCode"
    },
    {
      "head": "ExecutableMode precedence handling sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "Complete ExecutableMode precedence handling example",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.TypeHint",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.MethodHint",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.ExecutableMode",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#createWithMethodAndSameMethodAppliesExecutableModePrecedence()",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.aot.hint.TypeHintTests related concept interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#createWithMethodAndSameMethodAppliesExecutableModePrecedence()",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.aot.hint.TypeHintTests design principle interpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#methods()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerType",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#methods()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "withMethod",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#methods()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "assertEquals",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#methods()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#methods()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#methods()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#methods()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "RuntimeHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#methods()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "Integer",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#methods()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "TypeReference",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#methods()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "ExecutableMode",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#methods()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "JSONException",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.core.SpringNamingPolicyTests#nullPrefix()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "generateClassName",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.core.SpringNamingPolicyTests#nullPrefix()",
      "head_type": "method",
      "relation": "have",
      "tail": "generateClassNameSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "generateClassNameSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "generateClassName",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.core.SpringNamingPolicyTests#nullPrefix()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.core.SpringNamingPolicyTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.core.SpringNamingPolicyTests",
      "head_type": "class",
      "relation": "have",
      "tail": "generateClassNameDesignPrinciple",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "generateClassNameDesignPrinciple",
      "head_type": "designPrincipleInterpretation",
      "relation": "have",
      "tail": "generateClassName",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.core.SpringNamingPolicyTests#javaPrefix()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "generateClassName",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.core.SpringNamingPolicyTests#javaPrefix()",
      "head_type": "method",
      "relation": "have",
      "tail": "generateClassNameSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "generateClassNameSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "generateClassNameCompleteExample",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnNonAnnotatedClass()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "isAnnotatedWithNameOnNonAnnotatedClass",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#isAnnotatedWithNameOnNonAnnotatedClass()",
      "head_type": "method",
      "relation": "have",
      "tail": "isAnnotatedWithNameOnNonAnnotatedClassSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "isAnnotatedWithNameOnNonAnnotatedClassSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getMergedAnnotationAttributesWithShadowedAliasComposedAnnotation()",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedAnnotationAttributesWithShadowedAliasComposedAnnotation()",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "getMergedAnnotationAttributesWithShadowedAliasComposedAnnotation()",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "relatedConceptInterpretation",
      "head_type": "relatedConceptInterpretation",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "designPrincipleInterpretation",
      "head_type": "designPrincipleInterpretation",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnSubNonInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "findMergedAnnotationAttributes",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnSubNonInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtils",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnSubNonInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnSubNonInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnSubNonInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.ClassWithInheritedAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "Inherited Annotation Processing",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.ClassWithInheritedAnnotation",
      "head_type": "class",
      "relation": "have",
      "tail": "Inherited annotations are annotations that are applied to a class and are inherited by its subclasses. This means that if a class is annotated with an inherited annotation, all of its subclasses will also be annotated with the same annotation.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.ClassWithInheritedAnnotation",
      "head_type": "class",
      "relation": "have",
      "tail": "The design principle behind inherited annotations is to provide a way to apply annotations to a class hierarchy in a way that is both concise and consistent. This can be particularly useful for annotations that represent cross-cutting concerns, such as transaction management or security.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.ClassWithInheritedAnnotation",
      "head_type": "class",
      "relation": "have",
      "tail": "package org.springframework.core.annotation;\n\nimport java.lang.annotation.Inherited;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\n\n@Retention(RetentionPolicy.RUNTIME)\n@Inherited\npublic @interface ClassWithInheritedAnnotation {\n    // Annotation members\n    String value() default \"default\";\n}\n\n// Example usage\npublic class ParentClass {\n    @ClassWithInheritedAnnotation(value = \"parent\")\n    public void parentMethod() {\n        // Method implementation\n    }\n}\n\npublic class ChildClass extends ParentClass {\n    // ChildClass inherits the ClassWithInheritedAnnotation from ParentClass\n    public void childMethod() {\n        // Method implementation\n    }\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.ConcreteClassWithInheritedAnnotation#handle()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "handle method",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.ConcreteClassWithInheritedAnnotation#handle()",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.core.annotation.ConcreteClassWithInheritedAnnotation",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.ConcreteClassWithInheritedAnnotation",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.ConcreteClassWithInheritedAnnotation#handle()",
      "head_type": "method",
      "relation": "have",
      "tail": "This method is used to handle a specific task.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.ConcreteClassWithInheritedAnnotation#handle()",
      "head_type": "method",
      "relation": "have",
      "tail": "This method follows the principle of overriding methods from a parent class.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.ConcreteClassWithInheritedAnnotation#handle()",
      "head_type": "method",
      "relation": "have",
      "tail": "java\npackage org.springframework.core.annotation;\n\npublic class ConcreteClassWithInheritedAnnotation {\n    @Override\n    public void handle() {\n        // Implementation details\n    }\n}\n",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.ComponentScanWithBasePackagesAndValueAliasClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "component scanning",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.ComponentScanWithBasePackagesAndValueAliasClass",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "package and value alias constraints",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.ComponentScanWithBasePackagesAndValueAliasClass",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "base package scanning",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.ComponentScanWithBasePackagesAndValueAliasClass",
      "head_type": "class",
      "relation": "have",
      "tail": "sample code for component scanning",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.ComponentScanWithBasePackagesAndValueAliasClass",
      "head_type": "class",
      "relation": "have",
      "tail": "related concept interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.ComponentScanWithBasePackagesAndValueAliasClass",
      "head_type": "class",
      "relation": "have",
      "tail": "design principle interpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.ComponentScanWithBasePackagesAndValueAliasClass",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.context.annotation.ComponentScan",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationBackCompatibilityTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "back-compatibility testing",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationBackCompatibilityTests",
      "head_type": "class",
      "relation": "have",
      "tail": "Tests to ensure back-compatibility with Spring Framework 5.1",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationBackCompatibilityTests",
      "head_type": "class",
      "relation": "have",
      "tail": " Phillip Webb",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationBackCompatibilityTests",
      "head_type": "class",
      "relation": "have",
      "tail": "since 5.2",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationBackCompatibilityTests",
      "head_type": "class",
      "relation": "have",
      "tail": "void multiplRoutesToMetaAnnotation() { ... }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationBackCompatibilityTests",
      "head_type": "class",
      "relation": "have",
      "tail": "void defaultValue() { ... }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "multiplRoutesToMetaAnnotation",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "annotation merging",
      "tail_type": "apiFunction"
    },
    {
      "head": "defaultValue",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "annotation default value synthesis",
      "tail_type": "apiFunction"
    },
    {
      "head": "TestAnnotation",
      "head_type": "annotation",
      "relation": "haveFunction",
      "tail": "annotation with string value",
      "tail_type": "apiFunction"
    },
    {
      "head": "MetaTestAnnotation",
      "head_type": "annotation",
      "relation": "haveFunction",
      "tail": "meta-annotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "TestAndMetaTestAnnotation",
      "head_type": "annotation",
      "relation": "haveFunction",
      "tail": "composed annotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "MetaMetaTestAnnotation",
      "head_type": "annotation",
      "relation": "haveFunction",
      "tail": "meta-meta-annotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "DefaultValueAnnotation",
      "head_type": "annotation",
      "relation": "haveFunction",
      "tail": "annotation with default enum value",
      "tail_type": "apiFunction"
    },
    {
      "head": "WithMetaMetaTestAnnotation1AndMetaTestAnnotation2",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "class with multiple meta-annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "WithDefaultValue",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "class with default annotation values",
      "tail_type": "apiFunction"
    },
    {
      "head": "TestEnum",
      "head_type": "enum",
      "relation": "haveFunction",
      "tail": "enumeration with values",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#matchesAnnotationClassWhenNoMatchReturnsFalse()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "matchesAnnotationClass",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#matchesAnnotationClassWhenNoMatchReturnsFalse()",
      "head_type": "method",
      "relation": "have",
      "tail": "void matchesAnnotationClassWhenNoMatchReturnsFalse() { Class<OtherAnnotation> annotationType = OtherAnnotation.class; assertThat(FILTER.matches(annotationType)).isFalse(); }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#matchesAnnotationClassWhenNoMatchReturnsFalse()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationFilterTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#matchesAnnotationClassWhenNoMatchReturnsFalse()",
      "head_type": "method",
      "relation": "have",
      "tail": "This method tests the functionality of the AnnotationFilter to ensure it returns false when there is no match for the annotation class.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#matchesAnnotationClassWhenNoMatchReturnsFalse()",
      "head_type": "method",
      "relation": "have",
      "tail": "The design principle behind this method is to ensure that the AnnotationFilter correctly identifies non-matching annotation types, maintaining the integrity and reliability of the annotation filtering process.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFuntion",
      "tail": "forAnnotationTypeWhenNoMetaAnnotationsReturnsMappings",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFuntion",
      "tail": "forAnnotationTypeWhenMetaAnnotationsReturnsMappings",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFuntion",
      "tail": "forAnnotationTypeWhenHasRepeatingMetaAnnotationReturnsMapping",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFuntion",
      "tail": "forAnnotationTypeWhenRepeatableMetaAnnotationIsFiltered",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFuntion",
      "tail": "forAnnotationTypeWhenSelfAnnotatedReturnsMapping",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFuntion",
      "tail": "forAnnotationTypeWhenFormsLoopReturnsMapping",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFuntion",
      "tail": "forAnnotationTypeWhenHasAliasForWithBothValueAndAttributeThrowsException",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFuntion",
      "tail": "forAnnotationTypeWhenAliasForToSelfNonExistingAttribute",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFuntion",
      "tail": "forAnnotationTypeWhenAliasForToOtherNonExistingAttribute",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFuntion",
      "tail": "forAnnotationTypeWhenAliasForToSelf",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFuntion",
      "tail": "forAnnotationTypeWhenAliasForWithArrayCompatibleReturnTypes",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFuntion",
      "tail": "forAnnotationTypeWhenAliasForWithIncompatibleReturnTypes",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFuntion",
      "tail": "forAnnotationTypeWhenAliasForToSelfAnnotatedToOtherAttribute",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFuntion",
      "tail": "forAnnotationTypeWhenAliasForHasMixedImplicitAndExplicitAliases",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFuntion",
      "tail": "forAnnotationTypeWhenAliasForNonMetaAnnotated",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFuntion",
      "tail": "forAnnotationTypeWhenAliasForSelfWithDifferentDefaults",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFuntion",
      "tail": "forAnnotationTypeWhenAliasForSelfWithMissingDefault",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFuntion",
      "tail": "forAnnotationTypeWhenAliasWithExplicitMirrorAndDifferentDefaults",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFuntion",
      "tail": "getDistanceReturnsDistance",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFuntion",
      "tail": "getAnnotationTypeReturnsAnnotationType",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFuntion",
      "tail": "getMetaTypeReturnsTypes",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFuntion",
      "tail": "getAnnotationWhenRootReturnsNull",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFuntion",
      "tail": "getAnnotationWhenMetaAnnotationReturnsAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFuntion",
      "tail": "getAttributesReturnsAttributes",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFuntion",
      "tail": "getAliasMappingReturnsAttributes",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFuntion",
      "tail": "getConventionMappingReturnsAttributes",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFuntion",
      "tail": "getMirrorSetWhenAliasPairReturnsMirrors",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFuntion",
      "tail": "getMirrorSetWhenImplicitMirrorsReturnsMirrors",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFuntion",
      "tail": "getMirrorSetWhenThreeDeepReturnsMirrors",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFuntion",
      "tail": "getAliasMappingWhenThreeDeepReturnsMappedAttributes",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFuntion",
      "tail": "getAliasMappingsWhenHasDefinedAttributesReturnsMappedAttributes",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFuntion",
      "tail": "resolveMirrorsWhenAliasPairResolves",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFuntion",
      "tail": "resolveMirrorsWhenHasSameValuesUsesFirst",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFuntion",
      "tail": "resolveMirrorsWhenOnlyHasDefaultValuesUsesFirst",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFuntion",
      "tail": "resolveMirrorsWhenHasDifferentValuesThrowsException",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFuntion",
      "tail": "resolveMirrorsWhenHasWithMultipleRoutesToAliasReturnsMirrors",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFuntion",
      "tail": "getAliasMappingWhenHasWithMultipleRoutesToAliasReturnsMappedAttributes",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFuntion",
      "tail": "getConventionMappingWhenConventionToExplicitAliasesReturnsMappedAttributes",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFuntion",
      "tail": "isEquivalentToDefaultValueWhenValueAndDefaultAreNullReturnsTrue",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFuntion",
      "tail": "isEquivalentToDefaultValueWhenValueAndDefaultMatchReturnsTrue",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFuntion",
      "tail": "isEquivalentToDefaultValueWhenClassAndStringNamesMatchReturnsTrue",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFuntion",
      "tail": "isEquivalentToDefaultValueWhenClassArrayAndStringArrayNamesMatchReturnsTrue",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFuntion",
      "tail": "isEquivalentToDefaultValueWhenNestedAnnotationAndExtractedValuesMatchReturnsTrueAndValueSuppliedAsMap",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFuntion",
      "tail": "isEquivalentToDefaultValueWhenNestedAnnotationAndExtractedValuesMatchReturnsTrueAndValueSuppliedAsTypeMappedAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFuntion",
      "tail": "isEquivalentToDefaultValueWhenNotMatchingReturnsFalse",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getAnnotationWhenRootReturnsNull",
      "tail_type": "apiFunction"
    },
    {
      "head": "getAnnotationWhenRootReturnsNull",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getAnnotationWhenRootReturnsNull() Sample Code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getAnnotationWhenRootReturnsNull() Sample Code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "Complete Example",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getAttributesReturnsAttributes",
      "tail_type": "apiFunction"
    },
    {
      "head": "getAttributesReturnsAttributes",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getAttributesReturnsAttributesSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getAttributesReturnsAttributesSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "getAttributesReturnsAttributesCompleteSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationFromInterface()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "find method annotation from interface",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationFromInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "sample code for finding method annotation from interface",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationFromInterface()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationFromInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "related concept interpretation for finding method annotation from interface",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationFromInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "design principle interpretation for finding method annotation from interface",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getDeclaredRepeatableAnnotationsDeclaredOnSuperclass",
      "tail_type": "apiFunction"
    },
    {
      "head": "getDeclaredRepeatableAnnotationsDeclaredOnSuperclass",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getDeclaredRepeatableAnnotationsDeclaredOnSuperclass() sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getDeclaredRepeatableAnnotationsDeclaredOnSuperclass() sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "Complete example of using getDeclaredRepeatableAnnotationsDeclaredOnSuperclass()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "getDeclaredRepeatableAnnotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "getDeclaredRepeatableAnnotations",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getDeclaredRepeatableAnnotations() sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getDeclaredRepeatableAnnotations() sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "Complete example of using getDeclaredRepeatableAnnotations()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "relatedConceptInterpretation",
      "head_type": "relatedConceptInterpretation",
      "relation": "have",
      "tail": "Explanation of related concepts for AnnotationUtilsTests",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "designPrincipleInterpretation",
      "head_type": "designPrincipleInterpretation",
      "relation": "have",
      "tail": "Explanation of design principles for AnnotationUtilsTests",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#assertAnnotationSynthesisFromMapWithImplicitAliases(String)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "synthesizeAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "synthesizeAnnotation",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "ImplicitAliasesContextConfig",
      "tail_type": "useConstraint"
    },
    {
      "head": "synthesizeAnnotation",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "map",
      "tail_type": "useScenario"
    },
    {
      "head": "synthesizeAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "synthesizeAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "synthesizeAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#assertAnnotationSynthesisFromMapWithImplicitAliases(String)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "annotationProcessing",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "metadataManagement",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "classDesign",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "nonInheritanceConstraint",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "interfaceAnnotationScenario",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "head_type": "class",
      "relation": "have",
      "tail": "interfaceAnnotationSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.NonInheritedAnnotationInterface",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.SubAnnotationInterface",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.InterfaceWithGenericAnnotatedMethod",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "void foo(T t)",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.InterfaceWithGenericAnnotatedMethod",
      "head_type": "class",
      "relation": "have",
      "tail": "void foo(T t) sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.annotation.AnnotatedMethodTests#registerReflectionWithoutTarget()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerReflectionHints",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.annotation.AnnotatedMethodTests#registerReflectionWithoutTarget()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "AtLeastOneClassMustBeSpecified",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.aot.hint.annotation.AnnotatedMethodTests#registerReflectionWithoutTarget()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerReflectionWithoutTargetSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerReflectionWithoutTargetSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "registerReflectionWithoutTargetCodeContent",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "registerReflectionWithoutTargetSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "registerReflectionWithoutTargetDesignPrinciple",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithCycles()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerTypeForSerializationWithCycles",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithCycles()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "SampleClassWithCycles",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithCycles()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "typeHints",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithCycles()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerTypeForSerializationWithCycles",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithCycles()",
      "head_type": "method",
      "relation": "have",
      "tail": "typeHints",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithCycles()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerTypeForSerializationWithCycles",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithCycles()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForInheritedJacksonAnnotations()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerTypeForInheritedJacksonAnnotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForInheritedJacksonAnnotations()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "SampleClassWithInheritedJsonProperty",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForInheritedJacksonAnnotations()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "SampleClassWithJsonProperty",
      "tail_type": "class"
    },
    {
      "head": "registerTypeForInheritedJacksonAnnotations",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "registerTypeForInheritedJacksonAnnotations useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerTypeForInheritedJacksonAnnotations useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "registerTypeForInheritedJacksonAnnotations useSampleCode Content",
      "tail_type": "content"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassWithResolvableType",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getResolvableType",
      "tail_type": "apiFunction"
    },
    {
      "head": "getResolvableType",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getResolvableType returns ResolvableType",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getResolvableType",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "ResolvableType is used to determine the type of an object",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "getResolvableType",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "Design principle: Encapsulation of type resolution logic",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.CustomDeserializer2",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "deserialize",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.CustomDeserializer2",
      "head_type": "class",
      "relation": "have",
      "tail": "constructor",
      "tail_type": "useSampleCode"
    },
    {
      "head": "deserialize",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "JsonParser p, DeserializationContext ctxt",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.CustomDeserializer2",
      "head_type": "class",
      "relation": "have",
      "tail": "constructor",
      "tail_type": "useSampleCode"
    },
    {
      "head": "constructor",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "CustomDeserializer2() { super(CustomDeserializer2.class); }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "deserialize",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "LocalDate",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "deserialize",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "JsonParser",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "deserialize",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "DeserializationContext",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.CustomDeserializer2",
      "head_type": "class",
      "relation": "designPrincipleInterpretation",
      "tail": "Inheritance",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.CustomDeserializer2",
      "head_type": "class",
      "relation": "designPrincipleInterpretation",
      "tail": "Polymorphism",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#reflectionOnTypeReferenceShouldMatchIntrospection()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "reflectionOnType",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#reflectionOnTypeReferenceShouldMatchIntrospection()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerType(SampleClass.class)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#reflectionOnTypeReferenceShouldMatchIntrospection()",
      "head_type": "method",
      "relation": "have",
      "tail": "assertPredicateMatches(reflection.onType(TypeReference.of(SampleClass.class)))",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#reflectionOnTypeReferenceShouldMatchIntrospection()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "SampleClass",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#reflectionOnTypeReferenceShouldMatchIntrospection()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "TypeReference",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#reflectionOnTypeReferenceShouldMatchIntrospection()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "runtimeHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnType#reflectionOnTypeReferenceShouldMatchIntrospection()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "reflection",
      "tail_type": "class"
    },
    {
      "head": "reflectionOnType",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "org.springframework.aot.hint.predicate.ReflectionOnType#reflectionOnTypeReferenceShouldMatchIntrospection()",
      "tail_type": "useScenario"
    },
    {
      "head": "registerType(SampleClass.class)",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.aot.hint.predicate.ReflectionOnType#reflectionOnTypeReferenceShouldMatchIntrospection()",
      "tail_type": "useScenario"
    },
    {
      "head": "assertPredicateMatches(reflection.onType(TypeReference.of(SampleClass.class)))",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.aot.hint.predicate.ReflectionOnType#reflectionOnTypeReferenceShouldMatchIntrospection()",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodInvocationMatchesMethodInvocationHint()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "privateMethodInvocation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodInvocationMatchesMethodInvocationHint()",
      "head_type": "method",
      "relation": "have",
      "tail": "runtimeHints.reflection().registerType(SampleClass.class, typeHint -> typeHint.withMethod(\"privateMethod\", Collections.emptyList(), ExecutableMode.INVOKE));",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodInvocationMatchesMethodInvocationHint()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "SampleClass",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.SerializationHintsPredicatesTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "shouldMatchRegisteredClass",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.SerializationHintsPredicatesTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "shouldMatchRegisteredTypeReference",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.SerializationHintsPredicatesTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "shouldNotMatchUnregisteredType",
      "tail_type": "apiFunction"
    },
    {
      "head": "shouldMatchRegisteredClass",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "shouldMatchRegisteredTypeReference",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "shouldNotMatchUnregisteredType",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.SerializationHintsPredicatesTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "SerializationHintsPredicates",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.SerializationHintsPredicatesTests",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.SerializationHintsPredicatesTests",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.ProxyHintsTests#registerJdkProxyWithConcreteClass()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerJdkProxy",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ProxyHintsTests#registerJdkProxyWithConcreteClass()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "IllegalArgumentException",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.aot.hint.ProxyHintsTests#registerJdkProxyWithConcreteClass()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerJdkProxyWithConcreteClass useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerJdkProxyWithConcreteClass useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.aot.hint.ProxyHintsTests#registerJdkProxyWithConcreteClass() sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.ProxyHintsTests#registerJdkProxyWithConcreteClass()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.ProxyHintsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ProxyHintsTests#proxiedInterfaces(Class<?>)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "proxiedInterfaces",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ProxyHintsTests#proxiedInterfaces(Class<?>)",
      "head_type": "method",
      "relation": "have",
      "tail": "private static Consumer<JdkProxyHint> proxiedInterfaces(Class<?>... proxiedInterfaces) {\n    return jdkProxyHint -> assertThat(jdkProxyHint.getProxiedInterfaces()).containsExactlyElementsOf(TypeReference.listOf(proxiedInterfaces));\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#assertTestTypeConstructorHint(Consumer<ExecutableHint>)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "assertion",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#assertTestTypeConstructorHint(Consumer<ExecutableHint>)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "reflection hint processing",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#assertTestTypeConstructorHint(Consumer<ExecutableHint>)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "type hint validation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#assertTestTypeConstructorHint(Consumer<ExecutableHint>)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "constructor hint verification",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#assertTestTypeConstructorHint(Consumer<ExecutableHint>)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "member category checking",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#assertTestTypeConstructorHint(Consumer<ExecutableHint>)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "field absence verification",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#assertTestTypeConstructorHint(Consumer<ExecutableHint>)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "method absence verification",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#assertTestTypeConstructorHint(Consumer<ExecutableHint>)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "canonical name comparison",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#assertTestTypeConstructorHint(Consumer<ExecutableHint>)",
      "head_type": "method",
      "relation": "have",
      "tail": "private void assertTestTypeConstructorHint(Consumer<ExecutableHint> constructorHint) {\n    assertThat(this.reflectionHints.typeHints()).singleElement().satisfies(typeHint -> {\n        assertThat(typeHint.getMemberCategories()).isEmpty();\n        assertThat(typeHint.getType().getCanonicalName()).isEqualTo(TestType.class.getCanonicalName());\n        assertThat(typeHint.fields()).isEmpty();\n        assertThat(typeHint.constructors()).singleElement().satisfies(constructorHint);\n        assertThat(typeHint.methods()).isEmpty();\n        assertThat(typeHint.getMemberCategories()).isEmpty();\n    });\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#assertTestTypeConstructorHint(Consumer<ExecutableHint>)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.ReflectionHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#assertTestTypeConstructorHint(Consumer<ExecutableHint>)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.TypeHint",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#assertTestTypeConstructorHint(Consumer<ExecutableHint>)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.ExecutableHint",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#assertTestTypeConstructorHint(Consumer<ExecutableHint>)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.MemberCategory",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#assertTestTypeConstructorHint(Consumer<ExecutableHint>)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "java.lang.reflect.Constructor",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#assertTestTypeConstructorHint(Consumer<ExecutableHint>)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "java.lang.reflect.Method",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#assertTestTypeConstructorHint(Consumer<ExecutableHint>)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "java.lang.reflect.Field",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#assertTestTypeConstructorHint(Consumer<ExecutableHint>)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "java.util.function.Consumer",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#assertTestTypeConstructorHint(Consumer<ExecutableHint>)",
      "head_type": "method",
      "relation": "have",
      "tail": "This method is used to assert the presence and correctness of constructor hints within reflection hints. It verifies that the specified type has the correct constructor hint by checking the member categories, canonical name, fields, constructors, methods, and member categories again. The method uses a consumer to further validate the constructor hint details.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.ReflectionHintsTests#assertTestTypeConstructorHint(Consumer<ExecutableHint>)",
      "head_type": "method",
      "relation": "have",
      "tail": "The design principle behind this method is to ensure that reflection hints are accurately captured and validated. It follows a test-driven approach to verify the integrity of the reflection data, ensuring that the application's reflection-based functionalities are correctly configured and operate as expected. This principle supports maintainability and reliability in the codebase.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests#registerWithNonExistingLocationDoesNotRegisterHint()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerWithNonExistingLocationDoesNotRegisterHint",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests#registerWithNonExistingLocationDoesNotRegisterHint()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerWithNonExistingLocationDoesNotRegisterHint useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerWithNonExistingLocationDoesNotRegisterHint useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests#registerWithNonExistingLocationDoesNotRegisterHint() sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.TypeReferenceTests#typeReferenceWithNestedInnerClassName()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "typeReferenceWithNestedInnerClassName",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.TypeReferenceTests#typeReferenceWithNestedInnerClassName()",
      "head_type": "method",
      "relation": "have",
      "tail": "typeReferenceWithNestedInnerClassNameSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "typeReferenceWithNestedInnerClassNameSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "TypeReference.of()",
      "tail_type": "apiFunction"
    },
    {
      "head": "typeReferenceWithNestedInnerClassNameSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "assertThat().isEqualTo()",
      "tail_type": "apiFunction"
    },
    {
      "head": "typeReferenceWithNestedInnerClassNameSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "type.getEnclosingType()",
      "tail_type": "apiFunction"
    },
    {
      "head": "typeReferenceWithNestedInnerClassNameSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "parentEnclosingType.getEnclosingType()",
      "tail_type": "apiFunction"
    },
    {
      "head": "typeReferenceWithNestedInnerClassNameSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "TypeReference",
      "tail_type": "class"
    },
    {
      "head": "typeReferenceWithNestedInnerClassNameSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "type",
      "tail_type": "class"
    },
    {
      "head": "typeReferenceWithNestedInnerClassNameSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "enclosingType",
      "tail_type": "class"
    },
    {
      "head": "typeReferenceWithNestedInnerClassNameSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "parentEnclosingType",
      "tail_type": "class"
    },
    {
      "head": "typeReferenceWithNestedInnerClassNameSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "assertThat().satisfies()",
      "tail_type": "apiFunction"
    },
    {
      "head": "typeReferenceWithNestedInnerClassNameSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "assertThat().isNull()",
      "tail_type": "apiFunction"
    },
    {
      "head": "typeReferenceWithNestedInnerClassNameSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "typeReferenceWithNestedInnerClassNameRelatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "typeReferenceWithNestedInnerClassNameSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "typeReferenceWithNestedInnerClassNameDesignPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.nativex.Inner",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "inner class handling",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.Inner",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "must be used within a native image build process",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.aot.nativex.Inner",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "AOT processing for native images",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.nativex.Inner",
      "head_type": "class",
      "relation": "have",
      "tail": "org.springframework.aot.nativex.Inner is used to handle inner classes during ahead-of-time (AOT) processing for native image generation. It ensures that inner classes are correctly processed and included in the native image, which is crucial for applications that rely on reflection or dynamic class loading. This class is part of Spring's support for GraalVM native image, which allows Java applications to be compiled into standalone executables with low footprint and fast startup times.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.nativex.Inner",
      "head_type": "class",
      "relation": "have",
      "tail": "The design principle behind org.springframework.aot.nativex.Inner is to facilitate the seamless integration of inner classes into the native image build process. This involves identifying and processing inner classes, ensuring that all necessary metadata and resources are included in the native image. The design emphasizes performance optimization and reduction of the application's memory footprint, which are key benefits of using native images. By handling inner classes efficiently, this class contributes to the overall goal of enabling high-performance, lightweight Java applications.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.nativex.Inner",
      "head_type": "class",
      "relation": "have",
      "tail": "package com.example.demo;\n\nimport org.springframework.aot.nativex.Inner;\n\npublic class InnerClassExample {\n\n    public static void main(String[] args) {\n        // Example usage of org.springframework.aot.nativex.Inner\n        Inner inner = new Inner();\n        // Additional code to demonstrate the usage of Inner class\n    }\n\n    // Inner class example\n    class MyInnerClass {\n        // Inner class content\n    }\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#sortTypeHints()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerType",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#sortTypeHints()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "writeJson",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#sortTypeHints()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "RuntimeHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#sortTypeHints()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "Integer",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#sortTypeHints()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "Long",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#sortTypeHints()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#sortTypeHints()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#sortTypeHints()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.core.SpringNamingPolicyTests#fastClass()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "generateClassName",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.core.SpringNamingPolicyTests#fastClass()",
      "head_type": "method",
      "relation": "have",
      "tail": "generateClassNameSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "generateClassNameSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "generateClassName",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.core.SpringNamingPolicyTests#fastClass()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.core.SpringNamingPolicyTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.core.SpringNamingPolicyTests",
      "head_type": "class",
      "relation": "have",
      "tail": "generateClassNameDesignPrinciple",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "generateClassNameDesignPrinciple",
      "head_type": "designPrincipleInterpretation",
      "relation": "have",
      "tail": "generateClassName",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getMergedAnnotationAttributesWithImplicitAliasesInMetaAnnotationOnComposedAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedAnnotationAttributesWithImplicitAliasesInMetaAnnotationOnComposedAnnotation",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "ComposedImplicitAliasesContextConfigClass",
      "tail_type": "class"
    },
    {
      "head": "getMergedAnnotationAttributesWithImplicitAliasesInMetaAnnotationOnComposedAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getMergedAnnotationAttributesWithImplicitAliasesInMetaAnnotationOnComposedAnnotation()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getMergedAnnotationAttributesWithImplicitAliasesInMetaAnnotationOnComposedAnnotation()",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "getMergedAnnotationAttributesWithImplicitAliasesInMetaAnnotationOnComposedAnnotation()",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "ComposedImplicitAliasesContextConfigClass",
      "tail_type": "class"
    },
    {
      "head": "getMergedAnnotationAttributesWithImplicitAliasesInMetaAnnotationOnComposedAnnotation()",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "ImplicitAliasesContextConfig",
      "tail_type": "class"
    },
    {
      "head": "getMergedAnnotationAttributesWithImplicitAliasesInMetaAnnotationOnComposedAnnotation()",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "groovyScripts",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedAnnotationAttributesWithImplicitAliasesInMetaAnnotationOnComposedAnnotation()",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "xmlFiles",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedAnnotationAttributesWithImplicitAliasesInMetaAnnotationOnComposedAnnotation()",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "locations",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedAnnotationAttributesWithImplicitAliasesInMetaAnnotationOnComposedAnnotation()",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "value",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedAnnotationAttributesWithImplicitAliasesInMetaAnnotationOnComposedAnnotation()",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "isAnnotated",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedAnnotationAttributesWithImplicitAliasesInMetaAnnotationOnComposedAnnotation()",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "asArray",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedAnnotationAttributesWithImplicitAliasesInMetaAnnotationOnComposedAnnotation()",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "assertThat",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedAnnotationAttributesWithImplicitAliasesInMetaAnnotationOnComposedAnnotation()",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "getMergedAnnotationAttributes",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedAnnotationAttributesWithImplicitAliasesInMetaAnnotationOnComposedAnnotation()",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "getStringArray",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedAnnotationAttributesWithImplicitAliasesInMetaAnnotationOnComposedAnnotation()",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "ComposedImplicitAliasesContextConfigClass",
      "tail_type": "class"
    },
    {
      "head": "getMergedAnnotationAttributesWithImplicitAliasesInMetaAnnotationOnComposedAnnotation()",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "ImplicitAliasesContextConfig",
      "tail_type": "class"
    },
    {
      "head": "getMergedAnnotationAttributesWithImplicitAliasesInMetaAnnotationOnComposedAnnotation()",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "groovyScripts",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedAnnotationAttributesWithImplicitAliasesInMetaAnnotationOnComposedAnnotation()",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "xmlFiles",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedAnnotationAttributesWithImplicitAliasesInMetaAnnotationOnComposedAnnotation()",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "locations",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedAnnotationAttributesWithImplicitAliasesInMetaAnnotationOnComposedAnnotation()",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "value",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedAnnotationAttributesWithImplicitAliasesInMetaAnnotationOnComposedAnnotation()",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "isAnnotated",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedAnnotationAttributesWithImplicitAliasesInMetaAnnotationOnComposedAnnotation()",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "asArray",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedAnnotationAttributesWithImplicitAliasesInMetaAnnotationOnComposedAnnotation()",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "assertThat",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedAnnotationAttributesWithImplicitAliasesInMetaAnnotationOnComposedAnnotation()",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "getMergedAnnotationAttributes",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedAnnotationAttributesWithImplicitAliasesInMetaAnnotationOnComposedAnnotation()",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "getStringArray",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getMergedAnnotationWithImplicitAliasesForSameAttributeInComposedAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedAnnotationWithImplicitAliasesForSameAttributeInComposedAnnotation",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "multiple aliases for a single name",
      "tail_type": "useScenario"
    },
    {
      "head": "getMergedAnnotationWithImplicitAliasesForSameAttributeInComposedAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "package org.springframework.core.annotation; import org.junit.jupiter.api.Test; public class AnnotatedElementUtilsTests { @Test void getMergedAnnotationWithImplicitAliasesForSameAttributeInComposedAnnotation() { assertGetMergedAnnotation(ImplicitAliasesContextConfigClass1.class, \"foo.xml\"); assertGetMergedAnnotation(ImplicitAliasesContextConfigClass2.class, \"bar.xml\"); assertGetMergedAnnotation(ImplicitAliasesContextConfigClass3.class, \"baz.xml\"); } }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getMergedAnnotationWithImplicitAliasesForSameAttributeInComposedAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "getMergedAnnotationWithImplicitAliasesForSameAttributeInComposedAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtils",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AliasedTransactionalComponentClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "transactional component annotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AliasedTransactionalComponentClass",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "alias naming conventions",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.AliasedTransactionalComponentClass",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "transactional component management",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AliasedTransactionalComponentClass",
      "head_type": "class",
      "relation": "have",
      "tail": "related to Spring transaction management",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AliasedTransactionalComponentClass",
      "head_type": "class",
      "relation": "have",
      "tail": "design principles of transactional components",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AliasedTransactionalComponentClass",
      "head_type": "class",
      "relation": "have",
      "tail": "sample code for transactional component annotation",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AliasedTransactionalComponentClass",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.transaction.annotation.Transactional",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.HalfConventionBasedAndHalfAliasedComposedContextConfigClassV2",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "context configuration",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.HalfConventionBasedAndHalfAliasedComposedContextConfigClassV2",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "half convention based and half aliased",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.HalfConventionBasedAndHalfAliasedComposedContextConfigClassV2",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "composed context configuration",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.HalfConventionBasedAndHalfAliasedComposedContextConfigClassV2",
      "head_type": "class",
      "relation": "have",
      "tail": "related to Spring Framework's context configuration",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.HalfConventionBasedAndHalfAliasedComposedContextConfigClassV2",
      "head_type": "class",
      "relation": "have",
      "tail": "design based on convention over configuration and aliasing",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.HalfConventionBasedAndHalfAliasedComposedContextConfigClassV2",
      "head_type": "class",
      "relation": "have",
      "tail": "public class HalfConventionBasedAndHalfAliasedComposedContextConfigClassV2 {\n    // Example usage\n    public static void main(String[] args) {\n        // Code to demonstrate context configuration\n    }\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.ImplicitAliasesContextConfigClass1",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "implicit aliases context configuration",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.ImplicitAliasesContextConfigClass1",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "no circular aliases allowed",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.ImplicitAliasesContextConfigClass1",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "single name with multiple aliases",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.ImplicitAliasesContextConfigClass1",
      "head_type": "class",
      "relation": "have",
      "tail": "related concept interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.ImplicitAliasesContextConfigClass1",
      "head_type": "class",
      "relation": "have",
      "tail": "design principle interpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.ImplicitAliasesContextConfigClass1",
      "head_type": "class",
      "relation": "have",
      "tail": "sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.ImplicitAliasesContextConfigClass1",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.SimpleAliasRegistryTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AliasForBasedSinglePackageComponentScanClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "single package component scanning",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AliasForBasedSinglePackageComponentScanClass",
      "head_type": "class",
      "relation": "have",
      "tail": "related to package scanning",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AliasForBasedSinglePackageComponentScanClass",
      "head_type": "class",
      "relation": "have",
      "tail": "design principle of reducing code redundancy",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWithGenericParameterNonOverrideScansAnnotations()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scanning annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWithGenericParameterNonOverrideScansAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "void typeHierarchyStrategyOnMethodWithGenericParameterNonOverrideScansAnnotations() {\n    Method source = ReflectionUtils.findMethod(GenericNonOverride.class, \"method\", StringBuilder.class);\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\");\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWithGenericParameterNonOverrideScansAnnotations()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWithGenericParameterNonOverrideScansAnnotations()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "GenericNonOverride",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWithGenericParameterNonOverrideScansAnnotations()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "StringBuilder",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWithGenericParameterNonOverrideScansAnnotations()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "SearchStrategy",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWithGenericParameterNonOverrideScansAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "This method tests the type hierarchy strategy for scanning annotations on a method with a generic parameter that does not override a method from a superclass.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWithGenericParameterNonOverrideScansAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "The design principle behind this method is to ensure that annotations are correctly scanned and applied based on the type hierarchy, even when dealing with generic parameters and non-overriding methods.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyWithEnclosingClassPredicatesOnMethodHierarchyUsesTypeHierarchyScan()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "typeHierarchyStrategyWithEnclosingClassPredicatesOnMethodHierarchyUsesTypeHierarchyScan",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyWithEnclosingClassPredicatesOnMethodHierarchyUsesTypeHierarchyScan()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "typeHierarchyStrategyWithEnclosingClassPredicatesOnMethodHierarchyUsesTypeHierarchyScan",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "typeHierarchyStrategyWithEnclosingClassPredicatesOnMethodHierarchyUsesTypeHierarchyScan() useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "typeHierarchyStrategyWithEnclosingClassPredicatesOnMethodHierarchyUsesTypeHierarchyScan() useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "package org.springframework.core.annotation; import org.junit.jupiter.api.Test; import java.lang.reflect.Method; import static org.assertj.core.api.Assertions.assertThat; import static org.springframework.core.annotation.AnnotationUtils.scan; import static org.springframework.core.annotation.AnnotationUtils.SearchStrategy.TYPE_HIERARCHY; import static org.springframework.util.ClassUtils.isInnerClass; public class AnnotationsScannerTests { @Test void typeHierarchyStrategyWithEnclosingClassPredicatesOnMethodHierarchyUsesTypeHierarchyScan() { Method source = methodFrom(WithHierarchy.class); assertThat(scan(source, TYPE_HIERARCHY, Search.always).toList()).isEqualTo(scan(source, TYPE_HIERARCHY, ClassUtils::isInnerClass).toList()).containsExactly(\"0:TestAnnotation1\", \"1:TestAnnotation5\", \"1:TestInheritedAnnotation5\", \"2:TestAnnotation6\", \"3:TestAnnotation2\", \"3:TestInheritedAnnotation2\", \"4:TestAnnotation3\", \"5:TestAnnotation4\"); } }",
      "tail_type": "String"
    },
    {
      "head": "typeHierarchyStrategyWithEnclosingClassPredicatesOnMethodHierarchyUsesTypeHierarchyScan",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "typeHierarchyStrategyWithEnclosingClassPredicatesOnMethodHierarchyUsesTypeHierarchyScan relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "typeHierarchyStrategyWithEnclosingClassPredicatesOnMethodHierarchyUsesTypeHierarchyScan relatedConceptInterpretation",
      "head_type": "relatedConceptInterpretation",
      "relation": "have",
      "tail": "This function tests the behavior of the type hierarchy strategy when used with enclosing class predicates on a method hierarchy. It verifies that the correct annotations are scanned and returned when the type hierarchy scan strategy is applied, considering inner classes and inherited annotations.",
      "tail_type": "String"
    },
    {
      "head": "typeHierarchyStrategyWithEnclosingClassPredicatesOnMethodHierarchyUsesTypeHierarchyScan",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "typeHierarchyStrategyWithEnclosingClassPredicatesOnMethodHierarchyUsesTypeHierarchyScan designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "typeHierarchyStrategyWithEnclosingClassPredicatesOnMethodHierarchyUsesTypeHierarchyScan designPrincipleInterpretation",
      "head_type": "designPrincipleInterpretation",
      "relation": "have",
      "tail": "The design principle behind this function is to ensure that the annotation scanning mechanism correctly handles complex class and method hierarchies, including inner classes and inherited annotations. This is crucial for maintaining consistency and reliability in the annotation processing system.",
      "tail_type": "String"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#scanWhenProcessorReturnsFromDoWithAggregateExitsEarly()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scan",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#scanWhenProcessorReturnsFromDoWithAggregateExitsEarly()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "doWithAggregate",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#scanWhenProcessorReturnsFromDoWithAggregateExitsEarly()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "doWithAnnotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#scanWhenProcessorReturnsFromDoWithAggregateExitsEarly()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "assertThat",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#scanWhenProcessorReturnsFromDoWithAggregateExitsEarly()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "isEmpty",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#scanWhenProcessorReturnsFromDoWithAggregateExitsEarly()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#scanWhenProcessorReturnsFromDoWithAggregateExitsEarly()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "WithSingleSuperclass",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#scanWhenProcessorReturnsFromDoWithAggregateExitsEarly()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "SearchStrategy",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#scanWhenProcessorReturnsFromDoWithAggregateExitsEarly()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "AnnotationsProcessor",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#scanWhenProcessorReturnsFromDoWithAggregateExitsEarly()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "IllegalStateException",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#scanWhenProcessorReturnsFromDoWithAggregateExitsEarly()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "assertThat",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#scanWhenProcessorReturnsFromDoWithAggregateExitsEarly()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "isEmpty",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#scanWhenProcessorReturnsFromDoWithAggregateExitsEarly()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#scanWhenProcessorReturnsFromDoWithAggregateExitsEarly()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#scanWhenProcessorReturnsFromDoWithAggregateExitsEarly()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.WithSingleSuperclassAndDoubleInherited#method()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "testMethod",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.WithSingleSuperclassAndDoubleInherited#method()",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.core.annotation.WithSingleSuperclassAndDoubleInherited",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.WithSingleSuperclassAndDoubleInherited#method()",
      "head_type": "method",
      "relation": "have",
      "tail": "This method is used for testing purposes within the context of the WithSingleSuperclassAndDoubleInherited class.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.WithSingleSuperclassAndDoubleInherited#method()",
      "head_type": "method",
      "relation": "have",
      "tail": "The design principle behind this method is to ensure that it can be overridden and annotated with @TestAnnotation1 for specific testing scenarios.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.WithSingleSuperclassAndDoubleInherited#method()",
      "head_type": "method",
      "relation": "have",
      "tail": "java\npackage org.springframework.core.annotation;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.METHOD)\n@interface TestAnnotation1 {\n}\n\nclass WithSingleSuperclassAndDoubleInherited {\n    @TestAnnotation1\n    public void method() {\n        // Method implementation\n    }\n}\n",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.HierarchyInterface#method()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "testFunctionality",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.HierarchyInterface#method()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "noConstraints",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.HierarchyInterface#method()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "generalTesting",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.HierarchyInterface#method()",
      "head_type": "method",
      "relation": "have",
      "tail": "voidReturnType",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.HierarchyInterface#method()",
      "head_type": "method",
      "relation": "have",
      "tail": "designByContract",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.HierarchyInterface#method()",
      "head_type": "method",
      "relation": "have",
      "tail": "sampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.HierarchyInterface",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.HierarchyInterface#method()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getConventionMappingWhenConventionToExplicitAliasesReturnsMappedAttributes",
      "tail_type": "apiFunction"
    },
    {
      "head": "getConventionMappingWhenConventionToExplicitAliasesReturnsMappedAttributes",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getConventionMappingWhenConventionToExplicitAliasesReturnsMappedAttributes() { ... }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getConventionMappingWhenConventionToExplicitAliasesReturnsMappedAttributes() { ... }",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "getConventionMappingWhenConventionToExplicitAliasesReturnsMappedAttributes() { ... }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithImplicitAttributeAliases()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "synthesizeAnnotationFromMapWithImplicitAttributeAliases",
      "tail_type": "apiFunction"
    },
    {
      "head": "synthesizeAnnotationFromMapWithImplicitAttributeAliases",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithImplicitAttributeAliases()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "synthesizeAnnotationFromMapWithImplicitAttributeAliases",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithImplicitAttributeAliases()",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "synthesizeAnnotationFromMapWithImplicitAttributeAliases",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithImplicitAttributeAliases()",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AliasedComposedContextConfigNotMetaPresentClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "context configuration",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AliasedComposedContextConfigNotMetaPresentClass",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "metadata presence",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.AliasedComposedContextConfigNotMetaPresentClass",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "composing annotations",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AliasedComposedContextConfigNotMetaPresentClass",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AliasedComposedContextConfigNotMetaPresentClass",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AliasedComposedContextConfigNotMetaPresentClass",
      "head_type": "class",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AliasedComposedContextConfigNotMetaPresentClass",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.context.annotation.ConfigurationClassPostProcessor",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.Builder#build()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "buildSampleRecord",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.Builder#build()",
      "head_type": "method",
      "relation": "have",
      "tail": "SampleRecordWithJacksonCustomStrategy",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.Builder#build()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "completeSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.ExecutableModeTests#introspectDoesNotIncludeInvoke()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "introspection",
      "tail_type": "apiFunction"
    },
    {
      "head": "introspection",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "accuracy",
      "tail_type": "useConstraint"
    },
    {
      "head": "introspection",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "testing frameworks",
      "tail_type": "useScenario"
    },
    {
      "head": "introspection",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "sample code for introspection",
      "tail_type": "useSampleCode"
    },
    {
      "head": "introspection",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "related concept interpretation for introspection",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "introspection",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "design principle interpretation for introspection",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.ExecutableModeTests#introspectDoesNotIncludeInvoke()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.ExecutableMode",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#resourcePatternDoesNotMatchTypeAndResourceName()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registering resource pattern",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#resourcePatternDoesNotMatchTypeAndResourceName()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "asserting predicate does not match",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#resourcePatternDoesNotMatchTypeAndResourceName()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicatesTests#resourcePatternDoesNotMatchTypeAndResourceName()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "ResourceHintsPredicatesTests",
      "tail_type": "class"
    },
    {
      "head": "registering resource pattern",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "asserting predicate does not match",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.ResourcePatternHintTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "ResourcePatternHint",
      "tail_type": "apiFunction"
    },
    {
      "head": "ResourcePatternHint",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "patternWithLeadingSlashIsRejected",
      "tail_type": "useConstraint"
    },
    {
      "head": "ResourcePatternHint",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "rootDirectory",
      "tail_type": "useScenario"
    },
    {
      "head": "ResourcePatternHint",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "fileAtRoot",
      "tail_type": "useScenario"
    },
    {
      "head": "ResourcePatternHint",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "fileInDirectory",
      "tail_type": "useScenario"
    },
    {
      "head": "ResourcePatternHint",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "extension",
      "tail_type": "useScenario"
    },
    {
      "head": "ResourcePatternHint",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "extensionInDirectoryAtAnyDepth",
      "tail_type": "useScenario"
    },
    {
      "head": "ResourcePatternHint",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "anyFileInDirectoryAtAnyDepth",
      "tail_type": "useScenario"
    },
    {
      "head": "ResourcePatternHint",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "ResourcePatternHint",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "ResourcePatternHint",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.ResourcePatternHintTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "ResourcePatternHint",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests#configureWithNoClasspathLocation()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "validate classpath location specification",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests#configureWithNoClasspathLocation()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "requirement of at least one classpath location",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests#configureWithNoClasspathLocation()",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrar",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests#configureWithNoClasspathLocation()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests#configureWithNoClasspathLocation()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests#configureWithNoClasspathLocation()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests#registerWithMultipleFileExtensions()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerWithMultipleFileExtensions",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests#registerWithMultipleFileExtensions()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerWithMultipleFileExtensionsSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerWithMultipleFileExtensionsSampleCode",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests#registerWithMultipleFileExtensions()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests#registerWithMultipleFileExtensions()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#createWithTypeAndReachableType()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "TypeHint creation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#createWithTypeAndReachableType()",
      "head_type": "method",
      "relation": "have",
      "tail": "TypeHint usage sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "TypeHint usage sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "Complete TypeHint usage example",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.TypeHint",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#createWithTypeAndReachableType()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.TypeHint",
      "tail_type": "class"
    },
    {
      "head": "TypeHint creation",
      "head_type": "apiFunction",
      "relation": "relatedConceptInterpretation",
      "tail": "TypeHint is used to provide hints about types to the AOT engine, allowing it to optimize the application during the build process.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "TypeHint creation",
      "head_type": "apiFunction",
      "relation": "designPrincipleInterpretation",
      "tail": "TypeHint follows the principle of providing detailed information about types to improve the efficiency of the AOT engine.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.nativex.RuntimeHintsWriterTests#assertEquals(String,RuntimeHints)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "assertEquals",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.RuntimeHintsWriterTests#assertEquals(String,RuntimeHints)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.nativex.RuntimeHintsWriterTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.RuntimeHintsWriterTests",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.nativex.RuntimeHintsWriterTests",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "assertEquals",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "register serialization hints",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.aot.nativex.SerializationHintsTests#shouldWriteSingleHintWithCondition()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "method",
      "relation": "have",
      "head": "org.springframework.aot.nativex.SerializationHintsTests#shouldWriteSingleHintWithCondition()",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "type must be reachable",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "head": "register serialization hints",
      "tail_type": "useConstraint"
    },
    {
      "tail": "AOT serialization optimization",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "head": "register serialization hints",
      "tail_type": "useScenario"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "SerializationHintsTests.java",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "register serialization hints"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getMergedAnnotationWithTransitiveImplicitAliasesWithSkippedLevel()",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedAnnotationWithTransitiveImplicitAliasesWithSkippedLevel()",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getMergedAnnotationWithTransitiveImplicitAliasesWithSkippedLevel() Sample Code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getMergedAnnotationWithTransitiveImplicitAliasesWithSkippedLevel() Sample Code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "Complete Example for getMergedAnnotationWithTransitiveImplicitAliasesWithSkippedLevel()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findAllMergedAnnotationsOnClassWithInterface()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "findAllMergedAnnotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findAllMergedAnnotationsOnClassWithInterface()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findAllMergedAnnotationsOnClassWithInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "findAllMergedAnnotations",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "findAllMergedAnnotations",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "findAllMergedAnnotations",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.ConventionBasedAnnotationAttributeOverrideTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getMergedAnnotationAttributesWithHalfConventionBasedAndHalfAliasedComposedAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedAnnotationAttributesWithHalfConventionBasedAndHalfAliasedComposedAnnotation",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "getMergedAnnotationAttributesWithHalfConventionBasedAndHalfAliasedComposedAnnotation(Class<?>)",
      "tail_type": "useScenario"
    },
    {
      "head": "getMergedAnnotationAttributesWithHalfConventionBasedAndHalfAliasedComposedAnnotation(Class<?>)",
      "head_type": "useScenario",
      "relation": "have",
      "tail": "private void getMergedAnnotationAttributesWithHalfConventionBasedAndHalfAliasedComposedAnnotation(Class<?> clazz) {\n    String name = ContextConfig.class.getName();\n    String simpleName = clazz.getSimpleName();\n    AnnotationAttributes attributes = getMergedAnnotationAttributes(clazz, name);\n    assertThat(attributes).as(\"Should find @ContextConfig on \" + simpleName).isNotNull();\n    assertThat(attributes.getStringArray(\"locations\")).as(\"locations for class [\" + simpleName + \"]\").containsExactly(\"explicitDeclaration\");\n    assertThat(attributes.getStringArray(\"value\")).as(\"value for class [\" + simpleName + \"]\").containsExactly(\"explicitDeclaration\");\n    // Verify contracts between utility methods:\n    assertThat(isAnnotated(clazz, name)).isTrue();\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getMergedAnnotationAttributesWithHalfConventionBasedAndHalfAliasedComposedAnnotation",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "The method should be used with proper context configuration classes.",
      "tail_type": "useConstraint"
    },
    {
      "head": "getMergedAnnotationAttributesWithHalfConventionBasedAndHalfAliasedComposedAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "This method is used to retrieve merged annotation attributes for a given class, considering both convention-based and aliased composed annotations.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "getMergedAnnotationAttributesWithHalfConventionBasedAndHalfAliasedComposedAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "The design principle behind this method is to provide a flexible and convention-over-configuration approach to annotation attribute handling, allowing for both explicit declarations and implicit conventions.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.ConventionBasedAnnotationAttributeOverrideTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationAttributes",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.StringGenericParameter",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getFor",
      "tail_type": "apiFunction"
    },
    {
      "head": "getFor",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getFor(StringGenericParameter cls)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getFor",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getFor(Integer integer)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.HalfConventionBasedAndHalfAliasedComposedContextConfigClassV1",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "context configuration",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.HalfConventionBasedAndHalfAliasedComposedContextConfigClassV1",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "half convention based and half aliased",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.HalfConventionBasedAndHalfAliasedComposedContextConfigClassV1",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "composed context configuration",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.HalfConventionBasedAndHalfAliasedComposedContextConfigClassV1",
      "head_type": "class",
      "relation": "have",
      "tail": "related to Spring Framework's context configuration",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.HalfConventionBasedAndHalfAliasedComposedContextConfigClassV1",
      "head_type": "class",
      "relation": "have",
      "tail": "design based on convention over configuration and aliasing",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.HalfConventionBasedAndHalfAliasedComposedContextConfigClassV1",
      "head_type": "class",
      "relation": "have",
      "tail": "public class HalfConventionBasedAndHalfAliasedComposedContextConfigClassV1 {\n    // Example usage\n    public static void main(String[] args) {\n        // Code to demonstrate context configuration\n    }\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#javaWhenSpringLangAnnotationReturnsFalse()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "Annotation Filtering",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#javaWhenSpringLangAnnotationReturnsFalse()",
      "head_type": "method",
      "relation": "have",
      "tail": "Sample Code for Annotation Filtering",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#javaWhenSpringLangAnnotationReturnsFalse()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationFilter",
      "tail_type": "class"
    },
    {
      "head": "Annotation Filtering",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "Scenario for Annotation Filtering",
      "tail_type": "useScenario"
    },
    {
      "head": "Annotation Filtering",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "Constraints for Annotation Filtering",
      "tail_type": "useConstraint"
    },
    {
      "head": "Sample Code for Annotation Filtering",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "Complete Example for Annotation Filtering",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilter",
      "head_type": "class",
      "relation": "have",
      "tail": "Related Concepts for Annotation Filtering",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilter",
      "head_type": "class",
      "relation": "have",
      "tail": "Design Principles for Annotation Filtering",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnClassWhenMultipleAnnotationsScansAnnotations()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scanning annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnClassWhenMultipleAnnotationsScansAnnotations()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "multiple annotations on a class",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnClassWhenMultipleAnnotationsScansAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "void inheritedAnnotationsStrategyOnClassWhenMultipleAnnotationsScansAnnotations() {\n    Class<?> source = WithMultipleAnnotations.class;\n    assertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\", \"0:TestAnnotation2\");\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnClassWhenMultipleAnnotationsScansAnnotations()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnClassWhenMultipleAnnotationsScansAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "This method tests the inherited annotations strategy on a class with multiple annotations. It verifies that the scanning process correctly identifies and returns all annotations associated with the class.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnClassWhenMultipleAnnotationsScansAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "The design principle behind this method is to ensure that the annotation scanning mechanism can accurately handle and process multiple annotations on a single class. This is crucial for maintaining consistency and reliability in applications that rely on annotated classes for various functionalities.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWhenMultipleAnnotationsScansAnnotations()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "scan annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWhenMultipleAnnotationsScansAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "void typeHierarchyStrategyOnMethodWhenMultipleAnnotationsScansAnnotations() { Method source = methodFrom(WithMultipleAnnotations.class); assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\", \"0:TestAnnotation2\"); }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWhenMultipleAnnotationsScansAnnotations()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationsScannerTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "scan annotations",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests",
      "head_type": "class",
      "relation": "have",
      "tail": "void typeHierarchyStrategyOnMethodWhenMultipleAnnotationsScansAnnotations() { Method source = methodFrom(WithMultipleAnnotations.class); assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\", \"0:TestAnnotation2\"); }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationsScannerTests",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.Hello2",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "org.springframework.core.annotation.Hello2",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForToSelfNonExistingAttribute()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "Annotation Configuration Validation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForToSelfNonExistingAttribute()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "Alias For Non-existing Attribute Constraint",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForToSelfNonExistingAttribute()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "Annotation Configuration Error Handling",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForToSelfNonExistingAttribute()",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForToSelfNonExistingAttribute() Sample Code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForToSelfNonExistingAttribute()",
      "head_type": "method",
      "relation": "have",
      "tail": "Annotation Configuration Error Interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForToSelfNonExistingAttribute()",
      "head_type": "method",
      "relation": "have",
      "tail": "Robust Annotation Configuration Design",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForToSelfNonExistingAttribute()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationTypeMappings",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.WithDifferentValueAliasPair",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "value alias pair",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.WithDifferentValueAliasPair",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "alias uniqueness",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.WithDifferentValueAliasPair",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "multiple configurations",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.WithDifferentValueAliasPair",
      "head_type": "class",
      "relation": "have",
      "tail": "sample code for value alias pair",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.WithDifferentValueAliasPair",
      "head_type": "class",
      "relation": "have",
      "tail": "interpretation of value alias pair",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.WithDifferentValueAliasPair",
      "head_type": "class",
      "relation": "have",
      "tail": "design principles of value alias pair",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.WithDifferentValueAliasPair",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AliasFor",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromDefaultsWithoutAttributeAliases()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "synthesizeAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "synthesizeAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "synthesizeAnnotationFromDefaultsWithoutAttributeAliases() sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "synthesizeAnnotationFromDefaultsWithoutAttributeAliases() sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "Complete example of synthesizeAnnotationFromDefaultsWithoutAttributeAliases()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.ClassWithInheritedAnnotation",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "inherited annotation processing",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.ClassWithInheritedAnnotation",
      "head_type": "class",
      "relation": "have",
      "tail": "related concept interpretation for inherited annotations",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.ClassWithInheritedAnnotation",
      "head_type": "class",
      "relation": "have",
      "tail": "design principle interpretation for inherited annotations",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.ClassWithInheritedAnnotation",
      "head_type": "class",
      "relation": "have",
      "tail": "sample code for using inherited annotations",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.Root#metaAnnotatedOnRoot()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "meta annotation processing",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.Root#metaAnnotatedOnRoot()",
      "head_type": "method",
      "relation": "have",
      "tail": "meta annotation processing",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.Root#metaAnnotatedOnRoot()",
      "head_type": "method",
      "relation": "have",
      "tail": "meta annotation processing",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.Root#metaAnnotatedOnRoot()",
      "head_type": "method",
      "relation": "have",
      "tail": "meta annotation processing",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SubInheritedAnnotationInterface",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "SubInheritedAnnotationInterface",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.SubInheritedAnnotationInterface",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.SubInheritedAnnotationInterface",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.GroovyImplicitAliasesContextConfigClass",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "GroovyImplicitAliasesContextConfigClass",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.GroovyImplicitAliasesContextConfigClass",
      "head_type": "class",
      "relation": "have",
      "tail": "Attribute value intentionally matches attribute name",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassWithSetter#setName(String)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "setter method",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.SampleClassWithSetter#setName(String)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.SampleClassWithSetter",
      "tail_type": "class"
    },
    {
      "head": "setter method",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "setter method use sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "setter method",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "setter method related concept interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "setter method",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "setter method design principle interpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicatesTests",
      "head_type": "class",
      "relation": "haveFuntion",
      "tail": "lazy loading",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicatesTests",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "circular aliases are prohibited",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicatesTests",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "multiple aliases for a single name",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicatesTests",
      "head_type": "class",
      "relation": "have",
      "tail": "package com.healthMgr.common.email; import java.xxxx; public class OneClass { // specific code }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicatesTests",
      "head_type": "class",
      "relation": "have",
      "tail": "An explanation of related concepts",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicatesTests",
      "head_type": "class",
      "relation": "have",
      "tail": "An explanation of the design principles of the class or method",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicatesTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.SimpleAliasRegistryTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#registerIfPresentIgnoreMissingLocation()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerIfPresentIgnoreMissingLocation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.ResourceHintsTests#registerIfPresentIgnoreMissingLocation()",
      "head_type": "method",
      "relation": "have",
      "tail": "registerIfPresentIgnoreMissingLocationSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "registerIfPresentIgnoreMissingLocationSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.aot.hint.ResourceHintsTests#registerIfPresentIgnoreMissingLocation()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.aot.hint.RuntimeHintsTests#jdkProxyWithClass()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerJdkProxy",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.RuntimeHintsTests#jdkProxyWithClass()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "assertJdkProxyHints",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.RuntimeHintsTests#jdkProxyWithClass()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "assertProxiedInterfaces",
      "tail_type": "apiFunction"
    },
    {
      "head": "registerJdkProxy",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "assertJdkProxyHints",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "assertProxiedInterfaces",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.RuntimeHintsTests#jdkProxyWithClass()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.RuntimeHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.RuntimeHintsTests#jdkProxyWithClass()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.TypeReference",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.RuntimeHintsTests#jdkProxyWithClass()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.JdkProxyHint",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.RuntimeHintsTests#jdkProxyWithClass()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.RuntimeHintsTests#jdkProxyWithClass()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.support.KotlinDetectorRuntimeHintsTests#kotlinMetadataHasHints()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "kotlinMetadataHasHints",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.support.KotlinDetectorRuntimeHintsTests#kotlinMetadataHasHints()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.hint.support.KotlinDetectorRuntimeHintsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.support.KotlinDetectorRuntimeHintsTests#kotlinMetadataHasHints()",
      "head_type": "method",
      "relation": "have",
      "tail": "RuntimeHintsPredicates.reflection().onType(kotlin.Metadata.class)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.support.KotlinDetectorRuntimeHintsTests#kotlinMetadataHasHints()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.support.KotlinDetectorRuntimeHintsTests#kotlinMetadataHasHints()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#assertFieldHint(Builder,Consumer<FieldHint>)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "assertFieldHint",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#assertFieldHint(Builder,Consumer<FieldHint>)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "TypeHint",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#assertFieldHint(Builder,Consumer<FieldHint>)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "Builder",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#assertFieldHint(Builder,Consumer<FieldHint>)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "FieldHint",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#assertFieldHint(Builder,Consumer<FieldHint>)",
      "head_type": "method",
      "relation": "have",
      "tail": "void assertFieldHint(Builder builder, Consumer<FieldHint> fieldHint) {\n    TypeHint hint = builder.build();\n    assertThat(hint.fields()).singleElement().satisfies(fieldHint);\n    assertThat(hint.constructors()).isEmpty();\n    assertThat(hint.methods()).isEmpty();\n    assertThat(hint.getMemberCategories()).isEmpty();\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#assertMethodHint(Builder,Consumer<ExecutableHint>)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "assertMethodHint",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#assertMethodHint(Builder,Consumer<ExecutableHint>)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "TypeHint",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#assertMethodHint(Builder,Consumer<ExecutableHint>)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "Builder",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#assertMethodHint(Builder,Consumer<ExecutableHint>)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "Consumer<ExecutableHint>",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.hint.TypeHintTests#assertMethodHint(Builder,Consumer<ExecutableHint>)",
      "head_type": "method",
      "relation": "have",
      "tail": "void assertMethodHint(Builder builder, Consumer<ExecutableHint> methodHint) {\n    TypeHint hint = builder.build();\n    assertThat(hint.fields()).isEmpty();\n    assertThat(hint.constructors()).isEmpty();\n    assertThat(hint.methods()).singleElement().satisfies(methodHint);\n    assertThat(hint.getMemberCategories()).isEmpty();\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests#writeWithTypeReferenceForSimpleClass()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "write with type reference for simple class",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests#writeWithTypeReferenceForSimpleClass()",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.aot.nativex.BasicJsonWriterTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests#writeWithTypeReferenceForSimpleClass()",
      "head_type": "method",
      "relation": "have",
      "tail": "write sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "write sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.aot.nativex.BasicJsonWriterTests",
      "tail_type": "class"
    },
    {
      "head": "write sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.aot.nativex.BasicJsonWriterTests#writeWithTypeReferenceForSimpleClass()",
      "tail_type": "method"
    },
    {
      "head": "write sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "TypeReference.of(String.class)",
      "tail_type": "apiFunction"
    },
    {
      "head": "write sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "assertStringAttribute",
      "tail_type": "apiFunction"
    },
    {
      "head": "write sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "java.lang.String",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.aot.nativex.BasicJsonWriterTests#writeWithTypeReferenceForSimpleClass()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests",
      "head_type": "class",
      "relation": "have",
      "tail": "related concept interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.aot.nativex.BasicJsonWriterTests",
      "head_type": "class",
      "relation": "have",
      "tail": "design principle interpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#two()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "register reflection hints",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#two()",
      "head_type": "method",
      "relation": "have",
      "tail": "register reflection hints sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "register reflection hints sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.aot.nativex.ReflectionHintsTests#two() sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#two()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.aot.nativex.ReflectionHints",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#two()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "java.lang.Integer",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.ReflectionHintsTests#two()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "java.lang.Long",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.ProxyHintsTests#shouldWriteOneEntry()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "registerJdkProxy",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.aot.nativex.ProxyHintsTests#shouldWriteOneEntry()",
      "head_type": "method",
      "relation": "have",
      "tail": "java.util.function.Function",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.ProxyHintsTests#shouldWriteOneEntry()",
      "head_type": "method",
      "relation": "have",
      "tail": "RuntimeHints",
      "tail_type": "class"
    },
    {
      "head": "registerJdkProxy",
      "head_type": "apiFunction",
      "relation": "associated_with",
      "tail": "RuntimeHints",
      "tail_type": "class"
    },
    {
      "head": "registerJdkProxy",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "java.util.function.Function",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.aot.nativex.ProxyHintsTests#shouldWriteOneEntry()",
      "head_type": "method",
      "relation": "have",
      "tail": "shouldWriteOneEntry",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getMergedAnnotationAttributesOnInheritedAnnotationInterface()",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedAnnotationAttributesOnInheritedAnnotationInterface()",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "getMergedAnnotationAttributesOnInheritedAnnotationInterface()",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "getMergedAnnotationAttributesOnInheritedAnnotationInterface()",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "relatedConceptInterpretation",
      "head_type": "relatedConceptInterpretation",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "getMergedAnnotationAttributesOnInheritedAnnotationInterface()",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "designPrincipleInterpretation",
      "head_type": "designPrincipleInterpretation",
      "relation": "have",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findAndSynthesizeAnnotationAttributesOnClassWithAttributeAliasesInTargetAnnotation()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "find and synthesize annotation attributes",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findAndSynthesizeAnnotationAttributesOnClassWithAttributeAliasesInTargetAnnotation()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "class with attribute aliases in target annotation",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findAndSynthesizeAnnotationAttributesOnClassWithAttributeAliasesInTargetAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "sample code for finding and synthesizing annotation attributes",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findAndSynthesizeAnnotationAttributesOnClassWithAttributeAliasesInTargetAnnotation()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findAndSynthesizeAnnotationAttributesOnClassWithAttributeAliasesInTargetAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "related concept interpretation for annotation attribute synthesis",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findAndSynthesizeAnnotationAttributesOnClassWithAttributeAliasesInTargetAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "design principle interpretation for annotation attribute synthesis",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#javaxMetaAnnotationTypeViaFindMergedAnnotation()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "javaxMetaAnnotationTypeViaFindMergedAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#javaxMetaAnnotationTypeViaFindMergedAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "findMergedAnnotation",
      "tail_type": "useSampleCode"
    },
    {
      "head": "findMergedAnnotation",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#javaxMetaAnnotationTypeViaFindMergedAnnotation()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#javaxMetaAnnotationTypeViaFindMergedAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "ParametersAreNonnullByDefault",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#javaxMetaAnnotationTypeViaFindMergedAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "Nonnull",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#javaxMetaAnnotationTypeViaFindMergedAnnotation()",
      "head_type": "method",
      "relation": "have",
      "tail": "ResourceHolder",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.ConventionBasedAnnotationAttributeOverrideTests",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getMergedAnnotationAttributesWithInvalidConventionBasedComposedAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "getMergedAnnotationAttributesWithInvalidConventionBasedComposedAnnotation",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "AnnotationConfigurationException",
      "tail_type": "useConstraint"
    },
    {
      "head": "getMergedAnnotationAttributesWithInvalidConventionBasedComposedAnnotation",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "InvalidConventionBasedComposedContextConfigClass",
      "tail_type": "useScenario"
    },
    {
      "head": "getMergedAnnotationAttributesWithInvalidConventionBasedComposedAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getMergedAnnotationAttributesWithInvalidConventionBasedComposedAnnotation_useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getMergedAnnotationAttributesWithInvalidConventionBasedComposedAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getMergedAnnotationAttributesWithInvalidConventionBasedComposedAnnotation_relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "getMergedAnnotationAttributesWithInvalidConventionBasedComposedAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getMergedAnnotationAttributesWithInvalidConventionBasedComposedAnnotation_designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.ConventionBasedAnnotationAttributeOverrideTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationConfigurationException",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.ConventionBasedAnnotationAttributeOverrideTests",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "InvalidConventionBasedComposedContextConfigClass",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.TxFromMultipleComposedAnnotations",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "transaction management",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.TxFromMultipleComposedAnnotations",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "multiple transaction annotations on a single method",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.TxFromMultipleComposedAnnotations",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "methods with multiple transactional requirements",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.TxFromMultipleComposedAnnotations",
      "head_type": "class",
      "relation": "have",
      "tail": "sample code demonstrating transaction management with multiple annotations",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.TxFromMultipleComposedAnnotations",
      "head_type": "class",
      "relation": "have",
      "tail": "interpretation of transaction management with multiple annotations",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.TxFromMultipleComposedAnnotations",
      "head_type": "class",
      "relation": "have",
      "tail": "design principles behind transaction management with multiple annotations",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.TxFromMultipleComposedAnnotations",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.transaction.annotation.Transactional",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.GenericParameter",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getFor",
      "tail_type": "apiFunction"
    },
    {
      "head": "getFor",
      "head_type": "apiFunction",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.GenericParameter",
      "tail_type": "class"
    },
    {
      "head": "getFor",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getFor(Class<T> cls);",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.ResourceHolder",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "resource binding",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.ResourceHolder",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "resource type compatibility",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.ResourceHolder",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "dependency injection",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.ResourceHolder",
      "head_type": "class",
      "relation": "have",
      "tail": "sample code for resource binding",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.ResourceHolder",
      "head_type": "class",
      "relation": "have",
      "tail": "resource binding concept",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.ResourceHolder",
      "head_type": "class",
      "relation": "have",
      "tail": "design principles of resource holder",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.ResourceHolder",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.context.annotation.Bean",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests#sortWithNulls()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "sortWithNulls",
      "tail_type": "apiFunction"
    },
    {
      "head": "sortWithNulls",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "sortWithNulls() method sorts a list containing null values and classes, ensuring the correct order including nulls at the end.",
      "tail_type": "useSampleCode"
    },
    {
      "head": "sortWithNulls",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "This method sorts a list that includes null elements and classes, ensuring that nulls are placed at the end of the list.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "sortWithNulls",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "The design principle behind sortWithNulls() is to handle sorting of lists containing null values gracefully, ensuring that nulls are treated in a way that they appear last in the sorted list.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#plainWhenJavaLangAnnotationReturnsTrue()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "Annotation Filtering",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#plainWhenJavaLangAnnotationReturnsTrue()",
      "head_type": "method",
      "relation": "have",
      "tail": "Sample Code for Annotation Filtering",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#plainWhenJavaLangAnnotationReturnsTrue()",
      "head_type": "method",
      "relation": "have",
      "tail": "Related Concept Interpretation for Annotation Filtering",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#plainWhenJavaLangAnnotationReturnsTrue()",
      "head_type": "method",
      "relation": "have",
      "tail": "Design Principle Interpretation for Annotation Filtering",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationFilterTests#plainWhenJavaLangAnnotationReturnsTrue()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationFilter",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.HierarchyInterface",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "org.springframework.core.annotation.HierarchyInterface",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.HierarchyInterface",
      "head_type": "class",
      "relation": "have",
      "tail": "org.springframework.core.annotation.HierarchyInterface",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.HierarchyInterface",
      "head_type": "class",
      "relation": "have",
      "tail": "org.springframework.core.annotation.HierarchyInterface",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.HierarchyInterface",
      "head_type": "class",
      "relation": "have",
      "tail": "org.springframework.core.annotation.HierarchyInterface",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForToSelf()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "AnnotationTypeMappings.forAnnotationType()",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForToSelf()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "AliasForToSelf cannot point to itself",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForToSelf()",
      "head_type": "method",
      "relation": "have",
      "tail": "AnnotationConfigurationException thrown when AliasForToSelf points to itself",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForToSelf()",
      "head_type": "method",
      "relation": "have",
      "tail": "Sample code for handling AliasForToSelf pointing to itself",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForToSelf()",
      "head_type": "method",
      "relation": "have",
      "tail": "Explanation of AliasForToSelf pointing to itself",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForToSelf()",
      "head_type": "method",
      "relation": "have",
      "tail": "Design principles behind AliasForToSelf",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForToSelf()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationTypeMappings",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationWithMetaAnnotationOnRoot()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "find method annotation with meta annotation on root",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationWithMetaAnnotationOnRoot()",
      "head_type": "method",
      "relation": "have",
      "tail": "sample code for finding method annotation with meta annotation on root",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationWithMetaAnnotationOnRoot()",
      "head_type": "method",
      "relation": "have",
      "tail": "related concept interpretation for finding method annotation with meta annotation on root",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationWithMetaAnnotationOnRoot()",
      "head_type": "method",
      "relation": "have",
      "tail": "design principle interpretation for finding method annotation with meta annotation on root",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationWithMetaAnnotationOnRoot()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnMetaMetaAnnotatedClass()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "findClassAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnMetaMetaAnnotatedClass()",
      "head_type": "method",
      "relation": "have",
      "tail": "meta-annotation retrieval",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnMetaMetaAnnotatedClass()",
      "head_type": "method",
      "relation": "have",
      "tail": "composed annotation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnMetaMetaAnnotatedClass()",
      "head_type": "method",
      "relation": "have",
      "tail": "meta2",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnMetaMetaAnnotatedClass()",
      "head_type": "method",
      "relation": "have",
      "tail": "meta-annotation on composed annotation on class",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnMetaMetaAnnotatedClass()",
      "head_type": "method",
      "relation": "have",
      "tail": "annotation retrieval",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnMetaMetaAnnotatedClass()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnSubInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "findClassAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnSubInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "annotationInheritance",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnSubInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "inheritedAnnotationInterface",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnSubInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "sampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnSubInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnSubInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnSubInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnSubNonInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "findClassAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnSubNonInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "since 4.2",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnSubNonInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "sample code for finding class annotation",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnSubNonInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationUtilsTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnSubNonInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "related concept interpretation for finding class annotation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnSubNonInheritedAnnotationInterface()",
      "head_type": "method",
      "relation": "have",
      "tail": "design principle interpretation for finding class annotation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findAnnotationFindsRepeatableContainerOnComposedAnnotationMetaAnnotatedWithRepeatableAnnotations()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "find repeatable container annotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findAnnotationFindsRepeatableContainerOnComposedAnnotationMetaAnnotatedWithRepeatableAnnotations()",
      "head_type": "method",
      "relation": "have",
      "tail": "sample code for finding repeatable container annotation",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.AnnotationUtilsTests#findAnnotationFindsRepeatableContainerOnComposedAnnotationMetaAnnotatedWithRepeatableAnnotations()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.core.annotation.AnnotationUtils",
      "tail_type": "class"
    },
    {
      "head": "sample code for finding repeatable container annotation",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "complete example of finding repeatable container annotation",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.core.annotation.WebController",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "handleMappedWithSamePathAndValueAttributes",
      "tail_type": "apiFunction"
    },
    {
      "head": "handleMappedWithSamePathAndValueAttributes",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "mapping is logically \"equal\" to handleMappedWithPathAttribute()",
      "tail_type": "useConstraint"
    },
    {
      "head": "handleMappedWithSamePathAndValueAttributes",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "handleMappedWithSamePathAndValueAttributes",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "handleMappedWithSamePathAndValueAttributes",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.WebController",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.web.bind.annotation.WebMapping",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.core.annotation.WebController",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "handleMappedWithDifferentPathAndValueAttributes()",
      "tail_type": "apiFunction"
    },
    {
      "head": "handleMappedWithDifferentPathAndValueAttributes()",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "handleMappedWithDifferentPathAndValueAttributes()",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "handleMappedWithDifferentPathAndValueAttributes()",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.core.annotation.WebController",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.web.bind.annotation.WebMapping",
      "tail_type": "class"
    },
    {
      "head": "handleMappedWithDifferentPathAndValueAttributes()",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "useConstraint",
      "tail_type": "useConstraint"
    },
    {
      "head": "handleMappedWithDifferentPathAndValueAttributes()",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "useScenario",
      "tail_type": "useScenario"
    }
  ]
}