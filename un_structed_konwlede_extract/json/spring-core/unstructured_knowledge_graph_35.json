{
    "relationships": [
        {
            "head": "org.springframework.cglib.core.CodeEmitter#unbox(Type)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "unbox",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#unbox(Type)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "primitive type constraint",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#unbox(Type)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "type conversion",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#unbox(Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "unboxing sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#unbox(Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "unboxing concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#unbox(Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "unbox",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "primitive type constraint",
            "head_type": "useConstraint",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter#unbox(Type)",
            "tail_type": "method"
        },
        {
            "head": "type conversion",
            "head_type": "useScenario",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter#unbox(Type)",
            "tail_type": "method"
        },
        {
            "head": "unboxing sample code",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter#unbox(Type)",
            "tail_type": "method"
        },
        {
            "head": "unboxing concept interpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter#unbox(Type)",
            "tail_type": "method"
        },
        {
            "head": "design principle interpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter#unbox(Type)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#create_arg_array()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "create_arg_array",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#create_arg_array()",
            "head_type": "method",
            "relation": "have",
            "tail": "Allocates and fills an Object[] array with the arguments to the current method. Primitive values are inserted as their boxed (Object) equivalents.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "create_arg_array",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Allocates and fills an Object[] array with the arguments to the current method. Primitive values are inserted as their boxed (Object) equivalents.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#create_arg_array()",
            "head_type": "method",
            "relation": "have",
            "tail": "public void create_arg_array() { /* generates: Object[] args = new Object[]{ arg1, new Integer(arg2) }; */ push(state.argumentTypes.length); newarray(); for (int i = 0; i < state.argumentTypes.length; i++) { dup(); push(i); load_arg(i); box(state.argumentTypes[i]); aastore(); } }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "create_arg_array",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "public void create_arg_array() { /* generates: Object[] args = new Object[]{ arg1, new Integer(arg2) }; */ push(state.argumentTypes.length); newarray(); for (int i = 0; i < state.argumentTypes.length; i++) { dup(); push(i); load_arg(i); box(state.argumentTypes[i]); aastore(); } }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#zero_or_null(Type)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "pushing_zero_or_null",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#zero_or_null(Type)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "argument_must_be_primitive_or_reference_type",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#zero_or_null(Type)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "handling_primitive_and_reference_types",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#zero_or_null(Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "sample_code_for_pushing_zero_or_null",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#zero_or_null(Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "related_concept_interpretation_for_pushing_zero_or_null",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#zero_or_null(Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "design_principle_interpretation_for_pushing_zero_or_null",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "pushing_zero_or_null",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "sample_code_for_pushing_zero_or_null",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter#zero_or_null(Type)",
            "tail_type": "method"
        },
        {
            "head": "related_concept_interpretation_for_pushing_zero_or_null",
            "head_type": "relatedConceptInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter#zero_or_null(Type)",
            "tail_type": "method"
        },
        {
            "head": "design_principle_interpretation_for_pushing_zero_or_null",
            "head_type": "designPrincipleInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter#zero_or_null(Type)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#unbox_or_zero(Type)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "unbox_or_zero",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#unbox_or_zero(Type)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "TypeUtils.isPrimitive(type)",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#unbox_or_zero(Type)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "object on the top of the stack",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#unbox_or_zero(Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "Unboxes the object on the top of the stack. If the object is null, the unboxed primitive value becomes zero.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#unbox_or_zero(Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "public void unbox_or_zero(Type type) { ... }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#unbox_or_zero(Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "Design principle: Efficiently handle null values and primitive types.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#visitMaxs(int,int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "visitMaxs",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#visitMaxs(int,int)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "TypeUtils.isAbstract constraint",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#visitMaxs(int,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "visitMaxs sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "visitMaxs sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.cglib.core.CodeEmitter#visitMaxs(int,int) sample code content",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#visitMaxs(int,int)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#invoke(MethodInfo,Type)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": " invoke method based on type and signature",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#invoke(MethodInfo,Type)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "method must not be null",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#invoke(MethodInfo,Type)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "invoking methods on classes and interfaces",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#invoke(MethodInfo,Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.cglib.core.CodeEmitter#invoke(MethodInfo,Type) sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#invoke(MethodInfo,Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation for invoke",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#invoke(MethodInfo,Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation for invoke",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#invoke(MethodInfo,Type)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#invoke(MethodInfo)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "invoke method",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#invoke(MethodInfo)",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.cglib.core.CodeEmitter#invoke(MethodInfo) useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#invoke(MethodInfo) useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.cglib.core.CodeEmitter#invoke(MethodInfo) relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#invoke(MethodInfo) useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.cglib.core.CodeEmitter#invoke(MethodInfo) designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.State",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getClassInfo",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.State",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getModifiers",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.State",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getSignature",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.State",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getExceptionTypes",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.State",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.State",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.State",
            "head_type": "class",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.State#getClassInfo()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getClassInfo",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.State#getClassInfo()",
            "head_type": "method",
            "relation": "have",
            "tail": "classInfo",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.State#getClassInfo()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.ClassInfo",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.State#getClassInfo()",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.State#getClassInfo()",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.State",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getModifiers()",
            "tail_type": "apiFunction"
        },
        {
            "head": "getModifiers()",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "public int getModifiers() { return access; }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.State",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.State",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.State",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getSignature()",
            "tail_type": "apiFunction"
        },
        {
            "head": "getSignature()",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "getSignature() returns a Signature object",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getSignature()",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Used to retrieve the signature of the state",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "getSignature()",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Follows the principle of encapsulation by providing controlled access to the Signature object",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.State",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getExceptionTypes()",
            "tail_type": "apiFunction"
        },
        {
            "head": "getExceptionTypes()",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "public Type[] getExceptionTypes() { return exceptionTypes; }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getExceptionTypes()",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "This method returns an array of Types representing the exception types that can be thrown by the method.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "getExceptionTypes()",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "The method follows the principle of encapsulation by providing controlled access to the exception types.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeGenerationException",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "constructor with cause",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeGenerationException",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getCause method",
            "tail_type": "apiFunction"
        },
        {
            "head": "constructor with cause",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "constructor with cause sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getCause method",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "getCause method sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "constructor with cause sample code",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeGenerationException",
            "tail_type": "class"
        },
        {
            "head": "getCause method sample code",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeGenerationException",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeGenerationException",
            "head_type": "class",
            "relation": "have",
            "tail": "constructor with cause sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeGenerationException",
            "head_type": "class",
            "relation": "have",
            "tail": "getCause method sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeGenerationException",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getCause()",
            "tail_type": "apiFunction"
        },
        {
            "head": "getCause()",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeGenerationException",
            "tail_type": "class"
        },
        {
            "head": "getCause()",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "org.springframework.cglib.core.CodeGenerationException",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CollectionUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "bucket",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CollectionUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "reverse",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CollectionUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "filter",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CollectionUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "transform",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CollectionUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getIndexMap",
            "tail_type": "apiFunction"
        },
        {
            "head": "bucket",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "reverse",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "filter",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "transform",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getIndexMap",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CollectionUtils",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CollectionUtils",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CollectionUtils#bucket(Collection,Transformer)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "bucketing",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CollectionUtils#bucket(Collection,Transformer)",
            "head_type": "method",
            "relation": "have",
            "tail": "Transforms elements of a collection into a map structure",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CollectionUtils#bucket(Collection,Transformer)",
            "head_type": "method",
            "relation": "have",
            "tail": "public static Map bucket(Collection c, Transformer t) {\n    Map buckets = new HashMap();\n    for (Object value : c) {\n        Object key = t.transform(value);\n        List bucket = (List) buckets.get(key);\n        if (bucket == null) {\n            buckets.put(key, bucket = new LinkedList());\n        }\n        bucket.add(value);\n    }\n    return buckets;\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "bucketing",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "org.springframework.cglib.core.CollectionUtils#bucket(Collection,Transformer)",
            "tail_type": "method"
        },
        {
            "head": "Transforms elements of a collection into a map structure",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "org.springframework.cglib.core.CollectionUtils#bucket(Collection,Transformer)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.core.CollectionUtils#reverse(Map,Map)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "reverseMap",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CollectionUtils#reverse(Map,Map)",
            "head_type": "method",
            "relation": "have",
            "tail": "Reverses the keys and values of a map",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CollectionUtils#reverse(Map,Map)",
            "head_type": "method",
            "relation": "have",
            "tail": "public static void reverse(Map source, Map target) {\n    for (Object key : source.keySet()) {\n        target.put(source.get(key), key);\n    }\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CollectionUtils",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CollectionUtils#reverse(Map,Map)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.core.CollectionUtils#filter(Collection,Predicate)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "filtering a collection based on a predicate",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CollectionUtils#filter(Collection,Predicate)",
            "head_type": "method",
            "relation": "have",
            "tail": "public static Collection filter(Collection c, Predicate p) {\n    c.removeIf(o -> !p.evaluate(o));\n    return c;\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CollectionUtils#filter(Collection,Predicate)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CollectionUtils",
            "tail_type": "class"
        },
        {
            "head": "filtering a collection based on a predicate",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "removing elements that do not satisfy a given condition",
            "tail_type": "useScenario"
        },
        {
            "head": "filtering a collection based on a predicate",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "the predicate must be non-null",
            "tail_type": "useConstraint"
        },
        {
            "head": "filtering a collection based on a predicate",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "This method allows for the filtering of collections where each element is tested against a specified predicate. The predicate determines whether an element should be included in the resulting collection.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "filtering a collection based on a predicate",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "The design principle behind this functionality is to provide a generic and reusable way to filter collections based on custom conditions, enhancing code flexibility and maintainability.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CollectionUtils#transform(Collection,Transformer)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "transformCollection",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CollectionUtils#transform(Collection,Transformer)",
            "head_type": "method",
            "relation": "have",
            "tail": "transformCollectionSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "transformCollectionSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.cglib.core.CollectionUtils#transform(Collection,Transformer) sample",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CollectionUtils#getIndexMap(List)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getIndexMap",
            "tail_type": "apiFunction"
        },
        {
            "head": "getIndexMap",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "create index map from list",
            "tail_type": "useScenario"
        },
        {
            "head": "getIndexMap",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "public static Map getIndexMap(List list) {\n    Map indexes = new HashMap();\n    int index = 0;\n    for (Iterator it = list.iterator(); it.hasNext(); ) {\n        indexes.put(it.next(), index++);\n    }\n    return indexes;\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getIndexMap",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "getIndexMap",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core(Constants",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "ASM_API_usage",
            "tail_type": "apiFunction"
        },
        {
            "head": "ASM_API_usage",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "ASM_API_usage_sample_code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core(Constants",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "EMPTY_CLASS_ARRAY_usage",
            "tail_type": "apiFunction"
        },
        {
            "head": "EMPTY_CLASS_ARRAY_usage",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "EMPTY_CLASS_ARRAY_usage_sample_code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core(Constants",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "TYPES_EMPTY_usage",
            "tail_type": "apiFunction"
        },
        {
            "head": "TYPES_EMPTY_usage",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "TYPES_EMPTY_usage_sample_code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core(Constants",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "SIG_STATIC_usage",
            "tail_type": "apiFunction"
        },
        {
            "head": "SIG_STATIC_usage",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "SIG_STATIC_usage_sample_code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core(Constants",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "TYPE_OBJECT_ARRAY_usage",
            "tail_type": "apiFunction"
        },
        {
            "head": "TYPE_OBJECT_ARRAY_usage",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "TYPE_OBJECT_ARRAY_usage_sample_code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core(Constants",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "TYPE_CLASS_ARRAY_usage",
            "tail_type": "apiFunction"
        },
        {
            "head": "TYPE_CLASS_ARRAY_usage",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "TYPE_CLASS_ARRAY_usage_sample_code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core(Constants",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "TYPE_STRING_ARRAY_usage",
            "tail_type": "apiFunction"
        },
        {
            "head": "TYPE_STRING_ARRAY_usage",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "TYPE_STRING_ARRAY_usage_sample_code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core(Constants",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "TYPE_OBJECT_usage",
            "tail_type": "apiFunction"
        },
        {
            "head": "TYPE_OBJECT_usage",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "TYPE_OBJECT_usage_sample_code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core(Constants",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "TYPE_CLASS_usage",
            "tail_type": "apiFunction"
        },
        {
            "head": "TYPE_CLASS_usage",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "TYPE_CLASS_usage_sample_code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core(Constants",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "TYPE_CLASS_LOADER_usage",
            "tail_type": "apiFunction"
        },
        {
            "head": "TYPE_CLASS_LOADER_usage",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "TYPE_CLASS_LOADER_usage_sample_code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core(Constants",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "TYPE_CHARACTER_usage",
            "tail_type": "apiFunction"
        },
        {
            "head": "TYPE_CHARACTER_usage",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "TYPE_CHARACTER_usage_sample_code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core(Constants",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "TYPE_BOOLEAN_usage",
            "tail_type": "apiFunction"
        },
        {
            "head": "TYPE_BOOLEAN_usage",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "TYPE_BOOLEAN_usage_sample_code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core(Constants",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "TYPE_DOUBLE_usage",
            "tail_type": "apiFunction"
        },
        {
            "head": "TYPE_DOUBLE_usage",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "TYPE_DOUBLE_usage_sample_code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core(Constants",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "TYPE_FLOAT_usage",
            "tail_type": "apiFunction"
        },
        {
            "head": "TYPE_FLOAT_usage",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "TYPE_FLOAT_usage_sample_code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core(Constants",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "TYPE_LONG_usage",
            "tail_type": "apiFunction"
        },
        {
            "head": "TYPE_LONG_usage",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "TYPE_LONG_usage_sample_code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core(Constants",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "TYPE_INTEGER_usage",
            "tail_type": "apiFunction"
        },
        {
            "head": "TYPE_INTEGER_usage",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "TYPE_INTEGER_usage_sample_code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core(Constants",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "TYPE_SHORT_usage",
            "tail_type": "apiFunction"
        },
        {
            "head": "TYPE_SHORT_usage",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "TYPE_SHORT_usage_sample_code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core(Constants",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "TYPE_BYTE_usage",
            "tail_type": "apiFunction"
        },
        {
            "head": "TYPE_BYTE_usage",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "TYPE_BYTE_usage_sample_code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core(Constants",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "TYPE_NUMBER_usage",
            "tail_type": "apiFunction"
        },
        {
            "head": "TYPE_NUMBER_usage",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "TYPE_NUMBER_usage_sample_code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core(Constants",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "TYPE_STRING_usage",
            "tail_type": "apiFunction"
        },
        {
            "head": "TYPE_STRING_usage",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "TYPE_STRING_usage_sample_code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core(Constants",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "TYPE_THROWABLE_usage",
            "tail_type": "apiFunction"
        },
        {
            "head": "TYPE_THROWABLE_usage",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "TYPE_THROWABLE_usage_sample_code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core(Constants",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "TYPE_BIG_INTEGER_usage",
            "tail_type": "apiFunction"
        },
        {
            "head": "TYPE_BIG_INTEGER_usage",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "TYPE_BIG_INTEGER_usage_sample_code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core(Constants",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "TYPE_BIG_DECIMAL_usage",
            "tail_type": "apiFunction"
        },
        {
            "head": "TYPE_BIG_DECIMAL_usage",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "TYPE_BIG_DECIMAL_usage_sample_code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core(Constants",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "TYPE_STRING_BUFFER_usage",
            "tail_type": "apiFunction"
        },
        {
            "head": "TYPE_STRING_BUFFER_usage",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "TYPE_STRING_BUFFER_usage_sample_code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core(Constants",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "TYPE_RUNTIME_EXCEPTION_usage",
            "tail_type": "apiFunction"
        },
        {
            "head": "TYPE_RUNTIME_EXCEPTION_usage",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "TYPE_RUNTIME_EXCEPTION_usage_sample_code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core(Constants",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "TYPE_ERROR_usage",
            "tail_type": "apiFunction"
        },
        {
            "head": "TYPE_ERROR_usage",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "TYPE_ERROR_usage_sample_code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core(Constants",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "TYPE_SYSTEM_usage",
            "tail_type": "apiFunction"
        },
        {
            "head": "TYPE_SYSTEM_usage",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "TYPE_SYSTEM_usage_sample_code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core(Constants",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "TYPE_SIGNATURE_usage",
            "tail_type": "apiFunction"
        },
        {
            "head": "TYPE_SIGNATURE_usage",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "TYPE_SIGNATURE_usage_sample_code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core(Constants",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "TYPE_TYPE_usage",
            "tail_type": "apiFunction"
        },
        {
            "head": "TYPE_TYPE_usage",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "TYPE_TYPE_usage_sample_code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core(Constants",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "CONSTRUCTOR_NAME_usage",
            "tail_type": "apiFunction"
        },
        {
            "head": "CONSTRUCTOR_NAME_usage",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "CONSTRUCTOR_NAME_usage_sample_code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core(Constants",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "STATIC_NAME_usage",
            "tail_type": "apiFunction"
        },
        {
            "head": "STATIC_NAME_usage",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "STATIC_NAME_usage_sample_code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core(Constants",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "SOURCE_FILE_usage",
            "tail_type": "apiFunction"
        },
        {
            "head": "SOURCE_FILE_usage",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "SOURCE_FILE_usage_sample_code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core(Constants",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "SUID_FIELD_NAME_usage",
            "tail_type": "apiFunction"
        },
        {
            "head": "SUID_FIELD_NAME_usage",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "SUID_FIELD_NAME_usage_sample_code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core(Constants",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "PRIVATE_FINAL_STATIC_usage",
            "tail_type": "apiFunction"
        },
        {
            "head": "PRIVATE_FINAL_STATIC_usage",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "PRIVATE_FINAL_STATIC_usage_sample_code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core(Constants",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "SWITCH_STYLE_TRIE_usage",
            "tail_type": "apiFunction"
        },
        {
            "head": "SWITCH_STYLE_TRIE_usage",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "SWITCH_STYLE_TRIE_usage_sample_code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core(Constants",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "SWITCH_STYLE_HASH_usage",
            "tail_type": "apiFunction"
        },
        {
            "head": "SWITCH_STYLE_HASH_usage",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "SWITCH_STYLE_HASH_usage_sample_code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core(Constants",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "SWITCH_STYLE_HASHONLY_usage",
            "tail_type": "apiFunction"
        },
        {
            "head": "SWITCH_STYLE_HASHONLY_usage",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "SWITCH_STYLE_HASHONLY_usage_sample_code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core(Constants",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core(Constants",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.Converter",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "convert",
            "tail_type": "apiFunction"
        },
        {
            "head": "convert",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "sampleCode",
            "tail_type": "sampleCode"
        },
        {
            "head": "org.springframework.cglib.core.Converter#convert(Object,Class,Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "type conversion",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.Converter#convert(Object,Class,Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "Converts an object from one type to another",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.Converter#convert(Object,Class,Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "public Object convert(Object value, Class target, Object context) { \n    // Example implementation \n    if (value == null) return null; \n    if (target.isAssignableFrom(value.getClass())) return value; \n    // Custom conversion logic \n    return convertedObject; \n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.Converter#convert(Object,Class,Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "Follows the principle of flexibility and reusability in design",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.Customizer",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "Customizes key types for KeyFactory",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.Customizer",
            "head_type": "class",
            "relation": "constrained_by",
            "tail": "Use FieldTypeCustomizer for field types customization",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.Customizer",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "KeyFactory",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.Customizer",
            "head_type": "class",
            "relation": "have",
            "tail": "Customizes key types for KeyFactory when building equals, hashCode, and toString",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.Customizer",
            "head_type": "class",
            "relation": "have",
            "tail": "void customize(CodeEmitter e, Type type);",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.Customizer#customize(CodeEmitter,Type)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Customization of CodeEmitter",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.Customizer#customize(CodeEmitter,Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "Customization of CodeEmitter",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.Customizer#customize(CodeEmitter,Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "Customization of CodeEmitter",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.Customizer#customize(CodeEmitter,Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "Customization of CodeEmitter",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.Customizer",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.Customizer#customize(CodeEmitter,Type)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.core.DebuggingClassWriter",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "debuggingClassWriting",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.DebuggingClassWriter",
            "head_type": "class",
            "relation": "constrained_by",
            "tail": "debuggingLocationPropertyConstraint",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.DebuggingClassWriter",
            "head_type": "class",
            "relation": "applied_to",
            "tail": "classDebuggingScenario",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.DebuggingClassWriter",
            "head_type": "class",
            "relation": "have",
            "tail": "classDebuggingSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.DebuggingClassWriter",
            "head_type": "class",
            "relation": "have",
            "tail": "classDebuggingRelatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.DebuggingClassWriter",
            "head_type": "class",
            "relation": "have",
            "tail": "classDebuggingDesignPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.DebuggingClassWriter",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.util.TraceClassVisitor",
            "tail_type": "class"
        },
        {
            "head": "classDebuggingSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "completeClassDebuggingExample",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.DebuggingClassWriter#visit(int,int,String,String,String,String[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "visit",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.DebuggingClassWriter#visit(int,int,String,String,String,String[])",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.DebuggingClassWriter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.DebuggingClassWriter",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.DebuggingClassWriter",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "visit",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.DebuggingClassWriter#getClassName()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getClassName",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.DebuggingClassWriter#getClassName()",
            "head_type": "method",
            "relation": "have",
            "tail": "public String getClassName() { return className; }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.DebuggingClassWriter",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.DebuggingClassWriter#getClassName()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.core.DebuggingClassWriter#getSuperName()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getSuperName",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.DebuggingClassWriter#getSuperName()",
            "head_type": "method",
            "relation": "have",
            "tail": "getSuperNameSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getSuperNameSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "getSuperNameSampleCodeContent",
            "tail_type": "useSampleCodeContent"
        },
        {
            "head": "org.springframework.cglib.core.DebuggingClassWriter#toByteArray()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "byte array generation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.DebuggingClassWriter#toByteArray()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "debug location must be set",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.DebuggingClassWriter#toByteArray()",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "class debugging and tracing",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.DebuggingClassWriter#toByteArray()",
            "head_type": "method",
            "relation": "have",
            "tail": "writes class data to a file",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.DebuggingClassWriter#toByteArray()",
            "head_type": "method",
            "relation": "have",
            "tail": "ClassReader and ClassVisitor are used for tracing",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.DebuggingClassWriter#toByteArray()",
            "head_type": "method",
            "relation": "have",
            "tail": "Design principle follows the decorator pattern for extending class writing functionality",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.DebuggingClassWriter",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.DebuggingClassWriter#toByteArray()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.core.DefaultGeneratorStrategy",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "generate",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.DefaultGeneratorStrategy",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getClassVisitor",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.DefaultGeneratorStrategy",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getClassWriter",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.DefaultGeneratorStrategy",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "transform",
            "tail_type": "apiFunction"
        },
        {
            "head": "generate",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "generate(ClassGenerator cg)",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getClassVisitor",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "getClassVisitor()",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getClassWriter",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "getClassWriter()",
            "tail_type": "useSampleCode"
        },
        {
            "head": "transform",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "transform(byte[] b)",
            "tail_type": "useSampleCode"
        },
        {
            "head": "transform",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "transform(ClassGenerator cg)",
            "tail_type": "useSampleCode"
        },
        {
            "head": "generate",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "Exception Handling",
            "tail_type": "useConstraint"
        },
        {
            "head": "getClassVisitor",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "Exception Handling",
            "tail_type": "useConstraint"
        },
        {
            "head": "getClassWriter",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "UnsupportedOperation",
            "tail_type": "useConstraint"
        },
        {
            "head": "transform",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "Exception Handling",
            "tail_type": "useConstraint"
        },
        {
            "head": "generate",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "Class Generation",
            "tail_type": "useScenario"
        },
        {
            "head": "getClassVisitor",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "Class Visiting",
            "tail_type": "useScenario"
        },
        {
            "head": "getClassWriter",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "Class Writing",
            "tail_type": "useScenario"
        },
        {
            "head": "transform",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "Bytecode Transformation",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.DefaultGeneratorStrategy",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.DefaultGeneratorStrategy",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.DefaultGeneratorStrategy#generate(ClassGenerator)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "generateClass",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.DefaultGeneratorStrategy#generate(ClassGenerator)",
            "head_type": "method",
            "relation": "have",
            "tail": "generateClass sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "generateClass sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "generateClass sample code content",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.DefaultGeneratorStrategy#generate(ClassGenerator)",
            "head_type": "method",
            "relation": "have",
            "tail": "generateClass related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "generateClass related concept interpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "generateClass related concept interpretation content",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.DefaultGeneratorStrategy#generate(ClassGenerator)",
            "head_type": "method",
            "relation": "have",
            "tail": "generateClass design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "generateClass design principle interpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "have",
            "tail": "generateClass design principle interpretation content",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.DefaultGeneratorStrategy#getClassVisitor()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "DebuggingClassWriter generation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.DefaultGeneratorStrategy#getClassVisitor()",
            "head_type": "method",
            "relation": "have",
            "tail": "Complete example for using DebuggingClassWriter",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.DefaultGeneratorStrategy#getClassVisitor()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.ClassWriter",
            "tail_type": "class"
        },
        {
            "head": "DebuggingClassWriter generation",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "Exception handling required",
            "tail_type": "useConstraint"
        },
        {
            "head": "DebuggingClassWriter generation",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "Bytecode manipulation",
            "tail_type": "useScenario"
        },
        {
            "head": "Complete example for using DebuggingClassWriter",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "package com.example.debugging; import org.springframework.cglib.core.ClassWriter; public class DebuggingExample { public static void main(String[] args) throws Exception { DebuggingClassWriter dw = new DebuggingClassWriter(ClassWriter.COMPUTE_FRAMES); // Additional code } }",
            "tail_type": "code"
        },
        {
            "head": "Exception handling required",
            "head_type": "useConstraint",
            "relation": "have",
            "tail": "Ensure proper exception handling when generating bytecode",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "Bytecode manipulation",
            "head_type": "useScenario",
            "relation": "have",
            "tail": "Detailed explanation of how DebuggingClassWriter is used in bytecode manipulation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.DefaultGeneratorStrategy#getClassVisitor()",
            "head_type": "method",
            "relation": "have",
            "tail": "Principle behind using DebuggingClassWriter for enhanced debugging capabilities",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.DefaultGeneratorStrategy#getClassWriter()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getClassWriter",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.DefaultGeneratorStrategy#getClassWriter()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "unsupportedOperation",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.DefaultGeneratorStrategy#getClassWriter()",
            "head_type": "method",
            "relation": "have",
            "tail": "You are calling getClassWriter, which no longer exists in this cglib version.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.DefaultGeneratorStrategy#getClassWriter()",
            "head_type": "method",
            "relation": "have",
            "tail": "Cause compile / runtime errors for people who implemented the old interface without using @Override",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.DefaultGeneratorStrategy#getClassWriter()",
            "head_type": "method",
            "relation": "have",
            "tail": "protected final ClassWriter getClassWriter() {\n    // Cause compile / runtime errors for people who implemented the old\n    // interface without using @Override\n    throw new UnsupportedOperationException(\"You are calling \" + \"getClassWriter, which no longer exists in this cglib version.\");\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.DefaultGeneratorStrategy#transform(byte[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "transform byte array",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.DefaultGeneratorStrategy#transform(byte[])",
            "head_type": "method",
            "relation": "have",
            "tail": "This method is used to transform a byte array.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.DefaultGeneratorStrategy#transform(byte[])",
            "head_type": "method",
            "relation": "have",
            "tail": "The method simply returns the input byte array.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.DefaultGeneratorStrategy#transform(byte[])",
            "head_type": "method",
            "relation": "have",
            "tail": "java\nprotected byte[] transform(byte[] b) throws Exception {\n    return b;\n}\n",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.DefaultGeneratorStrategy#transform(ClassGenerator)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "transform",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.DefaultGeneratorStrategy#transform(ClassGenerator)",
            "head_type": "method",
            "relation": "have",
            "tail": "transform(ClassGenerator) sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "transform(ClassGenerator) sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "protected ClassGenerator transform(ClassGenerator cg) throws Exception {\n    return cg;\n}",
            "tail_type": "code"
        },
        {
            "head": "org.springframework.cglib.core.DefaultNamingPolicy",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "generateUniqueClassName",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.DefaultNamingPolicy",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getTag",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.DefaultNamingPolicy",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "hashCode",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.DefaultNamingPolicy",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "equals",
            "tail_type": "apiFunction"
        },
        {
            "head": "generateUniqueClassName",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "prefixCannotBeNull",
            "tail_type": "useConstraint"
        },
        {
            "head": "generateUniqueClassName",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "classGeneration",
            "tail_type": "useScenario"
        },
        {
            "head": "generateUniqueClassName",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "generateUniqueClassNameSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getTag",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "getTagSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.DefaultNamingPolicy",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.DefaultNamingPolicy",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.DefaultNamingPolicy#getClassName(String,String,Object,Predicate)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "generate unique class name",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.DefaultNamingPolicy#getClassName(String,String,Object,Predicate)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "prefix cannot be null",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.DefaultNamingPolicy#getClassName(String,String,Object,Predicate)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "naming classes dynamically",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.DefaultNamingPolicy#getClassName(String,String,Object,Predicate)",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.cglib.core.DefaultNamingPolicy",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.DefaultNamingPolicy#getClassName(String,String,Object,Predicate)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.DefaultNamingPolicy#getClassName(String,String,Object,Predicate)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.DefaultNamingPolicy#getClassName(String,String,Object,Predicate)",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.DefaultNamingPolicy",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "generate class name",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.DefaultNamingPolicy",
            "head_type": "class",
            "relation": "have",
            "tail": "By default returns \"ByCGLIB\"",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.DefaultNamingPolicy",
            "head_type": "class",
            "relation": "have",
            "tail": "Returns a string which is incorporated into every generated class name",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.DefaultNamingPolicy",
            "head_type": "class",
            "relation": "have",
            "tail": "Design Principle: Consistency in naming generated classes",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.DefaultNamingPolicy",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.DefaultNamingPolicy#getTag()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.core.DefaultNamingPolicy#getTag()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "generate class name",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.DefaultNamingPolicy#getTag()",
            "head_type": "method",
            "relation": "have",
            "tail": "By default returns \"ByCGLIB\"",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.DefaultNamingPolicy#getTag()",
            "head_type": "method",
            "relation": "have",
            "tail": "Returns a string which is incorporated into every generated class name",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.DefaultNamingPolicy#getTag()",
            "head_type": "method",
            "relation": "have",
            "tail": "Design Principle: Consistency in naming generated classes",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.DefaultNamingPolicy#hashCode()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "generate hash code",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.DefaultNamingPolicy#hashCode()",
            "head_type": "method",
            "relation": "have",
            "tail": "override annotation used",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.DefaultNamingPolicy#hashCode()",
            "head_type": "method",
            "relation": "have",
            "tail": "return getTag().hashCode();",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.DefaultNamingPolicy#hashCode()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.DefaultNamingPolicy",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.DefaultNamingPolicy#hashCode()",
            "head_type": "method",
            "relation": "have",
            "tail": "hash code generation based on getTag() method",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.DefaultNamingPolicy#hashCode()",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle of using override for hashCode method",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.DefaultNamingPolicy#equals(Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "equality check",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.DefaultNamingPolicy#equals(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.cglib.core.DefaultNamingPolicy",
            "tail_type": "class"
        },
        {
            "head": "equality check",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "object type",
            "tail_type": "useConstraint"
        },
        {
            "head": "equality check",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "instance comparison",
            "tail_type": "useScenario"
        },
        {
            "head": "equality check",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "equality check",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "equality check",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.DefaultNamingPolicy",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.DefaultNamingPolicy#equals(Object)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.core.DuplicatesPredicate",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "evaluate duplicate methods",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.DuplicatesPredicate",
            "head_type": "class",
            "relation": "constrained_by",
            "tail": "methods must have same signature",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.DuplicatesPredicate",
            "head_type": "class",
            "relation": "applied_to",
            "tail": "filtering duplicates in a list of methods",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.DuplicatesPredicate",
            "head_type": "class",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.DuplicatesPredicate",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.DuplicatesPredicate",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.DuplicatesPredicate",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.ClassReader",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.DuplicatesPredicate",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.MethodVisitor",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.DuplicatesPredicate",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.Signature",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.DuplicatesPredicate",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.UnnecessaryBridgeFinder",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.DuplicatesPredicate#evaluate(Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "evaluate duplicate objects",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.DuplicatesPredicate#evaluate(Object)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "input must be a Method object",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.DuplicatesPredicate#evaluate(Object)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "check for duplicates in a set of Method objects",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.DuplicatesPredicate#evaluate(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.cglib.core.DuplicatesPredicate#evaluate(Object) sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.DuplicatesPredicate#evaluate(Object)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.DuplicatesPredicate",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.DuplicatesPredicate#evaluate(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation for org.springframework.cglib.core.DuplicatesPredicate#evaluate(Object)",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.DuplicatesPredicate#evaluate(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation for org.springframework.cglib.core.DuplicatesPredicate#evaluate(Object)",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.DuplicatesPredicate#getClassLoader(Class)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getClassLoader",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.DuplicatesPredicate#getClassLoader(Class)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.DuplicatesPredicate",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.DuplicatesPredicate",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.DuplicatesPredicate",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.DuplicatesPredicate#getClassLoader(Class)",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.UnnecessaryBridgeFinder",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "findUnnecessaryBridges",
            "tail_type": "apiFunction"
        },
        {
            "head": "findUnnecessaryBridges",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "removeUnnecessaryBridges",
            "tail_type": "useScenario"
        },
        {
            "head": "removeUnnecessaryBridges",
            "head_type": "useScenario",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.UnnecessaryBridgeFinder",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.UnnecessaryBridgeFinder",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.UnnecessaryBridgeFinder#addSuspectMethod(Method)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "addSuspectMethod",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.UnnecessaryBridgeFinder#addSuspectMethod(Method)",
            "head_type": "method",
            "relation": "have",
            "tail": "void addSuspectMethod(Method m) { methods.put(ReflectUtils.getSignature(m), m); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.UnnecessaryBridgeFinder#visit(int,int,String,String,String,String[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "visit method",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.UnnecessaryBridgeFinder#visit(int,int,String,String,String,String[])",
            "head_type": "method",
            "relation": "have",
            "tail": "visit method sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "visit method sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "visit method sample code content",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.UnnecessaryBridgeFinder#visitMethod(int,String,String,String,String[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "findUnnecessaryBridges",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.UnnecessaryBridgeFinder#visitMethod(int,String,String,String,String[])",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "mustImplementMethodVisitor",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.UnnecessaryBridgeFinder#visitMethod(int,String,String,String,String[])",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "bytecodeManipulation",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.UnnecessaryBridgeFinder#visitMethod(int,String,String,String,String[])",
            "head_type": "method",
            "relation": "have",
            "tail": "visitMethodSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.UnnecessaryBridgeFinder#visitMethod(int,String,String,String,String[])",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.UnnecessaryBridgeFinder",
            "tail_type": "class"
        },
        {
            "head": "visitMethodSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "completeExample",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "findUnnecessaryBridges",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "findUnnecessaryBridgesDescription",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#factory_method(ClassEmitter,Signature)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "factory_method",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#factory_method(ClassEmitter,Signature)",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "code",
            "tail_type": "code"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#factory_method(ClassEmitter,Signature)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.ClassEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#factory_method(ClassEmitter,Signature)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.Signature",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#null_constructor(ClassEmitter)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "generate null constructor",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#null_constructor(ClassEmitter)",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#null_constructor(ClassEmitter)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#null_constructor(ClassEmitter)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.EmitUtils#null_constructor(ClassEmitter)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#process_array(CodeEmitter,Type,ProcessArrayCallback)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "process an array on the stack",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#process_array(CodeEmitter,Type,ProcessArrayCallback)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "type.isArray() must be true",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#process_array(CodeEmitter,Type,ProcessArrayCallback)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#process_array(CodeEmitter,Type,ProcessArrayCallback)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#process_array(CodeEmitter,Type,ProcessArrayCallback)",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.EmitUtils#process_array(CodeEmitter,Type,ProcessArrayCallback)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#process_arrays(CodeEmitter,Type,ProcessArrayCallback)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "process arrays in parallel",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#process_arrays(CodeEmitter,Type,ProcessArrayCallback)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "arrays must be the same length",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#process_arrays(CodeEmitter,Type,ProcessArrayCallback)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "trigger callback for each pair of elements",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#process_arrays(CodeEmitter,Type,ProcessArrayCallback)",
            "head_type": "method",
            "relation": "have",
            "tail": "process arrays sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#process_arrays(CodeEmitter,Type,ProcessArrayCallback)",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation for process arrays",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#process_arrays(CodeEmitter,Type,ProcessArrayCallback)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation for process arrays",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.EmitUtils#process_arrays(CodeEmitter,Type,ProcessArrayCallback)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#string_switch(CodeEmitter,String[],int,ObjectSwitchCallback)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "string_switch",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#string_switch(CodeEmitter,String[],int,ObjectSwitchCallback)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "switchStyle",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#string_switch(CodeEmitter,String[],int,ObjectSwitchCallback)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "CodeEmitter",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#string_switch(CodeEmitter,String[],int,ObjectSwitchCallback)",
            "head_type": "method",
            "relation": "have",
            "tail": "string_switch_trie",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#string_switch(CodeEmitter,String[],int,ObjectSwitchCallback)",
            "head_type": "method",
            "relation": "have",
            "tail": "string_switch_hash",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#string_switch(CodeEmitter,String[],int,ObjectSwitchCallback)",
            "head_type": "method",
            "relation": "have",
            "tail": "IllegalArgumentException",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#string_switch(CodeEmitter,String[],int,ObjectSwitchCallback)",
            "head_type": "method",
            "relation": "have",
            "tail": "CodeGenerationException",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#string_switch(CodeEmitter,String[],int,ObjectSwitchCallback)",
            "head_type": "method",
            "relation": "have",
            "tail": "RuntimeException",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#string_switch(CodeEmitter,String[],int,ObjectSwitchCallback)",
            "head_type": "method",
            "relation": "have",
            "tail": "Error",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#string_switch(CodeEmitter,String[],int,ObjectSwitchCallback)",
            "head_type": "method",
            "relation": "have",
            "tail": "Exception",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#string_switch(CodeEmitter,String[],int,ObjectSwitchCallback)",
            "head_type": "method",
            "relation": "have",
            "tail": "switch_style",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#string_switch(CodeEmitter,String[],int,ObjectSwitchCallback)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#string_switch(CodeEmitter,String[],int,ObjectSwitchCallback)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.ObjectSwitchCallback",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#string_switch_trie(CodeEmitter,String[],ObjectSwitchCallback)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "stringSwitchTrie",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#string_switch_trie(CodeEmitter,String[],ObjectSwitchCallback)",
            "head_type": "method",
            "relation": "have",
            "tail": "stringSwitchTrieSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "stringSwitchTrieSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "private static void string_switch_trie(final CodeEmitter e, String[] strings, final ObjectSwitchCallback callback) throws Exception {\n    final Label def = e.make_label();\n    final Label end = e.make_label();\n    final Map buckets = CollectionUtils.bucket(Arrays.asList(strings), value -> ((String) value).length());\n    e.dup();\n    e.invoke_virtual(Constants.TYPE_STRING, STRING_LENGTH);\n    e.process_switch(getSwitchKeys(buckets), new ProcessSwitchCallback() {\n\n        @Override\n        public void processCase(int key, Label ignore_end) throws Exception {\n            List bucket = (List) buckets.get(key);\n            stringSwitchHelper(e, bucket, callback, def, end, 0);\n        }\n\n        @Override\n        public void processDefault() {\n            e.goTo(def);\n        }\n    });\n    e.mark(def);\n    e.pop();\n    callback.processDefault();\n    e.mark(end);\n}",
            "tail_type": "String"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#string_switch_trie(CodeEmitter,String[],ObjectSwitchCallback)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "relatedConceptInterpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "The method `string_switch_trie` is used to generate optimized trie-based switch statements for strings in byte code at runtime. It uses a `CodeEmitter` to emit the byte code, an array of strings for the trie, and an `ObjectSwitchCallback` to handle the cases. The trie is optimized by bucketing strings based on their lengths, and then generating switch cases for each bucket. This approach is particularly useful for reducing the complexity of large switch statements in byte code.",
            "tail_type": "String"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#string_switch_trie(CodeEmitter,String[],ObjectSwitchCallback)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "designPrincipleInterpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "have",
            "tail": "The design principle behind `string_switch_trie` is to optimize the performance of switch statements involving strings by using a trie data structure. This reduces the number of comparisons needed to find the correct case, especially when dealing with a large set of strings. The use of a trie allows for efficient prefix-based discrimination, which is faster than a linear search through all possible cases. This principle is particularly important in runtime code generation scenarios where performance is critical.",
            "tail_type": "String"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#stringSwitchHelper(CodeEmitter,List<Object>,ObjectSwitchCallback,Label,Label,int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "stringSwitchHelper",
            "tail_type": "apiFunction"
        },
        {
            "head": "stringSwitchHelper",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "private static void stringSwitchHelper(final CodeEmitter e, List strings, final ObjectSwitchCallback callback, final Label def, final Label end, final int index) throws Exception {\n    final int len = ((String) strings.get(0)).length();\n    final Map buckets = CollectionUtils.bucket(strings, value -> ((String) value).charAt(index));\n    e.dup();\n    e.push(index);\n    e.invoke_virtual(Constants.TYPE_STRING, STRING_CHAR_AT);\n    e.process_switch(getSwitchKeys(buckets), new ProcessSwitchCallback() {\n\n        @Override\n        public void processCase(int key, Label ignore_end) throws Exception {\n            List bucket = (List) buckets.get(key);\n            if (index + 1 == len) {\n                e.pop();\n                callback.processCase(bucket.get(0), end);\n            } else {\n                stringSwitchHelper(e, bucket, callback, def, end, index + 1);\n            }\n        }\n\n        @Override\n        public void processDefault() {\n            e.goTo(def);\n        }\n    }\n}",
            "tail_type": "String"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#stringSwitchHelper(CodeEmitter,List<Object>,ObjectSwitchCallback,Label,Label,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "relatedConceptInterpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "This method is used to generate a switch statement for strings in Java bytecode. It uses a list of strings and a callback to process each case. The method uses a map to group strings by their character at a given index, and recursively processes the strings until a match is found or the default case is reached.",
            "tail_type": "String"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#stringSwitchHelper(CodeEmitter,List<Object>,ObjectSwitchCallback,Label,Label,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "designPrincipleInterpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "have",
            "tail": "The design principle behind this method is to efficiently generate a switch statement for strings in Java bytecode. It uses a recursive approach to group strings by their characters and process them until a match is found or the default case is reached. This approach avoids the need for multiple string comparisons and improves the performance of the generated bytecode.",
            "tail_type": "String"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#getSwitchKeys(Map)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getSwitchKeys",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#getSwitchKeys(Map)",
            "head_type": "method",
            "relation": "have",
            "tail": "getSwitchKeys(Map) useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getSwitchKeys(Map) useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "static int[] getSwitchKeys(Map buckets) {\n    int[] keys = new int[buckets.size()];\n    int index = 0;\n    for (Iterator it = buckets.keySet().iterator(); it.hasNext(); ) {\n        keys[index++] = ((Integer) it.next());\n    }\n    Arrays.sort(keys);\n    return keys;\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#string_switch_hash(CodeEmitter,String[],ObjectSwitchCallback,boolean)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "stringSwitchHash",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#string_switch_hash(CodeEmitter,String[],ObjectSwitchCallback,boolean)",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.cglib.core.EmitUtils#string_switch_hash(CodeEmitter,String[],ObjectSwitchCallback,boolean) sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#string_switch_hash(CodeEmitter,String[],ObjectSwitchCallback,boolean)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "relatedConceptInterpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "This method is used to generate a switch statement based on string values. It uses a hash code to determine the case and then uses the equals method to compare strings within the same hash bucket.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#string_switch_hash(CodeEmitter,String[],ObjectSwitchCallback,boolean)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "designPrincipleInterpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "have",
            "tail": "The design principle behind this method is to efficiently handle string-based switch statements by minimizing the number of comparisons needed. It uses a combination of hash buckets and the equals method to achieve this.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#load_class_this(CodeEmitter)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "load_class_this",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#load_class_this(CodeEmitter)",
            "head_type": "method",
            "relation": "have",
            "tail": "load_class_this sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "load_class_this sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "load_class_this sample code content",
            "tail_type": "useSampleCodeContent"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#load_class(CodeEmitter,Type)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "load_class",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#load_class(CodeEmitter,Type)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "TypeUtils.isPrimitive(type)",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#load_class(CodeEmitter,Type)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "type == Type.VOID_TYPE",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#load_class(CodeEmitter,Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "load_class_helper(e, type)",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#load_class(CodeEmitter,Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "Related Concept Interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#load_class(CodeEmitter,Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "Design Principle Interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "load_class",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.EmitUtils",
            "tail_type": "class"
        },
        {
            "head": "load_class_helper(e, type)",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.EmitUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#load_class_helper(CodeEmitter,Type)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "load_class_helper",
            "tail_type": "apiFunction"
        },
        {
            "head": "load_class_helper",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "static_hook_required",
            "tail_type": "useConstraint"
        },
        {
            "head": "load_class_helper",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "class_loading",
            "tail_type": "useScenario"
        },
        {
            "head": "load_class_helper",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "load_class_helper_sample_code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "load_class_helper",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "related_concept_interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "load_class_helper",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "design_principle_interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.Type",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#push_array(CodeEmitter,Object[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "push_array",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#push_array(CodeEmitter,Object[])",
            "head_type": "method",
            "relation": "have",
            "tail": "push_array_useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "push_array_useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "push_array_sample_code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#remapComponentType(Class)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "remapComponentType",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#remapComponentType(Class)",
            "head_type": "method",
            "relation": "have",
            "tail": "private static Class remapComponentType(Class componentType) {\n    if (componentType.equals(Type.class)) {\n        return Class.class;\n    }\n    return componentType;\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#remapComponentType(Class)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.EmitUtils",
            "tail_type": "class"
        },
        {
            "head": "remapComponentType",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "componentType",
            "tail_type": "useScenario"
        },
        {
            "head": "remapComponentType",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "componentType must be a Class object",
            "tail_type": "useConstraint"
        },
        {
            "head": "remapComponentType",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "This function remaps the component type of a given class. If the component type is Type.class, it returns Class.class; otherwise, it returns the original component type.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "remapComponentType",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "The design principle of this function is to provide a mechanism to remap class types, ensuring flexibility in type handling within the application.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#push_object(CodeEmitter,Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "push_object",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#push_object(CodeEmitter,Object)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "IllegalArgumentException for unknown types",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#push_object(CodeEmitter,Object)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "pushing various types of objects onto the stack",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#push_object(CodeEmitter,Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for pushing objects onto the stack",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#push_object(CodeEmitter,Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation for pushing objects onto the stack",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#push_object(CodeEmitter,Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation for pushing objects onto the stack",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#push_object(CodeEmitter,Object)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#push_object(CodeEmitter,Object)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.EmitUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#hash_code(CodeEmitter,Type,int,Customizer)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "hash_code",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#hash_code(CodeEmitter,Type,int,Customizer)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "deprecated",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#hash_code(CodeEmitter,Type,int,Customizer)",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#hash_code(CodeEmitter,Type,int,Customizer)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#hash_code(CodeEmitter,Type,int,Customizer)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "hash_code",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "org.springframework.cglib.core.EmitUtils#hash_code(CodeEmitter,Type,int,Customizer)",
            "tail_type": "method"
        },
        {
            "head": "deprecated",
            "head_type": "useConstraint",
            "relation": "constrained_by",
            "tail": "org.springframework.cglib.core.EmitUtils#hash_code(CodeEmitter,Type,int,Customizer)",
            "tail_type": "method"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.cglib.core.EmitUtils#hash_code(CodeEmitter,Type,int,Customizer)",
            "tail_type": "method"
        },
        {
            "head": "relatedConceptInterpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "org.springframework.cglib.core.EmitUtils#hash_code(CodeEmitter,Type,int,Customizer)",
            "tail_type": "method"
        },
        {
            "head": "designPrincipleInterpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "have",
            "tail": "org.springframework.cglib.core.EmitUtils#hash_code(CodeEmitter,Type,int,Customizer)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#hash_code(CodeEmitter,Type,int,CustomizerRegistry)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "hashing",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#hash_code(CodeEmitter,Type,int,CustomizerRegistry)",
            "head_type": "method",
            "relation": "have",
            "tail": "hashing code generation",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#hash_code(CodeEmitter,Type,int,CustomizerRegistry)",
            "head_type": "method",
            "relation": "have",
            "tail": "hashing logic explanation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#hash_code(CodeEmitter,Type,int,CustomizerRegistry)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principles for hashing method",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#hash_code(CodeEmitter,Type,int,CustomizerRegistry)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#hash_code(CodeEmitter,Type,int,CustomizerRegistry)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.TypeUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#hash_array(CodeEmitter,Type,int,CustomizerRegistry)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "hashing an array",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#hash_array(CodeEmitter,Type,int,CustomizerRegistry)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "array must not be null",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#hash_array(CodeEmitter,Type,int,CustomizerRegistry)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "hashing nested arrays",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#hash_array(CodeEmitter,Type,int,CustomizerRegistry)",
            "head_type": "method",
            "relation": "have",
            "tail": "private static void hash_array(final CodeEmitter e, Type type, final int multiplier, final CustomizerRegistry registry) {\n    Label skip = e.make_label();\n    Label end = e.make_label();\n    e.dup();\n    e.ifnull(skip);\n    EmitUtils.process_array(e, type, type1 -> hash_code(e, type1, multiplier, registry));\n    e.goTo(end);\n    e.mark(skip);\n    e.pop();\n    e.mark(end);\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#hash_array(CodeEmitter,Type,int,CustomizerRegistry)",
            "head_type": "method",
            "relation": "have",
            "tail": " hashes an array by processing each element and combining their hash codes.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#hash_array(CodeEmitter,Type,int,CustomizerRegistry)",
            "head_type": "method",
            "relation": "have",
            "tail": "The design principle is to ensure that the hash code computation is efficient and consistent across different runs.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#hash_array(CodeEmitter,Type,int,CustomizerRegistry)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#hash_array(CodeEmitter,Type,int,CustomizerRegistry)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.Type",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#hash_array(CodeEmitter,Type,int,CustomizerRegistry)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CustomizerRegistry",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#hash_object(CodeEmitter,Type,CustomizerRegistry)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "hash_object",
            "tail_type": "apiFunction"
        },
        {
            "head": "hash_object",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "hash_object_useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "hash_object",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "hash_object_relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "hash_object",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "hash_object_designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.EmitUtils#hash_object(CodeEmitter,Type,CustomizerRegistry)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#hash_primitive(CodeEmitter,Type)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "hash_primitive",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#hash_primitive(CodeEmitter,Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "hash_primitive_useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "hash_primitive_useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "hash_primitive_sample_code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#hash_long(CodeEmitter)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "hashing",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#hash_long(CodeEmitter)",
            "head_type": "method",
            "relation": "have",
            "tail": "hashing a long value",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#hash_long(CodeEmitter)",
            "head_type": "method",
            "relation": "have",
            "tail": "private static void hash_long(CodeEmitter e) {\n    // (int)(f ^ (f >>> 32))\n    e.dup2();\n    e.push(32);\n    e.math(CodeEmitter.USHR, Type.LONG_TYPE);\n    e.math(CodeEmitter.XOR, Type.LONG_TYPE);\n    e.cast_numeric(Type.LONG_TYPE, Type.INT_TYPE);\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#hash_long(CodeEmitter)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#hash_long(CodeEmitter)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#hash_long(CodeEmitter)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "emitting code",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#not_equals(CodeEmitter,Type,Label,Customizer)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "not_equals",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#not_equals(CodeEmitter,Type,Label,Customizer)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "use of deprecated method",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#not_equals(CodeEmitter,Type,Label,Customizer)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "code generation for inequality check",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#not_equals(CodeEmitter,Type,Label,Customizer)",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for not_equals method",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#not_equals(CodeEmitter,Type,Label,Customizer)",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation for not_equals",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#not_equals(CodeEmitter,Type,Label,Customizer)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation for EmitUtils",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#not_equals(CodeEmitter,Type,Label,Customizer)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#not_equals(CodeEmitter,Type,Label,Customizer)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.Type",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#not_equals(CodeEmitter,Type,Label,Customizer)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.Label",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#not_equals(CodeEmitter,Type,Label,Customizer)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.Customizer",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#not_equals(CodeEmitter,Type,Label,CustomizerRegistry)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Branches to the specified label if the top two items on the stack are not equal",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#not_equals(CodeEmitter,Type,Label,CustomizerRegistry)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "The items must both be of the specified class",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#not_equals(CodeEmitter,Type,Label,CustomizerRegistry)",
            "head_type": "method",
            "relation": "have",
            "tail": "Equality is determined by comparing primitive values directly and by invoking the equals method for Objects. Arrays are recursively processed in the same manner.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#not_equals(CodeEmitter,Type,Label,CustomizerRegistry)",
            "head_type": "method",
            "relation": "have",
            "tail": "public static void not_equals(final CodeEmitter e, Type type, final Label notEquals, final CustomizerRegistry registry) { (new ProcessArrayCallback() { @Override public void processElement(Type type) { not_equals_helper(e, type, notEquals, registry, this); } }).processElement(type); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#not_equals(CodeEmitter,Type,Label,CustomizerRegistry)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#not_equals(CodeEmitter,Type,Label,CustomizerRegistry)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.Label",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#not_equals(CodeEmitter,Type,Label,CustomizerRegistry)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CustomizerRegistry",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#not_equals(CodeEmitter,Type,Label,CustomizerRegistry)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.ProcessArrayCallback",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#not_equals(CodeEmitter,Type,Label,CustomizerRegistry)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.not_equals_helper",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#not_equals_helper(CodeEmitter,Type,Label,CustomizerRegistry,ProcessArrayCallback)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "not_equals_helper",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#not_equals_helper(CodeEmitter,Type,Label,CustomizerRegistry,ProcessArrayCallback)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "TypeUtils.isPrimitive(type)",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#not_equals_helper(CodeEmitter,Type,Label,CustomizerRegistry,ProcessArrayCallback)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "TypeUtils.isArray(type)",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#not_equals_helper(CodeEmitter,Type,Label,CustomizerRegistry,ProcessArrayCallback)",
            "head_type": "method",
            "relation": "have",
            "tail": "private static void not_equals_helper(CodeEmitter e, Type type, Label notEquals, CustomizerRegistry registry, ProcessArrayCallback callback) {\n    if (TypeUtils.isPrimitive(type)) {\n        e.if_cmp(type, CodeEmitter.NE, notEquals);\n    } else {\n        Label end = e.make_label();\n        nullcmp(e, notEquals, end);\n        if (TypeUtils.isArray(type)) {\n            Label checkContents = e.make_label();\n            e.dup2();\n            e.arraylength();\n            e.swap();\n            e.arraylength();\n            e.if_icmp(CodeEmitter.EQ, checkContents);\n            e.pop2();\n            e.goTo(notEquals);\n            e.mark(checkContents);\n            EmitUtils.process_arrays(e, type, callback);\n        } else {\n            List<Customizer> customizers = registry.get(Customizer.class);\n            if (!customizers.isEmpty()) {\n                for (Customizer customizer : customizers) {\n                    customizer.customize(e, type);\n                }\n                e.swap();\n                for (Customizer customizer : customizers) {\n                    customizer.customize(e, type);\n                }\n            }\n            e.invoke_virtual(Constants.TYPE_OBJECT, EQUALS);\n            e.if_jump(CodeEmitter.EQ, notEquals);\n        }\n        e.mark(end);\n    }\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#not_equals_helper(CodeEmitter,Type,Label,CustomizerRegistry,ProcessArrayCallback)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#not_equals_helper(CodeEmitter,Type,Label,CustomizerRegistry,ProcessArrayCallback)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#not_equals_helper(CodeEmitter,Type,Label,CustomizerRegistry,ProcessArrayCallback)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#not_equals_helper(CodeEmitter,Type,Label,CustomizerRegistry,ProcessArrayCallback)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.TypeUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#not_equals_helper(CodeEmitter,Type,Label,CustomizerRegistry,ProcessArrayCallback)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CustomizerRegistry",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#not_equals_helper(CodeEmitter,Type,Label,CustomizerRegistry,ProcessArrayCallback)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.ProcessArrayCallback",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#nullcmp(CodeEmitter,Label,Label)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "conditional branching based on null checks",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#nullcmp(CodeEmitter,Label,Label)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "objects must be on the top of the stack",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#nullcmp(CodeEmitter,Label,Label)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "branching execution based on null status of objects",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#nullcmp(CodeEmitter,Label,Label)",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for null comparison branching",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#nullcmp(CodeEmitter,Label,Label)",
            "head_type": "method",
            "relation": "have",
            "tail": "interpretation of related concepts for null comparison branching",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#nullcmp(CodeEmitter,Label,Label)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation for null comparison branching",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.Label",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#append_string(CodeEmitter,Type,ArrayDelimiters,Customizer)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "append_string",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#append_string(CodeEmitter,Type,ArrayDelimiters,Customizer)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "deprecated",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#append_string(CodeEmitter,Type,ArrayDelimiters,Customizer)",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#append_string(CodeEmitter,Type,ArrayDelimiters,Customizer)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#append_string(CodeEmitter,Type,ArrayDelimiters,Customizer)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#append_string(CodeEmitter,Type,ArrayDelimiters,Customizer)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#append_string(CodeEmitter,Type,ArrayDelimiters,Customizer)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.Type",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#append_string(CodeEmitter,Type,ArrayDelimiters,Customizer)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.ArrayDelimiters",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#append_string(CodeEmitter,Type,ArrayDelimiters,Customizer)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.Customizer",
            "tail_type": "class"
        },
        {
            "head": "append_string",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "useScenario",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#append_string(CodeEmitter,Type,ArrayDelimiters,CustomizerRegistry)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "append_string",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#append_string(CodeEmitter,Type,ArrayDelimiters,CustomizerRegistry)",
            "head_type": "method",
            "relation": "have",
            "tail": "append_string_sample_code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "append_string_sample_code",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.EmitUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#append_string_helper(CodeEmitter,Type,ArrayDelimiters,CustomizerRegistry,ProcessArrayCallback)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "string append helper",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#append_string_helper(CodeEmitter,Type,ArrayDelimiters,CustomizerRegistry,ProcessArrayCallback)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "input parameters must not be null",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#append_string_helper(CodeEmitter,Type,ArrayDelimiters,CustomizerRegistry,ProcessArrayCallback)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "appending string representation of various types",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#append_string_helper(CodeEmitter,Type,ArrayDelimiters,CustomizerRegistry,ProcessArrayCallback)",
            "head_type": "method",
            "relation": "have",
            "tail": "private static void append_string_helper(CodeEmitter e, Type type, ArrayDelimiters delims, CustomizerRegistry registry, ProcessArrayCallback callback) {\n    Label skip = e.make_label();\n    Label end = e.make_label();\n    if (TypeUtils.isPrimitive(type)) {\n        switch(type.getSort()) {\n            case Type.INT:\n            case Type.SHORT:\n            case Type.BYTE:\n                e.invoke_virtual(Constants.TYPE_STRING_BUFFER, APPEND_INT);\n                break;\n            case Type.DOUBLE:\n                e.invoke_virtual(Constants.TYPE_STRING_BUFFER, APPEND_DOUBLE);\n                break;\n            case Type.FLOAT:\n                e.invoke_virtual(Constants.TYPE_STRING_BUFFER, APPEND_FLOAT);\n                break;\n            case Type.LONG:\n                e.invoke_virtual(Constants.TYPE_STRING_BUFFER, APPEND_LONG);\n                break;\n            case Type.BOOLEAN:\n                e.invoke_virtual(Constants.TYPE_STRING_BUFFER, APPEND_BOOLEAN);\n                break;\n            case Type.CHAR:\n                e.invoke_virtual(Constants.TYPE_STRING_BUFFER, APPEND_CHAR);\n                break;\n        }\n    } else if (TypeUtils.isArray(type)) {\n        e.dup();\n        e.ifnull(skip);\n        e.swap();\n        if (delims != null && delims.before != null && !delims.before.isEmpty()) {\n            e.push(delims.before);\n            e.invoke_virtual(Constants.TYPE_STRING_BUFFER, APPEND_STRING);\n            e.swap();\n        }\n        EmitUtils.process_array(e, type, callback);\n        shrinkStringBuffer(e, 2);\n        if (delims != null && delims.after != null && !delims.after.isEmpty()) {\n            e.push(delims.after);\n            e.invoke_virtual(Constants.TYPE_STRING_BUFFER, APPEND_STRING);\n        }\n    } else {\n        e.dup();\n        e.ifnull(skip);\n        for (Customizer customizer : registry.get(Customizer.class)) {\n            customizer.customize(e, type);\n        }\n        e.invoke_virtual(Constants.TYPE_OBJECT, TO_STRING);\n        e.invoke_virtual(Constants.TYPE_STRING_BUFFER, APPEND_STRING);\n    }\n    e.goTo(end);\n    e.mark(skip);\n    e.pop();\n    e.push(\"null\");\n    e.invoke_virtual(Constants.TYPE_STRING_BUFFER, APPEND_STRING);\n    e.mark(end);\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#append_string_helper(CodeEmitter,Type,ArrayDelimiters,CustomizerRegistry,ProcessArrayCallback)",
            "head_type": "method",
            "relation": "have",
            "tail": "This method is designed to append the string representation of various data types to a CodeEmitter object. It handles primitive types, arrays, and objects differently. For primitive types, it directly appends the value to the string buffer. For arrays, it processes each element and appends the specified delimiters before and after. For objects, it uses a customizer to convert the object to a string before appending.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#append_string_helper(CodeEmitter,Type,ArrayDelimiters,CustomizerRegistry,ProcessArrayCallback)",
            "head_type": "method",
            "relation": "have",
            "tail": "The design principle behind this method is to provide a flexible and efficient way to append the string representation of various data types. It leverages the CodeEmitter object to generate bytecode instructions for appending strings, which is more efficient than using regular Java code. The method also allows for customization through the CustomizerRegistry and handles arrays and objects with custom logic.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.EmitUtils#append_string_helper(CodeEmitter,Type,ArrayDelimiters,CustomizerRegistry,ProcessArrayCallback)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#shrinkStringBuffer(CodeEmitter,int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "shrinkStringBuffer",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#shrinkStringBuffer(CodeEmitter,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "shrinkStringBuffer Sample Code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "shrinkStringBuffer Sample Code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "private static void shrinkStringBuffer(CodeEmitter e, int amt) {\n    e.dup();\n    e.dup();\n    e.invoke_virtual(Constants.TYPE_STRING_BUFFER, LENGTH);\n    e.push(amt);\n    e.math(CodeEmitter.SUB, Type.INT_TYPE);\n    e.invoke_virtual(Constants.TYPE_STRING_BUFFER, SET_LENGTH);\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#load_method(CodeEmitter,MethodInfo)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "load_method",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#load_method(CodeEmitter,MethodInfo)",
            "head_type": "method",
            "relation": "have",
            "tail": "load_class(e, method.getClassInfo().getType())",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#load_method(CodeEmitter,MethodInfo)",
            "head_type": "method",
            "relation": "have",
            "tail": "e.push(method.getSignature().getName())",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#load_method(CodeEmitter,MethodInfo)",
            "head_type": "method",
            "relation": "have",
            "tail": "push_object(e, method.getSignature().getArgumentTypes())",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#load_method(CodeEmitter,MethodInfo)",
            "head_type": "method",
            "relation": "have",
            "tail": "e.invoke_virtual(Constants.TYPE_CLASS, GET_DECLARED_METHOD)",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#load_method(CodeEmitter,MethodInfo)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#load_method(CodeEmitter,MethodInfo)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.MethodInfo",
            "tail_type": "class"
        },
        {
            "head": "load_class(e, method.getClassInfo().getType())",
            "head_type": "useSampleCode",
            "relation": "haveFunction",
            "tail": "load_class",
            "tail_type": "apiFunction"
        },
        {
            "head": "e.push(method.getSignature().getName())",
            "head_type": "useSampleCode",
            "relation": "haveFunction",
            "tail": "push",
            "tail_type": "apiFunction"
        },
        {
            "head": "push_object(e, method.getSignature().getArgumentTypes())",
            "head_type": "useSampleCode",
            "relation": "haveFunction",
            "tail": "push_object",
            "tail_type": "apiFunction"
        },
        {
            "head": "e.invoke_virtual(Constants.TYPE_CLASS, GET_DECLARED_METHOD)",
            "head_type": "useSampleCode",
            "relation": "haveFunction",
            "tail": "invoke_virtual",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "push",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "invoke_virtual",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.MethodInfo",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getSignature",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.MethodInfo",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getClassInfo",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#method_switch(CodeEmitter,List<ObjectSwitchCallback>)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "generate method switch",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#method_switch(CodeEmitter,List<ObjectSwitchCallback>)",
            "head_type": "method",
            "relation": "have",
            "tail": "generate method switch sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "generate method switch sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "java\npackage com.example;\nimport org.springframework.cglib.core.CodeEmitter;\nimport org.springframework.cglib.core.EmitUtils;\nimport org.springframework.cglib.core.ObjectSwitchCallback;\nimport java.util.List;\nimport java.util.ArrayList;\n\nclass Example {\n    public static void main(String[] args) {\n        CodeEmitter e = new CodeEmitter();\n        List<ObjectSwitchCallback> methods = new ArrayList<>();\n        // Add method callbacks to the list\n        EmitUtils.method_switch(e, methods, new ObjectSwitchCallback() {\n            @Override\n            public void process(Object key, Object value) {\n                // Handle method switching logic here\n            }\n        });\n    }\n}\n",
            "tail_type": "String"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#method_switch(CodeEmitter,List<ObjectSwitchCallback>)",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "related concept interpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "The method switch is a mechanism to dynamically select and execute methods based on given conditions or states. It is often used in frameworks for dynamic proxying or code generation.",
            "tail_type": "String"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#method_switch(CodeEmitter,List<ObjectSwitchCallback>)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "design principle interpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "have",
            "tail": "The design principle behind the method switch is to provide a flexible and efficient way to handle multiple methods dynamically, reducing the need for conditional statements and enhancing code readability and maintainability.",
            "tail_type": "String"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#constructor_switch(CodeEmitter,List<Object>,ObjectSwitchCallback)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "constructor_switch",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#constructor_switch(CodeEmitter,List<Object>,ObjectSwitchCallback)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#constructor_switch(CodeEmitter,List<Object>,ObjectSwitchCallback)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.ObjectSwitchCallback",
            "tail_type": "class"
        },
        {
            "head": "constructor_switch",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "constructor_switch_sample_code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "constructor_switch_sample_code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "constructor_switch_sample_code_content",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#member_switch_helper(CodeEmitter,List<ObjectSwitchCallback>,boolean)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "processCase",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#member_switch_helper(CodeEmitter,List<ObjectSwitchCallback>,boolean)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "processDefault",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#member_switch_helper(CodeEmitter,List<ObjectSwitchCallback>,boolean)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "member_helper_size",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#member_switch_helper(CodeEmitter,List<ObjectSwitchCallback>,boolean)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "string_switch",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#member_switch_helper(CodeEmitter,List<ObjectSwitchCallback>,boolean)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "swap",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#member_switch_helper(CodeEmitter,List<ObjectSwitchCallback>,boolean)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "pop",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#member_switch_helper(CodeEmitter,List<ObjectSwitchCallback>,boolean)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "goTo",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#member_switch_helper(CodeEmitter,List<ObjectSwitchCallback>,boolean)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "mark",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#member_switch_helper(CodeEmitter,List<ObjectSwitchCallback>,boolean)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "bucket",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#member_switch_helper(CodeEmitter,List<ObjectSwitchCallback>,boolean)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "toArray",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#member_switch_helper(CodeEmitter,List<ObjectSwitchCallback>,boolean)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getSignature",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#member_switch_helper(CodeEmitter,List<ObjectSwitchCallback>,boolean)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getArgumentTypes",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#member_switch_helper(CodeEmitter,List<ObjectSwitchCallback>,boolean)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getName",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#member_switch_helper(CodeEmitter,List<ObjectSwitchCallback>,boolean)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "RuntimeException",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#member_switch_helper(CodeEmitter,List<ObjectSwitchCallback>,boolean)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "Error",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#member_switch_helper(CodeEmitter,List<ObjectSwitchCallback>,boolean)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "Exception",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#member_switch_helper(CodeEmitter,List<ObjectSwitchCallback>,boolean)",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#member_switch_helper(CodeEmitter,List<ObjectSwitchCallback>,boolean)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#member_switch_helper(CodeEmitter,List<ObjectSwitchCallback>,boolean)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "member_switch_helper",
            "head_type": "entityId",
            "relation": "haveFunction",
            "tail": "processCase",
            "tail_type": "apiFunction"
        },
        {
            "head": "member_switch_helper",
            "head_type": "entityId",
            "relation": "haveFunction",
            "tail": "processDefault",
            "tail_type": "apiFunction"
        },
        {
            "head": "member_switch_helper",
            "head_type": "entityId",
            "relation": "haveFunction",
            "tail": "member_helper_size",
            "tail_type": "apiFunction"
        },
        {
            "head": "member_switch_helper",
            "head_type": "entityId",
            "relation": "haveFunction",
            "tail": "string_switch",
            "tail_type": "apiFunction"
        },
        {
            "head": "member_switch_helper",
            "head_type": "entityId",
            "relation": "haveFunction",
            "tail": "swap",
            "tail_type": "apiFunction"
        },
        {
            "head": "member_switch_helper",
            "head_type": "entityId",
            "relation": "haveFunction",
            "tail": "pop",
            "tail_type": "apiFunction"
        },
        {
            "head": "member_switch_helper",
            "head_type": "entityId",
            "relation": "haveFunction",
            "tail": "goTo",
            "tail_type": "apiFunction"
        },
        {
            "head": "member_switch_helper",
            "head_type": "entityId",
            "relation": "haveFunction",
            "tail": "mark",
            "tail_type": "apiFunction"
        },
        {
            "head": "member_switch_helper",
            "head_type": "entityId",
            "relation": "haveFunction",
            "tail": "bucket",
            "tail_type": "apiFunction"
        },
        {
            "head": "member_switch_helper",
            "head_type": "entityId",
            "relation": "haveFunction",
            "tail": "toArray",
            "tail_type": "apiFunction"
        },
        {
            "head": "member_switch_helper",
            "head_type": "entityId",
            "relation": "haveFunction",
            "tail": "getSignature",
            "tail_type": "apiFunction"
        },
        {
            "head": "member_switch_helper",
            "head_type": "entityId",
            "relation": "haveFunction",
            "tail": "getArgumentTypes",
            "tail_type": "apiFunction"
        },
        {
            "head": "member_switch_helper",
            "head_type": "entityId",
            "relation": "haveFunction",
            "tail": "getName",
            "tail_type": "apiFunction"
        },
        {
            "head": "member_switch_helper",
            "head_type": "entityId",
            "relation": "constrained_by",
            "tail": "RuntimeException",
            "tail_type": "useConstraint"
        },
        {
            "head": "member_switch_helper",
            "head_type": "entityId",
            "relation": "constrained_by",
            "tail": "Error",
            "tail_type": "useConstraint"
        },
        {
            "head": "member_switch_helper",
            "head_type": "entityId",
            "relation": "constrained_by",
            "tail": "Exception",
            "tail_type": "useConstraint"
        },
        {
            "head": "member_switch_helper",
            "head_type": "entityId",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "member_switch_helper",
            "head_type": "entityId",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "member_switch_helper",
            "head_type": "entityId",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#member_helper_size(CodeEmitter,List,ObjectSwitchCallback,ParameterTyper,Label,Label)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "member_helper_size",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#member_helper_size(CodeEmitter,List,ObjectSwitchCallback,ParameterTyper,Label,Label)",
            "head_type": "method",
            "relation": "have",
            "tail": "member_helper_size_useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "member_helper_size_useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "private static void member_helper_size(final CodeEmitter e, List members, final ObjectSwitchCallback callback, final ParameterTyper typer, final Label def, final Label end) throws Exception {\n    final Map buckets = CollectionUtils.bucket(members, value -> typer.getParameterTypes((MethodInfo) value).length);\n    e.dup();\n    e.arraylength();\n    e.process_switch(EmitUtils.getSwitchKeys(buckets), new ProcessSwitchCallback() {\n\n        @Override\n        public void processCase(int key, Label dontUseEnd) throws Exception {\n            List bucket = (List) buckets.get(key);\n            member_helper_type(e, bucket, callback, typer, def, end, new BitSet());\n        }\n\n        @Override\n        public void processDefault() throws Exception {\n            e.goTo(def);\n        }\n    });\n}",
            "tail_type": "String"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#member_helper_size(CodeEmitter,List,ObjectSwitchCallback,ParameterTyper,Label,Label)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#member_helper_size(CodeEmitter,List,ObjectSwitchCallback,ParameterTyper,Label,Label)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.ParameterTyper",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#member_helper_size(CodeEmitter,List,ObjectSwitchCallback,ParameterTyper,Label,Label)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.Label",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#member_helper_size(CodeEmitter,List,ObjectSwitchCallback,ParameterTyper,Label,Label)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.ObjectSwitchCallback",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#member_helper_size(CodeEmitter,List,ObjectSwitchCallback,ParameterTyper,Label,Label)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.MethodInfo",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#member_helper_size(CodeEmitter,List,ObjectSwitchCallback,ParameterTyper,Label,Label)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.ProcessSwitchCallback",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#member_helper_type(CodeEmitter,List,ObjectSwitchCallback,ParameterTyper,Label,Label,BitSet)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "member type helper emission",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#member_helper_type(CodeEmitter,List,ObjectSwitchCallback,ParameterTyper,Label,Label,BitSet)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "members size should not be zero",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#member_helper_type(CodeEmitter,List,ObjectSwitchCallback,ParameterTyper,Label,Label,BitSet)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "emitting bytecode for method members",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#member_helper_type(CodeEmitter,List,ObjectSwitchCallback,ParameterTyper,Label,Label,BitSet)",
            "head_type": "method",
            "relation": "have",
            "tail": "emitting bytecode for method members",
            "tail_type": "useScenario"
        },
        {
            "head": "member type helper emission",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "emitting bytecode for method members",
            "tail_type": "useScenario"
        },
        {
            "head": "member type helper emission",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "emitting bytecode for method members",
            "tail_type": "useSampleCode"
        },
        {
            "head": "member type helper emission",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "emitting bytecode for method members",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "member type helper emission",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "emitting bytecode for method members",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#wrap_throwable(Block,Type)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "wrap throwable",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#wrap_throwable(Block,Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "public static void wrap_throwable(Block block, Type wrapper) {\n    CodeEmitter e = block.getCodeEmitter();\n    e.catch_exception(block, Constants.TYPE_THROWABLE);\n    e.new_instance(wrapper);\n    e.dup_x1();\n    e.swap();\n    e.invoke_constructor(wrapper, CSTRUCT_THROWABLE);\n    e.athrow();\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "wrap throwable",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "wrap throwable",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "Block",
            "tail_type": "class"
        },
        {
            "head": "wrap throwable",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "Type",
            "tail_type": "class"
        },
        {
            "head": "wrap throwable",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "Constants",
            "tail_type": "class"
        },
        {
            "head": "wrap throwable",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "CSTRUCT_THROWABLE",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#wrap_throwable(Block,Type)",
            "head_type": "method",
            "relation": "designPrincipleInterpretation",
            "tail": "The method wrap_throwable is designed to handle exceptions by wrapping them in a specified wrapper type. It uses a CodeEmitter to catch exceptions of type Throwable and then creates a new instance of the specified wrapper, swapping and throwing the wrapped exception. This approach allows for custom exception handling and encapsulation.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#wrap_throwable(Block,Type)",
            "head_type": "method",
            "relation": "relatedConceptInterpretation",
            "tail": "The related concepts include exception handling, bytecode manipulation, and dynamic type creation. The method leverages the CodeEmitter to manipulate bytecode at runtime, allowing for dynamic exception handling. The use of Constants and CSTRUCT_THROWABLE indicates interaction with a structured system for managing types and constructors, facilitating the creation of new instances of specified types for exception wrapping.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#add_properties(ClassEmitter,String[],Type[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "add_properties",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#add_properties(ClassEmitter,String[],Type[])",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.ClassEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#add_properties(ClassEmitter,String[],Type[])",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.Type",
            "tail_type": "class"
        },
        {
            "head": "add_properties",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "complete_code",
            "tail_type": "complete_code"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#add_property(ClassEmitter,String,Type,String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "add_property",
            "tail_type": "apiFunction"
        },
        {
            "head": "add_property",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "add_property_useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "add_property",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "add_property_relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "add_property",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "add_property_designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#wrap_undeclared_throwable(CodeEmitter,Block,Type[],Type)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "wrap_undeclared_throwable",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#wrap_undeclared_throwable(CodeEmitter,Block,Type[],Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "Sample Code for wrap_undeclared_throwable",
            "tail_type": "useSampleCode"
        },
        {
            "head": "Sample Code for wrap_undeclared_throwable",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "Complete Example for wrap_undeclared_throwable",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#wrap_undeclared_throwable(CodeEmitter,Block,Type[],Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "Related Concept Interpretation for wrap_undeclared_throwable",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "Related Concept Interpretation for wrap_undeclared_throwable",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "Detailed Explanation of Related Concepts",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#wrap_undeclared_throwable(CodeEmitter,Block,Type[],Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "Design Principle Interpretation for wrap_undeclared_throwable",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "Design Principle Interpretation for wrap_undeclared_throwable",
            "head_type": "designPrincipleInterpretation",
            "relation": "have",
            "tail": "Detailed Explanation of Design Principles",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#begin_method(ClassEmitter,MethodInfo)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "begin_method",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#begin_method(ClassEmitter,MethodInfo)",
            "head_type": "method",
            "relation": "have",
            "tail": "begin_method(ClassEmitter, MethodInfo, int)",
            "tail_type": "useSampleCode"
        },
        {
            "head": "begin_method(ClassEmitter, MethodInfo, int)",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.EmitUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#begin_method(ClassEmitter,MethodInfo)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.EmitUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#begin_method(ClassEmitter,MethodInfo,int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "begin_method",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#begin_method(ClassEmitter,MethodInfo,int)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.ClassEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.EmitUtils#begin_method(ClassEmitter,MethodInfo,int)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.MethodInfo",
            "tail_type": "class"
        },
        {
            "head": "begin_method",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "begin_method_sample_code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.ArrayDelimiters",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "array delimiter handling",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.ArrayDelimiters",
            "head_type": "class",
            "relation": "have",
            "tail": "used for managing delimiters in array processing",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.ArrayDelimiters",
            "head_type": "class",
            "relation": "have",
            "tail": "design follows the principle of encapsulation for delimiter management",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.ArrayDelimiters",
            "head_type": "class",
            "relation": "have",
            "tail": "package com.example.arrayprocessing;\nimport java.util.*;\npublic class ArrayDelimiterExample {\n    public static void main(String[] args) {\n        String[] array = {\"apple\", \"banana\", \"cherry\"};\n        String before = \"[\";\n        String inside = \", \";\n        String after = \"]\";\n        ArrayDelimiters delimiters = new ArrayDelimiters(before, inside, after);\n        System.out.println(delimiters.before + String.join(delimiters.inside, array) + delimiters.after);\n    }\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.ParameterTyper",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getParameterTypes",
            "tail_type": "apiFunction"
        },
        {
            "head": "getParameterTypes",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.ParameterTyper",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.ParameterTyper",
            "head_type": "class",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.ParameterTyper",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getParameterTypes",
            "tail_type": "apiFunction"
        },
        {
            "head": "getParameterTypes",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.ParameterTyper",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.ParameterTyper",
            "head_type": "class",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.cglib.core.ParameterTyper",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.FieldTypeCustomizer",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "customize",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.FieldTypeCustomizer",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getOutType",
            "tail_type": "apiFunction"
        },
        {
            "head": "customize",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "constructor",
            "tail_type": "useScenario"
        },
        {
            "head": "customize",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "getOutType",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.FieldTypeCustomizer",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.FieldTypeCustomizer",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.FieldTypeCustomizer#customize(CodeEmitter,int,Type)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "customizes assignment in key constructor",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.FieldTypeCustomizer#customize(CodeEmitter,int,Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "void customize(CodeEmitter e, int index, Type type);",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.FieldTypeCustomizer#customize(CodeEmitter,int,Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "Customizes this.FIELD_0 = ? assignment in key constructor",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.FieldTypeCustomizer#customize(CodeEmitter,int,Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "Design principle involves customizing assignments within a constructor for optimization",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.FieldTypeCustomizer#getOutType(int,Type)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "computeFieldType",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.FieldTypeCustomizer#getOutType(int,Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "computeFieldTypeDescription",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "computeFieldTypeDescription",
            "head_type": "relatedConceptInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.FieldTypeCustomizer",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.FieldTypeCustomizer",
            "head_type": "class",
            "relation": "have",
            "tail": "computeFieldTypeDesignPrinciple",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "computeFieldTypeDesignPrinciple",
            "head_type": "designPrincipleInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.FieldTypeCustomizer",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.FieldTypeCustomizer",
            "head_type": "class",
            "relation": "have",
            "tail": "computeFieldTypeSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.GeneratorStrategy",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "generateClass",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.GeneratorStrategy",
            "head_type": "class",
            "relation": "constrained_by",
            "tail": "correctlyImplementEqualsAndHashCode",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.GeneratorStrategy",
            "head_type": "class",
            "relation": "have",
            "tail": "generateClassSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.GeneratorStrategy",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.GeneratorStrategy",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "generateClass",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "classGenerationScenario",
            "tail_type": "useScenario"
        },
        {
            "head": "generateClassSampleCode",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "generateClass",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.GeneratorStrategy#generate(ClassGenerator)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "generate the class",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.GeneratorStrategy#generate(ClassGenerator)",
            "head_type": "method",
            "relation": "have",
            "tail": "Generate the class.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.GeneratorStrategy#generate(ClassGenerator)",
            "head_type": "method",
            "relation": "have",
            "tail": "Generate the class.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.GeneratorStrategy#generate(ClassGenerator)",
            "head_type": "method",
            "relation": "have",
            "tail": "package com.example;\n\nimport org.springframework.cglib.core.ClassGenerator;\n\npublic class GenerateClassExample {\n    public static void main(String[] args) throws Exception {\n        GeneratorStrategy strategy = new GeneratorStrategy();\n        ClassGenerator cg = new ClassGenerator();\n        byte[] classBytes = strategy.generate(cg);\n        // Use the generated class bytes as needed\n    }\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.GeneratorStrategy#generate(ClassGenerator)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "ClassGenerator",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.GeneratorStrategy#equals(Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "caching of classes",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.GeneratorStrategy#equals(Object)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "correctly implement equals and hashCode",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.GeneratorStrategy#equals(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "generating too many classes",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.GeneratorStrategy#equals(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "The GeneratorStrategy in use does not currently, but may in the future, affect the caching of classes generated by AbstractClassGenerator, so this is a reminder that you should correctly implement equals and hashCode to avoid generating too many classes.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.GeneratorStrategy#equals(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "Ensure that equals and hashCode methods are correctly implemented to maintain the caching mechanism of generated classes.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.GeneratorStrategy#equals(Object)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "AbstractClassGenerator",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.GeneratorStrategy#equals(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "package com.example;\n\nimport org.springframework.cglib.core.GeneratorStrategy;\nimport java.util.Objects;\n\npublic class GeneratorStrategyExample {\n    public static void main(String[] args) {\n        GeneratorStrategy strategy = new GeneratorStrategy() {\n            @Override\n            public boolean equals(Object o) {\n                if (this == o) return true;\n                if (o == null || getClass() != o.getClass()) return false;\n                GeneratorStrategy that = (GeneratorStrategy) o;\n                return Objects.equals(getField(), that.getField());\n            }\n\n            @Override\n            public int hashCode() {\n                return Objects.hash(getField());\n            }\n\n            private Object getField() {\n                // Implementation details\n                return new Object();\n            }\n        };\n    }\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.HashCodeCustomizer",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "customize",
            "tail_type": "apiFunction"
        },
        {
            "head": "customize",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Customizes calculation of hashcode",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "customize",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "boolean customize(CodeEmitter e, Type type);",
            "tail_type": "useSampleCode"
        }
    ]
}