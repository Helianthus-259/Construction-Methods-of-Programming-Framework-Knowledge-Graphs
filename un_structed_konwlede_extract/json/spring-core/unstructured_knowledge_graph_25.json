{
    "relationships": [
        {
            "head": "org.springframework.util.unit.DataSizeTests#ofBytesToBytes()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "convert bytes to DataSize and back to bytes",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#ofBytesToBytes()",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for converting bytes to DataSize and asserting the value",
            "tail_type": "useSampleCode"
        },
        {
            "head": "convert bytes to DataSize and back to bytes",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "sample code for converting bytes to DataSize and asserting the value",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#ofBytesToKilobytes()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "DataSize Conversion",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#ofBytesToKilobytes()",
            "head_type": "method",
            "relation": "have",
            "tail": "Converts bytes to kilobytes using DataSize",
            "tail_type": "useSampleCode"
        },
        {
            "head": "DataSize Conversion",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "org.springframework.util.DataSize",
            "tail_type": "class"
        },
        {
            "head": "Converts bytes to kilobytes using DataSize",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.util.DataSize",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#ofBytesToKilobytes()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.DataSize",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#ofKilobytesToKilobytes()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "DataSize Conversion",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#ofKilobytesToKilobytes()",
            "head_type": "method",
            "relation": "have",
            "tail": "Converts DataSize from kilobytes to kilobytes",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#ofKilobytesToKilobytes()",
            "head_type": "method",
            "relation": "have",
            "tail": "package org.springframework.util.unit;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class DataSizeTests {\n\n    @Test\n    public void ofKilobytesToKilobytes() {\n        assertThat(DataSize.ofKilobytes(1024).toKilobytes()).isEqualTo(1024);\n    }\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#ofKilobytesToKilobytes()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.unit.DataSize",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#ofKilobytesToKilobytes()",
            "head_type": "method",
            "relation": "have",
            "tail": "This method tests the conversion of DataSize from kilobytes to kilobytes using the AssertJ library for assertions.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#ofKilobytesToKilobytes()",
            "head_type": "method",
            "relation": "have",
            "tail": "The method follows the principle of unit testing to ensure the accuracy of the DataSize conversion. It leverages the AssertJ library for clear and readable assertions.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#ofKilobytesToMegabytes()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Data Size Conversion",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#ofKilobytesToMegabytes()",
            "head_type": "method",
            "relation": "have",
            "tail": "Sample Code for DataSize Conversion",
            "tail_type": "useSampleCode"
        },
        {
            "head": "Sample Code for DataSize Conversion",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "Complete Example of DataSize Conversion",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#ofMegabytesToMegabytes()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "convert data size from megabytes to megabytes",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#ofMegabytesToMegabytes()",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for converting data size",
            "tail_type": "useSampleCode"
        },
        {
            "head": "sample code for converting data size",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "complete example of converting data size from megabytes to megabytes",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#ofMegabytesToGigabytes()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Data Size Conversion",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#ofMegabytesToGigabytes()",
            "head_type": "method",
            "relation": "have",
            "tail": "Converts megabytes to gigabytes using DataSize utility",
            "tail_type": "useSampleCode"
        },
        {
            "head": "DataSize",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.util.unit.DataSizeTests#ofMegabytesToGigabytes()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#ofMegabytesToGigabytes()",
            "head_type": "method",
            "relation": "have",
            "tail": "This method tests the conversion of megabytes to gigabytes using the DataSize class.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#ofMegabytesToGigabytes()",
            "head_type": "method",
            "relation": "have",
            "tail": "The design principle here is to ensure that the DataSize utility class provides accurate and reliable conversions between different units of digital information size.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#ofGigabytesToGigabytes()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "DataSize Conversion",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#ofGigabytesToGigabytes()",
            "head_type": "method",
            "relation": "have",
            "tail": "Sample Code for DataSize Conversion",
            "tail_type": "useSampleCode"
        },
        {
            "head": "Sample Code for DataSize Conversion",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "Complete Example of DataSize Conversion",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#ofGigabytesToTerabytes()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "DataSize Conversion",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#ofGigabytesToTerabytes()",
            "head_type": "method",
            "relation": "have",
            "tail": "Converts Gigabytes to Terabytes",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#ofGigabytesToTerabytes()",
            "head_type": "method",
            "relation": "have",
            "tail": "Sample Code for DataSize Conversion",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#ofGigabytesToTerabytes()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.unit.DataSize",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#ofGigabytesToTerabytes()",
            "head_type": "method",
            "relation": "have",
            "tail": "DataSize Unit Conversion Explanation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#ofGigabytesToTerabytes()",
            "head_type": "method",
            "relation": "have",
            "tail": "Design Principles of DataSize Conversion",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#ofTerabytesToGigabytes()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "DataSize Conversion",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#ofTerabytesToGigabytes()",
            "head_type": "method",
            "relation": "have",
            "tail": "Converts terabytes to gigabytes using DataSize utility",
            "tail_type": "useSampleCode"
        },
        {
            "head": "DataSize Conversion",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "org.springframework.util.DataSize",
            "tail_type": "class"
        },
        {
            "head": "Converts terabytes to gigabytes using DataSize utility",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.util.DataSize",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#ofTerabytesToGigabytes()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.DataSize",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#ofWithBytesUnit()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "convert data size with bytes unit",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#ofWithBytesUnit()",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for converting data size with bytes unit",
            "tail_type": "useSampleCode"
        },
        {
            "head": "convert data size with bytes unit",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "unit testing",
            "tail_type": "useScenario"
        },
        {
            "head": "convert data size with bytes unit",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "related concept interpretation for data size conversion",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "convert data size with bytes unit",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "design principle interpretation for data size conversion",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#ofWithKilobytesUnit()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "DataSize conversion",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#ofWithKilobytesUnit()",
            "head_type": "method",
            "relation": "have",
            "tail": "Sample code for DataSize conversion",
            "tail_type": "useSampleCode"
        },
        {
            "head": "Sample code for DataSize conversion",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "Complete example of DataSize conversion",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#ofWithMegabytesUnit()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "convert data size to megabytes",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#ofWithMegabytesUnit()",
            "head_type": "method",
            "relation": "have",
            "tail": "DataSize.of(30, DataUnit.MEGABYTES) should equal DataSize.ofMegabytes(30)",
            "tail_type": "useSampleCode"
        },
        {
            "head": "DataSize.of(30, DataUnit.MEGABYTES) should equal DataSize.ofMegabytes(30)",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "convert data size to megabytes",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#ofWithGigabytesUnit()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "DataSize conversion",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#ofWithGigabytesUnit()",
            "head_type": "method",
            "relation": "have",
            "tail": "Sample code for DataSize conversion",
            "tail_type": "useSampleCode"
        },
        {
            "head": "DataSize conversion",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "org.springframework.util.DataSize",
            "tail_type": "class"
        },
        {
            "head": "Sample code for DataSize conversion",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "Complete example of DataSize conversion",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#ofWithTerabytesUnit()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "DataSize conversion",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#ofWithTerabytesUnit()",
            "head_type": "method",
            "relation": "have",
            "tail": "Sample code for DataSize conversion",
            "tail_type": "useSampleCode"
        },
        {
            "head": "Sample code for DataSize conversion",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "Complete example of DataSize conversion",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#parseWithDefaultUnitUsesBytes()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "parseWithDefaultUnitUsesBytes",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#parseWithDefaultUnitUsesBytes()",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.util.unit.DataSizeTests#parseWithDefaultUnitUsesBytes()",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#parseNegativeNumberWithDefaultUnitUsesBytes()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "parseNegativeNumberWithDefaultUnitUsesBytes",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#parseNegativeNumberWithDefaultUnitUsesBytes()",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.util.unit.DataSizeTests#parseNegativeNumberWithDefaultUnitUsesBytes()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#parseWithNullDefaultUnitUsesBytes()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "parseWithNullDefaultUnitUsesBytes",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#parseWithNullDefaultUnitUsesBytes()",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.util.unit.DataSizeTests#parseWithNullDefaultUnitUsesBytes()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#parseNegativeNumberWithNullDefaultUnitUsesBytes()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "parseNegativeNumberWithNullDefaultUnitUsesBytes",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#parseNegativeNumberWithNullDefaultUnitUsesBytes()",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.util.unit.DataSizeTests#parseNegativeNumberWithNullDefaultUnitUsesBytes()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#parseWithCustomDefaultUnit()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "parse with custom default unit",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#parseWithCustomDefaultUnit()",
            "head_type": "method",
            "relation": "have",
            "tail": "void parseWithCustomDefaultUnit() { assertThat(DataSize.parse(\"1\", DataUnit.KILOBYTES)).isEqualTo(DataSize.ofKilobytes(1)); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#parseWithCustomDefaultUnit()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.unit.DataSizeTests",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#parseWithCustomDefaultUnit()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "DataSize",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#parseWithCustomDefaultUnit()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "DataUnit",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#parseNegativeNumberWithCustomDefaultUnit()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "parseNegativeNumberWithCustomDefaultUnit",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#parseNegativeNumberWithCustomDefaultUnit()",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.util.unit.DataSizeTests#parseNegativeNumberWithCustomDefaultUnit()",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#parseWithBytes(CharSequence)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "parseWithBytes",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#parseWithBytes(CharSequence)",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.util.unit.DataSizeTests",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#parseWithBytes(CharSequence)",
            "head_type": "method",
            "relation": "have",
            "tail": "DataSize.parse(text)",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#parseWithBytes(CharSequence)",
            "head_type": "method",
            "relation": "have",
            "tail": "assertThat(DataSize.parse(text)).isEqualTo(DataSize.ofKilobytes(1))",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#parseWithBytes(CharSequence)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#parseWithBytes(CharSequence)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#parseWithNegativeBytes()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "parse negative bytes",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#parseWithNegativeBytes()",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.util.unit.DataSizeTests#parseWithNegativeBytes() sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#parseWithPositiveBytes()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "parse data size with positive bytes",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#parseWithPositiveBytes()",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for parsing data size with positive bytes",
            "tail_type": "useSampleCode"
        },
        {
            "head": "parse data size with positive bytes",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "sample code for parsing data size with positive bytes",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#parseWithKilobytes()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "parseWithKilobytes",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#parseWithKilobytes()",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.util.unit.DataSizeTests#parseWithKilobytes()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#parseWithNegativeKilobytes()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "parseWithNegativeKilobytes",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#parseWithNegativeKilobytes()",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.util.unit.DataSizeTests#parseWithNegativeKilobytes()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#parseWithMegabytes()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "parse data size with megabytes",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#parseWithMegabytes()",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for parsing data size with megabytes",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#parseWithMegabytes()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.DataSize",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#parseWithNegativeMegabytes()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "parseWithNegativeMegabytes",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#parseWithNegativeMegabytes()",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.util.unit.DataSizeTests#parseWithNegativeMegabytes()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#parseWithGigabytes()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "parseWithGigabytes",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#parseWithGigabytes()",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.util.unit.DataSizeTests#parseWithGigabytes()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#parseWithNegativeGigabytes()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "parseWithNegativeGigabytes",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#parseWithNegativeGigabytes()",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.util.unit.DataSizeTests#parseWithNegativeGigabytes()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#parseWithTerabytes()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "parse data size with terabytes",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#parseWithTerabytes()",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for parsing data size with terabytes",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#parseWithTerabytes()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.unit.DataSizeTests",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#parseWithNegativeTerabytes()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "parseWithNegativeTerabytes",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#parseWithNegativeTerabytes()",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.util.unit.DataSizeTests#parseWithNegativeTerabytes()",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#isNegativeWithPositive()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "DataSize validation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#isNegativeWithPositive()",
            "head_type": "method",
            "relation": "have",
            "tail": "Sample code for DataSize validation",
            "tail_type": "useSampleCode"
        },
        {
            "head": "Sample code for DataSize validation",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "Complete example of DataSize validation",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#isNegativeWithZero()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "DataSize validation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#isNegativeWithZero()",
            "head_type": "method",
            "relation": "have",
            "tail": "Sample code for DataSize validation",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#isNegativeWithZero()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.DataSize",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#isNegativeWithNegative()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "DataSize validation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#isNegativeWithNegative()",
            "head_type": "method",
            "relation": "have",
            "tail": "Sample code for DataSize validation",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#isNegativeWithNegative()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.DataSize",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#toStringUsesBytes()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "toStringUsesBytes",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#toStringUsesBytes()",
            "head_type": "method",
            "relation": "have",
            "tail": "toStringUsesBytesSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "toStringUsesBytesSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "toStringUsesBytesCompleteSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#toStringWithNegativeBytes()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "toStringWithNegativeBytes",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#toStringWithNegativeBytes()",
            "head_type": "method",
            "relation": "have",
            "tail": "toStringWithNegativeBytesSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "toStringWithNegativeBytesSampleCode",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.util.unit.DataSizeTests#toStringWithNegativeBytes()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#parseWithUnsupportedUnit()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "parseWithUnsupportedUnit",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests#parseWithUnsupportedUnit()",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.util.unit.DataSizeTests#parseWithUnsupportedUnit()",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.UnmodifiableMultiValueMapTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "testDelegation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.UnmodifiableMultiValueMapTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "testUnsupported",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.UnmodifiableMultiValueMapTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "testEntrySetDelegation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.UnmodifiableMultiValueMapTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "testEntrySetUnsupported",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.UnmodifiableMultiValueMapTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "testValuesDelegation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.UnmodifiableMultiValueMapTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "testValuesUnsupported",
            "tail_type": "apiFunction"
        },
        {
            "head": "testDelegation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode_testDelegation",
            "tail_type": "useSampleCode"
        },
        {
            "head": "testUnsupported",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode_testUnsupported",
            "tail_type": "useSampleCode"
        },
        {
            "head": "testEntrySetDelegation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode_testEntrySetDelegation",
            "tail_type": "useSampleCode"
        },
        {
            "head": "testEntrySetUnsupported",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode_testEntrySetUnsupported",
            "tail_type": "useSampleCode"
        },
        {
            "head": "testValuesDelegation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode_testValuesDelegation",
            "tail_type": "useSampleCode"
        },
        {
            "head": "testValuesUnsupported",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode_testValuesUnsupported",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.UnmodifiableMultiValueMapTests",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "UnmodifiableMultiValueMap",
            "tail_type": "class"
        },
        {
            "head": "UnmodifiableMultiValueMap",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation_UnmodifiableMultiValueMap",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "UnmodifiableMultiValueMap",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation_UnmodifiableMultiValueMap",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.UnmodifiableMultiValueMapTests#delegation()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "UnmodifiableMultiValueMap",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.UnmodifiableMultiValueMapTests#delegation()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "MultiValueMap",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.UnmodifiableMultiValueMapTests#delegation()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "mocking",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.UnmodifiableMultiValueMapTests#delegation()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "assertion",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.UnmodifiableMultiValueMapTests#delegation()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "exceptionHandling",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.UnmodifiableMultiValueMapTests#delegation()",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.UnmodifiableMultiValueMapTests#delegation()",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.UnmodifiableMultiValueMapTests#delegation()",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "UnmodifiableMultiValueMap",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "MultiValueMap",
            "tail_type": "apiFunction"
        },
        {
            "head": "UnmodifiableMultiValueMap",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "mocking",
            "tail_type": "apiFunction"
        },
        {
            "head": "UnmodifiableMultiValueMap",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "assertion",
            "tail_type": "apiFunction"
        },
        {
            "head": "UnmodifiableMultiValueMap",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "exceptionHandling",
            "tail_type": "apiFunction"
        },
        {
            "head": "MultiValueMap",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "mocking",
            "tail_type": "apiFunction"
        },
        {
            "head": "MultiValueMap",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "assertion",
            "tail_type": "apiFunction"
        },
        {
            "head": "MultiValueMap",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "exceptionHandling",
            "tail_type": "apiFunction"
        },
        {
            "head": "mocking",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "assertion",
            "tail_type": "apiFunction"
        },
        {
            "head": "mocking",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "exceptionHandling",
            "tail_type": "apiFunction"
        },
        {
            "head": "assertion",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "exceptionHandling",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.UnmodifiableMultiValueMapTests#unsupported()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "unsupportedOperation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.UnmodifiableMultiValueMapTests#unsupported()",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.util.UnmodifiableMultiValueMapTests#unsupported() sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.UnmodifiableMultiValueMapTests#entrySetDelegation()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "entrySetDelegation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.UnmodifiableMultiValueMapTests#entrySetDelegation()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.UnmodifiableMultiValueMap",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.UnmodifiableMultiValueMapTests#entrySetDelegation()",
            "head_type": "method",
            "relation": "have",
            "tail": "MultiValueMap",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.UnmodifiableMultiValueMapTests#entrySetDelegation()",
            "head_type": "method",
            "relation": "have",
            "tail": "UnmodifiableMultiValueMap",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.UnmodifiableMultiValueMapTests#entrySetDelegation()",
            "head_type": "method",
            "relation": "have",
            "tail": "entrySet",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.util.UnmodifiableMultiValueMapTests#entrySetDelegation()",
            "head_type": "method",
            "relation": "have",
            "tail": "Delegation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.UnmodifiableMultiValueMapTests#entrySetDelegation()",
            "head_type": "method",
            "relation": "have",
            "tail": "entrySetDelegationSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.UnmodifiableMultiValueMapTests#entrySetUnsupported()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "entrySetUnsupported",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.UnmodifiableMultiValueMapTests#entrySetUnsupported()",
            "head_type": "method",
            "relation": "have",
            "tail": "void entrySetUnsupported() { ... }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "entrySetUnsupported",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "org.springframework.util.UnmodifiableMultiValueMapTests",
            "tail_type": "class"
        },
        {
            "head": "void entrySetUnsupported() { ... }",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.util.UnmodifiableMultiValueMapTests",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.UnmodifiableMultiValueMapTests#valuesDelegation()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "valuesDelegation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.UnmodifiableMultiValueMapTests#valuesDelegation()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "MultiValueMap",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.UnmodifiableMultiValueMapTests#valuesDelegation()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "UnmodifiableMultiValueMap",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.UnmodifiableMultiValueMapTests#valuesDelegation()",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.UnmodifiableMultiValueMapTests#valuesDelegation()",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.UnmodifiableMultiValueMapTests#valuesDelegation()",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.UnmodifiableMultiValueMapTests#valuesUnsupported()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "UnmodifiableMultiValueMap",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.UnmodifiableMultiValueMapTests#valuesUnsupported()",
            "head_type": "method",
            "relation": "have",
            "tail": "UnmodifiableMultiValueMapTests",
            "tail_type": "class"
        },
        {
            "head": "UnmodifiableMultiValueMapTests",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.util.UnmodifiableMultiValueMapTests#valuesUnsupported()",
            "tail_type": "method"
        },
        {
            "head": "UnmodifiableMultiValueMap",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "UnmodifiableMultiValueMap",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "UnmodifiableMultiValueMap",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.UnmodifiableMultiValueMapTests#assertThatUnsupportedOperationException()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "asserting an Unsupported Operation Exception",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.UnmodifiableMultiValueMapTests#assertThatUnsupportedOperationException()",
            "head_type": "method",
            "relation": "have",
            "tail": "private static ThrowableTypeAssert<UnsupportedOperationException> assertThatUnsupportedOperationException() {\n    return assertThatExceptionOfType(UnsupportedOperationException.class);\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.UnmodifiableMultiValueMapTests#assertThatUnsupportedOperationException()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.UnmodifiableMultiValueMapTests",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.UnmodifiableMultiValueMapTests#assertThatUnsupportedOperationException()",
            "head_type": "method",
            "relation": "have",
            "tail": "Used to assert that an operation is unsupported by throwing an UnsupportedOperationException.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.UnmodifiableMultiValueMapTests#assertThatUnsupportedOperationException()",
            "head_type": "method",
            "relation": "have",
            "tail": "This method is designed to ensure that certain operations are not supported by throwing an UnsupportedOperationException, adhering to the principle of immutability and ensuring the integrity of the data structure.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassWriter#hasFlags(int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "check constructor flags",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ClassWriter#hasFlags(int)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "flags must be zero or more of COMPUTE_MAXS and COMPUTE_FRAMES",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.ClassWriter#hasFlags(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "Returns true if all the given flags were passed to the constructor.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassWriter#hasFlags(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "The method checks if specific flags, or more, were passed to the constructor.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassWriter#hasFlags(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "public boolean hasFlags(final int flags) { return (this.flags & flags) == flags; }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.ClassWriter#visit(int,int,String,String,String,String[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "visit method implementation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ClassWriter#visit(int,int,String,String,String,String[])",
            "head_type": "method",
            "relation": "have",
            "tail": "visit method implementation sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "visit method implementation sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "visit method implementation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ClassWriter#visit(int,int,String,String,String,String[])",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.ClassWriter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.ClassWriter",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "visit method implementation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ClassWriter",
            "head_type": "class",
            "relation": "have",
            "tail": "visit method implementation sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.ClassWriter#visitSource(String,String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "visitSource",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ClassWriter#visitSource(String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "visitSourceSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "visitSourceSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "visitSourceCodeContent",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.ClassWriter#visitModule(String,int,String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "visitModule",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ClassWriter#visitModule(String,int,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "ModuleVisitor visitModule(String name, int access, String version)",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.ClassWriter#visitModule(String,int,String)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.ClassWriter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.ClassWriter#visitModule(String,int,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassWriter#visitModule(String,int,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassWriter#visitNestHost(String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "visitNestHost",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ClassWriter#visitNestHost(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.asm.ClassWriter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.ClassWriter#visitNestHost(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "visitNestHost(String) sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "visitNestHost(String) sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.asm.ClassWriter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.ClassWriter#visitNestHost(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassWriter#visitNestHost(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassWriter#visitOuterClass(String,String,String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "visitOuterClass",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ClassWriter#visitOuterClass(String,String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "visitOuterClassSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "visitOuterClassSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "visitOuterClassSampleCodeContent",
            "tail_type": "useSampleCodeContent"
        },
        {
            "head": "org.springframework.asm.ClassWriter#visitAnnotation(String,boolean)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "visitAnnotation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ClassWriter#visitAnnotation(String,boolean)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.ClassWriter",
            "tail_type": "class"
        },
        {
            "head": "visitAnnotation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "visitAnnotation sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "visitAnnotation sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "Complete visitAnnotation example",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.ClassWriter#visitTypeAnnotation(int,TypePath,String,boolean)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "visitTypeAnnotation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ClassWriter#visitTypeAnnotation(int,TypePath,String,boolean)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.ClassWriter",
            "tail_type": "class"
        },
        {
            "head": "visitTypeAnnotation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "visitTypeAnnotationSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "visitTypeAnnotationSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "visitTypeAnnotationSampleCodeContent",
            "tail_type": "useSampleCodeContent"
        },
        {
            "head": "org.springframework.asm.ClassWriter#visitAttribute(Attribute)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "visitAttribute",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ClassWriter#visitAttribute(Attribute)",
            "head_type": "method",
            "relation": "have",
            "tail": "visitAttribute(Attribute) sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "visitAttribute(Attribute) sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.asm.ClassWriter#visitAttribute(Attribute) code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.ClassWriter#visitNestMember(String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "visitNestMember",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ClassWriter#visitNestMember(String)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.ClassWriter",
            "tail_type": "class"
        },
        {
            "head": "visitNestMember",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "visitNestMember(String) Sample Code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "visitNestMember(String) Sample Code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "Complete Java Example for visitNestMember(String)",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.ClassWriter#visitPermittedSubclass(String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "visitPermittedSubclass",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ClassWriter#visitPermittedSubclass(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "visitPermittedSubclass sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "visitPermittedSubclass sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.asm.ClassWriter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.ClassWriter#visitInnerClass(String,String,String,int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "visitInnerClass",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ClassWriter#visitInnerClass(String,String,String,int)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "JVMS constraints on CONSTANT_Class_info entries",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.ClassWriter#visitInnerClass(String,String,String,int)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "Adding inner class information to the constant pool",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.ClassWriter#visitInnerClass(String,String,String,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "Sample code for adding an inner class to the constant pool",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.ClassWriter#visitInnerClass(String,String,String,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "Explanation of JVMS Section 4.7.6",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassWriter#visitInnerClass(String,String,String,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "Design principles behind avoiding duplicate inner class entries",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassWriter",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.ClassWriter#visitInnerClass(String,String,String,int)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.ClassWriter#visitRecordComponent(String,String,String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "visitRecordComponent",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ClassWriter#visitRecordComponent(String,String,String)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "RecordComponentWriter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.ClassWriter#visitRecordComponent(String,String,String)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "symbolTable",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.ClassWriter#visitRecordComponent(String,String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "record component visiting",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassWriter#visitRecordComponent(String,String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle for visiting record components",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassWriter#visitRecordComponent(String,String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for visiting record components",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.ClassWriter#visitField(int,String,String,String,Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "visitField",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ClassWriter#visitField(int,String,String,String,Object)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.FieldVisitor",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.ClassWriter#visitField(int,String,String,String,Object)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.ClassWriter",
            "tail_type": "class"
        },
        {
            "head": "visitField",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "org.springframework.asm.ClassWriter#visitField(int,String,String,String,Object)",
            "tail_type": "useSampleCode"
        },
        {
            "head": "visitField",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "org.springframework.asm.ClassWriter",
            "tail_type": "class"
        },
        {
            "head": "visitField",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "org.springframework.asm.FieldVisitor",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.ClassWriter#visitField(int,String,String,String,Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.asm.ClassWriter#visitField(int,String,String,String,Object)",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.ClassWriter#visitMethod(int,String,String,String,String[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "visitMethod",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ClassWriter#visitMethod(int,String,String,String,String[])",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.MethodVisitor",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.ClassWriter#visitMethod(int,String,String,String,String[])",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.MethodWriter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.ClassWriter#visitMethod(int,String,String,String,String[])",
            "head_type": "method",
            "relation": "have",
            "tail": "visitMethod sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "visitMethod sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.asm.ClassWriter#visitMethod(int,String,String,String,String[]) sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.ClassWriter#visitEnd()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "completingClassWriting",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ClassWriter#visitEnd()",
            "head_type": "method",
            "relation": "have",
            "tail": "No specific action required for method completion",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.ClassWriter#visitEnd()",
            "head_type": "method",
            "relation": "have",
            "tail": "This method is used to indicate the end of the class writing process.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassWriter#visitEnd()",
            "head_type": "method",
            "relation": "have",
            "tail": "The method follows a straightforward design principle where it performs no action, which can be indicative of a placeholder or a no-op method in the context of class writing.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassWriter",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.ClassWriter#visitEnd()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.ClassWriter#toByteArray()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "class file generation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ClassWriter#toByteArray()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "constant pool size limit",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.ClassWriter#toByteArray()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "method code size limit",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.ClassWriter#toByteArray()",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "class file structure creation",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.ClassWriter#toByteArray()",
            "head_type": "method",
            "relation": "have",
            "tail": "class file structure creation sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.ClassWriter#toByteArray()",
            "head_type": "method",
            "relation": "have",
            "tail": "JVMS ClassFile structure",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassWriter#toByteArray()",
            "head_type": "method",
            "relation": "have",
            "tail": "class file generation design principles",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "class file generation",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "org.springframework.asm.ClassWriter",
            "tail_type": "class"
        },
        {
            "head": "constant pool size limit",
            "head_type": "useConstraint",
            "relation": "associated_with",
            "tail": "org.springframework.asm.ClassWriter",
            "tail_type": "class"
        },
        {
            "head": "method code size limit",
            "head_type": "useConstraint",
            "relation": "associated_with",
            "tail": "org.springframework.asm.ClassWriter",
            "tail_type": "class"
        },
        {
            "head": "class file structure creation",
            "head_type": "useScenario",
            "relation": "associated_with",
            "tail": "org.springframework.asm.ClassWriter",
            "tail_type": "class"
        },
        {
            "head": "JVMS ClassFile structure",
            "head_type": "relatedConceptInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.asm.ClassWriter",
            "tail_type": "class"
        },
        {
            "head": "class file generation design principles",
            "head_type": "designPrincipleInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.asm.ClassWriter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.ClassWriter#replaceAsmInstructions(byte[],boolean)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "replaceAsmInstructions",
            "tail_type": "apiFunction"
        },
        {
            "head": "replaceAsmInstructions",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "org.springframework.asm.ClassWriter",
            "tail_type": "class"
        },
        {
            "head": "replaceAsmInstructions",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "replaceAsmInstructions",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "replaceAsmInstructions",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassWriter",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.ClassReader",
            "tail_type": "class"
        },
        {
            "head": "replaceAsmInstructions",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "classFileConstraint",
            "tail_type": "useConstraint"
        },
        {
            "head": "replaceAsmInstructions",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "hasFramesConstraint",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.ClassWriter#getAttributePrototypes()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getAttributePrototypes",
            "tail_type": "apiFunction"
        },
        {
            "head": "getAttributePrototypes",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Returns the prototypes of the attributes used by this class, its fields and its methods.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassWriter#getAttributePrototypes()",
            "head_type": "method",
            "relation": "have",
            "tail": "Returns the prototypes of the attributes used by this class, its fields and its methods.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassWriter#getAttributePrototypes()",
            "head_type": "method",
            "relation": "have",
            "tail": "private Attribute[] getAttributePrototypes() {\n    Attribute.Set attributePrototypes = new Attribute.Set();\n    attributePrototypes.addAttributes(firstAttribute);\n    FieldWriter fieldWriter = firstField;\n    while (fieldWriter != null) {\n        fieldWriter.collectAttributePrototypes(attributePrototypes);\n        fieldWriter = (FieldWriter) fieldWriter.fv;\n    }\n    MethodWriter methodWriter = firstMethod;\n    while (methodWriter != null) {\n        methodWriter.collectAttributePrototypes(attributePrototypes);\n        methodWriter = (MethodWriter) methodWriter.mv;\n    }\n    RecordComponentWriter recordComponentWriter = firstRecordComponent;\n    while (recordComponentWriter != null) {\n        recordComponentWriter.collectAttributePrototypes(attributePrototypes);\n        recordComponentWriter = (RecordComponentWriter) recordComponentWriter.delegate;\n    }\n    return attributePrototypes.toArray();\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newConst(Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "adding a constant to the constant pool",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newConst(Object)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "value must be an Integer, Float, Long, Double, or String",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newConst(Object)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "Attribute subclasses adding constants to the constant pool",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newConst(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for adding a constant to the constant pool",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newConst(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation for constant pool management",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newConst(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation for constant pool management",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newConst(Object)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.ClassWriter",
            "tail_type": "class"
        },
        {
            "head": "adding a constant to the constant pool",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "sample code for adding a constant to the constant pool",
            "tail_type": "useSampleCode"
        },
        {
            "head": "adding a constant to the constant pool",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "related concept interpretation for constant pool management",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "adding a constant to the constant pool",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "design principle interpretation for constant pool management",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newUTF8(String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Adds an UTF8 string to the constant pool",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newUTF8(String)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "Constant pool already contains a similar item",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newUTF8(String)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "Attribute sub classes",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newUTF8(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "public int newUTF8(final String value) { return symbolTable.addConstantUtf8(value); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newUTF8(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "This method is intended for Attribute sub classes, and is normally not needed by class generators or adapters.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newUTF8(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "Design principle: Maintain backward binary compatibility.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newUTF8(String)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.ClassWriter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newClass(String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Adds a class reference to the constant pool",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newClass(String)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "constant pool already contains a similar item",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newClass(String)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "Attribute sub classes",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newClass(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "This method is intended for Attribute sub classes, and is normally not needed by class generators or adapters.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newClass(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "public int newClass(final String value) { return symbolTable.addConstantClass(value).index; }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newClass(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "This method is designed to manage class references in the constant pool, ensuring that references are unique and efficiently managed.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newClass(String)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Attribute",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newMethodType(String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Adds a method type reference to the constant pool",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newMethodType(String)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "constant pool already contains a similar item",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newMethodType(String)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "Attribute sub classes",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newMethodType(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "public int newMethodType(final String methodDescriptor) { return symbolTable.addConstantMethodType(methodDescriptor).index; }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newMethodType(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "This method is intended for Attribute sub classes, and is normally not needed by class generators or adapters.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newMethodType(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "Design principle: Efficiency and Optimization",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newMethodType(String)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.ClassWriter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newModule(String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Adds a module reference to the constant pool",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newModule(String)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "constant pool already contains a similar item",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newModule(String)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "Attribute sub classes",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newModule(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "public int newModule(final String moduleName) { return symbolTable.addConstantModule(moduleName).index; }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newModule(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "This method is intended for Attribute sub classes, and is normally not needed by class generators or adapters.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newModule(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "Design principle: Efficiency and Specificity - The method is designed to be efficient by avoiding unnecessary actions if the constant pool already contains a similar item. It also demonstrates specificity by being intended for Attribute subclasses, indicating a targeted use case within the class generation or adaptation process.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newModule(String)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.ClassWriter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.ClassWriter",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "Adding module references to the constant pool",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newPackage(String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Adding a package reference to the constant pool",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newPackage(String)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "Intended for Attribute subclasses",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newPackage(String)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "Class generators or adapters",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newPackage(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "Sample code for adding a package reference",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newPackage(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "Detailed explanation of related concepts",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newPackage(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "Design principles behind the method",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newPackage(String)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.ClassWriter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newHandle(int,String,String,String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Adds a handle to the constant pool",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newHandle(int,String,String,String)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "constant pool already contains a similar item",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newHandle(int,String,String,String)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "Attribute subclasses",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newHandle(int,String,String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.asm.ClassWriter#newHandle(int, String, String, String, boolean)",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newHandle(int,String,String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "This method is intended for Attribute subclasses, and is normally not needed by class generators or adapters.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newHandle(int,String,String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "The method is deprecated and superseded by another method that includes a boolean parameter to indicate if the handle is for an interface method.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newHandle(int,String,String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "public int newHandle(final int tag, final String owner, final String name, final String descriptor) {\n    return newHandle(tag, owner, name, descriptor, tag == Opcodes.H_INVOKEINTERFACE);\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newHandle(int,String,String,String,boolean)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Adding a handle to the constant pool",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newHandle(int,String,String,String,boolean)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "Constant pool already contains a similar item",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newHandle(int,String,String,String,boolean)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "Attribute subclasses",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newHandle(int,String,String,String,boolean)",
            "head_type": "method",
            "relation": "have",
            "tail": "Sample Code for Adding a Handle",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newHandle(int,String,String,String,boolean)",
            "head_type": "method",
            "relation": "have",
            "tail": "Detailed Explanation of Related Concepts",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newHandle(int,String,String,String,boolean)",
            "head_type": "method",
            "relation": "have",
            "tail": "Design Principles of the Method",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newHandle(int,String,String,String,boolean)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.ClassWriter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newConstantDynamic(String,String,Handle,Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "adding a dynamic constant reference",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newConstantDynamic(String,String,Handle,Object)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "constant pool already contains a similar item",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newConstantDynamic(String,String,Handle,Object)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "Attribute subclasses",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newConstantDynamic(String,String,Handle,Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.asm.ClassWriter#newConstantDynamic(String,String,Handle,Object) sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newConstantDynamic(String,String,Handle,Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation for dynamic constant reference",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newConstantDynamic(String,String,Handle,Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation for dynamic constant reference",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassWriter",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.ClassWriter#newConstantDynamic(String,String,Handle,Object)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newInvokeDynamic(String,String,Handle,Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "adding invokedynamic reference",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newInvokeDynamic(String,String,Handle,Object)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "constant pool already contains a similar item",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newInvokeDynamic(String,String,Handle,Object)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "Attribute subclasses",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newInvokeDynamic(String,String,Handle,Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.asm.ClassWriter#newInvokeDynamic(String,String,Handle,Object) sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newInvokeDynamic(String,String,Handle,Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation for org.springframework.asm.ClassWriter#newInvokeDynamic(String,String,Handle,Object)",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newInvokeDynamic(String,String,Handle,Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation for org.springframework.asm.ClassWriter#newInvokeDynamic(String,String,Handle,Object)",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassWriter",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.ClassWriter#newInvokeDynamic(String,String,Handle,Object)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newField(String,String,String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Adds a field reference to the constant pool",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newField(String,String,String)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "constant pool already contains a similar item",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newField(String,String,String)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "Attribute sub classes",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newField(String,String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "This method is intended for Attribute sub classes, and is normally not needed by class generators or adapters",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newField(String,String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "public int newField(final String owner, final String name, final String descriptor) { return symbolTable.addConstantFieldref(owner, name, descriptor).index; }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newField(String,String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "This method is intended for Attribute sub classes, and is normally not needed by class generators or adapters",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newField(String,String,String)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Type",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newField(String,String,String)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Attribute",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newMethod(String,String,String,boolean)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "add a method reference to the constant pool",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newMethod(String,String,String,boolean)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "constant pool already contains a similar item",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newMethod(String,String,String,boolean)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "Attribute sub classes",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newMethod(String,String,String,boolean)",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for adding method reference",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newMethod(String,String,String,boolean)",
            "head_type": "method",
            "relation": "have",
            "tail": "explanation of method reference",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newMethod(String,String,String,boolean)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle of method reference addition",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newMethod(String,String,String,boolean)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.ClassWriter",
            "tail_type": "class"
        },
        {
            "head": "add a method reference to the constant pool",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "sample code for adding method reference",
            "tail_type": "useSampleCode"
        },
        {
            "head": "add a method reference to the constant pool",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "explanation of method reference",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "add a method reference to the constant pool",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "design principle of method reference addition",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "constant pool already contains a similar item",
            "head_type": "useConstraint",
            "relation": "have",
            "tail": "explanation of method reference",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "Attribute sub classes",
            "head_type": "useScenario",
            "relation": "have",
            "tail": "sample code for adding method reference",
            "tail_type": "useSampleCode"
        },
        {
            "head": "Attribute sub classes",
            "head_type": "useScenario",
            "relation": "have",
            "tail": "explanation of method reference",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "Attribute sub classes",
            "head_type": "useScenario",
            "relation": "have",
            "tail": "design principle of method reference addition",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newNameType(String,String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "adding a name and type to the constant pool",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newNameType(String,String)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "constant pool already contains a similar item",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newNameType(String,String)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "Attribute sub classes",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newNameType(String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for adding a name and type to the constant pool",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newNameType(String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "interpretation of related concepts about the constant pool",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newNameType(String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation for adding a name and type to the constant pool",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassWriter#newNameType(String,String)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Attribute",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.ClassWriter#setFlags(int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "changing computation strategy of method properties",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ClassWriter#setFlags(int)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "flags must be zero or more of COMPUTE_MAXS and COMPUTE_FRAMES",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.ClassWriter#setFlags(int)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "modifying default behavior of the class",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.ClassWriter#setFlags(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for using setFlags method",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.ClassWriter#setFlags(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation for method behavior change",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassWriter#setFlags(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation for method visitor behavior",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassWriter",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.ClassWriter#setFlags(int)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.ClassWriter#getCommonSuperClass(String,String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "compute common super classes",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ClassWriter#getCommonSuperClass(String,String)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "must load classes",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.ClassWriter#getCommonSuperClass(String,String)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "stack map frames computation",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.ClassWriter#getCommonSuperClass(String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code provided",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.ClassWriter#getCommonSuperClass(String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation provided",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassWriter#getCommonSuperClass(String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation provided",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassWriter",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.ClassWriter#getCommonSuperClass(String,String)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.ClassWriter#getClassLoader()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "get ClassLoader",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ClassWriter#getClassLoader()",
            "head_type": "method",
            "relation": "have",
            "tail": "get ClassLoader for default implementation",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.ClassWriter#getClassLoader()",
            "head_type": "method",
            "relation": "have",
            "tail": " SPRING PATCH: prefer thread context ClassLoader for application classes",
            "tail_type": "useSampleCode"
        },
        {
            "head": " SPRING PATCH: prefer thread context ClassLoader for application classes",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.asm.ClassWriter#getClassLoader()",
            "tail_type": "method"
        },
        {
            "head": "get ClassLoader for default implementation",
            "head_type": "useScenario",
            "relation": "associated_with",
            "tail": "org.springframework.asm.ClassWriter#getClassLoader()",
            "tail_type": "method"
        },
        {
            "head": "get ClassLoader",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "org.springframework.asm.ClassWriter#getClassLoader()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.ClassWriter#getClassLoader()",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassWriter#getClassLoader()",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxHandlerTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "XML parsing",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxHandlerTests",
            "head_type": "class",
            "relation": "constrained_by",
            "tail": "Namespace constraints",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxHandlerTests",
            "head_type": "class",
            "relation": "applied_to",
            "tail": "Handling different XML features",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxHandlerTests",
            "head_type": "class",
            "relation": "have",
            "tail": "Detailed XML parsing example",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxHandlerTests",
            "head_type": "class",
            "relation": "have",
            "tail": "Explanation of XML parsing concepts",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxHandlerTests",
            "head_type": "class",
            "relation": "have",
            "tail": "Design principles behind XML parsing",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxHandlerTests",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "AbstractStaxHandler",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxHandlerTests#createXMLReader()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "XML Reading",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxHandlerTests#createXMLReader()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "Namespace Awareness",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxHandlerTests#createXMLReader()",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "Testing Setup",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxHandlerTests#createXMLReader()",
            "head_type": "method",
            "relation": "have",
            "tail": "Sample Code for XML Reader Creation",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxHandlerTests#createXMLReader()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "SAXParser",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxHandlerTests#createXMLReader()",
            "head_type": "method",
            "relation": "have",
            "tail": "Explanation of XML Parsing",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxHandlerTests#createXMLReader()",
            "head_type": "method",
            "relation": "have",
            "tail": "Design Principles of XML Handling",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxHandlerTests#noNamespacePrefixes()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "xml parsing",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxHandlerTests#noNamespacePrefixes()",
            "head_type": "method",
            "relation": "have",
            "tail": "xml parsing sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "xml parsing sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "xml parsing",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxHandlerTests#noNamespacePrefixes()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.AbstractStaxHandler",
            "tail_type": "class"
        },
        {
            "head": "xml parsing",
            "head_type": "apiFunction",
            "relation": "relatedConceptInterpretation",
            "tail": "XML parsing involves converting XML data into a structured format that can be processed by an application. SAX (Simple API for XML) is an event-driven online algorithm for parsing XML documents, where you only need to keep a small part of the data in memory at any given time.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "xml parsing",
            "head_type": "apiFunction",
            "relation": "designPrincipleInterpretation",
            "tail": "XML parsing should be efficient and memory-friendly, especially for large XML files. SAX is preferred over DOM for such scenarios as it does not require loading the entire document into memory.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxHandlerTests#namespacePrefixes()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "namespace processing",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxHandlerTests#namespacePrefixes()",
            "head_type": "method",
            "relation": "have",
            "tail": "namespacePrefixes() sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "namespacePrefixes() sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "namespacePrefixes() complete example",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxHandlerTests#noNamespacePrefixesDom()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "xml parsing",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxHandlerTests#noNamespacePrefixesDom()",
            "head_type": "method",
            "relation": "have",
            "tail": "xmlReader.parse(new InputSource(new StringReader(SIMPLE_XML)))",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxHandlerTests#noNamespacePrefixesDom()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.AbstractStaxHandler",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxHandlerTests#noNamespacePrefixesDom()",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxHandlerTests#noNamespacePrefixesDom()",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxHandlerTests#namespacePrefixesDom()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "namespaceAwareness",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxHandlerTests#namespacePrefixesDom()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "xmlParsing",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxHandlerTests#namespacePrefixesDom()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "xmlContentComparison",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxHandlerTests#namespacePrefixesDom()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "namespaceAwarenessRequirement",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxHandlerTests#namespacePrefixesDom()",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "xmlNamespaceHandling",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxHandlerTests#namespacePrefixesDom()",
            "head_type": "method",
            "relation": "have",
            "tail": "xmlNamespaceHandlingSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxHandlerTests#namespacePrefixesDom()",
            "head_type": "method",
            "relation": "have",
            "tail": "xmlNamespaceHandlingConcept",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxHandlerTests#namespacePrefixesDom()",
            "head_type": "method",
            "relation": "have",
            "tail": "xmlNamespaceHandlingDesignPrinciple",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxHandlerTests#namespacePrefixesDom()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.AbstractStaxHandler",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxHandlerTests#createStaxHandler(Result)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "createStaxHandler",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxHandlerTests#createStaxHandler(Result)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.AbstractStaxHandler",
            "tail_type": "class"
        },
        {
            "head": "createStaxHandler",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "protected abstract AbstractStaxHandler createStaxHandler(Result result) throws XMLStreamException;",
            "tail_type": "useSampleCode"
        },
        {
            "head": "createStaxHandler",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "This method is used to create an instance of AbstractStaxHandler, which is responsible for handling XML parsing tasks. It takes a Result object as a parameter, which specifies where the parsed XML should be stored or processed.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "createStaxHandler",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "The design principle behind this method is to provide a flexible and abstract way to handle XML parsing. By using an abstract class and allowing subclasses to implement the specific parsing logic, the code can be reused and extended easily.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.ConstantDynamic",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "runtime constant value computation",
            "tail_type": "apiFunction"
        },
        {
            "head": "runtime constant value computation",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "field descriptor requirement",
            "tail_type": "useConstraint"
        },
        {
            "head": "runtime constant value computation",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "arbitrary constant name usage",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.ConstantDynamic",
            "head_type": "class",
            "relation": "have",
            "tail": "field descriptor requirement",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.ConstantDynamic",
            "head_type": "class",
            "relation": "have",
            "tail": "arbitrary constant name usage",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.ConstantDynamic",
            "head_type": "class",
            "relation": "have",
            "tail": "bootstrap method usage",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.ConstantDynamic",
            "head_type": "class",
            "relation": "have",
            "tail": "runtime constant value computation explanation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.ConstantDynamic",
            "head_type": "class",
            "relation": "have",
            "tail": "design principle for runtime computation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.ConstantDynamic#getName()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getName",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ConstantDynamic#getName()",
            "head_type": "method",
            "relation": "have",
            "tail": "Returns the name of this constant.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.ConstantDynamic#getName()",
            "head_type": "method",
            "relation": "have",
            "tail": "public String getName() { return name; }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.ConstantDynamic#getDescriptor()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getDescriptor",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ConstantDynamic#getDescriptor()",
            "head_type": "method",
            "relation": "have",
            "tail": "Returns the type of this constant, as a field descriptor.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.ConstantDynamic#getDescriptor()",
            "head_type": "method",
            "relation": "have",
            "tail": "public String getDescriptor() { return descriptor; }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.ConstantDynamic#getBootstrapMethod()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getBootstrapMethod",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ConstantDynamic#getBootstrapMethod()",
            "head_type": "method",
            "relation": "have",
            "tail": "Returns the bootstrap method used to compute the value of this constant.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.ConstantDynamic#getBootstrapMethod()",
            "head_type": "method",
            "relation": "have",
            "tail": "The bootstrap method is a crucial part of dynamic constant calculation in Java, allowing for the computation of values at runtime rather than compile time.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.ConstantDynamic#getBootstrapMethod()",
            "head_type": "method",
            "relation": "have",
            "tail": "public Handle getBootstrapMethod() {\n    return bootstrapMethod;\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.ConstantDynamic#getBootstrapMethodArgumentCount()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getBootstrapMethodArgumentCount",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ConstantDynamic#getBootstrapMethodArgumentCount()",
            "head_type": "method",
            "relation": "have",
            "tail": "Returns the number of arguments passed to the bootstrap method, in order to compute the value of this constant.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.ConstantDynamic#getBootstrapMethodArgumentCount()",
            "head_type": "method",
            "relation": "have",
            "tail": "The method returns an integer representing the number of arguments passed to the bootstrap method.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.ConstantDynamic#getBootstrapMethodArgumentCount()",
            "head_type": "method",
            "relation": "have",
            "tail": "public int getBootstrapMethodArgumentCount() {\n    return bootstrapMethodArguments.length;\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.ConstantDynamic#getBootstrapMethodArgument(int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getBootstrapMethodArgument",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ConstantDynamic#getBootstrapMethodArgument(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "getBootstrapMethodArgument useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getBootstrapMethodArgument useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "getBootstrapMethodArgument sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.ConstantDynamic#getBootstrapMethodArgument(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "getBootstrapMethodArgument relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "getBootstrapMethodArgument relatedConceptInterpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "getBootstrapMethodArgument related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.ConstantDynamic#getBootstrapMethodArgument(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "getBootstrapMethodArgument designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "getBootstrapMethodArgument designPrincipleInterpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "have",
            "tail": "getBootstrapMethodArgument design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.ConstantDynamic#getBootstrapMethodArgumentsUnsafe()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getBootstrapMethodArguments",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ConstantDynamic#getBootstrapMethodArgumentsUnsafe()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "arrayImmutability",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.ConstantDynamic#getBootstrapMethodArgumentsUnsafe()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "noUserReturn",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.ConstantDynamic#getBootstrapMethodArgumentsUnsafe()",
            "head_type": "method",
            "relation": "have",
            "tail": "getBootstrapMethodArgumentsSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getBootstrapMethodArgumentsSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.asm.ConstantDynamic",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.ConstantDynamic#getBootstrapMethodArgumentsUnsafe()",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.ConstantDynamic#getBootstrapMethodArgumentsUnsafe()",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.ConstantDynamic#getSize()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getSize",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ConstantDynamic#getSize()",
            "head_type": "method",
            "relation": "have",
            "tail": "Returns the size of this constant.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.ConstantDynamic#getSize()",
            "head_type": "method",
            "relation": "have",
            "tail": "The method `getSize()` returns the size of the constant, which is 2 for `long` and `double`, and 1 for other types.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.ConstantDynamic#getSize()",
            "head_type": "method",
            "relation": "have",
            "tail": "java\npackage org.springframework.asm;\n\npublic class ConstantDynamic {\n    private String descriptor;\n\n    public int getSize() {\n        char firstCharOfDescriptor = descriptor.charAt(0);\n        return (firstCharOfDescriptor == 'J' || firstCharOfDescriptor == 'D') ? 2 : 1;\n    }\n}\n",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.ConstantDynamic#equals(Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "equals",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ConstantDynamic#equals(Object)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "object instance of ConstantDynamic",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.ConstantDynamic#equals(Object)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "object comparison",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.ConstantDynamic#equals(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.asm.ConstantDynamic#equals(Object) sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.ConstantDynamic#equals(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation for org.springframework.asm.ConstantDynamic#equals(Object)",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.ConstantDynamic#equals(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation for org.springframework.asm.ConstantDynamic#equals(Object)",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.ConstantDynamic#equals(Object)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.ConstantDynamic",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.ConstantDynamic#hashCode()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "hashCode",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ConstantDynamic#hashCode()",
            "head_type": "method",
            "relation": "have",
            "tail": "Calculate hash code for ConstantDynamic",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.ConstantDynamic#hashCode()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.ConstantDynamic",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.ConstantDynamic#toString()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "toString()",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ConstantDynamic#toString()",
            "head_type": "method",
            "relation": "have",
            "tail": "Converts the ConstantDynamic to a string representation.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.ConstantDynamic#toString()",
            "head_type": "method",
            "relation": "have",
            "tail": "public String toString() { return name + \" : \" + descriptor + ' ' + bootstrapMethod + ' ' + Arrays.toString(bootstrapMethodArguments); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.ConstantDynamic#toString()",
            "head_type": "method",
            "relation": "have",
            "tail": "This method is used to provide a string representation of the ConstantDynamic object, which includes the name, descriptor, bootstrap method, and bootstrap method arguments.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "XML parsing",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests",
            "head_type": "class",
            "relation": "constrained_by",
            "tail": "Namespace awareness",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests",
            "head_type": "class",
            "relation": "applied_to",
            "tail": "Testing different XML features",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests",
            "head_type": "class",
            "relation": "have",
            "tail": "Sample XML parsing code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests",
            "head_type": "class",
            "relation": "have",
            "tail": "Explanation of XML parsing concepts",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests",
            "head_type": "class",
            "relation": "have",
            "tail": "Design principles behind XML parsing",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "XML parsing",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.AbstractStaxXMLReaderTests",
            "tail_type": "class"
        }
    ]
}