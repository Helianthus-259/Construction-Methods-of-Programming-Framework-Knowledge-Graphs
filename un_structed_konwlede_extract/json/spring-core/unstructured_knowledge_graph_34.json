{
    "relationships": [
        {
            "head": "org.springframework.cglib.core.CodeEmitter#isStaticHook()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "check if the method is static",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#isStaticHook()",
            "head_type": "method",
            "relation": "have",
            "tail": "public boolean isStaticHook() {\n    return false;\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#isStaticHook()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#getSignature()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getSignature",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#getSignature()",
            "head_type": "method",
            "relation": "have",
            "tail": "getSignature returns the signature of the current state",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter#getSignature()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#getSignature()",
            "head_type": "method",
            "relation": "have",
            "tail": "public Signature getSignature() {\n    return state.sig;\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#getReturnType()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getReturnType",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#getReturnType()",
            "head_type": "method",
            "relation": "have",
            "tail": "getReturnType sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getReturnType sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "public Type getReturnType() {\n    return state.sig.getReturnType();\n}",
            "tail_type": "code"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#getMethodInfo()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getMethodInfo",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#getMethodInfo()",
            "head_type": "method",
            "relation": "have",
            "tail": "public MethodInfo getMethodInfo() { return state; }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getMethodInfo",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getMethodInfo",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#getClassEmitter()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getClassEmitter",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#getClassEmitter()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.ClassEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#getClassEmitter()",
            "head_type": "method",
            "relation": "have",
            "tail": "public ClassEmitter getClassEmitter() { return ce; }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#end_method()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "end_method",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#end_method()",
            "head_type": "method",
            "relation": "have",
            "tail": "public void end_method() { visitMaxs(0, 0); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "end_method",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter",
            "head_type": "class",
            "relation": "have",
            "tail": "org.springframework.cglib.core.CodeEmitter#end_method()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#begin_block()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "begin_block",
            "tail_type": "apiFunction"
        },
        {
            "head": "begin_block",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "begin_block() returns a new Block object",
            "tail_type": "useSampleCode"
        },
        {
            "head": "begin_block() returns a new Block object",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "Block class",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#catch_exception(Block,Type)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "catch_exception",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#catch_exception(Block,Type)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "block must have an end set",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#catch_exception(Block,Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "public void catch_exception(Block block, Type exception) {\n    if (block.getEnd() == null) {\n        throw new IllegalStateException(\"end of block is unset\");\n    }\n    mv.visitTryCatchBlock(block.getStart(), block.getEnd(), mark(), exception.getInternalName());\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#catch_exception(Block,Type)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "catch_exception",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "exception handling in code generation",
            "tail_type": "useScenario"
        },
        {
            "head": "catch_exception",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "This function is used to handle exceptions within a block of code during the code generation process. It ensures that if an exception occurs, it is properly caught and managed.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "catch_exception",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "The design principle behind this function is to provide a robust mechanism for exception handling in dynamically generated code, ensuring that exceptions do not cause the generated code to fail silently or unpredictably.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#goTo(Label)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "goTo",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#goTo(Label)",
            "head_type": "method",
            "relation": "have",
            "tail": "public void goTo(Label label) { mv.visitJumpInsn(Constants.GOTO, label); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#goTo(Label)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#goTo(Label)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "Label",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#goTo(Label)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "mv",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#goTo(Label)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "Constants.GOTO",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#ifnull(Label)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "conditional branching",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#ifnull(Label)",
            "head_type": "method",
            "relation": "have",
            "tail": "ifnull method generates bytecode for conditional branching based on null check",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#ifnull(Label)",
            "head_type": "method",
            "relation": "have",
            "tail": "used in bytecode generation for handling null conditions",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#ifnull(Label)",
            "head_type": "method",
            "relation": "have",
            "tail": "public void ifnull(Label label) {\n    mv.visitJumpInsn(Constants.IFNULL, label);\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#ifnull(Label)",
            "head_type": "method",
            "relation": "have",
            "tail": "efficient bytecode generation for null checks",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#ifnull(Label)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#ifnonnull(Label)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "conditional branching",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#ifnonnull(Label)",
            "head_type": "method",
            "relation": "have",
            "tail": "used in bytecode manipulation for conditional jumps",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#ifnonnull(Label)",
            "head_type": "method",
            "relation": "have",
            "tail": "ensures that the jump occurs only if the top of the stack is non-null",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#ifnonnull(Label)",
            "head_type": "method",
            "relation": "have",
            "tail": "used in the generation of dynamic proxy classes",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#ifnonnull(Label)",
            "head_type": "method",
            "relation": "have",
            "tail": "public void ifnonnull(Label label) {\n    mv.visitJumpInsn(Constants.IFNONNULL, label);\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#ifnonnull(Label)",
            "head_type": "method",
            "relation": "have",
            "tail": "facilitates the generation of efficient and optimized bytecode",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#if_jump(int,Label)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "conditional branching",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#if_jump(int,Label)",
            "head_type": "method",
            "relation": "have",
            "tail": "used for generating conditional jump instructions in bytecode",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#if_jump(int,Label)",
            "head_type": "method",
            "relation": "have",
            "tail": "facilitates the generation of jump instructions based on a condition",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#if_jump(int,Label)",
            "head_type": "method",
            "relation": "have",
            "tail": "public void if_jump(int mode, Label label) {\n    mv.visitJumpInsn(mode, label);\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#if_icmp(int,Label)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "conditional branching based on integer comparison",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#if_icmp(int,Label)",
            "head_type": "method",
            "relation": "have",
            "tail": "public void if_icmp(int mode, Label label) {\n    if_cmp(Type.INT_TYPE, mode, label);\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#if_icmp(int,Label)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#if_icmp(int,Label)",
            "head_type": "method",
            "relation": "have",
            "tail": "This method is part of the CodeEmitter class in the Spring Framework's CGLIB library, which is used for generating bytecodes. It likely serves as a utility for emitting conditional jump instructions based on integer comparisons in the generated bytecode.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#if_icmp(int,Label)",
            "head_type": "method",
            "relation": "have",
            "tail": "The design principle behind this method likely revolves around providing a flexible and efficient way to generate bytecode instructions for conditional branching. It abstracts the complexity of emitting such instructions, allowing developers to focus on higher-level logic.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#if_cmp(Type,int,Label)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "conditional branching",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#if_cmp(Type,int,Label)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "type compatibility",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#if_cmp(Type,int,Label)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "conditional execution based on comparison",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#if_cmp(Type,int,Label)",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.cglib.core.CodeEmitter#if_cmp(Type,int,Label) sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#if_cmp(Type,int,Label)",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation for conditional branching",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#if_cmp(Type,int,Label)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation for conditional branching",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#if_cmp(Type,int,Label)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#pop()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "pop",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#pop()",
            "head_type": "method",
            "relation": "have",
            "tail": "public void pop() { mv.visitInsn(Constants.POP); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#pop()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#pop2()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "pop2",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#pop2()",
            "head_type": "method",
            "relation": "have",
            "tail": "public void pop2() { mv.visitInsn(Constants.POP2); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#pop2()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#dup()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "duplication",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#dup()",
            "head_type": "method",
            "relation": "have",
            "tail": "public void dup() { mv.visitInsn(Constants.DUP); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#dup()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#dup2()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "duplicateTopTwoStackItems",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#dup2()",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#dup2()",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#dup2()",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#dup2()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#dup_x1()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "duplication_x1",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#dup_x1()",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "duplication_x1",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "org.springframework.cglib.core.CodeEmitter#dup_x1()",
            "tail_type": "method"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.cglib.core.CodeEmitter#dup_x1()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#dup_x2()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "duplicate_x2",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#dup_x2()",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.cglib.core.CodeEmitter#dup_x2()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#dup_x2()",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "relatedConceptInterpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "org.springframework.cglib.core.CodeEmitter#dup_x2()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#dup_x2()",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "designPrincipleInterpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "have",
            "tail": "org.springframework.cglib.core.CodeEmitter#dup_x2()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#dup2_x1()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "duplicate two values and insert them at specific positions",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#dup2_x1()",
            "head_type": "method",
            "relation": "have",
            "tail": "public void dup2_x1() { mv.visitInsn(Constants.DUP2_X1); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#dup2_x1()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#dup2_x1()",
            "head_type": "method",
            "relation": "have",
            "tail": "This method uses the DUP2_X1 instruction of the Java Virtual Machine (JVM) to duplicate the top two stack values and insert them into the stack two positions down.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#dup2_x1()",
            "head_type": "method",
            "relation": "have",
            "tail": "This method is designed to manipulate the stack in a very specific way, duplicating values and reordering them. It is a low-level operation typically used in bytecode manipulation libraries like CGLIB to generate dynamic proxy classes or enhance existing classes at runtime.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#dup2_x2()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "duplicateTwoValuesAndInsertBelow",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#dup2_x2()",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.cglib.core.CodeEmitter#dup2_x2() sample",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#dup2_x2()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#dup2_x2()",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "relatedConceptInterpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "Explanation of related concepts for org.springframework.cglib.core.CodeEmitter#dup2_x2()",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#dup2_x2()",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "designPrincipleInterpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "have",
            "tail": "Design principles of org.springframework.cglib.core.CodeEmitter#dup2_x2()",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#swap()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "swap",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#swap()",
            "head_type": "method",
            "relation": "have",
            "tail": "public void swap() { mv.visitInsn(Constants.SWAP); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "swap",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "public void swap() { mv.visitInsn(Constants.SWAP); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#aconst_null()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "push a null reference onto the stack",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#aconst_null()",
            "head_type": "method",
            "relation": "have",
            "tail": "public void aconst_null() { mv.visitInsn(Constants.ACONST_NULL); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter#aconst_null()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#aconst_null()",
            "head_type": "method",
            "relation": "designPrincipleInterpretation",
            "tail": "This method is designed to follow the principle of simplicity and directness in byte code manipulation. It directly emits an instruction to push a null reference onto the operand stack without additional overhead or complexity.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#swap(Type,Type)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "swap",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#swap(Type,Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "public void swap(Type prev, Type type) {\n    if (type.getSize() == 1) {\n        if (prev.getSize() == 1) {\n            // same as dup_x1(), pop();\n            swap();\n        } else {\n            dup_x2();\n            pop();\n        }\n    } else {\n        if (prev.getSize() == 1) {\n            dup2_x1();\n            pop2();\n        } else {\n            dup2_x2();\n            pop2();\n        }\n    }\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#swap(Type,Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "This method swaps the top two stack elements. It handles different scenarios based on the size of the types involved. If the size of the current type is 1, it performs different operations depending on the size of the previous type. Similarly, if the size of the current type is greater than 1, it performs different operations. This method uses byte code instructions like swap(), dup_x2(), pop(), dup2_x1(), and pop2() to manipulate the stack elements.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#swap(Type,Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "The design principle behind this method is to provide a flexible and efficient way to swap stack elements based on their types and sizes. It ensures that the stack manipulation is done correctly by considering the size of the types involved. This method is a part of the CodeEmitter class, which is responsible for generating byte code. The design principle here is to encapsulate the byte code generation logic and provide utility methods for stack manipulation, making it easier to generate complex byte code structures.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#monitorenter()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "monitor enter",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#monitorenter()",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.cglib.core.CodeEmitter#monitorenter()",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#monitorexit()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "monitor exit",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#monitorexit()",
            "head_type": "method",
            "relation": "have",
            "tail": "public void monitorexit() { mv.visitInsn(Constants.MONITOREXIT); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "monitor exit",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#monitorexit()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "monitor exit",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Used to exit a monitor block in Java bytecode.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "monitor exit",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Ensure that the monitor exit is called only after entering a monitor block.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#math(int,Type)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "mathematical operation emission",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#math(int,Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "emits bytecode for mathematical operations",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#math(int,Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "public void math(int op, Type type) { mv.visitInsn(type.getOpcode(op)); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#math(int,Type)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#array_load(Type)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "array_load",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#array_load(Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "public void array_load(Type type) { mv.visitInsn(type.getOpcode(Constants.IALOAD)); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "array_load",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#array_load(Type)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#array_store(Type)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "array_store",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#array_store(Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "array_store_sample_code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "array_store_sample_code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "array_store_sample_code_content",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#cast_numeric(Type,Type)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "casting numeric types",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#cast_numeric(Type,Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "casting from one primitive numeric type to another",
            "tail_type": "useSampleCode"
        },
        {
            "head": "casting from one primitive numeric type to another",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#cast_numeric(Type,Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#cast_numeric(Type,Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#push(int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "pushing integer onto stack",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#push(int)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "integer value range",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#push(int)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "bytecode manipulation",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#push(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "public void push(int i) { if (i < -1) { mv.visitLdcInsn(i); } else if (i <= 5) { mv.visitInsn(TypeUtils.ICONST(i)); } else if (i <= Byte.MAX_VALUE) { mv.visitIntInsn(Constants.BIPUSH, i); } else if (i <= Short.MAX_VALUE) { mv.visitIntInsn(Constants.SIPUSH, i); } else { mv.visitLdcInsn(i); } }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#push(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#push(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#push(int)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#push(long)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "pushing a long value",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#push(long)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "value must be a long",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#push(long)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "emitting bytecode for long values",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#push(long)",
            "head_type": "method",
            "relation": "have",
            "tail": "public void push(long value) {\n    if (value == 0L || value == 1L) {\n        mv.visitInsn(TypeUtils.LCONST(value));\n    } else {\n        mv.visitLdcInsn(value);\n    }\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#push(long)",
            "head_type": "method",
            "relation": "have",
            "tail": "This method is used to push a long value onto the stack. If the value is 0 or 1, it uses the LCONST instruction, otherwise, it uses the LDC instruction.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#push(long)",
            "head_type": "method",
            "relation": "have",
            "tail": "This method is designed to efficiently handle the emission of bytecode for pushing long values onto the stack, optimizing for common values like 0 and 1.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#push(float)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "push float value",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#push(float)",
            "head_type": "method",
            "relation": "have",
            "tail": "public void push(float value) {\n    if (value == 0f || value == 1f || value == 2f) {\n        mv.visitInsn(TypeUtils.FCONST(value));\n    } else {\n        mv.visitLdcInsn(value);\n    }\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#push(float)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#push(double)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "pushing a double value onto the stack",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#push(double)",
            "head_type": "method",
            "relation": "have",
            "tail": "public void push(double value) {\n    if (value == 0d || value == 1d) {\n        mv.visitInsn(TypeUtils.DCONST(value));\n    } else {\n        mv.visitLdcInsn(value);\n    }\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#push(double)",
            "head_type": "method",
            "relation": "have",
            "tail": "This method is used to push a double value onto the stack. It optimizes the process by directly loading constants 0d and 1d using `DCONST` instructions, which are more efficient than using `visitLdcInsn`. For other values, it uses `visitLdcInsn` to load the double onto the stack.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#push(double)",
            "head_type": "method",
            "relation": "have",
            "tail": "The design principle behind this method is optimization. By checking if the value is 0d or 1d, it leverages more efficient byte code instructions (`DCONST_0` and `DCONST_1`) to push these common constants onto the stack. This reduces the overhead associated with loading constants through `visitLdcInsn`, which is more general-purpose and thus less efficient for these specific cases.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#push(String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "pushing a string value onto the stack",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#push(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "public void push(String value) { mv.visitLdcInsn(value); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#push(String)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#newarray()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "create new array",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#newarray()",
            "head_type": "method",
            "relation": "have",
            "tail": "public void newarray() {\n    newarray(Constants.TYPE_OBJECT);\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "create new array",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#newarray()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#newarray(Type)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "create new array",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#newarray(Type)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "type must be primitive or reference",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#newarray(Type)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "array creation in bytecode generation",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#newarray(Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "public void newarray(Type type) {\n    if (TypeUtils.isPrimitive(type)) {\n        mv.visitIntInsn(Constants.NEWARRAY, TypeUtils.NEWARRAY(type));\n    } else {\n        emit_type(Constants.ANEWARRAY, type);\n    }\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#newarray(Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#newarray(Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#newarray(Type)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.TypeUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#newarray(Type)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.Constants",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#arraylength()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "array length operation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#arraylength()",
            "head_type": "method",
            "relation": "have",
            "tail": "public void arraylength() {\n    mv.visitInsn(Constants.ARRAYLENGTH);\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "array length operation",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#arraylength()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#load_this()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "load_this",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#load_this()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "TypeUtils.isStatic(state.access)",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#load_this()",
            "head_type": "method",
            "relation": "have",
            "tail": "public void load_this() {\n    if (TypeUtils.isStatic(state.access)) {\n        throw new IllegalStateException(\"no 'this' pointer within static method\");\n    }\n    mv.visitVarInsn(Constants.ALOAD, 0);\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#load_this()",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#load_this()",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#load_args()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "pushing method arguments onto the stack",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#load_args()",
            "head_type": "method",
            "relation": "have",
            "tail": "public void load_args() { load_args(0, state.argumentTypes.length); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#load_args()",
            "head_type": "method",
            "relation": "have",
            "tail": "related to method argument handling",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#load_args()",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle of efficient method argument handling",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#load_arg(int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "push specified argument onto stack",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#load_arg(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "load_local(state.argumentTypes[index], state.localOffset + skipArgs(index))",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#load_arg(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "Pushes the specified argument of the current method onto the stack.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#load_arg(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "Design principle involves efficient manipulation of method arguments and local variables.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#load_args(int,int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "load arguments",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#load_args(int,int)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "zero-based indexing",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#load_args(int,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "load arguments from a specific position",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#load_args(int,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "public void load_args(int fromArg, int count) { int pos = state.localOffset + skipArgs(fromArg); for (int i = 0; i < count; i++) { Type t = state.argumentTypes[fromArg + i]; load_local(t, pos); pos += t.getSize(); } }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#load_args(int,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "related to local variable loading and type management",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#load_args(int,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "designed to efficiently load multiple arguments based on their types and positions",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter#load_args(int,int)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#skipArgs(int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "skip arguments",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#skipArgs(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "Calculate the total size of arguments to be skipped",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#skipArgs(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "private int skipArgs(int numArgs) {\n    int amount = 0;\n    for (int i = 0; i < numArgs; i++) {\n        amount += state.argumentTypes[i].getSize();\n    }\n    return amount;\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#skipArgs(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "Efficiently calculates the size of arguments to skip in a method call",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#load_local(Type,int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "load local variable",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#load_local(Type,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "load local variable sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "load local variable sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "private void load_local(Type t, int pos) {\n    // TODO: make t == null ok?\n    mv.visitVarInsn(t.getOpcode(Constants.ILOAD), pos);\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#store_local(Type,int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "store local variable",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#store_local(Type,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "private void store_local(Type t, int pos) {\n    // TODO: make t == null ok?\n    mv.visitVarInsn(t.getOpcode(Constants.ISTORE), pos);\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "store local variable",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#store_local(Type,int)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#iinc(Local,int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "iinc",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#iinc(Local,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "Increment local variable by a given amount",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#iinc(Local,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "public void iinc(Local local, int amount) {\n    mv.visitIincInsn(local.getIndex(), amount);\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#iinc(Local,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "Utilize MethodVisitor to increment local variable",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#store_local(Local)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "store local variable",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#store_local(Local)",
            "head_type": "method",
            "relation": "have",
            "tail": "store local variable sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "store local variable sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "public void store_local(Local local) {\n    store_local(local.getType(), local.getIndex());\n}",
            "tail_type": "code"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#load_local(Local)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "load local variable",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#load_local(Local)",
            "head_type": "method",
            "relation": "have",
            "tail": "load local variable code sample",
            "tail_type": "useSampleCode"
        },
        {
            "head": "load local variable code sample",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "public void load_local(Local local) {\n    load_local(local.getType(), local.getIndex());\n}",
            "tail_type": "code"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#return_value()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "return_value_emission",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#return_value()",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.cglib.core.CodeEmitter#return_value() sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#return_value()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#return_value() sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.cglib.core.CodeEmitter#return_value() sample code content",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#getfield(String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getfield",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#getfield(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "getfield(String name) { ClassEmitter.FieldInfo info = ce.getFieldInfo(name); int opcode = TypeUtils.isStatic(info.access) ? Constants.GETSTATIC : Constants.GETFIELD; emit_field(opcode, ce.getClassType(), name, info.type); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter#getfield(String)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "field emission",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter",
            "head_type": "class",
            "relation": "have",
            "tail": "emits bytecode instructions for field access",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter",
            "head_type": "class",
            "relation": "have",
            "tail": "design principle of emitting bytecode instructions",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#putfield(String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "field emission",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#putfield(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "emits bytecode for putting a field",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#putfield(String)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.ClassEmitter.FieldInfo",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#putfield(String)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.TypeUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#putfield(String)",
            "head_type": "method",
            "relation": "designPrincipleInterpretation",
            "tail": "This method is designed to emit bytecode instructions for putting a field, adhering to the principles of flexibility and efficiency in bytecode generation.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#super_getfield(String,Type)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "super_getfield",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#super_getfield(String,Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "super_getfield(String,Type) sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "super_getfield(String,Type) sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#super_putfield(String,Type)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "emitting field instructions",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#super_putfield(String,Type)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "emitting field instructions",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "emitting field instructions",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "emitting field instructions",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#super_getstatic(String,Type)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "super_getstatic",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#super_getstatic(String,Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "super_getstatic(String,Type) sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "super_getstatic(String,Type) sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#super_putstatic(String,Type)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "field emission",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#super_putstatic(String,Type)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "field emission",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "emitting static fields",
            "tail_type": "useScenario"
        },
        {
            "head": "emitting static fields",
            "head_type": "useScenario",
            "relation": "have",
            "tail": "public void super_putstatic(String name, Type type) {\n    emit_field(Constants.PUTSTATIC, ce.getSuperType(), name, type);\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "field emission",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "valid super type",
            "tail_type": "useConstraint"
        },
        {
            "head": "field emission",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "related to byte code generation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "field emission",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "design principle of efficient byte code generation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#getfield(Type,String,Type)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getfield",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#getfield(Type,String,Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "public void getfield(Type owner, String name, Type type) {\n    emit_field(Constants.GETFIELD, owner, name, type);\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#putfield(Type,String,Type)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "emitting field instructions",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#putfield(Type,String,Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "public void putfield(Type owner, String name, Type type) {\n    emit_field(Constants.PUTFIELD, owner, name, type);\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "emitting field instructions",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#putfield(Type,String,Type)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#getstatic(Type,String,Type)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getstatic",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#getstatic(Type,String,Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "public void getstatic(Type owner, String name, Type type) { emit_field(Constants.GETSTATIC, owner, name, type); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#putstatic(Type,String,Type)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "emitting field operations",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#putstatic(Type,String,Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "public void putstatic(Type owner, String name, Type type) {\n    emit_field(Constants.PUTSTATIC, owner, name, type);\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "emitting field operations",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "emitting field operations",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter",
            "head_type": "class",
            "relation": "have",
            "tail": "public void putstatic(Type owner, String name, Type type) {\n    emit_field(Constants.PUTSTATIC, owner, name, type);\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#emit_field(int,Type,String,Type)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "emit_field",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#emit_field(int,Type,String,Type)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "package-protected for EmitUtils",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#emit_field(int,Type,String,Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "void emit_field(int opcode, Type ctype, String name, Type ftype) {\n    mv.visitFieldInsn(opcode, ctype.getInternalName(), name, ftype.getDescriptor());\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#emit_field(int,Type,String,Type)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#super_invoke()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "super invocation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#super_invoke()",
            "head_type": "method",
            "relation": "have",
            "tail": "public void super_invoke() {\n    super_invoke(state.sig);\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#super_invoke()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#super_invoke(Signature)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "super invocation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#super_invoke(Signature)",
            "head_type": "method",
            "relation": "have",
            "tail": "emits invokespecial instruction",
            "tail_type": "useSampleCode"
        },
        {
            "head": "emits invokespecial instruction",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#super_invoke(Signature)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter",
            "head_type": "class",
            "relation": "have",
            "tail": "related to Java bytecode manipulation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter",
            "head_type": "class",
            "relation": "have",
            "tail": "design principle of providing a fluent API for bytecode generation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#invoke_constructor(Type)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "constructor invocation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#invoke_constructor(Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.cglib.core.CodeEmitter#invoke_constructor(Type) sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#invoke_constructor(Type) sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#super_invoke_constructor()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "constructor invocation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#super_invoke_constructor()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "constructor invocation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "invokes a constructor on the superclass",
            "tail_type": "useScenario"
        },
        {
            "head": "constructor invocation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "public void super_invoke_constructor() {\n    invoke_constructor(ce.getSuperType());\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "constructor invocation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "This method is used to invoke a constructor on the superclass of the current class.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "constructor invocation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "The design principle behind this method is to provide a way to call superclass constructors from within a subclass, which is a common requirement in object-oriented programming.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#invoke_constructor_this()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "constructor invocation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#invoke_constructor_this()",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.cglib.core.CodeEmitter#invoke_constructor_this() sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#invoke_constructor_this() sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "constructor invocation example",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#emit_invoke(int,Type,Signature,boolean)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "emitting method invocation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#emit_invoke(int,Type,Signature,boolean)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "invalid opcode for constructor invocation",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#emit_invoke(int,Type,Signature,boolean)",
            "head_type": "method",
            "relation": "have",
            "tail": "emitting method invocation sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "emitting method invocation sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.cglib.core.CodeEmitter#emit_invoke(int,Type,Signature,boolean) sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#emit_invoke(int,Type,Signature,boolean)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#invoke_interface(Type,Signature)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "invoke_interface functionality",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#invoke_interface(Type,Signature)",
            "head_type": "method",
            "relation": "have",
            "tail": "invoke_interface sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "invoke_interface functionality",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "org.springframework.cglib.core.CodeEmitter#invoke_interface(Type,Signature)",
            "tail_type": "method"
        },
        {
            "head": "invoke_interface sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.cglib.core.CodeEmitter#invoke_interface(Type,Signature)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#invoke_virtual(Type,Signature)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "invoke_virtual",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#invoke_virtual(Type,Signature)",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.cglib.core.CodeEmitter#invoke_virtual(Type,Signature) useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#invoke_virtual(Type,Signature)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#invoke_virtual(Type,Signature)",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.cglib.core.CodeEmitter#invoke_virtual(Type,Signature) relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#invoke_virtual(Type,Signature)",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.cglib.core.CodeEmitter#invoke_virtual(Type,Signature) designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#invoke_static(Type,Signature)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "invoke_static",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#invoke_static(Type,Signature)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "Deprecated",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#invoke_static(Type,Signature)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#invoke_static(Type,Signature)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#invoke_static(Type,Signature)",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#invoke_static(Type,Signature,boolean)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "invoke_static",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#invoke_static(Type,Signature,boolean)",
            "head_type": "method",
            "relation": "have",
            "tail": "public void invoke_static(Type owner, Signature sig, boolean isInterface) {\n    emit_invoke(Constants.INVOKESTATIC, owner, sig, isInterface);\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#invoke_static(Type,Signature,boolean)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#invoke_static(Type,Signature,boolean)",
            "head_type": "method",
            "relation": "have",
            "tail": "Emit invoke instructions for static methods.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#invoke_static(Type,Signature,boolean)",
            "head_type": "method",
            "relation": "have",
            "tail": "This method emits bytecode instructions to invoke static methods. It uses the INVOKESTATIC opcode and takes the owner type, method signature, and a flag indicating whether the method is an interface method as parameters.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#invoke_virtual_this(Signature)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "invoke virtual method",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#invoke_virtual_this(Signature)",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.cglib.core.CodeEmitter#invoke_virtual_this(Signature) sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#invoke_virtual_this(Signature)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#invoke_virtual_this(Signature)",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.cglib.core.CodeEmitter#invoke_virtual_this(Signature) related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#invoke_virtual_this(Signature)",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.cglib.core.CodeEmitter#invoke_virtual_this(Signature) design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#invoke_static_this(Signature)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "invoke static method",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#invoke_static_this(Signature)",
            "head_type": "method",
            "relation": "have",
            "tail": "public void invoke_static_this(Signature sig) { invoke_static(ce.getClassType(), sig); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#invoke_static_this(Signature)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#invoke_static_this(Signature)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#invoke_static_this(Signature)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#invoke_constructor(Type,Signature)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "constructor invocation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#invoke_constructor(Type,Signature)",
            "head_type": "method",
            "relation": "have",
            "tail": "emits bytecode for invoking a constructor",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#invoke_constructor(Type,Signature)",
            "head_type": "method",
            "relation": "have",
            "tail": "used in dynamic code generation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#invoke_constructor(Type,Signature)",
            "head_type": "method",
            "relation": "have",
            "tail": "public void invoke_constructor(Type type, Signature sig) {\n    emit_invoke(Constants.INVOKESPECIAL, type, sig, false);\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#invoke_constructor_this(Signature)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "constructor invocation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#invoke_constructor_this(Signature)",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.cglib.core.CodeEmitter#invoke_constructor_this(Signature) sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "constructor invocation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "org.springframework.cglib.core.CodeEmitter#invoke_constructor_this(Signature) sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#super_invoke_constructor(Signature)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "invoke constructor",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#super_invoke_constructor(Signature)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#super_invoke_constructor(Signature)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#super_invoke_constructor(Signature)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#super_invoke_constructor(Signature)",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#new_instance_this()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "instance_creation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#new_instance_this()",
            "head_type": "method",
            "relation": "have",
            "tail": "instance_creation_sample_code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "instance_creation_sample_code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "instance_creation_code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#new_instance(Type)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "instance creation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#new_instance(Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#new_instance(Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#new_instance(Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#emit_type(int,Type)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "emit_type",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#emit_type(int,Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "emits bytecode for a given type",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#emit_type(int,Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "used in bytecode generation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#emit_type(int,Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "private void emit_type(int opcode, Type type) {\n    String desc;\n    if (TypeUtils.isArray(type)) {\n        desc = type.getDescriptor();\n    } else {\n        desc = type.getInternalName();\n    }\n    mv.visitTypeInsn(opcode, desc);\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#aaload(int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "aaload functionality",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#aaload(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "aaload sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "aaload sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "aaload functionality",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#aaload()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "array access",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#aaload()",
            "head_type": "method",
            "relation": "have",
            "tail": "aaload() method loads an element from an array",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#aaload()",
            "head_type": "method",
            "relation": "have",
            "tail": "used in bytecode manipulation",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#aaload()",
            "head_type": "method",
            "relation": "have",
            "tail": "public void aaload() { mv.visitInsn(Constants.AALOAD); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter#aaload()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#aastore()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "AASTORE instruction emission",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#aastore()",
            "head_type": "method",
            "relation": "have",
            "tail": "public void aastore() { mv.visitInsn(Constants.AASTORE); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "AASTORE instruction emission",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "public void aastore() { mv.visitInsn(Constants.AASTORE); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#aastore()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "AASTORE instruction emission",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#athrow()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "exceptionHandling",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#athrow()",
            "head_type": "method",
            "relation": "have",
            "tail": "public void athrow() { mv.visitInsn(Constants.ATHROW); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "exceptionHandling",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter",
            "head_type": "class",
            "relation": "have",
            "tail": "org.springframework.cglib.core.CodeEmitter#athrow()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#athrow()",
            "head_type": "method",
            "relation": "designPrincipleInterpretation",
            "tail": "This method is designed to emit bytecode instructions to throw an exception, adhering to the principle of explicit exception handling.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#make_label()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "create a new Label instance",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#make_label()",
            "head_type": "method",
            "relation": "have",
            "tail": "public Label make_label() { return new Label(); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "create a new Label instance",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "public Label make_label() { return new Label(); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#make_local()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "create local variable",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#make_local()",
            "head_type": "method",
            "relation": "have",
            "tail": "public Local make_local() { return make_local(Constants.TYPE_OBJECT); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#make_local()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#make_local(Type)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "create local variable",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#make_local(Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "public Local make_local(Type type) {\n    return new Local(newLocal(type.getSize()), type);\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#make_local(Type)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#checkcast_this()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "checkcast_this",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#checkcast_this()",
            "head_type": "method",
            "relation": "have",
            "tail": "public void checkcast_this() {\n    checkcast(ce.getClassType());\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "checkcast_this",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "public void checkcast_this() {\n    checkcast(ce.getClassType());\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#checkcast(Type)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "type checking and casting",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#checkcast(Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "public void checkcast(Type type) { if (!type.equals(Constants.TYPE_OBJECT)) { emit_type(Constants.CHECKCAST, type); } }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "type checking and casting",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "type must not be equal to Constants.TYPE_OBJECT",
            "tail_type": "useConstraint"
        },
        {
            "head": "type checking and casting",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "casting operations in code generation",
            "tail_type": "useScenario"
        },
        {
            "head": "type checking and casting",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "The method checks if the provided type is not equal to Constants.TYPE_OBJECT before emitting a type cast operation.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "type checking and casting",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "This design principle ensures that unnecessary casting operations are avoided, optimizing the performance of the generated code.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#instance_of(Type)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "type checking",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#instance_of(Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "emits bytecode for type checking",
            "tail_type": "useSampleCode"
        },
        {
            "head": "type checking",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "type must be fully classified",
            "tail_type": "useConstraint"
        },
        {
            "head": "type checking",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "runtime type identification",
            "tail_type": "useScenario"
        },
        {
            "head": "emits bytecode for type checking",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "emits bytecode for type checking",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "emitting INSTANCEOF opcode",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "emits bytecode for type checking",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "design principle of efficient bytecode generation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#instance_of_this()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "instance_of_this",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#instance_of_this()",
            "head_type": "method",
            "relation": "have",
            "tail": "instance_of_this() method implementation",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#instance_of_this()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#instance_of_this()",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation for instance_of_this()",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#instance_of_this()",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation for instance_of_this()",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#process_switch(int[],ProcessSwitchCallback)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "processSwitch",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#process_switch(int[],ProcessSwitchCallback)",
            "head_type": "method",
            "relation": "have",
            "tail": "processSwitchSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "processSwitchSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "Complete process_switch Example",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#process_switch(int[],ProcessSwitchCallback,boolean)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "process switch",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#process_switch(int[],ProcessSwitchCallback,boolean)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "keys to switch must be sorted ascending",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#process_switch(int[],ProcessSwitchCallback,boolean)",
            "head_type": "method",
            "relation": "have",
            "tail": "process switch use sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "process switch use sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "public void process_switch(int[] keys, ProcessSwitchCallback callback, boolean useTable) {\n    if (!isSorted(keys)) {\n        throw new IllegalArgumentException(\"keys to switch must be sorted ascending\");\n    }\n    Label def = make_label();\n    Label end = make_label();\n    try {\n        if (keys.length > 0) {\n            int len = keys.length;\n            int min = keys[0];\n            int max = keys[len - 1];\n            int range = max - min + 1;\n            if (useTable) {\n                Label[] labels = new Label[range];\n                Arrays.fill(labels, def);\n                for (int i = 0; i < len; i++) {\n                    labels[keys[i] - min] = make_label();\n                }\n                mv.visitTableSwitchInsn(min, max, def, labels);\n                for (int i = 0; i < range; i++) {\n                    Label label = labels[i];\n                    if (label != def) {\n                        mark(label);\n                        callback.processCase(i + min, end);\n                    }\n                }\n            } else {\n                Label[] labels = new Label[len];\n                for (int i = 0; i < len; i++) {\n                    labels[i] = make_label();\n                }\n                mv.visitLookupSwitchInsn(def, keys, labels);\n                for (int i = 0; i < len; i++) {\n                    mark(labels[i]);\n                    callback.processCase(keys[i], end);\n                }\n            }\n        }\n        mark(def);\n        callback.processDefault();\n        mark(end);\n    } catch (RuntimeException | Error e) {\n        throw e;\n    } catch (Exception e) {\n        throw new CodeGenerationException(e);\n    }\n}",
            "tail_type": "String"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#process_switch(int[],ProcessSwitchCallback,boolean)",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "related concept interpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "The process_switch method is used to generate bytecode for switch statements. It takes an array of keys, a callback to process each case, and a boolean indicating whether to use a table switch or a lookup switch. The keys must be sorted in ascending order to use the table switch. The method generates labels for each case and uses the visitTableSwitchInsn or visitLookupSwitchInsn method to generate the appropriate bytecode instructions.",
            "tail_type": "String"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#process_switch(int[],ProcessSwitchCallback,boolean)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "design principle interpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "have",
            "tail": "The design principle behind the process_switch method is to provide a flexible and efficient way to generate bytecode for switch statements. It allows for both table and lookup switch instructions, which can optimize the performance of the generated bytecode based on the number and distribution of the case values. The method also ensures that the keys are sorted, which is a requirement for the table switch instruction.",
            "tail_type": "String"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#isSorted(int[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "check if array is sorted",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#isSorted(int[])",
            "head_type": "method",
            "relation": "have",
            "tail": "private static boolean isSorted(int[] keys) {\n    for (int i = 1; i < keys.length; i++) {\n        if (keys[i] < keys[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#isSorted(int[])",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#mark(Label)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "marking a label",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#mark(Label)",
            "head_type": "method",
            "relation": "have",
            "tail": "public void mark(Label label) { mv.visitLabel(label); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#mark(Label)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#mark(Label)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "Label",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#mark()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "marking a label in bytecode",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#mark()",
            "head_type": "method",
            "relation": "have",
            "tail": "Label label = make_label(); mv.visitLabel(label); return label;",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#mark()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#mark()",
            "head_type": "method",
            "relation": "have",
            "tail": "This method is used to mark a position in the bytecode that can be referenced later. It creates a new label, visits it with the method visitor, and returns the label for future reference.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#mark()",
            "head_type": "method",
            "relation": "have",
            "tail": "The design principle behind this method is to provide a simple and efficient way to manage labels in bytecode generation. It encapsulates the complexity of label creation and ensures that labels are properly visited and can be referenced elsewhere in the code.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#push(boolean)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "pushing boolean value",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#push(boolean)",
            "head_type": "method",
            "relation": "have",
            "tail": "public void push(boolean value) {\n    push(value ? 1 : 0);\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#push(boolean)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#not()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "toggleInteger",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#not()",
            "head_type": "method",
            "relation": "have",
            "tail": "toggleIntegerTopOfStack",
            "tail_type": "useSampleCode"
        },
        {
            "head": "toggleIntegerTopOfStack",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#not()",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "relatedConceptInterpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter#not()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#not()",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "designPrincipleInterpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter#not()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#throw_exception(Type,String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "throwing an exception",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#throw_exception(Type,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "public void throw_exception(Type type, String msg) {\n    new_instance(type);\n    dup();\n    push(msg);\n    invoke_constructor(type, CSTRUCT_STRING);\n    athrow();\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#throw_exception(Type,String)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#box(Type)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "box a primitive value",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#box(Type)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "the argument must be a primitive class",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#box(Type)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "replace the primitive value on the top of the stack with the wrapped (Object) equivalent",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#box(Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for boxing a primitive value",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#box(Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation for boxing",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#box(Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation for CodeEmitter",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.CodeEmitter#box(Type)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.CodeEmitter",
            "tail_type": "class"
        }
    ]
}