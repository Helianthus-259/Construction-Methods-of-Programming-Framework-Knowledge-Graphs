{
    "relationships": [
        {
            "head": "org.springframework.util.StringUtilsTests#startsWithIgnoreCase()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "stringComparison",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#startsWithIgnoreCase()",
            "head_type": "method",
            "relation": "have",
            "tail": "caseInsensitiveComparison",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#startsWithIgnoreCase()",
            "head_type": "method",
            "relation": "have",
            "tail": "nullHandling",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#startsWithIgnoreCase()",
            "head_type": "method",
            "relation": "have",
            "tail": "prefixMatching",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#startsWithIgnoreCase()",
            "head_type": "method",
            "relation": "have",
            "tail": "designForReadability",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#startsWithIgnoreCase()",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "completeExample",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#endsWithIgnoreCase()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "stringComparison",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#endsWithIgnoreCase()",
            "head_type": "method",
            "relation": "have",
            "tail": "caseInsensitiveComparison",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#endsWithIgnoreCase()",
            "head_type": "method",
            "relation": "have",
            "tail": "nullHandling",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#endsWithIgnoreCase()",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#endsWithIgnoreCase()",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#endsWithIgnoreCase()",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#endsWithIgnoreCase()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "StringUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#substringMatch()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "string matching",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#substringMatch()",
            "head_type": "method",
            "relation": "have",
            "tail": "case sensitive matching",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#substringMatch()",
            "head_type": "method",
            "relation": "have",
            "tail": "substring comparison",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#substringMatch()",
            "head_type": "method",
            "relation": "have",
            "tail": "boolean result",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#substringMatch()",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.util.StringUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#substringMatch()",
            "head_type": "method",
            "relation": "have",
            "tail": "related to string manipulation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#substringMatch()",
            "head_type": "method",
            "relation": "have",
            "tail": "designed for unit testing string utility methods",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#substringMatch()",
            "head_type": "method",
            "relation": "have",
            "tail": "public void substringMatch() {    assertThat(StringUtils.substringMatch(\"foo\", 0, \"foo\")).isTrue();    assertThat(StringUtils.substringMatch(\"foo\", 1, \"oo\")).isTrue();    assertThat(StringUtils.substringMatch(\"foo\", 2, \"o\")).isTrue();    assertThat(StringUtils.substringMatch(\"foo\", 0, \"fOo\")).isFalse();    assertThat(StringUtils.substringMatch(\"foo\", 1, \"fOo\")).isFalse();    assertThat(StringUtils.substringMatch(\"foo\", 2, \"fOo\")).isFalse();    assertThat(StringUtils.substringMatch(\"foo\", 3, \"fOo\")).isFalse();    assertThat(StringUtils.substringMatch(\"foo\", 1, \"Oo\")).isFalse();    assertThat(StringUtils.substringMatch(\"foo\", 2, \"Oo\")).isFalse();    assertThat(StringUtils.substringMatch(\"foo\", 3, \"Oo\")).isFalse();    assertThat(StringUtils.substringMatch(\"foo\", 2, \"O\")).isFalse();    assertThat(StringUtils.substringMatch(\"foo\", 3, \"O\")).isFalse();}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#countOccurrencesOf()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "countOccurrencesOf",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#countOccurrencesOf()",
            "head_type": "method",
            "relation": "have",
            "tail": "countOccurrencesOf() useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "countOccurrencesOf() useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "countOccurrencesOf() relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "countOccurrencesOf() useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "countOccurrencesOf() designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#countOccurrencesOf()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.StringUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#replace()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "string replacement",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#replace()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "null pattern handling",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#replace()",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "string manipulation",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#replace()",
            "head_type": "method",
            "relation": "have",
            "tail": "string replacement sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#replace()",
            "head_type": "method",
            "relation": "have",
            "tail": "string replacement concept",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#replace()",
            "head_type": "method",
            "relation": "have",
            "tail": "string manipulation design principle",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#replace()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "StringUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#delete()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "delete characters from string",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#delete()",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for deleting characters from a string",
            "tail_type": "useSampleCode"
        },
        {
            "head": "delete characters from string",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "manipulating strings in unit tests",
            "tail_type": "useScenario"
        },
        {
            "head": "delete characters from string",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "case sensitivity of search string",
            "tail_type": "useConstraint"
        },
        {
            "head": "delete characters from string",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "related concept interpretation for string manipulation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "delete characters from string",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "design principle interpretation for string deletion",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#delete()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.StringUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#deleteAny()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "delete characters from a string",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#deleteAny()",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for deleting characters from a string",
            "tail_type": "useSampleCode"
        },
        {
            "head": "delete characters from a string",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "manipulating strings by removing specified characters",
            "tail_type": "useScenario"
        },
        {
            "head": "delete characters from a string",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "characters to delete must be specified",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#deleteAny()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.StringUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.StringUtils",
            "head_type": "class",
            "relation": "have",
            "tail": "utility methods for string manipulation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.StringUtils",
            "head_type": "class",
            "relation": "designPrincipleInterpretation",
            "tail": "provide convenient methods for common string operations",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.StringUtils",
            "head_type": "class",
            "relation": "relatedConceptInterpretation",
            "tail": "string manipulation and validation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#deleteAnyWhitespace()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "delete any whitespace",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#deleteAnyWhitespace()",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for delete any whitespace",
            "tail_type": "useSampleCode"
        },
        {
            "head": "delete any whitespace",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "cleaning whitespace from a string",
            "tail_type": "useScenario"
        },
        {
            "head": "delete any whitespace",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "must provide characters to delete",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#deleteAnyWhitespace()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "StringUtils",
            "tail_type": "class"
        },
        {
            "head": "delete any whitespace",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "related concept interpretation for delete any whitespace",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "delete any whitespace",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "design principle interpretation for delete any whitespace",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#quote()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "quote a string",
            "tail_type": "apiFunction"
        },
        {
            "head": "quote a string",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "add single quotes to a string",
            "tail_type": "useSampleCode"
        },
        {
            "head": "quote a string",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "handle null and empty strings",
            "tail_type": "useSampleCode"
        },
        {
            "head": "add single quotes to a string",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "handle null and empty strings",
            "tail_type": "useSampleCode"
        },
        {
            "head": "quote a string",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "used in tests to verify string manipulation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "quote a string",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "designed to ensure proper string quoting",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#unqualify()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "unqualify a qualified string",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#unqualify()",
            "head_type": "method",
            "relation": "have",
            "tail": "Sample code for unqualifying a string",
            "tail_type": "useSampleCode"
        },
        {
            "head": "unqualify a qualified string",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Sample code for unqualifying a string",
            "tail_type": "useSampleCode"
        },
        {
            "head": "Sample code for unqualifying a string",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.util.StringUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#capitalize()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "stringCapitalization",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#capitalize()",
            "head_type": "method",
            "relation": "have",
            "tail": "stringCapitalizationSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "stringCapitalizationSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.util.StringUtilsTests#capitalize()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#uncapitalize()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "uncapitalize",
            "tail_type": "apiFunction"
        },
        {
            "head": "uncapitalize",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Converts the first character of a string to lowercase",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "uncapitalize",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "package org.springframework.util; import java.util.Locale; public class StringUtils { public static String uncapitalize(String str) { if (str == null || str.isEmpty()) { return str; } return str.substring(0, 1).toLowerCase(Locale.getDefault()) + str.substring(1); } }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#getFilename()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "extract filename",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#getFilename()",
            "head_type": "method",
            "relation": "have",
            "tail": "extract filename from path",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#getFilename()",
            "head_type": "method",
            "relation": "have",
            "tail": "handle null and empty inputs",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#getFilename()",
            "head_type": "method",
            "relation": "have",
            "tail": "return file extension if present",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#getFilename()",
            "head_type": "method",
            "relation": "have",
            "tail": "related to path manipulation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#getFilename()",
            "head_type": "method",
            "relation": "have",
            "tail": "designed to simplify file handling",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#getFilenameExtension()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getFilenameExtension",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#getFilenameExtension()",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.util.StringUtilsTests",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#stripFilenameExtension()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "stripFilenameExtension",
            "tail_type": "apiFunction"
        },
        {
            "head": "stripFilenameExtension",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "completeSampleCode",
            "tail_type": "completeSampleCode"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#cleanPath()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "cleanPath",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#cleanPath()",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.util.StringUtilsTests#cleanPath()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#cleanPath()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.StringUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#pathEquals()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "stringPathComparison",
            "tail_type": "apiFunction"
        },
        {
            "head": "stringPathComparison",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "pathNormalization",
            "tail_type": "useScenario"
        },
        {
            "head": "stringPathComparison",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "stringPathComparison",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "stringPathComparison",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.StringUtilsTests",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.util.StringUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#pathEquals()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.StringUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#concatenateStringArrays()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "concatenateStringArrays",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#concatenateStringArrays()",
            "head_type": "method",
            "relation": "have",
            "tail": "Concatenates string arrays",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#concatenateStringArrays()",
            "head_type": "method",
            "relation": "have",
            "tail": "Check for null or empty arrays",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#concatenateStringArrays()",
            "head_type": "method",
            "relation": "have",
            "tail": "package org.springframework.util;\n\nimport org.junit.jupiter.api.Test;\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class StringUtilsTests {\n\n    @Test\n    void concatenateStringArrays() {\n        String[] input1 = new String[] { \"myString2\" };\n        String[] input2 = new String[] { \"myString1\", \"myString2\" };\n        String[] result = StringUtils.concatenateStringArrays(input1, input2);\n        assertThat(result).hasSize(3);\n        assertThat(result[0]).isEqualTo(\"myString2\");\n        assertThat(result[1]).isEqualTo(\"myString1\");\n        assertThat(result[2]).isEqualTo(\"myString2\");\n        assertThat(StringUtils.concatenateStringArrays(input1, null)).isEqualTo(input1);\n        assertThat(StringUtils.concatenateStringArrays(null, input2)).isEqualTo(input2);\n        assertThat(StringUtils.concatenateStringArrays(null, null)).isNull();\n    }\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#sortStringArray()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "sortStringArray",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#sortStringArray()",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.util.StringUtilsTests#sortStringArray()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#trimArrayElements()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "trimming array elements",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#trimArrayElements()",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.util.StringUtilsTests",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#trimArrayElements()",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#trimArrayElements()",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#trimArrayElements()",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "trimming array elements",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "array manipulation",
            "tail_type": "useScenario"
        },
        {
            "head": "trimming array elements",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "null handling",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.util.StringUtilsTests",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.util.StringUtils",
            "tail_type": "class"
        },
        {
            "head": "relatedConceptInterpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "array manipulation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "designPrincipleInterpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "have",
            "tail": "null safety",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "complete sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#removeDuplicateStrings()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "removeDuplicateStrings",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#removeDuplicateStrings()",
            "head_type": "method",
            "relation": "have",
            "tail": "removeDuplicateStringsSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "removeDuplicateStringsSampleCode",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.util.StringUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#splitArrayElementsIntoProperties()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "splitArrayElementsIntoProperties",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#splitArrayElementsIntoProperties()",
            "head_type": "method",
            "relation": "have",
            "tail": "splitArrayElementsIntoPropertiesSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "splitArrayElementsIntoPropertiesSampleCode",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.util.StringUtilsTests#splitArrayElementsIntoProperties()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#splitArrayElementsIntoPropertiesAndDeletedChars()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "splitArrayElementsIntoProperties",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#splitArrayElementsIntoPropertiesAndDeletedChars()",
            "head_type": "method",
            "relation": "have",
            "tail": "splitArrayElementsIntoPropertiesAndDeletedCharsSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "splitArrayElementsIntoPropertiesAndDeletedCharsSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "splitArrayElementsIntoPropertiesAndDeletedCharsCodeContent",
            "tail_type": "codeContent"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#tokenizeToStringArray()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "tokenizeToStringArray",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#tokenizeToStringArray()",
            "head_type": "method",
            "relation": "have",
            "tail": "tokenizeToStringArraySampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "tokenizeToStringArraySampleCode",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.util.StringUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#tokenizeToStringArray()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.StringUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#tokenizeToStringArrayWithNotIgnoreEmptyTokens()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "tokenizeToStringArray",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#tokenizeToStringArrayWithNotIgnoreEmptyTokens()",
            "head_type": "method",
            "relation": "have",
            "tail": "tokenizeToStringArrayWithNotIgnoreEmptyTokens() useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "tokenizeToStringArrayWithNotIgnoreEmptyTokens() useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "package org.springframework.util;\n\nimport org.junit.jupiter.api.Test;\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class StringUtilsTests {\n\n    @Test\n    void tokenizeToStringArrayWithNotIgnoreEmptyTokens() {\n        String[] sa = StringUtils.tokenizeToStringArray(\"a,b , ,c\", \",\", true, false);\n        assertThat(sa).hasSize(4);\n        assertThat(sa[0].equals(\"a\") && sa[1].equals(\"b\") && sa[2].isEmpty() && sa[3].equals(\"c\")).as(\"components are correct\").isTrue();\n    }\n}",
            "tail_type": "String"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#tokenizeToStringArrayWithNotTrimTokens()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "tokenizeToStringArray",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#tokenizeToStringArrayWithNotTrimTokens()",
            "head_type": "method",
            "relation": "have",
            "tail": "tokenizeToStringArrayWithNotTrimTokens() useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "tokenizeToStringArrayWithNotTrimTokens() useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "package org.springframework.util;\n\nimport org.junit.jupiter.api.Test;\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class StringUtilsTests {\n\n    @Test\n    void tokenizeToStringArrayWithNotTrimTokens() {\n        String[] sa = StringUtils.tokenizeToStringArray(\"a,b ,c\", \",\", false, true);\n        assertThat(sa).hasSize(3);\n        assertThat(sa[0].equals(\"a\") && sa[1].equals(\"b \") && sa[2].equals(\"c\")).as(\"components are correct\").isTrue();\n    }\n}",
            "tail_type": "code"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayWithNullProducesEmptyArray()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "convert comma delimited string to array",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayWithNullProducesEmptyArray()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "input must be null",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayWithNullProducesEmptyArray()",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "handling null input for comma delimited string conversion",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayWithNullProducesEmptyArray()",
            "head_type": "method",
            "relation": "have",
            "tail": "public void commaDelimitedListToStringArrayWithNullProducesEmptyArray() { String[] sa = StringUtils.commaDelimitedListToStringArray(null); assertThat(sa).as(\"String array isn't null with null input\").isNotNull(); assertThat(sa.length).as(\"String array length == 0 with null input\").isEqualTo(0); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayWithNullProducesEmptyArray()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.StringUtils",
            "tail_type": "class"
        },
        {
            "head": "convert comma delimited string to array",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "This functionality involves converting a comma-separated string into an array of strings. Each element between the commas is treated as a separate string in the resulting array.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "convert comma delimited string to array",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "The design principle behind this functionality is to provide a utility that can handle and manipulate strings effectively, ensuring that common string operations are straightforward and efficient for developers.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayWithEmptyStringProducesEmptyArray()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "convert comma delimited string to array",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayWithEmptyStringProducesEmptyArray()",
            "head_type": "method",
            "relation": "have",
            "tail": "convert comma delimited string to array sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "convert comma delimited string to array sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "package org.springframework.util; import org.junit.jupiter.api.Test; import static org.assertj.core.api.Assertions.assertThat; public class StringUtilsTests { @Test void commaDelimitedListToStringArrayWithEmptyStringProducesEmptyArray() { String[] sa = StringUtils.commaDelimitedListToStringArray(\"\"); assertThat(sa).as(\"String array isn't null with null input\").isNotNull(); assertThat(sa.length).as(\"String array length == 0 with null input\").isEqualTo(0); } }",
            "tail_type": "code"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayWithEmptyStringProducesEmptyArray()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.StringUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#delimitedListToStringArrayWithComma()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "string manipulation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#delimitedListToStringArrayWithComma()",
            "head_type": "method",
            "relation": "have",
            "tail": "splitting a string by a delimiter",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#delimitedListToStringArrayWithComma()",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.util.StringUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#delimitedListToStringArrayWithComma()",
            "head_type": "method",
            "relation": "have",
            "tail": "public void delimitedListToStringArrayWithComma() { String[] sa = StringUtils.delimitedListToStringArray(\"a,b\", \",\"); assertThat(sa).hasSize(2); assertThat(sa[0]).isEqualTo(\"a\"); assertThat(sa[1]).isEqualTo(\"b\"); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#delimitedListToStringArrayWithComma()",
            "head_type": "method",
            "relation": "have",
            "tail": "Related Concept Interpretation: This method is used to test the functionality of splitting a string into an array using a specified delimiter. It verifies that the resulting array has the correct size and elements.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#delimitedListToStringArrayWithComma()",
            "head_type": "method",
            "relation": "have",
            "tail": "Design Principle Interpretation: The method follows the principle of unit testing to ensure that the StringUtils.delimitedListToStringArray method works correctly for a given input. It uses assertions to validate the expected outcome.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#delimitedListToStringArrayWithSemicolon()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "string manipulation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#delimitedListToStringArrayWithSemicolon()",
            "head_type": "method",
            "relation": "have",
            "tail": "splitting strings using a delimiter",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#delimitedListToStringArrayWithSemicolon()",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "complete example",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#delimitedListToStringArrayWithSemicolon()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.StringUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#delimitedListToStringArrayWithEmptyDelimiter()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "string manipulation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#delimitedListToStringArrayWithEmptyDelimiter()",
            "head_type": "method",
            "relation": "have",
            "tail": "splitting strings using a delimiter",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#delimitedListToStringArrayWithEmptyDelimiter()",
            "head_type": "method",
            "relation": "have",
            "tail": "ensuring no empty elements are included when delimiter is empty",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#delimitedListToStringArrayWithEmptyDelimiter()",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.util.StringUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#delimitedListToStringArrayWithEmptyDelimiter()",
            "head_type": "method",
            "relation": "have",
            "tail": "related to string utility functions commonly used in Java",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#delimitedListToStringArrayWithEmptyDelimiter()",
            "head_type": "method",
            "relation": "have",
            "tail": "design follows the principle of keeping string operations simple and efficient",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#delimitedListToStringArrayWithEmptyDelimiter()",
            "head_type": "method",
            "relation": "have",
            "tail": "package org.springframework.util;\n\nimport org.junit.jupiter.api.Test;\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class StringUtilsTests {\n\n    @Test\n    void delimitedListToStringArrayWithEmptyDelimiter() {\n        String[] sa = StringUtils.delimitedListToStringArray(\"a,b\", \"\");\n        assertThat(sa).hasSize(3);\n        assertThat(sa[0]).isEqualTo(\"a\");\n        assertThat(sa[1]).isEqualTo(\",\");\n        assertThat(sa[2]).isEqualTo(\"b\");\n    }\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#delimitedListToStringArrayWithNullDelimiter()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "string manipulation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#delimitedListToStringArrayWithNullDelimiter()",
            "head_type": "method",
            "relation": "have",
            "tail": "converts a delimited string to an array",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#delimitedListToStringArrayWithNullDelimiter()",
            "head_type": "method",
            "relation": "have",
            "tail": " handles null delimiter by treating the entire string as a single element",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#delimitedListToStringArrayWithNullDelimiter()",
            "head_type": "method",
            "relation": "have",
            "tail": "package org.springframework.util; import org.junit.jupiter.api.Test; import static org.assertj.core.api.Assertions.assertThat; public class StringUtilsTests { @Test void delimitedListToStringArrayWithNullDelimiter() { String[] sa = StringUtils.delimitedListToStringArray(\"a,b\", null); assertThat(sa).hasSize(1); assertThat(sa[0]).isEqualTo(\"a,b\"); } }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#delimitedListToStringArrayWithNullDelimiter()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.StringUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#delimitedListToStringArrayWithNullDelimiter()",
            "head_type": "method",
            "relation": "have",
            "tail": "This method is used to split a string into an array based on a delimiter. If the delimiter is null, the entire string is considered as a single element in the array.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#delimitedListToStringArrayWithNullDelimiter()",
            "head_type": "method",
            "relation": "have",
            "tail": "The method follows the principle of robustness by handling null values gracefully, ensuring that the application does not throw a NullPointerException and continues to function correctly.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#delimitedListToStringArrayWithCharacterToDelete()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "splitting strings",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#delimitedListToStringArrayWithCharacterToDelete()",
            "head_type": "method",
            "relation": "have",
            "tail": "Sample code for splitting strings using StringUtils",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#delimitedListToStringArrayWithCharacterToDelete()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.StringUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#delimitedListToStringArrayWithCharacterToDeleteEqualsToDelimiter()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "string manipulation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#delimitedListToStringArrayWithCharacterToDeleteEqualsToDelimiter()",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for string manipulation",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#delimitedListToStringArrayWithCharacterToDeleteEqualsToDelimiter()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.StringUtils",
            "tail_type": "class"
        },
        {
            "head": "string manipulation",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "manipulating strings in unit tests",
            "tail_type": "useScenario"
        },
        {
            "head": "sample code for string manipulation",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "complete example for string manipulation",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.StringUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "string manipulation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.StringUtilsTests",
            "head_type": "class",
            "relation": "have",
            "tail": "org.springframework.util.StringUtilsTests#delimitedListToStringArrayWithCharacterToDeleteEqualsToDelimiter()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.util.StringUtilsTests",
            "head_type": "class",
            "relation": "designPrincipleInterpretation",
            "tail": "unit testing principles",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "tail": "string manipulation",
            "head_type": "method",
            "relation": "haveFunction",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "apiFunction"
        },
        {
            "tail": "test string array transformation",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test string array reverse transformation",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test same words in string array",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test comma delimited list to string array",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test string array transformation matches",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test comma delimited list to string array legal match",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test string array reverse transformation matches",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test comma delimited list to string array legal match",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test string array transformation matches",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test comma delimited list to string array legal match",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test string array reverse transformation matches",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test comma delimited list to string array legal match",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test string array transformation matches",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test comma delimited list to string array legal match",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test string array reverse transformation matches",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test comma delimited list to string array legal match",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test string array transformation matches",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test comma delimited list to string array legal match",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test string array reverse transformation matches",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test comma delimited list to string array legal match",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test string array transformation matches",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test comma delimited list to string array legal match",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test string array reverse transformation matches",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test comma delimited list to string array legal match",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test string array transformation matches",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test comma delimited list to string array legal match",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test string array reverse transformation matches",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test comma delimited list to string array legal match",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test string array transformation matches",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test comma delimited list to string array legal match",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test string array reverse transformation matches",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test comma delimited list to string array legal match",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test string array transformation matches",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test comma delimited list to string array legal match",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test string array reverse transformation matches",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test comma delimited list to string array legal match",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test string array transformation matches",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test comma delimited list to string array legal match",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test string array reverse transformation matches",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test comma delimited list to string array legal match",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test string array transformation matches",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test comma delimited list to string array legal match",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test string array reverse transformation matches",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test comma delimited list to string array legal match",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test string array transformation matches",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test comma delimited list to string array legal match",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test string array reverse transformation matches",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test comma delimited list to string array legal match",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test string array transformation matches",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test comma delimited list to string array legal match",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test string array reverse transformation matches",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test comma delimited list to string array legal match",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test string array transformation matches",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test comma delimited list to string array legal match",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test string array reverse transformation matches",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test comma delimited list to string array legal match",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test string array transformation matches",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test comma delimited list to string array legal match",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test string array reverse transformation matches",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test comma delimited list to string array legal match",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test string array transformation matches",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test comma delimited list to string array legal match",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test string array reverse transformation matches",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test comma delimited list to string array legal match",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
            "tail_type": "useScenario"
        },
        {
            "tail": "test string array transformation matches",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#doTestStringArrayReverseTransformationMatches(String[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "stringArrayReverseTransformation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#doTestStringArrayReverseTransformationMatches(String[])",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "StringUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#doTestStringArrayReverseTransformationMatches(String[])",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "Arrays",
            "tail_type": "class"
        },
        {
            "head": "stringArrayReverseTransformation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "stringArrayReverseTransformation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "stringArrayReverseTransformation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArraySingleString()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "parse comma delimited string",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArraySingleString()",
            "head_type": "method",
            "relation": "have",
            "tail": "convert a single string to string array",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArraySingleString()",
            "head_type": "method",
            "relation": "have",
            "tail": "use sample code for parsing comma delimited string",
            "tail_type": "useSampleCode"
        },
        {
            "head": "use sample code for parsing comma delimited string",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "package org.springframework.util;\n\nimport org.junit.jupiter.api.Test;\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class StringUtilsTests {\n\n    @Test\n    void commaDelimitedListToStringArraySingleString() {\n        // Could read these from files\n        String s = \"woeirqupoiewuropqiewuorpqiwueopriquwopeiurqopwieur\";\n        String[] sa = StringUtils.commaDelimitedListToStringArray(s);\n        assertThat(sa.length).as(\"Found one String with no delimiters\").isEqualTo(1);\n        assertThat(sa[0]).as(\"Single array entry matches input String with no delimiters\").isEqualTo(s);\n    }\n}",
            "tail_type": "code"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArraySingleString()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.StringUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayWithOtherPunctuation()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "stringArrayManipulation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayWithOtherPunctuation()",
            "head_type": "method",
            "relation": "have",
            "tail": "testCommaDelimitedListToStringArrayLegalMatch",
            "tail_type": "useSampleCode"
        },
        {
            "head": "testCommaDelimitedListToStringArrayLegalMatch",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayWithOtherPunctuation()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayWithOtherPunctuation()",
            "head_type": "method",
            "relation": "have",
            "tail": "stringArrayManipulation",
            "tail_type": "apiFunction"
        },
        {
            "head": "stringArrayManipulation",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "legalMatchConstraint",
            "tail_type": "useConstraint"
        },
        {
            "head": "stringArrayManipulation",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "commaDelimitedListToStringArrayScenario",
            "tail_type": "useScenario"
        },
        {
            "head": "stringArrayManipulation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "stringArrayManipulation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassTooLargeException",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "constructor",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ClassTooLargeException",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getClassName",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ClassTooLargeException",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getConstantPoolCount",
            "tail_type": "apiFunction"
        },
        {
            "head": "constructor",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "className must be internal name",
            "tail_type": "useConstraint"
        },
        {
            "head": "getClassName",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "retrieve class internal name",
            "tail_type": "useScenario"
        },
        {
            "head": "getConstantPoolCount",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "retrieve constant pool size",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.ClassTooLargeException",
            "head_type": "class",
            "relation": "have",
            "tail": "ClassTooLargeException is thrown when constant pool is too large",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassTooLargeException",
            "head_type": "class",
            "relation": "have",
            "tail": "designed to handle class size issues in bytecode manipulation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "constructor",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "public ClassTooLargeException(String className, int constantPoolCount) { ... }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getClassName",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "public String getClassName() { return className; }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getConstantPoolCount",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "public int getConstantPoolCount() { return constantPoolCount; }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.ClassTooLargeException#getClassName()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getInternalName",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ClassTooLargeException#getClassName()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.objectweb.asm.Type",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.ClassTooLargeException#getClassName()",
            "head_type": "method",
            "relation": "have",
            "tail": "getClassNameSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getClassNameSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "getClassNameSampleCodeContent",
            "tail_type": "useSampleCodeContent"
        },
        {
            "head": "org.springframework.asm.ClassTooLargeException#getConstantPoolCount()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getConstantPoolCount",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ClassTooLargeException#getConstantPoolCount()",
            "head_type": "method",
            "relation": "have",
            "tail": "Returns the number of constant pool items of the class.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassTooLargeException#getConstantPoolCount()",
            "head_type": "method",
            "relation": "have",
            "tail": "public int getConstantPoolCount() { return constantPoolCount; }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayEmptyStrings()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "parse comma delimited string to array",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayEmptyStrings()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "input string may contain empty elements",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayEmptyStrings()",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "handle empty strings in output array",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayEmptyStrings()",
            "head_type": "method",
            "relation": "have",
            "tail": "String[] sa = StringUtils.commaDelimitedListToStringArray(\"a,,b\"); assertThat(sa.length).as(\"a,,b produces array length 3\").isEqualTo(3); assertThat(sa[0].equals(\"a\") && sa[1].isEmpty() && sa[2].equals(\"b\")).as(\"components are correct\").isTrue(); sa = new String[] { \"\", \"\", \"a\", \"\" }; doTestCommaDelimitedListToStringArrayLegalMatch(sa);",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayEmptyStrings()",
            "head_type": "method",
            "relation": "have",
            "tail": "We expect to see the empty Strings in the output.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayEmptyStrings()",
            "head_type": "method",
            "relation": "have",
            "tail": "Design principle: accurately parse and handle empty strings in comma-separated values.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayEmptyStrings()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.StringUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#doTestCommaDelimitedListToStringArrayLegalMatch(String[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "convert comma delimited string to array",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#doTestCommaDelimitedListToStringArrayLegalMatch(String[])",
            "head_type": "method",
            "relation": "have",
            "tail": "convert comma delimited string to array sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "convert comma delimited string to array sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "package org.springframework.util; import java.util.Arrays; import org.springframework.util.StringUtils; import static org.assertj.core.api.Assertions.assertThat; public class StringUtilsTests { private void doTestCommaDelimitedListToStringArrayLegalMatch(String[] components) { String sb = String.join(\",\", components); String[] sa = StringUtils.commaDelimitedListToStringArray(sb); assertThat(sa).as(\"String array isn't null with legal match\").isNotNull(); assertThat(sa.length).as(\"String array length is correct with legal match\").isEqualTo(components.length); assertThat(Arrays.equals(sa, components)).as(\"Output equals input\").isTrue(); } }",
            "tail_type": "code"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#doTestCommaDelimitedListToStringArrayLegalMatch(String[])",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.StringUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.StringUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "convert comma delimited string to array",
            "tail_type": "apiFunction"
        },
        {
            "head": "convert comma delimited string to array",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "convert comma delimited string to array sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#parseLocaleStringSunnyDay()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "parseLocaleString",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#parseLocaleStringSunnyDay()",
            "head_type": "method",
            "relation": "have",
            "tail": "When given a bona-fide Locale string, must not return null.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#parseLocaleStringSunnyDay()",
            "head_type": "method",
            "relation": "have",
            "tail": "Locale string should be parsed correctly",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#parseLocaleStringSunnyDay()",
            "head_type": "method",
            "relation": "have",
            "tail": "void parseLocaleStringSunnyDay() {\n    Locale expectedLocale = Locale.UK;\n    Locale locale = StringUtils.parseLocaleString(expectedLocale.toString());\n    assertThat(locale).as(\"When given a bona-fide Locale string, must not return null.\").isNotNull();\n    assertThat(locale).isEqualTo(expectedLocale);\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#parseLocaleStringWithEmptyLocaleStringYieldsNullLocale()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "parseLocaleStringWithEmptyLocaleStringYieldsNullLocale",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#parseLocaleStringWithEmptyLocaleStringYieldsNullLocale()",
            "head_type": "method",
            "relation": "have",
            "tail": "parseLocaleStringWithEmptyLocaleStringYieldsNullLocaleSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "parseLocaleStringWithEmptyLocaleStringYieldsNullLocaleSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.util.StringUtilsTests#parseLocaleStringWithEmptyLocaleStringYieldsNullLocale()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#parseLocaleWithMultiSpecialCharactersInVariant()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "parseLocaleString",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#parseLocaleWithMultiSpecialCharactersInVariant()",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.util.StringUtilsTests#parseLocaleWithMultiSpecialCharactersInVariant() sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#parseLocaleWithMultiValuedVariant()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "parseLocaleWithMultiValuedVariant",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#parseLocaleWithMultiValuedVariant()",
            "head_type": "method",
            "relation": "have",
            "tail": "parseLocaleWithMultiValuedVariant() useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "parseLocaleWithMultiValuedVariant() useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "package org.springframework.util;\n\nimport org.junit.jupiter.api.Test;\nimport java.util.Locale;\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class StringUtilsTests {\n    @Test\n    void parseLocaleWithMultiValuedVariant() {\n        String variant = \"proper_northern\";\n        String localeString = \"en_GB_\" + variant;\n        Locale locale = StringUtils.parseLocaleString(localeString);\n        assertThat(locale.getVariant()).as(\"Multi-valued variant portion of the Locale not extracted correctly.\").isEqualTo(variant);\n    }\n}",
            "tail_type": "code"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#parseLocaleWithMultiValuedVariantUsingSpacesAsSeparators()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "parseLocaleWithMultiValuedVariantUsingSpacesAsSeparators",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#parseLocaleWithMultiValuedVariantUsingSpacesAsSeparators()",
            "head_type": "method",
            "relation": "have",
            "tail": "parseLocaleWithMultiValuedVariantUsingSpacesAsSeparators sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "parseLocaleWithMultiValuedVariantUsingSpacesAsSeparators sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.util.StringUtilsTests#parseLocaleWithMultiValuedVariantUsingSpacesAsSeparators() sample code content",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#parseLocaleWithMultiValuedVariantUsingMixtureOfUnderscoresAndSpacesAsSeparators()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "parseLocaleWithMultiValuedVariantUsingMixtureOfUnderscoresAndSpacesAsSeparators",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#parseLocaleWithMultiValuedVariantUsingMixtureOfUnderscoresAndSpacesAsSeparators()",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "completeSampleCode",
            "tail_type": "completeSampleCode"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#parseLocaleWithInvalidCharacters()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "parseLocaleWithInvalidCharacters",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#parseLocaleWithInvalidCharacters()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "IllegalArgumentException",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#parseLocaleWithInvalidCharacters()",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.util.StringUtilsTests",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#parseLocaleWithSameLowercaseTokenForLanguageAndCountry()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "parseLocaleWithSameLowercaseTokenForLanguageAndCountry",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#parseLocaleWithSameLowercaseTokenForLanguageAndCountry()",
            "head_type": "method",
            "relation": "have",
            "tail": "parseLocaleWithSameLowercaseTokenForLanguageAndCountry() useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "parseLocaleWithSameLowercaseTokenForLanguageAndCountry() useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.util.StringUtilsTests#parseLocaleWithSameLowercaseTokenForLanguageAndCountry() sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#parseLocaleWithSameLowercaseTokenForLanguageAndCountry()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.StringUtilsTests",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#parseLocaleWithVariantContainingCountryCode()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "parseLocaleWithVariantContainingCountryCode",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#parseLocaleWithVariantContainingCountryCode()",
            "head_type": "method",
            "relation": "have",
            "tail": "parseLocaleWithVariantContainingCountryCode() sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "parseLocaleWithVariantContainingCountryCode() sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.util.StringUtilsTests",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#parseJava7Variant()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "parseLocaleString",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#parseJava7Variant()",
            "head_type": "method",
            "relation": "have",
            "tail": "void parseJava7Variant() { assertThat(StringUtils.parseLocaleString(\"sr__#LATN\").toString()).isEqualTo(\"sr__#LATN\"); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#parseJava7Variant()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "StringUtils",
            "tail_type": "class"
        },
        {
            "head": "parseLocaleString",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Converts a locale string to a Locale object",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "parseLocaleString",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Design principle: Follows Java's locale parsing conventions",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "tail": "parseLocaleString",
            "head_type": "method",
            "relation": "haveFunction",
            "head": "org.springframework.util.StringUtilsTests#availableLocalesWithLocaleString()",
            "tail_type": "apiFunction"
        },
        {
            "tail": "Locale.getAvailableLocales()",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#availableLocalesWithLocaleString()",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "StringUtils.parseLocaleString(locale.toString())",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#availableLocalesWithLocaleString()",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "assertThat(locale.getLanguage()).isEmpty()",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#availableLocalesWithLocaleString()",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "assertThat(locale.toString()).isEqualTo(parsedLocale.toString())",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#availableLocalesWithLocaleString()",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "org.springframework.util.StringUtils",
            "head_type": "method",
            "relation": "associated_with",
            "head": "org.springframework.util.StringUtilsTests#availableLocalesWithLocaleString()",
            "tail_type": "class"
        },
        {
            "tail": "Locale",
            "head_type": "method",
            "relation": "associated_with",
            "head": "org.springframework.util.StringUtilsTests#availableLocalesWithLocaleString()",
            "tail_type": "class"
        },
        {
            "tail": "StringUtils",
            "head_type": "method",
            "relation": "associated_with",
            "head": "org.springframework.util.StringUtilsTests#availableLocalesWithLocaleString()",
            "tail_type": "class"
        },
        {
            "tail": "relatedConceptInterpretation",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#availableLocalesWithLocaleString()",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "tail": "designPrincipleInterpretation",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.StringUtilsTests#availableLocalesWithLocaleString()",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#availableLocalesWithLanguageTag()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "parseLocale",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#availableLocalesWithLanguageTag()",
            "head_type": "method",
            "relation": "have",
            "tail": "Locale.getAvailableLocales()",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#availableLocalesWithLanguageTag()",
            "head_type": "method",
            "relation": "have",
            "tail": "StringUtils.parseLocale(locale.toLanguageTag())",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#availableLocalesWithLanguageTag()",
            "head_type": "method",
            "relation": "have",
            "tail": "assertThat(locale.toLanguageTag()).isEqualTo(parsedLocale.toLanguageTag())",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#availableLocalesWithLanguageTag()",
            "head_type": "method",
            "relation": "have",
            "tail": "assertThat(locale.getLanguage()).isEmpty()",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#availableLocalesWithLanguageTag()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.StringUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#availableLocalesWithLanguageTag()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "Locale",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#availableLocalesWithLanguageTag()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "StringUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#availableLocalesWithLanguageTag()",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#availableLocalesWithLanguageTag()",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#invalidLocaleWithLocaleString()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "parseLocaleString",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#invalidLocaleWithLocaleString()",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.util.StringUtilsTests#invalidLocaleWithLocaleString() sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#invalidLocaleWithLanguageTag()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "parseLocale",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#invalidLocaleWithLanguageTag()",
            "head_type": "method",
            "relation": "have",
            "tail": "void invalidLocaleWithLanguageTag() {\n    assertThat(StringUtils.parseLocale(\"invalid\")).isEqualTo(new Locale(\"invalid\"));\n    assertThat(StringUtils.parseLocale(\"invalidvalue\")).isEqualTo(new Locale(\"invalidvalue\"));\n    assertThat(StringUtils.parseLocale(\"invalidvalue_foo\")).isEqualTo(new Locale(\"invalidvalue\", \"foo\"));\n    assertThat(StringUtils.parseLocale(\"\")).isNull();\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#invalidLocaleWithLanguageTag()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "StringUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#invalidLocaleWithLanguageTag()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "Locale",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#parseLocaleStringWithEmptyCountryAndVariant()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "parseLocaleStringWithEmptyCountryAndVariant",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#parseLocaleStringWithEmptyCountryAndVariant()",
            "head_type": "method",
            "relation": "have",
            "tail": "StringUtils.parseLocale(\\\"be__TARASK\\\")",
            "tail_type": "useSampleCode"
        },
        {
            "head": "StringUtils.parseLocale(\\\"be__TARASK\\\")",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.util.StringUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#parseLocaleStringWithEmptyCountryAndVariant()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.StringUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#parseLocaleStringWithEmptyCountryAndVariant()",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#parseLocaleStringWithEmptyCountryAndVariant()",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#split()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "splitting strings",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#split()",
            "head_type": "method",
            "relation": "have",
            "tail": "splitting strings sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "splitting strings sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "package org.springframework.util; import org.junit.jupiter.api.Test; import static org.assertj.core.api.Assertions.assertThat; public class StringUtilsTests { @Test void split() { assertThat(StringUtils.split(\"Hello, world\", \",\")).containsExactly(\"Hello\", \" world\"); assertThat(StringUtils.split(\",Hello world\", \",\")).containsExactly(\"\", \"Hello world\"); assertThat(StringUtils.split(\"Hello world,\", \",\")).containsExactly(\"Hello world\", \"\"); assertThat(StringUtils.split(\"Hello, world,\", \",\")).containsExactly(\"Hello\", \" world,\"); } }",
            "tail_type": "code"
        },
        {
            "head": "splitting strings",
            "head_type": "apiFunction",
            "relation": "related_to",
            "tail": "string manipulation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "splitting strings",
            "head_type": "apiFunction",
            "relation": "design_principle",
            "tail": "efficiency and readability",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#splitWithEmptyStringOrNull()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "splitWithEmptyStringOrNull",
            "tail_type": "apiFunction"
        },
        {
            "head": "splitWithEmptyStringOrNull",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "splitWithEmptyStringOrNullSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "splitWithEmptyStringOrNullSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "splitWithEmptyStringOrNullSampleCodeContent",
            "tail_type": "useSampleCodeContent"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#collectionToDelimitedStringWithNullValuesShouldNotFail()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "collectionToDelimitedStringWithNullValues",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#collectionToDelimitedStringWithNullValuesShouldNotFail()",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.util.StringUtilsTests",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.StringUtilsTests",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.util.StringUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#collectionToDelimitedStringWithNullValuesShouldNotFail()",
            "head_type": "method",
            "relation": "have",
            "tail": "Converts a collection to a delimited string even if the collection contains null values",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#collectionToDelimitedStringWithNullValuesShouldNotFail()",
            "head_type": "method",
            "relation": "have",
            "tail": "package org.springframework.util;\n\nimport java.util.Collections;\nimport org.junit.jupiter.api.Test;\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class StringUtilsTests {\n\n    @Test\n    void collectionToDelimitedStringWithNullValuesShouldNotFail() {\n        assertThat(StringUtils.collectionToCommaDelimitedString(Collections.singletonList(null))).isEqualTo(\"null\");\n    }\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#truncatePreconditions()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "truncate",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#truncatePreconditions()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "Truncation threshold must be a positive number",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#truncatePreconditions()",
            "head_type": "method",
            "relation": "have",
            "tail": "void truncatePreconditions() {\n    assertThatIllegalArgumentException().isThrownBy(() -> StringUtils.truncate(\"foo\", 0)).withMessage(\"Truncation threshold must be a positive number: 0\");\n    assertThatIllegalArgumentException().isThrownBy(() -> StringUtils.truncate(\"foo\", -99)).withMessage(\"Truncation threshold must be a positive number: -99\");\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#truncatePreconditions()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "StringUtils",
            "tail_type": "class"
        },
        {
            "head": "truncate",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "Truncation threshold must be a positive number",
            "tail_type": "useConstraint"
        },
        {
            "head": "truncate",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "void truncatePreconditions() {\n    assertThatIllegalArgumentException().isThrownBy(() -> StringUtils.truncate(\"foo\", 0)).withMessage(\"Truncation threshold must be a positive number: 0\");\n    assertThatIllegalArgumentException().isThrownBy(() -> StringUtils.truncate(\"foo\", -99)).withMessage(\"Truncation threshold must be a positive number: -99\");\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "truncate",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "StringUtils",
            "tail_type": "class"
        },
        {
            "head": "StringUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "truncate",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#truncate(String,String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "truncate",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#truncate(String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.util.StringUtilsTests#truncate(String,String)_useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.StringUtilsTests#truncate(String,String)_useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.util.StringUtilsTests#truncate(String,String)_useSampleCode_content",
            "tail_type": "content"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "resolvePlaceholders",
            "tail_type": "apiFunction"
        },
        {
            "head": "resolvePlaceholders",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "replaceFromSystemProperty",
            "tail_type": "useScenario"
        },
        {
            "head": "resolvePlaceholders",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "replaceFromSystemPropertyWithDefault",
            "tail_type": "useScenario"
        },
        {
            "head": "resolvePlaceholders",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "replaceFromSystemPropertyWithExpressionDefault",
            "tail_type": "useScenario"
        },
        {
            "head": "resolvePlaceholders",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "replaceFromSystemPropertyWithExpressionContainingDefault",
            "tail_type": "useScenario"
        },
        {
            "head": "resolvePlaceholders",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "replaceWithDefault",
            "tail_type": "useScenario"
        },
        {
            "head": "resolvePlaceholders",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "replaceWithExpressionDefault",
            "tail_type": "useScenario"
        },
        {
            "head": "resolvePlaceholders",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "replaceWithExpressionContainingDefault",
            "tail_type": "useScenario"
        },
        {
            "head": "resolvePlaceholders",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "replaceWithNoDefault",
            "tail_type": "useScenario"
        },
        {
            "head": "resolvePlaceholders",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "replaceWithNoDefaultIgnored",
            "tail_type": "useScenario"
        },
        {
            "head": "resolvePlaceholders",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "replaceWithEmptyDefault",
            "tail_type": "useScenario"
        },
        {
            "head": "resolvePlaceholders",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "recursiveFromSystemProperty",
            "tail_type": "useScenario"
        },
        {
            "head": "resolvePlaceholders",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "replaceFromEnv",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests",
            "head_type": "class",
            "relation": "have",
            "tail": "resolvePlaceholders sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests",
            "head_type": "class",
            "relation": "have",
            "tail": "resolvePlaceholders related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests",
            "head_type": "class",
            "relation": "have",
            "tail": "resolvePlaceholders design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#replaceFromSystemProperty()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "resolvePlaceholders",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#replaceFromSystemProperty()",
            "head_type": "method",
            "relation": "have",
            "tail": "System.setProperty(\"test.prop\", \"bar\")",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#replaceFromSystemProperty()",
            "head_type": "method",
            "relation": "have",
            "tail": "String resolved = SystemPropertyUtils.resolvePlaceholders(\"${test.prop}\")",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#replaceFromSystemProperty()",
            "head_type": "method",
            "relation": "have",
            "tail": "assertThat(resolved).isEqualTo(\"bar\")",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#replaceFromSystemProperty()",
            "head_type": "method",
            "relation": "have",
            "tail": "System.clearProperty(\"test.prop\")",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#replaceFromSystemProperty()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "SystemPropertyUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#replaceFromSystemProperty()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "System",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#replaceFromSystemProperty()",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#replaceFromSystemProperty()",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#replaceFromSystemPropertyWithDefault()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "resolvePlaceholders",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#replaceFromSystemPropertyWithDefault()",
            "head_type": "method",
            "relation": "have",
            "tail": "System.setProperty(test.prop, bar)",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#replaceFromSystemPropertyWithDefault()",
            "head_type": "method",
            "relation": "have",
            "tail": "System.clearProperty(test.prop)",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#replaceFromSystemPropertyWithDefault()",
            "head_type": "method",
            "relation": "have",
            "tail": "String resolved = SystemPropertyUtils.resolvePlaceholders(${test.prop:foo})",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#replaceFromSystemPropertyWithDefault()",
            "head_type": "method",
            "relation": "have",
            "tail": "assertThat(resolved).isEqualTo(bar)",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#replaceFromSystemPropertyWithDefault()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "SystemPropertyUtils",
            "tail_type": "class"
        },
        {
            "head": "SystemPropertyUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "resolvePlaceholders",
            "tail_type": "apiFunction"
        },
        {
            "head": "resolvePlaceholders",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "This method is used to resolve placeholders within a string by replacing them with their corresponding values from the system properties.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "resolvePlaceholders",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "The design principle behind this method is to provide a flexible way to configure applications using external properties, allowing for easy changes without modifying the code.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#replaceFromSystemPropertyWithExpressionDefault()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "resolvePlaceholders",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#replaceFromSystemPropertyWithExpressionDefault()",
            "head_type": "method",
            "relation": "have",
            "tail": "SystemPropertyUtilsTests_sampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "SystemPropertyUtilsTests_sampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.util.SystemPropertyUtilsTests#replaceFromSystemPropertyWithExpressionDefault()_code",
            "tail_type": "code"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#replaceFromSystemPropertyWithExpressionContainingDefault()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "resolvePlaceholders",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#replaceFromSystemPropertyWithExpressionContainingDefault()",
            "head_type": "method",
            "relation": "have",
            "tail": "System.setProperty(\"test.prop\", \"bar\")",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#replaceFromSystemPropertyWithExpressionContainingDefault()",
            "head_type": "method",
            "relation": "have",
            "tail": "String resolved = SystemPropertyUtils.resolvePlaceholders(\"${test.prop:Y#{foo.bar}X}\")",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#replaceFromSystemPropertyWithExpressionContainingDefault()",
            "head_type": "method",
            "relation": "have",
            "tail": "assertThat(resolved).isEqualTo(\"bar\")",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#replaceFromSystemPropertyWithExpressionContainingDefault()",
            "head_type": "method",
            "relation": "have",
            "tail": "System.clearProperty(\"test.prop\")",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#replaceFromSystemPropertyWithExpressionContainingDefault()",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#replaceFromSystemPropertyWithExpressionContainingDefault()",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#replaceFromSystemPropertyWithExpressionContainingDefault()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.SystemPropertyUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#replaceWithDefault()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "resolvePlaceholders",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#replaceWithDefault()",
            "head_type": "method",
            "relation": "have",
            "tail": "String resolved = SystemPropertyUtils.resolvePlaceholders(\"${test.prop:foo}\"); assertThat(resolved).isEqualTo(\"foo\")",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#replaceWithDefault()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "SystemPropertyUtils",
            "tail_type": "class"
        },
        {
            "head": "SystemPropertyUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "resolvePlaceholders",
            "tail_type": "apiFunction"
        },
        {
            "head": "resolvePlaceholders",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "String resolved = SystemPropertyUtils.resolvePlaceholders(\"${test.prop:foo}\"); assertThat(resolved).isEqualTo(\"foo\")",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#replaceWithExpressionDefault()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "resolvePlaceholders",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#replaceWithExpressionDefault()",
            "head_type": "method",
            "relation": "have",
            "tail": "String resolved = SystemPropertyUtils.resolvePlaceholders(\"${test.prop:#{foo.bar}}\"); assertThat(resolved).isEqualTo(\"#{foo.bar}\");",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#replaceWithExpressionDefault()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.SystemPropertyUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#replaceWithExpressionDefault()",
            "head_type": "method",
            "relation": "have",
            "tail": "This method tests the functionality of resolving placeholders with default values in expressions.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#replaceWithExpressionDefault()",
            "head_type": "method",
            "relation": "have",
            "tail": "The design principle followed here is to ensure that placeholders within expressions are resolved correctly, even when default values are provided.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#replaceWithExpressionContainingDefault()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "resolve placeholders",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#replaceWithExpressionContainingDefault()",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for resolving placeholders with default values",
            "tail_type": "useSampleCode"
        },
        {
            "head": "resolve placeholders",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "sample code for resolving placeholders with default values",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#replaceWithExpressionContainingDefault()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.SystemPropertyUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#replaceWithNoDefault()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "resolve placeholders",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#replaceWithNoDefault()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "placeholder resolution exception",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#replaceWithNoDefault()",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#replaceWithNoDefault()",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#replaceWithNoDefault()",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#replaceWithNoDefault()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "SystemPropertyUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#replaceWithNoDefaultIgnored()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "resolve placeholders",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#replaceWithNoDefaultIgnored()",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for resolving placeholders without default values",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#replaceWithNoDefaultIgnored()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.SystemPropertyUtils",
            "tail_type": "class"
        },
        {
            "head": "resolve placeholders",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "replaceWithNoDefaultIgnored() method",
            "tail_type": "useScenario"
        },
        {
            "head": "resolve placeholders",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "no default values should be provided",
            "tail_type": "useConstraint"
        },
        {
            "head": "replaceWithNoDefaultIgnored() method",
            "head_type": "useScenario",
            "relation": "have",
            "tail": "sample code for resolving placeholders without default values",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "resolve placeholders",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtils",
            "head_type": "class",
            "relation": "designPrincipleInterpretation",
            "tail": "This class is designed to handle system property resolution in a flexible and configurable manner, allowing for placeholders to be resolved with or without default values.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtils",
            "head_type": "class",
            "relation": "relatedConceptInterpretation",
            "tail": "System property resolution involves replacing placeholders within strings with their corresponding system property values. This is commonly used in configuration files where values may vary across different environments.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#replaceWithEmptyDefault()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "resolvePlaceholders",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#replaceWithEmptyDefault()",
            "head_type": "method",
            "relation": "have",
            "tail": "resolvePlaceholders_sample_code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "resolvePlaceholders_sample_code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "resolvePlaceholders_code",
            "tail_type": "code"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#recursiveFromSystemProperty()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "resolvePlaceholders",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#recursiveFromSystemProperty()",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#recursiveFromSystemProperty()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "SystemPropertyUtils",
            "tail_type": "class"
        },
        {
            "head": "SystemPropertyUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "resolvePlaceholders",
            "tail_type": "apiFunction"
        },
        {
            "head": "resolve_placeholders",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "resolve_placeholders",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#replaceFromEnv()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "resolvePlaceholders",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#replaceFromEnv()",
            "head_type": "method",
            "relation": "have",
            "tail": "System.getenv()",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#replaceFromEnv()",
            "head_type": "method",
            "relation": "have",
            "tail": "env.containsKey(\"PATH\")",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#replaceFromEnv()",
            "head_type": "method",
            "relation": "have",
            "tail": "String text = \"${PATH}\"",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#replaceFromEnv()",
            "head_type": "method",
            "relation": "have",
            "tail": "assertThat(SystemPropertyUtils.resolvePlaceholders(text)).isEqualTo(env.get(\"PATH\"))",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#replaceFromEnv()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "SystemPropertyUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#replaceFromEnv()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.SystemPropertyUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#replaceFromEnv()",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.SystemPropertyUtilsTests#replaceFromEnv()",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#getDelegate()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "delegation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#getDelegate()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "nullability",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#getDelegate()",
            "head_type": "method",
            "relation": "have",
            "tail": "The class visitor to which this visitor must delegate method calls. May be null.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassVisitor",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.ClassVisitor#getDelegate()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#getDelegate()",
            "head_type": "method",
            "relation": "have",
            "tail": "public ClassVisitor getDelegate() {\n    return cv;\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visit(int,int,String,String,String,String[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "visitClassHeader",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visit(int,int,String,String,String,String[])",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "asmVersionCheck",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visit(int,int,String,String,String,String[])",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "classHeaderManipulation",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visit(int,int,String,String,String,String[])",
            "head_type": "method",
            "relation": "have",
            "tail": "visitClassHeaderSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visit(int,int,String,String,String,String[])",
            "head_type": "method",
            "relation": "have",
            "tail": "classVisitorFunctionality",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visit(int,int,String,String,String,String[])",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrinciplesOfClassVisitor",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "visitClassHeader",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "org.springframework.asm.ClassVisitor",
            "tail_type": "class"
        },
        {
            "head": "asmVersionCheck",
            "head_type": "useConstraint",
            "relation": "associated_with",
            "tail": "org.springframework.asm.ClassVisitor",
            "tail_type": "class"
        },
        {
            "head": "classHeaderManipulation",
            "head_type": "useScenario",
            "relation": "associated_with",
            "tail": "org.springframework.asm.ClassVisitor",
            "tail_type": "class"
        },
        {
            "head": "visitClassHeaderSampleCode",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.asm.ClassVisitor",
            "tail_type": "class"
        },
        {
            "head": "classVisitorFunctionality",
            "head_type": "relatedConceptInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.asm.ClassVisitor",
            "tail_type": "class"
        },
        {
            "head": "designPrinciplesOfClassVisitor",
            "head_type": "designPrincipleInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.asm.ClassVisitor",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitSource(String,String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "visit source of the class",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitSource(String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "Visits the source of the class.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitSource(String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "The method visitSource is used to specify the name of the source file from which the class was compiled and additional debug information.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitSource(String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "public void visitSource(final String source, final String debug) {\n    if (cv != null) {\n        cv.visitSource(source, debug);\n    }\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitModule(String,int,String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "visit the module corresponding to the class",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitModule(String,int,String)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "requires ASM6",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitModule(String,int,String)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "module values visitation",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitModule(String,int,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "ModuleVisitor visitModule(final String name, final int access, final String version) { // specific code }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitModule(String,int,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitModule(String,int,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitModule(String,int,String)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.ClassVisitor",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitNestHost(String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "visit nest host",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitNestHost(String)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "must be called only once",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitNestHost(String)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "visited class must be a non-host member of a nest",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitNestHost(String)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "invalid to call with visited class name as argument",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitNestHost(String)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "share access to private members within nest",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitNestHost(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "visit nest host sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitNestHost(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "nest concept explanation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitNestHost(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle for nest host",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitNestHost(String)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.ClassVisitor",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.ClassVisitor",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "visit nest host",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitOuterClass(String,String,String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "visit the enclosing class of the class",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitOuterClass(String,String,String)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "This method must be called only if this class is a local or anonymous class",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitOuterClass(String,String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "Related Concept Interpretation: The JVMS 4.7.7 section provides more details on visiting the enclosing class of a class. This method is specifically used for local or anonymous classes.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitOuterClass(String,String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "Design Principle Interpretation: The method follows the principle of encapsulation by ensuring that the details of the enclosing class are only visited when necessary, maintaining the integrity of the class structure.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitOuterClass(String,String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "Use Sample Code: \n\npackage com.example;\n\nimport org.springframework.asm.ClassVisitor;\nimport org.springframework.asm.Opcodes;\n\npublic class SampleClassVisitor extends ClassVisitor {\n    public SampleClassVisitor() {\n        super(Opcodes.ASM9);\n    }\n\n    @Override\n    public void visitOuterClass(String owner, String name, String descriptor) {\n        // Your implementation here\n        super.visitOuterClass(owner, name, descriptor);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        SampleClassVisitor visitor = new SampleClassVisitor();\n        // Use the visitor as needed\n    }\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitAnnotation(String,boolean)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "visitAnnotation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitAnnotation(String,boolean)",
            "head_type": "method",
            "relation": "have",
            "tail": "visitAnnotationSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "visitAnnotationSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "visitAnnotationSampleCodeContent",
            "tail_type": "codeContent"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitAnnotation(String,boolean)",
            "head_type": "method",
            "relation": "have",
            "tail": "visitAnnotationRelatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "visitAnnotationRelatedConceptInterpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "visitAnnotationRelatedConceptInterpretationContent",
            "tail_type": "interpretationContent"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitAnnotation(String,boolean)",
            "head_type": "method",
            "relation": "have",
            "tail": "visitAnnotationDesignPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "visitAnnotationDesignPrincipleInterpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "have",
            "tail": "visitAnnotationDesignPrincipleInterpretationContent",
            "tail_type": "interpretationContent"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitTypeAnnotation(int,TypePath,String,boolean)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "visitTypeAnnotation",
            "tail_type": "apiFunction"
        },
        {
            "head": "visitTypeAnnotation",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "ASM5 requirement",
            "tail_type": "useConstraint"
        },
        {
            "head": "visitTypeAnnotation",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "type annotation visiting",
            "tail_type": "useScenario"
        },
        {
            "head": "visitTypeAnnotation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "type annotation visiting sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "visitTypeAnnotation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "type annotation visiting explanation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "visitTypeAnnotation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "design principle explanation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitTypeAnnotation(int,TypePath,String,boolean)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.TypeReference",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitAttribute(Attribute)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "visit non standard attribute",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitAttribute(Attribute)",
            "head_type": "method",
            "relation": "have",
            "tail": "Visits a non standard attribute of the class.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitAttribute(Attribute)",
            "head_type": "method",
            "relation": "have",
            "tail": "The method allows visiting non-standard attributes which are not part of the typical class structure.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitAttribute(Attribute)",
            "head_type": "method",
            "relation": "have",
            "tail": "public void visitAttribute(final Attribute attribute) {\n    if (cv != null) {\n        cv.visitAttribute(attribute);\n    }\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitNestMember(String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "visitNestMember",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitNestMember(String)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "ASM7 requirement",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitNestMember(String)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "nest host class",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitNestMember(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "visitNestMember sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitNestMember(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitNestMember(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "visitNestMember",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "org.springframework.asm.ClassVisitor",
            "tail_type": "class"
        },
        {
            "head": "ASM7 requirement",
            "head_type": "useConstraint",
            "relation": "associated_with",
            "tail": "org.springframework.asm.ClassVisitor#visitNestMember(String)",
            "tail_type": "method"
        },
        {
            "head": "nest host class",
            "head_type": "useScenario",
            "relation": "associated_with",
            "tail": "org.springframework.asm.ClassVisitor#visitNestMember(String)",
            "tail_type": "method"
        },
        {
            "head": "visitNestMember sample code",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.asm.ClassVisitor#visitNestMember(String)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitPermittedSubclass(String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "visitPermittedSubclass",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitPermittedSubclass(String)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "ASM9 requirement",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitPermittedSubclass(String)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": " permitted subclasses",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitPermittedSubclass(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "visitPermittedSubclass sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitPermittedSubclass(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "visitPermittedSubclass related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitPermittedSubclass(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "visitPermittedSubclass design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "visitPermittedSubclass sample code",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.asm.ClassVisitor#visitPermittedSubclass(String)",
            "tail_type": "method"
        },
        {
            "head": "visitPermittedSubclass related concept interpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.asm.ClassVisitor#visitPermittedSubclass(String)",
            "tail_type": "method"
        },
        {
            "head": "visitPermittedSubclass design principle interpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.asm.ClassVisitor#visitPermittedSubclass(String)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitInnerClass(String,String,String,int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "visit information about an inner class",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitInnerClass(String,String,String,int)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "every class or interface C which is referenced by this class and which is not a package member must be visited with this method",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitInnerClass(String,String,String,int)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "reference its nested class or interface members, and its enclosing class, if any",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitInnerClass(String,String,String,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "Visits information about an inner class. This inner class is not necessarily a member of the class being visited. More precisely, every class or interface C which is referenced by this class and which is not a package member must be visited with this method. This class must reference its nested class or interface members, and its enclosing class, if any. See the JVMS 4.7.6 section for more details.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitInnerClass(String,String,String,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "Design Principle: Ensure that all referenced classes or interfaces that are not package members are visited, maintaining a comprehensive view of the class hierarchy and structure.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitInnerClass(String,String,String,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "package com.healthMgr.common.email;\nimport java.util.*;\npublic class OneClass {\n    public void exampleUsage() {\n        String name = \"com/healthMgr/common/email/InnerClass\";\n        String outerName = \"com/healthMgr/common/email/OuterClass\";\n        String innerName = \"InnerClass\";\n        int access = 0; // Example access flags\n        org.springframework.asm.ClassVisitor cv = new org.springframework.asm.ClassVisitor(0) {};\n        cv.visitInnerClass(name, outerName, innerName, access);\n    }\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitInnerClass(String,String,String,int)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.ClassVisitor",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitRecordComponent(String,String,String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "visitRecordComponent",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitRecordComponent(String,String,String)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "ASM8 requirement",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitRecordComponent(String,String,String)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "record component visiting",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitRecordComponent(String,String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "visitRecordComponent sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitRecordComponent(String,String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "record component explanation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitRecordComponent(String,String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle for visiting record components",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitRecordComponent(String,String,String)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Type",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitField(int,String,String,String,Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "visitField",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitField(int,String,String,String,Object)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "fieldAccessFlags",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitField(int,String,String,String,Object)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "classFieldDefinition",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitField(int,String,String,String,Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "visitFieldSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitField(int,String,String,String,Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "fieldVisitorExplanation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitField(int,String,String,String,Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleForFieldVisitor",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "visitField",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "org.springframework.asm.ClassVisitor",
            "tail_type": "class"
        },
        {
            "head": "fieldAccessFlags",
            "head_type": "useConstraint",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Opcodes",
            "tail_type": "class"
        },
        {
            "head": "classFieldDefinition",
            "head_type": "useScenario",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Type",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitMethod(int,String,String,String,String[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Visits a method of the class",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitMethod(int,String,String,String,String[])",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "This method must return a new MethodVisitor instance each time it is called",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitMethod(int,String,String,String,String[])",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "Visiting byte code of the method",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitMethod(int,String,String,String,String[])",
            "head_type": "method",
            "relation": "have",
            "tail": "MethodVisitor visitor = cv.visitMethod(access, name, descriptor, signature, exceptions);",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitMethod(int,String,String,String,String[])",
            "head_type": "method",
            "relation": "have",
            "tail": "The method's access flags indicate if the method is synthetic and/or deprecated",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitMethod(int,String,String,String,String[])",
            "head_type": "method",
            "relation": "have",
            "tail": "Design principle: Each call returns a new instance to avoid state leakage between calls",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitMethod(int,String,String,String,String[])",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.MethodVisitor",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitEnd()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "visiting the end of the class",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitEnd()",
            "head_type": "method",
            "relation": "have",
            "tail": "informs the visitor that all fields and methods have been visited",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitEnd()",
            "head_type": "method",
            "relation": "have",
            "tail": "this method is the last one to be called",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.ClassVisitor#visitEnd()",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for visiting the end of the class",
            "tail_type": "useSampleCode"
        },
        {
            "head": "visiting the end of the class",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "must be called after visiting all fields and methods",
            "tail_type": "useConstraint"
        },
        {
            "head": "visiting the end of the class",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "design principle of ensuring all class members are visited before ending",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.TypeUtilsTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "isAssignable",
            "tail_type": "apiFunction"
        },
        {
            "head": "isAssignable",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "TypeUtils.isAssignable",
            "tail_type": "useScenario"
        },
        {
            "head": "TypeUtils.isAssignable",
            "head_type": "useScenario",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.TypeUtilsTests",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.TypeUtilsTests",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.TypeUtilsTests",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "TypeUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.TypeUtilsTests#withClasses()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Type Checking",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.TypeUtilsTests#withClasses()",
            "head_type": "method",
            "relation": "have",
            "tail": "Type Compatibility Verification",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.util.TypeUtilsTests#withClasses()",
            "head_type": "method",
            "relation": "have",
            "tail": "Java Reflection API",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.TypeUtilsTests#withClasses()",
            "head_type": "method",
            "relation": "have",
            "tail": "Design for Testability",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.TypeUtilsTests#withClasses()",
            "head_type": "method",
            "relation": "have",
            "tail": "TypeUtils.isAssignable() Method Usage",
            "tail_type": "useSampleCode"
        },
        {
            "head": "TypeUtils.isAssignable() Method Usage",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.util.TypeUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.TypeUtilsTests#withParameterizedTypes()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Type Checking",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.TypeUtilsTests#withParameterizedTypes()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Type Assignment",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.TypeUtilsTests#withParameterizedTypes()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Type Comparison",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.TypeUtilsTests#withParameterizedTypes()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Generic Type Handling",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.TypeUtilsTests#withParameterizedTypes()",
            "head_type": "method",
            "relation": "have",
            "tail": "TypeUtils.isAssignable() Usage",
            "tail_type": "useSampleCode"
        },
        {
            "head": "TypeUtils.isAssignable() Usage",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.util.TypeUtilsTests#withParameterizedTypes()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.util.TypeUtilsTests#withParameterizedTypes()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.TypeUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.TypeUtilsTests#withParameterizedTypes()",
            "head_type": "method",
            "relation": "have",
            "tail": "TypeUtils.isAssignable() Detailed Usage Example",
            "tail_type": "useSampleCode"
        },
        {
            "head": "TypeUtils.isAssignable() Detailed Usage Example",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.util.TypeUtilsTests#withParameterizedTypes()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.util.TypeUtilsTests#withParameterizedTypes()",
            "head_type": "method",
            "relation": "have",
            "tail": "Explanation of Type Assignability in Spring",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "Explanation of Type Assignability in Spring",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "org.springframework.util.TypeUtilsTests#withParameterizedTypes()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.util.TypeUtilsTests#withParameterizedTypes()",
            "head_type": "method",
            "relation": "have",
            "tail": "Design Principles of TypeUtils.isAssignable()",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "Design Principles of TypeUtils.isAssignable()",
            "head_type": "designPrincipleInterpretation",
            "relation": "have",
            "tail": "org.springframework.util.TypeUtilsTests#withParameterizedTypes()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.util.TypeUtilsTests#withWildcardTypes()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "TypeUtils.isAssignable()",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.TypeUtilsTests#withWildcardTypes()",
            "head_type": "method",
            "relation": "have",
            "tail": "TypeUtils.isAssignable() use sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "TypeUtils.isAssignable() use sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "TypeUtils.isAssignable() sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.TypeUtilsTests#withWildcardTypes()",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "related concept interpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "TypeUtils.isAssignable() related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.TypeUtilsTests#withWildcardTypes()",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "design principle interpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "have",
            "tail": "TypeUtils.isAssignable() design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.TypeUtilsTests#withGenericArrayTypes()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Type checking",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.TypeUtilsTests#withGenericArrayTypes()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Generic type handling",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.TypeUtilsTests#withGenericArrayTypes()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Array type compatibility",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.TypeUtilsTests#withGenericArrayTypes()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Type assignability checking",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.TypeUtilsTests#withGenericArrayTypes()",
            "head_type": "method",
            "relation": "have",
            "tail": "Type assignability checking sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "Type assignability checking sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.util.TypeUtilsTests#withGenericArrayTypes()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.util.TypeUtilsTests#withGenericArrayTypes()",
            "head_type": "method",
            "relation": "have",
            "tail": "Type assignability checking related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "Type assignability checking related concept interpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "org.springframework.util.TypeUtilsTests#withGenericArrayTypes()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.util.TypeUtilsTests#withGenericArrayTypes()",
            "head_type": "method",
            "relation": "have",
            "tail": "Type assignability checking design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "Type assignability checking design principle interpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "have",
            "tail": "org.springframework.util.TypeUtilsTests#withGenericArrayTypes()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.util.TypeUtilsTests#withGenericArrayTypes()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.TypeUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.TypeUtils",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.util.TypeUtilsTests#withGenericArrayTypes()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "DataSize.ofBytes",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "DataSize.ofKilobytes",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "DataSize.ofMegabytes",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "DataSize.ofGigabytes",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "DataSize.ofTerabytes",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "DataSize.parse",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "DataSize.isNegative",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "DataSize.toString",
            "tail_type": "apiFunction"
        },
        {
            "head": "DataSize.ofBytes",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "DataSize conversion",
            "tail_type": "useScenario"
        },
        {
            "head": "DataSize.ofKilobytes",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "DataSize conversion",
            "tail_type": "useScenario"
        },
        {
            "head": "DataSize.ofMegabytes",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "DataSize conversion",
            "tail_type": "useScenario"
        },
        {
            "head": "DataSize.ofGigabytes",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "DataSize conversion",
            "tail_type": "useScenario"
        },
        {
            "head": "DataSize.ofTerabytes",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "DataSize conversion",
            "tail_type": "useScenario"
        },
        {
            "head": "DataSize.parse",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "DataSize parsing",
            "tail_type": "useScenario"
        },
        {
            "head": "DataSize.isNegative",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "DataSize validation",
            "tail_type": "useScenario"
        },
        {
            "head": "DataSize.toString",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "DataSize representation",
            "tail_type": "useScenario"
        },
        {
            "head": "DataSize conversion",
            "head_type": "useScenario",
            "relation": "have",
            "tail": "DataSize conversion example",
            "tail_type": "useSampleCode"
        },
        {
            "head": "DataSize parsing",
            "head_type": "useScenario",
            "relation": "have",
            "tail": "DataSize parsing example",
            "tail_type": "useSampleCode"
        },
        {
            "head": "DataSize validation",
            "head_type": "useScenario",
            "relation": "have",
            "tail": "DataSize validation example",
            "tail_type": "useSampleCode"
        },
        {
            "head": "DataSize representation",
            "head_type": "useScenario",
            "relation": "have",
            "tail": "DataSize representation example",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests",
            "head_type": "class",
            "relation": "have",
            "tail": "DataSize conversion example",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests",
            "head_type": "class",
            "relation": "have",
            "tail": "DataSize parsing example",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests",
            "head_type": "class",
            "relation": "have",
            "tail": "DataSize validation example",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests",
            "head_type": "class",
            "relation": "have",
            "tail": "DataSize representation example",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.unit.DataSizeTests",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "DataSize",
            "tail_type": "class"
        },
        {
            "head": "DataSize",
            "head_type": "class",
            "relation": "have",
            "tail": "DataSize related concepts",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "DataSize",
            "head_type": "class",
            "relation": "have",
            "tail": "DataSize design principles",
            "tail_type": "designPrincipleInterpretation"
        }
    ]
}