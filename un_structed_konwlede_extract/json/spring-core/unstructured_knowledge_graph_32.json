{
    "relationships": [
        {
            "head": "org.springframework.cglib.beans.BeanGenerator#setSuperclass(Class)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "setSuperclass",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator#setSuperclass(Class)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "class must not be declared as final",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator#setSuperclass(Class)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "class must have a non-private no-argument constructor",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator#setSuperclass(Class)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "extending a class",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator#setSuperclass(Class)",
            "head_type": "method",
            "relation": "have",
            "tail": "setSuperclass sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator#setSuperclass(Class)",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation for setSuperclass",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator#setSuperclass(Class)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation for setSuperclass",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "setSuperclass sample code",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.BeanGenerator#setSuperclass(Class)",
            "tail_type": "method"
        },
        {
            "head": "related concept interpretation for setSuperclass",
            "head_type": "relatedConceptInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.BeanGenerator#setSuperclass(Class)",
            "tail_type": "method"
        },
        {
            "head": "design principle interpretation for setSuperclass",
            "head_type": "designPrincipleInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.BeanGenerator#setSuperclass(Class)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator#addProperty(String,Class)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "addProperty",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator#addProperty(String,Class)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "DuplicatePropertyName",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator#addProperty(String,Class)",
            "head_type": "method",
            "relation": "have",
            "tail": "addPropertySampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator#addProperty(String,Class)",
            "head_type": "method",
            "relation": "have",
            "tail": "addPropertyRelatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator#addProperty(String,Class)",
            "head_type": "method",
            "relation": "have",
            "tail": "addPropertyDesignPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "addProperty",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "addPropertyUseScenario",
            "tail_type": "useScenario"
        },
        {
            "head": "addPropertySampleCode",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.BeanGenerator",
            "tail_type": "class"
        },
        {
            "head": "addPropertyRelatedConceptInterpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.BeanGenerator",
            "tail_type": "class"
        },
        {
            "head": "addPropertyDesignPrincipleInterpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.BeanGenerator",
            "tail_type": "class"
        },
        {
            "head": "addPropertyUseScenario",
            "head_type": "useScenario",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.BeanGenerator",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator#getDefaultClassLoader()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "class loader retrieval",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator#getDefaultClassLoader()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "superclass existence",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator#getDefaultClassLoader()",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "class loader determination",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator#getDefaultClassLoader()",
            "head_type": "method",
            "relation": "have",
            "tail": "class loader determination sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator#getDefaultClassLoader()",
            "head_type": "method",
            "relation": "have",
            "tail": "class loader concept",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator#getDefaultClassLoader()",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle for class loader retrieval",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.BeanGenerator#getDefaultClassLoader()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator#getProtectionDomain()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getProtectionDomain",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator#getProtectionDomain()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "ReflectUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator#getProtectionDomain()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "ProtectionDomain",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator#getProtectionDomain()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "superclass",
            "tail_type": "class"
        },
        {
            "head": "getProtectionDomain",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "getProtectionDomainSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getProtectionDomain",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "getProtectionDomainRelatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "getProtectionDomain",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "getProtectionDomainDesignPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator#create()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Bean Creation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator#create()",
            "head_type": "method",
            "relation": "have",
            "tail": "Bean creation logic",
            "tail_type": "useSampleCode"
        },
        {
            "head": "Bean creation logic",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "public Object create() {\n    classOnly = false;\n    return createHelper();\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator#create()",
            "head_type": "method",
            "relation": "have",
            "tail": "BeanGenerator is used to create beans dynamically at runtime.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator#create()",
            "head_type": "method",
            "relation": "have",
            "tail": "Design principle involves dynamic generation and manipulation of Java objects.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGeneratorcreateClass()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "class generation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGeneratorcreateClass()",
            "head_type": "method",
            "relation": "have",
            "tail": "createClass() method generates a new class dynamically",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGeneratorcreateClass()",
            "head_type": "method",
            "relation": "have",
            "tail": "The createClass() method is used to generate a new class at runtime",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGeneratorcreateClass()",
            "head_type": "method",
            "relation": "have",
            "tail": "public Object createClass() {\n    classOnly = true;\n    return createHelper();\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator#createHelper()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Bean Generation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator#createHelper()",
            "head_type": "method",
            "relation": "have",
            "tail": "Bean Generation Sample Code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "Bean Generation Sample Code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "Complete Example for Bean Generation",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator#createHelper()",
            "head_type": "method",
            "relation": "have",
            "tail": "Bean Generation Related Concepts",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "Bean Generation Related Concepts",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "Explanation of Bean Generation Concepts",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator#createHelper()",
            "head_type": "method",
            "relation": "have",
            "tail": "Bean Generation Design Principles",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "Bean Generation Design Principles",
            "head_type": "designPrincipleInterpretation",
            "relation": "have",
            "tail": "Design Principles for Bean Generation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator#generateClass(ClassVisitor)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Bean Class Generation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator#generateClass(ClassVisitor)",
            "head_type": "method",
            "relation": "have",
            "tail": "Generates a new bean class at runtime",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "Bean Class Generation",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "ClassVisitor must be provided",
            "tail_type": "useConstraint"
        },
        {
            "head": "Bean Class Generation",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "Dynamic Proxy Creation",
            "tail_type": "useScenario"
        },
        {
            "head": "Bean Class Generation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "public void generateClass(ClassVisitor v) throws Exception { ... }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "Bean Class Generation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Enables runtime generation of bean classes based on provided properties and superclass",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator#generateClass(ClassVisitor)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.BeanGenerator",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator#firstInstance(Class)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "instance_creation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator#firstInstance(Class)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "class_type_restriction",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator#firstInstance(Class)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "object_instantiation",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator#firstInstance(Class)",
            "head_type": "method",
            "relation": "have",
            "tail": "sample_code_for_firstInstance",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator#firstInstance(Class)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.BeanGenerator",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator#firstInstance(Class)",
            "head_type": "method",
            "relation": "have",
            "tail": "related_concept_interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator#firstInstance(Class)",
            "head_type": "method",
            "relation": "have",
            "tail": "design_principle_interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator#nextInstance(Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "generate new instance",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator#nextInstance(Object)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "instance type must be Class or have a Class",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator#nextInstance(Object)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "creating new object instances",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator#nextInstance(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.cglib.reflect.FastClass#newInstance()",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator#nextInstance(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "related to reflection and dynamic class generation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator#nextInstance(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle of flexibility and reusability",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator#nextInstance(Object)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.BeanGenerator",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator#addProperties(BeanGenerator,Map)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "addProperties",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator#addProperties(BeanGenerator,Map)",
            "head_type": "method",
            "relation": "have",
            "tail": "addPropertiesSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "addPropertiesSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "addPropertiesSampleCodeContent",
            "tail_type": "useSampleCodeContent"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator#addProperties(BeanGenerator,Class)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "addProperties",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator#addProperties(BeanGenerator,Class)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "BeanGenerator",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator#addProperties(BeanGenerator,Class)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "Class",
            "tail_type": "class"
        },
        {
            "head": "addProperties",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "addPropertiesSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "addPropertiesSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "addPropertiesCompleteSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator#addProperties(BeanGenerator,PropertyDescriptor[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "addProperties",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator#addProperties(BeanGenerator,PropertyDescriptor[])",
            "head_type": "method",
            "relation": "have",
            "tail": "addPropertiesSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "addPropertiesSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "addPropertiesSampleCodeContent",
            "tail_type": "codeContent"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGeneratorKey",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "newInstance",
            "tail_type": "apiFunction"
        },
        {
            "head": "newInstance",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "newInstance",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "newInstance",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGeneratorKey#newInstance(String,Map)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Bean Generation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGeneratorKey#newInstance(String,Map)",
            "head_type": "method",
            "relation": "have",
            "tail": "Bean Generation Sample Code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "Bean Generation Sample Code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "Complete Java Example",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGeneratorKey#newInstance(String,Map)",
            "head_type": "method",
            "relation": "have",
            "tail": "Bean Generation Design Principles",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "Bean Generation Design Principles",
            "head_type": "designPrincipleInterpretation",
            "relation": "have",
            "tail": "Flexibility and Extensibility",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.security.TestPrincipal",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getName",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.security.TestPrincipal",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "equals",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.security.TestPrincipal",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "hashCode",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.security.TestPrincipal",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.security.TestPrincipal",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.security.TestPrincipal",
            "head_type": "class",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.security.TestPrincipal",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "Principal",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.core.testfixture.security.TestPrincipal#getName()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getName",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.security.TestPrincipal#getName()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.core.testfixture.security.TestPrincipal",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.core.testfixture.security.TestPrincipal",
            "head_type": "class",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.security.TestPrincipal#equals(Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "equality check",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.security.TestPrincipal#equals(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.core.testfixture.security.TestPrincipal#equals(Object) sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.security.TestPrincipal#equals(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.core.testfixture.security.TestPrincipal#equals(Object) related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.security.TestPrincipal#equals(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.core.testfixture.security.TestPrincipal#equals(Object) design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.security.TestPrincipal#equals(Object)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.core.testfixture.security.TestPrincipal",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.core.testfixture.security.TestPrincipal#hashCode()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "hashCode",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.security.TestPrincipal#hashCode()",
            "head_type": "method",
            "relation": "have",
            "tail": "Calculate Hash Code",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.security.TestPrincipal#hashCode()",
            "head_type": "method",
            "relation": "have",
            "tail": "Override Annotation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.security.TestPrincipal#hashCode()",
            "head_type": "method",
            "relation": "have",
            "tail": "Sample Code for hashCode()",
            "tail_type": "useSampleCode"
        },
        {
            "head": "Sample Code for hashCode()",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.core.testfixture.security.TestPrincipal#hashCode()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "Map-based view of a JavaBean",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap",
            "head_type": "class",
            "relation": "constrained_by",
            "tail": "read-only property will be ignored",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap",
            "head_type": "class",
            "relation": "constrained_by",
            "tail": "write-only properties will be returned as null",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap",
            "head_type": "class",
            "relation": "constrained_by",
            "tail": "Removal of objects is not supported",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "Map-based view of a JavaBean",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "JavaBean manipulation",
            "tail_type": "useScenario"
        },
        {
            "head": "Map-based view of a JavaBean",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#create(Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "create a new BeanMap instance",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#create(Object)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "For finer control over the generated instance, use a new instance of BeanMap.Generator instead of this static method.",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#create(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "Helper method to create a new BeanMap. For finer control over the generated instance, use a new instance of BeanMap.Generator instead of this static method. @param bean the JavaBean underlying the map @return a new BeanMap instance",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#create(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "public static BeanMap create(Object bean) { Generator gen = new Generator(); gen.setBean(bean); return gen.create(); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#create(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "This method is a helper to create a new BeanMap instance. It uses a Generator to set the bean and create the instance. This allows for dynamic creation of BeanMap instances based on the provided JavaBean.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#create(Object)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.BeanMap",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#newInstance(Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "create a new BeanMap instance",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#newInstance(Object)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "bean must be a JavaBean",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#newInstance(Object)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "bean objects",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#newInstance(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for creating a new BeanMap instance",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#newInstance(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "BeanMap is a dynamic proxy for JavaBean properties",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#newInstance(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principles behind BeanMap",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#newInstance(Object)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.BeanMap",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#getPropertyType(String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getPropertyType",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#getPropertyType(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#getPropertyType(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "getPropertyType",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#get(Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "BeanMap get Functionality",
            "tail_type": "apiFunction"
        },
        {
            "head": "BeanMap get Functionality",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "BeanMap get Use Sample Code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "BeanMap get Functionality",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "BeanMap get Related Concept Interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "BeanMap get Functionality",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "BeanMap get Design Principle Interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#put(Object,Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "BeanMapPutFunction",
            "tail_type": "apiFunction"
        },
        {
            "head": "BeanMapPutFunction",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "BeanMapPutSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "BeanMapPutFunction",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "BeanMapPutRelatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "BeanMapPutFunction",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "BeanMapPutDesignPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#get(Object,Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "get the property of a bean",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#get(Object,Object)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "bean must be compatible with the type of BeanMap",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#get(Object,Object)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "used statically for multiple beans",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#get(Object,Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for getting property of a bean",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#get(Object,Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "BeanMap can be used statically for multiple beans",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#get(Object,Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle of using BeanMap for multiple beans",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.BeanMap#get(Object,Object)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#put(Object,Object,Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "setBeanProperty",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#put(Object,Object,Object)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "keyMustBeString",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#put(Object,Object,Object)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "staticBeanPropertySetting",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#put(Object,Object,Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "setBeanPropertySampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#put(Object,Object,Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "beanMapStaticUsageInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#put(Object,Object,Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleOfBeanMapPut",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.BeanMap#put(Object,Object,Object)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#setBean(Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "changing the underlying bean",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#setBean(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.cglib.beans.BeanMap",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#setBean(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#setBean(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#setBean(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#getBean()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getBean",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#getBean()",
            "head_type": "method",
            "relation": "have",
            "tail": "Return the bean currently in use by this map.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#getBean()",
            "head_type": "method",
            "relation": "have",
            "tail": "The method returns the current JavaBean being used by the map.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#getBean()",
            "head_type": "method",
            "relation": "have",
            "tail": "public Object getBean() {\n    return bean;\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#clear()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "clearing bean map",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#clear()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "unsupported operation exception",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#clear()",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for clearing bean map",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#clear()",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation for clearing bean map",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#clear()",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation for clearing bean map",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#clear()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.BeanMap",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#containsKey(Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "check key existence",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#containsKey(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.cglib.beans.BeanMap#containsKey(Object) checks if a given key exists in the BeanMap.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#containsKey(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "Design principle: This method follows the principle of encapsulation, providing a simple interface to check key existence without exposing internal details.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#containsKey(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "package com.example;\n\nimport org.springframework.cglib.beans.BeanMap;\n\npublic class Example {\n    public static void main(String[] args) {\n        BeanMap beanMap = BeanMap.create(new MyBean());\n        boolean containsKey = beanMap.containsKey(\"myKey\");\n        System.out.println(\"Contains key: \" + containsKey);\n    }\n}\n\nclass MyBean {\n    private String myKey = \"value\";\n}\n",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#containsValue(Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "check if a value is contained in the BeanMap",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#containsValue(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "Iterate through the key set and compare each value with the given value",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#containsValue(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "The method iterates over the key set, retrieving and comparing each value against the provided value to determine if it exists within the BeanMap.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#containsValue(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "The design principle is to provide a straightforward and efficient way to check for the presence of a value within the BeanMap, ensuring that the operation is performed with minimal overhead.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#size()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "size determination",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#size()",
            "head_type": "method",
            "relation": "have",
            "tail": "Returns the number of key-value mappings in this map.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#size()",
            "head_type": "method",
            "relation": "have",
            "tail": "This method provides a way to determine the number of elements in the map, which is a fundamental operation for any map implementation.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#size()",
            "head_type": "method",
            "relation": "have",
            "tail": "package com.healthMgr.common.email;\n\nimport java.util.Map;\nimport java.util.Set;\n\npublic class SizeExample {\n    public static void main(String[] args) {\n        Map<String, String> map = new java.util.HashMap<>();\n        map.put(\"key1\", \"value1\");\n        map.put(\"key2\", \"value2\");\n        \n        org.springframework.cglib.beans.BeanMap beanMap = org.springframework.cglib.beans.BeanMap.create(map);\n        int size = beanMap.size();\n        System.out.println(\"Size of the map: \" + size);\n    }\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#isEmpty()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "check emptiness",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#isEmpty()",
            "head_type": "method",
            "relation": "have",
            "tail": "This method checks if the BeanMap is empty by comparing the size to zero.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#isEmpty()",
            "head_type": "method",
            "relation": "have",
            "tail": "The design principle followed here is simplicity and readability, ensuring that the method is straightforward and easy to understand.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#isEmpty()",
            "head_type": "method",
            "relation": "have",
            "tail": "package com.healthMgr.common.email;\nimport java.util.Map;\nimport org.springframework.cglib.beans.BeanMap;\n\npublic class OneClass {\n    public static void main(String[] args) {\n        Map<String, Object> map = new HashMap<>();\n        BeanMap beanMap = BeanMap.create(map);\n        boolean isEmpty = beanMap.isEmpty();\n        System.out.println(\"Is BeanMap empty? \" + isEmpty);\n    }\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#remove(Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "remove an element from the BeanMap",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#remove(Object)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "operation not supported",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#remove(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "related to java.util.Map interface",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#remove(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "design follows the principle of least astonishment",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#remove(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for removing an element",
            "tail_type": "useSampleCode"
        },
        {
            "head": "remove an element from the BeanMap",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "removing elements from a map",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.BeanMap#remove(Object)",
            "tail_type": "method"
        },
        {
            "head": "related to java.util.Map interface",
            "head_type": "relatedConceptInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.BeanMap#remove(Object)",
            "tail_type": "method"
        },
        {
            "head": "design follows the principle of least astonishment",
            "head_type": "designPrincipleInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.BeanMap#remove(Object)",
            "tail_type": "method"
        },
        {
            "head": "sample code for removing an element",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.BeanMap#remove(Object)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#putAll(Map)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "mapDataMerging",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#putAll(Map)",
            "head_type": "method",
            "relation": "have",
            "tail": "mapDataMergingSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "mapDataMergingSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "mapDataMergingCompleteExample",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#equals(Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "equality check",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#equals(Object)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "null input",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#equals(Object)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "map comparison",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#equals(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.cglib.beans.BeanMap",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#equals(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#equals(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#equals(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#hashCode()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "calculateHashCode",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#hashCode()",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.cglib.beans.BeanMap",
            "tail_type": "class"
        },
        {
            "head": "calculateHashCode",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "org.springframework.cglib.beans.BeanMap#hashCode()",
            "tail_type": "method"
        },
        {
            "head": "calculateHashCode",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "org.springframework.cglib.beans.BeanMap#hashCode()",
            "tail_type": "useSampleCode"
        },
        {
            "head": "calculateHashCode",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "org.springframework.cglib.beans.BeanMap#hashCode()",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "calculateHashCode",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "org.springframework.cglib.beans.BeanMap#hashCode()",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#entrySet()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "entrySet",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#entrySet()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "optimization needed",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#entrySet()",
            "head_type": "method",
            "relation": "have",
            "tail": "copying key-value pairs",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#entrySet()",
            "head_type": "method",
            "relation": "have",
            "tail": "unmodifiable map",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#entrySet()",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#entrySet()",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#entrySet()",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#entrySet()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.BeanMap",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#values()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "retrieve values from BeanMap",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#values()",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.cglib.beans.BeanMap#values() returns an unmodifiable collection of values.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#values()",
            "head_type": "method",
            "relation": "have",
            "tail": "The design principle is to ensure the immutability of the returned collection, promoting safe usage without unintended side effects.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#values()",
            "head_type": "method",
            "relation": "have",
            "tail": "public Collection values() {\n    Set keys = keySet();\n    List values = new ArrayList(keys.size());\n    for (Iterator it = keys.iterator(); it.hasNext(); ) {\n        values.add(get(it.next()));\n    }\n    return Collections.unmodifiableCollection(values);\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#toString()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "toString",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#toString()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "toString constraints",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#toString()",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "toString scenario",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#toString()",
            "head_type": "method",
            "relation": "have",
            "tail": "toString sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#toString()",
            "head_type": "method",
            "relation": "have",
            "tail": "toString related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#toString()",
            "head_type": "method",
            "relation": "have",
            "tail": "toString design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMap#toString()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "java.util.AbstractMap",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.beans.Generator",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "BeanMap generation",
            "tail_type": "apiFunction"
        },
        {
            "head": "BeanMap generation",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "beanClass must be set",
            "tail_type": "useConstraint"
        },
        {
            "head": "BeanMap generation",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "bean property reflection",
            "tail_type": "useScenario"
        },
        {
            "head": "BeanMap generation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "complete sample code for BeanMap generation",
            "tail_type": "useSampleCode"
        },
        {
            "head": "BeanMap generation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "BeanMapKey interface explanation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "BeanMap generation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "design principles behind dynamic BeanMap generation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.Generator",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "BeanMapKey interface",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.beans.Generator",
            "head_type": "class",
            "relation": "have",
            "tail": "BeanMapKey interface explanation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.Generator",
            "head_type": "class",
            "relation": "have",
            "tail": "design principles behind dynamic BeanMap generation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#setBean(Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "setBean",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#setBean(Object)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "beanTypeConsistency",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#setBean(Object)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "beanSwapping",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#setBean(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "setBeanSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#setBean(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "beanReflection",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#setBean(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "designFlexibility",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "setBeanSampleCode",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.Generator#setBean(Object)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#setBeanClass(Class)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "setBeanClass",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#setBeanClass(Class)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "callBeforeCreate",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#setBeanClass(Class)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "beanClassSupport",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#setBeanClass(Class)",
            "head_type": "method",
            "relation": "have",
            "tail": "setBeanClassSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#setBeanClass(Class)",
            "head_type": "method",
            "relation": "have",
            "tail": "beanClassConcept",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#setBeanClass(Class)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrinciple",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#setBeanClass(Class)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.Generator",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#setRequire(int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "limiting reflected properties",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#setRequire(int)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "require parameter must be a combination of REQUIRE_GETTER and REQUIRE_SETTER",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#setRequire(int)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "controlling which properties are reflected in a generated map",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#setRequire(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "public void setRequire(int require) { this.require = require; }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#setRequire(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "This method is part of the bean generation process, allowing for the limitation of properties that are reflected in the generated map. It ensures that only desired properties are included, potentially enhancing performance and reducing memory usage.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#setRequire(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "The design principle behind this method is to provide fine-grained control over the property reflection process. By allowing the specification of which properties to include, it aligns with the principle of minimizing unnecessary processing and memory usage, which is crucial in environments with resource constraints.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.Generator",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.Generator#setRequire(int)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#getDefaultClassLoader()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getDefaultClassLoader",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#getDefaultClassLoader()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.Generator",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.beans.Generator",
            "head_type": "class",
            "relation": "have",
            "tail": "org.springframework.cglib.beans.Generator#getDefaultClassLoader()",
            "tail_type": "method"
        },
        {
            "head": "getDefaultClassLoader",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "��取默认的类加载器",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "getDefaultClassLoader",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "在Spring框架中，用于加载类的加载器通常遵循双亲委派模型，以确保类的加载优先使用父加载器，只有在父加载器无法加载时才自行加载。",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "getDefaultClassLoader",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "package com.example;\n\nimport org.springframework.cglib.beans.Generator;\n\npublic class Main {\n    public static void main(String[] args) {\n        Generator generator = new Generator();\n        ClassLoader defaultClassLoader = generator.getDefaultClassLoader();\n        System.out.println(\"Default ClassLoader: \" + defaultClassLoader);\n    }\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#getProtectionDomain()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getProtectionDomain",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#getProtectionDomain()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "ReflectUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#getProtectionDomain()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "beanClass",
            "tail_type": "class"
        },
        {
            "head": "getProtectionDomain",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "getProtectionDomain sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getProtectionDomain sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "Complete getProtectionDomain example",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#create()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "create a new instance of BeanMap",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#create()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "beanClass must not be null",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#create()",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "reusing existing generated class if possible",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#create()",
            "head_type": "method",
            "relation": "have",
            "tail": "related to dynamic bean mapping",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#create()",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle of reusing classes for efficiency",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#create()",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for creating BeanMap instance",
            "tail_type": "useSampleCode"
        },
        {
            "head": "create a new instance of BeanMap",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "BeanMap",
            "tail_type": "class"
        },
        {
            "head": "beanClass must not be null",
            "head_type": "useConstraint",
            "relation": "associated_with",
            "tail": "IllegalArgumentException",
            "tail_type": "class"
        },
        {
            "head": "reusing existing generated class if possible",
            "head_type": "useScenario",
            "relation": "associated_with",
            "tail": "class generation efficiency",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "related to dynamic bean mapping",
            "head_type": "relatedConceptInterpretation",
            "relation": "associated_with",
            "tail": "BeanMap",
            "tail_type": "class"
        },
        {
            "head": "design principle of reusing classes for efficiency",
            "head_type": "designPrincipleInterpretation",
            "relation": "associated_with",
            "tail": "class design",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "sample code for creating BeanMap instance",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "BeanMap",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "BeanMapEmitter",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "head_type": "method",
            "relation": "have",
            "tail": "Generate a class using BeanMapEmitter",
            "tail_type": "useSampleCode"
        },
        {
            "head": "BeanMapEmitter",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Generate a class using BeanMapEmitter",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#firstInstance(Class)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "bean instantiation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#firstInstance(Class)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "BeanMap",
            "tail_type": "class"
        },
        {
            "head": "BeanMap",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "BeanMap",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "BeanMap",
            "head_type": "class",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#nextInstance(Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "bean instance generation",
            "tail_type": "apiFunction"
        },
        {
            "head": "bean instance generation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "bean instance generation sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "bean instance generation",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "bean instance generation scenario",
            "tail_type": "useScenario"
        },
        {
            "head": "bean instance generation",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "bean instance generation constraints",
            "tail_type": "useConstraint"
        },
        {
            "head": "bean instance generation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "bean instance generation concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "bean instance generation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "bean instance generation design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#nextInstance(Object)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.BeanMap",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMapKey",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "newInstance",
            "tail_type": "apiFunction"
        },
        {
            "head": "newInstance",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.BeanMapKey",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMapKey",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMapKey",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "newInstance",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMapKey#newInstance(Class,int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "BeanMapKey creation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMapKey#newInstance(Class,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "Creates a new instance of BeanMapKey for a given class and property index.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMapKey#newInstance(Class,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "This method is used to create a new instance of BeanMapKey, which is a part of the CGLIB library. BeanMapKey is typically used in the context of JavaBeans and reflection, where it helps in mapping property names to their respective values in a bean. The method takes two parameters: the class type of the bean and the index of the property for which the BeanMapKey is being created.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMapKey#newInstance(Class,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "java\nimport org.springframework.cglib.beans.BeanMapKey;\nimport java.lang.reflect.Field;\n\nclass Example {\n    public static void main(String[] args) throws NoSuchFieldException {\n        Class<?> clazz = Example.class;\n        Field field = clazz.getDeclaredField(\"exampleField\");\n        int index = 0; // Assuming 'exampleField' is the first field in the class\n        BeanMapKey key = BeanMapKey.newInstance(clazz, index);\n        System.out.println(\"BeanMapKey created: \" + key);\n    }\n\n    private String exampleField = \"example\";\n}\n",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMapEmitter",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "lazy loading",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMapEmitter",
            "head_type": "class",
            "relation": "constrained_by",
            "tail": "circular aliases are prohibited",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMapEmitter",
            "head_type": "class",
            "relation": "applied_to",
            "tail": "multiple aliases for a single name",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMapEmitter",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMapEmitter",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMapEmitter",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.BeanMap",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMapEmitter",
            "head_type": "class",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMapEmitter#makePropertyMap(PropertyDescriptor[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "makePropertyMap",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMapEmitter#makePropertyMap(PropertyDescriptor[])",
            "head_type": "method",
            "relation": "have",
            "tail": "Creates a map from property descriptors",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMapEmitter#makePropertyMap(PropertyDescriptor[])",
            "head_type": "method",
            "relation": "have",
            "tail": "Efficient property mapping",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "makePropertyMap",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "private Map makePropertyMap(PropertyDescriptor[] props) {\n    Map names = new HashMap();\n    for (PropertyDescriptor prop : props) {\n        names.put(prop.getName(), prop);\n    }\n    return names;\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMapEmitter#getNames(Map)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getNames",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMapEmitter#getNames(Map)",
            "head_type": "method",
            "relation": "have",
            "tail": "getNames(Map propertyMap) { return (String[]) propertyMap.keySet().toArray(new String[propertyMap.size()]); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getNames",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "getNames(Map propertyMap) { return (String[]) propertyMap.keySet().toArray(new String[propertyMap.size()]); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMapEmitter#generateConstructor()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "constructorGeneration",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMapEmitter#generateConstructor()",
            "head_type": "method",
            "relation": "have",
            "tail": "constructorGenerationSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "constructorGenerationSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "constructorGenerationCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMapEmitter",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.BeanMapEmitter#generateConstructor()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMapEmitter#generateConstructor()",
            "head_type": "method",
            "relation": "have",
            "tail": "constructorGenerationRelatedConcepts",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMapEmitter#generateConstructor()",
            "head_type": "method",
            "relation": "have",
            "tail": "constructorGenerationDesignPrinciples",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMapEmitter#generateGet(Class,Map)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "BeanMapEmitter#generateGet",
            "tail_type": "apiFunction"
        },
        {
            "head": "BeanMapEmitter#generateGet",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "BeanMapEmitter#generateGet-SampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "BeanMapEmitter#generateGet-SampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "BeanMapEmitter#generateGet-CompleteSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMapEmitter#generatePut(Class,Map)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "generatePut",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMapEmitter#generatePut(Class,Map)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.BeanMapEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMapEmitter",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMapEmitter",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "generatePut",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "useScenario",
            "tail_type": "useScenario"
        },
        {
            "head": "generatePut",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "useConstraint",
            "tail_type": "useConstraint"
        },
        {
            "head": "generatePut",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMapEmitter#generateKeySet(String[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "generateKeySet",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMapEmitter#generateKeySet(String[])",
            "head_type": "method",
            "relation": "have",
            "tail": "Generates a fixed key set for the given array of names",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMapEmitter#generateKeySet(String[])",
            "head_type": "method",
            "relation": "have",
            "tail": "This method is used to create a set of keys for a BeanMap based on the provided names",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMapEmitter#generateKeySet(String[])",
            "head_type": "method",
            "relation": "have",
            "tail": "private void generateKeySet(String[] allNames) {\n    // static initializer\n    declare_field(Constants.ACC_STATIC | Constants.ACC_PRIVATE, \"keys\", FIXED_KEY_SET, null);\n    CodeEmitter e = begin_static();\n    e.new_instance(FIXED_KEY_SET);\n    e.dup();\n    EmitUtils.push_array(e, allNames);\n    e.invoke_constructor(FIXED_KEY_SET, CSTRUCT_STRING_ARRAY);\n    e.putfield(\"keys\");\n    e.return_value();\n    e.end_method();\n    // keySet\n    e = begin_method(Constants.ACC_PUBLIC, KEY_SET, null);\n    e.load_this();\n    e.getfield(\"keys\");\n    e.return_value();\n    e.end_method();\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMapEmitter#generateGetPropertyType(Map,String[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "generateGetPropertyType",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMapEmitter#generateGetPropertyType(Map,String[])",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.cglib.beans.BeanMapEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMapEmitter",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "PropertyDescriptor",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMapEmitter",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "EmitUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMapEmitter",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "Type",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMapEmitter",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMapEmitter",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "Constants",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMapEmitter",
            "head_type": "class",
            "relation": "designPrincipleInterpretation",
            "tail": "The design principle of the BeanMapEmitter class is to provide a mechanism for generating property access methods for JavaBeans at runtime. It leverages the CodeEmitter to dynamically create methods for getting property types based on the property descriptors provided. This approach allows for the creation of efficient and customized property accessors without the need for manual coding, adhering to the principles of code generation and runtime optimization.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMapEmitter",
            "head_type": "class",
            "relation": "relatedConceptInterpretation",
            "tail": "The related concepts include JavaBeans, property descriptors, and runtime code generation. JavaBeans are reusable software components for Java that can be manipulated visually in a builder tool. Property descriptors are used to get and set the properties of a JavaBean. Runtime code generation involves creating code at runtime to enhance performance and flexibility, which is what the BeanMapEmitter facilitates by generating property access methods dynamically.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanMapEmitter#generateGetPropertyType(Map,String[])",
            "head_type": "method",
            "relation": "useSampleCode",
            "tail": "package com.healthMgr.common.email;\nimport java.util.Map;\nimport org.springframework.cglib.beans.BeanMapEmitter;\nimport org.springframework.cglib.beans.PropertyDescriptor;\n\npublic class SampleUsage {\n    public static void main(String[] args) {\n        // Assuming allProps and allNames are properly initialized\n        Map<String, PropertyDescriptor> allProps = Map.of(\n            \"property1\", new PropertyDescriptor(\"property1\", SampleClass.class),\n            \"property2\", new PropertyDescriptor(\"property2\", SampleClass.class)\n        );\n        String[] allNames = {\"property1\", \"property2\"};\n        \n        BeanMapEmitter emitter = new BeanMapEmitter();\n        emitter.generateGetPropertyType(allProps, allNames);\n    }\n}\n\nclass SampleClass {\n    private String property1;\n    private int property2;\n    \n    // Getters and setters\n    public String getProperty1() { return property1; }\n    public void setProperty1(String property1) { this.property1 = property1; }\n    public int getProperty2() { return property2; }\n    public void setProperty2(int property2) { this.property2 = property2; }\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBean",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "create",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBean",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getPropertyValues",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBean",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "setPropertyValues",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBean",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getPropertyTypes",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBean",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getGetters",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBean",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getSetters",
            "tail_type": "apiFunction"
        },
        {
            "head": "create",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getPropertyValues",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "setPropertyValues",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getPropertyTypes",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getGetters",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getSetters",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBean",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBean",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBean#getPropertyValues(Object,Object[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "bulkBeanFunctionality",
            "tail_type": "apiFunction"
        },
        {
            "head": "bulkBeanFunctionality",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "bulkBeanFunctionalityDescription",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "bulkBeanFunctionalityDescription",
            "head_type": "relatedConceptInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.BulkBean",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBean",
            "head_type": "class",
            "relation": "have",
            "tail": "bulkBeanDesignPrinciples",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "bulkBeanDesignPrinciples",
            "head_type": "designPrincipleInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.BulkBean#getPropertyValues(Object,Object[])",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBean#getPropertyValues(Object,Object[])",
            "head_type": "method",
            "relation": "have",
            "tail": "getPropertyValuesSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getPropertyValuesSampleCode",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.BulkBean",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBean#setPropertyValues(Object,Object[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "setPropertyValues",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBean#setPropertyValues(Object,Object[])",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.BulkBean",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBean",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBean",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBean#setPropertyValues(Object,Object[])",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBean#getPropertyValues(Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getPropertyValues",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBean#getPropertyValues(Object)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.BulkBean",
            "tail_type": "class"
        },
        {
            "head": "getPropertyValues",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBean#getPropertyTypes()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getPropertyTypes",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBean#getPropertyTypes()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.BulkBean",
            "tail_type": "class"
        },
        {
            "head": "getPropertyTypes",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getPropertyTypes",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "getPropertyTypes",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBean",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getGetters()",
            "tail_type": "apiFunction"
        },
        {
            "head": "getGetters()",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "public String[] getGetters() { return getters.clone(); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getGetters()",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "This method returns an array of getter method names for the BulkBean.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "getGetters()",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "The method should be used when you need to retrieve all the getter methods of a BulkBean instance.",
            "tail_type": "useScenario"
        },
        {
            "head": "getGetters()",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Ensure that the BulkBean instance is properly initialized before calling this method.",
            "tail_type": "useConstraint"
        },
        {
            "head": "getGetters()",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "This method follows the principle of encapsulation by providing controlled access to the getter methods.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBean",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getSetters()",
            "tail_type": "apiFunction"
        },
        {
            "head": "getSetters()",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "public String[] getSetters() { return setters.clone(); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getSetters()",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "This method returns an array of setter method names for the bean.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "getSetters()",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "The method follows the principle of encapsulation by providing controlled access to the setter methods.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBean#create(Class,String[],String[],Class[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "bean creation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBean#create(Class,String[],String[],Class[])",
            "head_type": "method",
            "relation": "have",
            "tail": "create a BulkBean instance",
            "tail_type": "useSampleCode"
        },
        {
            "head": "create a BulkBean instance",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.BulkBean",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBean#create(Class,String[],String[],Class[])",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "related concept interpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "associated_with",
            "tail": "bean",
            "tail_type": "relatedConcept"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBean#create(Class,String[],String[],Class[])",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "design principle interpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "associated_with",
            "tail": "reflection",
            "tail_type": "designPrinciple"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBeanKey",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "newInstance",
            "tail_type": "apiFunction"
        },
        {
            "head": "newInstance",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "newInstance",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "newInstance",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBeanKey#newInstance(String,String[],String[],String[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "bulkBeanCreation",
            "tail_type": "apiFunction"
        },
        {
            "head": "bulkBeanCreation",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "beanPropertyBatchProcessing",
            "tail_type": "useScenario"
        },
        {
            "head": "bulkBeanCreation",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "typeConsistency",
            "tail_type": "useConstraint"
        },
        {
            "head": "bulkBeanCreation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "sampleCodeForBulkBeanCreation",
            "tail_type": "useSampleCode"
        },
        {
            "head": "bulkBeanCreation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "relatedConceptsBulkBean",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "bulkBeanCreation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "designPrinciplesBulkBean",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBeanKey#newInstance(String,String[],String[],String[])",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.BulkBean",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.beans.Generator",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "generateClass",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.Generator",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "firstInstance",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.Generator",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "nextInstance",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.Generator",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "create",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.Generator",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "setTarget",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.Generator",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "setGetters",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.Generator",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "setSetters",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.Generator",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "setTypes",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.Generator",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getDefaultClassLoader",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.Generator",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getProtectionDomain",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.Generator",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.Generator",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.Generator",
            "head_type": "class",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#setTarget(Class)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Setting Target Class",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#setTarget(Class)",
            "head_type": "method",
            "relation": "have",
            "tail": "Set Target Class Sample Code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "Set Target Class Sample Code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "Complete Example for Setting Target Class",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#setTarget(Class)",
            "head_type": "method",
            "relation": "have",
            "tail": "Related Concept Interpretation for Setting Target Class",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#setTarget(Class)",
            "head_type": "method",
            "relation": "have",
            "tail": "Design Principle Interpretation for Setting Target Class",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#setGetters(String[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Setting Getters",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#setGetters(String[])",
            "head_type": "method",
            "relation": "have",
            "tail": "Setters Configuration",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#setGetters(String[])",
            "head_type": "method",
            "relation": "have",
            "tail": "Related to Bean Generation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#setGetters(String[])",
            "head_type": "method",
            "relation": "have",
            "tail": "Design Principle: Flexibility in Configuration",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#setGetters(String[])",
            "head_type": "method",
            "relation": "have",
            "tail": "package com.example;\n\nimport org.springframework.cglib.beans.Generator;\n\npublic class Example {\n    public static void main(String[] args) {\n        Generator generator = new Generator();\n        String[] getters = {\"getName\"};\n        generator.setGetters(getters);\n    }\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#setSetters(String[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "setter configuration",
            "tail_type": "apiFunction"
        },
        {
            "head": "setter configuration",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "setter configuration allows specifying which setters to use",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "setter configuration",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "used in scenarios where fine-grained control over property setting is needed",
            "tail_type": "useScenario"
        },
        {
            "head": "setter configuration",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "public void setSetters(String[] setters) { this.setters = setters; }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "setter configuration",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "design principle follows the flexibility to configure specific setters for property management",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#setTypes(Class[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Setting Types",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#setTypes(Class[])",
            "head_type": "method",
            "relation": "have",
            "tail": "Set Types Sample Code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#setTypes(Class[])",
            "head_type": "method",
            "relation": "have",
            "tail": "Related Concept Interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#setTypes(Class[])",
            "head_type": "method",
            "relation": "have",
            "tail": "Design Principle Interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.Generator",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.Generator#setTypes(Class[])",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#getDefaultClassLoader()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getDefaultClassLoader",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#getDefaultClassLoader()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.Generator",
            "tail_type": "class"
        },
        {
            "head": "getDefaultClassLoader",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "��取默认类加载器",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.Generator",
            "head_type": "class",
            "relation": "have",
            "tail": "设计原则：使用委托模式，通过代理类访问实际类加载器",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#getDefaultClassLoader()",
            "head_type": "method",
            "relation": "have",
            "tail": "使用示例代码",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#getProtectionDomain()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getProtectionDomain",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#getProtectionDomain()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "ReflectUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#getProtectionDomain()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "ProtectionDomain",
            "tail_type": "class"
        },
        {
            "head": "getProtectionDomain",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "getProtectionDomain() Sample Code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getProtectionDomain() Sample Code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "Complete getProtectionDomain() Example",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#create()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "create objects",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#create()",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for creating objects",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.Generator",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.Generator#create()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#create()",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation for creating objects",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#create()",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation for creating objects",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "tail": "generateClass",
            "head_type": "method",
            "relation": "haveFunction",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "apiFunction"
        },
        {
            "tail": "BulkBeanEmitter",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "class"
        },
        {
            "tail": "getClassName()",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "apiFunction"
        },
        {
            "tail": "target",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "apiFunction"
        },
        {
            "tail": "getters",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "apiFunction"
        },
        {
            "tail": "setters",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "apiFunction"
        },
        {
            "tail": "types",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "apiFunction"
        },
        {
            "tail": "ClassVisitor",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "class"
        },
        {
            "tail": "BulkBeanEmitter",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "class"
        },
        {
            "tail": "getClassName()",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "apiFunction"
        },
        {
            "tail": "target",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "apiFunction"
        },
        {
            "tail": "getters",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "apiFunction"
        },
        {
            "tail": "setters",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "apiFunction"
        },
        {
            "tail": "types",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "apiFunction"
        },
        {
            "tail": "ClassVisitor",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "class"
        },
        {
            "tail": "BulkBeanEmitter",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "class"
        },
        {
            "tail": "getClassName()",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "apiFunction"
        },
        {
            "tail": "target",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "apiFunction"
        },
        {
            "tail": "getters",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "apiFunction"
        },
        {
            "tail": "setters",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "apiFunction"
        },
        {
            "tail": "types",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "apiFunction"
        },
        {
            "tail": "ClassVisitor",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "class"
        },
        {
            "tail": "BulkBeanEmitter",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "class"
        },
        {
            "tail": "getClassName()",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "apiFunction"
        },
        {
            "tail": "target",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "apiFunction"
        },
        {
            "tail": "getters",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "apiFunction"
        },
        {
            "tail": "setters",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "apiFunction"
        },
        {
            "tail": "types",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "apiFunction"
        },
        {
            "tail": "ClassVisitor",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "class"
        },
        {
            "tail": "BulkBeanEmitter",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "class"
        },
        {
            "tail": "getClassName()",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "apiFunction"
        },
        {
            "tail": "target",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "apiFunction"
        },
        {
            "tail": "getters",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "apiFunction"
        },
        {
            "tail": "setters",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "apiFunction"
        },
        {
            "tail": "types",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "apiFunction"
        },
        {
            "tail": "ClassVisitor",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "class"
        },
        {
            "tail": "BulkBeanEmitter",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "class"
        },
        {
            "tail": "getClassName()",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "apiFunction"
        },
        {
            "tail": "target",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "apiFunction"
        },
        {
            "tail": "getters",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "apiFunction"
        },
        {
            "tail": "setters",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "apiFunction"
        },
        {
            "tail": "types",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "apiFunction"
        },
        {
            "tail": "ClassVisitor",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "class"
        },
        {
            "tail": "BulkBeanEmitter",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "class"
        },
        {
            "tail": "getClassName()",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "apiFunction"
        },
        {
            "tail": "target",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "apiFunction"
        },
        {
            "tail": "getters",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "apiFunction"
        },
        {
            "tail": "setters",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "apiFunction"
        },
        {
            "tail": "types",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "apiFunction"
        },
        {
            "tail": "ClassVisitor",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "class"
        },
        {
            "tail": "BulkBeanEmitter",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "class"
        },
        {
            "tail": "getClassName()",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "apiFunction"
        },
        {
            "tail": "target",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "apiFunction"
        },
        {
            "tail": "getters",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "apiFunction"
        },
        {
            "tail": "setters",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "apiFunction"
        },
        {
            "tail": "types",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "apiFunction"
        },
        {
            "tail": "ClassVisitor",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "class"
        },
        {
            "tail": "BulkBeanEmitter",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "class"
        },
        {
            "tail": "getClassName()",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "apiFunction"
        },
        {
            "tail": "target",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "apiFunction"
        },
        {
            "tail": "getters",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "apiFunction"
        },
        {
            "tail": "setters",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "apiFunction"
        },
        {
            "tail": "types",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "apiFunction"
        },
        {
            "tail": "ClassVisitor",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "class"
        },
        {
            "tail": "BulkBeanEmitter",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "class"
        },
        {
            "tail": "getClassName()",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "apiFunction"
        },
        {
            "tail": "target",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "apiFunction"
        },
        {
            "tail": "getters",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "apiFunction"
        },
        {
            "tail": "setters",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "apiFunction"
        },
        {
            "tail": "types",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "apiFunction"
        },
        {
            "tail": "ClassVisitor",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "class"
        },
        {
            "tail": "BulkBeanEmitter",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "class"
        },
        {
            "tail": "getClassName()",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "apiFunction"
        },
        {
            "tail": "target",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "apiFunction"
        },
        {
            "tail": "getters",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "apiFunction"
        },
        {
            "tail": "setters",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#firstInstance(Class)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "instance creation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#firstInstance(Class)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "property copying",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#firstInstance(Class)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "object initialization",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#firstInstance(Class)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "type compatibility",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#firstInstance(Class)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "bean generation",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#firstInstance(Class)",
            "head_type": "method",
            "relation": "have",
            "tail": "related to reflection and object creation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#firstInstance(Class)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle of creating objects dynamically",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#firstInstance(Class)",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for creating an instance",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.Generator",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.Generator#firstInstance(Class)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#nextInstance(Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "instance generation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#nextInstance(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.cglib.beans.Generator#nextInstance(Object) sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#nextInstance(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation for org.springframework.cglib.beans.Generator#nextInstance(Object)",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#nextInstance(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation for org.springframework.cglib.beans.Generator#nextInstance(Object)",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#nextInstance(Object)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.Generator",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.core.testfixture.TestGroupsCondition",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "ExecutionCondition",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.TestGroupsCondition",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "TestGroup support",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.TestGroupsCondition",
            "head_type": "class",
            "relation": "constrained_by",
            "tail": "At least one TestGroup must be declared in @EnabledForTestGroups",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.core.testfixture.TestGroupsCondition",
            "head_type": "class",
            "relation": "applied_to",
            "tail": "Spring's TestGroup",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.core.testfixture.TestGroupsCondition",
            "head_type": "class",
            "relation": "have",
            "tail": "Sample Code for TestGroupsCondition",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.TestGroupsCondition",
            "head_type": "class",
            "relation": "have",
            "tail": "Explanation of ExecutionCondition and TestGroup",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.TestGroupsCondition",
            "head_type": "class",
            "relation": "have",
            "tail": "Design Principles of TestGroupsCondition",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.TestGroupsCondition",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "EnabledForTestGroups",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.core.testfixture.TestGroupsCondition",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "TestGroup",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.core.testfixture.TestGroupsCondition#evaluateExecutionCondition(ExtensionContext)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "evaluateExecutionCondition",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.TestGroupsCondition#evaluateExecutionCondition(ExtensionContext)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "EnabledForTestGroups annotation must declare at least one TestGroup",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.core.testfixture.TestGroupsCondition#evaluateExecutionCondition(ExtensionContext)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "determine if test execution should proceed based on TestGroups",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.core.testfixture.TestGroupsCondition#evaluateExecutionCondition(ExtensionContext)",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for evaluateExecutionCondition",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.TestGroupsCondition#evaluateExecutionCondition(ExtensionContext)",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation for TestGroupsCondition",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.TestGroupsCondition#evaluateExecutionCondition(ExtensionContext)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation for TestGroupsCondition",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.TestGroupsCondition#evaluateExecutionCondition(ExtensionContext)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.core.testfixture.TestGroupsCondition",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.core.testfixture.TimeStamped",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getTimeStamp",
            "tail_type": "apiFunction"
        },
        {
            "head": "getTimeStamp",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Return the timestamp for this object.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "getTimeStamp",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "long getTimeStamp();",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.TimeStamped",
            "head_type": "class",
            "relation": "have",
            "tail": "This interface can be implemented by cacheable objects or cache entries, to enable the freshness of objects to be checked.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.TimeStamped",
            "head_type": "class",
            "relation": "have",
            "tail": "author Rod Johnson",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.TimeStamped#getTimeStamp()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "get timestamp",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.TimeStamped#getTimeStamp()",
            "head_type": "method",
            "relation": "have",
            "tail": "Return the timestamp for this object.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.TimeStamped#getTimeStamp()",
            "head_type": "method",
            "relation": "have",
            "tail": "The timestamp is returned as the number of milliseconds since the Unix epoch.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.TimeStamped#getTimeStamp()",
            "head_type": "method",
            "relation": "have",
            "tail": "package com.healthMgr.common.email;\nimport java.util.Date;\npublic class OneClass {\n    public static void main(String[] args) {\n        long currentTimeMillis = System.currentTimeMillis();\n        System.out.println(\"Current Time inMillis: \" + currentTimeMillis);\n    }\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBeanEmitter",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getPropertyValues",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBeanEmitter",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "setPropertyValues",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBeanEmitter",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "validatePropertyAccessors",
            "tail_type": "apiFunction"
        },
        {
            "head": "getPropertyValues",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode_getPropertyValues",
            "tail_type": "useSampleCode"
        },
        {
            "head": "setPropertyValues",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode_setPropertyValues",
            "tail_type": "useSampleCode"
        },
        {
            "head": "validatePropertyAccessors",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode_validatePropertyAccessors",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBeanEmitter",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.BulkBean",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBeanEmitter",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.BulkBeanException",
            "tail_type": "class"
        },
        {
            "head": "getPropertyValues",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "accessingMultipleProperties",
            "tail_type": "useScenario"
        },
        {
            "head": "setPropertyValues",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "settingMultipleProperties",
            "tail_type": "useScenario"
        },
        {
            "head": "validatePropertyAccessors",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "validatingPropertyAccessors",
            "tail_type": "useScenario"
        },
        {
            "head": "getPropertyValues",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "propertyAccessibility",
            "tail_type": "useConstraint"
        },
        {
            "head": "setPropertyValues",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "propertyAccessibility",
            "tail_type": "useConstraint"
        },
        {
            "head": "getPropertyValues",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "relatedConceptInterpretation_getPropertyValues",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "setPropertyValues",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "relatedConceptInterpretation_setPropertyValues",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "validatePropertyAccessors",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "relatedConceptInterpretation_validatePropertyAccessors",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "getPropertyValues",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "designPrincipleInterpretation_getPropertyValues",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "setPropertyValues",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "designPrincipleInterpretation_setPropertyValues",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "validatePropertyAccessors",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "designPrincipleInterpretation_validatePropertyAccessors",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBeanEmitter#generateGet(Class,Method[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "generateGet",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBeanEmitter#generateGet(Class,Method[])",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.BulkBeanEmitter",
            "tail_type": "class"
        },
        {
            "head": "generateGet",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "code",
            "tail_type": "code"
        },
        {
            "head": "code",
            "head_type": "code",
            "relation": "have",
            "tail": "private void generateGet(final Class target, final Method[] getters) {\n    CodeEmitter e = begin_method(Constants.ACC_PUBLIC, GET_PROPERTY_VALUES, null);\n    if (getters.length > 0) {\n        e.load_arg(0);\n        e.checkcast(Type.getType(target));\n        Local bean = e.make_local();\n        e.store_local(bean);\n        for (int i = 0; i < getters.length; i++) {\n            if (getters[i] != null) {\n                MethodInfo getter = ReflectUtils.getMethodInfo(getters[i]);\n                e.load_arg(1);\n                e.push(i);\n                e.load_local(bean);\n                e.invoke(getter);\n                e.box(getter.getSignature().getReturnType());\n                e.aastore();\n            }\n        }\n    }\n    e.return_value();\n    e.end_method();\n}",
            "tail_type": "string"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBeanEmitter#generateSet(Class,Method[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "generateSet",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBeanEmitter#generateSet(Class,Method[])",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.BulkBeanEmitter",
            "tail_type": "class"
        },
        {
            "head": "generateSet",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "setPropertyValues",
            "tail_type": "useScenario"
        },
        {
            "head": "generateSet",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "completeSampleCode",
            "tail_type": "completeSampleCode"
        },
        {
            "head": "generateSet",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "generateSet",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBeanEmitter#validate(Class,String[],String[],Class[],Method[],Method[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "validateBeanProperties",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBeanEmitter#validate(Class,String[],String[],Class[],Method[],Method[])",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "accessorArrayLengthEqualTypeArrayLength",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBeanEmitter#validate(Class,String[],String[],Class[],Method[],Method[])",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "beanPropertyValidation",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBeanEmitter#validate(Class,String[],String[],Class[],Method[],Method[])",
            "head_type": "method",
            "relation": "have",
            "tail": "beanPropertyValidationSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBeanEmitter#validate(Class,String[],String[],Class[],Method[],Method[])",
            "head_type": "method",
            "relation": "have",
            "tail": "beanPropertyValidationExplanation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBeanEmitter#validate(Class,String[],String[],Class[],Method[],Method[])",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrinciplesForPropertyValidation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBeanEmitter",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.BulkBeanEmitter#validate(Class,String[],String[],Class[],Method[],Method[])",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.core.testfixture.xml.XmlContent",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "assertThat",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.xml.XmlContent",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "from",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.xml.XmlContent",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "of",
            "tail_type": "apiFunction"
        },
        {
            "head": "assertThat",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "XmlContentAssert",
            "tail_type": "class"
        },
        {
            "head": "from",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "XmlContent",
            "tail_type": "class"
        },
        {
            "head": "of",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "XmlContent",
            "tail_type": "class"
        },
        {
            "head": "of",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "StringWriter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.core.testfixture.xml.XmlContent",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "AssertProvider",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.core.testfixture.xml.XmlContent",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "XmlAssert",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.core.testfixture.xml.XmlContent",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "relatedConceptInterpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "AssertProvider to allow XML content assertions. Ultimately delegates to XmlAssert.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.xml.XmlContent#assertThat()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "xml content assertion",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.xml.XmlContent#assertThat()",
            "head_type": "method",
            "relation": "have",
            "tail": "asserts the XML content",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.core.testfixture.xml.XmlContent#assertThat()",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.core.testfixture.xml.XmlContentAssert",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.core.testfixture.xml.XmlContent#assertThat()",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.xml.XmlContent#assertThat()",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.xml.XmlContent#assertThat()",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.xml.XmlContent#from(Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "xmlContentCreation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.xml.XmlContent#from(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "xmlContentCreationSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "xmlContentCreationSampleCode",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "xmlContentCreation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.xml.XmlContent#of(Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "create XmlContent from Object",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.xml.XmlContent#of(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "create XmlContent from Object sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "create XmlContent from Object sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "public static XmlContent of(Object source) {\n    if (source instanceof StringWriter) {\n        return of(source.toString());\n    }\n    return new XmlContent(source);\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBeanException",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "constructor with message and index",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBeanException",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "constructor with cause and index",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBeanException",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getIndex",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBeanException",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getCause",
            "tail_type": "apiFunction"
        },
        {
            "head": "constructor with message and index",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode for constructor with message and index",
            "tail_type": "useSampleCode"
        },
        {
            "head": "constructor with cause and index",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode for constructor with cause and index",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getIndex",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode for getIndex",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getCause",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode for getCause",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBeanException#getIndex()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "apiFunction",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBeanException#getIndex()",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBeanException",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.BulkBeanException#getIndex()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBeanException#getIndex()",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBeanException#getIndex()",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBeanException#getCause()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getCause",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBeanException#getCause()",
            "head_type": "method",
            "relation": "have",
            "tail": "Return the cause of the exception",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBeanException#getCause()",
            "head_type": "method",
            "relation": "have",
            "tail": "public Throwable getCause() { return cause; }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.BulkBeanException",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.BulkBeanException#getCause()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.core.testfixture.xml.XmlContentAssert",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "constructor",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.xml.XmlContentAssert",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "isSimilarTo(Object control)",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.xml.XmlContentAssert",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "isSimilarTo(Object control, Predicate<Node> nodeFilter)",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.xml.XmlContentAssert",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "isSimilarTo(String control, DifferenceEvaluator differenceEvaluator)",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.xml.XmlContentAssert",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "isSimilarToIgnoringWhitespace(Object control)",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.xml.XmlContentAssert",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "isSimilarToIgnoringWhitespace(String control, NodeMatcher nodeMatcher)",
            "tail_type": "apiFunction"
        },
        {
            "head": "constructor",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "XmlContentAssert(Object actual) {\n    super(actual, XmlContentAssert.class);\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "isSimilarTo(Object control)",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "XmlAssert.assertThat(super.actual).and(control).areSimilar();\n    return this;",
            "tail_type": "useSampleCode"
        },
        {
            "head": "isSimilarTo(Object control, Predicate<Node> nodeFilter)",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "XmlAssert.assertThat(super.actual).and(control).withNodeFilter(nodeFilter).areSimilar();\n    return this;",
            "tail_type": "useSampleCode"
        },
        {
            "head": "isSimilarTo(String control, DifferenceEvaluator differenceEvaluator)",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "XmlAssert.assertThat(super.actual).and(control).withDifferenceEvaluator(differenceEvaluator).areSimilar();\n    return this;",
            "tail_type": "useSampleCode"
        },
        {
            "head": "isSimilarToIgnoringWhitespace(Object control)",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "XmlAssert.assertThat(super.actual).and(control).ignoreWhitespace().areSimilar();\n    return this;",
            "tail_type": "useSampleCode"
        },
        {
            "head": "isSimilarToIgnoringWhitespace(String control, NodeMatcher nodeMatcher)",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "XmlAssert.assertThat(super.actual).and(control).ignoreWhitespace().withNodeMatcher(nodeMatcher).areSimilar();\n    return this;",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.xml.XmlContentAssert",
            "head_type": "class",
            "relation": "have",
            "tail": "Assertions exposed by {@link XmlContent}.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.xml.XmlContentAssert",
            "head_type": "class",
            "relation": "have",
            "tail": "Author: Phillip Webb",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.xml.XmlContentAssert#isSimilarTo(Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "XML content similarity assertion",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.xml.XmlContentAssert#isSimilarTo(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "Asserts that two XML contents are similar",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.xml.XmlContentAssert#isSimilarTo(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "Design principle: Behavior-driven development",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.xml.XmlContentAssert#isSimilarTo(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "public XmlContentAssert isSimilarTo(Object control) {\n    XmlAssert.assertThat(super.actual).and(control).areSimilar();\n    return this;\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.xml.XmlContentAssert#isSimilarTo(Object,Predicate<Node>)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "XML content similarity assertion",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.xml.XmlContentAssert#isSimilarTo(Object,Predicate<Node>)",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.core.testfixture.xml.XmlContentAssert#isSimilarTo(Object,Predicate<Node>) sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.xml.XmlContentAssert#isSimilarTo(Object,Predicate<Node>) sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "Complete example of using isSimilarTo method",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "XML content similarity assertion",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "org.springframework.core.testfixture.xml.XmlContentAssert#isSimilarTo(Object,Predicate<Node>) sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.xml.XmlContentAssert#isSimilarTo(Object,Predicate<Node>)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.core.testfixture.xml.XmlContentAssert",
            "tail_type": "class"
        }
    ]
}