{
    "relationships": [
        {
            "head": "org.springframework.cglib.core.ReflectUtils#defineClass(String,byte[],ClassLoader,ProtectionDomain)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "defineClass",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#defineClass(String,byte[],ClassLoader,ProtectionDomain)",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "public static Class defineClass(String className, byte[] b, ClassLoader loader, ProtectionDomain protectionDomain) throws Exception {\n    return defineClass(className, b, loader, protectionDomain, null);\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#defineClass(String,byte[],ClassLoader,ProtectionDomain,Class<?>)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "defineClass",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#defineClass(String,byte[],ClassLoader,ProtectionDomain,Class<?>)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "className must be valid",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#defineClass(String,byte[],ClassLoader,ProtectionDomain,Class<?>)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "class loading",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#defineClass(String,byte[],ClassLoader,ProtectionDomain,Class<?>)",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for dynamic class definition",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#defineClass(String,byte[],ClassLoader,ProtectionDomain,Class<?>)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.ClassLoader",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#defineClass(String,byte[],ClassLoader,ProtectionDomain,Class<?>)",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation for dynamic class definition",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#defineClass(String,byte[],ClassLoader,ProtectionDomain,Class<?>)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation for dynamic class definition",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#setLoadedClassHandler(Consumer<Class<?>>)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Setting Loaded Class Handler",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#setLoadedClassHandler(Consumer<Class<?>>)",
            "head_type": "method",
            "relation": "have",
            "tail": "SetLoadedClassHandler Use Sample Code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#setLoadedClassHandler(Consumer<Class<?>>)",
            "head_type": "method",
            "relation": "have",
            "tail": "Related Concept Interpretation for setLoadedClassHandler",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#setLoadedClassHandler(Consumer<Class<?>>)",
            "head_type": "method",
            "relation": "have",
            "tail": "Design Principle Interpretation for setLoadedClassHandler",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.ReflectUtils#setLoadedClassHandler(Consumer<Class<?>>)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#loadClass(String,ClassLoader)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "class loading",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#loadClass(String,ClassLoader)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "ClassNotFoundException must be handled",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#loadClass(String,ClassLoader)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "initializing classes with static initializers",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#loadClass(String,ClassLoader)",
            "head_type": "method",
            "relation": "have",
            "tail": "public static Class<?> loadClass(String className, ClassLoader classLoader) throws ClassNotFoundException {\n    // Force static initializers to run.\n    Class<?> clazz = Class.forName(className, true, classLoader);\n    Consumer<Class<?>> handlerToUse = loadedClassHandler;\n    if (handlerToUse != null) {\n        handlerToUse.accept(clazz);\n    }\n    return clazz;\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#loadClass(String,ClassLoader)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#loadClass(String,ClassLoader)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#loadClass(String,ClassLoader)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.ReflectUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#findPackageProtected(Class[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "find non-public class",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#findPackageProtected(Class[])",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for finding non-public class",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#findPackageProtected(Class[])",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation for finding non-public class",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#findPackageProtected(Class[])",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation for finding non-public class",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "sample code for finding non-public class",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.ReflectUtils#findPackageProtected(Class[])",
            "tail_type": "method"
        },
        {
            "head": "related concept interpretation for finding non-public class",
            "head_type": "relatedConceptInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.ReflectUtils#findPackageProtected(Class[])",
            "tail_type": "method"
        },
        {
            "head": "design principle interpretation for finding non-public class",
            "head_type": "designPrincipleInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.ReflectUtils#findPackageProtected(Class[])",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#getMethodInfo(Member,int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getMethodInfo",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#getMethodInfo(Member,int)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "ReflectUtils",
            "tail_type": "class"
        },
        {
            "head": "ReflectUtils",
            "head_type": "class",
            "relation": "have",
            "tail": "getMethodInfo",
            "tail_type": "apiFunction"
        },
        {
            "head": "getMethodInfo",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "getMethodInfo Sample Code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getMethodInfo",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "getMethodInfo Related Concept Interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "getMethodInfo",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "getMethodInfo Design Principle Interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#getMethodInfo(Member)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getMethodInfo",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#getMethodInfo(Member)",
            "head_type": "method",
            "relation": "have",
            "tail": "getMethodInfo(Member, Member.getModifiers())",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getMethodInfo(Member, Member.getModifiers())",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.ReflectUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#getMethodInfo(Member)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.ReflectUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#getClassInfo(Class)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getClassInfo",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#getClassInfo(Class)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.TypeUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#getClassInfo(Class)",
            "head_type": "method",
            "relation": "have",
            "tail": "��取类信息",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#getClassInfo(Class)",
            "head_type": "method",
            "relation": "have",
            "tail": "反射机制",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#getClassInfo(Class)",
            "head_type": "method",
            "relation": "have",
            "tail": "获取类的基本信息，包括类型、超类型、接口和修饰符。",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#findMethods(String[],Method[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "findMethods",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#findMethods(String[],Method[])",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "namesAndDescriptors must be even length",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#findMethods(String[],Method[])",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "MethodInterceptorGenerated generated code",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#findMethods(String[],Method[])",
            "head_type": "method",
            "relation": "have",
            "tail": "public static Method[] findMethods(String[] namesAndDescriptors, Method[] methods) {\n    Map map = new HashMap();\n    for (Method method : methods) {\n        map.put(method.getName() + Type.getMethodDescriptor(method), method);\n    }\n    Method[] result = new Method[namesAndDescriptors.length / 2];\n    for (int i = 0; i < result.length; i++) {\n        result[i] = (Method) map.get(namesAndDescriptors[i * 2] + namesAndDescriptors[i * 2 + 1]);\n        if (result[i] == null) {\n            // TODO: error?\n        }\n    }\n    return result;\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#findMethods(String[],Method[])",
            "head_type": "method",
            "relation": "have",
            "tail": "This method is used to find methods based on their names and descriptors, typically in the context of generating dynamic proxies or interceptors.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils#findMethods(String[],Method[])",
            "head_type": "method",
            "relation": "have",
            "tail": "The design principle behind this method is to provide a utility for efficiently mapping method names and descriptors to actual Method objects, facilitating the creation of dynamic proxies.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.ReflectUtils",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.ReflectUtils#findMethods(String[],Method[])",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.core.RejectModifierPredicate",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "reject modifier evaluation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.RejectModifierPredicate",
            "head_type": "class",
            "relation": "have",
            "tail": "reject modifier evaluation sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "reject modifier evaluation sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "package com.example;\nimport org.springframework.cglib.core.RejectModifierPredicate;\npublic class RejectModifierExample {\n    public static void main(String[] args) {\n        RejectModifierPredicate predicate = new RejectModifierPredicate(1);\n        // Example usage\n    }\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.RejectModifierPredicate",
            "head_type": "class",
            "relation": "have",
            "tail": "related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "related concept interpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "This class is used to evaluate whether a member should be rejected based on its modifiers. It is typically used in the context of code generation or reflection, where certain members need to be excluded based on their access modifiers.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.RejectModifierPredicate",
            "head_type": "class",
            "relation": "have",
            "tail": "design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "design principle interpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "have",
            "tail": "The design principle behind RejectModifierPredicate is to provide a flexible and reusable way to filter out members based on their modifiers. This allows for more controlled and selective code generation or reflection operations.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.RejectModifierPredicate#evaluate(Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "evaluate modifiers",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.RejectModifierPredicate#evaluate(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": " modifiers rejection logic",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.RejectModifierPredicate#evaluate(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": " modifiers rejection logic",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.RejectModifierPredicate#evaluate(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": " modifiers rejection logic",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.Signature",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "representation of a method signature",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.Signature",
            "head_type": "class",
            "relation": "have",
            "tail": "A representation of a method signature, containing the method name, return type, and parameter types.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.Signature",
            "head_type": "class",
            "relation": "have",
            "tail": "private String name;\nprivate String desc;\npublic Signature(String name, String desc) {\n    // TODO: better error checking\n    if (name.indexOf('(') >= 0) {\n        throw new IllegalArgumentException(\"Name '\" + name + \"' is invalid\");\n    }\n    this.name = name;\n    this.desc = desc;\n}\npublic Signature(String name, Type returnType, Type[] argumentTypes) {\n    this(name, Type.getMethodDescriptor(returnType, argumentTypes));\n}\npublic String getName() {\n    return name;\n}\npublic String getDescriptor() {\n    return desc;\n}\npublic Type getReturnType() {\n    return Type.getReturnType(desc);\n}\npublic Type[] getArgumentTypes() {\n    return Type.getArgumentTypes(desc);\n}\n@Override\npublic String toString() {\n    return name + desc;\n}\n@Override\npublic boolean equals(Object o) {\n    if (o == null) {\n        return false;\n    }\n    if (!(o instanceof Signature other)) {\n        return false;\n    }\n    return name.equals(other.name) && desc.equals(other.desc);\n}\n@Override\npublic int hashCode() {\n    return name.hashCode() ^ desc.hashCode();\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.Signature#getName()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "apiFunction",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.Signature#getName()",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.Signature#getName()",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.Signature#getName()",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.Signature#getName()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.Signature",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.Signature",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getDescriptor()",
            "tail_type": "apiFunction"
        },
        {
            "head": "getDescriptor()",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "public String getDescriptor() { return desc; }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.Signature",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.SignatureTests",
            "tail_type": "class"
        },
        {
            "head": "getDescriptor()",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "This method returns the descriptor string.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "getDescriptor()",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "The design principle is to provide a simple way to retrieve the descriptor.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.Signature",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getReturnType()",
            "tail_type": "apiFunction"
        },
        {
            "head": "getReturnType()",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "public Type getReturnType() { return Type.getReturnType(desc); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getReturnType()",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "Type",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.Signature",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "Type",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.Signature",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getArgumentTypes()",
            "tail_type": "apiFunction"
        },
        {
            "head": "getArgumentTypes()",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "public Type[] getArgumentTypes() { return Type.getArgumentTypes(desc); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getArgumentTypes()",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "This method is used to retrieve the argument types from a method descriptor.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "getArgumentTypes()",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "The method follows the principle of reflection, allowing for dynamic access to method parameters.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.Signature#toString()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "toStringRepresentation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.Signature#toString()",
            "head_type": "method",
            "relation": "have",
            "tail": "toStringRepresentationSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.Signature#toString()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.Signature",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.Signature#equals(Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "equality check",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.Signature#equals(Object)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "null input",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.Signature#equals(Object)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "object comparison",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.Signature#equals(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.cglib.core.Signature#equals(Object) sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.Signature#equals(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation for org.springframework.cglib.core.Signature#equals(Object)",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.Signature#equals(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation for org.springframework.cglib.core.Signature#equals(Object)",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.Signature",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.Signature#equals(Object)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.core.Signature#hashCode()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "generating a hash code",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.Signature#hashCode()",
            "head_type": "method",
            "relation": "have",
            "tail": "The method overrides the default hashCode behavior to combine hash codes of the name and descriptor.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.Signature#hashCode()",
            "head_type": "method",
            "relation": "have",
            "tail": "public int hashCode() { return name.hashCode() ^ desc.hashCode(); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.Signature#hashCode()",
            "head_type": "method",
            "relation": "have",
            "tail": "The design principle here is to ensure that equal objects have equal hash codes, which is crucial for the correct functioning of hash-based collections.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.SpringNamingPolicy",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "generateClassName",
            "tail_type": "apiFunction"
        },
        {
            "head": "generateClassName",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "prefixConstraints",
            "tail_type": "useConstraint"
        },
        {
            "head": "generateClassName",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "proxyClassCreation",
            "tail_type": "useScenario"
        },
        {
            "head": "generateClassName",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "generateClassNameSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.SpringNamingPolicy",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.SpringNamingPolicy",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "generateClassName",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.reflect.FastClass",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.SpringNamingPolicy#getClassName(String,String,Object,Predicate)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "generateClassName",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.SpringNamingPolicy#getClassName(String,String,Object,Predicate)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "prefixCannotBeJavaOrJavax",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.SpringNamingPolicy#getClassName(String,String,Object,Predicate)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "generateUniqueClassName",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.SpringNamingPolicy#getClassName(String,String,Object,Predicate)",
            "head_type": "method",
            "relation": "have",
            "tail": "generateUniqueClassNameSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.SpringNamingPolicy#getClassName(String,String,Object,Predicate)",
            "head_type": "method",
            "relation": "have",
            "tail": "classNameGenerationExplanation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.SpringNamingPolicy#getClassName(String,String,Object,Predicate)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrinciplesForClassNameGeneration",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "generateClassName",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.SpringNamingPolicy",
            "tail_type": "class"
        },
        {
            "head": "prefixCannotBeJavaOrJavax",
            "head_type": "useConstraint",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.SpringNamingPolicy",
            "tail_type": "class"
        },
        {
            "head": "generateUniqueClassName",
            "head_type": "useScenario",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.SpringNamingPolicy",
            "tail_type": "class"
        },
        {
            "head": "generateUniqueClassNameSampleCode",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.SpringNamingPolicy",
            "tail_type": "class"
        },
        {
            "head": "classNameGenerationExplanation",
            "head_type": "relatedConceptInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.SpringNamingPolicy",
            "tail_type": "class"
        },
        {
            "head": "designPrinciplesForClassNameGeneration",
            "head_type": "designPrincipleInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.SpringNamingPolicy",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.TinyBitSet",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "bitManipulation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TinyBitSet",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "cardinalityCalculation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TinyBitSet",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "bitSetOperations",
            "tail_type": "apiFunction"
        },
        {
            "head": "bitManipulation",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "bitIndexRange",
            "tail_type": "useConstraint"
        },
        {
            "head": "cardinalityCalculation",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "bit31SetInfiniteLoop",
            "tail_type": "useConstraint"
        },
        {
            "head": "bitSetOperations",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "setClearBits",
            "tail_type": "useScenario"
        },
        {
            "head": "bitSetOperations",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "bitSetOperations",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "bitSetOperations",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.TinyBitSet#gcount(int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "counting bits set in an integer",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TinyBitSet#gcount(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "private static int gcount(int x) {\n    int c = 0;\n    while (x != 0) {\n        c++;\n        x &= (x - 1);\n    }\n    return c;\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.TinyBitSet#gcount(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "This method counts the number of bits set to 1 in the binary representation of an integer.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.TinyBitSet#gcount(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "The method utilizes a bitwise operation to efficiently count bits. It repeatedly flips the least significant bit set to 1 until the integer becomes zero, incrementing a counter at each step.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.TinyBitSet#topbit(int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "topbit calculation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TinyBitSet#topbit(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "topbit calculation sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "topbit calculation sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "java\nprivate static int topbit(int i) {\n    int j;\n    for (j = 0; i != 0; i ^= j) {\n        j = i & -i;\n    }\n    return j;\n}\n",
            "tail_type": "code"
        },
        {
            "head": "org.springframework.cglib.core.TinyBitSet#log2(int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "calculate logarithm base 2",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TinyBitSet#log2(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "private static int log2(int i) {\n    int j = 0;\n    for (j = 0; i != 0; i >>= 1) {\n        j++;\n    }\n    return j;\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.TinyBitSet#log2(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "The method calculates the base-2 logarithm of a given integer.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.TinyBitSet#log2(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "This method utilizes bit manipulation to efficiently compute the logarithm base 2 of an integer. It iteratively shifts the integer right until it becomes zero, counting the number of shifts which corresponds to the logarithm value.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.TinyBitSet#length()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "calculate the number of bits needed to represent the set",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TinyBitSet#length()",
            "head_type": "method",
            "relation": "have",
            "tail": "public int length() {\n    return log2(topbit(value));\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.TinyBitSet#length()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.TinyBitSet",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.TinyBitSet#length()",
            "head_type": "method",
            "relation": "have",
            "tail": "This method calculates the number of bits needed to represent the set in the TinyBitSet.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.TinyBitSet#length()",
            "head_type": "method",
            "relation": "have",
            "tail": "The design principle behind this method is to efficiently calculate the bit length required for the set, optimizing memory usage.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.TinyBitSet#cardinality()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "counting bits set to true",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TinyBitSet#cardinality()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "bit 31 set causing infinite loop",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.TinyBitSet#cardinality()",
            "head_type": "method",
            "relation": "have",
            "tail": "counting bits set to true in TinyBitSet",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.TinyBitSet#cardinality()",
            "head_type": "method",
            "relation": "have",
            "tail": "public int cardinality() { int w = value; int c = 0; while (w != 0) { c += T[w & 255]; w >>= 8; } return c; }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.TinyBitSet#cardinality()",
            "head_type": "method",
            "relation": "have",
            "tail": "Counts the number of bits set to true in the TinyBitSet.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.TinyBitSet#cardinality()",
            "head_type": "method",
            "relation": "have",
            "tail": "Efficient bit counting using a lookup table.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.TinyBitSet",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "bit indexing",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TinyBitSet",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.TinyBitSet",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.TinyBitSet#get(int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "bit retrieval",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TinyBitSet#get(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.TinyBitSet#get(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.TinyBitSet#get(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.TinyBitSet#set(int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "setBit",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TinyBitSet#set(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "Set a specific bit in the TinyBitSet.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.TinyBitSet#set(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "public void set(int index) {\n    value |= (1 << index);\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.TinyBitSet#set(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "This method sets the bit at the specified index to true.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.TinyBitSet#clear(int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "bitwise operation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TinyBitSet#clear(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "clears a specific bit in the bit set",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.TinyBitSet#clear(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "public void clear(int index) { value &= ~(1 << index); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.TinyBitSet#clear(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "Bit manipulation is used to clear a specific bit by using bitwise AND with the complement of the bit mask.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.TinyBitSet#clear(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "This method follows the principle of efficiency by directly manipulating bits, which is faster than iterating through elements.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.Transformer",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "transform",
            "tail_type": "apiFunction"
        },
        {
            "head": "transform",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Object transform(Object value);",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.Transformer#transform(Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Object transformation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.Transformer#transform(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "Transforms an object into another object",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.Transformer#transform(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "Design principle: Encapsulation and transformation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.Transformer#transform(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "package com.example;\n\nimport org.springframework.cglib.core.Transformer;\n\npublic class TransformerExample {\n    public static void main(String[] args) {\n        Transformer transformer = new Transformer() {\n            @Override\n            public Object transform(Object value) {\n                // Example transformation logic\n                return value.toString().toUpperCase();\n            }\n        };\n\n        Object result = transformer.transform(\"Hello World\");\n        System.out.println(result);\n    }\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getType",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "isFinal",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "isStatic",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "isProtected",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "isPublic",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "isAbstract",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "isInterface",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "isPrivate",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "isSynthetic",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "isBridge",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getPackageName",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "upperFirst",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getClassName",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "add",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "fromInternalName",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "fromInternalNames",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getStackSize",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "toInternalNames",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "parseSignature",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "parseType",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "parseTypes",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "parseConstructor",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "map",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getBoxedType",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getUnboxedType",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "isArray",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getComponentType",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "isPrimitive",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "emulateClassGetName",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "isConstructor",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getTypes",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "ICONST",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "LCONST",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "FCONST",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "DCONST",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "NEWARRAY",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "escapeType",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#getType(String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Type Retrieval",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#getType(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "Type Retrieval Sample Code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "Type Retrieval Sample Code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "Complete Code Example",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#isFinal(int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "check if a class or method is declared as final",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#isFinal(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for checking final declaration",
            "tail_type": "useSampleCode"
        },
        {
            "head": "check if a class or method is declared as final",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "sample code for checking final declaration",
            "tail_type": "useSampleCode"
        },
        {
            "head": "sample code for checking final declaration",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "java\npackage com.example;\nimport org.springframework.cglib.core.TypeUtils;\n\npublic class FinalCheckExample {\n    public static void main(String[] args) {\n        int access = 16; // Example access value\n        boolean isFinal = TypeUtils.isFinal(access);\n        System.out.println(\"Is final? \" + isFinal);\n    }\n}\n",
            "tail_type": "code"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#isStatic(int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "check if a class member is static",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#isStatic(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "public static boolean isStatic(int access) {\n    return (Constants.ACC_STATIC & access) != 0;\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#isStatic(int)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.TypeUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#isProtected(int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "checkProtectionStatus",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#isProtected(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "Checks if the provided access integer represents a protected access level.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#isProtected(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "This method is used to determine if a given access level, represented by an integer, corresponds to a protected access level. It performs a bitwise AND operation between the access integer and the constant `Constants.ACC_PROTECTED`. If the result is non-zero, it indicates that the access level is protected.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#isProtected(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "java\npackage org.springframework.cglib.core;\n\npublic class TypeUtils {\n    public static boolean isProtected(int access) {\n        return (Constants.ACC_PROTECTED & access) != 0;\n    }\n}\n",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#isPublic(int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "checkPublicAccess",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#isPublic(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "sampleCodeForIsPublic",
            "tail_type": "useSampleCode"
        },
        {
            "head": "checkPublicAccess",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "accessControlScenario",
            "tail_type": "useScenario"
        },
        {
            "head": "checkPublicAccess",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "noConstraints",
            "tail_type": "useConstraint"
        },
        {
            "head": "checkPublicAccess",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "relatedToAccessModifiers",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "checkPublicAccess",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "designPrincipleForPublicAccess",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "sampleCodeForIsPublic",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "completeExampleForIsPublic",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#isAbstract(int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "determining if a type is abstract",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#isAbstract(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for determining if a type is abstract",
            "tail_type": "useSampleCode"
        },
        {
            "head": "sample code for determining if a type is abstract",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "complete example of using isAbstract method",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#isInterface(int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "determine if a type is an interface",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#isInterface(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "public static boolean isInterface(int access) { return (Constants.ACC_INTERFACE & access) != 0; }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#isInterface(int)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.TypeUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#isInterface(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "Checks if the provided access flags indicate that the type is an interface.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#isInterface(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "This method leverages bitwise operations to determine if the Constants.ACC_INTERFACE flag is set in the access flags, indicating an interface type.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#isPrivate(int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "checkPrivacy",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#isPrivate(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.cglib.core.TypeUtils#isPrivate(int) useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#isPrivate(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.cglib.core.TypeUtils#isPrivate(int) relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#isPrivate(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.cglib.core.TypeUtils#isPrivate(int) designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#isPrivate(int)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.TypeUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#isSynthetic(int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "check if a class member is synthetic",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#isSynthetic(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "public static boolean isSynthetic(int access) {\n    return (Constants.ACC_SYNTHETIC & access) != 0;\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#isSynthetic(int)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.TypeUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#isSynthetic(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "Checks if a class member is synthetic by examining its access flags.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#isSynthetic(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "This method is used to determine if a class member was generated by the compiler and not explicitly declared in the source code.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#isBridge(int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "determine if a method is a bridge method",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#isBridge(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "public static boolean isBridge(int access) { return (Constants.ACC_BRIDGE & access) != 0; }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#isBridge(int)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.Constants",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#getPackageName(Type)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "get package name",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#getPackageName(Type)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "JDK version",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#getPackageName(Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "getPackage returns null on JDK 1.2",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.TypeUtils#getPackageName(Type)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getPackageName",
            "tail_type": "apiFunction"
        },
        {
            "head": "getPackageName",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Extract package name from a class name",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "getPackageName",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "public static String getPackageName(String className) {\n    int idx = className.lastIndexOf('.');\n    return (idx < 0) ? \"\" : className.substring(0, idx);\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getPackageName",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "This method is used to extract the package name from a fully qualified class name. It finds the last occurrence of the dot ('.') character, which separates the package name from the class name. If a dot is found, it returns the substring from the beginning up to the dot, which represents the package name. If no dot is found, it indicates that the class name does not contain a package, and an empty string is returned.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#upperFirst(String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "upperFirst",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#upperFirst(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "public static String upperFirst(String s) { if (s == null || s.isEmpty()) { return s; } return Character.toUpperCase(s.charAt(0)) + s.substring(1); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#upperFirst(String)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.TypeUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#getClassName(Type)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getClassName",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#getClassName(Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "getClassNameSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getClassNameSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "getClassNameSampleCodeContent",
            "tail_type": "useSampleCodeContent"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#add(Type[],Type)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "addTypeArray",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#add(Type[],Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "addTypeArraySampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "addTypeArraySampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "Type[] types = new Type[] { Type.FOO, Type.BAR }; Type extra = Type.BAZ; Type[] result = TypeUtils.add(types, extra);",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#add(Type[],Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "addTypeArrayRelatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "addTypeArrayRelatedConceptInterpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "TypeUtils is used to manipulate Java Generics type information.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#add(Type[],Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "addTypeArrayDesignPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "addTypeArrayDesignPrincipleInterpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "have",
            "tail": "This method is designed to ensure immutability and thread-safety by returning a new array instance.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#add(Type[],Type[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Type Array Concatenation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#add(Type[],Type[])",
            "head_type": "method",
            "relation": "have",
            "tail": "Type Array Concatenation Sample Code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "Type Array Concatenation Sample Code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "Complete Type Array Concatenation Example",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#add(Type[],Type[])",
            "head_type": "method",
            "relation": "have",
            "tail": "Type Array Concatenation Design Principle",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#fromInternalName(String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Type Conversion",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#fromInternalName(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "Converts an internal name to a Type object",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#fromInternalName(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "public static Type fromInternalName(String name) { return Type.getType(\"L\" + name + \";\"); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "Type Conversion",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "org.springframework.cglib.core.TypeUtils#fromInternalName(String)",
            "tail_type": "method"
        },
        {
            "head": "Converts an internal name to a Type object",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "org.springframework.cglib.core.TypeUtils#fromInternalName(String)",
            "tail_type": "method"
        },
        {
            "head": "public static Type fromInternalName(String name) { return Type.getType(\"L\" + name + \";\"); }",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.cglib.core.TypeUtils#fromInternalName(String)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#fromInternalNames(String[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Type Conversion",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#fromInternalNames(String[])",
            "head_type": "method",
            "relation": "have",
            "tail": "Converts an array of internal names to an array of Type objects.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#fromInternalNames(String[])",
            "head_type": "method",
            "relation": "have",
            "tail": "public static Type[] fromInternalNames(String[] names) {\n    if (names == null) {\n        return null;\n    }\n    Type[] types = new Type[names.length];\n    for (int i = 0; i < names.length; i++) {\n        types[i] = fromInternalName(names[i]);\n    }\n    return types;\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "Type Conversion",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "Input array must not be null.",
            "tail_type": "useConstraint"
        },
        {
            "head": "Type Conversion",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "Conversion of internal names to Type objects.",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#getStackSize(Type[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getStackSize",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#getStackSize(Type[])",
            "head_type": "method",
            "relation": "have",
            "tail": "Calculates the stack size based on the provided types",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#getStackSize(Type[])",
            "head_type": "method",
            "relation": "have",
            "tail": "public static int getStackSize(Type[] types) {\n    int size = 0;\n    for (Type type : types) {\n        size += type.getSize();\n    }\n    return size;\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#toInternalNames(Type[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "convert type names to internal names",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#toInternalNames(Type[])",
            "head_type": "method",
            "relation": "have",
            "tail": "public static String[] toInternalNames(Type[] types) {\n    if (types == null) {\n        return null;\n    }\n    String[] names = new String[types.length];\n    for (int i = 0; i < types.length; i++) {\n        names[i] = types[i].getInternalName();\n    }\n    return names;\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#toInternalNames(Type[])",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.TypeUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#parseSignature(String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "parseSignature",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#parseSignature(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "parseSignatureUseSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "parseSignatureUseSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.cglib.core.TypeUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#parseType(String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "parseType",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#parseType(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "TypeUtils#parseType(String) useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "TypeUtils#parseType(String) useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "TypeUtils#parseType(String) sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#parseTypes(String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "parseTypes",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#parseTypes(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "Type[] parseTypes(String s)",
            "tail_type": "useSampleCode"
        },
        {
            "head": "Type[] parseTypes(String s)",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.TypeUtils#parseTypes(String)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#parseConstructor(Type[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "parseConstructor",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#parseConstructor(Type[])",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.cglib.core.TypeUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#parseConstructor(Type[])",
            "head_type": "method",
            "relation": "have",
            "tail": "public static Signature parseConstructor(Type[] types) {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"(\");\n    for (Type type : types) {\n        sb.append(type.getDescriptor());\n    }\n    sb.append(\")\");\n    sb.append(\"V\");\n    return new Signature(Constants.CONSTRUCTOR_NAME, sb.toString());\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#parseConstructor(String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "parseConstructor",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#parseConstructor(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.cglib.core.TypeUtils#parseConstructor(String) useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#parseConstructor(String)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.TypeUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#parseTypes(String,int,int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "parseTypes",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#parseTypes(String,int,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.cglib.core.TypeUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#parseTypes(String,int,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "private static List parseTypes(String s, int mark, int end) { List types = new ArrayList(5); for (; ; ) { int next = s.indexOf(',', mark); if (next < 0) { break; } types.add(map(s.substring(mark, next).trim())); mark = next + 1; } types.add(map(s.substring(mark, end).trim())); return types; }",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map",
            "head_type": "method",
            "relation": "haveFunction",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "apiFunction"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "map(String type) { ... }",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)",
            "tail_type": "useSampleCode"
        },
        {
            "head_type": "method",
            "relation": "",
            "head": "org.springframework.cglib.core.TypeUtils#map(String)"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getBoxedType",
            "tail_type": "apiFunction"
        },
        {
            "head": "getBoxedType",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "getBoxedType Sample Code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getBoxedType",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "getBoxedType Related Concept Interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "getBoxedType",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "getBoxedType Design Principle Interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.TypeUtils#getBoxedType(Type)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getUnboxedType",
            "tail_type": "apiFunction"
        },
        {
            "head": "getUnboxedType",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "Type conversion",
            "tail_type": "useScenario"
        },
        {
            "head": "getUnboxedType",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Converts a boxed type to its corresponding unboxed type",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "getUnboxedType",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "public static Type getUnboxedType(Type type) {\n    if (Constants.TYPE_INTEGER.equals(type)) {\n        return Type.INT_TYPE;\n    } else if (Constants.TYPE_BOOLEAN.equals(type)) {\n        return Type.BOOLEAN_TYPE;\n    } else if (Constants.TYPE_DOUBLE.equals(type)) {\n        return Type.DOUBLE_TYPE;\n    } else if (Constants.TYPE_LONG.equals(type)) {\n        return Type.LONG_TYPE;\n    } else if (Constants.TYPE_CHARACTER.equals(type)) {\n        return Type.CHAR_TYPE;\n    } else if (Constants.TYPE_BYTE.equals(type)) {\n        return Type.BYTE_TYPE;\n    } else if (Constants.TYPE_FLOAT.equals(type)) {\n        return Type.FLOAT_TYPE;\n    } else if (Constants.TYPE_SHORT.equals(type)) {\n        return Type.SHORT_TYPE;\n    } else {\n        return type;\n    }\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getUnboxedType",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Design principle: Simplify type handling by providing a utility method to convert boxed types to their unboxed equivalents",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#isArray(Type)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "isArray",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#isArray(Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "Check if a given Type is an array",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#isArray(Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "public static boolean isArray(Type type) {\n    return type.getSort() == Type.ARRAY;\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getComponentType",
            "tail_type": "apiFunction"
        },
        {
            "head": "getComponentType",
            "head_type": "apiFunction",
            "relation": "useSampleCode",
            "tail": "public static Type getComponentType(Type type) {\n    if (!isArray(type)) {\n        throw new IllegalArgumentException(\"Type \" + type + \" is not an array\");\n    }\n    return Type.getType(type.getDescriptor().substring(1));\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getComponentType",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "Input type must be an array",
            "tail_type": "useConstraint"
        },
        {
            "head": "getComponentType",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "Retrieving component type of an array",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.Type",
            "tail_type": "class"
        },
        {
            "head": "getComponentType",
            "head_type": "apiFunction",
            "relation": "relatedConceptInterpretation",
            "tail": "This method is used to obtain the component type of an array type. It checks if the provided type is an array and then extracts the component type by manipulating the type descriptor.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "getComponentType",
            "head_type": "apiFunction",
            "relation": "designPrincipleInterpretation",
            "tail": "The design principle behind this method is to provide a utility to easily access the component type of an array, which is essential for reflection and type manipulation tasks in Java.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#isPrimitive(Type)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "check if a type is primitive",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#isPrimitive(Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for checking if a type is primitive",
            "tail_type": "useSampleCode"
        },
        {
            "head": "sample code for checking if a type is primitive",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "public static boolean isPrimitive(Type type) {\n    return switch(type.getSort()) {\n        case Type.ARRAY, Type.OBJECT ->\n            false;\n        default ->\n            true;\n    };\n}",
            "tail_type": "code"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#emulateClassGetName(Type)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "emulateClassGetName",
            "tail_type": "apiFunction"
        },
        {
            "head": "emulateClassGetName",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "emulateClassGetNameSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "emulateClassGetName",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "emulateClassGetNameRelatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "emulateClassGetName",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "emulateClassGetNameDesignPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#isConstructor(MethodInfo)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Check if a method is a constructor",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#isConstructor(MethodInfo)",
            "head_type": "method",
            "relation": "have",
            "tail": "public static boolean isConstructor(MethodInfo method) {\n    return method.getSignature().getName().equals(Constants.CONSTRUCTOR_NAME);\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#isConstructor(MethodInfo)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.TypeUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getTypes",
            "tail_type": "apiFunction"
        },
        {
            "head": "getTypes",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "Type Conversion",
            "tail_type": "useScenario"
        },
        {
            "head": "getTypes",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Converts an array of Classes to an array of Types",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "getTypes",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "public static Type[] getTypes(Class[] classes) {\n    if (classes == null) {\n        return null;\n    }\n    Type[] types = new Type[classes.length];\n    for (int i = 0; i < classes.length; i++) {\n        types[i] = Type.getType(classes[i]);\n    }\n    return types;\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getTypes",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Efficiently converts class types to their corresponding Type objects",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.Type",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#ICONST(int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "generate integer constants",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#ICONST(int)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "input must be between -1 and 5",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#ICONST(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "public static int ICONST(int value) {\n    return switch(value) {\n        case -1 ->\n            Constants.ICONST_M1;\n        case 0 ->\n            Constants.ICONST_0;\n        case 1 ->\n            Constants.ICONST_1;\n        case 2 ->\n            Constants.ICONST_2;\n        case 3 ->\n            Constants.ICONST_3;\n        case 4 ->\n            Constants.ICONST_4;\n        case 5 ->\n            Constants.ICONST_5;\n        // error\n        default ->\n            -1;\n    };\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#ICONST(int)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.Constants",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#LCONST(long)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "generate Constants for long values",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#LCONST(long)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "value must be 0L or 1L",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#LCONST(long)",
            "head_type": "method",
            "relation": "have",
            "tail": "public static int LCONST(long value) {\n    if (value == 0L) {\n        return Constants.LCONST_0;\n    } else if (value == 1L) {\n        return Constants.LCONST_1;\n    } else {\n        // error\n        return -1;\n    }\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#LCONST(long)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#LCONST(long)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#FCONST(float)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "float constant conversion",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#FCONST(float)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "value must be 0f, 1f, or 2f",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#FCONST(float)",
            "head_type": "method",
            "relation": "have",
            "tail": "public static int FCONST(float value) {\n    if (value == 0f) {\n        return Constants.FCONST_0;\n    } else if (value == 1f) {\n        return Constants.FCONST_1;\n    } else if (value == 2f) {\n        return Constants.FCONST_2;\n    } else {\n        // error\n        return -1;\n    }\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#FCONST(float)",
            "head_type": "method",
            "relation": "have",
            "tail": "Converts float constants to specific integer constants defined in Constants class.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#FCONST(float)",
            "head_type": "method",
            "relation": "have",
            "tail": "This method follows the design principle of simplicity and efficiency by directly mapping specific float values to predefined constants.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#DCONST(double)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "DCONST(double)",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#DCONST(double)",
            "head_type": "method",
            "relation": "have",
            "tail": "public static int DCONST(double value) {\n    if (value == 0d) {\n        return Constants.DCONST_0;\n    } else if (value == 1d) {\n        return Constants.DCONST_1;\n    } else {\n        // error\n        return -1;\n    }\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#DCONST(double)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#DCONST(double)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#NEWARRAY(Type)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "arrayTypeCreation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#NEWARRAY(Type)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "validTypeInput",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#NEWARRAY(Type)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "typeConversion",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#NEWARRAY(Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "typeConversionExample",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#NEWARRAY(Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "typeConversionExplanation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#NEWARRAY(Type)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrinciplesTypeConversion",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.TypeUtils#NEWARRAY(Type)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#escapeType(String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "escaping special characters in type descriptors",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#escapeType(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "StringBuilder used for efficient string concatenation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#escapeType(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "switch statement for character replacement",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#escapeType(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "returning the escaped string",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils#escapeType(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "handling special characters in type descriptors",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.TypeUtils",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.TypeUtils#escapeType(String)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.core.VisibilityPredicate",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "evaluate member visibility",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.VisibilityPredicate",
            "head_type": "class",
            "relation": "constrained_by",
            "tail": "same package restriction for bootstrap classes",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.VisibilityPredicate",
            "head_type": "class",
            "relation": "applied_to",
            "tail": "class generation within the same classloader",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.VisibilityPredicate",
            "head_type": "class",
            "relation": "have",
            "tail": "sample code for evaluating member visibility",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.VisibilityPredicate",
            "head_type": "class",
            "relation": "have",
            "tail": "interpretation of classloader and package visibility",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.VisibilityPredicate",
            "head_type": "class",
            "relation": "have",
            "tail": "design principle for evaluating visibility based on modifiers",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.VisibilityPredicate",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.TypeUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.VisibilityPredicate#evaluate(Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "evaluate member visibility",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.VisibilityPredicate#evaluate(Object)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "Modifier.isPrivate(mod)",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.VisibilityPredicate#evaluate(Object)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "Modifier.isPublic(mod)",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.VisibilityPredicate#evaluate(Object)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "Modifier.isProtected(mod) && protectedOk",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.VisibilityPredicate#evaluate(Object)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "samePackageOk && pkg.equals(TypeUtils.getPackageName(Type.getType(member.getDeclaringClass())))",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.VisibilityPredicate#evaluate(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for evaluate method",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.VisibilityPredicate#evaluate(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "interpretation of member visibility evaluation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.VisibilityPredicate#evaluate(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle of VisibilityPredicate",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.VisibilityPredicate#evaluate(Object)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.VisibilityPredicate",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.core.WeakCacheKey",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "check for object equality",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.WeakCacheKey",
            "head_type": "class",
            "relation": "constrained_by",
            "tail": "the class does not keep strong reference to the target",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.WeakCacheKey",
            "head_type": "class",
            "relation": "have",
            "tail": "This an internal class, thus it might disappear in future cglib releases.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.WeakCacheKey",
            "head_type": "class",
            "relation": "have",
            "tail": "The WeakCacheKey class is designed to allow checking for object equality without maintaining a strong reference to the target object. It overrides the equals, hashCode, and toString methods to provide custom behavior. The equals method checks if the referenced objects are equal according to their own equals method, provided neither reference has expired. The hashCode method returns a precomputed hash code to ensure consistent hashing. The toString method provides a string representation of the referenced object or indicates if the reference has been cleared.",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.WeakCacheKey#equals(Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "equality check",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.WeakCacheKey#equals(Object)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "object type constraint",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.core.WeakCacheKey#equals(Object)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "object comparison",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.WeakCacheKey#equals(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for equality check",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.WeakCacheKey#equals(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "object equality interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.WeakCacheKey#equals(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle for equality",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.WeakCacheKey",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.WeakCacheKey#equals(Object)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.core.WeakCacheKey#hashCode()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "hash code computation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.WeakCacheKey#hashCode()",
            "head_type": "method",
            "relation": "have",
            "tail": "The method computes and returns the hash code of an object.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.WeakCacheKey#hashCode()",
            "head_type": "method",
            "relation": "have",
            "tail": "This method overrides the default hashCode method to provide a custom implementation for hash code calculation.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.WeakCacheKey#hashCode()",
            "head_type": "method",
            "relation": "have",
            "tail": "java\npackage org.springframework.cglib.core;\n\npublic class WeakCacheKey {\n    private int hash;\n\n    @Override\n    public int hashCode() {\n        return hash;\n    }\n}\n",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.core.WeakCacheKey#toString()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "toString()",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.core.WeakCacheKey#toString()",
            "head_type": "method",
            "relation": "have",
            "tail": "Override annotation used",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.core.WeakCacheKey#toString()",
            "head_type": "method",
            "relation": "have",
            "tail": "Returns string representation of the object",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.WeakCacheKey#toString()",
            "head_type": "method",
            "relation": "have",
            "tail": "Design principle: Provide a meaningful string representation of the object",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.core.WeakCacheKey#toString()",
            "head_type": "method",
            "relation": "have",
            "tail": "public String toString() { T t = get(); return t == null ? \"Clean WeakIdentityKey, hash: \" + hash : t.toString(); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.BridgeMethodResolver",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "resolveAll",
            "tail_type": "apiFunction"
        },
        {
            "head": "resolveAll",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "finds all bridge methods that are being called with invokespecial and returns them",
            "tail_type": "useScenario"
        },
        {
            "head": "resolveAll",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "resolveAll() { ... }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.BridgeMethodResolver",
            "head_type": "class",
            "relation": "have",
            "tail": "Uses bytecode reflection to figure out the targets of all bridge methods that use invokespecial and invokeinterface, so that we can later rewrite them to use invokevirtual.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.BridgeMethodResolver",
            "head_type": "class",
            "relation": "have",
            "tail": "Design Principle: Utilize bytecode manipulation to dynamically rewrite method invocations, enhancing compatibility and flexibility in method dispatch.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.BridgeMethodResolver#resolveAll()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "finds all bridge methods",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.BridgeMethodResolver#resolveAll()",
            "head_type": "method",
            "relation": "have",
            "tail": "returns all bridge methods",
            "tail_type": "useSampleCode"
        },
        {
            "head": "finds all bridge methods",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "invokespecial call",
            "tail_type": "useConstraint"
        },
        {
            "head": "finds all bridge methods",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "bridge method resolution",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.proxy.BridgeMethodResolver#resolveAll()",
            "head_type": "method",
            "relation": "have",
            "tail": "bridge method resolution",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.BridgeMethodResolver#resolveAll()",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle of bridge method resolution",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.BridgeMethodResolver#resolveAll()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.proxy.BridgeMethodResolver",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.BridgedFinder",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "bridgedFinder",
            "tail_type": "apiFunction"
        },
        {
            "head": "bridgedFinder",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "eligibilityConstraints",
            "tail_type": "useConstraint"
        },
        {
            "head": "bridgedFinder",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "methodResolution",
            "tail_type": "useScenario"
        },
        {
            "head": "bridgedFinder",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "sampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "bridgedFinder",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "relatedConcepts",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "bridgedFinder",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "designPrinciples",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.BridgedFinder",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.proxy.MethodVisitor",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.BridgedFinder#visit(int,int,String,String,String,String[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "visit method functionality",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.BridgedFinder#visit(int,int,String,String,String,String[])",
            "head_type": "method",
            "relation": "have",
            "tail": "visit method sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "visit method sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "complete sample code for visit method",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.BridgedFinder#visitMethod(int,String,String,String,String[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "visitMethod",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.BridgedFinder#visitMethod(int,String,String,String,String[])",
            "head_type": "method",
            "relation": "have",
            "tail": "visitMethod sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "visitMethod sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "visitMethod sample code content",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.Callback",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "Enhancer",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.Callback",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "MethodInterceptor",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.Callback",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "NoOp",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.Callback",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "LazyLoader",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.Callback",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "Dispatcher",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.Callback",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "InvocationHandler",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.Callback",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "FixedValue",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.Callback",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.proxy.MethodInterceptor",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.Callback",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.proxy.NoOp",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.Callback",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.proxy.LazyLoader",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.Callback",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.proxy.Dispatcher",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.Callback",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "java.lang.reflect.InvocationHandler",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.Callback",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.proxy.FixedValue",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.CallbackFilter",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "map a method to a callback",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.CallbackFilter",
            "head_type": "class",
            "relation": "constrained_by",
            "tail": "correctly implement equals and hashCode for custom CallbackFilter implementations",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.proxy.CallbackFilter",
            "head_type": "class",
            "relation": "applied_to",
            "tail": "Map methods of subclasses generated by Enhancer to a particular callback",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.proxy.CallbackFilter",
            "head_type": "class",
            "relation": "have",
            "tail": "CallbackFilter implementations are supposed to be lightweight as cglib might keep CallbackFilter objects alive to enable caching of generated classes",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.CallbackFilter",
            "head_type": "class",
            "relation": "have",
            "tail": "Prefer using static classes for implementation of CallbackFilter",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.CallbackFilter",
            "head_type": "class",
            "relation": "have",
            "tail": "package com.example.demo; import org.springframework.cglib.proxy.Callback; import org.springframework.cglib.proxy.CallbackFilter; import org.springframework.cglib.proxy.Enhancer; import java.lang.reflect.Method; public class MyCallbackFilter implements CallbackFilter { @Override public int accept(Method method) { // Your logic here return 0; } @Override public boolean equals(Object o) { // Your logic here return false; } }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "map a method to a callback",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.proxy.CallbackFilter",
            "tail_type": "class"
        },
        {
            "head": "map a method to a callback",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "package com.example.demo; import org.springframework.cglib.proxy.Callback; import org.springframework.cglib.proxy.CallbackFilter; import org.springframework.cglib.proxy.Enhancer; import java.lang.reflect.Method; public class MyCallbackFilter implements CallbackFilter { @Override public int accept(Method method) { // Your logic here return 0; } @Override public boolean equals(Object o) { // Your logic here return false; } }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.CallbackFilter#accept(Method)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "map a method to a callback",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.CallbackFilter#accept(Method)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "the method must be intercepted",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.proxy.CallbackFilter#accept(Method)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "index into the array of callbacks",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.proxy.CallbackFilter#accept(Method)",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.CallbackFilter#accept(Method)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.CallbackFilter#accept(Method)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.CallbackFilter#accept(Method)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "Enhancer#setCallbacks",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.proxy.CallbackFilter#equals(Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "equals implementation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.CallbackFilter#equals(Object)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "correct equals and hashCode implementation",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.proxy.CallbackFilter#equals(Object)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "custom CallbackFilter implementations",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.cglib.proxy.CallbackFilter#equals(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.CallbackFilter#equals(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.CallbackFilter#equals(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.CallbackFilter#equals(Object)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.proxy.CallbackFilter",
            "tail_type": "class"
        },
        {
            "head": "equals implementation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "equals implementation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "equals implementation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.CallbackGenerator",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "generate",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.CallbackGenerator",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "generateStatic",
            "tail_type": "apiFunction"
        },
        {
            "head": "generate",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "void generate(ClassEmitter ce, Context context, List methods) throws Exception;",
            "tail_type": "useSampleCode"
        },
        {
            "head": "generateStatic",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "void generateStatic(CodeEmitter e, Context context, List methods) throws Exception;",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.CallbackGenerator",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "ClassEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.CallbackGenerator",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "Context",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.CallbackGenerator",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "List",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.CallbackGenerator",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.CallbackGenerator",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "MethodInfo",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.CallbackGenerator",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "Signature",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.CallbackGenerator#generate(ClassEmitter,Context,List)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "generate callback",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.CallbackGenerator#generate(ClassEmitter,Context,List)",
            "head_type": "method",
            "relation": "have",
            "tail": "void generate(ClassEmitter ce, Context context, List methods) throws Exception;",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.CallbackGenerator#generate(ClassEmitter,Context,List)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.proxy.CallbackGenerator",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.CallbackGenerator",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "callback generation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.CallbackGenerator",
            "head_type": "class",
            "relation": "designPrincipleInterpretation",
            "tail": "CallbackGenerator is designed to dynamically generate callback instances for method interception in the CGLIB proxy creation process. It uses byte-code manipulation to create callbacks that can intercept method calls on proxied objects, enabling features like lazy loading and method advising in Spring AOP.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.CallbackGenerator",
            "head_type": "class",
            "relation": "relatedConceptInterpretation",
            "tail": "CallbackGenerator is related to the concept of dynamic proxies in Java, where a proxy class is created at runtime to intercept method calls to the target object. This is particularly useful in aspect-oriented programming (AOP) frameworks like Spring, where cross-cutting concerns such as logging, security, and transaction management can be applied transparently to Java objects. Callbacks are used to define the behavior when a method is intercepted, allowing for custom logic to be executed before, after, or around the original method call.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.CallbackGenerator#generateStatic(CodeEmitter,Context,List)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "generateStatic",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.CallbackGenerator#generateStatic(CodeEmitter,Context,List)",
            "head_type": "method",
            "relation": "have",
            "tail": "void generateStatic(CodeEmitter e, Context context, List methods) throws Exception;",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.CallbackGenerator",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.proxy.CallbackGenerator#generateStatic(CodeEmitter,Context,List)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.proxy.CallbackGenerator#generateStatic(CodeEmitter,Context,List)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.CallbackGenerator#generateStatic(CodeEmitter,Context,List)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.Context",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getClassLoader",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.Context",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "beginMethod",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.Context",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getOriginalModifiers",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.Context",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getIndex",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.Context",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "emitCallback",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.Context",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getImplSignature",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.Context",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "emitLoadArgsAndInvoke",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.Context#getClassLoader()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "class loading",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.Context#getClassLoader()",
            "head_type": "method",
            "relation": "have",
            "tail": "The getClassLoader() method is used to obtain the ClassLoader associated with the current context.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.Context#getClassLoader()",
            "head_type": "method",
            "relation": "have",
            "tail": "This method adheres to the design principle of encapsulation by providing controlled access to the ClassLoader.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.Context#getClassLoader()",
            "head_type": "method",
            "relation": "have",
            "tail": "package com.example;\n\nimport java.util.*;\n\npublic class ContextExample {\n    public static void main(String[] args) {\n        Context context = new Context();\n        ClassLoader classLoader = context.getClassLoader();\n        System.out.println(classLoader);\n    }\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.Context#beginMethod(ClassEmitter,MethodInfo)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "beginMethod",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.Context#beginMethod(ClassEmitter,MethodInfo)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.proxy.Context",
            "tail_type": "class"
        },
        {
            "head": "beginMethod",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "beginMethod(ClassEmitter ce, MethodInfo method)",
            "tail_type": "useSampleCode"
        },
        {
            "head": "beginMethod(ClassEmitter ce, MethodInfo method)",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "beginMethod(ClassEmitter,MethodInfo)",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.Context#getOriginalModifiers(MethodInfo)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getOriginalModifiers",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.Context#getOriginalModifiers(MethodInfo)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.proxy.Context",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.Context",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.Context",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.Context#getIndex(MethodInfo)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getIndex",
            "tail_type": "apiFunction"
        },
        {
            "head": "getIndex",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "MethodInfo",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.Context#getIndex(MethodInfo)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.Context#getIndex(MethodInfo)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.Context#getIndex(MethodInfo)",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.Context#emitCallback(CodeEmitter,int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "emitCallback",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.Context#emitCallback(CodeEmitter,int)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.proxy.Context",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.Context#emitCallback(CodeEmitter,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "void emitCallback(CodeEmitter ce, int index);",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.Context#getImplSignature(MethodInfo)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "get implementation signature",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.Context#getImplSignature(MethodInfo)",
            "head_type": "method",
            "relation": "have",
            "tail": "get implementation signature sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.proxy.Context#getImplSignature(MethodInfo)",
            "head_type": "method",
            "relation": "have",
            "tail": "get implementation signature related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.Context#getImplSignature(MethodInfo)",
            "head_type": "method",
            "relation": "have",
            "tail": "get implementation signature design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.proxy.Context",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.proxy.Context#getImplSignature(MethodInfo)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.proxy.Context#emitLoadArgsAndInvoke(CodeEmitter,MethodInfo)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "emitLoadArgsAndInvoke",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.proxy.Context#emitLoadArgsAndInvoke(CodeEmitter,MethodInfo)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.proxy.Context",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.Context#emitLoadArgsAndInvoke(CodeEmitter,MethodInfo)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "CodeEmitter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.proxy.Context#emitLoadArgsAndInvoke(CodeEmitter,MethodInfo)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "MethodInfo",
            "tail_type": "class"
        },
        {
            "head": "emitLoadArgsAndInvoke",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "emitLoadArgsAndInvoke",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "emitLoadArgsAndInvoke",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        }
    ]
}