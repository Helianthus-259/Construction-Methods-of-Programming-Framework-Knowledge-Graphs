{
    "relationships": [
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer#isAllocated()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Check if DataBuffer is Allocated",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer#isAllocated()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer#isAllocated()",
            "head_type": "method",
            "relation": "have",
            "tail": "Delegates to PooledDataBuffer to Check Allocation Status",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer#isAllocated()",
            "head_type": "method",
            "relation": "have",
            "tail": "Efficiently Determines Allocation Status of DataBuffer",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer#isAllocated()",
            "head_type": "method",
            "relation": "have",
            "tail": "Design Principle: Delegation for Extensibility",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer#retain()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "retain",
            "tail_type": "apiFunction"
        },
        {
            "head": "retain",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer#retain()",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer#retain()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "DataBufferUtils.retain(dataBuffer())",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer#retain()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.core.DataBuffer",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer#touch(Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "touch(Object)",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer#touch(Object)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "DataBufferUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer#touch(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "touch(Object) sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer#release()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "release data buffer",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer#release()",
            "head_type": "method",
            "relation": "have",
            "tail": "DataBufferUtils.release(dataBuffer())",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer#release()",
            "head_type": "method",
            "relation": "have",
            "tail": "isAllocated()",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer#release()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer#release()",
            "head_type": "method",
            "relation": "have",
            "tail": "Releases the data buffer and checks if it is still allocated",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer#release()",
            "head_type": "method",
            "relation": "have",
            "tail": "Efficient resource management by releasing data buffers properly",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer#factory()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "create instance of LeakAwareDataBufferFactory",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer#factory()",
            "head_type": "method",
            "relation": "have",
            "tail": "return this.dataBufferFactory",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer#factory()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "LeakAwareDataBufferFactory",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer#toString()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "toString()",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer#toString()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer#toString()",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer#toString()",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer#toString()",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Symbol",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "constant pool entry representation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Symbol",
            "head_type": "class",
            "relation": "have",
            "tail": "represents entries in the constant pool, BootstrapMethods attribute, or type table of a class",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Symbol",
            "head_type": "class",
            "relation": "have",
            "tail": "used in Java class file parsing and generation",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Symbol",
            "head_type": "class",
            "relation": "have",
            "tail": "part of the ASM library, which is used to manipulate compiled Java classes",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Symbol",
            "head_type": "class",
            "relation": "have",
            "tail": "Example: Representing a CONSTANT_Class_info structure with tag and index",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Symbol#getArgumentsAndReturnSizes()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getArgumentsAndReturnSizes",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Symbol#getArgumentsAndReturnSizes()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "OnlyForSpecificSymbols",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.Symbol#getArgumentsAndReturnSizes()",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "MethodReferenceSymbols",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Symbol#getArgumentsAndReturnSizes()",
            "head_type": "method",
            "relation": "have",
            "tail": "SampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Symbol#getArgumentsAndReturnSizes()",
            "head_type": "method",
            "relation": "have",
            "tail": "RelatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Symbol#getArgumentsAndReturnSizes()",
            "head_type": "method",
            "relation": "have",
            "tail": "DesignPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Symbol#getArgumentsAndReturnSizes()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Type",
            "tail_type": "class"
        },
        {
            "head": "getArgumentsAndReturnSizes",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "SampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "OnlyForSpecificSymbols",
            "head_type": "useConstraint",
            "relation": "have",
            "tail": "RelatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "MethodReferenceSymbols",
            "head_type": "useScenario",
            "relation": "have",
            "tail": "RelatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "SampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "RelatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "memory leak tracking",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory",
            "head_type": "class",
            "relation": "have",
            "tail": "Implementation of the DataBufferFactory interface that keeps track of memory leaks",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory",
            "head_type": "class",
            "relation": "have",
            "tail": "Useful for unit tests that handle data buffers. Simply inherit from AbstractLeakCheckingTests or call checkForLeaks() in a JUnit after method yourself, and any buffers that have not been released will result in an AssertionError.",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory",
            "head_type": "class",
            "relation": "have",
            "tail": "public void checkForLeaks() { ... }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory",
            "head_type": "class",
            "relation": "have",
            "tail": "public void checkForLeaks(Duration timeout) { ... }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory",
            "head_type": "class",
            "relation": "have",
            "tail": "@Override public DataBuffer allocateBuffer() { ... }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory",
            "head_type": "class",
            "relation": "have",
            "tail": "@Override public DataBuffer allocateBuffer(int initialCapacity) { ... }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory",
            "head_type": "class",
            "relation": "have",
            "tail": "private DataBuffer createLeakAwareDataBuffer(DataBuffer delegateBuffer) { ... }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory",
            "head_type": "class",
            "relation": "have",
            "tail": "@Override public DataBuffer wrap(ByteBuffer byteBuffer) { ... }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory",
            "head_type": "class",
            "relation": "have",
            "tail": "@Override public DataBuffer wrap(byte[] bytes) { ... }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory",
            "head_type": "class",
            "relation": "have",
            "tail": "@Override public DataBuffer join(List<? extends DataBuffer> dataBuffers) { ... }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory",
            "head_type": "class",
            "relation": "have",
            "tail": "@Override public boolean isDirect() { ... }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "memory leak tracking",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "unit tests handling data buffers",
            "tail_type": "useScenario"
        },
        {
            "head": "memory leak tracking",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "buffers must be released to avoid memory leaks",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#checkForLeaks()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "check for leaks",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#checkForLeaks()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "AssertionError thrown if not all data buffers are released",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#checkForLeaks()",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "JUnit after method",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#checkForLeaks()",
            "head_type": "method",
            "relation": "have",
            "tail": "Checks whether all the data buffers allocated by this factory have also been released. If not, then an AssertionError is thrown. Typically used from a JUnit after method.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#checkForLeaks()",
            "head_type": "method",
            "relation": "have",
            "tail": "Design principle: Ensure all allocated resources are properly released to prevent memory leaks.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#checkForLeaks()",
            "head_type": "method",
            "relation": "have",
            "tail": "package com.healthMgr.common.email; import java.xxxx; public class OneClass { // specific code }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#checkForLeaks()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.core.SimpleAliasRegistryTests",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#checkForLeaks(Duration)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "check for leaks",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#checkForLeaks(Duration)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "timeout duration",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#checkForLeaks(Duration)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "buffer release waiting",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#checkForLeaks(Duration)",
            "head_type": "method",
            "relation": "have",
            "tail": "Variant of checkForLeaks() with the option to wait for buffer release",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#checkForLeaks(Duration)",
            "head_type": "method",
            "relation": "have",
            "tail": "Design principle: Efficient resource management and leak detection",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#checkForLeaks(Duration)",
            "head_type": "method",
            "relation": "have",
            "tail": "public void checkForLeaks(Duration timeout) {\n    this.trackCreated.set(false);\n    Instant start = Instant.now();\n    while (true) {\n        if (this.created.stream().noneMatch(LeakAwareDataBuffer::isAllocated)) {\n            return;\n        }\n        if (Instant.now().isBefore(start.plus(timeout))) {\n            try {\n                Thread.sleep(50);\n            } catch (InterruptedException ex) {\n                // ignore\n            }\n            continue;\n        }\n        List<AssertionError> errors = this.created.stream().filter(LeakAwareDataBuffer::isAllocated).map(LeakAwareDataBuffer::leakError).toList();\n        errors.forEach(it -> logger.error(\"Leaked error: \", it));\n        throw new AssertionError(errors.size() + \" buffer leaks detected (see logs above)\");\n    }\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#checkForLeaks(Duration)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#allocateBuffer()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "allocateBuffer",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#allocateBuffer()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "Deprecated",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#allocateBuffer()",
            "head_type": "method",
            "relation": "have",
            "tail": "createLeakAwareDataBuffer",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#allocateBuffer()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#allocateBuffer(int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "allocateBuffer",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#allocateBuffer(int)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory",
            "tail_type": "class"
        },
        {
            "head": "allocateBuffer",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#allocateBuffer(int) sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "createLeakAwareDataBuffer",
            "tail_type": "apiFunction"
        },
        {
            "head": "createLeakAwareDataBuffer",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "createLeakAwareDataBuffer(DataBuffer delegateBuffer)",
            "tail_type": "useSampleCode"
        },
        {
            "head": "createLeakAwareDataBuffer(DataBuffer delegateBuffer)",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "LeakAwareDataBuffer",
            "tail_type": "class"
        },
        {
            "head": "createLeakAwareDataBuffer(DataBuffer delegateBuffer)",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "DataBuffer",
            "tail_type": "class"
        },
        {
            "head": "createLeakAwareDataBuffer",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "createLeakAwareDataBuffer",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#wrap(ByteBuffer)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "wrap ByteBuffer",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#wrap(ByteBuffer)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "LeakAwareDataBufferFactory",
            "tail_type": "class"
        },
        {
            "head": "LeakAwareDataBufferFactory",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "LeakAwareDataBufferFactory",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#wrap(ByteBuffer)",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#wrap(byte[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "wrap",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#wrap(byte[])",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory",
            "head_type": "class",
            "relation": "have",
            "tail": "LeakAwareDataBufferFactory",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory",
            "head_type": "class",
            "relation": "have",
            "tail": "org.springframework.core.testfixture.io.buffer",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#wrap(byte[])",
            "head_type": "method",
            "relation": "have",
            "tail": "public DataBuffer wrap(byte[] bytes) { return this.delegate.wrap(bytes); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#join(List<? extends DataBuffer>)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "join",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#join(List<? extends DataBuffer>)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "LeakAwareDataBuffer",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#join(List<? extends DataBuffer>)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "DataBuffer",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#join(List<? extends DataBuffer>)",
            "head_type": "method",
            "relation": "have",
            "tail": "Remove LeakAwareDataBuffer wrapper so delegate can find native buffers",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#join(List<? extends DataBuffer>)",
            "head_type": "method",
            "relation": "have",
            "tail": "Delegate join operation to underlying DataBuffer",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#join(List<? extends DataBuffer>)",
            "head_type": "method",
            "relation": "have",
            "tail": "public DataBuffer join(List<? extends DataBuffer> dataBuffers) { dataBuffers = dataBuffers.stream().map(o -> o instanceof LeakAwareDataBuffer ? ((LeakAwareDataBuffer) o).dataBuffer() : o).toList(); return new LeakAwareDataBuffer(this.delegate.join(dataBuffers), this); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#isDirect()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "check directness of data buffer",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#isDirect()",
            "head_type": "method",
            "relation": "have",
            "tail": "delegate call to underlying data buffer factory",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#isDirect()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory",
            "tail_type": "class"
        },
        {
            "tail": "qualifiedResource",
            "head_type": "class",
            "relation": "haveFunction",
            "head": "org.springframework.core.testfixture.io.ResourceTestUtils",
            "tail_type": "apiFunction"
        },
        {
            "tail": "loading context configuration XML files within JUnit tests",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "head": "qualifiedResource",
            "tail_type": "useScenario"
        },
        {
            "tail": "public static ClassPathResource qualifiedResource(Class<?> clazz, String resourceSuffix) {\n    return new ClassPathResource(String.format(\"%s-%s",
            "head_type": "apiFunction",
            "relation": "have",
            "head": "qualifiedResource",
            "clazz);\n}": "tail_type\": \"useSampleCode"
        },
        {
            "tail": "Convenience utilities for common operations with test resources.",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.core.testfixture.io.ResourceTestUtils",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "tail": "This class provides utility methods for loading resources in a test context, simplifying the setup and configuration of test cases.",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.core.testfixture.io.ResourceTestUtils",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.io.ResourceTestUtils#qualifiedResource(Class<?>,String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "loading context configuration XML files",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.io.ResourceTestUtils#qualifiedResource(Class<?>,String)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "JUnit tests",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.core.testfixture.io.ResourceTestUtils#qualifiedResource(Class<?>,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "Load a ClassPathResource qualified by the simple name of clazz, and relative to the package for clazz.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.io.ResourceTestUtils#qualifiedResource(Class<?>,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "This method is designed to facilitate the loading of context configuration XML files within JUnit tests by generating a resource path based on the class name and a given suffix.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.io.ResourceTestUtils#qualifiedResource(Class<?>,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "public static ClassPathResource qualifiedResource(Class<?> clazz, String resourceSuffix) {\n    return new ClassPathResource(String.format(\"%s-%s\", clazz.getSimpleName(), resourceSuffix), clazz);\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.io.SerializationTestUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "testSerialization",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.io.SerializationTestUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "isSerializable",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.io.SerializationTestUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "serializeAndDeserialize",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.io.SerializationTestUtils",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "serializeAndDeserialize with expectedType",
            "tail_type": "apiFunction"
        },
        {
            "head": "testSerialization",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "isSerializable",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "serializeAndDeserialize",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "serializeAndDeserialize with expectedType",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.io.SerializationTestUtils",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.io.SerializationTestUtils",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.io.SerializationTestUtils#testSerialization(Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "testSerialization",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.io.SerializationTestUtils#testSerialization(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "SerializationTestUtils",
            "tail_type": "class"
        },
        {
            "head": "SerializationTestUtils",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.core.testfixture.io.SerializationTestUtils",
            "tail_type": "class"
        },
        {
            "head": "testSerialization",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "SerializationTestUtils",
            "tail_type": "class"
        },
        {
            "head": "testSerialization",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "SerializationTestUtils",
            "tail_type": "useSampleCode"
        },
        {
            "head": "SerializationTestUtils",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "SerializationTestUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.core.testfixture.io.SerializationTestUtils#isSerializable(Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Serialization Testing",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.io.SerializationTestUtils#isSerializable(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "Serialization Test Sample Code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "Serialization Test Sample Code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "Complete Serialization Test Example",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.io.SerializationTestUtils#isSerializable(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "Serialization Concept Interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.io.SerializationTestUtils#isSerializable(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "Design Principle of Serialization Testing",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.io.SerializationTestUtils#serializeAndDeserialize(T)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Object Serialization and Deserialization",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.io.SerializationTestUtils#serializeAndDeserialize(T)",
            "head_type": "method",
            "relation": "have",
            "tail": "SerializationTestUtils Example",
            "tail_type": "useSampleCode"
        },
        {
            "head": "SerializationTestUtils Example",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "Complete Example of Serialization and Deserialization",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.io.SerializationTestUtils#serializeAndDeserialize(T)",
            "head_type": "method",
            "relation": "have",
            "tail": "Serialization and Deserialization Explanation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "Serialization and Deserialization Explanation",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "Detailed Description of Object Serialization and Deserialization",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.io.SerializationTestUtils#serializeAndDeserialize(T)",
            "head_type": "method",
            "relation": "have",
            "tail": "Design Principles of SerializationTestUtils",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "Design Principles of SerializationTestUtils",
            "head_type": "designPrincipleInterpretation",
            "relation": "have",
            "tail": "Principles Behind Serialization and Deserialization",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.io.SerializationTestUtils#serializeAndDeserialize(Object,Class<T>)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Object Serialization and Deserialization",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.io.SerializationTestUtils#serializeAndDeserialize(Object,Class<T>)",
            "head_type": "method",
            "relation": "have",
            "tail": "Serialization and Deserialization of Java Objects",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.io.SerializationTestUtils#serializeAndDeserialize(Object,Class<T>)",
            "head_type": "method",
            "relation": "have",
            "tail": "Design Principles for Object Serialization",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.io.SerializationTestUtils#serializeAndDeserialize(Object,Class<T>)",
            "head_type": "method",
            "relation": "have",
            "tail": "Complete Example for Object Serialization and Deserialization",
            "tail_type": "useSampleCode"
        },
        {
            "head": "Object Serialization and Deserialization",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "Object must implement Serializable interface",
            "tail_type": "useConstraint"
        },
        {
            "head": "Object Serialization and Deserialization",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "Deep Copying of Objects",
            "tail_type": "useScenario"
        },
        {
            "head": "Serialization and Deserialization of Java Objects",
            "head_type": "relatedConceptInterpretation",
            "relation": "associated_with",
            "tail": "Java Serialization API",
            "tail_type": "class"
        },
        {
            "head": "Design Principles for Object Serialization",
            "head_type": "designPrincipleInterpretation",
            "relation": "associated_with",
            "tail": "Object Serialization and Deserialization",
            "tail_type": "apiFunction"
        },
        {
            "head": "Complete Example for Object Serialization and Deserialization",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.core.testfixture.io.SerializationTestUtils#serializeAndDeserialize(Object,Class<T>)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.core.testfixture.JavaUtilLoggingConfigurer",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "JUnit Platform TestExecutionListener",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.JavaUtilLoggingConfigurer",
            "head_type": "class",
            "relation": "have",
            "tail": "Configure Java Util Logging from a file",
            "tail_type": "useScenario"
        },
        {
            "head": "Configure Java Util Logging from a file",
            "head_type": "useScenario",
            "relation": "have",
            "tail": "public static final String JUL_TEST_PROPERTIES_FILE = \"jul-test.properties\"; @Override public void testPlanExecutionStarted(TestPlan testPlan) { try (InputStream inputStream = getClass().getClassLoader().getResourceAsStream(JUL_TEST_PROPERTIES_FILE)) { LogManager.getLogManager().readConfiguration(inputStream); } catch (Exception ex) { System.err.println(\"WARNING: failed to configure Java Util Logging from classpath resource \" + JUL_TEST_PROPERTIES_FILE); System.err.println(ex); } }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.JavaUtilLoggingConfigurer",
            "head_type": "class",
            "relation": "have",
            "tail": "JUnit Platform TestExecutionListener that configures Java Util Logging (JUL) from a file named jul-test.properties in the root of the classpath. This allows for projects to configure JUL for a test suite, analogous to log4j's support via log4j2-test.xml. This listener can be automatically registered on the JUnit Platform by adding the fully qualified name of this class to a file named /META-INF/services/org.junit.platform.launcher.TestExecutionListener — for example, under src/test/resources.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.JavaUtilLoggingConfigurer",
            "head_type": "class",
            "relation": "have",
            "tail": "JUnit Platform TestExecutionListener that configures Java Util Logging (JUL) from a file named jul-test.properties in the root of the classpath. This allows for projects to configure JUL for a test suite, analogous to log4j's support via log4j2-test.xml. This listener can be automatically registered on the JUnit Platform by adding the fully qualified name of this class to a file named /META-INF/services/org.junit.platform.launcher.TestExecutionListener — for example, under src/test/resources.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.JavaUtilLoggingConfigurer#testPlanExecutionStarted(TestPlan)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "configure Java Util Logging",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.JavaUtilLoggingConfigurer#testPlanExecutionStarted(TestPlan)",
            "head_type": "method",
            "relation": "have",
            "tail": "InputStream inputStream = getClass().getClassLoader().getResourceAsStream(JUL_TEST_PROPERTIES_FILE)",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.JavaUtilLoggingConfigurer#testPlanExecutionStarted(TestPlan)",
            "head_type": "method",
            "relation": "have",
            "tail": "LogManager.getLogManager().readConfiguration(inputStream)",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.JavaUtilLoggingConfigurer#testPlanExecutionStarted(TestPlan)",
            "head_type": "method",
            "relation": "have",
            "tail": "System.err.println(\"WARNING: failed to configure Java Util Logging from classpath resource \" + JUL_TEST_PROPERTIES_FILE); System.err.println(ex);",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.JavaUtilLoggingConfigurer#testPlanExecutionStarted(TestPlan)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.JavaUtilLoggingConfigurer#testPlanExecutionStarted(TestPlan)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.JavaUtilLoggingConfigurer#testPlanExecutionStarted(TestPlan)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "JavaUtilLoggingConfigurer",
            "tail_type": "class"
        },
        {
            "head": "JavaUtilLoggingConfigurer",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "configure Java Util Logging",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.SymbolTable#copyBootstrapMethods(ClassReader,char[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "copyBootstrapMethods",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.SymbolTable#copyBootstrapMethods(ClassReader,char[])",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "initialize SymbolTable with bootstrap methods",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.SymbolTable#copyBootstrapMethods(ClassReader,char[])",
            "head_type": "method",
            "relation": "have",
            "tail": "SymbolTable initialization with bootstrap methods",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.SymbolTable#copyBootstrapMethods(ClassReader,char[])",
            "head_type": "method",
            "relation": "related_to",
            "tail": "SymbolTable",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#copyBootstrapMethods(ClassReader,char[])",
            "head_type": "method",
            "relation": "design_principle",
            "tail": "Efficiently managing symbol table entries",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.ClassReader",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.SymbolTable#getSource()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getSource",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.SymbolTable#getSource()",
            "head_type": "method",
            "relation": "have",
            "tail": "Returns the ClassReader from which this SymbolTable was constructed.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getSource",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.SymbolTable",
            "head_type": "class",
            "relation": "have",
            "tail": "Returns the ClassReader from which this SymbolTable was constructed.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "getSource",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Returns the ClassReader from which this SymbolTable was constructed.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "getSource",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "null if it was constructed from scratch",
            "tail_type": "useConstraint"
        },
        {
            "head": "getSource",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "ClassReader",
            "tail_type": "useScenario"
        },
        {
            "head": "getSource",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "public ClassReader getSource() { return sourceClassReader; }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.SymbolTable",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getMajorVersion()",
            "tail_type": "apiFunction"
        },
        {
            "head": "getMajorVersion()",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Returns the major version of the class to which this symbol table belongs.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable",
            "head_type": "class",
            "relation": "have",
            "tail": "Returns the major version of the class to which this symbol table belongs.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable",
            "head_type": "class",
            "relation": "have",
            "tail": "SymbolTable",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable",
            "head_type": "class",
            "relation": "have",
            "tail": "The SymbolTable class is responsible for managing the symbol table of a class, which contains information about the class's fields, methods, and other members. It is used during the compilation process to ensure that the class file is valid and can be executed correctly.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable",
            "head_type": "class",
            "relation": "have",
            "tail": "package com.example; import org.springframework.asm.SymbolTable; public class ExampleClass { public static void main(String[] args) { SymbolTable symbolTable = new SymbolTable(); int majorVersion = symbolTable.getMajorVersion(); System.out.println(\"Major Version: \" + majorVersion); } }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.SymbolTable",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getClassName",
            "tail_type": "apiFunction"
        },
        {
            "head": "getClassName",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Returns the internal name of the class to which this symbol table belongs.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "getClassName",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "java\npackage org.springframework.asm;\n\npublic class SymbolTable {\n    private String className;\n\n    public String getClassName() {\n        return className;\n    }\n}\n",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.SymbolTable#setMajorVersionAndClassName(int,String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Setting major version and class name",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.SymbolTable#setMajorVersionAndClassName(int,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "Adding class name to constant pool",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.SymbolTable#setMajorVersionAndClassName(int,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "SymbolTable",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.SymbolTable#setMajorVersionAndClassName(int,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "Returns constant pool index of new or existing Symbol",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.SymbolTable#setMajorVersionAndClassName(int,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "Related to class file structure and symbol management",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#setMajorVersionAndClassName(int,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "Design principle of efficient symbol management",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getConstantPoolCount()",
            "tail_type": "apiFunction"
        },
        {
            "head": "getConstantPoolCount()",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.asm.SymbolTable",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.SymbolTable",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getConstantPoolLength()",
            "tail_type": "apiFunction"
        },
        {
            "head": "getConstantPoolLength()",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Returns the length in bytes of this symbol table's constant_pool array.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "getConstantPoolLength()",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "package com.healthMgr.common.email; import java.xxxx; public class OneClass { // specific code }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.SymbolTable#putConstantPool(ByteVector)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "putsConstantPoolArray",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.SymbolTable#putConstantPool(ByteVector)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "outputMustBeValidByteVector",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.SymbolTable#putConstantPool(ByteVector)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "storingConstantPoolInByteVector",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.SymbolTable#putConstantPool(ByteVector)",
            "head_type": "method",
            "relation": "have",
            "tail": "sampleCodeForPutConstantPool",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.SymbolTable#putConstantPool(ByteVector)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretationForSymbolTable",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#putConstantPool(ByteVector)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretationForSymbolTable",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#putConstantPool(ByteVector)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.SymbolTable#computeBootstrapMethodsSize()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "compute size of BootstrapMethods attribute",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.SymbolTable#computeBootstrapMethodsSize()",
            "head_type": "method",
            "relation": "have",
            "tail": "Returns the size in bytes of this symbol table's BootstrapMethods attribute. Also adds the attribute name in the constant pool.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#computeBootstrapMethodsSize()",
            "head_type": "method",
            "relation": "have",
            "tail": "The method 'computeBootstrapMethodsSize' calculates the size in bytes of the BootstrapMethods attribute in the symbol table. It checks if the bootstrapMethods array is not null. If it is not null, it adds the UTF-8 encoded attribute name to the constant pool and returns the size which is 8 bytes plus the length of the bootstrapMethods array. If it is null, it simply returns 0.",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.SymbolTable#computeBootstrapMethodsSize()",
            "head_type": "method",
            "relation": "have",
            "tail": "The design principle behind 'computeBootstrapMethodsSize' is to efficiently calculate the size of the BootstrapMethods attribute by leveraging the structure of the symbol table and ensuring that the attribute name is correctly added to the constant pool for further processing.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#putBootstrapMethods(ByteVector)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "puts symbol table's BootstrapMethods attribute",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.SymbolTable#putBootstrapMethods(ByteVector)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "output must be a valid ByteVector",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.SymbolTable#putBootstrapMethods(ByteVector)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "storing BootstrapMethods attribute in ByteVector",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.SymbolTable#putBootstrapMethods(ByteVector)",
            "head_type": "method",
            "relation": "have",
            "tail": "void putBootstrapMethods(final ByteVector output) { if (bootstrapMethods != null) { output.putShort(addConstantUtf8(Constants.BOOTSTRAP_METHODS)).putInt(bootstrapMethods.length + 2).putShort(bootstrapMethodCount).putByteArray(bootstrapMethods.data, 0, bootstrapMethods.length); } }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.SymbolTable#putBootstrapMethods(ByteVector)",
            "head_type": "method",
            "relation": "have",
            "tail": "related to JVM specifications for BootstrapMethods attribute",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#putBootstrapMethods(ByteVector)",
            "head_type": "method",
            "relation": "have",
            "tail": "design follows JVM attribute structure for BootstrapMethods",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#putBootstrapMethods(ByteVector)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.ByteVector",
            "tail_type": "class"
        },
        {
            "tail": "get entries by hash code",
            "head_type": "class",
            "relation": "haveFunction",
            "head": "org.springframework.asm.SymbolTable",
            "tail_type": "apiFunction"
        },
        {
            "tail": "hashCode must be valid",
            "head_type": "class",
            "relation": "constrained_by",
            "head": "org.springframework.asm.SymbolTable",
            "tail_type": "useConstraint"
        },
        {
            "tail": "hash table implementation",
            "head_type": "class",
            "relation": "applied_to",
            "head": "org.springframework.asm.SymbolTable",
            "tail_type": "useScenario"
        },
        {
            "tail": "get entries by hash code sample code",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.asm.SymbolTable",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "hash table concept",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.asm.SymbolTable",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "tail": "design principles of SymbolTable",
            "head_type": "class",
            "relation": "have",
            "head": "org.springframework.asm.SymbolTable",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "tail": "org.springframework.asm.Entry",
            "head_type": "class",
            "relation": "associated_with",
            "head": "org.springframework.asm.SymbolTable",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.SymbolTable#put(Entry)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "hash table insertion",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.SymbolTable#put(Entry)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "entry must not already be contained",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.SymbolTable#put(Entry)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "avoid hash collisions",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.SymbolTable#put(Entry)",
            "head_type": "method",
            "relation": "have",
            "tail": "resize hash table if necessary",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.SymbolTable#put(Entry)",
            "head_type": "method",
            "relation": "have",
            "tail": "hash collision avoidance",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#put(Entry)",
            "head_type": "method",
            "relation": "have",
            "tail": "efficient hash table management",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable#put(Entry)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.SymbolTable#add(Entry)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "addEntryToHashSet",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.SymbolTable#add(Entry)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "entryNotInHashSet",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.SymbolTable#add(Entry)",
            "head_type": "method",
            "relation": "have",
            "tail": "addEntryToHashSetSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.SymbolTable#add(Entry)",
            "head_type": "method",
            "relation": "have",
            "tail": "addEntryToHashSetRelatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#add(Entry)",
            "head_type": "method",
            "relation": "have",
            "tail": "addEntryToHashSetDesignPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "addEntryToHashSetSampleCode",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable#add(Entry)",
            "tail_type": "method"
        },
        {
            "head": "addEntryToHashSetRelatedConceptInterpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable#add(Entry)",
            "tail_type": "method"
        },
        {
            "head": "addEntryToHashSetDesignPrincipleInterpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable#add(Entry)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstant(Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "addConstant",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstant(Object)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "valueTypeConstraint",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstant(Object)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "constantPoolManagement",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstant(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "addConstantSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstant(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstant(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "addConstant",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable",
            "tail_type": "class"
        },
        {
            "head": "valueTypeConstraint",
            "head_type": "useConstraint",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable#addConstant(Object)",
            "tail_type": "method"
        },
        {
            "head": "constantPoolManagement",
            "head_type": "useScenario",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable#addConstant(Object)",
            "tail_type": "method"
        },
        {
            "head": "addConstantSampleCode",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable#addConstant(Object)",
            "tail_type": "method"
        },
        {
            "head": "relatedConceptInterpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable#addConstant(Object)",
            "tail_type": "method"
        },
        {
            "head": "designPrincipleInterpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable#addConstant(Object)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantClass(String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "add CONSTANT_Class_info",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantClass(String)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "constant pool already contains a similar item",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantClass(String)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "internal name of a class",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantClass(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "Symbol addConstantUtf8Reference(Symbol.CONSTANT_CLASS_TAG, value)",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantClass(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantClass(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantClass(String)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantFieldref(String,String,String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "addConstantFieldref",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantFieldref(String,String,String)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "constant pool already contains a similar item",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantFieldref(String,String,String)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "adding CONSTANT_Fieldref_info to the constant pool",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantFieldref(String,String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "Symbol addConstantFieldref(final String owner, final String name, final String descriptor) { return addConstantMemberReference(Symbol.CONSTANT_FIELDREF_TAG, owner, name, descriptor); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantFieldref(String,String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantFieldref(String,String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantFieldref(String,String,String)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantMethodref(String,String,String,boolean)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "add CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantMethodref(String,String,String,boolean)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "constant pool already contains a similar item",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantMethodref(String,String,String,boolean)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "internal name of a class",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantMethodref(String,String,String,boolean)",
            "head_type": "method",
            "relation": "have",
            "tail": "Symbol addConstantMethodref(final String owner, final String name, final String descriptor, final boolean isInterface)",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantMethodref(String,String,String,boolean)",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantMethodref(String,String,String,boolean)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantMethodref(String,String,String,boolean)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantMemberReference(int,String,String,String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "addConstantMemberReference",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantMemberReference(int,String,String,String)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": " CONSTANT_Fieldref_info, CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantMemberReference(int,String,String,String)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "add CONSTANT_Fieldref_info, CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantMemberReference(int,String,String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "private Entry addConstantMemberReference(final int tag, final String owner, final String name, final String descriptor)",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantMemberReference(int,String,String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "Adds a CONSTANT_Fieldref_info, CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table. Does nothing if the constant pool already contains a similar item.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantMemberReference(int,String,String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "Design Principle: Efficiently manage the constant pool by avoiding duplication and ensuring uniqueness.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantMemberReference(int,String,String,String)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantMemberReference(int,int,String,String,String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "addConstantMemberReference",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantMemberReference(int,int,String,String,String)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "index, tag, owner, name, descriptor must be valid",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantMemberReference(int,int,String,String,String)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "adding new CONSTANT_Fieldref_info, CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantMemberReference(int,int,String,String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "private void addConstantMemberReference(final int index, final int tag, final String owner, final String name, final String descriptor) { add(new Entry(index, tag, owner, name, descriptor, 0, hash(tag, owner, name, descriptor))); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantMemberReference(int,int,String,String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantMemberReference(int,int,String,String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable#addConstantMemberReference(int,int,String,String,String)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantString(String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "add CONSTANT_String_info to constant pool",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantString(String)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "constant pool already contains a similar item",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantString(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "Symbol addConstantUtf8Reference(int tag, String value)",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantString(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantString(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantString(String)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantInteger(int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "add CONSTANT_Integer_info",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantInteger(int)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "constant pool already contains a similar item",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantInteger(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "Symbol addConstantInteger(final int value)",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantInteger(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantInteger(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantInteger(int)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantFloat(float)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "add CONSTANT_Float_info to constant pool",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantFloat(float)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "constant pool already contains a similar item",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantFloat(float)",
            "head_type": "method",
            "relation": "have",
            "tail": "Symbol addConstantFloat(final float value)",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantFloat(float)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantFloat(float)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable#addConstantFloat(float)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantIntegerOrFloat(int,int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "add CONSTANT_Integer_info or CONSTANT_Float_info",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantIntegerOrFloat(int,int)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "constant pool already contains a similar item",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantIntegerOrFloat(int,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantIntegerOrFloat(int,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantIntegerOrFloat(int,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "add CONSTANT_Integer_info or CONSTANT_Float_info",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "add constant pool constant with given tag and primitive values",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.SymbolTable",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable#addConstantIntegerOrFloat(int,int)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantIntegerOrFloat(int,int)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantIntegerOrFloat(int,int,int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "addConstantIntegerOrFloat",
            "tail_type": "apiFunction"
        },
        {
            "head": "addConstantIntegerOrFloat",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "addConstantIntegerOrFloatSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "addConstantIntegerOrFloat",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "addConstantIntegerOrFloatRelatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "addConstantIntegerOrFloat",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "addConstantIntegerOrFloatDesignPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantIntegerOrFloat(int,int,int)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.SymbolTable",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "addConstantIntegerOrFloat",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantLong(long)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "add CONSTANT_Long_info to constant pool",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantLong(long)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "constant pool already contains a similar item",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantLong(long)",
            "head_type": "method",
            "relation": "have",
            "tail": "Symbol addConstantLong(final long value)",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantLong(long)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantLong(long)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable#addConstantLong(long)",
            "tail_type": "method"
        },
        {
            "tail": "add CONSTANT_Double_info to constant pool",
            "head_type": "method",
            "relation": "haveFunction",
            "head": "org.springframework.asm.SymbolTable#addConstantDouble(double)",
            "tail_type": "apiFunction"
        },
        {
            "tail": "constant pool already contains a similar item",
            "head_type": "method",
            "relation": "constrained_by",
            "head": "org.springframework.asm.SymbolTable#addConstantDouble(double)",
            "tail_type": "useConstraint"
        },
        {
            "tail": "Symbol return value",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.asm.SymbolTable#addConstantDouble(double)",
            "tail_type": "useScenario"
        },
        {
            "tail": "relatedConceptInterpretation",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.asm.SymbolTable#addConstantDouble(double)",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "tail": "designPrincipleInterpretation",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.asm.SymbolTable#addConstantDouble(double)",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "tail": "useSampleCode",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.asm.SymbolTable#addConstantDouble(double)",
            "tail_type": "useSampleCode"
        },
        {
            "tail": "org.springframework.asm.SymbolTable#addConstantDouble(double)",
            "head_type": "class",
            "relation": "associated_with",
            "head": "org.springframework.asm.SymbolTable",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantLongOrDouble(int,long)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "addConstantLongOrDouble",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantLongOrDouble(int,long)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "constantPoolAlreadyContainsSimilarItem",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantLongOrDouble(int,long)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "addingConstantLongOrDoubleToConstantPool",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantLongOrDouble(int,long)",
            "head_type": "method",
            "relation": "have",
            "tail": "sampleCodeForAddConstantLongOrDouble",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantLongOrDouble(int,long)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretationForAddConstantLongOrDouble",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantLongOrDouble(int,long)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretationForAddConstantLongOrDouble",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "addConstantLongOrDouble",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable",
            "tail_type": "class"
        },
        {
            "head": "constantPoolAlreadyContainsSimilarItem",
            "head_type": "useConstraint",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable",
            "tail_type": "class"
        },
        {
            "head": "addingConstantLongOrDoubleToConstantPool",
            "head_type": "useScenario",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable",
            "tail_type": "class"
        },
        {
            "head": "sampleCodeForAddConstantLongOrDouble",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable",
            "tail_type": "class"
        },
        {
            "head": "relatedConceptInterpretationForAddConstantLongOrDouble",
            "head_type": "relatedConceptInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable",
            "tail_type": "class"
        },
        {
            "head": "designPrincipleInterpretationForAddConstantLongOrDouble",
            "head_type": "designPrincipleInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantLongOrDouble(int,int,long)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "addConstantLongOrDouble",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantLongOrDouble(int,int,long)",
            "head_type": "method",
            "relation": "have",
            "tail": "addConstantLongOrDoubleSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "addConstantLongOrDoubleSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "addConstantLongOrDoubleSampleCodeContent",
            "tail_type": "codeContent"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantLongOrDouble(int,int,long)",
            "head_type": "method",
            "relation": "have",
            "tail": "addConstantLongOrDoubleRelatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "addConstantLongOrDoubleRelatedConceptInterpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "addConstantLongOrDoubleRelatedConceptInterpretationContent",
            "tail_type": "interpretationContent"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantLongOrDouble(int,int,long)",
            "head_type": "method",
            "relation": "have",
            "tail": "addConstantLongOrDoubleDesignPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "addConstantLongOrDoubleDesignPrincipleInterpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "have",
            "tail": "addConstantLongOrDoubleDesignPrincipleInterpretationContent",
            "tail_type": "interpretationContent"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantNameAndType(String,String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "addConstantNameAndType",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantNameAndType(String,String)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "constantPoolAlreadyContainsSimilarItem",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantNameAndType(String,String)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "addingConstantNameAndTypeToConstantPool",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantNameAndType(String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "addConstantNameAndTypeSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantNameAndType(String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantNameAndType(String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantNameAndType(String,String)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantNameAndType(int,String,String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "addConstantNameAndType",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantNameAndType(int,String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "addConstantNameAndTypeUseSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "addConstantNameAndTypeUseSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "addConstantNameAndTypeSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantNameAndType(int,String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "addConstantNameAndTypeRelatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "addConstantNameAndTypeRelatedConceptInterpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": " CONSTANT_NameAndType_info Concept",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantNameAndType(int,String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "addConstantNameAndTypeDesignPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "addConstantNameAndTypeDesignPrincipleInterpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "have",
            "tail": "Efficient Management of Constant Pool",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantUtf8(String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "add CONSTANT_Utf8_info",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantUtf8(String)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "constant pool already contains a similar item",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantUtf8(String)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "add CONSTANT_Utf8_info to the constant pool",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantUtf8(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "add CONSTANT_Utf8_info to the constant pool sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantUtf8(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantUtf8(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantUtf8(String)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantUtf8(int,String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "addConstantUtf8",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantUtf8(int,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "addConstantUtf8UseSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "addConstantUtf8UseSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "addConstantUtf8SampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantUtf8(int,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantUtf8(int,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantMethodHandle(int,String,String,String,boolean)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "add CONSTANT_MethodHandle_info",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantMethodHandle(int,String,String,String,boolean)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "constant pool already contains a similar item",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantMethodHandle(int,String,String,String,boolean)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "add CONSTANT_MethodHandle_info to the constant pool",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantMethodHandle(int,String,String,String,boolean)",
            "head_type": "method",
            "relation": "have",
            "tail": "Symbol addConstantMethodHandle(final int referenceKind, final String owner, final String name, final String descriptor, final boolean isInterface)",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantMethodHandle(int,String,String,String,boolean)",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantMethodHandle(int,String,String,String,boolean)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantMethodHandle(int,String,String,String,boolean)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantMethodHandle(int,int,String,String,String,boolean)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "addConstantMethodHandle",
            "tail_type": "apiFunction"
        },
        {
            "head": "addConstantMethodHandle",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "referenceKindConstraint",
            "tail_type": "useConstraint"
        },
        {
            "head": "addConstantMethodHandle",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "addConstantMethodHandleUsage",
            "tail_type": "useScenario"
        },
        {
            "head": "addConstantMethodHandle",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "addConstantMethodHandleSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "addConstantMethodHandle",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "addConstantMethodHandle",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantMethodHandle(int,int,String,String,String,boolean)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.SymbolTable",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getConstantMethodHandleSymbolData",
            "tail_type": "apiFunction"
        },
        {
            "head": "getConstantMethodHandleSymbolData",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "referenceKind",
            "tail_type": "useConstraint"
        },
        {
            "head": "getConstantMethodHandleSymbolData",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "isInterface",
            "tail_type": "useConstraint"
        },
        {
            "head": "getConstantMethodHandleSymbolData",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": " CONSTANT_MethodHandle_info Symbol",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.SymbolTable",
            "head_type": "class",
            "relation": "have",
            "tail": "getConstantMethodHandleSymbolData(int,boolean)",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.SymbolTable",
            "head_type": "class",
            "relation": "have",
            "tail": "Symbol#data",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable",
            "head_type": "class",
            "relation": "have",
            "tail": "Design Principle for SymbolTable",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "Opcodes",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantMethodType(String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "add CONSTANT_MethodType_info",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantMethodType(String)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "constant pool already contains a similar item",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantMethodType(String)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "method descriptor",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantMethodType(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "Symbol addConstantUtf8Reference(Symbol.CONSTANT_METHOD_TYPE_TAG, methodDescriptor)",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantMethodType(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantMethodType(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantMethodType(String)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantDynamic(String,String,Handle,Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "add CONSTANT_Dynamic_info to constant pool",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantDynamic(String,String,Handle,Object)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "constant pool already contains a similar item",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantDynamic(String,String,Handle,Object)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "adding a new CONSTANT_Dynamic_info",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantDynamic(String,String,Handle,Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "Symbol addConstantDynamicOrInvokeDynamicReference(int, String, String, int)",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantDynamic(String,String,Handle,Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "related to adding CONSTANT_Dynamic_info and bootstrap methods",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantDynamic(String,String,Handle,Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle for adding dynamic constants in symbol table",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable#addConstantDynamic(String,String,Handle,Object)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantInvokeDynamic(String,String,Handle,Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "add CONSTANT_InvokeDynamic_info",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantInvokeDynamic(String,String,Handle,Object)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "constant pool already contains a similar item",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantInvokeDynamic(String,String,Handle,Object)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "adding CONSTANT_InvokeDynamic_info to the constant pool",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantInvokeDynamic(String,String,Handle,Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "Symbol addConstantInvokeDynamic(String name, String descriptor, Handle bootstrapMethodHandle, Object... bootstrapMethodArguments)",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantInvokeDynamic(String,String,Handle,Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "related bootstrap method to the BootstrapMethods",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantInvokeDynamic(String,String,Handle,Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle of adding CONSTANT_InvokeDynamic_info",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable#addConstantInvokeDynamic(String,String,Handle,Object)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantDynamicOrInvokeDynamicReference(int,String,String,int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "add CONSTANT_Dynamic or CONSTANT_InvokeDynamic_info",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantDynamicOrInvokeDynamicReference(int,String,String,int)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "constant pool already contains a similar item",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantDynamicOrInvokeDynamicReference(int,String,String,int)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "adding CONSTANT_Dynamic or CONSTANT_InvokeDynamic_info to the constant pool",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantDynamicOrInvokeDynamicReference(int,String,String,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for adding CONSTANT_Dynamic or CONSTANT_InvokeDynamic_info",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantDynamicOrInvokeDynamicReference(int,String,String,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation for CONSTANT_Dynamic and CONSTANT_InvokeDynamic_info",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantDynamicOrInvokeDynamicReference(int,String,String,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation for adding CONSTANT_Dynamic or CONSTANT_InvokeDynamic_info",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantDynamicOrInvokeDynamicReference(int,String,String,int)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantDynamicOrInvokeDynamicReference(int,int,String,String,int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "addConstantDynamicOrInvokeDynamicReference",
            "tail_type": "apiFunction"
        },
        {
            "head": "addConstantDynamicOrInvokeDynamicReference",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "tag must be CONSTANT_DYNAMIC_TAG or CONSTANT_INVOKE_DYNAMIC_TAG",
            "tail_type": "useConstraint"
        },
        {
            "head": "addConstantDynamicOrInvokeDynamicReference",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "adding CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool",
            "tail_type": "useScenario"
        },
        {
            "head": "addConstantDynamicOrInvokeDynamicReference",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "addConstantDynamicOrInvokeDynamicReference",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "addConstantDynamicOrInvokeDynamicReference",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable#addConstantDynamicOrInvokeDynamicReference(int,int,String,String,int)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantModule(String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "add CONSTANT_Module_info",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantModule(String)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "constant pool already contains a similar item",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantModule(String)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "fully qualified name (using dots) of a module",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantModule(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "Symbol addConstantUtf8Reference(Symbol.CONSTANT_MODULE_TAG, moduleName)",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantModule(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantModule(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable#addConstantModule(String)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantPackage(String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "add CONSTANT_Package_info",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantPackage(String)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "constant pool already contains a similar item",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantPackage(String)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "internal name of a package",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantPackage(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "Symbol addConstantUtf8Reference(Symbol.CONSTANT_PACKAGE_TAG, packageName)",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantPackage(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantPackage(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantPackage(String)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantUtf8Reference(int,String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "add CONSTANT_Class_info, CONSTANT_String_info, CONSTANT_MethodType_info, CONSTANT_Module_info or CONSTANT_Package_info to the constant pool",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantUtf8Reference(int,String)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "the constant pool already contains a similar item",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantUtf8Reference(int,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantUtf8Reference(int,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantUtf8Reference(int,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.SymbolTable",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable#addConstantUtf8Reference(int,String)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantUtf8Reference(int,int,String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "addConstantUtf8Reference",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantUtf8Reference(int,int,String)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "index and tag constraints",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantUtf8Reference(int,int,String)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "symbol table management",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantUtf8Reference(int,int,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for addConstantUtf8Reference",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantUtf8Reference(int,int,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation for symbol table",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantUtf8Reference(int,int,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation for symbol table",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addConstantUtf8Reference(int,int,String)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addBootstrapMethod(Handle,Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "addBootstrapMethod",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addBootstrapMethod(Handle,Object)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "similarBootstrapMethodConstraint",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addBootstrapMethod(Handle,Object)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "bootstrapMethodsManagement",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addBootstrapMethod(Handle,Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "addBootstrapMethodSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addBootstrapMethod(Handle,Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "bootstrapMethodConcept",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addBootstrapMethod(Handle,Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "symbolTableDesignPrinciple",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "addBootstrapMethodSampleCode",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addBootstrapMethod(int,int,int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "addBootstrapMethod",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addBootstrapMethod(int,int,int)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "duplicateBootstrapMethod",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addBootstrapMethod(int,int,int)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "symbolTableManagement",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addBootstrapMethod(int,int,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "symbolTableManagementSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addBootstrapMethod(int,int,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "symbolTableManagementConcept",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addBootstrapMethod(int,int,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleSymbolTable",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable#addBootstrapMethod(int,int,int)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.SymbolTable#getType(int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getType",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.SymbolTable#getType(int)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "typeIndexMustBeValid",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.SymbolTable#getType(int)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "retrieveTypeTableElement",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.SymbolTable#getType(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.SymbolTable#getType(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#getType(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#getType(int)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.SymbolTable#getForwardUninitializedLabel(int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getForwardUninitializedLabel",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.SymbolTable#getForwardUninitializedLabel(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "Returns the label corresponding to the 'forward uninitialized' type table element whose index is given.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#getForwardUninitializedLabel(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "The method retrieves a label associated with a 'forward uninitialized' type table element based on its index.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#getForwardUninitializedLabel(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "public Label getForwardUninitializedLabel(final int typeIndex) {\n    return labelTable[(int) typeTable[typeIndex].data].label;\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addType(String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "addType",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addType(String)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "typeTableConstraint",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addType(String)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "typeTableUsage",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addType(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "typeTableSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addType(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "typeTableConcept",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addType(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "typeTableDesignPrinciple",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addType(String)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addUninitializedType(String,int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "addUninitializedType",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addUninitializedType(String,int)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "typeTableContainsSimilarType",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addUninitializedType(String,int)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "addingUninitializedType",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addUninitializedType(String,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "addUninitializedTypeSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addUninitializedType(String,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "uninitializedTypeExplanation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addUninitializedType(String,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleForAddUninitializedType",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "addUninitializedTypeSampleCode",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable#addUninitializedType(String,int)",
            "tail_type": "method"
        },
        {
            "head": "uninitializedTypeExplanation",
            "head_type": "relatedConceptInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable#addUninitializedType(String,int)",
            "tail_type": "method"
        },
        {
            "head": "designPrincipleForAddUninitializedType",
            "head_type": "designPrincipleInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable#addUninitializedType(String,int)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addForwardUninitializedType(String,Label)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "addForwardUninitializedType",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addForwardUninitializedType(String,Label)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "typeTableContainsSimilarType",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addForwardUninitializedType(String,Label)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "addUninitializedTypeUsage",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addForwardUninitializedType(String,Label)",
            "head_type": "method",
            "relation": "have",
            "tail": "addForwardUninitializedTypeSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addForwardUninitializedType(String,Label)",
            "head_type": "method",
            "relation": "have",
            "tail": "forwardUninitializedTypeExplanation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addForwardUninitializedType(String,Label)",
            "head_type": "method",
            "relation": "have",
            "tail": "symbolTableDesignPrinciples",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "addForwardUninitializedTypeSampleCode",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable#addForwardUninitializedType(String,Label)",
            "tail_type": "method"
        },
        {
            "head": "forwardUninitializedTypeExplanation",
            "head_type": "relatedConceptInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable#addForwardUninitializedType(String,Label)",
            "tail_type": "method"
        },
        {
            "head": "symbolTableDesignPrinciples",
            "head_type": "designPrincipleInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable#addForwardUninitializedType(String,Label)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addMergedType(int,int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "addMergedType",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addMergedType(int,int)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "typeTableContainsSimilarType",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addMergedType(int,int)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "typeTableManagement",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addMergedType(int,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "addMergedTypeSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addMergedType(int,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "mergedTypeConcept",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addMergedType(int,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "efficientTypeMergingDesign",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "addMergedTypeSampleCode",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable#addMergedType(int,int)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addTypeInternal(Entry)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "addTypeInternal",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addTypeInternal(Entry)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "entry index must be equal to the current value of typeCount",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addTypeInternal(Entry)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "adding a type symbol to the type table",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addTypeInternal(Entry)",
            "head_type": "method",
            "relation": "have",
            "tail": "private int addTypeInternal(final Entry entry) { ... }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addTypeInternal(Entry)",
            "head_type": "method",
            "relation": "have",
            "tail": "The method adds a type symbol to the type table, ensuring the index of the symbol matches the current type count.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#addTypeInternal(Entry)",
            "head_type": "method",
            "relation": "have",
            "tail": "The design principle is to maintain a consistent mapping between type symbols and their indices in the type table.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable#addTypeInternal(Entry)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.SymbolTable#getOrAddLabelEntry(Label)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getOrAddLabelEntry",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.SymbolTable#getOrAddLabelEntry(Label)",
            "head_type": "method",
            "relation": "have",
            "tail": "getOrAddLabelEntry(Label) Sample Code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getOrAddLabelEntry(Label) Sample Code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "Complete getOrAddLabelEntry(Label) Example",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.SymbolTable#getOrAddLabelEntry(Label)",
            "head_type": "method",
            "relation": "have",
            "tail": "getOrAddLabelEntry(Label) Related Concept Interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "getOrAddLabelEntry(Label) Related Concept Interpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "Detailed Explanation of getOrAddLabelEntry(Label)",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#getOrAddLabelEntry(Label)",
            "head_type": "method",
            "relation": "have",
            "tail": "getOrAddLabelEntry(Label) Design Principle Interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "getOrAddLabelEntry(Label) Design Principle Interpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "have",
            "tail": "Design Principles of getOrAddLabelEntry(Label)",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable#getOrAddLabelEntry(Label)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.SymbolTable#hash(int,long)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "hashing",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.SymbolTable#hash(int,long)",
            "head_type": "method",
            "relation": "have",
            "tail": "hashing implementation",
            "tail_type": "useSampleCode"
        },
        {
            "head": "hashing implementation",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "private static int hash(final int tag, final long value) {\n    return 0x7FFFFFFF & (tag + (int) value + (int) (value >>> 32));\n}",
            "tail_type": "code"
        },
        {
            "head": "org.springframework.asm.SymbolTable#hash(int,String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "hashing",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.SymbolTable#hash(int,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "hashing is used to generate a unique integer value for a given string",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#hash(int,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "hashing is a common technique in computer science to efficiently handle data retrieval",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#hash(int,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "package com.healthMgr.common.email; import java.util.Objects; public class HashExample { public static void main(String[] args) { String value = \"example\"; int tag = 1; int hashValue = hash(tag, value); System.out.println(\"Hash value: \" + hashValue); } private static int hash(final int tag, final String value) { return 0x7FFFFFFF & (tag + value.hashCode()); } }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.SymbolTable#hash(int,String,int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "hashing",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.SymbolTable#hash(int,String,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "hashing implementation",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.SymbolTable#hash(int,String,int)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable",
            "tail_type": "class"
        },
        {
            "head": "hashing implementation",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "private static int hash(final int tag, final String value1, final int value2) {\n    return 0x7FFFFFFF & (tag + value1.hashCode() + value2);\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.SymbolTable#hash(int,String,String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "hashing",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.SymbolTable#hash(int,String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "hashing implementation",
            "tail_type": "useSampleCode"
        },
        {
            "head": "hashing implementation",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "private static int hash(final int tag, final String value1, final String value2) {\n    return 0x7FFFFFFF & (tag + value1.hashCode() * value2.hashCode());\n}",
            "tail_type": "code"
        },
        {
            "head": "org.springframework.asm.SymbolTable#hash(int,String,String,int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "hashing",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.SymbolTable#hash(int,String,String,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "hashing function explanation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#hash(int,String,String,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle explanation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#hash(int,String,String,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.SymbolTable",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable#hash(int,String,String,int)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.SymbolTable#hash(int,String,String,String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "hashing",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.SymbolTable#hash(int,String,String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "hashing function explanation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#hash(int,String,String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "hashing function sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.SymbolTable#hash(int,String,String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "hashing function design principle",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#hash(int,String,String,String,int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "hashing",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.SymbolTable#hash(int,String,String,String,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "hashing function implementation",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.SymbolTable#hash(int,String,String,String,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "hashing function explanation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#hash(int,String,String,String,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principles of hashing function",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.SymbolTable#hash(int,String,String,String,int)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.Entry",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "hashCode",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Entry",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "next",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Entry",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "Entry(int, int, String, String, String, long, int)",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Entry",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "Entry(int, int, String, int)",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Entry",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "Entry(int, int, String, long, int)",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Entry",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "Entry(int, int, String, String, int)",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Entry",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "Entry(int, int, long, int)",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Entry",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Entry",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Entry",
            "head_type": "class",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Entry",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "Symbol",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.Entry",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "SymbolTable",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.LabelEntry",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "labelEntryInitialization",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.LabelEntry",
            "head_type": "class",
            "relation": "have",
            "tail": "labelEntryInitializationSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "labelEntryInitializationSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "labelEntryInitializationSampleCodeContent",
            "tail_type": "useSampleCodeContent"
        },
        {
            "head": "org.springframework.asm.LabelEntry",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.LabelEntry",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.LabelEntry",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.SymbolTable",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.LabelEntry",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Label",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.core.testfixture.net.TestSocketUtils#findAvailableTcpPort()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "find available TCP port",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.net.TestSocketUtils#findAvailableTcpPort()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "no available port could be found",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.core.testfixture.net.TestSocketUtils#findAvailableTcpPort()",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "randomly selected from the range [1024, 65535]",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.core.testfixture.net.TestSocketUtils#findAvailableTcpPort()",
            "head_type": "method",
            "relation": "have",
            "tail": "Find an available TCP port randomly selected from the range [1024, 65535].\n     * @return an available TCP port number\n     * @throws IllegalStateException if no available port could be found",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.net.TestSocketUtils#findAvailableTcpPort()",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.net.TestSocketUtils#findAvailableTcpPort()",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.net.TestSocketUtils#findAvailableTcpPort()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.core.testfixture.net.TestSocketUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.core.testfixture.net.TestSocketUtils#isPortAvailable(int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Check if TCP port is available",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.net.TestSocketUtils#isPortAvailable(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "private static boolean isPortAvailable(int port) { try { ServerSocket serverSocket = ServerSocketFactory.getDefault().createServerSocket(port, 1, InetAddress.getByName(\"localhost\")); serverSocket.close(); return true; } catch (Exception ex) { return false; } }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.net.TestSocketUtils#isPortAvailable(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "Determine if the specified TCP port is currently available on localhost.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.net.TestSocketUtils#isPortAvailable(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "This method checks if a specific TCP port is available on the localhost by attempting to create a server socket on that port. If successful, it means the port is available and the method returns true. If an exception occurs, it indicates the port is not available, and the method returns false.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.ClassMarkedJSpecifyProcessor",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "process",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.ClassMarkedJSpecifyProcessor",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "nullableProcess",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.ClassMarkedJSpecifyProcessor",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "nonNullProcess",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.ClassMarkedJSpecifyProcessor",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "unmarkedProcess",
            "tail_type": "apiFunction"
        },
        {
            "head": "process",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "nullableProcess",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "nonNullProcess",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "unmarkedProcess",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.ClassMarkedJSpecifyProcessor",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.ClassMarkedJSpecifyProcessor",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.ClassMarkedJSpecifyProcessor#process(String,String,String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "process method",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.ClassMarkedJSpecifyProcessor#process(String,String,String)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.core.testfixture.nullness.ClassMarkedJSpecifyProcessor",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.ClassMarkedJSpecifyProcessor",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.ClassMarkedJSpecifyProcessor",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.ClassMarkedJSpecifyProcessor#nullableProcess()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": " nullableProcess()",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.ClassMarkedJSpecifyProcessor#nullableProcess()",
            "head_type": "method",
            "relation": "have",
            "tail": " @Nullable String nullableProcess()",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.ClassMarkedJSpecifyProcessor#nullableProcess()",
            "head_type": "method",
            "relation": "have",
            "tail": " @Nullable",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.ClassMarkedJSpecifyProcessor#nullableProcess()",
            "head_type": "method",
            "relation": "have",
            "tail": " @Nullable",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.ClassMarkedJSpecifyProcessor#nonNullProcess()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "nonNullProcess",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.ClassMarkedJSpecifyProcessor#nonNullProcess()",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.ClassMarkedJSpecifyProcessor#nonNullProcess()",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.ClassMarkedJSpecifyProcessor#nonNullProcess()",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.ClassMarkedJSpecifyProcessor",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.core.testfixture.nullness.ClassMarkedJSpecifyProcessor#nonNullProcess()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.ClassMarkedJSpecifyProcessor#unmarkedProcess(String,String,String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Null handling",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.ClassMarkedJSpecifyProcessor#unmarkedProcess(String,String,String)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "JSR-305 annotations",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.ClassMarkedJSpecifyProcessor#unmarkedProcess(String,String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.core.testfixture.nullness.ClassMarkedJSpecifyProcessor",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.ClassMarkedJSpecifyProcessor#unmarkedProcess(String,String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.ClassMarkedJSpecifyProcessor#unmarkedProcess(String,String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.ClassMarkedJSpecifyProcessor#unmarkedProcess(String,String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        }
    ]
}