{
  "relationships": [
    {
      "head": "org.springframework.cglib.transform.AbstractClassFilterTransformer#visitEnd()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "visitEnd",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.AbstractClassFilterTransformer#visitEnd()",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.cglib.transform.AbstractClassFilterTransformer#visitEnd() sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.AbstractClassFilterTransformer#visitEnd() sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.cglib.transform.AbstractClassFilterTransformer",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#writeShort(Object,String,short,short)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "writeShort",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#writeShort(Object,String,short,short)",
      "head_type": "method",
      "relation": "have",
      "tail": "writeShortSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#writeDouble(Object,String,double,double)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "writeDouble",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#writeDouble(Object,String,double,double)",
      "head_type": "method",
      "relation": "have",
      "tail": "writeDoubleSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddPropertyTransformer",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "add_properties",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddPropertyTransformer",
      "head_type": "class",
      "relation": "have",
      "tail": "AddPropertyTransformer adds properties to a class if it is not abstract.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddPropertyTransformer",
      "head_type": "class",
      "relation": "have",
      "tail": "The design principle is to dynamically add properties to classes based on their type and access level.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddPropertyTransformer",
      "head_type": "class",
      "relation": "have",
      "tail": "package com.example;\nimport org.springframework.cglib.transform.impl.AddPropertyTransformer;\nimport java.util.Map;\nimport java.lang.reflect.Type;\n\npublic class Example {\n    public static void main(String[] args) {\n        Map<String, Type> props = Map.of(\n            \"newProperty\", String.class\n        );\n        AddPropertyTransformer apt = new AddPropertyTransformer(props);\n        apt.end_class();\n    }\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#readObject(Object,String,Object)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "read object",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#readObject(Object,String,Object)",
      "head_type": "method",
      "relation": "have",
      "tail": "read object sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#readObject(Object,String,Object)",
      "head_type": "method",
      "relation": "have",
      "tail": "read object related concept interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#readObject(Object,String,Object)",
      "head_type": "method",
      "relation": "have",
      "tail": "read object design principle interpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.impl.InterceptFieldCallback#readObject(Object,String,Object)",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#writeMethodSig(String,String)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "writeMethodSig",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#writeMethodSig(String,String)",
      "head_type": "method",
      "relation": "have",
      "tail": "Generates a method signature for intercepting field writes.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#writeMethodSig(String,String)",
      "head_type": "method",
      "relation": "have",
      "tail": "private static Signature writeMethodSig(String name, String desc) {\n    return new Signature(\"$cglib_write_\" + name, \"(\" + desc + \")V\");\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.TransformingClassLoader#getGenerator(ClassReader)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "class generation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.TransformingClassLoader#getGenerator(ClassReader)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.ClassGenerator",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.TransformingClassLoader#getGenerator(ClassReader)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.ClassReader",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.TransformingClassLoader#getGenerator(ClassReader)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.ClassTransformer",
      "tail_type": "class"
    },
    {
      "head": "class generation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "class generation explanation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "class generation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "class generation sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "class generation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "class generation design principle",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.AbstractClassLoader",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "classLoading",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.AbstractClassLoader",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "classFiltering",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.cglib.transform.AbstractClassLoader",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "customClassLoading",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.cglib.transform.AbstractClassLoader",
      "head_type": "class",
      "relation": "have",
      "tail": "classLoadingSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.AbstractClassLoader",
      "head_type": "class",
      "relation": "have",
      "tail": "classFilteringInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.AbstractClassLoader",
      "head_type": "class",
      "relation": "have",
      "tail": "customClassLoadingDesignPrinciple",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "classLoadingSampleCode",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.AbstractClassLoader",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.AnnotationVisitorTee#getInstance(AnnotationVisitor,AnnotationVisitor)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "getInstance",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.AnnotationVisitorTee#getInstance(AnnotationVisitor,AnnotationVisitor)",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.cglib.transform.AnnotationVisitorTee",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.AnnotationVisitorTee",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.AnnotationVisitor",
      "tail_type": "class"
    },
    {
      "head": "getInstance",
      "head_type": "apiFunction",
      "relation": "useSampleCode",
      "tail": "public static AnnotationVisitor getInstance(AnnotationVisitor av1, AnnotationVisitor av2) {\n    if (av1 == null) {\n        return av2;\n    }\n    if (av2 == null) {\n        return av1;\n    }\n    return new AnnotationVisitorTee(av1, av2);\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.AnnotationVisitorTee#visitEnum(String,String,String)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "visitEnum",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.AnnotationVisitorTee#visitEnum(String,String,String)",
      "head_type": "method",
      "relation": "have",
      "tail": "visitEnum(String name, String desc, String value)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "visitEnum(String name, String desc, String value)",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.AnnotationVisitorTee#visitEnum(String,String,String)",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#readShort(Object,String,short)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "readShort",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#readShort(Object,String,short)",
      "head_type": "method",
      "relation": "have",
      "tail": "readShort returns oldValue",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#readShort(Object,String,short)",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#readShort(Object,String,short)",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddInitTransformer#begin_method(int,Signature,Type[])",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "addInitializationCode",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddInitTransformer#begin_method(int,Signature,Type[])",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "mustInvokeSuperForConstructor",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddInitTransformer#begin_method(int,Signature,Type[])",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "constructorMethod",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddInitTransformer#begin_method(int,Signature,Type[])",
      "head_type": "method",
      "relation": "have",
      "tail": "addInitializationCodeSample",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddInitTransformer#begin_method(int,Signature,Type[])",
      "head_type": "method",
      "relation": "have",
      "tail": "addInitializationCodeRelatedConcepts",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddInitTransformer#begin_method(int,Signature,Type[])",
      "head_type": "method",
      "relation": "have",
      "tail": "addInitializationCodeDesignPrinciples",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "addInitializationCodeSample",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.impl.AddInitTransformer#begin_method(int,Signature,Type[])",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#writeBoolean(Object,String,boolean,boolean)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "writeBoolean",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#writeBoolean(Object,String,boolean,boolean)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
      "tail_type": "class"
    },
    {
      "head": "writeBoolean",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "writeBooleanSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldFilter#acceptWrite(Type,String)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "field write interception",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldFilter#acceptWrite(Type,String)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.impl.InterceptFieldFilter",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldFilter",
      "head_type": "class",
      "relation": "have",
      "tail": "used for filtering field writes during object transformation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldFilter",
      "head_type": "class",
      "relation": "have",
      "tail": "part of the CGLIB library, designed to intercept and filter field writes based on certain criteria",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldFilter#acceptWrite(Type,String)",
      "head_type": "method",
      "relation": "have",
      "tail": "public boolean acceptWrite(Type owner, String name) {\n    // Example implementation\n    if (name.equals(\"sensitiveField\")) {\n        return false; // Do not intercept\n    }\n    return true; // Intercept other fields\n}",
      "tail_type": "useSampleCode"
    },
    {
      "relationships": [
        {
          "tail": "visitMethod",
          "head_type": "method",
          "relation": "haveFunction",
          "head": "org.springframework.cglib.transform.ClassTransformerChain#visitMethod(int,String,String,String,String[])",
          "tail_type": "apiFunction"
        },
        {
          "tail": "org.springframework.cglib.transform.ClassTransformerChain",
          "head_type": "method",
          "relation": "associated_with",
          "head": "org.springframework.cglib.transform.ClassTransformerChain#visitMethod(int,String,String,String,String[])",
          "tail_type": "class"
        },
        {
          "tail": "visitMethod Sample Code",
          "head_type": "apiFunction",
          "relation": "have",
          "head": "visitMethod",
          "tail_type": "useSampleCode"
        }
      ]
    },
    {
      "relationships": [
        {
          "tail": "visitMethod",
          "head_type": "method",
          "relation": "haveFunction",
          "head": "org.springframework.cglib.transform.ClassTransformerChain#visitMethod(int,String,String,String,String[])",
          "tail_type": "apiFunction"
        },
        {
          "tail": "org.springframework.cglib.transform.ClassTransformerChain",
          "head_type": "method",
          "relation": "associated_with",
          "head": "org.springframework.cglib.transform.ClassTransformerChain#visitMethod(int,String,String,String,String[])",
          "tail_type": "class"
        },
        {
          "tail": "visitMethod Sample Code",
          "head_type": "apiFunction",
          "relation": "have",
          "head": "visitMethod",
          "tail_type": "useSampleCode"
        }
      ]
    },
    {
      "head": "org.springframework.cglib.transform.FieldVisitorTee#visitAttribute(Attribute)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "visitAttribute",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.FieldVisitorTee#visitAttribute(Attribute)",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.cglib.transform.FieldVisitorTee#visitAttribute(Attribute) Sample Code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.FieldVisitorTee#visitAttribute(Attribute)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.FieldVisitorTee",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.FieldVisitorTee#visitAttribute(Attribute)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "Attribute",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddStaticInitTransformer",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "add static initialization",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddStaticInitTransformer",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "class initialization method must be static",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddStaticInitTransformer",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "class initialization method must have a specific signature",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddStaticInitTransformer",
      "head_type": "class",
      "relation": "have",
      "tail": "used in class transformation",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddStaticInitTransformer",
      "head_type": "class",
      "relation": "have",
      "tail": "related to class initialization",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddStaticInitTransformer",
      "head_type": "class",
      "relation": "have",
      "tail": "design principle of separating static initialization",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddStaticInitTransformer",
      "head_type": "class",
      "relation": "have",
      "tail": "sample code for adding static initialization",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldEnabled",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "setInterceptFieldCallback",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldEnabled",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getInterceptFieldCallback",
      "tail_type": "apiFunction"
    },
    {
      "head": "setInterceptFieldCallback",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getInterceptFieldCallback",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#remap(Type)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "Type transformation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#remap(Type)",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "Type constraints",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#remap(Type)",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "Type remapping scenarios",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#remap(Type)",
      "head_type": "method",
      "relation": "have",
      "tail": "Type remapping sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#remap(Type)",
      "head_type": "method",
      "relation": "have",
      "tail": "Type remapping concept interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#remap(Type)",
      "head_type": "method",
      "relation": "have",
      "tail": "Type remapping design principle interpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#remap(Type)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.impl.InterceptFieldTransformer",
      "tail_type": "class"
    },
    {
      "relationships": [
        {
          "tail": "visitMethod",
          "head_type": "method",
          "relation": "haveFunction",
          "head": "org.springframework.cglib.transform.AbstractClassFilterTransformer#visitMethod(int,String,String,String,String[])",
          "tail_type": "apiFunction"
        },
        {
          "tail": "org.springframework.cglib.transform.AbstractClassFilterTransformer",
          "head_type": "method",
          "relation": "associated_with",
          "head": "org.springframework.cglib.transform.AbstractClassFilterTransformer#visitMethod(int,String,String,String,String[])",
          "tail_type": "class"
        },
        {
          "tail": "visitMethod Sample Code",
          "head_type": "apiFunction",
          "relation": "have",
          "head": "visitMethod",
          "tail_type": "useSampleCode"
        }
      ]
    },
    {
      "relationships": [
        {
          "tail": "visitMethod",
          "head_type": "method",
          "relation": "haveFunction",
          "head": "org.springframework.cglib.transform.AbstractClassFilterTransformer#visitMethod(int,String,String,String,String[])",
          "tail_type": "apiFunction"
        },
        {
          "tail": "org.springframework.cglib.transform.AbstractClassFilterTransformer",
          "head_type": "method",
          "relation": "associated_with",
          "head": "org.springframework.cglib.transform.AbstractClassFilterTransformer#visitMethod(int,String,String,String,String[])",
          "tail_type": "class"
        },
        {
          "tail": "visitMethod Sample Code",
          "head_type": "apiFunction",
          "relation": "have",
          "head": "visitMethod",
          "tail_type": "useSampleCode"
        }
      ]
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#writeChar(Object,String,char,char)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "write character data",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#writeChar(Object,String,char,char)",
      "head_type": "method",
      "relation": "have",
      "tail": "sample code for writing character data",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#writeChar(Object,String,char,char)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitIntInsn(int,int)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "visitIntInsn",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitIntInsn(int,int)",
      "head_type": "method",
      "relation": "have",
      "tail": "visitIntInsn sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "visitIntInsn sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.cglib.transform.MethodVisitorTee#visitIntInsn(int,int) sample code content",
      "tail_type": "useSampleCodeContent"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitMethodInsn(int,String,String,String,boolean)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "visitMethodInsn",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitMethodInsn(int,String,String,String,boolean)",
      "head_type": "method",
      "relation": "have",
      "tail": "visitMethodInsn sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "visitMethodInsn sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.cglib.transform.MethodVisitorTee",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.util.ParallelSorter#newInstance(Object[])",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "parallel sorting",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.util.ParallelSorter#newInstance(Object[])",
      "head_type": "method",
      "relation": "have",
      "tail": "ParallelSorter creates a new instance for sorting arrays in parallel",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.util.ParallelSorter#newInstance(Object[])",
      "head_type": "method",
      "relation": "have",
      "tail": "ParallelSorter is designed to improve sorting performance by utilizing multiple threads",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.util.ParallelSorter#newInstance(Object[])",
      "head_type": "method",
      "relation": "have",
      "tail": "package com.example;\n\nimport org.springframework.cglib.util.ParallelSorter;\n\npublic class ParallelSorterExample {\n    public static void main(String[] args) {\n        Object[] array = {5, 2, 8, 3, 1};\n        ParallelSorter sorter = ParallelSorter.newInstance(array);\n        // Use sorter for parallel sorting\n    }\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProvider#getField(String)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "getField",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProvider#getField(String)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.impl.FieldProvider",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldEnabled#setInterceptFieldCallback(InterceptFieldCallback)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "setInterceptFieldCallback",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldEnabled#setInterceptFieldCallback(InterceptFieldCallback)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.impl.InterceptFieldEnabled",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldEnabled#setInterceptFieldCallback(InterceptFieldCallback)",
      "head_type": "method",
      "relation": "have",
      "tail": "void setInterceptFieldCallback(InterceptFieldCallback callback);",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#begin_class(int,int,String,Type,Type[],String)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "begin_class",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#begin_class(int,int,String,Type,Type[],String)",
      "head_type": "method",
      "relation": "have",
      "tail": "begin_class sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "begin_class sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "begin_class sample code content",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#begin_class(int,int,String,Type,Type[],String)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.impl.InterceptFieldTransformer",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer",
      "head_type": "class",
      "relation": "have",
      "tail": "InterceptFieldTransformer class interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "InterceptFieldTransformer class interpretation",
      "head_type": "relatedConceptInterpretation",
      "relation": "have",
      "tail": "InterceptFieldTransformer class interpretation content",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitParameterAnnotation(int,String,boolean)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "visitParameterAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitParameterAnnotation(int,String,boolean)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.MethodVisitorTee",
      "tail_type": "class"
    },
    {
      "head": "visitParameterAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "visitParameterAnnotation sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitCode()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "codeVisiting",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitCode()",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.cglib.transform.MethodVisitorTee#visitCode()_sampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitCode()_sampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.cglib.transform.MethodVisitorTee#visitCode()_sampleCode_content",
      "tail_type": "content"
    },
    {
      "head": "codeVisiting",
      "head_type": "apiFunction",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.MethodVisitorTee",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee",
      "head_type": "class",
      "relation": "have",
      "tail": "org.springframework.cglib.transform.MethodVisitorTee_designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee_designPrincipleInterpretation",
      "head_type": "designPrincipleInterpretation",
      "relation": "have",
      "tail": "org.springframework.cglib.transform.MethodVisitorTee_designPrincipleInterpretation_content",
      "tail_type": "content"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#writeLong(Object,String,long,long)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "writeLong",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#writeLong(Object,String,long,long)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback",
      "tail_type": "class"
    },
    {
      "head": "writeLong",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "writeLongSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#callbackName(Type)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "callbackName",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#callbackName(Type)",
      "head_type": "method",
      "relation": "have",
      "tail": "private static String callbackName(Type type) { return (type == Constants.TYPE_OBJECT) ? \"Object\" : TypeUtils.upperFirst(TypeUtils.getClassName(type)); }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "callbackName",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "private static String callbackName(Type type) { return (type == Constants.TYPE_OBJECT) ? \"Object\" : TypeUtils.upperFirst(TypeUtils.getClassName(type)); }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#callbackName(Type)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.impl.InterceptFieldTransformer",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "callbackName",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitAnnotation(String,boolean)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "visitAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitAnnotation(String,boolean)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.AnnotationVisitorTee",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitAnnotation(String,boolean)",
      "head_type": "method",
      "relation": "have",
      "tail": "visitAnnotation sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "visitAnnotation sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "Complete visitAnnotation example",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitLabel(Label)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "visitLabel",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitLabel(Label)",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.cglib.transform.MethodVisitorTee#visitLabel(Label) Sample Code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitLabel(Label) Sample Code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "Complete Example for visitLabel Method",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitMultiANewArrayInsn(String,int)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "visitMultiANewArrayInsn",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitMultiANewArrayInsn(String,int)",
      "head_type": "method",
      "relation": "have",
      "tail": "visitMultiANewArrayInsn(String desc, int dims) {    mv1.visitMultiANewArrayInsn(desc, dims);    mv2.visitMultiANewArrayInsn(desc, dims);}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "visitMultiANewArrayInsn(String desc, int dims) {    mv1.visitMultiANewArrayInsn(desc, dims);    mv2.visitMultiANewArrayInsn(desc, dims);}",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "mv1.visitMultiANewArrayInsn(desc, dims);",
      "tail_type": "useSampleCode"
    },
    {
      "head": "visitMultiANewArrayInsn(String desc, int dims) {    mv1.visitMultiANewArrayInsn(desc, dims);    mv2.visitMultiANewArrayInsn(desc, dims);}",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "mv2.visitMultiANewArrayInsn(desc, dims);",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.util.ParallelSorter#create(Object[])",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "createParallelSorter",
      "tail_type": "apiFunction"
    },
    {
      "head": "createParallelSorter",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "multipleSortsViaSameObject",
      "tail_type": "useScenario"
    },
    {
      "head": "createParallelSorter",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "sameLengthConstraint",
      "tail_type": "useConstraint"
    },
    {
      "head": "createParallelSorter",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "createParallelSorterSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "createParallelSorter",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "parallelSorterExplanation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "createParallelSorter",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "designPrinciplesOfParallelSorter",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.util.ParallelSorter",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.util.Generator",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.ClassFilter#accept(String)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "class filtering",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.ClassFilter#accept(String)",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "class name must be fully qualified",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.cglib.transform.ClassFilter#accept(String)",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "class transformation",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.cglib.transform.ClassFilter#accept(String)",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.ClassFilter#accept(String)",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.ClassFilter#accept(String)",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.ClassFilter#accept(String)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.ClassFilter",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.ClassTransformerFactory#newInstance()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "create new ClassTransformer instance",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.ClassTransformerFactory#newInstance()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.ClassTransformer",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.ClassTransformerFactory#newInstance()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.ClassTransformerFactory#newInstance()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#writeBoolean(Object,String,boolean,boolean)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "writeBoolean",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#writeBoolean(Object,String,boolean,boolean)",
      "head_type": "method",
      "relation": "have",
      "tail": "writeBooleanSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddDelegateTransformer#addDelegate(Method)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "addDelegate",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddDelegateTransformer#addDelegate(Method)",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "delegate method signature must match the original method signature",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddDelegateTransformer#addDelegate(Method)",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "adding a delegate to a method",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddDelegateTransformer#addDelegate(Method)",
      "head_type": "method",
      "relation": "have",
      "tail": "private void addDelegate(Method m) {\n    Method delegate;\n    try {\n        delegate = delegateImpl.getMethod(m.getName(), m.getParameterTypes());\n        if (!delegate.getReturnType().getName().equals(m.getReturnType().getName())) {\n            throw new IllegalArgumentException(\"Invalid delegate signature \" + delegate);\n        }\n    } catch (NoSuchMethodException e) {\n        throw new CodeGenerationException(e);\n    }\n    final Signature sig = ReflectUtils.getSignature(m);\n    Type[] exceptions = TypeUtils.getTypes(m.getExceptionTypes());\n    CodeEmitter e = super.begin_method(Constants.ACC_PUBLIC, sig, exceptions);\n    e.load_this();\n    e.getfield(DELEGATE);\n    e.load_args();\n    e.invoke_virtual(delegateType, sig);\n    e.return_value();\n    e.end_method();\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddDelegateTransformer#addDelegate(Method)",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddDelegateTransformer#addDelegate(Method)",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddDelegateTransformer#addDelegate(Method)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.impl.AddDelegateTransformer",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProvider#getField(int)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "getField",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProvider#getField(int)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.impl.FieldProvider",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#declare_field(int,String,Type,Object)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "field_declaration",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#declare_field(int,String,Type,Object)",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "field_access_modifiers",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#declare_field(int,String,Type,Object)",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "dynamic_field_generation",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#declare_field(int,String,Type,Object)",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.cglib.transform.impl.InterceptFieldTransformer",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#declare_field(int,String,Type,Object)",
      "head_type": "method",
      "relation": "have",
      "tail": "field_declaration_sample_code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#declare_field(int,String,Type,Object)",
      "head_type": "method",
      "relation": "have",
      "tail": "field_declaration_related_concepts",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#declare_field(int,String,Type,Object)",
      "head_type": "method",
      "relation": "have",
      "tail": "field_declaration_design_principles",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitTableSwitchInsn(int,int,Label,Label)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "visitTableSwitchInsn",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitTableSwitchInsn(int,int,Label,Label)",
      "head_type": "method",
      "relation": "have",
      "tail": "visitTableSwitchInsn sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "visitTableSwitchInsn sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "Complete visitTableSwitchInsn example",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitTryCatchBlock(Label,Label,Label,String)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "visitTryCatchBlock",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitTryCatchBlock(Label,Label,Label,String)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "mv1",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitTryCatchBlock(Label,Label,Label,String)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "mv2",
      "tail_type": "class"
    },
    {
      "head": "visitTryCatchBlock",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.ClassTransformerChain#toString()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "toString",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.ClassTransformerChain#toString()",
      "head_type": "method",
      "relation": "have",
      "tail": "StringBuilder usage",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.ClassTransformerChain#toString()",
      "head_type": "method",
      "relation": "have",
      "tail": "Loop through chain array",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.cglib.transform.ClassTransformerChain#toString()",
      "head_type": "method",
      "relation": "have",
      "tail": "Appending elements to StringBuilder",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.cglib.transform.ClassTransformerChain#toString()",
      "head_type": "method",
      "relation": "have",
      "tail": "Return concatenated string",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.cglib.transform.ClassTransformerChain#toString()",
      "head_type": "method",
      "relation": "have",
      "tail": "StringBuilder usage example",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.ClassTransformerChain#toString()",
      "head_type": "method",
      "relation": "have",
      "tail": "Related to string manipulation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.ClassTransformerChain#toString()",
      "head_type": "method",
      "relation": "have",
      "tail": "Efficiency in string concatenation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "relationships": [
        {
          "tail": "writeFloat",
          "head_type": "method",
          "relation": "haveFunction",
          "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#writeFloat(Object,String,float,float)",
          "tail_type": "apiFunction"
        },
        {
          "tail": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback",
          "head_type": "method",
          "relation": "associated_with",
          "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#writeFloat(Object,String,float,float)",
          "tail_type": "class"
        },
        {
          "tail": "writeFloatSampleCode",
          "head_type": "apiFunction",
          "relation": "have",
          "head": "writeFloat",
          "tail_type": "useSampleCode"
        }
      ]
    },
    {
      "relationships": [
        {
          "tail": "writeFloat",
          "head_type": "method",
          "relation": "haveFunction",
          "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#writeFloat(Object,String,float,float)",
          "tail_type": "apiFunction"
        },
        {
          "tail": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback",
          "head_type": "method",
          "relation": "associated_with",
          "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#writeFloat(Object,String,float,float)",
          "tail_type": "class"
        },
        {
          "tail": "writeFloatSampleCode",
          "head_type": "apiFunction",
          "relation": "have",
          "head": "writeFloat",
          "tail_type": "useSampleCode"
        }
      ]
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#writeByte(Object,String,byte,byte)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "writeByte",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#writeByte(Object,String,byte,byte)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
      "tail_type": "class"
    },
    {
      "head": "writeByte",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "writeByteSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitIincInsn(int,int)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "visitIincInsn",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitIincInsn(int,int)",
      "head_type": "method",
      "relation": "have",
      "tail": "visitIincInsn(int var, int increment) {    mv1.visitIincInsn(var, increment);    mv2.visitIincInsn(var, increment);}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitInsnAnnotation(int,TypePath,String,boolean)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "visitInsnAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitInsnAnnotation(int,TypePath,String,boolean)",
      "head_type": "method",
      "relation": "have",
      "tail": "visitInsnAnnotation sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "visitInsnAnnotation sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.cglib.transform.MethodVisitorTee#visitInsnAnnotation(int,TypePath,String,boolean) sample code content",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.util.ParallelSorter#mergeSort(int,Comparator)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "in-place merge sort",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.util.ParallelSorter#mergeSort(int,Comparator)",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "specified column is non-primitive",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.cglib.util.ParallelSorter#mergeSort(int,Comparator)",
      "head_type": "method",
      "relation": "have",
      "tail": "Sort the arrays using an in-place merge sort.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.util.ParallelSorter#mergeSort(int,Comparator)",
      "head_type": "method",
      "relation": "have",
      "tail": "The mergeSort method sorts arrays in-place using a merge sort algorithm. It requires an index to specify the array (column) to sort by and a Comparator if the specified column is non-primitive.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.util.ParallelSorter#mergeSort(int,Comparator)",
      "head_type": "method",
      "relation": "have",
      "tail": "public void mergeSort(int index, Comparator cmp) {\n    mergeSort(index, 0, len(), cmp);\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#declare_field(int,String,Type,Object)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "field_declaration",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#declare_field(int,String,Type,Object)",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "static_type_constraint",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#declare_field(int,String,Type,Object)",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "dynamic_field_registration",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#declare_field(int,String,Type,Object)",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#declare_field(int,String,Type,Object)",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#declare_field(int,String,Type,Object)",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#declare_field(int,String,Type,Object)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#setField(String[])",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "setField",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#setField(String[])",
      "head_type": "method",
      "relation": "have",
      "tail": "setFieldSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "setFieldSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "setFieldSampleCodeContent",
      "tail_type": "useSampleCodeContent"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldFilter",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "fieldAccessFiltering",
      "tail_type": "apiFunction"
    },
    {
      "head": "fieldAccessFiltering",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "fieldAccessFilteringSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "fieldAccessFiltering",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "fieldTypeConstraints",
      "tail_type": "useConstraint"
    },
    {
      "head": "fieldAccessFiltering",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "secureFieldAccess",
      "tail_type": "useScenario"
    },
    {
      "head": "fieldAccessFiltering",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "fieldAccessFilteringConcept",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "fieldAccessFiltering",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "fieldAccessFilteringDesign",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#addWriteMethod(String,Type)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "addWriteMethod",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#addWriteMethod(String,Type)",
      "head_type": "method",
      "relation": "have",
      "tail": "addWriteMethodSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "addWriteMethodSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.cglib.transform.impl.InterceptFieldTransformer",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#readCallbackSig(Type)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "read callback signature",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#readCallbackSig(Type)",
      "head_type": "method",
      "relation": "have",
      "tail": "private static Signature readCallbackSig(Type type) {\n    Type remap = remap(type);\n    return new Signature(\"read\" + callbackName(remap), remap, new Type[] { Constants.TYPE_OBJECT, Constants.TYPE_STRING, remap });\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#readCallbackSig(Type)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.impl.InterceptFieldTransformer",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer",
      "head_type": "class",
      "relation": "have",
      "tail": "used in intercept field transformation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer",
      "head_type": "class",
      "relation": "have",
      "tail": "design principle of intercepting field transformation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitAttribute(Attribute)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "visitAttribute",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitAttribute(Attribute)",
      "head_type": "method",
      "relation": "have",
      "tail": "visitAttribute(Attribute) sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.ClassVisitorTee#visit(int,int,String,String,String,String[])",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "visit",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.ClassVisitorTee#visit(int,int,String,String,String,String[])",
      "head_type": "method",
      "relation": "have",
      "tail": "visit method implementation",
      "tail_type": "useSampleCode"
    },
    {
      "head": "visit method implementation",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.ClassVisitorTee",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.ClassVisitorTee#visit(int,int,String,String,String,String[])",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.ClassVisitorTee",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.FieldVisitorTee",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "visitAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.FieldVisitorTee",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "visitAttribute",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.FieldVisitorTee",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "visitEnd",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.FieldVisitorTee",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "visitTypeAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "visitAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "visitAnnotation sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "visitAttribute",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "visitAttribute sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "visitEnd",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "visitEnd sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "visitTypeAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "visitTypeAnnotation sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.FieldVisitorTee",
      "head_type": "class",
      "relation": "have",
      "tail": "related concept interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.FieldVisitorTee",
      "head_type": "class",
      "relation": "have",
      "tail": "design principle interpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "writeInt",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "writeChar",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "writeByte",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "writeBoolean",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "writeShort",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "writeFloat",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "writeDouble",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "writeLong",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "writeObject",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "readInt",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "readChar",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "readByte",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "readBoolean",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "readShort",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "readFloat",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "readDouble",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "readLong",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "readObject",
      "tail_type": "apiFunction"
    },
    {
      "head": "writeInt",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "writeChar",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "writeByte",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "writeBoolean",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "writeShort",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "writeFloat",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "writeDouble",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "writeLong",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "writeObject",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "readInt",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "readChar",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "readByte",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "readBoolean",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "readShort",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "readFloat",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "readDouble",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "readLong",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "readObject",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProvider",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getFieldNames",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProvider",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getFieldTypes",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProvider",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "setField",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProvider",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getField",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProvider",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProvider",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProvider",
      "head_type": "class",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitMaxs(int,int)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "visitMaxs",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitMaxs(int,int)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.MethodVisitorTee",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "visitMaxs",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.util.ParallelSorter",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "parallel sorting",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.util.ParallelSorter",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "quicksort",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.util.ParallelSorter",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "mergesort",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.util.ParallelSorter",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "in-place sorting",
      "tail_type": "apiFunction"
    },
    {
      "head": "parallel sorting",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "multiple arrays",
      "tail_type": "useScenario"
    },
    {
      "head": "quicksort",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "single column sorting",
      "tail_type": "useScenario"
    },
    {
      "head": "mergesort",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "multiple columns sorting",
      "tail_type": "useScenario"
    },
    {
      "head": "in-place sorting",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "memory efficiency",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.cglib.util.ParallelSorter",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.util.ParallelSorter",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "relatedConceptInterpretation",
      "head_type": "relatedConceptInterpretation",
      "relation": "associated_with",
      "tail": "parallel array sorting",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "designPrincipleInterpretation",
      "head_type": "designPrincipleInterpretation",
      "relation": "associated_with",
      "tail": "efficiency and stability",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.util.ParallelSorter",
      "head_type": "class",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "constructor",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.cglib.transform.AbstractClassTransformer",
      "tail_type": "apiFunction"
    },
    {
      "tail": "setTarget",
      "head_type": "class",
      "relation": "haveFunction",
      "head": "org.springframework.cglib.transform.AbstractClassTransformer",
      "tail_type": "apiFunction"
    },
    {
      "tail": "useSampleCode",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "constructor",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "useSampleCode",
      "head_type": "apiFunction",
      "relation": "have",
      "head": "setTarget",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "relatedConceptInterpretation",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.AbstractClassTransformer",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "tail": "designPrincipleInterpretation",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.AbstractClassTransformer",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.FieldVisitorTee#visitEnd()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "field visiting",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.FieldVisitorTee#visitEnd()",
      "head_type": "method",
      "relation": "have",
      "tail": "Delegates the call to two underlying FieldVisitor instances.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.FieldVisitorTee#visitEnd()",
      "head_type": "method",
      "relation": "have",
      "tail": "public void visitEnd() { fv1.visitEnd(); fv2.visitEnd(); }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.FieldVisitorTee#visitEnd()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.FieldVisitorTee",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#setByIndex(String[],int[])",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "field setting by index",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#setByIndex(String[],int[])",
      "head_type": "method",
      "relation": "have",
      "tail": "setByIndex sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "setByIndex sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "private void setByIndex(final String[] names, final int[] indexes) throws Exception {\n    final CodeEmitter e = super.begin_method(Constants.ACC_PUBLIC, PROVIDER_SET_BY_INDEX, null);\n    e.load_this();\n    e.load_arg(1);\n    e.load_arg(0);\n    e.process_switch(indexes, new ProcessSwitchCallback() {\n\n        @Override\n        public void processCase(int key, Label end) throws Exception {\n            Type type = (Type) fields.get(names[key]);\n            e.unbox(type);\n            e.putfield(names[key]);\n            e.return_value();\n        }\n\n        @Override\n        public void processDefault() throws Exception {\n            e.throw_exception(ILLEGAL_ARGUMENT_EXCEPTION, \"Unknown field index\");\n        }\n    });\n    e.end_method();\n}",
      "tail_type": "code"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#setByIndex(String[],int[])",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#addReadMethod(String,Type)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "addReadMethod",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#addReadMethod(String,Type)",
      "head_type": "method",
      "relation": "have",
      "tail": "addReadMethodSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "addReadMethodSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.cglib.transform.impl.InterceptFieldTransformer",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#writeCallbackSig(Type)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "write callback signature",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#writeCallbackSig(Type)",
      "head_type": "method",
      "relation": "have",
      "tail": "private static Signature writeCallbackSig(Type type) { Type remap = remap(type); return new Signature(\"write\" + callbackName(remap), remap, new Type[] { Constants.TYPE_OBJECT, Constants.TYPE_STRING, remap, remap }); }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#writeCallbackSig(Type)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.impl.InterceptFieldTransformer",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer",
      "head_type": "class",
      "relation": "have",
      "tail": "related concept interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer",
      "head_type": "class",
      "relation": "have",
      "tail": "design principle interpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitLookupSwitchInsn(Label,int[],Label[])",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "visitLookupSwitchInsn",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitLookupSwitchInsn(Label,int[],Label[])",
      "head_type": "method",
      "relation": "have",
      "tail": "visitLookupSwitchInsn complete sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "visitLookupSwitchInsn complete sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "package com.healthMgr.common.email; import java.xxxx; public class OneClass { // specific code }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.ClassReaderGenerator",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "generateClass",
      "tail_type": "apiFunction"
    },
    {
      "head": "generateClass",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "sampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#readObject(Object,String,Object)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "readObject",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#readObject(Object,String,Object)",
      "head_type": "method",
      "relation": "have",
      "tail": "readObject returns oldValue",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#readObject(Object,String,Object)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProvider#setField(String,Object)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "setField",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProvider#setField(String,Object)",
      "head_type": "method",
      "relation": "have",
      "tail": "void setField(String name, Object value);",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#end_class()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "generateFieldProvider",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#end_class()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "interfaceConstraint",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#end_class()",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "fieldProviderUsage",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#end_class()",
      "head_type": "method",
      "relation": "have",
      "tail": "fieldProviderSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#end_class()",
      "head_type": "method",
      "relation": "have",
      "tail": "fieldProviderRelatedConcepts",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#end_class()",
      "head_type": "method",
      "relation": "have",
      "tail": "fieldProviderDesignPrinciples",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#end_class()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.TransformingClassGenerator",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.MethodFilterTransformer#visitMethod(int,String,String,String,String[])",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "visitMethod",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.MethodFilterTransformer#visitMethod(int,String,String,String,String[])",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.MethodFilterTransformer",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.MethodFilterTransformer",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.MethodFilterTransformer",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "visitMethod",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.util.ParallelSorter#len()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "getArrayLength",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.util.ParallelSorter#len()",
      "head_type": "method",
      "relation": "have",
      "tail": "getArrayLengthSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getArrayLengthSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.cglib.util.ParallelSorter",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.util.ParallelSorter#quickSort(int,int,int,Comparator)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "quicksort algorithm",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.util.ParallelSorter#quickSort(int,int,int,Comparator)",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "specified column is non-primitive",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.cglib.util.ParallelSorter#quickSort(int,int,int,Comparator)",
      "head_type": "method",
      "relation": "have",
      "tail": "Sort the arrays using the quicksort algorithm.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.util.ParallelSorter#quickSort(int,int,int,Comparator)",
      "head_type": "method",
      "relation": "have",
      "tail": "The quicksort algorithm is a sorting algorithm that uses a divide-and-conquer strategy to sort elements. It works by selecting a 'pivot' element from the array and partitioning the other elements into two sub-arrays, according to whether they are less than or greater than the pivot. The sub-arrays are then sorted recursively. This implementation of quicksort is parallelized to improve performance on large datasets.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.util.ParallelSorter#quickSort(int,int,int,Comparator)",
      "head_type": "method",
      "relation": "have",
      "tail": "package com.example; \nimport java.util.Comparator; \nimport org.springframework.cglib.util.ParallelSorter; \n\npublic class QuickSortExample { \n    public static void main(String[] args) { \n        ParallelSorter sorter = new ParallelSorter(); \n        Integer[] array = {3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5}; \n        Comparator<Integer> comparator = Integer::compare; \n        sorter.quickSort(0, 0, array.length, comparator); \n        for (int i : array) { \n            System.out.print(i + \" \"); \n        } \n    } \n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.AbstractClassLoader#loadClass(String)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "class loading",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.AbstractClassLoader#loadClass(String)",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "ClassNotFoundException must be thrown if class not found",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.cglib.transform.AbstractClassLoader#loadClass(String)",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "loading classes dynamically at runtime",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.cglib.transform.AbstractClassLoader#loadClass(String)",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.AbstractClassLoader#loadClass(String)",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.AbstractClassLoader#loadClass(String)",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.AbstractClassLoader#loadClass(String)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.ClassReader",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.AbstractClassLoader#loadClass(String)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.ClassWriter",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddDelegateTransformer#begin_class(int,int,String,Type,Type[],String)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "addDelegate",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddDelegateTransformer#begin_class(int,int,String,Type,Type[],String)",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "TypeUtils.isInterface(access)",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddDelegateTransformer#begin_class(int,int,String,Type,Type[],String)",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "TypeUtils.add(interfaces, TypeUtils.getTypes(delegateIf))",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddDelegateTransformer#begin_class(int,int,String,Type,Type[],String)",
      "head_type": "method",
      "relation": "have",
      "tail": "super.begin_class(version, access, className, superType, all, sourceFile)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddDelegateTransformer#begin_class(int,int,String,Type,Type[],String)",
      "head_type": "method",
      "relation": "have",
      "tail": "declare_field(Constants.ACC_PRIVATE | Constants.ACC_TRANSIENT, DELEGATE, delegateType, null)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddDelegateTransformer#begin_class(int,int,String,Type,Type[],String)",
      "head_type": "method",
      "relation": "have",
      "tail": "Modifier.isAbstract(method.getModifiers())",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddDelegateTransformer#begin_class(int,int,String,Type,Type[],String)",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddDelegateTransformer#begin_class(int,int,String,Type,Type[],String)",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddDelegateTransformer#begin_class(int,int,String,Type,Type[],String)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.impl.AddDelegateTransformer",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddDelegateTransformer#begin_method(int,Signature,Type[])",
      "head_type": "method",
      "relation": "haveFuntion",
      "tail": "add delegate transformation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddDelegateTransformer#begin_method(int,Signature,Type[])",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "must override super method",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddDelegateTransformer#begin_method(int,Signature,Type[])",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "constructor method delegation",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddDelegateTransformer#begin_method(int,Signature,Type[])",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.cglib.transform.impl.AddDelegateTransformer",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddDelegateTransformer#begin_method(int,Signature,Type[])",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddDelegateTransformer#begin_method(int,Signature,Type[])",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddDelegateTransformer#begin_method(int,Signature,Type[])",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "add delegate transformation",
      "head_type": "apiFunction",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.impl.AddDelegateTransformer#begin_method(int,Signature,Type[])",
      "tail_type": "method"
    },
    {
      "head": "must override super method",
      "head_type": "useConstraint",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.impl.AddDelegateTransformer#begin_method(int,Signature,Type[])",
      "tail_type": "method"
    },
    {
      "head": "constructor method delegation",
      "head_type": "useScenario",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.impl.AddDelegateTransformer#begin_method(int,Signature,Type[])",
      "tail_type": "method"
    },
    {
      "head": "relatedConceptInterpretation",
      "head_type": "relatedConceptInterpretation",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.impl.AddDelegateTransformer#begin_method(int,Signature,Type[])",
      "tail_type": "method"
    },
    {
      "head": "designPrincipleInterpretation",
      "head_type": "designPrincipleInterpretation",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.impl.AddDelegateTransformer#begin_method(int,Signature,Type[])",
      "tail_type": "method"
    },
    {
      "head": "useSampleCode",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.impl.AddDelegateTransformer#begin_method(int,Signature,Type[])",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#readInt(Object,String,int)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "read integer value from object field",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#readInt(Object,String,int)",
      "head_type": "method",
      "relation": "have",
      "tail": "used for intercepting field access and modifying field values",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#readInt(Object,String,int)",
      "head_type": "method",
      "relation": "have",
      "tail": "design principle is to provide a way to intercept and modify field access in order to support advanced features like lazy loading and field transformation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#readInt(Object,String,int)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.MethodFilter#accept(int,String,String,String,String[])",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "filteringMethods",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.MethodFilter#accept(int,String,String,String,String[])",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "classNameParameterMissing",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.cglib.transform.MethodFilter#accept(int,String,String,String,String[])",
      "head_type": "method",
      "relation": "have",
      "tail": "classNameParameterMissing",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.cglib.transform.MethodFilter#accept(int,String,String,String,String[])",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.MethodFilter#accept(int,String,String,String,String[])",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "filteringMethods",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "org.springframework.cglib.transform.MethodFilter#accept(int,String,String,String,String[])",
      "tail_type": "method"
    },
    {
      "head": "classNameParameterMissing",
      "head_type": "useConstraint",
      "relation": "constrained_by",
      "tail": "org.springframework.cglib.transform.MethodFilter#accept(int,String,String,String,String[])",
      "tail_type": "method"
    },
    {
      "head": "relatedConceptInterpretation",
      "head_type": "relatedConceptInterpretation",
      "relation": "have",
      "tail": "org.springframework.cglib.transform.MethodFilter#accept(int,String,String,String,String[])",
      "tail_type": "method"
    },
    {
      "head": "designPrincipleInterpretation",
      "head_type": "designPrincipleInterpretation",
      "relation": "have",
      "tail": "org.springframework.cglib.transform.MethodFilter#accept(int,String,String,String,String[])",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.cglib.transform.MethodFilter",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.MethodFilter#accept(int,String,String,String,String[])",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.cglib.transform.MethodFilter#accept(int,String,String,String,String[])",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.MethodFilter",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.util.ParallelSorter#compare(int,int)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "compare elements",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.util.ParallelSorter#compare(int,int)",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.cglib.util.ParallelSorter#compare(int,int) sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.util.ParallelSorter#compare(int,int)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.util.ParallelSorter",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.ClassVisitorTee#visitSource(String,String)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "source code visiting",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.ClassVisitorTee#visitSource(String,String)",
      "head_type": "method",
      "relation": "have",
      "tail": "visits source code for debugging purposes",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.ClassVisitorTee#visitSource(String,String)",
      "head_type": "method",
      "relation": "have",
      "tail": "design follows the principle of delegation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.ClassVisitorTee#visitSource(String,String)",
      "head_type": "method",
      "relation": "have",
      "tail": "public void visitSource(String source, String debug) { cv1.visitSource(source, debug); cv2.visitSource(source, debug); }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "ClassVisitorTee",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.ClassVisitorTee#visitSource(String,String)",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#generate()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "generate fields",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#generate()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "declare fields",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#generate()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "initialize field provider",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#generate()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "get names",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#generate()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "get types",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#generate()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "get field",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#generate()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "set field",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#generate()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "set by index",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#generate()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "get by index",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#generate()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#generate()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#writeLong(Object,String,long,long)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "writeLong",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#writeLong(Object,String,long,long)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#readShort(Object,String,short)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "readShort",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#readShort(Object,String,short)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitLocalVariable(String,String,String,Label,Label,int)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "visitLocalVariable",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitLocalVariable(String,String,String,Label,Label,int)",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.cglib.transform.MethodVisitorTee",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.TransformingClassGenerator",
      "tail_type": "class"
    },
    {
      "head": "visitLocalVariable",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "local variable declaration",
      "tail_type": "useScenario"
    },
    {
      "head": "visitLocalVariable",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "used in method visitors for generating bytecode",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "visitLocalVariable",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "ensures proper variable scope in generated classes",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "visitLocalVariable",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "public void visitLocalVariable(String name, String desc, String signature, Label start, Label end, int index) {\n    mv1.visitLocalVariable(name, desc, signature, start, end, index);\n    mv2.visitLocalVariable(name, desc, signature, start, end, index);\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.ClassReaderGenerator#generateClass(ClassVisitor)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "generateClass",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.ClassReaderGenerator#generateClass(ClassVisitor)",
      "head_type": "method",
      "relation": "have",
      "tail": "generateClass(ClassVisitor) sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "generateClass(ClassVisitor) sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "generateClass(ClassVisitor) sample code content",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.ClassTransformerChain#setTarget(ClassVisitor)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "setTarget",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.ClassTransformerChain#setTarget(ClassVisitor)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "ClassVisitor",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.ClassTransformerChain#setTarget(ClassVisitor)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.ClassTransformerChain",
      "tail_type": "class"
    },
    {
      "head": "setTarget",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "setTarget(ClassVisitor v)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "setTarget(ClassVisitor v)",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "ClassVisitor",
      "tail_type": "class"
    },
    {
      "head": "setTarget(ClassVisitor v)",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.ClassTransformerChain",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#writeObject(Object,String,Object,Object)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "writeObject",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#writeObject(Object,String,Object,Object)",
      "head_type": "method",
      "relation": "have",
      "tail": "writeObject Sample Code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#readMethodSig(String,String)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "readMethodSig",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#readMethodSig(String,String)",
      "head_type": "method",
      "relation": "have",
      "tail": "readMethodSigSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "readMethodSigSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "private static Signature readMethodSig(String name, String desc) {\n    return new Signature(\"$cglib_read_\" + name, \"()\" + desc);\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.AnnotationVisitorTee#visitArray(String)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "visitArray",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.AnnotationVisitorTee#visitArray(String)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.AnnotationVisitorTee",
      "tail_type": "class"
    },
    {
      "head": "visitArray",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "visitArraySampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "visitArraySampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "visitArraySampleCodeContent",
      "tail_type": "useSampleCodeContent"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#writeByte(Object,String,byte,byte)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "writeByte",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#writeByte(Object,String,byte,byte)",
      "head_type": "method",
      "relation": "have",
      "tail": "writeByteSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "writeByteSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "writeByteCompleteExample",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#readInt(Object,String,int)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "readInt",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#readInt(Object,String,int)",
      "head_type": "method",
      "relation": "have",
      "tail": "readInt returns oldValue",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#readInt(Object,String,int)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#readBoolean(Object,String,boolean)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "readBoolean",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#readBoolean(Object,String,boolean)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer",
      "head_type": "class",
      "relation": "haveFuntion",
      "tail": "lazy loading",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "circular aliases are prohibited",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "multiple aliases for a single name",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer",
      "head_type": "class",
      "relation": "have",
      "tail": "package com.healthMgr.common.email; import java.xxxx; public class OneClass { // specific code }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.SimpleAliasRegistryTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer",
      "head_type": "class",
      "relation": "have",
      "tail": "related concept interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer",
      "head_type": "class",
      "relation": "have",
      "tail": "design principle interpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitLocalVariableAnnotation(int,TypePath,Label[],Label[],int[],String,boolean)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "visitLocalVariableAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitLocalVariableAnnotation(int,TypePath,Label[],Label[],int[],String,boolean)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.AnnotationVisitorTee",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitLocalVariableAnnotation(int,TypePath,Label[],Label[],int[],String,boolean)",
      "head_type": "method",
      "relation": "have",
      "tail": "visitLocalVariableAnnotation sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.AnnotationVisitorTee#visit(String,Object)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "visit",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.AnnotationVisitorTee#visit(String,Object)",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.cglib.transform.AnnotationVisitorTee",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.AnnotationVisitorTee",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform",
      "tail_type": "package"
    },
    {
      "head": "visit",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "org.springframework.cglib.transform.AnnotationVisitorTee#visit(String,Object)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.AnnotationVisitorTee#visit(String,Object)",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.cglib.transform.AnnotationVisitorTee#visit(String,Object)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#readFloat(Object,String,float)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "readFloat",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#readFloat(Object,String,float)",
      "head_type": "method",
      "relation": "have",
      "tail": "readFloat returns oldValue",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#readFloat(Object,String,float)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProvider#getFieldTypes()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "getFieldTypes",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProvider#getFieldTypes()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.impl.FieldProvider",
      "tail_type": "class"
    },
    {
      "tail": "getTypes",
      "head_type": "method",
      "relation": "haveFunction",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#getTypes()",
      "tail_type": "apiFunction"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "head": "getTypes()",
      "tail_type": "class"
    },
    {
      "tail": "getTypes",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "apiFunction"
    },
    {
      "tail": "org.springframework.cglib.transform.impl.FieldProviderTransformer#getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "method"
    },
    {
      "tail": "getTypes",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "apiFunction"
    },
    {
      "tail": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "class"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "tail": "getTypes()",
      "head_type": "class",
      "relation": "have",
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": ""
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitParameter(String,int)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "visitParameter",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitParameter(String,int)",
      "head_type": "method",
      "relation": "have",
      "tail": "visitParameter(String, int) sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.ClassVisitorTee#visitAnnotation(String,boolean)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "visitAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.ClassVisitorTee#visitAnnotation(String,boolean)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.ClassVisitorTee",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.ClassVisitorTee#visitAnnotation(String,boolean)",
      "head_type": "method",
      "relation": "have",
      "tail": "visitAnnotation sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "visitAnnotation sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "Complete visitAnnotation example",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.FieldVisitorTee#visitTypeAnnotation(int,TypePath,String,boolean)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "visitTypeAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.FieldVisitorTee#visitTypeAnnotation(int,TypePath,String,boolean)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.FieldVisitorTee",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.FieldVisitorTee",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.FieldVisitorTee",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "visitTypeAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.Callback",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getProperty",
      "tail_type": "apiFunction"
    },
    {
      "head": "getProperty",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getPropertyName",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getPropertyName",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.impl.Callback",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddPropertyTransformer#end_class()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "add_properties",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddPropertyTransformer#end_class()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "TypeUtils.isAbstract(getAccess())",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddPropertyTransformer#end_class()",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddPropertyTransformer#end_class()",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddPropertyTransformer#end_class()",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddPropertyTransformer#end_class()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.TransformingClassGenerator",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#readFloat(Object,String,float)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "readFieldData",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#readFloat(Object,String,float)",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "fieldAccessibility",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#readFloat(Object,String,float)",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "fieldDataRetrieval",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#readFloat(Object,String,float)",
      "head_type": "method",
      "relation": "have",
      "tail": "float readFloat(Object obj, String name, float oldValue);",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#readFloat(Object,String,float)",
      "head_type": "method",
      "relation": "have",
      "tail": "Field data retrieval involves obtaining the value of a field from an object instance.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#readFloat(Object,String,float)",
      "head_type": "method",
      "relation": "have",
      "tail": "The method follows the principle of encapsulation, allowing controlled access to object fields.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#readFloat(Object,String,float)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitLineNumber(int,Label)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "visitLineNumber",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitLineNumber(int,Label)",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.cglib.transform.MethodVisitorTee#visitLineNumber(int,Label) Sample Code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitLineNumber(int,Label) Sample Code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "Complete Example for visitLineNumber Method",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.TransformingClassGenerator",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "generateClass",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.TransformingClassGenerator",
      "head_type": "class",
      "relation": "have",
      "tail": "TransformingClassGenerator is a class that generates a class with transformations applied by a given ClassTransformer.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "generateClass",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "public void generateClass(ClassVisitor v) throws Exception { t.setTarget(v); gen.generateClass(t); }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "generateClass",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "The method must be provided with a non-null ClassVisitor.",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.cglib.transform.TransformingClassGenerator",
      "head_type": "class",
      "relation": "have",
      "tail": "The class uses a ClassGenerator and a ClassTransformer to apply transformations to the generated class.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.util.ParallelSorter#quickSort(int,Comparator)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "quicksort algorithm",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.util.ParallelSorter#quickSort(int,Comparator)",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "non-primitive column requires Comparator",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.cglib.util.ParallelSorter#quickSort(int,Comparator)",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.util.ParallelSorter#quickSort(int,Comparator)",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.util.ParallelSorter#quickSort(int,Comparator)",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.AbstractClassFilterTransformer#visitField(int,String,String,String,Object)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "visitField",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.AbstractClassFilterTransformer#visitField(int,String,String,String,Object)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.AbstractClassFilterTransformer",
      "tail_type": "class"
    },
    {
      "head": "visitField",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "visitField(int access, String name, String desc, String signature, Object value)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "visitField",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "This method is used to visit a field in a class.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "visitField",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "This method follows the visitor design pattern, allowing for operations to be performed on the elements of an object structure.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.Callback",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getProperty",
      "tail_type": "apiFunction"
    },
    {
      "head": "getProperty",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getPropertySampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getProperty",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getPropertyRelatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "getProperty",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getPropertyDesignPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#getByIndex(String[],int[])",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "getByIndex",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#getByIndex(String[],int[])",
      "head_type": "method",
      "relation": "have",
      "tail": "getByIndex sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getByIndex sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "private void getByIndex(final String[] names, final int[] indexes) throws Exception {\n    final CodeEmitter e = super.begin_method(Constants.ACC_PUBLIC, PROVIDER_GET_BY_INDEX, null);\n    e.load_this();\n    e.load_arg(0);\n    e.process_switch(indexes, new ProcessSwitchCallback() {\n\n        @Override\n        public void processCase(int key, Label end) throws Exception {\n            Type type = (Type) fields.get(names[key]);\n            e.getfield(names[key]);\n            e.box(type);\n            e.return_value();\n        }\n\n        @Override\n        public void processDefault() throws Exception {\n            e.throw_exception(ILLEGAL_ARGUMENT_EXCEPTION, \"Unknown field index\");\n        }\n    });\n    e.end_method();\n}",
      "tail_type": "code"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#getField(String[])",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "getField",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#getField(String[])",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "JVM hashcode implementation incompatibilities",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#getField(String[])",
      "head_type": "method",
      "relation": "have",
      "tail": "to avoid JVM hashcode implementation incompatibilities",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#getField(String[])",
      "head_type": "method",
      "relation": "have",
      "tail": "SWITCH_STYLE_TRIE should be used to avoid JVM hashcode implementation incompatibilities",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#getField(String[])",
      "head_type": "method",
      "relation": "have",
      "tail": "private void getField(String[] names) throws Exception {\n    final CodeEmitter e = begin_method(Constants.ACC_PUBLIC, PROVIDER_GET, null);\n    e.load_this();\n    e.load_arg(0);\n    EmitUtils.string_switch(e, names, Constants.SWITCH_STYLE_HASH, new ObjectSwitchCallback() {\n\n        @Override\n        public void processCase(Object key, Label end) {\n            Type type = (Type) fields.get(key);\n            e.getfield((String) key);\n            e.box(type);\n            e.return_value();\n        }\n\n        @Override\n        public void processDefault() {\n            e.throw_exception(ILLEGAL_ARGUMENT_EXCEPTION, \"Unknown field name\");\n        }\n    });\n    e.end_method();\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#writeFloat(Object,String,float,float)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "writeFloat",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#writeFloat(Object,String,float,float)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
      "tail_type": "class"
    },
    {
      "head": "writeFloat",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "writeFloatSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "writeFloat",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "writeFloatRelatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "writeFloat",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "writeFloatDesignPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.UndeclaredThrowableStrategy",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "wrap undeclared exceptions",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.UndeclaredThrowableStrategy",
      "head_type": "class",
      "relation": "have",
      "tail": "UndeclaredThrowableStrategy is a GeneratorStrategy that wraps undeclared exceptions thrown from within a proxied method in an alternative exception of your choice.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.UndeclaredThrowableStrategy",
      "head_type": "class",
      "relation": "have",
      "tail": "The design principle of UndeclaredThrowableStrategy is to provide a mechanism to handle undeclared exceptions in a controlled manner by wrapping them in a user-defined exception.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.UndeclaredThrowableStrategy",
      "head_type": "class",
      "relation": "have",
      "tail": "public UndeclaredThrowableStrategy(Class wrapper) {\n    this.wrapper = wrapper;\n}\n\nprivate static final MethodFilter TRANSFORM_FILTER = (access, name, desc, signature, exceptions) -> !TypeUtils.isPrivate(access) && name.indexOf('$') < 0;\n@Override\nprotected ClassGenerator transform(ClassGenerator cg) throws Exception {\n    ClassTransformer tr = new UndeclaredThrowableTransformer(wrapper);\n    tr = new MethodFilterTransformer(TRANSFORM_FILTER, tr);\n    return new TransformingClassGenerator(cg, tr);\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.MethodFilter",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "filtering methods",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.MethodFilter",
      "head_type": "class",
      "relation": "have",
      "tail": "related concept interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.MethodFilter",
      "head_type": "class",
      "relation": "have",
      "tail": "design principle interpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.MethodFilter",
      "head_type": "class",
      "relation": "have",
      "tail": "sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitFieldInsn(int,String,String,String)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "visitFieldInsn",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitFieldInsn(int,String,String,String)",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.cglib.transform.MethodVisitorTee#visitFieldInsn(int,String,String,String) Sample Code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitFieldInsn(int,String,String,String) Sample Code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "Complete Example for visitFieldInsn Method",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.AbstractClassFilterTransformer#visitInnerClass(String,String,String,int)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "visitInnerClass",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.AbstractClassFilterTransformer#visitInnerClass(String,String,String,int)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.AbstractClassFilterTransformer",
      "tail_type": "class"
    },
    {
      "head": "visitInnerClass",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "This method is used to visit inner classes within the context of class transformation.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "visitInnerClass",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "public void visitInnerClass(String name, String outerName, String innerName, int access) { target.visitInnerClass(name, outerName, innerName, access); }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.AnnotationVisitorTee#visitAnnotation(String,String)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "visitAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.AnnotationVisitorTee#visitAnnotation(String,String)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.AnnotationVisitorTee",
      "tail_type": "class"
    },
    {
      "head": "visitAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "visitAnnotation(String name, String desc)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "visitAnnotation(String name, String desc)",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.cglib.transform.AnnotationVisitorTee#visitAnnotation(String,String)",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.cglib.transform.ClassVisitorTee#visitEnd()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "endVisit",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.ClassVisitorTee#visitEnd()",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.cglib.transform.ClassVisitorTee#visitEnd() Sample Code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.ClassVisitorTee#visitEnd()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.ClassVisitorTee",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.ClassVisitorTee#visitEnd() Sample Code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "Complete Example for org.springframework.cglib.transform.ClassVisitorTee#visitEnd()",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.UndeclaredThrowableTransformer",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "handleUndeclaredThrowable",
      "tail_type": "apiFunction"
    },
    {
      "head": "handleUndeclaredThrowable",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "handleUndeclaredThrowableSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "handleUndeclaredThrowable",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "constructorConstraint",
      "tail_type": "useConstraint"
    },
    {
      "head": "handleUndeclaredThrowable",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "exceptionHandlingScenario",
      "tail_type": "useScenario"
    },
    {
      "head": "handleUndeclaredThrowable",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "handleUndeclaredThrowable",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitMethodInsn(int,String,String,String)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "visitMethodInsn",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitMethodInsn(int,String,String,String)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "mv1.visitMethodInsn(opcode, owner, name, desc)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitMethodInsn(int,String,String,String)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "mv2.visitMethodInsn(opcode, owner, name, desc)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.util.ParallelSorter#mergeSort(int)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "sorting",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.util.ParallelSorter#mergeSort(int)",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "index array must be valid",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.cglib.util.ParallelSorter#mergeSort(int)",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "array sorting based on a specific column",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.cglib.util.ParallelSorter#mergeSort(int)",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.cglib.util.ParallelSorter",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.util.ParallelSorter#mergeSort(int)",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.util.ParallelSorter#mergeSort(int)",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.util.ParallelSorter#mergeSort(int)",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.ClassFilter",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "accept",
      "tail_type": "apiFunction"
    },
    {
      "head": "accept",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "boolean accept(String className);",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.ClassFilter",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.ClassFilter",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.ClassFilterTransformer",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "class filtering",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.ClassFilterTransformer",
      "head_type": "class",
      "relation": "have",
      "tail": "This class is used to filter classes based on a given ClassFilter.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.ClassFilterTransformer",
      "head_type": "class",
      "relation": "have",
      "tail": "The design principle of this class is to provide a flexible way to filter classes during the transformation process.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.ClassFilterTransformer",
      "head_type": "class",
      "relation": "have",
      "tail": "public class ClassFilterTransformerExample { \n    public static void main(String[] args) { \n        ClassFilter filter = new ClassFilter() { \n            @Override \n            public boolean accept(String className) { \n                return className.startsWith(\"com.example\"); \n            } \n        }; \n        ClassTransformer transformer = new ClassFilterTransformer(filter, new ClassTransformer() { \n            @Override \n            public void transform(ClassReader reader, ClassWriter writer) throws IOException { \n                // Transformation logic \n            } \n        }); \n    } \n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.ClassVisitorTee#visitMethod(int,String,String,String,String[])",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "visitMethod",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.ClassVisitorTee#visitMethod(int,String,String,String,String[])",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.ClassVisitorTee",
      "tail_type": "class"
    },
    {
      "head": "visitMethod",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "sampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#readChar(Object,String,char)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "read character value from object",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#readChar(Object,String,char)",
      "head_type": "method",
      "relation": "have",
      "tail": "override method to provide custom behavior",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#readChar(Object,String,char)",
      "head_type": "method",
      "relation": "have",
      "tail": "sample code for reading character value",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#readChar(Object,String,char)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#readLong(Object,String,long)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "readLong",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#readLong(Object,String,long)",
      "head_type": "method",
      "relation": "have",
      "tail": "readLong returns oldValue",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#readLong(Object,String,long)",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#readLong(Object,String,long)",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AccessFieldTransformer",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "field transformation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AccessFieldTransformer",
      "head_type": "class",
      "relation": "have",
      "tail": "field transformation sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "field transformation sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "field transformation sample code content",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AccessFieldTransformer",
      "head_type": "class",
      "relation": "have",
      "tail": "related concept interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "related concept interpretation",
      "head_type": "relatedConceptInterpretation",
      "relation": "have",
      "tail": "related concept interpretation content",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AccessFieldTransformer",
      "head_type": "class",
      "relation": "have",
      "tail": "design principle interpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "design principle interpretation",
      "head_type": "designPrincipleInterpretation",
      "relation": "have",
      "tail": "design principle interpretation content",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitFrame(int,int,Object[],int,Object[])",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "visitFrame",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitFrame(int,int,Object[],int,Object[])",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.MethodVisitorTee",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee",
      "head_type": "class",
      "relation": "have",
      "tail": "org.springframework.cglib.transform.MethodVisitorTee#visitFrame(int,int,Object[],int,Object[])",
      "tail_type": "method"
    },
    {
      "head": "visitFrame",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "org.springframework.cglib.transform.MethodVisitorTee#visitFrame(int,int,Object[],int,Object[])",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitJumpInsn(int,Label)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "visitJumpInsn",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitJumpInsn(int,Label)",
      "head_type": "method",
      "relation": "have",
      "tail": "visitJumpInsn(int,Label) Sample Code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "visitJumpInsn(int,Label) Sample Code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.cglib.transform.MethodVisitorTee",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitTryCatchAnnotation(int,TypePath,String,boolean)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "visitTryCatchAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitTryCatchAnnotation(int,TypePath,String,boolean)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.AnnotationVisitorTee",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitTryCatchAnnotation(int,TypePath,String,boolean)",
      "head_type": "method",
      "relation": "have",
      "tail": "visitTryCatchAnnotation useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "visitTryCatchAnnotation useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "visitTryCatchAnnotation sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.AbstractClassLoader",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getFlags()",
      "tail_type": "apiFunction"
    },
    {
      "head": "getFlags()",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "protected int getFlags() { return 0; }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "getFlags()",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "This method returns the integer flags.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "getFlags()",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "This method is designed to return a constant integer value, which is 0 in this case.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.ClassVisitorTee#visitOuterClass(String,String,String)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "visitOuterClass",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.ClassVisitorTee#visitOuterClass(String,String,String)",
      "head_type": "method",
      "relation": "have",
      "tail": "visitOuterClass(String owner, String name, String desc)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.ClassVisitorTee#visitOuterClass(String,String,String)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "cv1.visitOuterClass(owner, name, desc)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.ClassVisitorTee#visitOuterClass(String,String,String)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "cv2.visitOuterClass(owner, name, desc)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.ClassVisitorTee#visitOuterClass(String,String,String)",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.ClassVisitorTee#visitOuterClass(String,String,String)",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "lazy loading",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "circular aliases are prohibited",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "multiple aliases for a single name",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.core.SimpleAliasRegistryTests",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "writeInt",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "writeChar",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "writeByte",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "writeBoolean",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "writeShort",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "writeFloat",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "writeDouble",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "writeLong",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "writeObject",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "readInt",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "readChar",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "readByte",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "readBoolean",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "readShort",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "readFloat",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "readDouble",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "readLong",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "readObject",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
      "head_type": "class",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.util.ParallelSorter#chooseComparer(int,Comparator)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "chooseComparer",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.util.ParallelSorter#chooseComparer(int,Comparator)",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "chooseComparer",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "useSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "sampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.AbstractClassLoader#getGenerator(ClassReader)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "generate class reader",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.AbstractClassLoader#getGenerator(ClassReader)",
      "head_type": "method",
      "relation": "have",
      "tail": "This method is used to generate a ClassGenerator instance based on the provided ClassReader.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.AbstractClassLoader#getGenerator(ClassReader)",
      "head_type": "method",
      "relation": "have",
      "tail": "The design principle behind this method is to encapsulate the process of creating a ClassGenerator, ensuring that all necessary attributes and flags are correctly set up.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.AbstractClassLoader",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.ClassReader",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.AbstractClassLoader",
      "head_type": "class",
      "relation": "have",
      "tail": "This class serves as an abstract base for class loaders that use CGLIB for code generation.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.AbstractClassLoader",
      "head_type": "class",
      "relation": "have",
      "tail": "The design principle of this class is to provide a foundation for creating specialized class loaders that can dynamically generate and load classes.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.ClassFilterTransformer#accept(int,int,String,String,String,String[])",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "class filtering",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.ClassFilterTransformer#accept(int,int,String,String,String,String[])",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "valid class name format",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.cglib.transform.ClassFilterTransformer#accept(int,int,String,String,String,String[])",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "class transformation",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.cglib.transform.ClassFilterTransformer#accept(int,int,String,String,String,String[])",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.cglib.transform.ClassFilterTransformer",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.ClassFilterTransformer#accept(int,int,String,String,String,String[])",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.ClassFilterTransformer#accept(int,int,String,String,String,String[])",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.ClassFilterTransformer#accept(int,int,String,String,String,String[])",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.ClassVisitorTee",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "visit",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.ClassVisitorTee",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "visitEnd",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.ClassVisitorTee",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "visitInnerClass",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.ClassVisitorTee",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "visitField",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.ClassVisitorTee",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "visitMethod",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.ClassVisitorTee",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "visitSource",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.ClassVisitorTee",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "visitOuterClass",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.ClassVisitorTee",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "visitAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.ClassVisitorTee",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "visitAttribute",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.ClassVisitorTee",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "visitTypeAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "visit",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "class visitation",
      "tail_type": "useScenario"
    },
    {
      "head": "visitEnd",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "ending class visitation",
      "tail_type": "useScenario"
    },
    {
      "head": "visitInnerClass",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "visiting inner classes",
      "tail_type": "useScenario"
    },
    {
      "head": "visitField",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "visiting fields",
      "tail_type": "useScenario"
    },
    {
      "head": "visitMethod",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "visiting methods",
      "tail_type": "useScenario"
    },
    {
      "head": "visitSource",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "visiting source information",
      "tail_type": "useScenario"
    },
    {
      "head": "visitOuterClass",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "visiting outer class information",
      "tail_type": "useScenario"
    },
    {
      "head": "visitAnnotation",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "visiting annotations",
      "tail_type": "useScenario"
    },
    {
      "head": "visitAttribute",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "visiting attributes",
      "tail_type": "useScenario"
    },
    {
      "head": "visitTypeAnnotation",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "visiting type annotations",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.cglib.transform.ClassVisitorTee",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.ClassVisitorTee",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.ClassVisitorTee",
      "head_type": "class",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.ClassVisitorTee#visitAttribute(Attribute)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "visitAttribute",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.ClassVisitorTee#visitAttribute(Attribute)",
      "head_type": "method",
      "relation": "have",
      "tail": "visitAttribute(Attribute) sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "visitAttribute(Attribute) sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.cglib.transform.ClassVisitorTee#visitAttribute(Attribute) code content",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#readByte(Object,String,byte)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "readByte",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#readByte(Object,String,byte)",
      "head_type": "method",
      "relation": "have",
      "tail": "readByte returns oldValue",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#readByte(Object,String,byte)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddDelegateTransformer",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "addDelegateMethod",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddDelegateTransformer",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "constructorDelegateInitialization",
      "tail_type": "apiFunction"
    },
    {
      "head": "addDelegateMethod",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "addDelegateToClass",
      "tail_type": "useScenario"
    },
    {
      "head": "constructorDelegateInitialization",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "initializeDelegateInConstructor",
      "tail_type": "useScenario"
    },
    {
      "head": "addDelegateToClass",
      "head_type": "useScenario",
      "relation": "have",
      "tail": "addDelegateMethodSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "initializeDelegateInConstructor",
      "head_type": "useScenario",
      "relation": "have",
      "tail": "constructorDelegateInitializationSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "addDelegateMethodSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.cglib.transform.impl.AddDelegateTransformer",
      "tail_type": "class"
    },
    {
      "head": "constructorDelegateInitializationSampleCode",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.cglib.transform.impl.AddDelegateTransformer",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddDelegateTransformer",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddDelegateTransformer",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitTypeAnnotation(int,TypePath,String,boolean)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "visitTypeAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitTypeAnnotation(int,TypePath,String,boolean)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.AnnotationVisitorTee",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitTypeAnnotation(int,TypePath,String,boolean)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.MethodVisitor",
      "tail_type": "class"
    },
    {
      "head": "visitTypeAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "org.springframework.cglib.transform.MethodVisitorTee#visitTypeAnnotation(int,TypePath,String,boolean)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "visitTypeAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "Handles visiting type annotations during processing.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "visitTypeAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "This method is designed to be overridden by subclasses to customize the visiting process.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitTypeAnnotation(int,TypePath,String,boolean)",
      "head_type": "method",
      "relation": "have",
      "tail": "Handles visiting type annotations during processing.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitTypeAnnotation(int,TypePath,String,boolean)",
      "head_type": "method",
      "relation": "have",
      "tail": "This method is designed to be overridden by subclasses to customize the visiting process.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.ClassTransformerTee#setTarget(ClassVisitor)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "setTarget",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.ClassTransformerTee#setTarget(ClassVisitor)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "ClassVisitor",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.ClassTransformerTee#setTarget(ClassVisitor)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "ClassTransformerTee",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.ClassTransformerTee#setTarget(ClassVisitor)",
      "head_type": "method",
      "relation": "have",
      "tail": "setTarget(ClassVisitor) sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "setTarget(ClassVisitor) sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "Complete setTarget(ClassVisitor) example",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.ClassVisitorTee#visitInnerClass(String,String,String,int)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "visitInnerClass",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.ClassVisitorTee#visitInnerClass(String,String,String,int)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.ClassVisitorTee",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.ClassVisitorTee#visitInnerClass(String,String,String,int)",
      "head_type": "method",
      "relation": "have",
      "tail": "visitInnerClass sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "visitInnerClass sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "@Override\npublic void visitInnerClass(String name, String outerName, String innerName, int access) {\n    cv1.visitInnerClass(name, outerName, innerName, access);\n    cv2.visitInnerClass(name, outerName, innerName, access);\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProvider#getFieldNames()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "getFieldNames",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProvider#getFieldNames()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.impl.FieldProvider",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProvider",
      "head_type": "class",
      "relation": "have",
      "tail": "org.springframework.cglib.transform.impl.FieldProvider#getFieldNames()",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#begin_class(int,int,String,Type,Type[],String)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "begin_class",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#begin_class(int,int,String,Type,Type[],String)",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "TypeUtils.isAbstract(access)",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#begin_class(int,int,String,Type,Type[],String)",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "TypeUtils.add(interfaces, FIELD_PROVIDER)",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#begin_class(int,int,String,Type,Type[],String)",
      "head_type": "method",
      "relation": "have",
      "tail": "begin_class sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#begin_class(int,int,String,Type,Type[],String)",
      "head_type": "method",
      "relation": "have",
      "tail": "begin_class related concept interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#begin_class(int,int,String,Type,Type[],String)",
      "head_type": "method",
      "relation": "have",
      "tail": "begin_class design principle interpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#begin_class(int,int,String,Type,Type[],String)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "TypeUtils",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#begin_class(int,int,String,Type,Type[],String)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "FIELD_PROVIDER",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#readByte(Object,String,byte)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "readByte",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#readByte(Object,String,byte)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#begin_method(int,Signature,Type[])",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "field instruction interception",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#begin_method(int,Signature,Type[])",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "field access filter conditions",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#begin_method(int,Signature,Type[])",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "modifying field access behavior",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#begin_method(int,Signature,Type[])",
      "head_type": "method",
      "relation": "have",
      "tail": "complete example of intercepting and modifying field instructions",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#begin_method(int,Signature,Type[])",
      "head_type": "method",
      "relation": "have",
      "tail": "explanation of how field interception works",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#begin_method(int,Signature,Type[])",
      "head_type": "method",
      "relation": "have",
      "tail": "design principles behind InterceptFieldTransformer",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#begin_method(int,Signature,Type[])",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.impl.InterceptFieldTransformer",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitAnnotationDefault()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "visitAnnotationDefault",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitAnnotationDefault()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "AnnotationVisitorTee",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitAnnotationDefault()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "mv1",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitAnnotationDefault()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "mv2",
      "tail_type": "class"
    },
    {
      "head": "visitAnnotationDefault",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "visitAnnotationDefault() sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "visitAnnotationDefault() sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "Complete visitAnnotationDefault() example",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.util.ParallelSorter#mergeSort(int,int,int)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "in-place merge sort",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.util.ParallelSorter#mergeSort(int,int,int)",
      "head_type": "method",
      "relation": "have",
      "tail": "Sort the arrays using an in-place merge sort.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.util.ParallelSorter#mergeSort(int,int,int)",
      "head_type": "method",
      "relation": "have",
      "tail": "The mergeSort method sorts an array in-place using the merge sort algorithm. It takes three parameters: the index of the array to sort by, the starting index (inclusive), and the ending index (exclusive).",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.util.ParallelSorter#mergeSort(int,int,int)",
      "head_type": "method",
      "relation": "have",
      "tail": "package com.example;\n\nimport org.springframework.cglib.util.ParallelSorter;\n\npublic class MergeSortExample {\n    public static void main(String[] args) {\n        ParallelSorter sorter = new ParallelSorter();\n        int[] array = {5, 2, 9, 1, 5, 6};\n        sorter.mergeSort(0, 0, array.length);\n        for (int i : array) {\n            System.out.print(i + \" \");\n        }\n    }\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.AbstractClassLoader#postProcess(Class)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "class processing",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.AbstractClassLoader#postProcess(Class)",
      "head_type": "method",
      "relation": "have",
      "tail": "postProcess method in AbstractClassLoader",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.AbstractClassLoader#postProcess(Class)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.AbstractClassLoader",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.AbstractClassTransformer#setTarget(ClassVisitor)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "setTarget",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.AbstractClassTransformer#setTarget(ClassVisitor)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.AbstractClassTransformer",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.AbstractClassTransformer",
      "head_type": "class",
      "relation": "have",
      "tail": "org.springframework.cglib.transform.AbstractClassTransformer#setTarget(ClassVisitor)",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.cglib.transform.AbstractClassTransformer#setTarget(ClassVisitor)",
      "head_type": "method",
      "relation": "have",
      "tail": "public void setTarget(ClassVisitor target)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.ClassVisitorTee#visitField(int,String,String,String,Object)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "visitField",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.ClassVisitorTee#visitField(int,String,String,String,Object)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.ClassVisitorTee",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.ClassVisitorTee",
      "head_type": "class",
      "relation": "have",
      "tail": "org.springframework.cglib.transform.ClassVisitorTee#visitField(int,String,String,String,Object)",
      "tail_type": "method"
    },
    {
      "head": "visitField",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "org.springframework.cglib.transform.ClassVisitorTee#visitField(int,String,String,String,Object)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.ClassVisitorTee#visitField(int,String,String,String,Object)",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "@Override\npublic FieldVisitor visitField(int access, String name, String desc, String signature, Object value) {\n    FieldVisitor fv1 = cv1.visitField(access, name, desc, signature, value);\n    FieldVisitor fv2 = cv2.visitField(access, name, desc, signature, value);\n    if (fv1 == null) {\n        return fv2;\n    }\n    if (fv2 == null) {\n        return fv1;\n    }\n    return new FieldVisitorTee(fv1, fv2);\n}",
      "tail_type": "String"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#writeDouble(Object,String,double,double)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "writeDouble",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#writeDouble(Object,String,double,double)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
      "tail_type": "class"
    },
    {
      "head": "writeDouble",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "org.springframework.cglib.transform.impl.InterceptFieldCallback#writeDouble(Object,String,double,double)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "writeDouble",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "Updates a double field in an object.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "writeDouble",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "Ensure thread safety when updating fields.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#readChar(Object,String,char)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "read character from object field",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#readChar(Object,String,char)",
      "head_type": "method",
      "relation": "have",
      "tail": "sample code for reading character from object field",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#readChar(Object,String,char)",
      "head_type": "method",
      "relation": "have",
      "tail": "interpretation of related concepts for reading character from object field",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#readChar(Object,String,char)",
      "head_type": "method",
      "relation": "have",
      "tail": "design principle interpretation for reading character from object field",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#readChar(Object,String,char)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
      "tail_type": "class"
    },
    {
      "relationships": [
        {
          "tail": "visitTypeInsn",
          "head_type": "method",
          "relation": "haveFunction",
          "head": "org.springframework.cglib.transform.MethodVisitorTee#visitTypeInsn(int,String)",
          "tail_type": "apiFunction"
        },
        {
          "tail": "org.springframework.cglib.transform.MethodVisitorTee",
          "head_type": "method",
          "relation": "associated_with",
          "head": "org.springframework.cglib.transform.MethodVisitorTee#visitTypeInsn(int,String)",
          "tail_type": "class"
        },
        {
          "tail": "visitTypeInsnSampleCode",
          "head_type": "apiFunction",
          "relation": "have",
          "head": "visitTypeInsn",
          "tail_type": "useSampleCode"
        }
      ]
    },
    {
      "relationships": [
        {
          "tail": "visitTypeInsn",
          "head_type": "method",
          "relation": "haveFunction",
          "head": "org.springframework.cglib.transform.MethodVisitorTee#visitTypeInsn(int,String)",
          "tail_type": "apiFunction"
        },
        {
          "tail": "org.springframework.cglib.transform.MethodVisitorTee",
          "head_type": "method",
          "relation": "associated_with",
          "head": "org.springframework.cglib.transform.MethodVisitorTee#visitTypeInsn(int,String)",
          "tail_type": "class"
        },
        {
          "tail": "visitTypeInsnSampleCode",
          "head_type": "apiFunction",
          "relation": "have",
          "head": "visitTypeInsn",
          "tail_type": "useSampleCode"
        }
      ]
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitInvokeDynamicInsn(String,String,Handle,Object)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "visitInvokeDynamicInsn",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitInvokeDynamicInsn(String,String,Handle,Object)",
      "head_type": "method",
      "relation": "have",
      "tail": "visitInvokeDynamicInsn(String name, String desc, Handle bsm, Object... bsmArgs)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitInvokeDynamicInsn(String,String,Handle,Object)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "mv1.visitInvokeDynamicInsn(name, desc, bsm, bsmArgs)",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitInvokeDynamicInsn(String,String,Handle,Object)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "mv2.visitInvokeDynamicInsn(name, desc, bsm, bsmArgs)",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.util.ParallelSorter#quickSort(int,int,int)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "quicksort algorithm",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.util.ParallelSorter#quickSort(int,int,int)",
      "head_type": "method",
      "relation": "have",
      "tail": "Sort the arrays using the quicksort algorithm.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.util.ParallelSorter#quickSort(int,int,int)",
      "head_type": "method",
      "relation": "have",
      "tail": "public void quickSort(int index, int lo, int hi) { quickSort(index, lo, hi, null); }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AccessFieldTransformer#declare_field(int,String,Type,Object)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "generate getter and setter methods",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AccessFieldTransformer#declare_field(int,String,Type,Object)",
      "head_type": "method",
      "relation": "have",
      "tail": "generate getter and setter methods for fields based on callback property names",
      "tail_type": "useSampleCode"
    },
    {
      "head": "generate getter and setter methods for fields based on callback property names",
      "head_type": "useSampleCode",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.impl.AccessFieldTransformer#declare_field(int,String,Type,Object)",
      "tail_type": "method"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AccessFieldTransformer#declare_field(int,String,Type,Object)",
      "head_type": "method",
      "relation": "have",
      "tail": "This method generates getter and setter methods for a given field based on the property name obtained from a callback. It uses the TypeUtils.upperFirst() method to capitalize the first letter of the property name and then prefixes it with 'get' or 'set' to create the method names. The method also checks if the property name is not null before generating the methods.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AccessFieldTransformer#declare_field(int,String,Type,Object)",
      "head_type": "method",
      "relation": "have",
      "tail": "The design principle behind this method is to automate the generation of getter and setter methods for fields in a class, reducing boilerplate code and improving maintainability. It leverages the callback mechanism to dynamically determine the property names and generate the corresponding methods accordingly.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddInitTransformer",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "add initialization method",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddInitTransformer",
      "head_type": "class",
      "relation": "constrained_by",
      "tail": "method signature must be (Object) and return void",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddInitTransformer",
      "head_type": "class",
      "relation": "applied_to",
      "tail": "constructor methods",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddInitTransformer",
      "head_type": "class",
      "relation": "have",
      "tail": "add initialization method sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddInitTransformer",
      "head_type": "class",
      "relation": "have",
      "tail": "related concept interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddInitTransformer",
      "head_type": "class",
      "relation": "have",
      "tail": "design principle interpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "add initialization method sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "complete sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldEnabled",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getInterceptFieldCallback()",
      "tail_type": "apiFunction"
    },
    {
      "head": "getInterceptFieldCallback()",
      "head_type": "apiFunction",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.impl.InterceptFieldEnabled",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.impl.UndeclaredThrowableTransformer#begin_method(int,Signature,Type[])",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "handle undeclared throwable",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.UndeclaredThrowableTransformer#begin_method(int,Signature,Type[])",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "TypeUtils.isAbstract(access) || sig.equals(Constants.SIG_STATIC)",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.cglib.transform.impl.UndeclaredThrowableTransformer#begin_method(int,Signature,Type[])",
      "head_type": "method",
      "relation": "applied_to",
      "tail": "override method visitMethodInsn",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.cglib.transform.impl.UndeclaredThrowableTransformer#begin_method(int,Signature,Type[])",
      "head_type": "method",
      "relation": "have",
      "tail": "visitMethodInsn override to handle constructor call",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.cglib.transform.impl.UndeclaredThrowableTransformer#begin_method(int,Signature,Type[])",
      "head_type": "method",
      "relation": "have",
      "tail": "visitMaxs override to wrap undeclared throwable",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.cglib.transform.impl.UndeclaredThrowableTransformer#begin_method(int,Signature,Type[])",
      "head_type": "method",
      "relation": "have",
      "tail": "RelatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.UndeclaredThrowableTransformer#begin_method(int,Signature,Type[])",
      "head_type": "method",
      "relation": "have",
      "tail": "DesignPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.UndeclaredThrowableTransformer#begin_method(int,Signature,Type[])",
      "head_type": "method",
      "relation": "have",
      "tail": "UseSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.UndeclaredThrowableTransformer#begin_method(int,Signature,Type[])",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.impl.UndeclaredThrowableTransformer",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.MethodFilterTransformer",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "Method Filtering",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.MethodFilterTransformer",
      "head_type": "class",
      "relation": "have",
      "tail": "MethodFilterTransformer Use Sample Code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "MethodFilterTransformer Use Sample Code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "Complete Example of MethodFilterTransformer",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.MethodFilterTransformer",
      "head_type": "class",
      "relation": "have",
      "tail": "MethodFilterTransformer Related Concept Interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "MethodFilterTransformer Related Concept Interpretation",
      "head_type": "relatedConceptInterpretation",
      "relation": "have",
      "tail": "Method Filtering Concept",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.MethodFilterTransformer",
      "head_type": "class",
      "relation": "have",
      "tail": "MethodFilterTransformer Design Principle Interpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "MethodFilterTransformer Design Principle Interpretation",
      "head_type": "designPrincipleInterpretation",
      "relation": "have",
      "tail": "Flexibility and Extensibility in Method Filtering",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.ClassVisitorTee#visitTypeAnnotation(int,TypePath,String,boolean)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "visitTypeAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.ClassVisitorTee#visitTypeAnnotation(int,TypePath,String,boolean)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.ClassVisitorTee",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.ClassVisitorTee",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.ClassVisitorTee",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "visitTypeAnnotation",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProvider#setField(int,Object)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "setField",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProvider#setField(int,Object)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.impl.FieldProvider",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#initFieldProvider(String[])",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "initialize field provider",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#initFieldProvider(String[])",
      "head_type": "method",
      "relation": "have",
      "tail": "initializes field provider with given names",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#initFieldProvider(String[])",
      "head_type": "method",
      "relation": "have",
      "tail": "private void initFieldProvider(String[] names) {\n    CodeEmitter e = getStaticHook();\n    EmitUtils.push_object(e, names);\n    e.putstatic(getClassType(), FIELD_NAMES, Constants.TYPE_STRING_ARRAY);\n    e.push(names.length);\n    e.newarray(Constants.TYPE_CLASS);\n    e.dup();\n    for (int i = 0; i < names.length; i++) {\n        e.dup();\n        e.push(i);\n        Type type = (Type) fields.get(names[i]);\n        EmitUtils.load_class(e, type);\n        e.aastore();\n    }\n    e.putstatic(getClassType(), FIELD_TYPES, Constants.TYPE_CLASS_ARRAY);\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#initFieldProvider(String[])",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#writeShort(Object,String,short,short)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "writeShort",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#writeShort(Object,String,short,short)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
      "tail_type": "class"
    },
    {
      "head": "writeShort",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "writeShortSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitInsn(int)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "visitInsn",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitInsn(int)",
      "head_type": "method",
      "relation": "have",
      "tail": "visitInsn(int) sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "visitInsn(int) sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "Complete example of visitInsn(int)",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.AnnotationVisitorTee",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "getInstance",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.AnnotationVisitorTee",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "visit",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.AnnotationVisitorTee",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "visitEnum",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.AnnotationVisitorTee",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "visitAnnotation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.AnnotationVisitorTee",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "visitArray",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.AnnotationVisitorTee",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "visitEnd",
      "tail_type": "apiFunction"
    },
    {
      "head": "visit",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "visit both AnnotationVisitor instances",
      "tail_type": "useScenario"
    },
    {
      "head": "visitEnum",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "visit both AnnotationVisitor instances",
      "tail_type": "useScenario"
    },
    {
      "head": "visitAnnotation",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "create and return a new AnnotationVisitorTee instance",
      "tail_type": "useScenario"
    },
    {
      "head": "visitArray",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "create and return a new AnnotationVisitorTee instance",
      "tail_type": "useScenario"
    },
    {
      "head": "visitEnd",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "call visitEnd on both AnnotationVisitor instances",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.cglib.transform.AnnotationVisitorTee",
      "head_type": "class",
      "relation": "have",
      "tail": "visit both AnnotationVisitor instances",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.cglib.transform.AnnotationVisitorTee",
      "head_type": "class",
      "relation": "have",
      "tail": "create and return a new AnnotationVisitorTee instance",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.cglib.transform.AnnotationVisitorTee",
      "head_type": "class",
      "relation": "have",
      "tail": "call visitEnd on both AnnotationVisitor instances",
      "tail_type": "useScenario"
    },
    {
      "head": "org.springframework.cglib.transform.AnnotationVisitorTee",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.AnnotationVisitorTee",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.AnnotationVisitorTee",
      "head_type": "class",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.AnnotationVisitorTee#visitEnd()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "visitEnd",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.AnnotationVisitorTee#visitEnd()",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.cglib.transform.AnnotationVisitorTee#visitEnd() Sample Code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.AnnotationVisitorTee#visitEnd() Sample Code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "Complete Example Code for visitEnd Method",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#getNames()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "getNames",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.Transformable",
      "tail_type": "class"
    },
    {
      "head": "getNames",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "getNames() method retrieves an array of strings representing field names.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "getNames",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "private void getNames() {\n    CodeEmitter e = super.begin_method(Constants.ACC_PUBLIC, PROVIDER_GET_NAMES, null);\n    e.getstatic(getClassType(), FIELD_NAMES, Constants.TYPE_STRING_ARRAY);\n    e.return_value();\n    e.end_method();\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#writeChar(Object,String,char,char)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "write character data",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#writeChar(Object,String,char,char)",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.TransformingClassGenerator",
      "tail_type": "class"
    },
    {
      "head": "write character data",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "character data manipulation",
      "tail_type": "useScenario"
    },
    {
      "head": "write character data",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "thread safety",
      "tail_type": "useConstraint"
    },
    {
      "head": "write character data",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "public char writeChar(Object obj, String name, char oldValue, char newValue) { /* implementation */ }",
      "tail_type": "useSampleCode"
    },
    {
      "head": "write character data",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "This method is used to write character data to a field in an object. It takes the target object, field name, old character value, and new character value as arguments.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "write character data",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "The method ensures that character data is written safely and efficiently, adhering to the principles of encapsulation and data integrity.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#readLong(Object,String,long)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "readLong",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#readLong(Object,String,long)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#readLong(Object,String,long)",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.UndeclaredThrowableStrategy#transform(ClassGenerator)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "transform",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.UndeclaredThrowableStrategy#transform(ClassGenerator)",
      "head_type": "method",
      "relation": "have",
      "tail": "UndeclaredThrowableTransformer",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.impl.UndeclaredThrowableStrategy#transform(ClassGenerator)",
      "head_type": "method",
      "relation": "have",
      "tail": "MethodFilterTransformer",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.impl.UndeclaredThrowableStrategy#transform(ClassGenerator)",
      "head_type": "method",
      "relation": "have",
      "tail": "TransformingClassGenerator",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.impl.UndeclaredThrowableStrategy#transform(ClassGenerator)",
      "head_type": "method",
      "relation": "have",
      "tail": "transforming",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.UndeclaredThrowableStrategy#transform(ClassGenerator)",
      "head_type": "method",
      "relation": "have",
      "tail": "exception handling",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.UndeclaredThrowableStrategy#transform(ClassGenerator)",
      "head_type": "method",
      "relation": "have",
      "tail": "code generation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.UndeclaredThrowableStrategy#transform(ClassGenerator)",
      "head_type": "method",
      "relation": "have",
      "tail": "class transformation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.UndeclaredThrowableStrategy#transform(ClassGenerator)",
      "head_type": "method",
      "relation": "have",
      "tail": "design principle of transforming classes",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.UndeclaredThrowableStrategy#transform(ClassGenerator)",
      "head_type": "method",
      "relation": "have",
      "tail": "sample code for transforming classes",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitLdcInsn(Object)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "visitLdcInsn",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitLdcInsn(Object)",
      "head_type": "method",
      "relation": "have",
      "tail": "visitLdcInsn(Object) Sample Code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "visitLdcInsn(Object) Sample Code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "Complete Example Code",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.TransformingClassLoader",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "class transformation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.TransformingClassLoader",
      "head_type": "class",
      "relation": "have",
      "tail": "TransformingClassLoader is used to transform classes at load time",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.TransformingClassLoader",
      "head_type": "class",
      "relation": "have",
      "tail": "Design principle involves creating a flexible and reusable class transformation mechanism",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.TransformingClassLoader",
      "head_type": "class",
      "relation": "have",
      "tail": "package com.example;\nimport org.springframework.cglib.transform.*;\npublic class TransformingClassLoaderExample {\n    public static void main(String[] args) {\n        // Example usage of TransformingClassLoader\n    }\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.util.Comparer",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "compare",
      "tail_type": "apiFunction"
    },
    {
      "head": "compare",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.AbstractClassLoader#attributes()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "getAttributes",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.AbstractClassLoader#attributes()",
      "head_type": "method",
      "relation": "have",
      "tail": "This method is used to retrieve attributes.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.AbstractClassLoader#attributes()",
      "head_type": "method",
      "relation": "have",
      "tail": "The method returns an array of Attribute objects, which could be null.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.AbstractClassLoader#attributes()",
      "head_type": "method",
      "relation": "have",
      "tail": "protected Attribute[] attributes() {\n    return null;\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.ClassTransformerFactory",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "newInstance",
      "tail_type": "apiFunction"
    },
    {
      "head": "newInstance",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "org.springframework.cglib.transform.ClassTransformerFactory",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.ClassTransformerTee",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "transform classes",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.ClassTransformerTee",
      "head_type": "class",
      "relation": "have",
      "tail": "ClassTransformerTee is used to combine multiple ClassVisitor instances into one.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.ClassTransformerTee",
      "head_type": "class",
      "relation": "have",
      "tail": "Design principle of ClassTransformerTee is to provide a flexible way to apply multiple transformations on a class during the bytecode manipulation process.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.ClassTransformerTee",
      "head_type": "class",
      "relation": "have",
      "tail": "package org.springframework.cglib.transform;\n\nimport org.springframework.cglib.ClassVisitor;\n\npublic class ClassTransformerTee extends ClassTransformer {\n    private ClassVisitor branch;\n\n    public ClassTransformerTee(ClassVisitor branch) {\n        super(Constants.ASM_API);\n        this.branch = branch;\n    }\n\n    @Override\n    public void setTarget(ClassVisitor target) {\n        cv = new ClassVisitorTee(branch, target);\n    }\n\n    // Additional methods and logic specific to ClassTransformerTee\n}\n",
      "tail_type": "useSampleCode"
    },
    {
      "relationships": [
        {
          "tail": "visitAnnotation",
          "head_type": "method",
          "relation": "haveFunction",
          "head": "org.springframework.cglib.transform.FieldVisitorTee#visitAnnotation(String,boolean)",
          "tail_type": "apiFunction"
        },
        {
          "tail": "org.springframework.cglib.transform.FieldVisitorTee",
          "head_type": "method",
          "relation": "associated_with",
          "head": "org.springframework.cglib.transform.FieldVisitorTee#visitAnnotation(String,boolean)",
          "tail_type": "class"
        },
        {
          "tail": "org.springframework.cglib.transform.AnnotationVisitorTee",
          "head_type": "method",
          "relation": "associated_with",
          "head": "org.springframework.cglib.transform.FieldVisitorTee#visitAnnotation(String,boolean)",
          "tail_type": "class"
        },
        {
          "tail": "visitAnnotation sample code",
          "head_type": "method",
          "relation": "have",
          "head": "org.springframework.cglib.transform.FieldVisitorTee#visitAnnotation(String,boolean)",
          "tail_type": "useSampleCode"
        }
      ]
    },
    {
      "relationships": [
        {
          "tail": "visitAnnotation",
          "head_type": "method",
          "relation": "haveFunction",
          "head": "org.springframework.cglib.transform.FieldVisitorTee#visitAnnotation(String,boolean)",
          "tail_type": "apiFunction"
        },
        {
          "tail": "org.springframework.cglib.transform.FieldVisitorTee",
          "head_type": "method",
          "relation": "associated_with",
          "head": "org.springframework.cglib.transform.FieldVisitorTee#visitAnnotation(String,boolean)",
          "tail_type": "class"
        },
        {
          "tail": "org.springframework.cglib.transform.AnnotationVisitorTee",
          "head_type": "method",
          "relation": "associated_with",
          "head": "org.springframework.cglib.transform.FieldVisitorTee#visitAnnotation(String,boolean)",
          "tail_type": "class"
        },
        {
          "tail": "visitAnnotation sample code",
          "head_type": "method",
          "relation": "have",
          "head": "org.springframework.cglib.transform.FieldVisitorTee#visitAnnotation(String,boolean)",
          "tail_type": "useSampleCode"
        }
      ]
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#readDouble(Object,String,double)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "readDouble",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#readDouble(Object,String,double)",
      "head_type": "method",
      "relation": "have",
      "tail": "readDouble returns oldValue",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#readDouble(Object,String,double)",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#readDouble(Object,String,double)",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#readDouble(Object,String,double)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.MethodFilterTransformer#setTarget(ClassVisitor)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "setTarget",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.MethodFilterTransformer#setTarget(ClassVisitor)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.ClassVisitor",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.MethodFilterTransformer#setTarget(ClassVisitor)",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.cglib.transform.MethodFilterTransformer",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.util.ParallelSorter#mergeSort(int,int,int,Comparator)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "in-place merge sort",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.util.ParallelSorter#mergeSort(int,int,int,Comparator)",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "specified column is non-primitive",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.cglib.util.ParallelSorter#mergeSort(int,int,int,Comparator)",
      "head_type": "method",
      "relation": "have",
      "tail": "Sort the arrays using an in-place merge sort.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.util.ParallelSorter#mergeSort(int,int,int,Comparator)",
      "head_type": "method",
      "relation": "have",
      "tail": "The mergeSort method sorts arrays in-place using a merge sort algorithm. It takes an index to sort by, a range specified by lo and hi, and a Comparator if the column is non-primitive.",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.util.ParallelSorter#mergeSort(int,int,int,Comparator)",
      "head_type": "method",
      "relation": "have",
      "tail": "package com.example;\nimport java.util.Comparator;\nimport org.springframework.cglib.util.ParallelSorter;\n\npublic class ParallelSorterExample {\n    public static void main(String[] args) {\n        ParallelSorter sorter = new ParallelSorter();\n        Integer[] array = {5, 2, 8, 3, 1};\n        sorter.mergeSort(0, 0, array.length, Comparator.naturalOrder());\n        for (int i = 0; i < array.length; i++) {\n            System.out.print(array[i] + \" \");\n        }\n    }\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.ClassTransformerChain",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "class transformation chaining",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.ClassTransformerChain",
      "head_type": "class",
      "relation": "have",
      "tail": "ClassTransformerChain allows chaining multiple ClassTransformers",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.ClassTransformerChain",
      "head_type": "class",
      "relation": "have",
      "tail": "Design principle: Chain of Responsibility",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.ClassTransformerChain",
      "head_type": "class",
      "relation": "have",
      "tail": "package com.example;\nimport org.springframework.cglib.transform.ClassTransformer;\nimport org.springframework.cglib.transform.ClassTransformerChain;\n\npublic class ClassTransformerChainExample {\n    public static void main(String[] args) {\n        ClassTransformer transformer1 = new MyClassTransformer();\n        ClassTransformer transformer2 = new AnotherClassTransformer();\n        ClassTransformer[] transformers = {transformer1, transformer2};\n        \n        ClassTransformerChain chain = new ClassTransformerChain(transformers);\n        // Use the chain as needed\n    }\n}\n\nclass MyClassTransformer extends ClassTransformer {\n    @Override\n    public void setTarget(ClassVisitor v) {\n        // Custom transformation logic\n    }\n}\n\nclass AnotherClassTransformer extends ClassTransformer {\n    @Override\n    public void setTarget(ClassVisitor v) {\n        // Custom transformation logic\n    }\n}",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddStaticInitTransformer#init()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "static initialization transformation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddStaticInitTransformer#init()",
      "head_type": "method",
      "relation": "constrained_by",
      "tail": "interface type constraint",
      "tail_type": "useConstraint"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddStaticInitTransformer#init()",
      "head_type": "method",
      "relation": "have",
      "tail": "static initialization code generation",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddStaticInitTransformer#init()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.TransformingClassGenerator",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddStaticInitTransformer#init()",
      "head_type": "method",
      "relation": "have",
      "tail": "static initialization explanation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AddStaticInitTransformer#init()",
      "head_type": "method",
      "relation": "have",
      "tail": "design principle for static initialization",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#readDouble(Object,String,double)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "readDouble",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#readDouble(Object,String,double)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#readDouble(Object,String,double)",
      "head_type": "method",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitVarInsn(int,int)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "visitVarInsn",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitVarInsn(int,int)",
      "head_type": "method",
      "relation": "have",
      "tail": "visitVarInsn(int, int) sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitEnd()",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "endVisit",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitEnd()",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.cglib.transform.MethodVisitorTee#visitEnd() sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitEnd()",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.MethodVisitorTee",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee#visitEnd() sample code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "org.springframework.cglib.transform.MethodVisitorTee#visitEnd() code content",
      "tail_type": "codeContent"
    },
    {
      "head": "org.springframework.cglib.transform.AbstractClassFilterTransformer#visitAttribute(Attribute)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "visitAttribute",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.AbstractClassFilterTransformer#visitAttribute(Attribute)",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.cglib.transform.AbstractClassFilterTransformer#visitAttribute(Attribute) sample code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.ClassEmitterTransformer",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "class transformation",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.ClassEmitterTransformer",
      "head_type": "class",
      "relation": "have",
      "tail": "used in code generation libraries",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.ClassEmitterTransformer",
      "head_type": "class",
      "relation": "have",
      "tail": "design principle focuses on flexibility and code generation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#readBoolean(Object,String,boolean)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "readBoolean",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#readBoolean(Object,String,boolean)",
      "head_type": "method",
      "relation": "have",
      "tail": "readBoolean returns oldValue",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#readBoolean(Object,String,boolean)",
      "head_type": "method",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#readBoolean(Object,String,boolean)",
      "head_type": "method",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#writeInt(Object,String,int,int)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "write integer value to a field",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#writeInt(Object,String,int,int)",
      "head_type": "method",
      "relation": "have",
      "tail": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
      "head_type": "class",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.TransformingClassGenerator",
      "tail_type": "class"
    },
    {
      "head": "write integer value to a field",
      "head_type": "apiFunction",
      "relation": "constrained_by",
      "tail": "field accessibility constraints",
      "tail_type": "useConstraint"
    },
    {
      "head": "write integer value to a field",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "modifying object field values",
      "tail_type": "useScenario"
    },
    {
      "head": "write integer value to a field",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "sample code for writing integer to a field",
      "tail_type": "useSampleCode"
    },
    {
      "head": "write integer value to a field",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "related concept interpretation for writing integer to a field",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "write integer value to a field",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "design principle interpretation for writing integer to a field",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#writeObject(Object,String,Object,Object)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "writeObject",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#writeObject(Object,String,Object,Object)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldFilter#acceptRead(Type,String)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "field access interception",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldFilter#acceptRead(Type,String)",
      "head_type": "method",
      "relation": "have",
      "tail": "used to determine whether a field read operation should be intercepted",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldFilter#acceptRead(Type,String)",
      "head_type": "method",
      "relation": "have",
      "tail": "design principle is to provide a way to filter field read operations based on type and field name",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.impl.InterceptFieldFilter#acceptRead(Type,String)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "org.springframework.cglib.transform.impl.InterceptFieldFilter",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#writeInt(Object,String,int,int)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "writeInt",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#writeInt(Object,String,int,int)",
      "head_type": "method",
      "relation": "have",
      "tail": "writeIntSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.transform.MethodVisitorTee",
      "head_type": "class",
      "relation": "haveFunction",
      "tail": "tee_method_visitor",
      "tail_type": "apiFunction"
    },
    {
      "head": "tee_method_visitor",
      "head_type": "apiFunction",
      "relation": "applied_to",
      "tail": "method_delegation",
      "tail_type": "useScenario"
    },
    {
      "head": "tee_method_visitor",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "complete_sample_code",
      "tail_type": "useSampleCode"
    },
    {
      "head": "complete_sample_code",
      "head_type": "useSampleCode",
      "relation": "have",
      "tail": "sample_code_for_tee_method_visitor",
      "tail_type": "useSampleCode"
    },
    {
      "head": "tee_method_visitor",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "related_concept_interpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "related_concept_interpretation",
      "head_type": "relatedConceptInterpretation",
      "relation": "have",
      "tail": "method_visitor_tee_concept",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "tee_method_visitor",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "design_principle_interpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "design_principle_interpretation",
      "head_type": "designPrincipleInterpretation",
      "relation": "have",
      "tail": "tee_design_principles",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "org.springframework.cglib.transform.TransformingClassGenerator#generateClass(ClassVisitor)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "generateClass",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.transform.TransformingClassGenerator#generateClass(ClassVisitor)",
      "head_type": "method",
      "relation": "associated_with",
      "tail": "ClassVisitor",
      "tail_type": "class"
    },
    {
      "head": "org.springframework.cglib.transform.TransformingClassGenerator#generateClass(ClassVisitor)",
      "head_type": "method",
      "relation": "have",
      "tail": "TransformingClassGenerator",
      "tail_type": "class"
    },
    {
      "head": "TransformingClassGenerator",
      "head_type": "class",
      "relation": "have",
      "tail": "relatedConceptInterpretation",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "TransformingClassGenerator",
      "head_type": "class",
      "relation": "have",
      "tail": "designPrincipleInterpretation",
      "tail_type": "designPrincipleInterpretation"
    },
    {
      "head": "generateClass",
      "head_type": "apiFunction",
      "relation": "have",
      "tail": "useSampleCode",
      "tail_type": "useSampleCode"
    },
    {
      "head": "org.springframework.cglib.util.ParallelSorter#quickSort(int)",
      "head_type": "method",
      "relation": "haveFunction",
      "tail": "quicksort algorithm",
      "tail_type": "apiFunction"
    },
    {
      "head": "org.springframework.cglib.util.ParallelSorter#quickSort(int)",
      "head_type": "method",
      "relation": "have",
      "tail": "Sort the arrays using the quicksort algorithm.",
      "tail_type": "relatedConceptInterpretation"
    },
    {
      "head": "org.springframework.cglib.util.ParallelSorter#quickSort(int)",
      "head_type": "method",
      "relation": "have",
      "tail": "public void quickSort(int index) {\n    quickSort(index, 0, len(), null);\n}",
      "tail_type": "useSampleCode"
    }
  ]
}