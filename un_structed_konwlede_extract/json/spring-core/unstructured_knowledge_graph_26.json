{
    "relationships": [
        {
            "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests#setUp()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "initialization",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests#setUp()",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.util.xml.AbstractStaxXMLReaderTests",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests#setUp()",
            "head_type": "method",
            "relation": "have",
            "tail": "This method sets up the test environment before each test. It initializes an XMLInputFactory, creates a SAXParser, sets it to be namespace-aware, and gets an XMLReader. It also creates a mock content handler and sets it as the content handler for the standard XMLReader.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests#setUp()",
            "head_type": "method",
            "relation": "have",
            "tail": "package org.springframework.util.xml;\n\nimport org.springframework.util.xml;\nimport org.xml.sax.ContentHandler;\nimport org.xml.sax.XMLReader;\nimport org.xml.sax.helpers.DefaultHandler;\n\npublic class AbstractStaxXMLReaderTests {\n\n    @BeforeEach\n    void setUp() throws Exception {\n        inputFactory = XMLInputFactory.newInstance();\n        SAXParserFactory saxParserFactory = SAXParserFactory.newInstance();\n        saxParserFactory.setNamespaceAware(true);\n        SAXParser saxParser = saxParserFactory.newSAXParser();\n        standardReader = saxParser.getXMLReader();\n        standardContentHandler = mockContentHandler();\n        standardReader.setContentHandler(standardContentHandler);\n    }\n\n    private XMLInputFactory inputFactory;\n    private XMLReader standardReader;\n    private ContentHandler standardContentHandler;\n\n    private ContentHandler mockContentHandler() {\n        return new DefaultHandler();\n    }\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests#setUp()",
            "head_type": "method",
            "relation": "have",
            "tail": "This method demonstrates the principle of setting up a controlled environment for unit tests. It ensures that each test starts with a fresh and consistent state, which is crucial for reliable and repeatable testing outcomes.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests#contentHandlerNamespacesNoPrefixes()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "contentHandlerNamespacesNoPrefixes",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests#contentHandlerNamespacesNoPrefixes()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "AbstractStaxXMLReader",
            "tail_type": "class"
        },
        {
            "head": "AbstractStaxXMLReader",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "AbstractStaxXMLReader",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests#contentHandlerNamespacesNoPrefixes()",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests#contentHandlerNamespacesPrefixes()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "contentHandlerNamespacesPrefixes",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests#contentHandlerNamespacesPrefixes()",
            "head_type": "method",
            "relation": "have",
            "tail": "contentHandlerNamespacesPrefixesSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "contentHandlerNamespacesPrefixesSampleCode",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.AbstractStaxXMLReaderTests#contentHandlerNamespacesPrefixes()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests#contentHandlerNamespacesPrefixes()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.AbstractStaxXMLReaderTests",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests#contentHandlerNoNamespacesPrefixes()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "contentHandlerConfiguration",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests#contentHandlerNoNamespacesPrefixes()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "featureCompatibility",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests#contentHandlerNoNamespacesPrefixes()",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "xmlParsing",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests#contentHandlerNoNamespacesPrefixes()",
            "head_type": "method",
            "relation": "have",
            "tail": "xmlConfigurationSample",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests#contentHandlerNoNamespacesPrefixes()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "AbstractStaxXMLReader",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests#contentHandlerNoNamespacesPrefixes()",
            "head_type": "method",
            "relation": "have",
            "tail": "xmlNamespaceHandlingExplanation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests#contentHandlerNoNamespacesPrefixes()",
            "head_type": "method",
            "relation": "have",
            "tail": "xmlReaderDesignPrinciples",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests#whitespace()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "XML Parsing",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests#whitespace()",
            "head_type": "method",
            "relation": "have",
            "tail": "XML Parsing Sample Code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "XML Parsing Sample Code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "Complete XML Parsing Example",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests#whitespace()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.AbstractStaxXMLReader",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests#whitespace()",
            "head_type": "method",
            "relation": "have",
            "tail": "XML Parsing Related Concepts",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "XML Parsing Related Concepts",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "Explanation of XML Parsing",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests#whitespace()",
            "head_type": "method",
            "relation": "have",
            "tail": "XML Parsing Design Principles",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "XML Parsing Design Principles",
            "head_type": "designPrincipleInterpretation",
            "relation": "have",
            "tail": "Design Principles of XML Parsing",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests#lexicalHandler()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "lexicalHandler",
            "tail_type": "apiFunction"
        },
        {
            "head": "lexicalHandler",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "lexicalHandler",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "lexicalHandler",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests#lexicalHandler()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.AbstractStaxXMLReaderTests",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests#mockLexicalHandler()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "mocking",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests#mockLexicalHandler()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "lexical handling",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests#mockLexicalHandler()",
            "head_type": "method",
            "relation": "have",
            "tail": "private LexicalHandler mockLexicalHandler() throws Exception {\n    LexicalHandler lexicalHandler = mock();\n    willAnswer(new CopyCharsAnswer()).given(lexicalHandler).comment(any(char[].class), anyInt(), anyInt());\n    return lexicalHandler;\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests#mockLexicalHandler()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.AbstractStaxXMLReaderTests",
            "tail_type": "class"
        },
        {
            "head": "mocking",
            "head_type": "apiFunction",
            "relation": "relatedConceptInterpretation",
            "tail": "Mocking is a technique used to simulate the behavior of real dependencies in a controlled manner to test the code in isolation.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "lexical handling",
            "head_type": "apiFunction",
            "relation": "relatedConceptInterpretation",
            "tail": "Lexical handling refers to the processing of lexical structures such as comments and CDATA sections in XML.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests#createTestInputStream()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "createTestInputStream",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests#createTestInputStream()",
            "head_type": "method",
            "relation": "have",
            "tail": "createTestInputStream useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "createTestInputStream useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "private InputStream createTestInputStream() {\n    return getClass().getResourceAsStream(\"testContentHandler.xml\");\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests#mockContentHandler()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "mockingContentHandler",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests#mockContentHandler()",
            "head_type": "method",
            "relation": "have",
            "tail": "mockingContentHandlerSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "mockingContentHandlerSampleCode",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.AbstractStaxXMLReaderTests#mockContentHandler()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests#mockContentHandler()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.ContentHandler",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests#verifyIdenticalInvocations(T,T)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "verifyIdenticalInvocations",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests#verifyIdenticalInvocations(T,T)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.AbstractStaxXMLReaderTests",
            "tail_type": "class"
        },
        {
            "head": "verifyIdenticalInvocations",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "code",
            "tail_type": "code"
        },
        {
            "head": "code",
            "head_type": "code",
            "relation": "have",
            "tail": "protected <T> void verifyIdenticalInvocations(T expected, T actual) {\n    MockitoUtils.verifySameInvocations(expected, actual, new SkipLocatorArgumentsAdapter(), new CharArrayToStringAdapter(), new PartialAttributesAdapter());\n}",
            "tail_type": "codeContent"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests#createStaxXmlReader(InputStream)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "createStaxXmlReader",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests#createStaxXmlReader(InputStream)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "AbstractStaxXMLReader",
            "tail_type": "class"
        },
        {
            "head": "createStaxXmlReader",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "completeSampleCode",
            "tail_type": "completeSampleCode"
        },
        {
            "head": "org.springframework.util.xml.SkipLocatorArgumentsAdapter",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "adaptArguments",
            "tail_type": "apiFunction"
        },
        {
            "head": "adaptArguments",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "code",
            "tail_type": "code"
        },
        {
            "head": "org.springframework.util.xml.SkipLocatorArgumentsAdapter#adaptArguments(Object[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "adaptArguments",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.SkipLocatorArgumentsAdapter#adaptArguments(Object[])",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.util.xml.SkipLocatorArgumentsAdapter#adaptArguments(Object[])",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.SkipLocatorArgumentsAdapter#adaptArguments(Object[])",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.SkipLocatorArgumentsAdapter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.CharArrayToStringAdapter",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "adaptArguments",
            "tail_type": "apiFunction"
        },
        {
            "head": "adaptArguments",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "sampleCode",
            "tail_type": "sampleCode"
        },
        {
            "head": "org.springframework.util.xml.CharArrayToStringAdapter#adaptArguments(Object[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "convert char array to String",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.CharArrayToStringAdapter#adaptArguments(Object[])",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "input must be char array and two Integers",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.util.xml.CharArrayToStringAdapter#adaptArguments(Object[])",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "xml processing",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.util.xml.CharArrayToStringAdapter#adaptArguments(Object[])",
            "head_type": "method",
            "relation": "have",
            "tail": "convert char array to String sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "convert char array to String sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "complete example of converting char array to String",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.CharArrayToStringAdapter#adaptArguments(Object[])",
            "head_type": "method",
            "relation": "have",
            "tail": "xml processing related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "xml processing related concept interpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "xml processing involves parsing and manipulating XML data",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.CharArrayToStringAdapter#adaptArguments(Object[])",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "design principle interpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "have",
            "tail": "method follows the principle of adapting arguments for xml processing",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.CharArrayToStringAdapter#adaptArguments(Object[])",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.CharArrayToStringAdapter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.PartialAttributesAdapter",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "adaptArguments",
            "tail_type": "apiFunction"
        },
        {
            "head": "adaptArguments",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "adaptArguments sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "adaptArguments sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "adaptArguments sample code content",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.PartialAttributesAdapter#adaptArguments(Object[])",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "adaptArguments",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.PartialAttributesAdapter#adaptArguments(Object[])",
            "head_type": "method",
            "relation": "have",
            "tail": "adaptArgumentsSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "adaptArgumentsSampleCode",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.PartialAttributesAdapter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.PartialAttributesAdapter#adaptArguments(Object[])",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.PartialAttributesAdapter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.PartialAttributesAdapter",
            "head_type": "class",
            "relation": "have",
            "tail": "adaptArgumentsDesignPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "adaptArgumentsDesignPrincipleInterpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.PartialAttributesAdapter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.CopyCharsAnswer",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "answer",
            "tail_type": "apiFunction"
        },
        {
            "head": "answer",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "copy characters from input array to a new array",
            "tail_type": "useSampleCode"
        },
        {
            "head": "answer",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "related to array manipulation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "answer",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "design principle of creating a defensive copy",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.CopyCharsAnswer#answer(InvocationOnMock)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "copy characters",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.CopyCharsAnswer#answer(InvocationOnMock)",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for copying characters",
            "tail_type": "useSampleCode"
        },
        {
            "head": "sample code for copying characters",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "complete example for copying characters",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.PartialAttributes",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "equals",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.PartialAttributes",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "hashCode",
            "tail_type": "apiFunction"
        },
        {
            "head": "equals",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "hashCode",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.PartialAttributes",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.PartialAttributes",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.PartialAttributes#equals(Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "equality check",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.PartialAttributes#equals(Object)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "object must not be null",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.util.xml.PartialAttributes#equals(Object)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "compare two PartialAttributes objects",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.util.xml.PartialAttributes#equals(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for equality check",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.PartialAttributes#equals(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation for PartialAttributes",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.PartialAttributes#equals(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation for equals method",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.PartialAttributes",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.PartialAttributes#equals(Object)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.util.xml.PartialAttributes#hashCode()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "generateHashCode",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.PartialAttributes#hashCode()",
            "head_type": "method",
            "relation": "have",
            "tail": "generateHashCodeSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.PartialAttributes#hashCode()",
            "head_type": "method",
            "relation": "have",
            "tail": "generateHashCodeRelatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.PartialAttributes#hashCode()",
            "head_type": "method",
            "relation": "have",
            "tail": "generateHashCodeDesignPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm(Constants",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "define JVM opcodes",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm(Constants",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "define access flags",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm(Constants",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "define constants",
            "tail_type": "apiFunction"
        },
        {
            "head": "define JVM opcodes",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "not part of ASM public API",
            "tail_type": "useConstraint"
        },
        {
            "head": "define access flags",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "16 least significant bits must NOT be used",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm(Constants",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm(Constants",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "relatedConceptInterpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "associated_with",
            "tail": "JVM opcodes",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "relatedConceptInterpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "associated_with",
            "tail": "access flags",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "relatedConceptInterpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "associated_with",
            "tail": "constants",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "designPrincipleInterpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "associated_with",
            "tail": "JVM opcodes",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "designPrincipleInterpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "associated_with",
            "tail": "access flags",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "designPrincipleInterpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "associated_with",
            "tail": "constants",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Context",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "parseClass",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Context",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "readMethod",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Context",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "readAnnotationTarget",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Context",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "readFrame",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Context",
            "head_type": "class",
            "relation": "have",
            "tail": "attributePrototypes",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Context",
            "head_type": "class",
            "relation": "have",
            "tail": "parsingOptions",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Context",
            "head_type": "class",
            "relation": "have",
            "tail": "charBuffer",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Context",
            "head_type": "class",
            "relation": "have",
            "tail": "currentMethodAccessFlags",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Context",
            "head_type": "class",
            "relation": "have",
            "tail": "currentMethodName",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Context",
            "head_type": "class",
            "relation": "have",
            "tail": "currentMethodDescriptor",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Context",
            "head_type": "class",
            "relation": "have",
            "tail": "currentMethodLabels",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Context",
            "head_type": "class",
            "relation": "have",
            "tail": "currentTypeAnnotationTarget",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Context",
            "head_type": "class",
            "relation": "have",
            "tail": "currentTypeAnnotationTargetPath",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Context",
            "head_type": "class",
            "relation": "have",
            "tail": "currentLocalVariableAnnotationRangeStarts",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Context",
            "head_type": "class",
            "relation": "have",
            "tail": "currentLocalVariableAnnotationRangeEnds",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Context",
            "head_type": "class",
            "relation": "have",
            "tail": "currentLocalVariableAnnotationRangeIndices",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Context",
            "head_type": "class",
            "relation": "have",
            "tail": "currentFrameOffset",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Context",
            "head_type": "class",
            "relation": "have",
            "tail": "currentFrameType",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Context",
            "head_type": "class",
            "relation": "have",
            "tail": "currentFrameLocalCount",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Context",
            "head_type": "class",
            "relation": "have",
            "tail": "currentFrameLocalCountDelta",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Context",
            "head_type": "class",
            "relation": "have",
            "tail": "currentFrameLocalTypes",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Context",
            "head_type": "class",
            "relation": "have",
            "tail": "currentFrameStackCount",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Context",
            "head_type": "class",
            "relation": "have",
            "tail": "currentFrameStackTypes",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Context",
            "head_type": "class",
            "relation": "have",
            "tail": " Eric Bruneton",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Context",
            "head_type": "class",
            "relation": "have",
            "tail": "ClassReader",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.DomContentHandlerTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "XML Parsing",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.DomContentHandlerTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "Namespace Handling",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.DomContentHandlerTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "SAX Parsing",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.DomContentHandlerTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "DOM Manipulation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.DomContentHandlerTests",
            "head_type": "class",
            "relation": "constrained_by",
            "tail": "Namespace Awareness Requirement",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.util.xml.DomContentHandlerTests",
            "head_type": "class",
            "relation": "applied_to",
            "tail": "Testing XML Content Handling",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.util.xml.DomContentHandlerTests",
            "head_type": "class",
            "relation": "have",
            "tail": "Detailed XML Parsing Example",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.DomContentHandlerTests",
            "head_type": "class",
            "relation": "have",
            "tail": "Explanation of XML Namespace Handling",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.DomContentHandlerTests",
            "head_type": "class",
            "relation": "have",
            "tail": "Design Principles of DomContentHandler",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.DomContentHandlerTests",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.DomContentHandler",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.DomContentHandlerTests#setUp()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "initialization",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.DomContentHandlerTests#setUp()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "namespace awareness configuration",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.DomContentHandlerTests#setUp()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "document builder creation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.DomContentHandlerTests#setUp()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "SAX parser configuration",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.DomContentHandlerTests#setUp()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "XML reader retrieval",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.DomContentHandlerTests#setUp()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "namespace awareness requirement",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.util.xml.DomContentHandlerTests#setUp()",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "test setup scenario",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.util.xml.DomContentHandlerTests#setUp()",
            "head_type": "method",
            "relation": "have",
            "tail": "test setup scenario",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.util.xml.DomContentHandlerTests#setUp()",
            "head_type": "method",
            "relation": "have",
            "tail": "namespace awareness requirement",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.util.xml.DomContentHandlerTests#setUp()",
            "head_type": "method",
            "relation": "have",
            "tail": "java\n@org.junit.jupiter.api.BeforeEach\nvoid setUp() throws java.lang.Exception {\n    javax.xml.parsers.DocumentBuilderFactory documentBuilderFactory = javax.xml.parsers.DocumentBuilderFactory.newInstance();\n    documentBuilderFactory.setNamespaceAware(true);\n    javax.xml.parsers.DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\n    org.w3c.dom.Document result = documentBuilder.newDocument();\n    javax.xml.parsers.SAXParserFactory saxParserFactory = javax.xml.parsers.SAXParserFactory.newInstance();\n    saxParserFactory.setNamespaceAware(true);\n    javax.xml.parsers.SAXParser saxParser = saxParserFactory.newSAXParser();\n    org.xml.sax.XMLReader xmlReader = saxParser.getXMLReader();\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.DomContentHandlerTests#setUp()",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.DomContentHandlerTests#setUp()",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.DomContentHandlerTests#setUp()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.DomContentHandlerTests",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.DomContentHandlerTests#contentHandlerDocumentNamespacePrefixes()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "namespace-prefixes feature handling",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.DomContentHandlerTests#contentHandlerDocumentNamespacePrefixes()",
            "head_type": "method",
            "relation": "have",
            "tail": "void contentHandlerDocumentNamespacePrefixes() throws Exception {    xmlReader.setFeature(\"http://xml.org/sax/features/namespace-prefixes\", true);    handler = new DomContentHandler(result);    expected = documentBuilder.parse(new InputSource(new StringReader(XML_1)));    xmlReader.setContentHandler(handler);    xmlReader.parse(new InputSource(new StringReader(XML_1)));    assertThat(XmlContent.of(result)).as(\"Invalid result\").isSimilarTo(expected);}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.DomContentHandlerTests#contentHandlerDocumentNamespacePrefixes()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.DomContentHandler",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.DomContentHandlerTests#contentHandlerDocumentNamespacePrefixes()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.XmlContent",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.DomContentHandlerTests#contentHandlerDocumentNamespacePrefixes()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.XmlReader",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.DomContentHandlerTests#contentHandlerDocumentNamespacePrefixes()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.DocumentBuilder",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.DomContentHandlerTests#contentHandlerDocumentNamespacePrefixes()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.InputSource",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.DomContentHandlerTests#contentHandlerDocumentNamespacePrefixes()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.StringReader",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.DomContentHandlerTests#contentHandlerDocumentNamespacePrefixes()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.assertThat",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.DomContentHandlerTests#contentHandlerDocumentNoNamespacePrefixes()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "DomContentHandler",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.DomContentHandlerTests#contentHandlerDocumentNoNamespacePrefixes()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "parse XML document",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.DomContentHandlerTests#contentHandlerDocumentNoNamespacePrefixes()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "assert XML content similarity",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.DomContentHandlerTests#contentHandlerDocumentNoNamespacePrefixes()",
            "head_type": "method",
            "relation": "have",
            "tail": "void contentHandlerDocumentNoNamespacePrefixes() throws Exception {    handler = new DomContentHandler(result);    expected = documentBuilder.parse(new InputSource(new StringReader(XML_1)));    xmlReader.setContentHandler(handler);    xmlReader.parse(new InputSource(new StringReader(XML_1)));    assertThat(XmlContent.of(result)).as(\"Invalid result\").isSimilarTo(expected);}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.DomContentHandlerTests#contentHandlerDocumentNoNamespacePrefixes()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.DomContentHandler",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.DomContentHandlerTests#contentHandlerDocumentNoNamespacePrefixes()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.XmlReader",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.DomContentHandlerTests#contentHandlerDocumentNoNamespacePrefixes()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.DocumentBuilder",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.DomContentHandlerTests#contentHandlerDocumentNoNamespacePrefixes()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.XmlContent",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.DomContentHandlerTests#contentHandlerDocumentNoNamespacePrefixes()",
            "head_type": "method",
            "relation": "have",
            "tail": "This method tests the handling of XML documents without namespace prefixes using DomContentHandler. It initializes a DomContentHandler with a result object, parses an XML document using a DocumentBuilder, and then asserts that the parsed XML content is similar to the expected content.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.DomContentHandlerTests#contentHandlerDocumentNoNamespacePrefixes()",
            "head_type": "method",
            "relation": "have",
            "tail": "The design principle behind this method is to ensure that the DomContentHandler correctly handles XML documents without namespace prefixes. It follows a test-driven approach to validate the functionality by comparing the actual result with the expected result, ensuring robustness and reliability in XML processing.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.DomContentHandlerTests#contentHandlerElement()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "contentHandlerElement",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.DomContentHandlerTests#contentHandlerElement()",
            "head_type": "method",
            "relation": "have",
            "tail": "void contentHandlerElement() throws Exception",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.DomContentHandlerTests#contentHandlerElement()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.DomContentHandlerTests",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.DomContentHandlerTests#contentHandlerElement()",
            "head_type": "method",
            "relation": "have",
            "tail": "This method tests the functionality of the DomContentHandler with respect to handling elements.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.DomContentHandlerTests#contentHandlerElement()",
            "head_type": "method",
            "relation": "have",
            "tail": "The design principle behind this method is to ensure that the DomContentHandler correctly constructs the DOM structure from the XML input.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.CurrentFrame",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "execute",
            "tail_type": "apiFunction"
        },
        {
            "head": "execute",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "stack map frame status just before the given instruction is executed",
            "tail_type": "useConstraint"
        },
        {
            "head": "execute",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "the input stack map frame of the next \"current\" instruction",
            "tail_type": "useScenario"
        },
        {
            "head": "execute",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "void execute(final int opcode, final int arg, final Symbol symbolArg, final SymbolTable symbolTable) {\n    super.execute(opcode, arg, symbolArg, symbolTable);\n    Frame successor = new Frame(null);\n    merge(symbolTable, successor, 0);\n    copyFrom(successor);\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.CurrentFrame",
            "head_type": "class",
            "relation": "have",
            "tail": "Information about the input stack map frame at the \"current\" instruction of a method. This is\n * implemented as a Frame subclass for a \"basic block\" containing only one instruction.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.CurrentFrame",
            "head_type": "class",
            "relation": "have",
            "tail": "This class is designed to represent the stack map frame status at a specific instruction during the execution of a method. It extends the Frame class and is intended to be used for basic blocks that contain only one instruction.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.CurrentFrame#execute(int,int,Symbol,SymbolTable)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "stack map frame status update",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.CurrentFrame#execute(int,int,Symbol,SymbolTable)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "stack map frame assumption",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.CurrentFrame#execute(int,int,Symbol,SymbolTable)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "next current instruction",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.CurrentFrame#execute(int,int,Symbol,SymbolTable)",
            "head_type": "method",
            "relation": "have",
            "tail": "stack map frame status update sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.CurrentFrame#execute(int,int,Symbol,SymbolTable)",
            "head_type": "method",
            "relation": "have",
            "tail": "stack map frame status update related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.CurrentFrame#execute(int,int,Symbol,SymbolTable)",
            "head_type": "method",
            "relation": "have",
            "tail": "stack map frame status update design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.CurrentFrame#execute(int,int,Symbol,SymbolTable)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Frame",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.DomUtilsTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getChildElementsByTagNameWithSeveralMatchingTags",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.DomUtilsTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getChildElementsByTagNameWhenTagDoesNotExist",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.DomUtilsTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getChildElementByTagNameWithMatchingTag",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.DomUtilsTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getChildElementByTagNameWithNonMatchingTag",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.DomUtilsTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getChildElementValueByTagName",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.DomUtilsTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getChildElementValueByTagNameWithNonMatchingTag",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.DomUtilsTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getChildElements",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.DomUtilsTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getTextValueWithCharacterDataNode",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.DomUtilsTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getTextValueWithCommentInXml",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.DomUtilsTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getTextValueWithEntityReference",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.DomUtilsTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getTextValueWithEmptyElement",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.DomUtilsTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "nodeNameEqualsWhenTrue",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.DomUtilsTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "nodeNameEqualsWhenFalse",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.DomUtilsTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getDocumentElement",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.DomUtilsTests",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.DomUtilsTests",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.DomUtilsTests",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.DomUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.DomUtilsTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getChildElementsByTagNameWithSeveralMatchingTags",
            "tail_type": "apiFunction"
        },
        {
            "head": "getChildElementsByTagNameWithSeveralMatchingTags",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.util.xml.DomUtilsTests",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.DomUtilsTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getChildElementsByTagNameWhenTagDoesNotExist",
            "tail_type": "apiFunction"
        },
        {
            "head": "getChildElementsByTagNameWhenTagDoesNotExist",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "sampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.DomUtilsTests",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.DomUtils",
            "tail_type": "class"
        },
        {
            "head": "getChildElementsByTagNameWhenTagDoesNotExist",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "getChildElementsByTagNameWhenTagDoesNotExist",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.DomUtilsTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getChildElementByTagNameWithMatchingTag",
            "tail_type": "apiFunction"
        },
        {
            "head": "getChildElementByTagNameWithMatchingTag",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "completeSampleCode",
            "tail_type": "completeSampleCode"
        },
        {
            "head": "org.springframework.util.xml.DomUtilsTests#getChildElementByTagNameWithNonMatchingTag()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getChildElementByTagNameWithNonMatchingTag",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.DomUtilsTests#getChildElementByTagNameWithNonMatchingTag()",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getChildElementByTagNameWithNonMatchingTag",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.DomUtilsTests#getChildElementValueByTagName()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getChildElementValueByTagName",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.DomUtilsTests#getChildElementValueByTagName()",
            "head_type": "method",
            "relation": "have",
            "tail": "��取特定标签名的子元素值",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.DomUtilsTests#getChildElementValueByTagName()",
            "head_type": "method",
            "relation": "have",
            "tail": "使用示例代码",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.DomUtilsTests",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.DomUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.DomUtilsTests#getChildElementValueByTagNameWithNonMatchingTag()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getChildElementValueByTagName",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.DomUtilsTests#getChildElementValueByTagNameWithNonMatchingTag()",
            "head_type": "method",
            "relation": "useSampleCode",
            "tail": "package org.springframework.util.xml; import org.springframework.util.xml.DomUtils; import org.w3c.dom.Element; import static org.hamcrest.MatcherAssert.assertThat; import static org.hamcrest.Matchers.isNull; public class DomUtilsTests { @Test void getChildElementValueByTagNameWithNonMatchingTag() { Element SCHOOL_ELEMENT = null; assertThat(DomUtils.getChildElementValueByTagName(SCHOOL_ELEMENT, \"math tutor\")).isNull(); } }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.DomUtilsTests",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.DomUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.DomUtilsTests#getChildElements()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getChildElements",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.DomUtilsTests#getChildElements()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.DomUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.DomUtilsTests#getChildElements()",
            "head_type": "method",
            "relation": "have",
            "tail": "Sample Code for getChildElements",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.DomUtilsTests#getTextValueWithCharacterDataNode()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getTextValue",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.DomUtilsTests#getTextValueWithCharacterDataNode()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.DomUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.DomUtilsTests#getTextValueWithCharacterDataNode()",
            "head_type": "method",
            "relation": "have",
            "tail": "Sample Code for getTextValueWithCharacterDataNode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "Sample Code for getTextValueWithCharacterDataNode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "Complete Example Code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.DomUtilsTests#getTextValueWithCommentInXml()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getTextValueWithCommentInXml",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.DomUtilsTests#getTextValueWithCommentInXml()",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.DomUtilsTests#getTextValueWithCommentInXml()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.util.xml.DomUtilsTests#getTextValueWithEntityReference()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getTextValueWithEntityReference",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.DomUtilsTests#getTextValueWithEntityReference()",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.DomUtilsTests#getTextValueWithEntityReference()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.util.xml.DomUtilsTests#getTextValueWithEmptyElement()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getTextValueWithEmptyElement",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.DomUtilsTests#getTextValueWithEmptyElement()",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.util.xml.DomUtilsTests#getTextValueWithEmptyElement()",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.DomUtilsTests#nodeNameEqualsWhenTrue()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "nodeNameEquals",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.DomUtilsTests#nodeNameEqualsWhenTrue()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.DomUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.DomUtilsTests#nodeNameEqualsWhenTrue()",
            "head_type": "method",
            "relation": "have",
            "tail": "assertThat(DomUtils.nodeNameEquals(SCHOOL_ELEMENT, \"school\")).isTrue();",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.DomUtilsTests#nodeNameEqualsWhenTrue()",
            "head_type": "method",
            "relation": "have",
            "tail": "This method tests the functionality of checking if a node's name equals a given name.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.DomUtilsTests#nodeNameEqualsWhenTrue()",
            "head_type": "method",
            "relation": "have",
            "tail": "The design principle here is to ensure that the utility method for comparing node names behaves as expected under specified conditions.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.DomUtilsTests#nodeNameEqualsWhenFalse()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "nodeNameEquals",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.DomUtilsTests#nodeNameEqualsWhenFalse()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.DomUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.DomUtilsTests#nodeNameEqualsWhenFalse()",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "relatedConceptInterpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "The related concept involves the use of DomUtils to check if a node's name equals a specified string, returning false in this case.",
            "tail_type": "description"
        },
        {
            "head": "org.springframework.util.xml.DomUtilsTests#nodeNameEqualsWhenFalse()",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "designPrincipleInterpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "have",
            "tail": "The design principle here is to ensure that utility methods like nodeNameEquals provide accurate comparisons between XML node names and specified strings, enhancing the robustness of XML processing utilities.",
            "tail_type": "description"
        },
        {
            "head": "org.springframework.util.xml.DomUtilsTests#nodeNameEqualsWhenFalse()",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "package org.springframework.util.xml;\n\nimport org.junit.jupiter.api.Test;\nimport static org.springframework.util.xml.DomUtils.nodeNameEquals;\n\npublic class DomUtilsTests {\n\n    @Test\n    void nodeNameEqualsWhenFalse() {\n        assertThat(nodeNameEquals(SCHOOL_ELEMENT, \"college\")).isFalse();\n    }\n}",
            "tail_type": "code"
        },
        {
            "head": "org.springframework.util.xml.DomUtilsTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getDocumentElement(String)",
            "tail_type": "apiFunction"
        },
        {
            "head": "getDocumentElement(String)",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "private static Element getDocumentElement(String xmlContent) {\n    try {\n        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();\n        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\n        Document document = documentBuilder.parse(new ByteArrayInputStream(xmlContent.getBytes()));\n        return document.getDocumentElement();\n    } catch (Exception ex) {\n        throw new IllegalStateException(\"Failed to parse xml content:%n%s\".formatted(xmlContent), ex);\n    }\n}",
            "tail_type": "code"
        },
        {
            "head": "getDocumentElement(String)",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "relatedConceptInterpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "This method is used to parse XML content and retrieve the document element. It uses `DocumentBuilderFactory` and `DocumentBuilder` to parse the XML string and obtain the root element (`DocumentElement`).",
            "tail_type": "description"
        },
        {
            "head": "getDocumentElement(String)",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "designPrincipleInterpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "have",
            "tail": "This method follows the principle of encapsulating XML parsing logic, providing a utility to abstract away the complexities of XML document creation and parsing, enhancing code readability and maintainability.",
            "tail_type": "description"
        },
        {
            "head": "org.springframework.asm.Edge",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "representing a control flow graph edge",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Edge",
            "head_type": "class",
            "relation": "constrained_by",
            "tail": "used with ClassWriter#COMPUTE_FRAMES or ClassWriter#COMPUTE_MAXS",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.Edge",
            "head_type": "class",
            "relation": "applied_to",
            "tail": "jump or ret instruction or exception handler",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Edge",
            "head_type": "class",
            "relation": "have",
            "tail": "sample code for using Edge",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Edge",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Label",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.Edge",
            "head_type": "class",
            "relation": "have",
            "tail": "detailed explanation of control flow graph edge",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Edge",
            "head_type": "class",
            "relation": "have",
            "tail": "design principle of Edge class",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.ListBasedXMLEventReaderTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "XMLInputFactoryUsage",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.ListBasedXMLEventReaderTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "XMLOutputFactoryUsage",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.ListBasedXMLEventReaderTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "XMLEventReaderUsage",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.ListBasedXMLEventReaderTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "XMLEventWriterUsage",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.ListBasedXMLEventReaderTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getElementText",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.ListBasedXMLEventReaderTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getElementTextThrowsExceptionAtWrongPosition",
            "tail_type": "apiFunction"
        },
        {
            "head": "XMLInputFactoryUsage",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "XMLInputFactory.newInstance()",
            "tail_type": "useSampleCode"
        },
        {
            "head": "XMLOutputFactoryUsage",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "XMLOutputFactory.newFactory()",
            "tail_type": "useSampleCode"
        },
        {
            "head": "XMLEventReaderUsage",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "inputFactory.createXMLEventReader(new StringReader(xml))",
            "tail_type": "useSampleCode"
        },
        {
            "head": "XMLEventWriterUsage",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "outputFactory.createXMLEventWriter(resultWriter)",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getElementText",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "reader.getElementText()",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getElementTextThrowsExceptionAtWrongPosition",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "reader.getElementText()",
            "tail_type": "useSampleCode"
        },
        {
            "head": "XMLInputFactoryUsage",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "XMLInputFactoryInitializationConstraint",
            "tail_type": "useConstraint"
        },
        {
            "head": "XMLOutputFactoryUsage",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "XMLOutputFactoryInitializationConstraint",
            "tail_type": "useConstraint"
        },
        {
            "head": "XMLEventReaderUsage",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "XMLEventReaderCreationConstraint",
            "tail_type": "useConstraint"
        },
        {
            "head": "XMLEventWriterUsage",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "XMLEventWriterCreationConstraint",
            "tail_type": "useConstraint"
        },
        {
            "head": "getElementText",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "getElementTextPositionConstraint",
            "tail_type": "useConstraint"
        },
        {
            "head": "getElementTextThrowsExceptionAtWrongPosition",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "getElementTextPositionConstraint",
            "tail_type": "useConstraint"
        },
        {
            "head": "XMLInputFactoryUsage",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "XMLInputFactoryUsageScenario",
            "tail_type": "useScenario"
        },
        {
            "head": "XMLOutputFactoryUsage",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "XMLOutputFactoryUsageScenario",
            "tail_type": "useScenario"
        },
        {
            "head": "XMLEventReaderUsage",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "XMLEventReaderUsageScenario",
            "tail_type": "useScenario"
        },
        {
            "head": "XMLEventWriterUsage",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "XMLEventWriterUsageScenario",
            "tail_type": "useScenario"
        },
        {
            "head": "getElementText",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "getElementTextUsageScenario",
            "tail_type": "useScenario"
        },
        {
            "head": "getElementTextThrowsExceptionAtWrongPosition",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "getElementTextUsageScenario",
            "tail_type": "useScenario"
        },
        {
            "head": "XMLInputFactoryUsage",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "XMLInputFactoryRelatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "XMLOutputFactoryUsage",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "XMLOutputFactoryRelatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "XMLEventReaderUsage",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "XMLEventReaderRelatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "XMLEventWriterUsage",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "XMLEventWriterRelatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "getElementText",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "getElementTextRelatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "getElementTextThrowsExceptionAtWrongPosition",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "getElementTextRelatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "XMLInputFactoryUsage",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "XMLInputFactoryDesignPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "XMLOutputFactoryUsage",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "XMLOutputFactoryDesignPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "XMLEventReaderUsage",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "XMLEventReaderDesignPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "XMLEventWriterUsage",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "XMLEventWriterDesignPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "getElementText",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "getElementTextDesignPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "getElementTextThrowsExceptionAtWrongPosition",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "getElementTextDesignPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.ListBasedXMLEventReaderTests#standard()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "xmlEventReading",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.ListBasedXMLEventReaderTests#standard()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "xmlContentComparison",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.ListBasedXMLEventReaderTests#standard()",
            "head_type": "method",
            "relation": "have",
            "tail": "xmlEventReadingSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "xmlEventReadingSampleCode",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.ListBasedXMLEventReaderTests#standard()",
            "tail_type": "method"
        },
        {
            "head": "xmlEventReadingSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "xmlEventReadingSampleCodeContent",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.ListBasedXMLEventReaderTests#standard()",
            "head_type": "method",
            "relation": "have",
            "tail": "xmlContentComparisonSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "xmlContentComparisonSampleCode",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.ListBasedXMLEventReaderTests#standard()",
            "tail_type": "method"
        },
        {
            "head": "xmlContentComparisonSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "xmlContentComparisonSampleCodeContent",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.ListBasedXMLEventReaderTests#standard()",
            "head_type": "method",
            "relation": "have",
            "tail": "xmlEventReadingRelatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "xmlEventReadingRelatedConceptInterpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.ListBasedXMLEventReaderTests#standard()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.util.xml.ListBasedXMLEventReaderTests#standard()",
            "head_type": "method",
            "relation": "have",
            "tail": "xmlContentComparisonRelatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "xmlContentComparisonRelatedConceptInterpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.ListBasedXMLEventReaderTests#standard()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.util.xml.ListBasedXMLEventReaderTests#standard()",
            "head_type": "method",
            "relation": "have",
            "tail": "xmlEventReadingDesignPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "xmlEventReadingDesignPrincipleInterpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.ListBasedXMLEventReaderTests#standard()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.util.xml.ListBasedXMLEventReaderTests#standard()",
            "head_type": "method",
            "relation": "have",
            "tail": "xmlContentComparisonDesignPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "xmlContentComparisonDesignPrincipleInterpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.ListBasedXMLEventReaderTests#standard()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.util.xml.ListBasedXMLEventReaderTests#getElementText()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getElementText",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.ListBasedXMLEventReaderTests#getElementText()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.ListBasedXMLEventReader",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.ListBasedXMLEventReaderTests#getElementText()",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "completeSampleCode",
            "tail_type": "completeSampleCode"
        },
        {
            "head": "org.springframework.util.xml.ListBasedXMLEventReaderTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getElementTextThrowsExceptionAtWrongPosition",
            "tail_type": "apiFunction"
        },
        {
            "head": "getElementTextThrowsExceptionAtWrongPosition",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.util.xml.ListBasedXMLEventReaderTests",
            "tail_type": "class"
        },
        {
            "head": "getElementTextThrowsExceptionAtWrongPosition",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "XMLStreamException",
            "tail_type": "useConstraint"
        },
        {
            "head": "getElementTextThrowsExceptionAtWrongPosition",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "xml parsing",
            "tail_type": "useScenario"
        },
        {
            "head": "getElementTextThrowsExceptionAtWrongPosition",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "relatedConceptInterpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "XML parsing",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "getElementTextThrowsExceptionAtWrongPosition",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "designPrincipleInterpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "have",
            "tail": "error handling",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.ListBasedXMLEventReaderTests#readEvents(String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "read XML events",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.ListBasedXMLEventReaderTests#readEvents(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.ListBasedXMLEventReaderTests#readEvents(String)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.ListBasedXMLEventReaderTests",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.FieldVisitor",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "visitAnnotation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.FieldVisitor",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "visitTypeAnnotation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.FieldVisitor",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "visitAttribute",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.FieldVisitor",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "visitEnd",
            "tail_type": "apiFunction"
        },
        {
            "head": "visitAnnotation",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "annotationVisibilityConstraint",
            "tail_type": "useConstraint"
        },
        {
            "head": "visitTypeAnnotation",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "asmVersionConstraint",
            "tail_type": "useConstraint"
        },
        {
            "head": "visitTypeAnnotation",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "typeReferenceConstraint",
            "tail_type": "useConstraint"
        },
        {
            "head": "visitAnnotation",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "fieldAnnotationScenario",
            "tail_type": "useScenario"
        },
        {
            "head": "visitTypeAnnotation",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "fieldTypeAnnotationScenario",
            "tail_type": "useScenario"
        },
        {
            "head": "visitAttribute",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "fieldAttributeScenario",
            "tail_type": "useScenario"
        },
        {
            "head": "visitEnd",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "fieldVisitEndScenario",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.FieldVisitor",
            "head_type": "class",
            "relation": "have",
            "tail": "fieldVisitorDelegation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.FieldVisitor",
            "head_type": "class",
            "relation": "have",
            "tail": "apiVersionCompatibility",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.FieldVisitor",
            "head_type": "class",
            "relation": "have",
            "tail": "fieldVisitorUsageSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.FieldVisitor#getDelegate()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "delegation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.FieldVisitor#getDelegate()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "nullability",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.FieldVisitor#getDelegate()",
            "head_type": "method",
            "relation": "have",
            "tail": "The field visitor to which this visitor must delegate method calls. May be null.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.FieldVisitor#getDelegate()",
            "head_type": "method",
            "relation": "have",
            "tail": "The method returns the field visitor to which this visitor must delegate method calls, or null if there is no such visitor.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.FieldVisitor#getDelegate()",
            "head_type": "method",
            "relation": "have",
            "tail": "public FieldVisitor getDelegate() {\n    return fv;\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.FieldVisitor#visitAnnotation(String,boolean)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "visit field annotation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.FieldVisitor#visitAnnotation(String,boolean)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "field visitor is null",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.FieldVisitor#visitAnnotation(String,boolean)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "field annotation visiting",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.FieldVisitor#visitAnnotation(String,boolean)",
            "head_type": "method",
            "relation": "have",
            "tail": "visit field annotation sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.FieldVisitor#visitAnnotation(String,boolean)",
            "head_type": "method",
            "relation": "have",
            "tail": "field annotation visiting explanation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.FieldVisitor#visitAnnotation(String,boolean)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle for visiting field annotation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.FieldVisitor#visitAnnotation(String,boolean)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.FieldVisitor",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.FieldVisitor#visitTypeAnnotation(int,TypePath,String,boolean)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "visitTypeAnnotation",
            "tail_type": "apiFunction"
        },
        {
            "head": "visitTypeAnnotation",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "asmVersionConstraint",
            "tail_type": "useConstraint"
        },
        {
            "head": "visitTypeAnnotation",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "fieldTypeAnnotationScenario",
            "tail_type": "useScenario"
        },
        {
            "head": "visitTypeAnnotation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "visitTypeAnnotationSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "visitTypeAnnotation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "typeAnnotationConcept",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "visitTypeAnnotation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "designPrincipleTypeAnnotation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.FieldVisitor#visitTypeAnnotation(int,TypePath,String,boolean)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.TypeReference",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.FieldVisitor#visitAttribute(Attribute)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "visit non-standard attribute",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.FieldVisitor#visitAttribute(Attribute)",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.asm.FieldVisitor#visitAttribute(Attribute) sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.FieldVisitor#visitAttribute(Attribute)",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.asm.FieldVisitor#visitAttribute(Attribute) related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.FieldVisitor#visitAttribute(Attribute)",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.asm.FieldVisitor#visitAttribute(Attribute) design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.FieldVisitor#visitAttribute(Attribute)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.FieldVisitor",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.FieldVisitor#visitEnd()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "visitEnd",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.FieldVisitor#visitEnd()",
            "head_type": "method",
            "relation": "have",
            "tail": "Visits the end of the field. This method, which is the last one to be called, is used to inform the visitor that all the annotations and attributes of the field have been visited.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.FieldVisitor#visitEnd()",
            "head_type": "method",
            "relation": "have",
            "tail": "public void visitEnd() {    if (fv != null) {        fv.visitEnd();    }}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.FieldVisitor#visitEnd()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.FieldVisitor",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getNamespaceURI_withNull",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getNamespaceURI",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getPrefix_withNull",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getPrefix",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getPrefixes_withNull",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getPrefixes_IteratorIsNotModifiable",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getPrefixes",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "bindNamespaceUri_withNullNamespaceUri",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "bindNamespaceUri_withNullPrefix",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "bindNamespaceUri",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getBoundPrefixes",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "clear",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "removeBinding",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests",
            "head_type": "class",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "SimpleNamespaceContext",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#getNamespaceURI_withNull()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getNamespaceURI_withNull",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#getNamespaceURI_withNull()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "nullValueNotAllowed",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#getNamespaceURI_withNull()",
            "head_type": "method",
            "relation": "have",
            "tail": "getNamespaceURI_withNull_sampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getNamespaceURI_withNull_sampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.util.xml.SimpleNamespaceContextTests",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#getNamespaceURI_withNull()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.SimpleNamespaceContextTests",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#getNamespaceURI()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getNamespaceURI",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#getNamespaceURI()",
            "head_type": "method",
            "relation": "have",
            "tail": "getNamespaceURISampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getNamespaceURISampleCode",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.SimpleNamespaceContextTests",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#getNamespaceURI()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.SimpleNamespaceContextTests",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#getPrefix_withNull()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "exceptionHandling",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#getPrefix_withNull()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "nullValueProhibited",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#getPrefix_withNull()",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "nullPrefixHandling",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#getPrefix_withNull()",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#getPrefix_withNull()",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#getPrefix_withNull()",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#getPrefix_withNull()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "SimpleNamespaceContext",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#getPrefix()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "namespace management",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#getPrefix()",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "XML namespace resolution",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#getPrefix()",
            "head_type": "method",
            "relation": "have",
            "tail": "XML namespace resolution sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#getPrefix()",
            "head_type": "method",
            "relation": "have",
            "tail": "XML namespace resolution explanation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#getPrefix()",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle for XML namespace resolution",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.SimpleNamespaceContextTests#getPrefix()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#getPrefixes_withNull()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "exceptionHandling",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#getPrefixes_withNull()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "nullInputProhibited",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#getPrefixes_withNull()",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "nullInputScenario",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#getPrefixes_withNull()",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#getPrefixes_withNull()",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#getPrefixes_withNull()",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#getPrefixes_withNull()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "SimpleNamespaceContext",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getPrefixes_IteratorIsNotModifiable",
            "tail_type": "apiFunction"
        },
        {
            "head": "getPrefixes_IteratorIsNotModifiable",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.util.xml.SimpleNamespaceContextTests",
            "tail_type": "class"
        },
        {
            "tail": "namespace management",
            "head_type": "method",
            "relation": "haveFunction",
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#getPrefixes()",
            "tail_type": "apiFunction"
        },
        {
            "tail": "namespace prefix retrieval",
            "head_type": "method",
            "relation": "applied_to",
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#getPrefixes()",
            "tail_type": "useScenario"
        },
        {
            "tail": "namespace prefix retrieval",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#getPrefixes()",
            "tail_type": "useScenario"
        },
        {
            "tail": "Related Concept Interpretation: Namespace management involves associating prefixes with namespace URIs to handle XML namespaces effectively. This is crucial in XML processing for identifying elements and attributes uniquely.",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#getPrefixes()",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "tail": "Design Principle Interpretation: The design principle behind this method is to provide a flexible and efficient way to manage namespace prefixes, ensuring that XML documents can be processed accurately and efficiently. It adheres to the principle of least astonishment, making it intuitive for developers to retrieve namespace prefixes.",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#getPrefixes()",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "tail": "package org.springframework.util.xml;\n\nimport org.junit.jupiter.api.Test;\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class SimpleNamespaceContextTests {\n\n    @Test\n    void getPrefixes() {\n        // Assuming context is an instance of SimpleNamespaceContext\n        SimpleNamespaceContext context = new SimpleNamespaceContext();\n        context.bindNamespaceUri(\"xml\", \"http://www.w3.org/XML/1998/namespace\");\n        context.bindNamespaceUri(\"xmlns\", \"http://www.w3.org/2000/xmlns/\");\n        context.bindNamespaceUri(\"prefix1",
            "head_type": "method",
            "relation": "have",
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#getPrefixes()",
            "http://example.com/namespace\");\n        context.bindNamespaceUri(\"prefix2": "http://example.com/namespace\");\n\n        assertThat(context.getPrefixes(\"http://www.w3.org/2000/xmlns/\")).containsExactly(\"xmlns\");\n        assertThat(context.getPrefixes(\"http://www.w3.org/XML/1998/namespace\")).containsExactly(\"xml\");\n        assertThat(context.getPrefixes(\"http://example.com/namespace\")).containsExactlyInAnyOrder(\"prefix1",
            "prefix2\");\n        assertThat(context.getPrefixes(\"unbound Namespace URI\").hasNext()).isFalse();\n    }\n}": "tail_type\": \"useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#bindNamespaceUri_withNullNamespaceUri()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "bindNamespaceUri",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#bindNamespaceUri_withNullNamespaceUri()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "nullNamespaceUri",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#bindNamespaceUri_withNullNamespaceUri()",
            "head_type": "method",
            "relation": "have",
            "tail": "bindNamespaceUri_withNullNamespaceUri_sampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#bindNamespaceUri_withNullNamespaceUri()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "SimpleNamespaceContext",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#bindNamespaceUri_withNullNamespaceUri()",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#bindNamespaceUri_withNullNamespaceUri()",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#bindNamespaceUri_withNullPrefix()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "bindNamespaceUri_withNullPrefix",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#bindNamespaceUri_withNullPrefix()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "nullPrefixNotAllowed",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#bindNamespaceUri_withNullPrefix()",
            "head_type": "method",
            "relation": "have",
            "tail": "bindNamespaceUri_withNullPrefix_SampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#bindNamespaceUri_withNullPrefix()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "SimpleNamespaceContext",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#bindNamespaceUri_withNullPrefix()",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#bindNamespaceUri_withNullPrefix()",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#bindNamespaceUri()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "bindNamespaceUri",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#bindNamespaceUri()",
            "head_type": "method",
            "relation": "have",
            "tail": "void bindNamespaceUri() {    context.bindNamespaceUri(prefix, namespaceUri);    assertThat(context.getNamespaceURI(prefix)).as(\"The Namespace URI was bound to the prefix\").isEqualTo(namespaceUri);    assertThat(getItemSet(context.getPrefixes(namespaceUri))).as(\"The prefix was bound to the namespace URI\").contains(prefix);}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#bindNamespaceUri()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.SimpleNamespaceContextTests",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#getBoundPrefixes()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getBoundPrefixes",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#getBoundPrefixes()",
            "head_type": "method",
            "relation": "have",
            "tail": "context.bindNamespaceUri(prefix, namespaceUri)",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#getBoundPrefixes()",
            "head_type": "method",
            "relation": "have",
            "tail": "assertThat(getItemSet(context.getBoundPrefixes())).as('Returns all bound prefixes').containsExactlyInAnyOrder('prefix1', 'prefix2', 'prefix3')",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#getBoundPrefixes()",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#getBoundPrefixes()",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#clear()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "namespace clearing",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#clear()",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "removing all bound prefixes and namespace URIs",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#clear()",
            "head_type": "method",
            "relation": "have",
            "tail": "void clear() { context.bindNamespaceUri(\"prefix1\", namespaceUri); context.bindNamespaceUri(\"prefix2\", namespaceUri); context.bindNamespaceUri(\"prefix3\", additionalNamespaceUri); context.clear(); assertThat(context.getBoundPrefixes().hasNext()).as(\"All bound prefixes were removed\").isFalse(); assertThat(context.getPrefixes(namespaceUri).hasNext()).as(\"All bound namespace URIs were removed\").isFalse(); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#clear()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.SimpleNamespaceContext",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#clear()",
            "head_type": "method",
            "relation": "have",
            "tail": "This method clears all namespace bindings from the context.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#clear()",
            "head_type": "method",
            "relation": "have",
            "tail": "The design principle followed here is to provide a straightforward way to reset the state of the namespace context, ensuring that it can be reused without any residual data from previous operations.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#removeBinding()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "removeBinding",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#removeBinding()",
            "head_type": "method",
            "relation": "have",
            "tail": "removeBindingSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "removeBindingSampleCode",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.SimpleNamespaceContextTests#removeBinding()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#getItemSet(Iterator<String>)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "convertIteratorToSet",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.SimpleNamespaceContextTests#getItemSet(Iterator<String>)",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.util.xml.SimpleNamespaceContextTests",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxEventHandlerTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "createStaxHandler",
            "tail_type": "apiFunction"
        },
        {
            "head": "createStaxHandler",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "createStaxHandler",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "AbstractStaxHandler",
            "tail_type": "class"
        },
        {
            "head": "createStaxHandler",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "XMLOutputFactory",
            "tail_type": "class"
        },
        {
            "head": "createStaxHandler",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "XMLEventWriter",
            "tail_type": "class"
        },
        {
            "head": "createStaxHandler",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "StaxEventHandler",
            "tail_type": "class"
        },
        {
            "head": "createStaxHandler",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "createStaxHandler",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.StaxEventHandlerTests#createStaxHandler(Result)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "createStaxHandler",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StaxEventHandlerTests#createStaxHandler(Result)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.StaxEventHandlerTests",
            "tail_type": "class"
        },
        {
            "head": "createStaxHandler",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "sampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.FieldWriter",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "generate field_info structure",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.FieldWriter",
            "head_type": "class",
            "relation": "constrained_by",
            "tail": "JVMS structure constraints",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.FieldWriter",
            "head_type": "class",
            "relation": "applied_to",
            "tail": "Java Virtual Machine Specification",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.FieldWriter",
            "head_type": "class",
            "relation": "have",
            "tail": "sample code for generating field_info",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.FieldWriter",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.FieldVisitor",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.FieldWriter",
            "head_type": "class",
            "relation": "have",
            "tail": "related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.FieldWriter",
            "head_type": "class",
            "relation": "have",
            "tail": "design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.FieldWriter#visitAnnotation(String,boolean)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "visitAnnotation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.FieldWriter#visitAnnotation(String,boolean)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.FieldVisitor",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.FieldWriter#visitAnnotation(String,boolean)",
            "head_type": "method",
            "relation": "have",
            "tail": "visitAnnotation sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "visitAnnotation sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.asm.FieldWriter#visitAnnotation(String,boolean) example",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.FieldWriter#visitTypeAnnotation(int,TypePath,String,boolean)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "visitTypeAnnotation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.FieldWriter#visitTypeAnnotation(int,TypePath,String,boolean)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.FieldWriter#visitTypeAnnotation(int,TypePath,String,boolean)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "FieldWriter",
            "tail_type": "class"
        },
        {
            "head": "visitTypeAnnotation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "visitTypeAnnotation Sample Code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "visitTypeAnnotation Sample Code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "visitTypeAnnotation Code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.FieldWriter#visitAttribute(Attribute)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "visitAttribute",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.FieldWriter#visitAttribute(Attribute)",
            "head_type": "method",
            "relation": "have",
            "tail": "Store the attributes in the reverse order of their visit by this method",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.FieldWriter#visitAttribute(Attribute)",
            "head_type": "method",
            "relation": "have",
            "tail": "Reversing attribute order",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.FieldWriter#visitAttribute(Attribute)",
            "head_type": "method",
            "relation": "have",
            "tail": "Maintaining attribute order integrity",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.FieldWriter#visitAttribute(Attribute)",
            "head_type": "method",
            "relation": "have",
            "tail": "public void visitAttribute(final Attribute attribute) { // Store the attributes in the reverse order of their visit by this method. attribute.nextAttribute = firstAttribute; firstAttribute = attribute; }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.FieldWriter#visitEnd()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "No Operation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.FieldWriter#visitEnd()",
            "head_type": "method",
            "relation": "have",
            "tail": "No Operation Implementation",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.FieldWriter#visitEnd()",
            "head_type": "method",
            "relation": "designPrincipleInterpretation",
            "tail": "This method follows the principle of doing nothing when there is nothing to do, which is a form of the Null Object Design Pattern. It provides a clear contract for subclasses and ensures that the default behavior is safe and does nothing.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.FieldWriter#computeFieldInfoSize()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "compute the size of the field_info JVMS structure",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.FieldWriter#computeFieldInfoSize()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "field_info JVMS structure size computation constraints",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.FieldWriter#computeFieldInfoSize()",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "field size computation in Java class files",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.FieldWriter#computeFieldInfoSize()",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for computing field_info size",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.FieldWriter#computeFieldInfoSize()",
            "head_type": "method",
            "relation": "have",
            "tail": "field_info structure in Java Virtual Machine Specification",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.FieldWriter#computeFieldInfoSize()",
            "head_type": "method",
            "relation": "have",
            "tail": "design principles for computing field_info size",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.FieldWriter#computeFieldInfoSize()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.FieldWriter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.FieldWriter#putFieldInfo(ByteVector)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "puts the content of the field_info JVMS structure",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.FieldWriter#putFieldInfo(ByteVector)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "output must be a valid ByteVector",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.FieldWriter#putFieldInfo(ByteVector)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "generating field_info structure for a field",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.FieldWriter#putFieldInfo(ByteVector)",
            "head_type": "method",
            "relation": "have",
            "tail": "void putFieldInfo(final ByteVector output) {\n    boolean useSyntheticAttribute = symbolTable.getMajorVersion() < Opcodes.V1_5;\n    // Put the access_flags, name_index and descriptor_index fields.\n    int mask = useSyntheticAttribute ? Opcodes.ACC_SYNTHETIC : 0;\n    output.putShort(accessFlags & ~mask).putShort(nameIndex).putShort(descriptorIndex);\n    // Compute and put the attributes_count field.\n    // For ease of reference, we use here the same attribute order as in Section 4.7 of the JVMS.\n    int attributesCount = 0;\n    if (constantValueIndex != 0) {\n        ++attributesCount;\n    }\n    if ((accessFlags & Opcodes.ACC_SYNTHETIC) != 0 && useSyntheticAttribute) {\n        ++attributesCount;\n    }\n    if (signatureIndex != 0) {\n        ++attributesCount;\n    }\n    if ((accessFlags & Opcodes.ACC_DEPRECATED) != 0) {\n        ++attributesCount;\n    }\n    if (lastRuntimeVisibleAnnotation != null) {\n        ++attributesCount;\n    }\n    if (lastRuntimeInvisibleAnnotation != null) {\n        ++attributesCount;\n    }\n    if (lastRuntimeVisibleTypeAnnotation != null) {\n        ++attributesCount;\n    }\n    if (lastRuntimeInvisibleTypeAnnotation != null) {\n        ++attributesCount;\n    }\n    if (firstAttribute != null) {\n        attributesCount += firstAttribute.getAttributeCount();\n    }\n    output.putShort(attributesCount);\n    // Put the field_info attributes.\n    // For ease of reference, we use here the same attribute order as in Section 4.7 of the JVMS.\n    if (constantValueIndex != 0) {\n        output.putShort(symbolTable.addConstantUtf8(Constants.CONSTANT_VALUE)).putInt(2).putShort(constantValueIndex);\n    }\n    Attribute.putAttributes(symbolTable, accessFlags, signatureIndex, output);\n    AnnotationWriter.putAnnotations(symbolTable, lastRuntimeVisibleAnnotation, lastRuntimeInvisibleAnnotation, lastRuntimeVisibleTypeAnnotation, lastRuntimeInvisibleTypeAnnotation, output);\n    if (firstAttribute != null) {\n        firstAttribute.putAttributes(symbolTable, output);\n    }\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.FieldWriter#putFieldInfo(ByteVector)",
            "head_type": "method",
            "relation": "have",
            "tail": "Related concept interpretation: The method is used to write the field information into a ByteVector, which is part of the Java Virtual Machine Structure (JVMS). This is essential for generating class files that can be understood by the JVM.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.FieldWriter#putFieldInfo(ByteVector)",
            "head_type": "method",
            "relation": "have",
            "tail": "Design principle interpretation: The method follows the principle of efficiency and clarity by directly manipulating byte-level operations to construct the field_info structure. It ensures that the generated class files are compact and adhere to the Java Virtual Machine specifications.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.FieldWriter#putFieldInfo(ByteVector)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.FieldWriter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.FieldWriter#collectAttributePrototypes(Attribute.Set)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "collectAttributePrototypes",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.FieldWriter#collectAttributePrototypes(Attribute.Set)",
            "head_type": "method",
            "relation": "have",
            "tail": "Collects the attributes of this field into the given set of attribute prototypes.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.FieldWriter#collectAttributePrototypes(Attribute.Set)",
            "head_type": "method",
            "relation": "have",
            "tail": "The method iterates over the attributes of the field and adds them to the provided set of attribute prototypes.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.FieldWriter#collectAttributePrototypes(Attribute.Set)",
            "head_type": "method",
            "relation": "have",
            "tail": "package com.example;\nimport org.springframework.asm.Attribute;\nimport org.springframework.asm.FieldWriter;\n\npublic class Example {\n    public static void main(String[] args) {\n        FieldWriter fieldWriter = new FieldWriter(...);\n        Attribute.Set attributePrototypes = new Attribute.Set();\n        fieldWriter.collectAttributePrototypes(attributePrototypes);\n    }\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.StaxEventXMLReaderTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "parse XML",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StaxEventXMLReaderTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "handle XML events",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StaxEventXMLReaderTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "skip XML tags",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StaxEventXMLReaderTests",
            "head_type": "class",
            "relation": "have",
            "tail": "StaxEventXMLReader",
            "tail_type": "class"
        },
        {
            "head": "StaxEventXMLReader",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "XMLEventReader",
            "tail_type": "class"
        },
        {
            "head": "StaxEventXMLReader",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "ContentHandler",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxEventXMLReaderTests",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.StaxEventXMLReaderTests",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.StaxEventXMLReaderTests",
            "head_type": "class",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.StaxEventXMLReaderTests#createStaxXmlReader(InputStream)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "create Stax XML Reader",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StaxEventXMLReaderTests#createStaxXmlReader(InputStream)",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "create Stax XML Reader",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.StaxEventXMLReaderTests#partial()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "xml parsing",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StaxEventXMLReaderTests#partial()",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.util.xml.StaxEventXMLReaderTests#partial() sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.StaxEventXMLReaderTests#partial()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.StaxEventXMLReader",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxEventXMLReaderTests#partial()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "ContentHandler",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxEventXMLReaderTests#partial()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "XMLInputFactory",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxEventXMLReaderTests#partial()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "XMLEventReader",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxEventXMLReaderTests#partial()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "InputSource",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxResultTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "transform XML",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StaxResultTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "stream writer source",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StaxResultTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "event writer source",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StaxResultTests",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.StaxResultTests",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "transform XML",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "XML transformation",
            "tail_type": "useScenario"
        },
        {
            "head": "stream writer source",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "XML stream writing",
            "tail_type": "useScenario"
        },
        {
            "head": "event writer source",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "XML event writing",
            "tail_type": "useScenario"
        },
        {
            "head": "transform XML",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "stream writer source",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "event writer source",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.StaxResultTests#setUp()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "TransformerFactory Initialization",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StaxResultTests#setUp()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Transformer Creation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StaxResultTests#setUp()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "XMLOutputFactory Initialization",
            "tail_type": "apiFunction"
        },
        {
            "head": "TransformerFactory Initialization",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "TransformerFactory transformerFactory = TransformerFactory.newInstance();",
            "tail_type": "useSampleCode"
        },
        {
            "head": "Transformer Creation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "transformer = transformerFactory.newTransformer();",
            "tail_type": "useSampleCode"
        },
        {
            "head": "XMLOutputFactory Initialization",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "inputFactory = XMLOutputFactory.newInstance();",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.StaxResultTests#setUp()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "TransformerFactory",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxResultTests#setUp()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "Transformer",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxResultTests#setUp()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "XMLOutputFactory",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxResultTests#streamWriterSource()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "transform XML using StaxResult",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StaxResultTests#streamWriterSource()",
            "head_type": "method",
            "relation": "have",
            "tail": "complete example of transforming XML using StaxResult",
            "tail_type": "useSampleCode"
        },
        {
            "head": "transform XML using StaxResult",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "org.springframework.util.xml.StaxResultTests#streamWriterSource()",
            "tail_type": "method"
        },
        {
            "head": "transform XML using StaxResult",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "complete example of transforming XML using StaxResult",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.StaxResultTests",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.StaxResultTests#streamWriterSource()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.util.xml.StaxResultTests#streamWriterSource()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.StaxResultTests",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxResultTests#eventWriterSource()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "transform XML using StaxResult",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StaxResultTests#eventWriterSource()",
            "head_type": "method",
            "relation": "have",
            "tail": "void eventWriterSource() throws Exception {    StringWriter stringWriter = new StringWriter();    XMLEventWriter eventWriter = inputFactory.createXMLEventWriter(stringWriter);    Reader reader = new StringReader(XML);    Source source = new StreamSource(reader);    StaxResult result = new StaxResult(eventWriter);    assertThat(result.getXMLEventWriter()).as(\"Invalid eventWriter returned\").isEqualTo(eventWriter);    assertThat(result.getXMLStreamWriter()).as(\"StreamWriter returned\").isNull();    transformer.transform(source, result);    assertThat(XmlContent.from(stringWriter)).as(\"Invalid result\").isSimilarTo(XML);}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.StaxResultTests#eventWriterSource()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.StaxResult",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxResultTests#eventWriterSource()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "javax.xml.transform.Transformer",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxResultTests#eventWriterSource()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "javax.xml.stream.XMLEventWriter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxResultTests#eventWriterSource()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "javax.xml.stream.XMLStreamWriter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxResultTests#eventWriterSource()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "javax.xml.transform.Source",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxResultTests#eventWriterSource()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "javax.xml.transform.stream.StreamSource",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxResultTests#eventWriterSource()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "java.io.StringWriter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxResultTests#eventWriterSource()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "java.io.StringReader",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxResultTests#eventWriterSource()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.XmlContent",
            "tail_type": "class"
        },
        {
            "head": "transform XML using StaxResult",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "XML transformation scenarios",
            "tail_type": "useScenario"
        },
        {
            "head": "transform XML using StaxResult",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "XML structure must be valid",
            "tail_type": "useConstraint"
        },
        {
            "head": "transform XML using StaxResult",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "XML transformation scenarios",
            "tail_type": "useScenario"
        },
        {
            "head": "transform XML using StaxResult",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "XML structure must be valid",
            "tail_type": "useConstraint"
        },
        {
            "head": "transform XML using StaxResult",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "void eventWriterSource() throws Exception {    StringWriter stringWriter = new StringWriter();    XMLEventWriter eventWriter = inputFactory.createXMLEventWriter(stringWriter);    Reader reader = new StringReader(XML);    Source source = new StreamSource(reader);    StaxResult result = new StaxResult(eventWriter);    assertThat(result.getXMLEventWriter()).as(\"Invalid eventWriter returned\").isEqualTo(eventWriter);    assertThat(result.getXMLStreamWriter()).as(\"StreamWriter returned\").isNull();    transformer.transform(source, result);    assertThat(XmlContent.from(stringWriter)).as(\"Invalid result\").isSimilarTo(XML);}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "transform XML using StaxResult",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "StaxResult is used to write XML output to an XMLEventWriter or XMLStreamWriter.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "transform XML using StaxResult",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Design principle: Encapsulate XML transformation logic to provide a flexible and reusable component.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.StaxSourceTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "transform XML using StaxSource",
            "tail_type": "apiFunction"
        },
        {
            "head": "transform XML using StaxSource",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "streamReaderSourceToStreamResult",
            "tail_type": "useScenario"
        },
        {
            "head": "transform XML using StaxSource",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "streamReaderSourceToDOMResult",
            "tail_type": "useScenario"
        },
        {
            "head": "transform XML using StaxSource",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "eventReaderSourceToStreamResult",
            "tail_type": "useScenario"
        },
        {
            "head": "transform XML using StaxSource",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "eventReaderSourceToDOMResult",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.util.xml.StaxSourceTests",
            "head_type": "class",
            "relation": "have",
            "tail": "StaxSource can transform XMLStreamReader and XMLEventReader to StreamResult and DOMResult",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.StaxSourceTests",
            "head_type": "class",
            "relation": "have",
            "tail": "StaxSource is designed to work with XMLInputFactory and Transformer for XML processing",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.StaxSourceTests",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.StaxSource",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxSourceTests",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "XMLInputFactory",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxSourceTests",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "Transformer",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxSourceTests#setUp()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "TransformerFactory usage",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StaxSourceTests#setUp()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "XMLInputFactory usage",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StaxSourceTests#setUp()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "DocumentBuilderFactory usage",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StaxSourceTests#setUp()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Transformer creation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StaxSourceTests#setUp()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "DocumentBuilder creation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StaxSourceTests#setUp()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.StaxSourceTests",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxSourceTests#setUp()",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.StaxSourceTests#setUp()",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.StaxSourceTests#setUp()",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.StaxSourceTests#streamReaderSourceToStreamResult()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "streamReaderSourceToStreamResult",
            "tail_type": "apiFunction"
        },
        {
            "head": "streamReaderSourceToStreamResult",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.util.xml.StaxSourceTests",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxSourceTests#streamReaderSourceToDOMResult()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "streamReaderSourceToDOMResult",
            "tail_type": "apiFunction"
        },
        {
            "head": "streamReaderSourceToDOMResult",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.util.xml.StaxSourceTests",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxSourceTests#eventReaderSourceToStreamResult()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "transform XML using StaxSource",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StaxSourceTests#eventReaderSourceToStreamResult()",
            "head_type": "method",
            "relation": "have",
            "tail": "transform XML using StaxSource sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "transform XML using StaxSource sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "package org.springframework.util.xml; import javax.xml.stream.XMLEventReader; import javax.xml.stream.XMLInputFactory; import javax.xml.stream.XMLStreamReader; import javax.xml.transform.Transformer; import javax.xml.transform.TransformerFactory; import javax.xml.transform.stream.StreamResult; import org.springframework.util.XmlContent; import java.io.StringReader; import java.io.StringWriter; import static org.assertj.core.api.Assertions.assertThat; public class StaxSourceTest { @Test void eventReaderSourceToStreamResult() throws Exception { XMLEventReader eventReader = inputFactory.createXMLEventReader(new StringReader(XML)); StaxSource source = new StaxSource(eventReader); assertThat(source.getXMLEventReader()).as(\"Invalid eventReader returned\").isEqualTo(eventReader); assertThat(source.getXMLStreamReader()).as(\"StreamReader returned\").isNull(); StringWriter writer = new StringWriter(); transformer.transform(source, new StreamResult(writer)); assertThat(XmlContent.from(writer)).as(\"Invalid result\").isSimilarTo(XML); } }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.util.xml.StaxSourceTests#eventReaderSourceToStreamResult()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.StaxSource",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxSourceTests#eventReaderSourceToStreamResult()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.StaxSourceTests",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxSourceTests#eventReaderSourceToStreamResult()",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation for StaxSource",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "related concept interpretation for StaxSource",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "StaxSource is used to transform XML content by leveraging XMLEventReader and XMLStreamReader. It provides a bridge between XML parsing and transformation.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.StaxSourceTests#eventReaderSourceToStreamResult()",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation for StaxSource",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "design principle interpretation for StaxSource",
            "head_type": "designPrincipleInterpretation",
            "relation": "have",
            "tail": "StaxSource is designed to efficiently handle XML transformation tasks by utilizing the StAX API, ensuring high performance and flexibility in XML processing.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.StaxSourceTests#eventReaderSourceToDOMResult()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "transform XML using StaxSource",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StaxSourceTests#eventReaderSourceToDOMResult()",
            "head_type": "method",
            "relation": "have",
            "tail": "transform XML using StaxSource sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "transform XML using StaxSource sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.util.xml.StaxSourceTests#eventReaderSourceToDOMResult()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.util.xml.StaxSourceTests#eventReaderSourceToDOMResult()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.util.xml.StaxSource",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxSourceTests#eventReaderSourceToDOMResult()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "javax.xml.transform.Transformer",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxSourceTests#eventReaderSourceToDOMResult()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "javax.xml.transform.dom.DOMResult",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxSourceTests#eventReaderSourceToDOMResult()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.w3c.dom.Document",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxSourceTests#eventReaderSourceToDOMResult()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "javax.xml.parsers.DocumentBuilder",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxSourceTests#eventReaderSourceToDOMResult()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "javax.xml.transform.sax.SAXSource",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxSourceTests#eventReaderSourceToDOMResult()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "javax.xml.transform.stream.StreamSource",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxSourceTests#eventReaderSourceToDOMResult()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "javax.xml.transform.dom.DOMSource",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxSourceTests#eventReaderSourceToDOMResult()",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation for XML transformation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "related concept interpretation for XML transformation",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "org.springframework.util.xml.StaxSourceTests#eventReaderSourceToDOMResult()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.util.xml.StaxSourceTests#eventReaderSourceToDOMResult()",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation for XML transformation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "design principle interpretation for XML transformation",
            "head_type": "designPrincipleInterpretation",
            "relation": "have",
            "tail": "org.springframework.util.xml.StaxSourceTests#eventReaderSourceToDOMResult()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.util.xml.StaxStreamHandlerTests",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "createStaxHandler",
            "tail_type": "apiFunction"
        },
        {
            "head": "createStaxHandler",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "createStaxHandler",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "AbstractStaxHandler",
            "tail_type": "class"
        },
        {
            "head": "createStaxHandler",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "XMLOutputFactory",
            "tail_type": "class"
        },
        {
            "head": "createStaxHandler",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "XMLStreamWriter",
            "tail_type": "class"
        },
        {
            "head": "createStaxHandler",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "StaxStreamHandler",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxStreamHandlerTests",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.util.xml.StaxStreamHandlerTests",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.util.xml.StaxStreamHandlerTests#createStaxHandler(Result)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "create XML stream writer",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.util.xml.StaxStreamHandlerTests#createStaxHandler(Result)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "XMLOutputFactory",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxStreamHandlerTests#createStaxHandler(Result)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "XMLStreamWriter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxStreamHandlerTests#createStaxHandler(Result)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "StaxStreamHandler",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.util.xml.StaxStreamHandlerTests#createStaxHandler(Result)",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "sample code for creating StaxHandler",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Frame#copyFrom(Frame)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "copy frame data",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Frame#copyFrom(Frame)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "shared data structures",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.Frame#copyFrom(Frame)",
            "head_type": "method",
            "relation": "have",
            "tail": "copy frame data sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Frame#copyFrom(Frame)",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Frame#copyFrom(Frame)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Frame",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Frame#copyFrom(Frame)",
            "tail_type": "method"
        }
    ]
}