{
    "relationships": [
        {
            "head": "org.springframework.asm.Type#getType(String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getType",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Type#getType(String)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "typeDescriptorMustBeValid",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.Type#getType(String)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "fieldOrMethodTypeDescriptor",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Type#getType(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Type#getType(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Type#getType(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Type#getType(String)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Type",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.Type#getType(Class<?>)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getType",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Type#getType(Class<?>)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "class must not be primitive",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.Type#getType(Class<?>)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "class type conversion",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Type#getType(Class<?>)",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for getType method",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Type#getType(Class<?>)",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation for getType method",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Type#getType(Class<?>)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation for getType method",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Type#getType(Class<?>)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Type",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.Type#getType(Constructor<?>)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getType(Constructor<?>)",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Type#getType(Constructor<?>)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Type",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.Type#getType(Constructor<?>)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "Constructor<?>",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.Type#getType(Constructor<?>)",
            "head_type": "method",
            "relation": "have",
            "tail": "Returns the method Type corresponding to the given constructor.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Type#getType(Constructor<?>)",
            "head_type": "method",
            "relation": "have",
            "tail": "The method Type is used to represent the type of a method in the Java Virtual Machine (JVM).",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Type#getType(Constructor<?>)",
            "head_type": "method",
            "relation": "have",
            "tail": "public static Type getType(final Constructor<?> constructor) {\n    return getType(getConstructorDescriptor(constructor));\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Type#getType(Method)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getType",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Type#getType(Method)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Type",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.Type#getType(Method)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "Method",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.Type#getType(Method)",
            "head_type": "method",
            "relation": "have",
            "tail": "Returns the method Type corresponding to the given method.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Type#getType(Method)",
            "head_type": "method",
            "relation": "have",
            "tail": "The method Type represents the type of a method in the Java Virtual Machine.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Type#getType(Method)",
            "head_type": "method",
            "relation": "have",
            "tail": "public static Type getType(final Method method) {\n    return getType(getMethodDescriptor(method));\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Type#getElementType()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getElementType",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Type#getElementType()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "arrayTypeOnly",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.Type#getElementType()",
            "head_type": "method",
            "relation": "have",
            "tail": "getElementTypeSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Type#getElementType()",
            "head_type": "method",
            "relation": "have",
            "tail": "arrayTypeOnlyInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Type#getElementType()",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "getElementTypeSampleCode",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Type",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.Type#getObjectType(String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getObjectType",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Type#getObjectType(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "getObjectType(String) useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Type#getObjectType(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "getObjectType(String) relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Type#getObjectType(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "getObjectType(String) designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "getObjectType(String) useSampleCode",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Type",
            "tail_type": "class"
        },
        {
            "head": "getObjectType(String) relatedConceptInterpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Type",
            "tail_type": "class"
        },
        {
            "head": "getObjectType(String) designPrincipleInterpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Type",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.Type#getMethodType(String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Type Conversion",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Type#getMethodType(String)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "Valid Method Descriptor",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.Type#getMethodType(String)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "Method Descriptor Parsing",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Type#getMethodType(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "Method Descriptor Parsing Example",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Type#getMethodType(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "Type Conversion Explanation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Type#getMethodType(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "Design Principle for Type Conversion",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Type",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Type#getMethodType(String)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.Type#getMethodType(Type,Type)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getMethodType",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Type#getMethodType(Type,Type)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Type",
            "tail_type": "class"
        },
        {
            "head": "getMethodType",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "completeSampleCode",
            "tail_type": "completeSampleCode"
        },
        {
            "head": "completeSampleCode",
            "head_type": "completeSampleCode",
            "relation": "have",
            "tail": "codeContent",
            "tail_type": "codeContent"
        },
        {
            "head": "org.springframework.asm.Type#getArgumentTypes()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getArgumentTypes",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Type#getArgumentTypes()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "method types only",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.Type#getArgumentTypes()",
            "head_type": "method",
            "relation": "have",
            "tail": "getArgumentTypes sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Type#getArgumentTypes()",
            "head_type": "method",
            "relation": "have",
            "tail": "getArgumentTypes related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Type#getArgumentTypes()",
            "head_type": "method",
            "relation": "have",
            "tail": "getArgumentTypes design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "getArgumentTypes sample code",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Type",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.Type#getArgumentTypes(String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getArgumentTypes",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Type#getArgumentTypes(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "getArgumentTypes(String) useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getArgumentTypes(String) useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "getArgumentTypes(String) sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Type#getArgumentTypes(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "getArgumentTypes(String) relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "getArgumentTypes(String) relatedConceptInterpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "getArgumentTypes(String) related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Type#getArgumentTypes(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "getArgumentTypes(String) designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "getArgumentTypes(String) designPrincipleInterpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "have",
            "tail": "getArgumentTypes(String) design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Type#getArgumentTypes(Method)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getArgumentTypes",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Type#getArgumentTypes(Method)",
            "head_type": "method",
            "relation": "have",
            "tail": "getArgumentTypesSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getArgumentTypesSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "getArgumentTypesSampleCodeContent",
            "tail_type": "useSampleCodeContent"
        },
        {
            "head": "org.springframework.asm.Type#getArgumentTypes(Method)",
            "head_type": "method",
            "relation": "have",
            "tail": "getArgumentTypesRelatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "getArgumentTypesRelatedConceptInterpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "getArgumentTypesRelatedConceptInterpretationContent",
            "tail_type": "relatedConceptInterpretationContent"
        },
        {
            "head": "org.springframework.asm.Type#getArgumentTypes(Method)",
            "head_type": "method",
            "relation": "have",
            "tail": "getArgumentTypesDesignPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "getArgumentTypesDesignPrincipleInterpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "have",
            "tail": "getArgumentTypesDesignPrincipleInterpretationContent",
            "tail_type": "designPrincipleInterpretationContent"
        },
        {
            "head": "org.springframework.asm.Type#getReturnType()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getReturnType",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Type#getReturnType()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "methodTypeConstraint",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.Type#getReturnType()",
            "head_type": "method",
            "relation": "have",
            "tail": "getReturnTypeSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Type#getReturnType()",
            "head_type": "method",
            "relation": "have",
            "tail": "returnTypeExplanation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Type#getReturnType()",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrinciple",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Type",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Type#getReturnType()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.Type",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getReturnType",
            "tail_type": "apiFunction"
        },
        {
            "head": "getReturnType",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "getReturnTypeUsageScenario",
            "tail_type": "useScenario"
        },
        {
            "head": "getReturnType",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "getReturnTypeSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getReturnType",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "getReturnTypeConstraint",
            "tail_type": "useConstraint"
        },
        {
            "head": "getReturnType",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "getReturnType",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Type",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Type#getReturnType(String)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.Type#getReturnType(Method)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getReturnType",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Type#getReturnType(Method)",
            "head_type": "method",
            "relation": "have",
            "tail": "getReturnTypeSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getReturnTypeSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "getReturnTypeCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Type#getReturnType(Method)",
            "head_type": "method",
            "relation": "have",
            "tail": "getReturnTypeRelatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "getReturnTypeRelatedConceptInterpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "Type and Method Relationship",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Type#getReturnType(Method)",
            "head_type": "method",
            "relation": "have",
            "tail": "getReturnTypeDesignPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "getReturnTypeDesignPrincipleInterpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "have",
            "tail": "Efficient Type Retrieval",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Type#getReturnTypeOffset(String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "get return type offset",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Type#getReturnTypeOffset(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "Returns the start index of the return type of the given method descriptor.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Type",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Type#getReturnTypeOffset(String)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.Type#getReturnTypeOffset(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "static int getReturnTypeOffset(final String methodDescriptor) {\n    // Skip the first character, which is always a '('.\n    int currentOffset = 1;\n    // Skip the argument types, one at a each loop iteration.\n    while (methodDescriptor.charAt(currentOffset) != ')') {\n        while (methodDescriptor.charAt(currentOffset) == '[') {\n            currentOffset++;\n        }\n        if (methodDescriptor.charAt(currentOffset++) == 'L') {\n            // Skip the argument descriptor content.\n            int semiColumnOffset = methodDescriptor.indexOf(';', currentOffset);\n            currentOffset = Math.max(currentOffset, semiColumnOffset + 1);\n        }\n    }\n    return currentOffset + 1;\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Type#getTypeInternal(String,int,int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getTypeInternal",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Type#getTypeInternal(String,int,int)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "valid_descriptor_format",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.Type#getTypeInternal(String,int,int)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "field_or_method_descriptor_parsing",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Type#getTypeInternal(String,int,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "field_or_method_descriptor_parsing_sample_code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Type#getTypeInternal(String,int,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "type_descriptor_interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Type#getTypeInternal(String,int,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "design_principles_of_getTypeInternal",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Type",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Type#getTypeInternal(String,int,int)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.Type#getClassName()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getClassName",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Type#getClassName()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "notUsedOnMethodTypes",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.Type#getClassName()",
            "head_type": "method",
            "relation": "have",
            "tail": "getClassNameSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getClassNameSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "getClassNameSampleCodeContent",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Type#getClassName()",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "relatedConceptInterpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "relatedConceptInterpretationContent",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Type#getClassName()",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "designPrincipleInterpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "have",
            "tail": "designPrincipleInterpretationContent",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Type#getInternalName()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getInternalName",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Type#getInternalName()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "onlyForObjectOrArrayType",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.Type#getInternalName()",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "classInternalNameRetrieval",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Type#getInternalName()",
            "head_type": "method",
            "relation": "have",
            "tail": "classInternalNameRetrievalSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Type#getInternalName()",
            "head_type": "method",
            "relation": "have",
            "tail": "classInternalNameRetrievalConcept",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Type#getInternalName()",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleForInternalNameRetrieval",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Type",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Type#getInternalName()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.Type#getInternalName(Class<?>)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getInternalName",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Type#getInternalName(Class<?>)",
            "head_type": "method",
            "relation": "have",
            "tail": "Returns the internal name of the given class",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Type#getInternalName(Class<?>)",
            "head_type": "method",
            "relation": "have",
            "tail": "The internal name of a class is its fully qualified name, as returned by Class.getName(), where '.' are replaced by '/'",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Type#getInternalName(Class<?>)",
            "head_type": "method",
            "relation": "have",
            "tail": "public static String getInternalName(final Class<?> clazz) {\n    return clazz.getName().replace('.', '/');\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Type#getDescriptor()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getDescriptor",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Type#getDescriptor()",
            "head_type": "method",
            "relation": "have",
            "tail": "Returns the descriptor corresponding to this type.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Type#getDescriptor()",
            "head_type": "method",
            "relation": "have",
            "tail": "public String getDescriptor() {\n    if (sort == OBJECT) {\n        return valueBuffer.substring(valueBegin - 1, valueEnd + 1);\n    } else if (sort == INTERNAL) {\n        return 'L' + valueBuffer.substring(valueBegin, valueEnd) + ';';\n    } else {\n        return valueBuffer.substring(valueBegin, valueEnd);\n    }\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Type#getDescriptor(Class<?>)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getDescriptor",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Type#getDescriptor(Class<?>)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "classTypeConstraint",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.Type#getDescriptor(Class<?>)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "classDescriptorUsage",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Type#getDescriptor(Class<?>)",
            "head_type": "method",
            "relation": "have",
            "tail": "classDescriptorSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Type#getDescriptor(Class<?>)",
            "head_type": "method",
            "relation": "have",
            "tail": "classDescriptorRelatedConcepts",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Type#getDescriptor(Class<?>)",
            "head_type": "method",
            "relation": "have",
            "tail": "classDescriptorDesignPrinciples",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Type",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Type#getDescriptor(Class<?>)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.Type",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getConstructorDescriptor(Constructor<?>)",
            "tail_type": "apiFunction"
        },
        {
            "head": "getConstructorDescriptor(Constructor<?>)",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Returns the descriptor corresponding to the given constructor.",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getConstructorDescriptor(Constructor<?>)",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "The method returns a string descriptor for a given constructor, which includes the parameter types and a void return type.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "getConstructorDescriptor(Constructor<?>)",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "The design principle followed here is to provide a convenient way to obtain the descriptor of a constructor, which can be useful for serialization, reflection, and other runtime operations.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "getConstructorDescriptor(Constructor<?>)",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "public static String getConstructorDescriptor(final Constructor<?> constructor) {\n    StringBuilder stringBuilder = new StringBuilder();\n    stringBuilder.append('(');\n    Class<?>[] parameters = constructor.getParameterTypes();\n    for (Class<?> parameter : parameters) {\n        appendDescriptor(parameter, stringBuilder);\n    }\n    return stringBuilder.append(\")V\").toString();\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Type#getMethodDescriptor(Type,Type)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getMethodDescriptor",
            "tail_type": "apiFunction"
        },
        {
            "head": "getMethodDescriptor",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "sampleCode",
            "tail_type": "sampleCode"
        },
        {
            "head": "getMethodDescriptor",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "relatedConceptInterpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "conceptDescription",
            "tail_type": "conceptDescription"
        },
        {
            "head": "getMethodDescriptor",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "designPrincipleInterpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "have",
            "tail": "principleDescription",
            "tail_type": "principleDescription"
        },
        {
            "head": "org.springframework.asm.Type#getMethodDescriptor(Method)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getMethodDescriptor",
            "tail_type": "apiFunction"
        },
        {
            "head": "getMethodDescriptor",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "org.springframework.asm.Type",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.Type",
            "head_type": "class",
            "relation": "have",
            "tail": "getMethodDescriptor",
            "tail_type": "apiFunction"
        },
        {
            "head": "getMethodDescriptor",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "relatedConceptInterpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Type#appendDescriptor(StringBuilder)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Appending descriptor to StringBuilder",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Type#appendDescriptor(StringBuilder)",
            "head_type": "method",
            "relation": "have",
            "tail": "Appending descriptor to StringBuilder - Sample Code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "Appending descriptor to StringBuilder - Sample Code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "package com.healthMgr.common.email;\nimport java.lang.StringBuilder;\npublic class DescriptorAppender {\n    private void appendDescriptor(final StringBuilder stringBuilder) {\n        if (sort == OBJECT) {\n            stringBuilder.append(valueBuffer, valueBegin - 1, valueEnd + 1);\n        } else if (sort == INTERNAL) {\n            stringBuilder.append('L').append(valueBuffer, valueBegin, valueEnd).append(';');\n        } else {\n            stringBuilder.append(valueBuffer, valueBegin, valueEnd);\n        }\n    }\n}",
            "tail_type": "code"
        },
        {
            "head": "org.springframework.asm.Type#appendDescriptor(StringBuilder)",
            "head_type": "method",
            "relation": "have",
            "tail": "Appending descriptor to StringBuilder - Related Concept Interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "Appending descriptor to StringBuilder - Related Concept Interpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "Appending descriptor involves converting internal type representations into a human-readable format and appending them to a StringBuilder. This is commonly used in bytecode manipulation to generate type descriptors for classes, methods, and fields.",
            "tail_type": "description"
        },
        {
            "head": "org.springframework.asm.Type#appendDescriptor(StringBuilder)",
            "head_type": "method",
            "relation": "have",
            "tail": "Appending descriptor to StringBuilder - Design Principle Interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "Appending descriptor to StringBuilder - Design Principle Interpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "have",
            "tail": "The design principle behind this method is to provide a flexible and efficient way to manipulate bytecode by abstracting the details of descriptor formatting. This allows developers to focus on higher-level logic without worrying about the intricacies of bytecode structure.",
            "tail_type": "description"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.CustomNullableProcessor",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "process",
            "tail_type": "apiFunction"
        },
        {
            "head": "process",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "String process(@org.springframework.core.testfixture.nullness.custom.Nullable String nullable);",
            "tail_type": "useSampleCode"
        },
        {
            "head": "process",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "The method 'process' is designed to handle nullable strings annotated with @org.springframework.core.testfixture.nullness.custom.Nullable.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "process",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "The design principle behind 'process' is to provide a mechanism for processing strings that may be null, ensuring that the method's behavior is well-defined even when dealing with nullable inputs.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.CustomNullableProcessor#process(String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "process nullable string",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.CustomNullableProcessor#process(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "process nullable string sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "process nullable string sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "org.springframework.core.testfixture.nullness.custom.Nullable",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.CustomNullableProcessor#process(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.CustomNullableProcessor#process(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Type#appendDescriptor(Class<?>,StringBuilder)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Appending Descriptor",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Type#appendDescriptor(Class<?>,StringBuilder)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "Input Class Must Have Descriptor",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.Type#appendDescriptor(Class<?>,StringBuilder)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "Appending Class Descriptor to StringBuilder",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Type#appendDescriptor(Class<?>,StringBuilder)",
            "head_type": "method",
            "relation": "have",
            "tail": "Appending Class Descriptor to StringBuilder Sample Code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Type#appendDescriptor(Class<?>,StringBuilder)",
            "head_type": "method",
            "relation": "have",
            "tail": "Related Concept Interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Type#appendDescriptor(Class<?>,StringBuilder)",
            "head_type": "method",
            "relation": "have",
            "tail": "Design Principle Interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "Appending Class Descriptor to StringBuilder Sample Code",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Type#appendDescriptor(Class<?>,StringBuilder)",
            "tail_type": "method"
        },
        {
            "head": "Related Concept Interpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Type#appendDescriptor(Class<?>,StringBuilder)",
            "tail_type": "method"
        },
        {
            "head": "Design Principle Interpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Type#appendDescriptor(Class<?>,StringBuilder)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.Type#getSort()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getSort",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Type",
            "head_type": "class",
            "relation": "have",
            "tail": "getSort()",
            "tail_type": "method"
        },
        {
            "head": "getSort",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Returns the sort of this type.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "getSort",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "public int getSort() { return sort == INTERNAL ? OBJECT : sort; }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getSort",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "The method returns an integer representing the sort of the type.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Type#getDimensions()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "get number of dimensions of array type",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Type#getDimensions()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "method should only be used for an array type",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.Type#getDimensions()",
            "head_type": "method",
            "relation": "have",
            "tail": "Returns the number of dimensions of this array type. This method should only be used for an array type.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Type#getDimensions()",
            "head_type": "method",
            "relation": "have",
            "tail": "public int getDimensions() { int numDimensions = 1; while (valueBuffer.charAt(valueBegin + numDimensions) == '[') { numDimensions++; } return numDimensions; }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Type#getSize()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getSize",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Type#getSize()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "not for method types",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.Type#getSize()",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for getSize method",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Type#getSize()",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation for getSize method",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Type#getSize()",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation for getSize method",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Type#getArgumentCount()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "get the number of arguments of a method type",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Type#getArgumentCount()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "should only be used for method types",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.Type#getArgumentCount()",
            "head_type": "method",
            "relation": "have",
            "tail": "each argument counts for 1, even long and double ones. The implicit 'this' argument is not counted.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Type#getArgumentCount()",
            "head_type": "method",
            "relation": "have",
            "tail": "public int getArgumentCount() { return getArgumentCount(getDescriptor()); }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Type",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getArgumentCount",
            "tail_type": "apiFunction"
        },
        {
            "head": "getArgumentCount",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "counting method arguments",
            "tail_type": "useScenario"
        },
        {
            "head": "getArgumentCount",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "public static int getArgumentCount(final String methodDescriptor) { ... }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getArgumentCount",
            "head_type": "apiFunction",
            "relation": "relatedConceptInterpretation",
            "tail": "Method descriptors are used to describe the parameters and return types of methods in Java bytecode.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "getArgumentCount",
            "head_type": "apiFunction",
            "relation": "designPrincipleInterpretation",
            "tail": "This method is designed to accurately count the number of arguments in a method descriptor, adhering to the JVM specification.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Type#getArgumentsAndReturnSizes()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getArgumentsAndReturnSizes",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Type#getArgumentsAndReturnSizes()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "methodTypeConstraint",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.Type#getArgumentsAndReturnSizes()",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "methodTypeUsage",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Type#getArgumentsAndReturnSizes()",
            "head_type": "method",
            "relation": "have",
            "tail": "getArgumentsAndReturnSizesSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Type#getArgumentsAndReturnSizes()",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Type#getArgumentsAndReturnSizes()",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Type",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Type#getArgumentsAndReturnSizes()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.Type#getArgumentsAndReturnSizes(String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "computeSizeOfMethodArgumentsAndReturnValue",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Type#getArgumentsAndReturnSizes(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "computeSizeOfMethodArgumentsAndReturnValueSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "computeSizeOfMethodArgumentsAndReturnValueSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "computeSizeOfMethodArgumentsAndReturnValueCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Type#getArgumentsAndReturnSizes(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "computeSizeOfMethodArgumentsAndReturnValueDescription",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Type#getOpcode(int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "adapting JVM instruction opcode",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Type#getOpcode(int)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "must not be used for method types",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.Type#getOpcode(int)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "returning adapted opcode for given type",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Type#getOpcode(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for adapting opcode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Type#getOpcode(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation for JVM instruction opcodes",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Type#getOpcode(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation for adapting opcode",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Type",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Type#getOpcode(int)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.Type#equals(Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "equality check",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Type#equals(Object)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "object type constraint",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.Type#equals(Object)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "object comparison",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.Type#equals(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.asm.Type",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.Type#equals(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Type#equals(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Type#equals(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "use sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "equality check",
            "head_type": "apiFunction",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Type#equals(Object)",
            "tail_type": "method"
        },
        {
            "head": "object type constraint",
            "head_type": "useConstraint",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Type#equals(Object)",
            "tail_type": "method"
        },
        {
            "head": "object comparison",
            "head_type": "useScenario",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Type#equals(Object)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.Type",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Type#equals(Object)",
            "tail_type": "method"
        },
        {
            "head": "related concept interpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Type#equals(Object)",
            "tail_type": "method"
        },
        {
            "head": "design principle interpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Type#equals(Object)",
            "tail_type": "method"
        },
        {
            "head": "use sample code",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.asm.Type#equals(Object)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.Type#hashCode()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "generate hash code",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Type#hashCode()",
            "head_type": "method",
            "relation": "have",
            "tail": "Returns a hash code value for this type.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Type#hashCode()",
            "head_type": "method",
            "relation": "have",
            "tail": "The method calculates and returns a hash code value for the type represented by the object on which it is called.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Type#hashCode()",
            "head_type": "method",
            "relation": "have",
            "tail": "java\npackage org.springframework.asm;\n\npublic class Type {\n    private int sort;\n    private char[] valueBuffer;\n    private int valueBegin;\n    private int valueEnd;\n\n    public int hashCode() {\n        int hashCode = 13 * (sort == INTERNAL ? OBJECT : sort);\n        if (sort >= ARRAY) {\n            for (int i = valueBegin, end = valueEnd; i < end; i++) {\n                hashCode = 17 * (hashCode + valueBuffer.charAt(i));\n            }\n        }\n        return hashCode;\n    }\n}\n",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.Type#toString()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "string representation of type",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.Type#toString()",
            "head_type": "method",
            "relation": "have",
            "tail": "Returns a string representation of this type.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.Type#toString()",
            "head_type": "method",
            "relation": "have",
            "tail": "The method returns the descriptor of this type.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.Type#toString()",
            "head_type": "method",
            "relation": "have",
            "tail": "public String toString() {\n    return getDescriptor();\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "process",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "nullableProcess",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "nonNullProcess",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "markedProcess",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "nullableMarkedProcess",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "nonNullMarkedProcess",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "voidProcess",
            "tail_type": "apiFunction"
        },
        {
            "head": "process",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "nullableProcess",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "nonNullProcess",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "markedProcess",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "nullableMarkedProcess",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "nonNullMarkedProcess",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "voidProcess",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor#process(String,String,String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "process",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor#process(String,String,String)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.core.testfixture.nullness.JSpecifyProcessor",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor#process(String,String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor#nullableProcess()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "nullableProcess",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor#nullableProcess()",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.core.testfixture.nullness.JSpecifyProcessor",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.core.testfixture.nullness",
            "tail_type": "package"
        },
        {
            "head": "nullableProcess",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "org.springframework.core.testfixture.nullness.JSpecifyProcessor#nullableProcess()",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor#nullableProcess()",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "package org.springframework.core.testfixture.nullness; public class JSpecifyProcessor { @Nullable String nullableProcess(); }",
            "tail_type": "code"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor#nonNullProcess()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "nonNullProcess",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor#nonNullProcess()",
            "head_type": "method",
            "relation": "have",
            "tail": "nonNullProcess useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "nonNullProcess useSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "package com.healthMgr.common.email; import java.xxxx; public class OneClass { // specific code }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor#nonNullProcess()",
            "head_type": "method",
            "relation": "have",
            "tail": "nonNullProcess relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "nonNullProcess relatedConceptInterpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "The related concept interpretation for nonNullProcess",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor#nonNullProcess()",
            "head_type": "method",
            "relation": "have",
            "tail": "nonNullProcess designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "nonNullProcess designPrincipleInterpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "have",
            "tail": "The design principle interpretation for nonNullProcess",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor#markedProcess(String,String,String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "NullMarked processing",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor#markedProcess(String,String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "Process strings with nullness annotations",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor#markedProcess(String,String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "public String markedProcess(String unspecified, String nullable, String nonNull) { return unspecified + nullable + nonNull; }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor#markedProcess(String,String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "This method processes strings with different nullness annotations.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor#markedProcess(String,String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "The method follows JSPECIFY nullness annotations to ensure null-safety.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor#markedProcess(String,String,String)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.core.testfixture.nullness.JSpecifyProcessor",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor#nullableMarkedProcess()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "nullableMarkedProcess",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor#nullableMarkedProcess()",
            "head_type": "method",
            "relation": "have",
            "tail": " nullableMarkedProcess() method",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor#nullableMarkedProcess()",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor#nullableMarkedProcess()",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor#nullableMarkedProcess()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.core.testfixture.nullness.JSpecifyProcessor",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor#nonNullMarkedProcess()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "nonNullMarkedProcess",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor#nonNullMarkedProcess()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "NullMarked",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor#nonNullMarkedProcess()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "NonNull",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor#nonNullMarkedProcess()",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor#nonNullMarkedProcess()",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor#nonNullMarkedProcess()",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.core.testfixture.nullness.JSpecifyProcessor#nonNullMarkedProcess()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor#voidProcess()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "voidProcess",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor#voidProcess()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.core.testfixture.nullness.JSpecifyProcessor",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.TypePath",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "steps into the element type of an array type",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.TypePath",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "steps into the nested type of a class type",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.TypePath",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "steps into the bound of a wildcard type",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.TypePath",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "steps into a type argument of a generic type",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.TypePath",
            "head_type": "class",
            "relation": "have",
            "tail": "The path to a type argument, wildcard bound, array element type, or static inner type within an enclosing type",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.TypePath",
            "head_type": "class",
            "relation": "have",
            "tail": " Eric Bruneton",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.TypePath",
            "head_type": "class",
            "relation": "have",
            "tail": "Returns the length of this path, i.e. its number of steps.",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.TypePath",
            "head_type": "class",
            "relation": "have",
            "tail": "Returns the value of the given step of this path.",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.TypePath",
            "head_type": "class",
            "relation": "have",
            "tail": "Returns the index of the type argument that the given step is stepping into.",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.TypePath",
            "head_type": "class",
            "relation": "have",
            "tail": "Converts a type path in string form, in the format used by toString(), into a TypePath object.",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.TypePath",
            "head_type": "class",
            "relation": "have",
            "tail": "Returns a string representation of this type path.",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.TypePath",
            "head_type": "class",
            "relation": "have",
            "tail": "Puts the type_path JVMS structure corresponding to the given TypePath into the given ByteVector.",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.TypePath#getLength()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getLength",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.TypePath#getLength()",
            "head_type": "method",
            "relation": "have",
            "tail": "Returns the length of this path, i.e. its number of steps.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.TypePath#getLength()",
            "head_type": "method",
            "relation": "have",
            "tail": "public int getLength() { return typePathContainer[typePathOffset]; }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.TypePath#getStep(int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getStep",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.TypePath#getStep(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "getStepSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getStepSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "getStepSampleCodeContent",
            "tail_type": "useSampleCodeContent"
        },
        {
            "head": "org.springframework.asm.TypePath#getStep(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "getStepRelatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "getStepRelatedConceptInterpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "getStepRelatedConceptInterpretationContent",
            "tail_type": "relatedConceptInterpretationContent"
        },
        {
            "head": "org.springframework.asm.TypePath#getStep(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "getStepDesignPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "getStepDesignPrincipleInterpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "have",
            "tail": "getStepDesignPrincipleInterpretationContent",
            "tail_type": "designPrincipleInterpretationContent"
        },
        {
            "head": "org.springframework.asm.TypePath#getStepArgument(int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getStepArgument",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.TypePath#getStepArgument(int)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "index range",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.TypePath#getStepArgument(int)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "type argument step",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.TypePath#getStepArgument(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.TypePath#getStepArgument(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.TypePath#getStepArgument(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.TypePath",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.TypePath#getStepArgument(int)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.TypePath#fromString(String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "converting type path string to TypePath object",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.TypePath#fromString(String)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "typePath must be in string format used by toString()",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.TypePath#fromString(String)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "typePath in string form conversion",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.TypePath#fromString(String)",
            "head_type": "method",
            "relation": "have",
            "tail": "public static TypePath fromString(final String typePath) { ... }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.TypePath#fromString(String)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.TypePath",
            "tail_type": "class"
        },
        {
            "head": "converting type path string to TypePath object",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "This API function converts a string representation of a type path into a TypePath object.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "converting type path string to TypePath object",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "The design principle is to provide a straightforward method for parsing type paths from their string representation, ensuring compatibility with the toString() format.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.TypePath#toString()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "string representation of type path",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.TypePath#toString()",
            "head_type": "method",
            "relation": "have",
            "tail": "Returns a string representation of this type path. ARRAY_ELEMENT steps are represented with '[', INNER_TYPE steps with '.', WILDCARD_BOUND steps with '*' and TYPE_ARGUMENT steps with their type argument index in decimal form followed by ';'.",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.TypePath#toString()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.TypePath",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.TypePath#toString()",
            "head_type": "method",
            "relation": "have",
            "tail": "The method converts the type path into a human-readable string format, where different types of steps in the path are represented by specific characters or numbers.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.TypePath#toString()",
            "head_type": "method",
            "relation": "have",
            "tail": "The design principle behind this method is to provide a clear and concise way to represent complex type paths, making it easier for developers to understand and debug type information in bytecode.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.TypePath#put(TypePath,ByteVector)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "puts the type_path JVMS structure",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.TypePath#put(TypePath,ByteVector)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "typePath must be an instance of TypePath or null",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.TypePath#put(TypePath,ByteVector)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "empty paths",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.TypePath#put(TypePath,ByteVector)",
            "head_type": "method",
            "relation": "have",
            "tail": "static void put(final TypePath typePath, final ByteVector output) { if (typePath == null) { output.putByte(0); } else { int length = typePath.typePathContainer[typePath.typePathOffset] * 2 + 1; output.putByteArray(typePath.typePathContainer, typePath.typePathOffset, length); } }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.TypePath#put(TypePath,ByteVector)",
            "head_type": "method",
            "relation": "have",
            "tail": "This method is used to serialize the type path into a ByteVector. It handles null values by putting a single byte (0) into the output. For non-null TypePath instances, it calculates the length of the type path and puts the corresponding bytes into the output.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.TypePath#put(TypePath,ByteVector)",
            "head_type": "method",
            "relation": "have",
            "tail": "The design principle behind this method is to provide a straightforward and efficient way to serialize type paths. It ensures that the output format adheres to the JVMS structure, making it suitable for use in environments that require strict compliance with the Java Virtual Machine Specification.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.TypePath#put(TypePath,ByteVector)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.TypePath",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.TypePath#put(TypePath,ByteVector)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.ByteVector",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.marked.PackageMarkedJSpecifyProcessor",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "process",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.marked.PackageMarkedJSpecifyProcessor",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "nullableProcess",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.marked.PackageMarkedJSpecifyProcessor",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "nonNullProcess",
            "tail_type": "apiFunction"
        },
        {
            "head": "process",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "nullableProcess",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "nonNullProcess",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.marked.PackageMarkedJSpecifyProcessor#process(String,String,String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "process",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.marked.PackageMarkedJSpecifyProcessor#process(String,String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "process(String unspecified, @Nullable String nullable, @NonNull String nonNull);",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.marked.PackageMarkedJSpecifyProcessor#process(String,String,String)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.core.testfixture.nullness.marked.PackageMarkedJSpecifyProcessor",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.marked.PackageMarkedJSpecifyProcessor#nullableProcess()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": " nullableProcess()",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.marked.PackageMarkedJSpecifyProcessor#nullableProcess()",
            "head_type": "method",
            "relation": "have",
            "tail": " @Nullable String nullableProcess()",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.marked.PackageMarkedJSpecifyProcessor#nullableProcess()",
            "head_type": "method",
            "relation": "have",
            "tail": " @Nullable",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.marked.PackageMarkedJSpecifyProcessor#nullableProcess()",
            "head_type": "method",
            "relation": "have",
            "tail": " @Nullable",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.marked.PackageMarkedJSpecifyProcessor#nonNullProcess()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "nonNullProcess",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.marked.PackageMarkedJSpecifyProcessor#nonNullProcess()",
            "head_type": "method",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.marked.PackageMarkedJSpecifyProcessor#nonNullProcess()",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.marked.PackageMarkedJSpecifyProcessor#nonNullProcess()",
            "head_type": "method",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.TypeReference#newTypeReference(int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "create type reference",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.TypeReference#newTypeReference(int)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "sort must be one of predefined constants",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.TypeReference#newTypeReference(int)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "type reference creation",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.TypeReference#newTypeReference(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "create type reference sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.TypeReference#newTypeReference(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "type reference explanation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.TypeReference#newTypeReference(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle for type reference creation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.TypeReference#newTypeReference(int)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.TypeReference",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.TypeReference#newTypeParameterReference(int,int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "referenceToGenericTypeParameter",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.TypeReference#newTypeParameterReference(int,int)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "validSortAndParamIndex",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.TypeReference#newTypeParameterReference(int,int)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "genericClassOrMethod",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.TypeReference#newTypeParameterReference(int,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "referenceToGivenGenericClassOrMethodTypeParameter",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.TypeReference#newTypeParameterReference(int,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "typeParameterReferenceExplanation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.TypeReference#newTypeParameterReference(int,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleForTypeReference",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.TypeReference",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.TypeReference#newTypeParameterReference(int,int)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.TypeReference#newTypeParameterBoundReference(int,int,int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "referenceToTypeParameterBound",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.TypeReference#newTypeParameterBoundReference(int,int,int)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "sortMustBeClassOrMethodTypeParameter",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.TypeReference#newTypeParameterBoundReference(int,int,int)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "genericClassOrMethodTypeParameterBound",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.TypeReference#newTypeParameterBoundReference(int,int,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "sampleCodeForTypeParameterBoundReference",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.TypeReference#newTypeParameterBoundReference(int,int,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "interpretationOfGenericTypes",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.TypeReference#newTypeParameterBoundReference(int,int,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrinciplesOfTypeReference",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.TypeReference",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.TypeReference#newTypeParameterBoundReference(int,int,int)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.TypeReference#newSuperTypeReference(int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "referenceSuperType",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.TypeReference#newSuperTypeReference(int)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "validItfIndex",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.TypeReference#newSuperTypeReference(int)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "classSuperTypeReference",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.TypeReference#newSuperTypeReference(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "classSuperTypeReferenceSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.TypeReference#newSuperTypeReference(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "superTypeReferenceExplanation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.TypeReference#newSuperTypeReference(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrinciplesTypeReference",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.TypeReference",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.TypeReference#newSuperTypeReference(int)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.TypeReference#newFormalParameterReference(int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "reference to the type of a formal parameter of a method",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.TypeReference#newFormalParameterReference(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "Returns a reference to the type of a formal parameter of a method.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.TypeReference#newFormalParameterReference(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "The method returns a TypeReference object which encapsulates the type information of a formal parameter in a method.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.TypeReference#newFormalParameterReference(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "public static TypeReference newFormalParameterReference(final int paramIndex) {\n    return new TypeReference((METHOD_FORMAL_PARAMETER << 24) | (paramIndex << 16));\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.TypeReference#newExceptionReference(int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "reference to the type of an exception",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.TypeReference#newExceptionReference(int)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "exceptionIndex must be valid",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.TypeReference#newExceptionReference(int)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "getting type reference in 'throws' clause",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.TypeReference#newExceptionReference(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for newExceptionReference",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.TypeReference#newExceptionReference(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "interpretation of TypeReference",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.TypeReference#newExceptionReference(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principles of TypeReference",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.TypeReference#newExceptionReference(int)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.TypeReference",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.TypeReference#newTryCatchReference(int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "reference to the type of the exception",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.TypeReference#newTryCatchReference(int)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "tryCatchBlockIndex must be valid",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.TypeReference#newTryCatchReference(int)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "declaring exception types in catch clauses",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.TypeReference#newTryCatchReference(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for newTryCatchReference",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.TypeReference#newTryCatchReference(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "interpretation of exception handling",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.TypeReference#newTryCatchReference(int)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principles of exception type referencing",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.TypeReference#newTryCatchReference(int)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.TypeReference",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.TypeReference#newTypeArgumentReference(int,int)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "referenceTypeArgument",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.TypeReference#newTypeArgumentReference(int,int)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "validSortValue",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.TypeReference#newTypeArgumentReference(int,int)",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "constructorOrMethodCall",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.TypeReference#newTypeArgumentReference(int,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "completeExampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.TypeReference#newTypeArgumentReference(int,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "typeArgumentReferenceExplanation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.TypeReference#newTypeArgumentReference(int,int)",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleTypeReference",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.TypeReference#newTypeArgumentReference(int,int)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.TypeReference",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.TypeReference#getSort()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "returnTypeReferenceSort",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.TypeReference#getSort()",
            "head_type": "method",
            "relation": "have",
            "tail": "returnTypeReferenceSortSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "returnTypeReferenceSortSampleCode",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "TypeReferenceSortSampleCodeContent",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.TypeReference#getSort()",
            "head_type": "method",
            "relation": "have",
            "tail": "typeReferenceSortExplanation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "typeReferenceSortExplanation",
            "head_type": "relatedConceptInterpretation",
            "relation": "have",
            "tail": "TypeReferenceSortExplanationContent",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.TypeReference#getSort()",
            "head_type": "method",
            "relation": "have",
            "tail": "designPrincipleTypeReferenceSort",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "designPrincipleTypeReferenceSort",
            "head_type": "designPrincipleInterpretation",
            "relation": "have",
            "tail": "DesignPrincipleTypeReferenceSortContent",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.TypeReference#getTypeParameterIndex()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getTypeParameterIndex",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.TypeReference#getTypeParameterIndex()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "type reference sort constraint",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.TypeReference#getTypeParameterIndex()",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "type parameter index retrieval",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.TypeReference#getTypeParameterIndex()",
            "head_type": "method",
            "relation": "have",
            "tail": "type parameter index retrieval sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.TypeReference#getTypeParameterIndex()",
            "head_type": "method",
            "relation": "have",
            "tail": "type parameter index retrieval concept",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.TypeReference#getTypeParameterIndex()",
            "head_type": "method",
            "relation": "have",
            "tail": "type parameter index retrieval design",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.TypeReference",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.TypeReference#getTypeParameterIndex()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.TypeReference#getTypeParameterBoundIndex()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getTypeParameterBoundIndex",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.TypeReference#getTypeParameterBoundIndex()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "type reference sort constraint",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.TypeReference#getTypeParameterBoundIndex()",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "type parameter bound index retrieval",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.TypeReference#getTypeParameterBoundIndex()",
            "head_type": "method",
            "relation": "have",
            "tail": "type parameter bound index retrieval sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.TypeReference#getTypeParameterBoundIndex()",
            "head_type": "method",
            "relation": "have",
            "tail": "type parameter bound index retrieval concept",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.TypeReference#getTypeParameterBoundIndex()",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle for type parameter bound index retrieval",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.TypeReference#getTypeParameterBoundIndex()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.TypeReference",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.TypeReference#getSuperTypeIndex()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getSuperTypeIndex",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.TypeReference#getSuperTypeIndex()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "type reference sort must be CLASS_EXTENDS",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.TypeReference#getSuperTypeIndex()",
            "head_type": "method",
            "relation": "have",
            "tail": "getSuperTypeIndex sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.TypeReference#getSuperTypeIndex()",
            "head_type": "method",
            "relation": "have",
            "tail": "getSuperTypeIndex related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.TypeReference#getSuperTypeIndex()",
            "head_type": "method",
            "relation": "have",
            "tail": "getSuperTypeIndex design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "getSuperTypeIndex sample code",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.asm.TypeReference",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.TypeReference#getFormalParameterIndex()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getFormalParameterIndex",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.TypeReference#getFormalParameterIndex()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "type reference sort must be METHOD_FORMAL_PARAMETER",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.TypeReference#getFormalParameterIndex()",
            "head_type": "method",
            "relation": "have",
            "tail": "getFormalParameterIndex sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.TypeReference",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.TypeReference#getFormalParameterIndex()",
            "tail_type": "method"
        },
        {
            "head": "getFormalParameterIndex sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "getFormalParameterIndex complete example",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.TypeReference#getExceptionIndex()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getExceptionIndex",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.TypeReference#getExceptionIndex()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "type reference sort must be THROWS",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.TypeReference#getExceptionIndex()",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "reference to exception in 'throws' clause",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.TypeReference#getExceptionIndex()",
            "head_type": "method",
            "relation": "have",
            "tail": "getExceptionIndexSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.TypeReference#getExceptionIndex()",
            "head_type": "method",
            "relation": "have",
            "tail": "getExceptionIndexRelatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.TypeReference#getExceptionIndex()",
            "head_type": "method",
            "relation": "have",
            "tail": "getExceptionIndexDesignPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "getExceptionIndexSampleCode",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.asm.TypeReference",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.TypeReference#getTryCatchBlockIndex()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getTryCatchBlockIndex",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.TypeReference#getTryCatchBlockIndex()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "EXCEPTION_PARAMETER_constraint",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.TypeReference#getTryCatchBlockIndex()",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "EXCEPTION_PARAMETER_scenario",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.TypeReference#getTryCatchBlockIndex()",
            "head_type": "method",
            "relation": "have",
            "tail": "EXCEPTION_PARAMETER_sampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.TypeReference#getTryCatchBlockIndex()",
            "head_type": "method",
            "relation": "have",
            "tail": "EXCEPTION_PARAMETER_relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.TypeReference#getTryCatchBlockIndex()",
            "head_type": "method",
            "relation": "have",
            "tail": "EXCEPTION_PARAMETER_designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "EXCEPTION_PARAMETER_sampleCode",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.asm.TypeReference",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.TypeReference#getTypeArgumentIndex()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getTypeArgumentIndex",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.TypeReference#getTypeArgumentIndex()",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "type reference sort constraint",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.TypeReference#getTypeArgumentIndex()",
            "head_type": "method",
            "relation": "applied_to",
            "tail": "type reference usage",
            "tail_type": "useScenario"
        },
        {
            "head": "org.springframework.asm.TypeReference#getTypeArgumentIndex()",
            "head_type": "method",
            "relation": "have",
            "tail": "sample code for getTypeArgumentIndex",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.TypeReference#getTypeArgumentIndex()",
            "head_type": "method",
            "relation": "have",
            "tail": "type reference concept",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.TypeReference#getTypeArgumentIndex()",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle for getTypeArgumentIndex",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.asm.TypeReference",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.asm.TypeReference#getTypeArgumentIndex()",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.asm.TypeReference#getValue()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getValue",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.TypeReference#getValue()",
            "head_type": "method",
            "relation": "have",
            "tail": "Returns the int encoded value of this type reference, suitable for use in visit methods related to type annotations, like visitTypeAnnotation.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.TypeReference#getValue()",
            "head_type": "method",
            "relation": "have",
            "tail": "public int getValue() { return targetTypeAndInfo; }",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.TypeReference#getValue()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.asm.TypeReference",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.asm.TypeReference#putTarget(int,ByteVector)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "puts target_type and target_info JVMS structures into ByteVector",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.asm.TypeReference#putTarget(int,ByteVector)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": "LOCAL_VARIABLE and RESOURCE_VARIABLE target types are not supported",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.asm.TypeReference#putTarget(int,ByteVector)",
            "head_type": "method",
            "relation": "have",
            "tail": "puts the given target_type and target_info JVMS structures into the given ByteVector",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.asm.TypeReference#putTarget(int,ByteVector)",
            "head_type": "method",
            "relation": "have",
            "tail": "related to encoding target_type and target_info structures",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.asm.TypeReference#putTarget(int,ByteVector)",
            "head_type": "method",
            "relation": "have",
            "tail": "design principle of encoding type reference information",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.marked.unmarked.PackageUnmarkedJSpecifyProcessor",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "process",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.marked.unmarked.PackageUnmarkedJSpecifyProcessor",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "nullableProcess",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.marked.unmarked.PackageUnmarkedJSpecifyProcessor",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "nonNullProcess",
            "tail_type": "apiFunction"
        },
        {
            "head": "process",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "nullableProcess",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "nonNullProcess",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.marked.unmarked.PackageUnmarkedJSpecifyProcessor#process(String,String,String)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "process",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.marked.unmarked.PackageUnmarkedJSpecifyProcessor#process(String,String,String)",
            "head_type": "method",
            "relation": "have",
            "tail": "String process(String unspecified, @Nullable String nullable, @NonNull String nonNull);",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.marked.unmarked.PackageUnmarkedJSpecifyProcessor",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.core.testfixture.nullness.marked.unmarked.PackageUnmarkedJSpecifyProcessor#process(String,String,String)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.marked.unmarked.PackageUnmarkedJSpecifyProcessor#nullableProcess()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": " nullableProcess()",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.marked.unmarked.PackageUnmarkedJSpecifyProcessor#nullableProcess()",
            "head_type": "method",
            "relation": "have",
            "tail": " @Nullable String nullableProcess();",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.marked.unmarked.PackageUnmarkedJSpecifyProcessor#nonNullProcess()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "nonNullProcess",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.marked.unmarked.PackageUnmarkedJSpecifyProcessor#nonNullProcess()",
            "head_type": "method",
            "relation": "have",
            "tail": "nonNullProcessSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "nonNullProcessSampleCode",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.core.testfixture.nullness.marked.unmarked.PackageUnmarkedJSpecifyProcessor",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.beans.BeanCopier",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "copy",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanCopier",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "create",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanCopier.Generator",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "setSource",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanCopier.Generator",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "setTarget",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanCopier.Generator",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "setUseConverter",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanCopier.Generator",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "create",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanCopier.Generator",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "generateClass",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanCopier.Generator",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "compatible",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanCopier",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanCopier",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanCopier",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.Converter",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.beans.BeanCopier.Generator",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.BeanCopier",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.beans.BeanCopier#create(Class,Class,boolean)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "BeanCopier creation",
            "tail_type": "apiFunction"
        },
        {
            "head": "BeanCopier creation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Copy properties from source bean to target bean",
            "tail_type": "useScenario"
        },
        {
            "head": "BeanCopier creation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Converter can be used for type conversion",
            "tail_type": "useConstraint"
        },
        {
            "head": "BeanCopier creation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "org.springframework.cglib.beans.BeanCopier#create(Class,Class,boolean)",
            "tail_type": "useSampleCode"
        },
        {
            "head": "BeanCopier creation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "BeanCopier is used for efficient property copying",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "BeanCopier creation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Design principle: Optimize performance by minimizing reflection usage",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanCopier",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "BeanCopier creation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanCopier#copy(Object,Object,Converter)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "copy objects with converter",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanCopier#copy(Object,Object,Converter)",
            "head_type": "method",
            "relation": "have",
            "tail": "copy objects with converter sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.BeanCopier#copy(Object,Object,Converter)",
            "head_type": "method",
            "relation": "have",
            "tail": "copy objects with converter related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanCopier#copy(Object,Object,Converter)",
            "head_type": "method",
            "relation": "have",
            "tail": "copy objects with converter design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanCopier",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.BeanCopier#copy(Object,Object,Converter)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.beans.BeanCopierKey",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "newInstance",
            "tail_type": "apiFunction"
        },
        {
            "head": "newInstance",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.BeanCopierKey#newInstance(String,String,boolean)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "beanCopying",
            "tail_type": "apiFunction"
        },
        {
            "head": "beanCopying",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "beanCopying",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "beanCopying",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanCopierKey#newInstance(String,String,boolean)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.BeanCopierKey",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.beans.Generator",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "Bean Copying",
            "tail_type": "apiFunction"
        },
        {
            "head": "Bean Copying",
            "head_type": "apiFunction",
            "relation": "constrained_by",
            "tail": "Source and Target Class Types",
            "tail_type": "useConstraint"
        },
        {
            "head": "Bean Copying",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "Object Property Mapping",
            "tail_type": "useScenario"
        },
        {
            "head": "Bean Copying",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "org.springframework.cglib.beans.Generator",
            "tail_type": "useSampleCode"
        },
        {
            "head": "Bean Copying",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Related to Java Reflection and Property Descriptors",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "Bean Copying",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "Design based on Reflection and Dynamic Code Generation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.Generator",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.AbstractClassGenerator",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#setSource(Class)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Setting Source Class",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#setSource(Class)",
            "head_type": "method",
            "relation": "have",
            "tail": "Sets the source class for the generator.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#setSource(Class)",
            "head_type": "method",
            "relation": "have",
            "tail": "public void setSource(Class source) {\n    this.source = source;\n    // SPRING PATCH BEGIN\n    setContextClass(source);\n    setNamePrefix(source.getName());\n    // SPRING PATCH END\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#setSource(Class)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.Generator",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#setTarget(Class)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Setting Target Class",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#setTarget(Class)",
            "head_type": "method",
            "relation": "have",
            "tail": "Set Target Class Sample Code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#setTarget(Class)",
            "head_type": "method",
            "relation": "have",
            "tail": "Related Concept Interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#setTarget(Class)",
            "head_type": "method",
            "relation": "have",
            "tail": "Design Principle Interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.Generator",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.Generator#setTarget(Class)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#setUseConverter(boolean)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "Setting Use Converter",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#setUseConverter(boolean)",
            "head_type": "method",
            "relation": "have",
            "tail": "Set Use Converter Sample Code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#setUseConverter(boolean)",
            "head_type": "method",
            "relation": "have",
            "tail": "Related Concept Interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#setUseConverter(boolean)",
            "head_type": "method",
            "relation": "have",
            "tail": "Design Principle Interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.Generator",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.Generator#setUseConverter(boolean)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#getDefaultClassLoader()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getDefaultClassLoader",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#getDefaultClassLoader()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.Generator",
            "tail_type": "class"
        },
        {
            "head": "getDefaultClassLoader",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "��取默认类加载器",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.Generator",
            "head_type": "class",
            "relation": "have",
            "tail": "设计原则：使用源对象的类加载器",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#getDefaultClassLoader()",
            "head_type": "method",
            "relation": "have",
            "tail": "使用示例代码",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#getProtectionDomain()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "getProtectionDomain",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#getProtectionDomain()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "ReflectUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#getProtectionDomain()",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "ProtectionDomain",
            "tail_type": "class"
        },
        {
            "head": "getProtectionDomain",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "getProtectionDomain() Sample Code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "getProtectionDomain() Sample Code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "Complete getProtectionDomain() Example",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#create()",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "BeanCopier creation",
            "tail_type": "apiFunction"
        },
        {
            "head": "BeanCopier creation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "BeanCopier creation sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "BeanCopier creation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "BeanCopier creation related concept interpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "BeanCopier creation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "BeanCopier creation design principle interpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.Generator",
            "head_type": "class",
            "relation": "associated_with",
            "tail": "BeanCopier creation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "generateClass",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "head_type": "method",
            "relation": "have",
            "tail": "generateClassSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "generateClassSampleCode",
            "head_type": "useSampleCode",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "head_type": "method",
            "relation": "have",
            "tail": "generateClassRelatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "generateClassRelatedConceptInterpretation",
            "head_type": "relatedConceptInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "head_type": "method",
            "relation": "have",
            "tail": "generateClassDesignPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "generateClassDesignPrincipleInterpretation",
            "head_type": "designPrincipleInterpretation",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
            "tail_type": "method"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#compatible(PropertyDescriptor,PropertyDescriptor)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "compatibility checking between PropertyDescriptor instances",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#compatible(PropertyDescriptor,PropertyDescriptor)",
            "head_type": "method",
            "relation": "constrained_by",
            "tail": " automatic widening conversions are not handled",
            "tail_type": "useConstraint"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#compatible(PropertyDescriptor,PropertyDescriptor)",
            "head_type": "method",
            "relation": "have",
            "tail": "private static boolean compatible(PropertyDescriptor getter, PropertyDescriptor setter) {\n    // TODO: allow automatic widening conversions?\n    return setter.getPropertyType().isAssignableFrom(getter.getPropertyType());\n}",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#compatible(PropertyDescriptor,PropertyDescriptor)",
            "head_type": "method",
            "relation": "have",
            "tail": "This method checks if two PropertyDescriptor instances are compatible based on their property types.",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#compatible(PropertyDescriptor,PropertyDescriptor)",
            "head_type": "method",
            "relation": "have",
            "tail": "The design principle followed here is to ensure type safety by verifying that the setter's property type is assignable from the getter's property type.",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#firstInstance(Class)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "ReflectUtils.newInstance(type)",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#firstInstance(Class)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "ReflectUtils",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#firstInstance(Class)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.core.ReflectUtils",
            "tail_type": "class"
        },
        {
            "head": "ReflectUtils.newInstance(type)",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "ReflectUtils.newInstance(type)",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "ReflectUtils.newInstance(type)",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#nextInstance(Object)",
            "head_type": "method",
            "relation": "haveFunction",
            "tail": "instance generation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#nextInstance(Object)",
            "head_type": "method",
            "relation": "have",
            "tail": "org.springframework.cglib.beans.Generator#nextInstance(Object) sample code",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#nextInstance(Object)",
            "head_type": "method",
            "relation": "associated_with",
            "tail": "org.springframework.cglib.beans.Generator",
            "tail_type": "class"
        },
        {
            "head": "org.springframework.cglib.beans.Generator#nextInstance(Object) sample code",
            "head_type": "useSampleCode",
            "relation": "have",
            "tail": "Complete sample code for nextInstance method",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.NullnessFields",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "fieldDeclaration",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.NullnessFields",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "nullableAnnotation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.NullnessFields",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "nonNullAnnotation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.NullnessFields",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "customNullableAnnotation",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.core.testfixture.nullness.NullnessFields",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "primitiveFieldDeclaration",
            "tail_type": "apiFunction"
        },
        {
            "head": "fieldDeclaration",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "nullableAnnotation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "nonNullAnnotation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "customNullableAnnotation",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "primitiveFieldDeclaration",
            "head_type": "apiFunction",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "generateClass",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "create",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "createHelper",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "addProperty",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "setSuperclass",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "firstInstance",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "nextInstance",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getDefaultClassLoader",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator",
            "head_type": "class",
            "relation": "haveFunction",
            "tail": "getProtectionDomain",
            "tail_type": "apiFunction"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator",
            "head_type": "class",
            "relation": "have",
            "tail": "relatedConceptInterpretation",
            "tail_type": "relatedConceptInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator",
            "head_type": "class",
            "relation": "have",
            "tail": "designPrincipleInterpretation",
            "tail_type": "designPrincipleInterpretation"
        },
        {
            "head": "org.springframework.cglib.beans.BeanGenerator",
            "head_type": "class",
            "relation": "have",
            "tail": "useSampleCode",
            "tail_type": "useSampleCode"
        },
        {
            "head": "generateClass",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "useScenario",
            "tail_type": "useScenario"
        },
        {
            "head": "create",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "useScenario",
            "tail_type": "useScenario"
        },
        {
            "head": "createHelper",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "useScenario",
            "tail_type": "useScenario"
        },
        {
            "head": "addProperty",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "useScenario",
            "tail_type": "useScenario"
        },
        {
            "head": "setSuperclass",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "useScenario",
            "tail_type": "useScenario"
        },
        {
            "head": "firstInstance",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "useScenario",
            "tail_type": "useScenario"
        },
        {
            "head": "nextInstance",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "useScenario",
            "tail_type": "useScenario"
        },
        {
            "head": "getDefaultClassLoader",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "useScenario",
            "tail_type": "useScenario"
        },
        {
            "head": "getProtectionDomain",
            "head_type": "apiFunction",
            "relation": "applied_to",
            "tail": "useScenario",
            "tail_type": "useScenario"
        }
    ]
}